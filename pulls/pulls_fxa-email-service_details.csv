,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/fxa-email-service/pulls/278,278,chore(readme): added forwarding link,,dannycoates,87619,2019-04-01T23:27:03Z,MEMBER,False,3,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f3aa1292d2c1680da4ec7ea8c1f137af334f492e,chore(readme): added forwarding link
1,https://api.github.com/repos/mozilla/fxa-email-service/pulls/277,277,Add Mozilla Code of Conduct,"Fixes #276


As of January 1 2019, Mozilla requires that all GitHub projects include this [CODE_OF_CONDUCT.md](https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md) file in the project root. The file has two parts:

1. Required Text - All text under the headings *Community Participation Guidelines and How to Report*, are required, and should not be altered.
2. Optional Text - The Project Specific Etiquette heading provides a space to speak more specifically about ways people can work effectively and inclusively together. Some examples of those can be found on the [Firefox Debugger](https://github.com/devtools-html/debugger.html/blob/master/CODE_OF_CONDUCT.md) project, and [Common Voice](https://github.com/mozilla/voice-web/blob/master/CODE_OF_CONDUCT.md). (The optional part is commented out in the [raw template file](https://raw.githubusercontent.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md), and will not be visible until you modify and uncomment that part.)

If you have any questions about this file, or Code of Conduct policies and procedures, please see [Mozilla-GitHub-Standards](https://wiki.mozilla.org/GitHub/Repository_Requirements) or email Mozilla-GitHub-Standards+CoC@mozilla.com.

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-30T06:53:37Z,NONE,False,15,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0742dbaf2c4f394cb4f6537897e17877a4628ed5,"Add Mozilla Code of Conduct file

Fixes #276.

_(Message COC002)_"
2,https://api.github.com/repos/mozilla/fxa-email-service/pulls/275,275,Merge train-130 into master,@mozilla/fxa-devs r?,philbooth,64367,2019-02-12T07:40:03Z,CONTRIBUTOR,True,8,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1a3ed5788a65ff7cf8f4ef505690f015430de208,release: 1.130.0
3,https://api.github.com/repos/mozilla/fxa-email-service/pulls/274,274,fix(api): use correct apostrophe character in email address regex,"Fixes #273.

Same underlying issue as mozilla/fxa-content-server#6702. Typing is hard.

@mozilla/fxa-devs r?",philbooth,64367,2019-02-11T18:04:13Z,CONTRIBUTOR,True,3,1,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b16f52e97da5fd1665654abc0a952f9502853c2a,fix(api): use correct apostrophe character in email address regex
4,https://api.github.com/repos/mozilla/fxa-email-service/pulls/272,272,[WIP] feat(docker): docker copy build,,vladikoff,128755,2018-12-21T21:09:56Z,CONTRIBUTOR,False,22,36,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1fec93d4ddef4fa3641180cdec58b53f83586351,wip docker refactor
5,https://api.github.com/repos/mozilla/fxa-email-service/pulls/268,268,Merge train-127 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-12-12T14:44:42Z,CONTRIBUTOR,True,25,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8a681898e946cbce667e585e625c3727d86d6cf7,release: 1.127.0
6,https://api.github.com/repos/mozilla/fxa-email-service/pulls/267,267,fix(scripts): ignore merge commits when generating changelog,"Fixes #252.

Sorry, I didn't tag this repo yesterday, been meaning to get this fixed first.

@mozilla/fxa-devs r?",philbooth,64367,2018-12-12T12:47:09Z,CONTRIBUTOR,True,3,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,489306b39802fe3bd53c7ea98969cabea04a3b38,fix(scripts): ignore merge commits when generating changelog
7,https://api.github.com/repos/mozilla/fxa-email-service/pulls/263,263,chore(docs): minor readme editorialisation,"Removes the link to the old feature doc, which contains outdated technical information. Also upgrades ""*some* FxA email traffic"" to ""*all* FxA email traffic"", because we're at 100% now.

@mozilla/fxa-devs r?",philbooth,64367,2018-12-07T15:14:44Z,CONTRIBUTOR,True,1,3,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8c8e29a7accccf9ea7ca03fbe4c0da9f2e264043,chore(docs): minor readme editorialisation
8,https://api.github.com/repos/mozilla/fxa-email-service/pulls/262,262,feat(code): update to rust 2018,"This is just the result of running `cargo fix --edition` then `cargo fmt`. There's other changes we could make to be more idiomatically 2018 (like removing `extern crate` and explicitly `use`-ing macros), but this is a fair start.

@mozilla/fxa-devs r?",philbooth,64367,2018-12-06T20:36:11Z,CONTRIBUTOR,True,108,83,31,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e77ea7a771f7e0b39f4b03d5962f1b2cd1d414d0,feat(code): update to rust 2018
9,https://api.github.com/repos/mozilla/fxa-email-service/pulls/261,261,feat(types): implement a serializable regex type,"Extraction from #258.

The configuration endpoint will have a regex property in the payload, which will also be written to Redis. Since `regex::Regex` doesn't provide implementations of `Deserialize` or `Serialize`, we must wrap it to implement them ourselves. This change does that by just serializing the string representation of the regex.

@mozilla/fxa-devs r?",philbooth,64367,2018-12-06T18:48:32Z,CONTRIBUTOR,True,62,0,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,83d46aecd6dcc4ce8b2291b1cab2172221b14368,feat(types): implement a serializable regex type
10,https://api.github.com/repos/mozilla/fxa-email-service/pulls/260,260,fix(errors): convert ses invalid domain error into a 400,"Fixes #248.

We've seen this [in Sentry](https://sentry.prod.mozaws.net/operations/email-service/issues/4962416/events/26146526/) a few times, SES returns an invalid domain for some email addresses that make it through our imperfect validation regex and we transform that into a 500, which generates noise. This change parses the error payload (it's *cough*XML*cough*), then checks the error code.

It's possible there will be other, specific error cases that we want to handle like this in the future, so I opted to bite the bullet and import a (lightweight) XML parser. We could probably have got away with a simple substring match, but this way should be more robust. I could have gone the other way of course and imported something that supports XPath, but that definitely feels like overkill for now (it may not be if future errors have significantly different payloads though).

@mozilla/fxa-devs r?",philbooth,64367,2018-12-06T17:36:51Z,CONTRIBUTOR,True,107,4,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5926a06e6dcf002922611dc1e41796d4c0a32ec2,fix(errors): convert ses invalid domain error into a 400
11,https://api.github.com/repos/mozilla/fxa-email-service/pulls/259,259,chore(deps): update sendgrid,"Extraction from another branch, split out to make the review simpler.

@mozilla/fxa-devs r?",philbooth,64367,2018-12-06T14:58:26Z,CONTRIBUTOR,True,28,25,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,bf5486fc8efacfb42eb983fcff35155334c30d87,chore(deps): update sendgrid
12,https://api.github.com/repos/mozilla/fxa-email-service/pulls/258,258,wip: add an endpoint for writing configuration data,"Related to #185.

Adds an endpoint that can write (or merge) config data to Redis. There's quite a lot here for a single reviewer, hence opening as `WIP` and I'll pull out some smaller chunks that can be reviewed independently over the next couple of days.",philbooth,64367,2018-12-05T19:54:49Z,CONTRIBUTOR,False,517,17,15,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6016854a6a279b53988f52e6e3e7b346d64fe062,wip: add an endpoint for writing configuration data
13,https://api.github.com/repos/mozilla/fxa-email-service/pulls/256,256,refactor(settings): implement Default in enum_boilerplate!,"Fixes #216.

The last part of the enum refactoring, since all our enums have a default value we may as well implement `Default` in `enum_boilerplate!` too.

The other thing mentioned for #216 was to use `rusoto_core::Region` but actually it doesn't work so well for us. The serialised format is an array, `[ name, endpoint ]`, whereas we only want to specify the name in our settings. So I figure we can leave it like it is for now and decide whether we want to implement our own `AwsRegion` type later.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-29T17:37:30Z,CONTRIBUTOR,True,11,29,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,a9c9a1bf6fbde83c257f808bc42b73d567cd6ab9,refactor(settings): implement Default in enum_boilerplate!
14,https://api.github.com/repos/mozilla/fxa-email-service/pulls/255,255,refactor(settings): promote LogFormat and LogLevel to enums,"Related to #216.

As well as creating the two enums, this change removes the `null` setting for `LogFormat`, because we already have `LogLevel::Off` and having two different ways to achieve the same thing seemed like a recipe for confusion.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-28T14:13:49Z,CONTRIBUTOR,True,163,78,15,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1ec10e9197f23a7c75803688825de23aa79dcc8c,refactor(settings): promote LogFormat and LogLevel to enums
15,https://api.github.com/repos/mozilla/fxa-email-service/pulls/254,254,Merge train-126 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-28T06:57:58Z,CONTRIBUTOR,True,14,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,bd3a58246b3de20b268ceb17e07e179d3240e502,release: 1.126.0
16,https://api.github.com/repos/mozilla/fxa-email-service/pulls/253,253,fix(db): remove unused DataType,"@philbooth i keep seeing this warning, this seems unused, confirm?",vladikoff,128755,2018-11-27T21:50:01Z,CONTRIBUTOR,True,0,2,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d807e215e9bd293ca9b2161b660cd50acaaeb4a1,fix(db): remove unused DataType
17,https://api.github.com/repos/mozilla/fxa-email-service/pulls/251,251,refactor(settings): rename `BounceLimit(s)` to `DeliveryProblemLimit(s)`,"This PR renames `BounceLimit(s)` to `DeliveryProblemLimit(s)`, which better describes what the struct is storing since it can contain delivery bounces and complaints.

Fixes #217 ",vbudhram,1295288,2018-11-27T14:12:03Z,CONTRIBUTOR,True,39,30,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1d5e817cc1a10013309b1632a1a87656e170ffe1,refactor(settings): rename `BounceLimit(s)` to `DeliveryProblemLimit(s)`
18,https://api.github.com/repos/mozilla/fxa-email-service/pulls/250,250,chore(build): lower the debug level to decrease binary size,"In https://github.com/mozilla-services/syncstorage-rs/pull/91#discussion_r235500761, it was pointed out that `debug = true` is the maximum debug info setting and Sentry can still pull out line numbers if we use a lower level instead. Ergo, `debug = 1`.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-22T07:39:38Z,CONTRIBUTOR,True,1,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,91a51730296e65f8cc897618323f3548bc38705f,chore(build): lower the debug level to decrease binary size
19,https://api.github.com/repos/mozilla/fxa-email-service/pulls/249,249,refactor(settings): promote Env to an enum from a wrapped string,"Related to #216.

There are a bunch of string settings that should be enums. As a first step to fixing that, here I pull out some common enum boilerplate to an `enum_boilerplate!` macro and use it to implement `Env`, which was previously a wrapped string, and `Provider`, which was already an enum.

I didn't try to fix any of the other settings yet because I thought the macro might be a contentious change. If this gets the green light, it will be straightforward to mop up the remaining settings using the same macro.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-21T18:14:20Z,CONTRIBUTOR,True,170,135,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,dba93f0dbf0ee1fc6a23f50c9337174f8873a412,refactor(settings): promote Env to an enum from a wrapped string
20,https://api.github.com/repos/mozilla/fxa-email-service/pulls/247,247,Uplift Train 125 to master,@philbooth filing so we don't forget,vladikoff,128755,2018-11-20T16:45:03Z,CONTRIBUTOR,True,19,3,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3fed10523fe0554919fad091980df957a57b6445,fix(sentry): stop passing 4xx errors to Sentry
21,https://api.github.com/repos/mozilla/fxa-email-service/pulls/247,247,Uplift Train 125 to master,@philbooth filing so we don't forget,vladikoff,128755,2018-11-20T16:45:03Z,CONTRIBUTOR,True,19,3,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7a3d60ec759ae17155722c8d9f90525709e4f9c6,"Merge pull request #245 from mozilla/pb/244

https://github.com/mozilla/fxa-email-service/pull/245
r=vladikoff"
22,https://api.github.com/repos/mozilla/fxa-email-service/pulls/247,247,Uplift Train 125 to master,@philbooth filing so we don't forget,vladikoff,128755,2018-11-20T16:45:03Z,CONTRIBUTOR,True,19,3,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,283a2840d9524f0e9c19d8cb9d5e7832c092ded0,"chore(package): bump version, update changelog"
23,https://api.github.com/repos/mozilla/fxa-email-service/pulls/246,246,chore(package): create an automated release script,"Fixes #214.

Adds a shell script that automates most of the work involved in tagging releases. The only thing it doesn't do is `git push`, because a manual check that everything worked before publishing the tag is obviously a good thing.

The script has one slight advantage over what we're using elsewhere, in that the order of entries in the changelog will always be sane, even when we're tagging patch releases for older trains. That's because the step for updating the changelog inserts the summary immediately before the preceding tag, rather than always putting it at the top of the file regardless of where we are in the tree.

There are three other, small differences in the changelog:

* I removed the leading `v` from the version in the section headings (it's still present in the tag itself), to match the style in our other changelogs.

* The date will not be inserted for future releases, because I wasn't sure of a reliable, portable way to format the date across all Linux/Unix flavours. I figure it's not a big deal because the date and time show up in `git log` and on GitHub anyway.

* I removed the empty anchor tags because we don't need them/they don't even show up on GitHub (presumably they're there for the benefit of some other platform). I dislike them because they're kind of ugly for anyone viewing the file as text.

These are all of the steps that the script performs, in order:

1. Identify the last tag that precedes `HEAD`, assign it to `LAST_TAG`.

2. Get the list of intervening one-line commit messages from `git log $LAST_TAG..HEAD`.

3. Parse each commit message in turn, building up summary sections for the commit log. This includes an `Other changes` section for any commits that don't match one of the recrognised formats.

4. Split `$LAST_TAG` and bump the appropriate part, then assemble the bumped tag as `NEW_TAG`.

5. Update `Cargo.toml` and `Cargo.lock` with `$NEW_TAG`.

6. Insert the summary for `$NEW_TAG` into the changelog, immediately before the summary for `$OLD_TAG`.

7. Commit the changes.

8. Tag the release.

Lastly, I wonder if some of you might be unhappy that we've written this ourselves rather than using a 3rd-party tool. I get where you're coming from, but fwiw this script is almost a verbatim copy ([ref](https://gitlab.com/philbooth/please-release-me/blob/master/release.sh)) of something I've been using in all my side-projects for the last couple of years. So it's reasonably battle-hardened at this point, although I'm sure there are still lots of exciting bugs for us to discover when we run it on different machines to mine. :grin:

@mozilla/fxa-devs r?",philbooth,64367,2018-11-20T14:12:36Z,CONTRIBUTOR,True,158,53,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,05acce118cb6b1963dddd1d23daf1ed7cb25de36,chore(package): create an automated release script
24,https://api.github.com/repos/mozilla/fxa-email-service/pulls/245,245,fix(sentry): stop passing 4xx errors to Sentry,"Fixes #244.

I made Sentry too noisy when I did #230. This ensures that only `500` errors show up there.

Opened against train 125 for a point release.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-20T12:22:27Z,CONTRIBUTOR,True,7,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3fed10523fe0554919fad091980df957a57b6445,fix(sentry): stop passing 4xx errors to Sentry
25,https://api.github.com/repos/mozilla/fxa-email-service/pulls/242,242,Cherry-pick fixes from v1.125.1 to train-124,"Related to #239.

This is not quite a clean cherry-pick of #240. The train-124 and train-125 branches have diverged significantly in a number of areas so there were conflicts to resolve around the error handling.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T10:02:12Z,CONTRIBUTOR,True,82,42,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e3d103debbb70f64b2c93692e4c94f3e80570a23,fix(ses): ensure html part gets charset=utf-8 content type
26,https://api.github.com/repos/mozilla/fxa-email-service/pulls/242,242,Cherry-pick fixes from v1.125.1 to train-124,"Related to #239.

This is not quite a clean cherry-pick of #240. The train-124 and train-125 branches have diverged significantly in a number of areas so there were conflicts to resolve around the error handling.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T10:02:12Z,CONTRIBUTOR,True,82,42,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ce24c166d2b18d17b29caff70fdf434b3552567c,fix(ses): add Sender header
27,https://api.github.com/repos/mozilla/fxa-email-service/pulls/242,242,Cherry-pick fixes from v1.125.1 to train-124,"Related to #239.

This is not quite a clean cherry-pick of #240. The train-124 and train-125 branches have diverged significantly in a number of areas so there were conflicts to resolve around the error handling.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T10:02:12Z,CONTRIBUTOR,True,82,42,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,07e36603c8242aecf8b5129a8617b22b5e599c49,fix(headers): propagate the Content-Language header
28,https://api.github.com/repos/mozilla/fxa-email-service/pulls/242,242,Cherry-pick fixes from v1.125.1 to train-124,"Related to #239.

This is not quite a clean cherry-pick of #240. The train-124 and train-125 branches have diverged significantly in a number of areas so there were conflicts to resolve around the error handling.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T10:02:12Z,CONTRIBUTOR,True,82,42,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8fd95135d5fab6b00b5ca5039ca74ee5e1daefc7,fix(ci): enable branch builds in travis
29,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,67320d2830bf0ce7c3f5e630d9e9093a0c9be225,fix(ses): ensure html part gets charset=utf-8 content type
30,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3e2786676339db8dc45d3bf7723f37317adae5d1,fix(ses): add Sender header
31,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,67ebf3fe77369b751794053d780e90f6f3a3400d,fix(headers): propagate the Content-Language header
32,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,14491612619dd4e58b775aa837e8e9cf7dcee10d,fix(ci): enable branch builds in travis
33,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5bd956cf30ddfac13d998a20501c36cf58ace4d6,"Merge pull request #240 from mozilla/pb/239

https://github.com/mozilla/fxa-email-service/pull/240
r=rfk"
34,https://api.github.com/repos/mozilla/fxa-email-service/pulls/241,241,Merge train-125 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-15T08:06:45Z,CONTRIBUTOR,True,97,53,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3d73bee8576f76c73a03347ce69bdea514c1c55a,"chore(package): bump version, update changelog"
35,https://api.github.com/repos/mozilla/fxa-email-service/pulls/240,240,fix(ses): ensure html part gets charset=utf-8 content type,"Fixes #239.

The missing `charset` in the `Content-Type` header caused train 124 to fail. I could have patched it in 124 but it feels like we're close enough to train 125 to patch it there instead now (and I don't even know if there's ops bandwidth to test it out in 124 again anyway).

I've also added the `Sender` header, although I don't *think* its absence was causing problems. The spec seems pretty clear that it falls back to the value of `From` by default, but email servers are a capricious species so better to be explicit.

The `Content-Language` header can only be patched in the auth server (patch incoming). The `Content-Transfer-Encoding` header is by design.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T07:00:59Z,CONTRIBUTOR,True,81,51,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,67320d2830bf0ce7c3f5e630d9e9093a0c9be225,fix(ses): ensure html part gets charset=utf-8 content type
36,https://api.github.com/repos/mozilla/fxa-email-service/pulls/240,240,fix(ses): ensure html part gets charset=utf-8 content type,"Fixes #239.

The missing `charset` in the `Content-Type` header caused train 124 to fail. I could have patched it in 124 but it feels like we're close enough to train 125 to patch it there instead now (and I don't even know if there's ops bandwidth to test it out in 124 again anyway).

I've also added the `Sender` header, although I don't *think* its absence was causing problems. The spec seems pretty clear that it falls back to the value of `From` by default, but email servers are a capricious species so better to be explicit.

The `Content-Language` header can only be patched in the auth server (patch incoming). The `Content-Transfer-Encoding` header is by design.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T07:00:59Z,CONTRIBUTOR,True,81,51,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3e2786676339db8dc45d3bf7723f37317adae5d1,fix(ses): add Sender header
37,https://api.github.com/repos/mozilla/fxa-email-service/pulls/240,240,fix(ses): ensure html part gets charset=utf-8 content type,"Fixes #239.

The missing `charset` in the `Content-Type` header caused train 124 to fail. I could have patched it in 124 but it feels like we're close enough to train 125 to patch it there instead now (and I don't even know if there's ops bandwidth to test it out in 124 again anyway).

I've also added the `Sender` header, although I don't *think* its absence was causing problems. The spec seems pretty clear that it falls back to the value of `From` by default, but email servers are a capricious species so better to be explicit.

The `Content-Language` header can only be patched in the auth server (patch incoming). The `Content-Transfer-Encoding` header is by design.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T07:00:59Z,CONTRIBUTOR,True,81,51,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,67ebf3fe77369b751794053d780e90f6f3a3400d,fix(headers): propagate the Content-Language header
38,https://api.github.com/repos/mozilla/fxa-email-service/pulls/240,240,fix(ses): ensure html part gets charset=utf-8 content type,"Fixes #239.

The missing `charset` in the `Content-Type` header caused train 124 to fail. I could have patched it in 124 but it feels like we're close enough to train 125 to patch it there instead now (and I don't even know if there's ops bandwidth to test it out in 124 again anyway).

I've also added the `Sender` header, although I don't *think* its absence was causing problems. The spec seems pretty clear that it falls back to the value of `From` by default, but email servers are a capricious species so better to be explicit.

The `Content-Language` header can only be patched in the auth server (patch incoming). The `Content-Transfer-Encoding` header is by design.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-15T07:00:59Z,CONTRIBUTOR,True,81,51,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,14491612619dd4e58b775aa837e8e9cf7dcee10d,fix(ci): enable branch builds in travis
39,https://api.github.com/repos/mozilla/fxa-email-service/pulls/238,238,chore(package): bump version to 1.125.0,,vbudhram,1295288,2018-11-14T12:49:18Z,CONTRIBUTOR,True,20,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,54ce16c65c60991747d90d453fb0478c741c1931,chore(package): bump version to 1.125.0
40,https://api.github.com/repos/mozilla/fxa-email-service/pulls/237,237,chore(deploy): update rust version,"Initially I planned to update all the deps too, but that did not go well. When I have more time I'll have to pick through that process bit-by-bit, bringing our code up to date with all the changes. Anyway, just wanted to update the Rust version before we cut train 125.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-09T15:22:40Z,CONTRIBUTOR,True,1,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,664222cd27a03046ec6c47229f5d872ad23f0e53,chore(deploy): update rust version
41,https://api.github.com/repos/mozilla/fxa-email-service/pulls/236,236,refactor(api): reduce the number of different error kinds we return,"Fixes #116. Fixes #210.

The error-handling in this repo grew pretty organically without us giving much thought to an over-arching strategy. The net result of that was a proliferation of different error types that weren't really adding much value.

The API here is simple and the 4xx responses are really limited to bad requests and bounce/complaint limit violations. Everything else is an internal server error. As such, the `error` module could be simplified by employing a blanket `Internal` error type to cover the multitude of niche errors that should never occur during normal conditions. The detail for those errors is still available in the `message` property and Sentry will still log the backtrace of course.

I also noticed that the Rocket catcher stuff wasn't really being used, so pulled that out too. We have a standard JSON error format like the rest of the FxA ecosystem, and we always want the response payload to be the serialisation of that structure.

One side-effect of all these changes is that the errno value has changed in most cases. However, I took care to preserve the errno for the bounce and complaint violations, because it's hard-coded in the auth server. It wouldn't have been that onerous to open a PR for commensurate changes over there, but the number of errors left here worked out in such a way that it made sense not to bother.

It's a bit of a messy review, sorry. Lots of small, disparate changes with nothing meaty to sink your teeth into. The ultimate objective for it all was the slimmed-down `src/types/error/mod.rs`, which I'm happy with.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-08T23:05:09Z,CONTRIBUTOR,True,357,522,23,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4297ed2fad47d6fdb3bb19797fc444daab72b097,"refactor(api): reduce the number of different error kinds we return

The error-handling in this repo grew pretty organically without us
giving much thought to an over-arching strategy. The end result of that
was a proliferation of different error types that weren't really adding
much value.

The API here is simple and the 4xx responses are really limited to bad
requests and bounce/complaint limit violations. Everything else is an
internal server error. As such, the `error` module could be simplified
by employing a blanket `Internal` error type to cover the multitude of
niche errors that should never occur during normal conditions. The
detail for those errors is still available in the `message` property and
Sentry will still log the backtrace of course.

I also noticed that the Rocket catcher stuff wasn't really being used,
so pulled that out too. We have a standard JSON error format like the
rest of the FxA ecosystem, and we always want the response payload to be
the serialisation of that structure.

One side-effect of all these changes is that the errno value has changed
in most cases. However, I took care to preserve the errno for the bounce
and complaint violations, because it's hard-coded in the auth server. It
wouldn't have been that onerous to open a PR for commensurate changes
over there, but the number of errors left here worked out in such a way
that made sense not to bother."
42,https://api.github.com/repos/mozilla/fxa-email-service/pulls/235,235,feat(ci): cache rust dependencies,,vladikoff,128755,2018-11-08T20:56:51Z,CONTRIBUTOR,False,73,3,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,cba72d4e2f065c15d938179bb322078968c6fbf6,feat(ci): cache rust dependencies
43,https://api.github.com/repos/mozilla/fxa-email-service/pulls/235,235,feat(ci): cache rust dependencies,,vladikoff,128755,2018-11-08T20:56:51Z,CONTRIBUTOR,False,73,3,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,96293785379d1c13327b2276954224a01ccf907f,feat(ci): build release in cached build
44,https://api.github.com/repos/mozilla/fxa-email-service/pulls/234,234,fix(cargo): remove old rocket comment,,vladikoff,128755,2018-11-08T19:31:28Z,CONTRIBUTOR,True,0,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c706d760f7075c866c1e34211f745e4d4f55efe0,fix(cargo): remove old rocket comment
45,https://api.github.com/repos/mozilla/fxa-email-service/pulls/233,233,fix(settings): fix panic when sentry is disabled,"I'm a fool. Yesterday, when I did #230, I only tested it with Sentry enabled. As soon as I ran the code with Sentry disabled this morning, it crashed on startup because the empty string is not a valid Sentry DSN. This change fixes it by only attempting to parse the DSN if Sentry is enabled. 😊

@mozilla/fxa-devs r?",philbooth,64367,2018-11-08T09:23:16Z,CONTRIBUTOR,True,6,6,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4f47e93b6a4aea65e275d986c263c40aef96ae36,fix(settings): fix panic when sentry is disabled
46,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,85ffe3ebe893813afbff9d75da947f7198f3c252,refactor(ses): upgrade the emailmessage crate
47,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5966d6252d2516ad083be01f0e8ff0e959b370e8,refactor(providers): eliminate format! invocations in ses send method
48,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5d03a48dad4b14e1e037d84819bec2125098d093,fix(mime): use base64 encoding instead of 8bit
49,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1302edf987643a883d0d3394a0a0bb5f533ccc3b,"Merge pull request #228 from mozilla/pb/emailmessage-dep

https://github.com/mozilla/fxa-email-service/pull/228
r=vladikoff"
50,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d6d01b32c4f324e98158363885789d69532f0200,"chore(package): bump version, update changelog"
51,https://api.github.com/repos/mozilla/fxa-email-service/pulls/232,232,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-11-07T18:12:01Z,CONTRIBUTOR,True,348,109,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6f795044cefaecb01595db495b81a38a18eb73b4,Merge branch 'master' into train-124
52,https://api.github.com/repos/mozilla/fxa-email-service/pulls/231,231,feat(bounces): use timestamps from ses instead of the current time,"Fixes #205.

SES provides a UTC-based timestamp for bounce and complaint events but the auth server opted to ignore it. I'm not sure that was the optimal decision because messages might linger on a queue (either ours or the provider's) for a length of time before we process it. Given that we already trust SES et al to deliver sane notifications, it doesn't seem too great a stretch to also trust the timestamp on those notifications.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T14:07:05Z,CONTRIBUTOR,True,34,18,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,906f3911518ec260be79ad8c3c383f6f283bfaed,"feat(bounces): use timestamps from ses instead of the current time

Fixes #205.

SES provides a UTC-based timestamp for bounce and complaint events but
the auth server opted to ignore it. I'm not sure that was the optimal
decision because messages might linger on a queue (either ours or the
provider's) for a length of time before we process it. Given that we
already trust SES et al to deliver sane notifications, it doesn't seem
too great a stretch to also trust the timestamp on those notifications."
53,https://api.github.com/repos/mozilla/fxa-email-service/pulls/230,230,chore(logging): updates for sentry,"Fixes #222.

* In 4636112, I update the Sentry dependency to the latest version.

* In bfeb745, I move the point at which we capture errors for Sentry, so that we now catch every error rather than just those which are logged.

* In 5faef07, I turn on debug symbols in the release build, so that Sentry errors contain richer information.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T12:55:20Z,CONTRIBUTOR,True,206,143,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,608c07eb7ed4a7110b9e690f57ff46fc08262c09,chore(deps): update sentry
54,https://api.github.com/repos/mozilla/fxa-email-service/pulls/230,230,chore(logging): updates for sentry,"Fixes #222.

* In 4636112, I update the Sentry dependency to the latest version.

* In bfeb745, I move the point at which we capture errors for Sentry, so that we now catch every error rather than just those which are logged.

* In 5faef07, I turn on debug symbols in the release build, so that Sentry errors contain richer information.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T12:55:20Z,CONTRIBUTOR,True,206,143,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,02408f590a5745f30da66e8e5f26dfd5110b7b67,"fix(sentry): capture errors at point of creation rather than when logged

We were sending errors to Sentry at the point where they are logged,
but there are a number of paths where an error is raised without being
logged. Instead, this change captures them at the point of creation,
which should mean we now capture every error."
55,https://api.github.com/repos/mozilla/fxa-email-service/pulls/230,230,chore(logging): updates for sentry,"Fixes #222.

* In 4636112, I update the Sentry dependency to the latest version.

* In bfeb745, I move the point at which we capture errors for Sentry, so that we now catch every error rather than just those which are logged.

* In 5faef07, I turn on debug symbols in the release build, so that Sentry errors contain richer information.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T12:55:20Z,CONTRIBUTOR,True,206,143,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0a2d39a33dc4353c026a22d56a87edd75ff42ad0,chore(package): include debug symbols in release builds
56,https://api.github.com/repos/mozilla/fxa-email-service/pulls/229,229,feat(types): ignore display name part when parsing email addresses,"Fixes #201.

Email addresses that we receive from bounce, complaint and delivery notifications may not be identical matches to what we set on messages. We already did some normalization by lower-casing the address when parsing. This change extends that normalization process by trimming whitespace and unwrapping the address part if it has been wrapped in angle bracket delimiters to separate it from the display name. This matches the [behaviour of the auth server](https://github.com/mozilla/fxa-auth-server/blob/050a8a646304313502a31e38cbfffd6b1eabf6cf/lib/email/bounces.js#L65-L87).

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T12:00:29Z,CONTRIBUTOR,True,65,25,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5d5ae603dee9eb7f68a97f7746d4a42da1ecce94,"feat(types): ignore display name part when parsing email addresses

Fixes #201.

Email addresses that we receive from bounce, complaint and delivery
notifications may not be identical matches to what we set on messages.
We already did some normalization by lower-casing the address when
parsing. This change extends that normalization process by trimming
whitespace and unwrapping the address part if it has been wrapped in
angle bracket delimiters to separate it from the display name. This
matches the behaviour of the auth server."
57,https://api.github.com/repos/mozilla/fxa-email-service/pulls/228,228,fix(email): fix sentry errors in prod,"Fixes #220 (maybe, hopefully).

There are actually three changes in here:

* In 85ffe3e, I update the `emailmessage` dependency. I don't *think* this impacts either Sentry error but after I opened an issue there was a flurry of activity in the repo, so I opted to include those changes.

  Note that the API changed fairly significantly, so most of the diff comes from this commit. Perhaps most importantly, we lost the ability to serialize arbitrary headers because of the interface provided between the `Header` trait and the `Raw` struct. The only way I could see to make it work was to implement `Header` ourselves for each header value that we expect, hence the new module in `src/types/headers`.

* In 5966d62, I elminated the `format!` invocations in the SES provider. Again I don't *think* this fixes the root cause, but one of the panics was occurring inside a `format!` so I did it anyway because I couldn't repro said panic locally.

* In 5d03a48, I finally fix what I *think* is the root cause of both errors, which is that we were sending 8-bit encoded MIME data to SES, whereas the [docs](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding-body) suggest that we should only send quoted-printable or base-64:

  > #### Message Body
  >
  > To encode the body of a message, you can use quoted-printable encoding or base64 encoding.

   I think that's where the `parsed HTTP message from remote is incomplete` error stems from.

  For the panic, although I couldn't reproduce it locally, I did see strange behaviour where the 8-bit encoded message sometimes caused the process to hang when I tried to serialize it to a string. I think that may be a different manifestation of the same problem.

  The `emailmessage` crate docs aren't *massively* detailed and the [RFC](https://tools.ietf.org/html/rfc6152) text is pretty dense so it's likely our expectations about the 8-bit encoding type were wrong in some way. But whatever, it seems academic now because SES doesn't want us to use 8-bit encoding and base-64 encoding makes my hang go away, so let's just use it and see where it gets us.

Opened against `train-124` so that we can tag a patch release and see what effect it has. Also because that may help us get the OKR back on track, if we're able to start sending some traffic through the email service without waiting for train 125 to roll out.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T07:39:33Z,CONTRIBUTOR,True,336,107,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,85ffe3ebe893813afbff9d75da947f7198f3c252,refactor(ses): upgrade the emailmessage crate
58,https://api.github.com/repos/mozilla/fxa-email-service/pulls/228,228,fix(email): fix sentry errors in prod,"Fixes #220 (maybe, hopefully).

There are actually three changes in here:

* In 85ffe3e, I update the `emailmessage` dependency. I don't *think* this impacts either Sentry error but after I opened an issue there was a flurry of activity in the repo, so I opted to include those changes.

  Note that the API changed fairly significantly, so most of the diff comes from this commit. Perhaps most importantly, we lost the ability to serialize arbitrary headers because of the interface provided between the `Header` trait and the `Raw` struct. The only way I could see to make it work was to implement `Header` ourselves for each header value that we expect, hence the new module in `src/types/headers`.

* In 5966d62, I elminated the `format!` invocations in the SES provider. Again I don't *think* this fixes the root cause, but one of the panics was occurring inside a `format!` so I did it anyway because I couldn't repro said panic locally.

* In 5d03a48, I finally fix what I *think* is the root cause of both errors, which is that we were sending 8-bit encoded MIME data to SES, whereas the [docs](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding-body) suggest that we should only send quoted-printable or base-64:

  > #### Message Body
  >
  > To encode the body of a message, you can use quoted-printable encoding or base64 encoding.

   I think that's where the `parsed HTTP message from remote is incomplete` error stems from.

  For the panic, although I couldn't reproduce it locally, I did see strange behaviour where the 8-bit encoded message sometimes caused the process to hang when I tried to serialize it to a string. I think that may be a different manifestation of the same problem.

  The `emailmessage` crate docs aren't *massively* detailed and the [RFC](https://tools.ietf.org/html/rfc6152) text is pretty dense so it's likely our expectations about the 8-bit encoding type were wrong in some way. But whatever, it seems academic now because SES doesn't want us to use 8-bit encoding and base-64 encoding makes my hang go away, so let's just use it and see where it gets us.

Opened against `train-124` so that we can tag a patch release and see what effect it has. Also because that may help us get the OKR back on track, if we're able to start sending some traffic through the email service without waiting for train 125 to roll out.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T07:39:33Z,CONTRIBUTOR,True,336,107,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5966d6252d2516ad083be01f0e8ff0e959b370e8,refactor(providers): eliminate format! invocations in ses send method
59,https://api.github.com/repos/mozilla/fxa-email-service/pulls/228,228,fix(email): fix sentry errors in prod,"Fixes #220 (maybe, hopefully).

There are actually three changes in here:

* In 85ffe3e, I update the `emailmessage` dependency. I don't *think* this impacts either Sentry error but after I opened an issue there was a flurry of activity in the repo, so I opted to include those changes.

  Note that the API changed fairly significantly, so most of the diff comes from this commit. Perhaps most importantly, we lost the ability to serialize arbitrary headers because of the interface provided between the `Header` trait and the `Raw` struct. The only way I could see to make it work was to implement `Header` ourselves for each header value that we expect, hence the new module in `src/types/headers`.

* In 5966d62, I elminated the `format!` invocations in the SES provider. Again I don't *think* this fixes the root cause, but one of the panics was occurring inside a `format!` so I did it anyway because I couldn't repro said panic locally.

* In 5d03a48, I finally fix what I *think* is the root cause of both errors, which is that we were sending 8-bit encoded MIME data to SES, whereas the [docs](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding-body) suggest that we should only send quoted-printable or base-64:

  > #### Message Body
  >
  > To encode the body of a message, you can use quoted-printable encoding or base64 encoding.

   I think that's where the `parsed HTTP message from remote is incomplete` error stems from.

  For the panic, although I couldn't reproduce it locally, I did see strange behaviour where the 8-bit encoded message sometimes caused the process to hang when I tried to serialize it to a string. I think that may be a different manifestation of the same problem.

  The `emailmessage` crate docs aren't *massively* detailed and the [RFC](https://tools.ietf.org/html/rfc6152) text is pretty dense so it's likely our expectations about the 8-bit encoding type were wrong in some way. But whatever, it seems academic now because SES doesn't want us to use 8-bit encoding and base-64 encoding makes my hang go away, so let's just use it and see where it gets us.

Opened against `train-124` so that we can tag a patch release and see what effect it has. Also because that may help us get the OKR back on track, if we're able to start sending some traffic through the email service without waiting for train 125 to roll out.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-07T07:39:33Z,CONTRIBUTOR,True,336,107,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5d03a48dad4b14e1e037d84819bec2125098d093,fix(mime): use base64 encoding instead of 8bit
60,https://api.github.com/repos/mozilla/fxa-email-service/pulls/221,221,refactor(errors): stop exposing AppErrorKind directly from AppError,"Related to #210.

There was a minor violation of the law of Demeter in our `AppError` struct, where it was directly exposing its inner `AppErrorKind` to callers. Not a huge deal, but it meant that any changes made to the inner structure would leak out and require corresponding changes to the consuming code (and I am planning some of those inner changes as part of issue #210). Better to expose just the parts that are necessary via its own API.

At the same time, I opted to replace the home-baked `AppError::json()` method with a more conventional `impl Serialize`, because it's less astonishing and just as easy to use with `serde_json::to_string`.

@mozilla/fxa-devs r?",philbooth,64367,2018-11-01T11:04:47Z,CONTRIBUTOR,True,200,205,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,90c6a0110e740601c9bc2731c55949ca4c3090fb,"refactor(errors): stop exposing AppErrorKind directly from AppError

There was a minor violation of the law of Demeter in our `AppError`
struct, where it was directly exposing its inner `AppErrorKind` to
callers. Not a huge deal, but it meant that any changes made to the
inner structure would leak out and require corresponding changes to the
consuming code (and I am planning some of those inner changes as part of
issue #210). Better to expose just the parts that are necessary via its
own API.

At the same time, I opted to replace the home-baked `AppError::json()`
method with a more conventional `impl Serialize`, because it's less
astonishing and just as easy to use with `serde_json::to_string`."
61,https://api.github.com/repos/mozilla/fxa-email-service/pulls/218,218,feat(settings): extract provider type to a fully-fledged enum,"Related to #216.

The provider type was modelled as a newtype struct around a `String` but there's a finite number of values, so really it should be an enum. This wasn't too pressing until now but will shortly come in useful for the configuration stuff, which needs a provider type too.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-31T14:30:12Z,CONTRIBUTOR,True,176,57,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0bd766d4310ef8c16af355785c3058af9b1aa3bf,"feat(settings): extract provider type to a fully-fledged enum

The provider type was modelled as a newtype struct around a `String` but
there's a finite number of values, so really it should be an enum. This
wasn't too pressing until now but will shortly come in useful for the
configuration stuff, which needs a provider type too."
62,https://api.github.com/repos/mozilla/fxa-email-service/pulls/215,215,Merge train-124 into master,@mozilla/fxa-devs r?,philbooth,64367,2018-10-30T14:13:35Z,CONTRIBUTOR,True,27,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c0dfd7a3827948dafbe29236ee71abca733b83bf,"chore(package): bump version, update changelog"
63,https://api.github.com/repos/mozilla/fxa-email-service/pulls/213,213,refactor(project): tidy up the directory structure a bit,"We've grown a lot of modules in this repo and it's hard to see the wood for the trees when you look in the `src` directory. This commit attempts to neaten everything up a bit by scoping some of them under collective parent modules:

* `auth_db`, `delivery_problems` and `message_data` have moved to `db`, and the old `db` has moved to `db/core`.

* `healthcheck` and `send` have moved to `api`.

* `app_errors`, `duration`, `email_address` and `validate` have moved to `types`, and `app_errors` is now just `error`.

* `serialize` has moved to `settings` as it was only referenced there.

Hopefully the end result makes it easier to zero in on modules of interest when working in the repo.

Before:

```
~/c/f/fxa-email-service (master) $ ll src
total 8
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 app_errors
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 auth_db
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 bin
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 db
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 delivery_problems
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 duration
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 email_address
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 healthcheck
-rw-r--r--  1 pb  staff   2.3K 30 Oct 07:36 lib.rs
drwxr-xr-x  3 pb  staff    96B 30 Oct 07:36 logging
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 message_data
drwxr-xr-x  9 pb  staff   288B 30 Oct 07:36 providers
drwxr-xr-x  7 pb  staff   224B 30 Oct 07:36 queues
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 send
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 serialize
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 settings
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:36 validate
```

After:

```
~/c/f/fxa-email-service (pb/tidy-src-tree) $ ll src
total 8
drwxr-xr-x  5 pb  staff   160B 30 Oct 07:30 api
drwxr-xr-x  4 pb  staff   128B 30 Oct 07:30 bin
drwxr-xr-x  7 pb  staff   224B 30 Oct 07:30 db
-rw-r--r--  1 pb  staff   2.2K 30 Oct 07:30 lib.rs
drwxr-xr-x  3 pb  staff    96B 30 Oct 07:30 logging
drwxr-xr-x  9 pb  staff   288B 30 Oct 07:30 providers
drwxr-xr-x  7 pb  staff   224B 30 Oct 07:30 queues
drwxr-xr-x  5 pb  staff   160B 30 Oct 07:30 settings
drwxr-xr-x  7 pb  staff   224B 30 Oct 07:30 types
```

Not sure what anyone else thinks, is it an improvement?

@mozilla/fxa-devs r?",philbooth,64367,2018-10-30T07:39:26Z,CONTRIBUTOR,True,255,221,41,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,cf32a4362d629e9b42323202f8f12c129dd7838f,"refactor(project): tidy up the directory structure a bit

We've grown a lot of modules in this repo and it's hard to see the wood
for the trees when you look in the `src` directory. This commit attempts
to neaten everything up a bit by scoping some of them under collective
parent modules:

* `auth_db`, `delivery_problems` and `message_data` have moved to `db`,
  and the old `db` has moved to `db/core`.

* `healthcheck` and `send` have moved to `api`.

* `app_errors`, `duration`, `email_address` and `validate` have moved to
  `types`, and `app_errors` is now just `error`.

* `serialize` has moved to `settings` as it was only referenced there.

Hopefully the end result makes it easier to zero in on modules of
interest when working in the repo."
64,https://api.github.com/repos/mozilla/fxa-email-service/pulls/212,212,fix(code): implement AsRef<str> to expose cheaper &str access,"Fixes #211.

For a bunch of types in `src/settings.rs` and for `NotificationType` in `src/queues/sqs/notification/mod.rs`, we were allocating `String` instances when it wasn't always necessary. Where a slice can be used, it's preferable.

At the same time, I removed a load of `.0` inner type access for the newtype structs in `Settings`, because that notation is leaky (if we want to refactor the struct to something else, all the usage must change too).

No actual functionality is changed here, so there are no test changes.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T15:24:28Z,CONTRIBUTOR,True,30,19,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,48cff692090270a967d1ba78c772c134f4dc7c75,"fix(code): implement AsRef<str> for cheaper/cleaner &str access

Fixes #211.

For a bunch of types in `src/settings.rs` and for `NotificationType` in
`src/queues/sqs/notification/mod.rs`, we were allocating `String`
instances when it wasn't always necessary. Where an existing slice can
be used, it's preferable.

At the same time, I removed a load of `.0` inner type access for the
newtype structs in `Settings`, because that notation is leaky (if we
want to refactor the struct to something else, all the usage must change
too)."
65,https://api.github.com/repos/mozilla/fxa-email-service/pulls/209,209,"chore(deps): update versions of Rust, Rocket and Rusoto","Fixes #207.

We've been pinned to an ancient version of Rust for a while and I really wanted to get us updated before cutting train 124 (which is hopefully going to see some traffic). Updating Rust required updating Rocket and Rusoto, so that's done here too. Initially I wanted to do a full `cargo update` but the build fails if you do that because of rust-lang/rust#55376. As soon as that's resolved, we should update the other deps too.

Most of the code changes here are because `cargo fmt`. There's also a couple of knock-on code changes from the Rocket update (the disappearance of `rocket_contrib::JsonValue` and the disappearance of `rocket::LoggingLevel::Off`).

Because there's a bit going on, I've kept everything as separate commits. If we want to review them separately I'm happy to break this into multiple PRs. Also, as discussed in retro recently, if you want to join me in Vidyo so I can take you through the changes in more detail, I am more than happy to do that.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T10:45:40Z,CONTRIBUTOR,True,445,285,29,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,03f19145e714117c2a06b48114ce6600023dd505,chore(toolchain): update to latest rust nightly
66,https://api.github.com/repos/mozilla/fxa-email-service/pulls/209,209,"chore(deps): update versions of Rust, Rocket and Rusoto","Fixes #207.

We've been pinned to an ancient version of Rust for a while and I really wanted to get us updated before cutting train 124 (which is hopefully going to see some traffic). Updating Rust required updating Rocket and Rusoto, so that's done here too. Initially I wanted to do a full `cargo update` but the build fails if you do that because of rust-lang/rust#55376. As soon as that's resolved, we should update the other deps too.

Most of the code changes here are because `cargo fmt`. There's also a couple of knock-on code changes from the Rocket update (the disappearance of `rocket_contrib::JsonValue` and the disappearance of `rocket::LoggingLevel::Off`).

Because there's a bit going on, I've kept everything as separate commits. If we want to review them separately I'm happy to break this into multiple PRs. Also, as discussed in retro recently, if you want to join me in Vidyo so I can take you through the changes in more detail, I am more than happy to do that.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T10:45:40Z,CONTRIBUTOR,True,445,285,29,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2057d57ac7f21b562fe892d8306d3ac86ae02e67,chore(code): cargo fmt
67,https://api.github.com/repos/mozilla/fxa-email-service/pulls/209,209,"chore(deps): update versions of Rust, Rocket and Rusoto","Fixes #207.

We've been pinned to an ancient version of Rust for a while and I really wanted to get us updated before cutting train 124 (which is hopefully going to see some traffic). Updating Rust required updating Rocket and Rusoto, so that's done here too. Initially I wanted to do a full `cargo update` but the build fails if you do that because of rust-lang/rust#55376. As soon as that's resolved, we should update the other deps too.

Most of the code changes here are because `cargo fmt`. There's also a couple of knock-on code changes from the Rocket update (the disappearance of `rocket_contrib::JsonValue` and the disappearance of `rocket::LoggingLevel::Off`).

Because there's a bit going on, I've kept everything as separate commits. If we want to review them separately I'm happy to break this into multiple PRs. Also, as discussed in retro recently, if you want to join me in Vidyo so I can take you through the changes in more detail, I am more than happy to do that.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T10:45:40Z,CONTRIBUTOR,True,445,285,29,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,afe8713277142c21e25b572bfdfb30f3c4b65c30,chore(deps): update rocket and rusoto versions from pinned git hashes
68,https://api.github.com/repos/mozilla/fxa-email-service/pulls/209,209,"chore(deps): update versions of Rust, Rocket and Rusoto","Fixes #207.

We've been pinned to an ancient version of Rust for a while and I really wanted to get us updated before cutting train 124 (which is hopefully going to see some traffic). Updating Rust required updating Rocket and Rusoto, so that's done here too. Initially I wanted to do a full `cargo update` but the build fails if you do that because of rust-lang/rust#55376. As soon as that's resolved, we should update the other deps too.

Most of the code changes here are because `cargo fmt`. There's also a couple of knock-on code changes from the Rocket update (the disappearance of `rocket_contrib::JsonValue` and the disappearance of `rocket::LoggingLevel::Off`).

Because there's a bit going on, I've kept everything as separate commits. If we want to review them separately I'm happy to break this into multiple PRs. Also, as discussed in retro recently, if you want to join me in Vidyo so I can take you through the changes in more detail, I am more than happy to do that.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T10:45:40Z,CONTRIBUTOR,True,445,285,29,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5530fddb9667e69b7c6549fa29b5af5d1169432f,fix(settings): remove references to RocketLoggingLevel::Off enum variant
69,https://api.github.com/repos/mozilla/fxa-email-service/pulls/209,209,"chore(deps): update versions of Rust, Rocket and Rusoto","Fixes #207.

We've been pinned to an ancient version of Rust for a while and I really wanted to get us updated before cutting train 124 (which is hopefully going to see some traffic). Updating Rust required updating Rocket and Rusoto, so that's done here too. Initially I wanted to do a full `cargo update` but the build fails if you do that because of rust-lang/rust#55376. As soon as that's resolved, we should update the other deps too.

Most of the code changes here are because `cargo fmt`. There's also a couple of knock-on code changes from the Rocket update (the disappearance of `rocket_contrib::JsonValue` and the disappearance of `rocket::LoggingLevel::Off`).

Because there's a bit going on, I've kept everything as separate commits. If we want to review them separately I'm happy to break this into multiple PRs. Also, as discussed in retro recently, if you want to join me in Vidyo so I can take you through the changes in more detail, I am more than happy to do that.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T10:45:40Z,CONTRIBUTOR,True,445,285,29,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c152bc876562a422ddc7c0f31de07a237c8ffb37,fix(code): remove references to old rocket_contrib::JsonValue struct
70,https://api.github.com/repos/mozilla/fxa-email-service/pulls/208,208,fix(queues): fix the serialized format of outgoing notifications,"The `bounced_recipients` property of the outgoing notification structure was missing a serde `rename` attribute. That problem went undetected because we had no test coverage for the outgoing structure, which was a pretty large hole in our coverage. This change fixes the issue and adds some serialization assertions.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-29T07:12:43Z,CONTRIBUTOR,True,59,1,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e3e361c667eabc8010f1dd26efa4a2808a2f9747,"fix(queues): fix the serialized format of outgoing notifications

The `bounced_recipients` property of the outgoing notification structure
was missing a serde `rename` attribute. That problem went undetected
because we had no test coverage for the outgoing structure, which was a
pretty large hole in our coverage. This change fixes the issue and adds
some serialization assertions."
71,https://api.github.com/repos/mozilla/fxa-email-service/pulls/204,204,chore(tests): add test coverage for the order of delivery problems,"Depends on mozilla/fxa-auth-db-mysql#408.

Because the order of delivery problem records is significant to the handling logic, this PR adds some test coverage for that order. Note the tests are expected to fail until the linked auth db PR is merged.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-16T13:17:23Z,CONTRIBUTOR,True,37,7,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,14a5eb774a57f15b66a078c092d17c0136bb1ddc,chore(tests): add test coverage for the order of delivery problems
72,https://api.github.com/repos/mozilla/fxa-email-service/pulls/203,203,feat(db): write bounce and complaint records to our own db,"Related to #166.

This is the first step towards migrating away from the FxA auth db. We'll start by dual-writing to both databases. Then, after we've got sufficient history to fully evaluate limit violations using our own data, we can switch over to read from our own datastore and ditch the auth db.

Note that we still need to migrate from the auth server's bounce and complaint handling logic in prod before this code starts doing anything.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-16T13:12:31Z,CONTRIBUTOR,True,280,128,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ed83e5b1da923c5f8014bd8e62e4c051486f3fe0,"feat(db): write bounce and complaint records to our own db

This is the first step towards migrating away from the FxA auth db.
We'll start by dual-writing to both databases. Then, after we've got
sufficient history to fully evaluate limit violations, we can switch
over to read from our own datastore and ditch the auth db."
73,https://api.github.com/repos/mozilla/fxa-email-service/pulls/203,203,feat(db): write bounce and complaint records to our own db,"Related to #166.

This is the first step towards migrating away from the FxA auth db. We'll start by dual-writing to both databases. Then, after we've got sufficient history to fully evaluate limit violations using our own data, we can switch over to read from our own datastore and ditch the auth db.

Note that we still need to migrate from the auth server's bounce and complaint handling logic in prod before this code starts doing anything.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-16T13:12:31Z,CONTRIBUTOR,True,280,128,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1093258f70bc0673a1d64b3de015d1144a6077e5,refactor(redis): store delivery problems in reverse order
74,https://api.github.com/repos/mozilla/fxa-email-service/pulls/203,203,feat(db): write bounce and complaint records to our own db,"Related to #166.

This is the first step towards migrating away from the FxA auth db. We'll start by dual-writing to both databases. Then, after we've got sufficient history to fully evaluate limit violations using our own data, we can switch over to read from our own datastore and ditch the auth db.

Note that we still need to migrate from the auth server's bounce and complaint handling logic in prod before this code starts doing anything.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-16T13:12:31Z,CONTRIBUTOR,True,280,128,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,68a1def7dcaa978d05dbbc1d7d8b009f96d44cac,fix(redis): don't pollute our data store with old bounce nomenclature
75,https://api.github.com/repos/mozilla/fxa-email-service/pulls/202,202,refactor(redis): stop treating no data as an error in the getters,"This is another extraction from the branch for #166.

Previously, we were treating an absence of data as an error case in Redis. That's wrong for every data type we plan to store, so this PR changes the `db` module to wrap its result types in an `Option`.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-15T11:30:53Z,CONTRIBUTOR,True,25,13,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8031ff6f57047ba109369653e3e0c903edee6224,refactor(redis): stop treating no data as an error in the getters
76,https://api.github.com/repos/mozilla/fxa-email-service/pulls/200,200,feat(db): serialize to JSON on write and deserialize from JSON on read,"Related to #166.

Previously, our Redis abstraction only worked with strings because it only dealt with the somewhat nebulous concept of message metadata. Now that we also want to use it for concrete types, it makes sense to bake in automatic serialization from and deserialization to those types. This frees consumers from the responsibility of having to serialize to a Redis-friendly format manually.

This change achieves that aim by making the db methods generic. `db.set` gets a type parameter that is `Serialize` and the getters get one that is `DeserializeOwned`.

(this is the final extraction from `pb/166-wip` before I can open the actual pull request for that change)

@mozilla/fxa-devs r?",philbooth,64367,2018-10-05T18:11:29Z,CONTRIBUTOR,True,36,11,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,31da83bb39075f63bc24e707fa22e1a447ac5d5b,"feat(db): serialize to JSON on write and deserialize from JSON on read

Previously, our Redis abstraction only worked with strings because it
only dealt with the somewhat nebulous concept of message metadata. Now
that we also want to use it for concrete types, it makes sense to bake
in automatic serialization from and deserialization to those types. This
frees consumers from the responsibility of having to serialize to a
Redis-friendly format manually.

This change achieves that aim by making the db methods generic. `db.set`
gets a type parameter that is `Serialize` and the getters get one that
is `DeserializeOwned`."
77,https://api.github.com/repos/mozilla/fxa-email-service/pulls/199,199,chore(docs): update the readme,"Some of the info in the readme had gone stale, so I updated it. And because I'm OCD about uniformity, I made the build badge for CircleCI look the same as the others.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-05T08:17:59Z,CONTRIBUTOR,True,44,58,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1ebe354736c711ff863a449240b531076467593c,chore(docs): make circleci build badge match its peers
78,https://api.github.com/repos/mozilla/fxa-email-service/pulls/199,199,chore(docs): update the readme,"Some of the info in the readme had gone stale, so I updated it. And because I'm OCD about uniformity, I made the build badge for CircleCI look the same as the others.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-05T08:17:59Z,CONTRIBUTOR,True,44,58,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c1928df500fc4a0595f7f3f182ed7d89017c8183,chore(docs): update the readme to match current reality
79,https://api.github.com/repos/mozilla/fxa-email-service/pulls/199,199,chore(docs): update the readme,"Some of the info in the readme had gone stale, so I updated it. And because I'm OCD about uniformity, I made the build badge for CircleCI look the same as the others.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-05T08:17:59Z,CONTRIBUTOR,True,44,58,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,80bb986418eb9a9e33a5d70ba3414a3d12924e93,feat(docs): promote fxa-local-dev as a first class way to run locally
80,https://api.github.com/repos/mozilla/fxa-email-service/pulls/199,199,chore(docs): update the readme,"Some of the info in the readme had gone stale, so I updated it. And because I'm OCD about uniformity, I made the build badge for CircleCI look the same as the others.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-05T08:17:59Z,CONTRIBUTOR,True,44,58,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6d04dcc9ba5eef7e751bc8f565aa709b98ef79ec,feat(docs): mention command-line shortcuts for running binaries
81,https://api.github.com/repos/mozilla/fxa-email-service/pulls/198,198,refactor(bounces): pull all bounce/complaint code into one module,"Related to #166. Depends on #196.

This change does two things:

1. The old `BounceRecord`, `BounceType` and `BounceSubtype` types are removed from the `auth_db` module into `bounces`, so that they can more easily be re-used when writing bounce/complaint data to Redis.

2. Those types are renamed to `DeliveryProblem`, `ProblemType` and `ProblemSubtype` respectively, and the `bounces` module is renamed to `delivery_problems`. That may seem weird at first, but I have good reason for it and am open to alternative names if anyone can suggest something better.

   Historically we've always treated complaints as a type of bounce event, but that's inaccurate because bounces are never preceded by a delivery event whereas complaints are always preceded by one. This has caught me out in the past when analysing metrics and expecting a blanket sum of `deliveries + bounces = sends` to be true. It isn't. It's only true if you filter complaints from bounces before calculating the sum.

   Because of that, I wanted some different nomenclature that didn't use ""bounces"" as an umbrella term for ""bounces and complaints"". It won't affect the names we use in the metrics but I think it's important for language we use in the codebase to be as precise as possible. Things like ""delivery error"" or ""delivery failure"" also seemed inaccurate for the same reason; a complaint implies that the actual delivery succeeded. Hence ""delivery problems"", which seems generic enough to legitimately include both event types. But I'm not wedded to that particular name so feel free to suggest something different.

Marking as `WIP` for now (even though I'm happy with it) because it's based off the branch for #196 and will need rebasing against `master` after that lands (this is another extraction from the `pb/166-wip` branch).",philbooth,64367,2018-10-05T07:20:23Z,CONTRIBUTOR,True,1063,1068,16,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3b32fe021b55419531c8aa88ec577ba580376b95,"refactor(bounces): pull all bounce/complaint code into one module

This change does two things:

1. The old `BounceRecord`, `BounceType` and `BounceSubtype` types are
   removed from the `auth_db` module into `bounces`, so that they can
   more easily be re-used when writing bounce/complaint data to Redis.

2. Those types are renamed to `DeliveryProblem`, `ProblemType` and
   `ProblemSubtype` respectively, and the `bounces` module is renamed to
   `delivery_problems`. That may seem weird at first, but I have good
   reason for it and am open to alternative names if anyone can suggest
   something better.

   Historically we've always treated complaints as a type of bounce
   event, but that's inaccurate because bounces are never preceded by a
   delivery event whereas complaints are always preceded by one. This
   has caught me out in the past when analysing metrics and expecting a
   blanket sum of `deliveries + bounces = sends` to be true. It isn't.
   It's only true if you filter complaints from bounces before
   calculating the sum.

   Because of that, I wanted some different nomenclature that didn't use
   ""bounces"" as an umbrella term for ""bounces and complaints"". It won't
   affect the names we use in the metrics but I think it's important for
   language we use in the codebase to be as precise as possible. Things
   like ""delivery error"" or ""delivery failure"" also seemed inaccurate
   for the same reason; a complaint implies that the actual delivery
   succeeded. Hence ""delivery problems"", which seems generic enough to
   legitimately include both event types."
82,https://api.github.com/repos/mozilla/fxa-email-service/pulls/197,197,fix(ci): only build deployment artifacts for tags,"Fixes #195.

Compare, for example, #196 to this PR. There it has kicked off an [unnecessary Circle build](https://circleci.com/gh/mozilla/fxa-email-service/241), here we're only building in Travis.

@mozilla/fxa-devs r?",philbooth,64367,2018-10-04T18:59:02Z,CONTRIBUTOR,True,4,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,95e20e074059ad6dc4aa20f8643ccf9b34c8dc73,fix(ci): only build deployment artifacts for tags
83,https://api.github.com/repos/mozilla/fxa-email-service/pulls/196,196,refactor(types): prefer EmailAddress type to raw strings,"The EmailAddress type was only being used in some places, which meant some places that weren't using it had to call `validate::email_address` manually. This change spreads it throughout most of the project, so that almost everywhere gets to benefit from strong typing.

The only place I decided to leave alone was the provider layer, where some providers have their own `EmailAddress` struct. I could have aliased it at that layer too, but by that point addresses are just dumb strings anyway so it didn't seem worth it.

(this is an extraction from `pb/166-wip` because that branch is growing too big)

@mozilla/fxa-devs r?
",philbooth,64367,2018-10-04T18:37:29Z,CONTRIBUTOR,True,186,172,17,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,dc08356f38e96964a2fc071b7718d5dd789cd220,"refactor(types): prefer EmailAddress type to raw strings

The EmailAddress type was only being used in some places, which meant
some places that weren't using it had to call `validate::email_address`
manually. This change spreads it throughout most of the project, so
that almost everywhere gets to benefit from strong typing.

The only place I decided to leave it alone was the provider layer, where
some providers have their own `EmailAddress` struct. I could have
aliased it at that layer too, but by that point addresses are just dumb
strings anyway so it didn't seem worth it."
84,https://api.github.com/repos/mozilla/fxa-email-service/pulls/194,194,Release v1.122.0,,vladikoff,128755,2018-10-02T22:00:23Z,CONTRIBUTOR,True,15,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,9cc6880b16b025fcc089146430d262125d12cac7,Release v1.122.0
85,https://api.github.com/repos/mozilla/fxa-email-service/pulls/193,193,refactor(redis): extract redis code to a dedicated db module,"Related to #166.

We've decided to use Redis as the data store for all types in this repo so as a first step towards that, this PR just pulls the redis code out of `message_data` into its own module.

No functionality has changed so no tests are changed. And no new tests are added because the `db` module is going to be tested via its consumers (i.e. the existing `message_data` tests right now, but also `bounces` and `configuration` in the future).

@mozilla/fxa-devs r?",philbooth,64367,2018-10-01T15:40:29Z,CONTRIBUTOR,True,152,69,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,a644d18ca56aa7148b05642ab91863fe8b24503b,refactor(redis): extract redis code to a dedicated db module
86,https://api.github.com/repos/mozilla/fxa-email-service/pulls/192,192,fix(config): ignore empty environment variables,"Fixes #191.

You can also test it manually by setting, say, `FXA_EMAIL_PORT` to the empty string and running `./r`. Before this change that fails with the error:

```
thread 'main' panicked at 'Settings::new error: invalid type: string """", expected an integer in the environment', libcore/result.rs:983:5
```

@mozilla/fxa-devs r?",philbooth,64367,2018-09-26T07:52:22Z,CONTRIBUTOR,True,14,5,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,85529f7f945ec7408a87d96040b517c2e5a1fa3f,fix(config): ignore empty environment variables
87,https://api.github.com/repos/mozilla/fxa-email-service/pulls/190,190,fix(queues): remove unused fields from notification structs,"Fixes #189 

Removed everything that is not used anywhere else in the code but the `id`s because I thought that we might need them if ever we need to debug something.

r? @philbooth 
",brizental,25176023,2018-09-25T17:55:57Z,MEMBER,True,1,30,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0f2b5740c374b41c0d352b8d93d34ff217042390,fix(queues): remove unused fields from notification structs
88,https://api.github.com/repos/mozilla/fxa-email-service/pulls/188,188,chore(tests): add tests for message parsing in the queues,"Connects to #162 

I started working on this issue, but I'm not really sure I'm doing the right thing. I'm submitting this work in progress so that you can check that this is the kind of tests needed, @philbooth . I started the code for the tests, but before finishing it I just wanted to check, because it looks kind of weird to me...

I also added a commit that updates the config.rs version in the Cargo.toml because we had `0.8.0` there, but turns out we use features from the crate that don't exist in that version only on `>=0.9.0`. That was a problem I stumbled on while working on #162 this is why the commit is in this PR. It was such a small change I didn't think it needed to have a whole PR for itself, but let me know if you want I can do that too.

r? @philbooth 
",brizental,25176023,2018-09-21T01:55:52Z,MEMBER,True,209,1,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,9a882094a6ff6d72db0c44e04f00a976cba1a9ea,fix(config): update config version in Cargo.toml
89,https://api.github.com/repos/mozilla/fxa-email-service/pulls/188,188,chore(tests): add tests for message parsing in the queues,"Connects to #162 

I started working on this issue, but I'm not really sure I'm doing the right thing. I'm submitting this work in progress so that you can check that this is the kind of tests needed, @philbooth . I started the code for the tests, but before finishing it I just wanted to check, because it looks kind of weird to me...

I also added a commit that updates the config.rs version in the Cargo.toml because we had `0.8.0` there, but turns out we use features from the crate that don't exist in that version only on `>=0.9.0`. That was a problem I stumbled on while working on #162 this is why the commit is in this PR. It was such a small change I didn't think it needed to have a whole PR for itself, but let me know if you want I can do that too.

r? @philbooth 
",brizental,25176023,2018-09-21T01:55:52Z,MEMBER,True,209,1,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,588f0d6740eab032977e852531f9e28b87fb3630,chore(tests): add tests for message parsing in the queues
90,https://api.github.com/repos/mozilla/fxa-email-service/pulls/187,187,Release v1.121.0,,vladikoff,128755,2018-09-18T17:45:13Z,CONTRIBUTOR,True,11,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d548d5ecc4e502bdfc14ebe1a9089215e6660046,Release v1.121.0
91,https://api.github.com/repos/mozilla/fxa-email-service/pulls/184,184,chore: utilize a rust-toolchain file,moves the toolchain spec to solely one file,pjenvey,14639,2018-09-17T22:58:28Z,CONTRIBUTOR,True,1,5,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3903f0b94fd3d7b30b58fe22db0fc4811b9b5fd4,"chore: utilize a rust-toolchain file

moves the toolchain spec to solely one file"
92,https://api.github.com/repos/mozilla/fxa-email-service/pulls/183,183,Release v1.120.0,,vladikoff,128755,2018-09-06T02:39:20Z,CONTRIBUTOR,True,13,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b72ff78202fec34c1d6b0f2399933fc465b3da01,Release v1.120.0
93,https://api.github.com/repos/mozilla/fxa-email-service/pulls/182,182,feat(docs): document errors and errno,"Fixes #98 

r? @vladikoff ",brizental,25176023,2018-08-24T20:21:28Z,MEMBER,True,58,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,482f69cebf454876e5329f0953241854453f293b,feat(docs): document errors and errno
94,https://api.github.com/repos/mozilla/fxa-email-service/pulls/180,180,feat(errors): return bouncedAt field in bounce error message,"Fixes #157 

r? @philbooth @vladikoff ",brizental,25176023,2018-08-22T17:27:51Z,MEMBER,True,27,12,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d74eaec97f8d214661589c58904dfd8617b856a3,feat(errors): return bouncedAt field in bounce error message
95,https://api.github.com/repos/mozilla/fxa-email-service/pulls/179,179,Release v1.119.0,,brizental,25176023,2018-08-22T15:39:24Z,MEMBER,True,20,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1c7c6c16e0d77e1a84728b8bf1db72a6fa3cb964,Release v1.119.0
96,https://api.github.com/repos/mozilla/fxa-email-service/pulls/178,178,fix(queues): make queue parsing logic follow the sns format,"This is just a follow up PR from #177 

I remove the part where I make the parser work for different SNS message formats, turns out that is not needed. 

See discussion: https://github.com/mozilla/fxa-email-service/pull/177#issuecomment-414394797

r? @vladikoff ",brizental,25176023,2018-08-21T21:48:15Z,MEMBER,True,26,31,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d1651e050027a28f50d4984e368bd943a9319525,fix(queues): make queue parsing logic follow the sns format
97,https://api.github.com/repos/mozilla/fxa-email-service/pulls/177,177,fix(logging): remove unnecessary and add debug logs in queues,"Fixes #173

There is a bunch of minor fixes going on in this PR.

- Fix #173 
- Add some debug logs for notifications in case we need it (probably would be good to only show them when we have some `debug` flag on or something)
- Notification JSON may come in different shapes, nested or not nested, so I added functionality to accept both. That logic might me a little fragile so let me know what you think.

r? @vladikoff @philbooth ",brizental,25176023,2018-08-17T01:08:50Z,MEMBER,True,42,35,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,04bef6741c9c07111bdcd9100fc8fe8c42419f64,fix(logging): remove unnecessary and add debug logs in queues
98,https://api.github.com/repos/mozilla/fxa-email-service/pulls/176,176,feat(logging): add sentry support,"Fix #155 

I added support for Sentry. For that to work we just need to set `FXA_EMAIL_SENTRY_DSN`.

Right now we are logging to Sentry everytime we log an `AppError`.

r? @vladikoff ",brizental,25176023,2018-08-16T20:04:14Z,MEMBER,True,271,0,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ee811905d5b1753189c7b2d6501b2c98cb8c8a32,feat(logging): add sentry support
99,https://api.github.com/repos/mozilla/fxa-email-service/pulls/175,175,chore(docs): remove under construction badge,"This service is now live in production, so we can probably remove the under construction badge.",brizental,25176023,2018-08-16T15:17:44Z,MEMBER,True,0,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0851f8ca1237a23a0ec3f72029fb9f9265a9f1c0,chore(docs): remove under construction badge
100,https://api.github.com/repos/mozilla/fxa-email-service/pulls/174,174,fix(queues): fix executor error on queues process,"See discussion #172 

@seanmonstar thanks for telling us how to fix this :)

r? @vladikoff @philbooth ",brizental,25176023,2018-08-15T20:08:44Z,MEMBER,True,8,3,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,a112669fc92808d2bc4bcaa73dff8ff51c527cc2,fix(queues): fix executor error on queues process
101,https://api.github.com/repos/mozilla/fxa-email-service/pulls/172,172,feat(queues): add hyper logs for queues,"cc @vladikoff 

run this like this -> `RUST_LOG=rusoto,hyper=debug  cargo run --bin fxa_email_queues`",brizental,25176023,2018-08-15T00:01:31Z,MEMBER,False,107,1,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4d240f7118f9f088ec677ebae7afa99188763e51,feat(queues): add hyper logs for queues
102,https://api.github.com/repos/mozilla/fxa-email-service/pulls/172,172,feat(queues): add hyper logs for queues,"cc @vladikoff 

run this like this -> `RUST_LOG=rusoto,hyper=debug  cargo run --bin fxa_email_queues`",brizental,25176023,2018-08-15T00:01:31Z,MEMBER,False,107,1,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2a384c3f0b7f3be493172289008b01ccb69a7d78,isolated test case
103,https://api.github.com/repos/mozilla/fxa-email-service/pulls/172,172,feat(queues): add hyper logs for queues,"cc @vladikoff 

run this like this -> `RUST_LOG=rusoto,hyper=debug  cargo run --bin fxa_email_queues`",brizental,25176023,2018-08-15T00:01:31Z,MEMBER,False,107,1,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d3f4c133106e550cc1da458e2a6767527a17e89e,remove unecessary stuff from test case
104,https://api.github.com/repos/mozilla/fxa-email-service/pulls/171,171,feat(socketlabs): create and return id for socketlabs messages,"Turns out we can manually add a message id to socketlabs requests.

See more discussion in https://github.com/mozilla/fxa-sendgrid-event-proxy/pull/3#discussion_r209323789

r? @philbooth @vladikoff ",brizental,25176023,2018-08-13T20:11:15Z,MEMBER,True,7,1,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,30639fc3bc09067554ea08061772391542c775f4,feat(socketlabs): create and return id for socketlabs messages
105,https://api.github.com/repos/mozilla/fxa-email-service/pulls/165,165,Release v1.118.0,,brizental,25176023,2018-08-09T18:29:08Z,MEMBER,True,12,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7e574a2ebd31b335a904b371e768162cc4daf1d9,Release v1.118.0
106,https://api.github.com/repos/mozilla/fxa-email-service/pulls/164,164,fix(ses): use updated rusoto version that sends message in body,"Same as #163 but with updated rusoto version, the previous one was not passing the rusoto CI.

r? @vladikoff ",brizental,25176023,2018-08-09T16:54:35Z,MEMBER,True,279,242,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0a3af4a07f2eb28c6c56b97900b31296ce179b03,fix(ses): use updated rusoto version that sends message in body
107,https://api.github.com/repos/mozilla/fxa-email-service/pulls/163,163,fix(ses): use rusoto version that sends message in body,"Connects to #139 

This fixes the issue, but I didn't mark it as fixed because right now we are pointing to my fork.

You can see the whole discussion here: https://github.com/rusoto/rusoto/issues/1093 and this is the easiest way to test it: https://github.com/mozilla/fxa-email-service/issues/139#issuecomment-411584944

This PR is just so that we can test stuff :)",brizental,25176023,2018-08-09T00:21:32Z,MEMBER,False,30,24,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e506c76a8bac81cf924a5e8524715a52f0f30124,fix(ses): use rusoto version that sends message in body
108,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,38816c981dc430acaf2d0f37c3f7585dae2a60f0,chore(errors): use failure crate for queue errors
109,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0a5aeb134caf45be48c1d376e5dedd1345042db2,refactor(logging): create custom logger for AppError
110,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,502c872946cc817ffe69dfe0a1f146b921ffecac,feat(logging): use mozlog logger for queues process
111,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e665a81299d27fa663855f02b6843ce2db1fc454,"fix(queues): get queues to parse sqs messages properly

- Also fix formatting errors."
112,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b9688b150f9adbe84b0ce73713be15b130203742,chore(errors): remove terminating period from error strings
113,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,205e66eec30e0fb72e185e64253f9a69d626a8e5,chore(errors): change errno and code fields to u16
114,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,79e204e5e9a8cbaed429dbd29eb19ed16a4f0aa9,chore(logging): panic! if no mozlogger is found in managed state
115,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,24534458df68f77a24381aa5fbbc2b50c5180a56,fix(queues): fixes for updated rusoto version
116,https://api.github.com/repos/mozilla/fxa-email-service/pulls/161,161,chore(queues): use mozlog and failure in queues process,"Fixes #10 
Fixes #99 
Connects to #116 

This was my first experience messing with the queues part of the service, I thought dealing with these issues first would make the experience smoother. I added the standard logging and error handling with the failure crate just like the rest of the lib. 

Since our errors were very much centered around requests and rocket, we have some fields that don't really make sense for the queues process, like the http code, so let me know what you think about that and if the queues process should have a different error format. I also did another minor change to the errors: now the response JSON will return a number for `code` and `errno`, instead of a string.

For logging, I implemented an `AppErrorFields` so that we get better structured logs for our `AppError`s. I used `slog_scope` to make it easier to have a global logger for the queues process, let me know what you think about that... In the `README.md` for that crate, they have some warnings about it not being the best idea all the time, but anyways, I thought it was neat and worked well for our case.

Finally, when I started working in the queues they were not really working due to parsing errors, you will see that I changed a little bit the SQS Notification struct, that was for parsing to work, also I created a notification-dev queue in the AWS Console, because it didn't exist yet, I think everything is working fine now.

r? @philbooth @vladikoff ",brizental,25176023,2018-08-08T06:52:44Z,MEMBER,True,388,273,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,23c56f4b1654d46a12cb474b838b6942e3df9c57,chore(formatting): fix formatting errors for new fmt version
117,https://api.github.com/repos/mozilla/fxa-email-service/pulls/160,160,"chore(deps): update rocket, failure, rusoto and rust versions","Fixes #156 
Fixes #158 

Here I update failure, rocket, rusoto and rust to the latest versions.

I had to point rusoto to a revision, because `rusoto_mock` stopped working after the update. I opened an issue about that https://github.com/rusoto/rusoto/issues/1089.

Because I updated the rust version, there are a bunch of formatting changes in this PR, because fmt was updated as well.

r? @philbooth @vladikoff 

_ps.: when this gets merged we can't forget to change the override in `fxa-local-dev` https://github.com/mozilla/fxa-local-dev/blob/master/_scripts/install_all.sh#L42_",brizental,25176023,2018-08-07T22:56:53Z,MEMBER,True,304,208,19,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,9854cc99a070f57b19597566fdeb1bc68d957891,"chore(deps): update rocket, failure, rusoto and rust versions"
118,https://api.github.com/repos/mozilla/fxa-email-service/pulls/159,159,Rusoto debug build,,vladikoff,128755,2018-08-07T18:53:06Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ea998a7bce6a0379bd53d40b1cad00528d05a165,feat(email): Create debug build and log SES request / responses
119,https://api.github.com/repos/mozilla/fxa-email-service/pulls/159,159,Rusoto debug build,,vladikoff,128755,2018-08-07T18:53:06Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,be1050015cd00454ad9020baa863ba9f4d6ffe09,feat(ses): log message before encoding and send params
120,https://api.github.com/repos/mozilla/fxa-email-service/pulls/159,159,Rusoto debug build,,vladikoff,128755,2018-08-07T18:53:06Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f64702afc605059fa96524d12a107c23fecf302f,feat(email): add logs for the endcoded message
121,https://api.github.com/repos/mozilla/fxa-email-service/pulls/159,159,Rusoto debug build,,vladikoff,128755,2018-08-07T18:53:06Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1a459304956f2fc3d64880102d36aab5fa5fce74,feat(bounces): remove bounces checking for testing
122,https://api.github.com/repos/mozilla/fxa-email-service/pulls/159,159,Rusoto debug build,,vladikoff,128755,2018-08-07T18:53:06Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e0802748d907f650edac058c7a54ce82d4b38c2b,Update rusoto
123,https://api.github.com/repos/mozilla/fxa-email-service/pulls/154,154,chore(config): change aws region defaults for dev and prod,"Fixes #153 

r? @vladikoff",brizental,25176023,2018-08-02T20:17:51Z,MEMBER,True,4,1,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,12c64c04c28a4985bd070bd1df26ccf917eb754e,chore(config): change aws region defaults for dev and prod
124,https://api.github.com/repos/mozilla/fxa-email-service/pulls/152,152,Release v1.117.0,,brizental,25176023,2018-08-01T17:21:29Z,MEMBER,True,14,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,29f783bf70664127e81690ff3bf1a1758b243ba4,Release v1.117.0
125,https://api.github.com/repos/mozilla/fxa-email-service/pulls/151,151,chore(tests): add tests for request unicode handling,"Fixes #9 

I just added some simple unicode tests for email address, subject and body.

I also added unicode character patterns in our email address regex, because the `.` alone didn't match for some reason...

r? @philbooth @vladikoff ",brizental,25176023,2018-07-30T22:52:33Z,MEMBER,True,120,9,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e33078ecaa01c88c0a60e486962ceaa9e5c5866a,chore(tests): add tests for request unicode handling
126,https://api.github.com/repos/mozilla/fxa-email-service/pulls/149,149,chore(providers): lock socketlabs to a crates.io version,"Fixes #148 

r? @vladikoff ",brizental,25176023,2018-07-27T18:07:56Z,MEMBER,True,6,6,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3d745f153c2a97aa30fad35981e706879131c213,chore(providers): lock socketlabs to a crates.io version
127,https://api.github.com/repos/mozilla/fxa-email-service/pulls/147,147,feat(settings): add rocket secret_key to settings,"Fixes #146 

When I changed to use `Rocket::custom` instead of `Rocket.toml` for creating configuration, I forgot about `ROCKET_SECRET_KEY`. 

It's good to note that, because we are using `Rocket::custom` none of the `ROCKET_` env vars will work, so if ever we need to set any of the fields in config, we need to add to our config and to our rocket config builder function. 

These are the possible fields in rocket config: https://api.rocket.rs/rocket/config/struct.ConfigBuilder.html#fields

r? @philbooth @jrgm @vladikoff ",brizental,25176023,2018-07-27T05:01:35Z,MEMBER,True,23,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b05c9819cd840d708c13d677eb3708a26c5f9acb,feat(settings): add secret_key to settings
128,https://api.github.com/repos/mozilla/fxa-email-service/pulls/145,145,feat(email): Create debug build and log SES request / responses,"@jrgm This is the debug build that has these extra logs: https://github.com/vladikoff/rusoto/pull/1/files

This means you need to deploy stage / prod with the `feature.debug-ses` docker image",vladikoff,128755,2018-07-26T21:40:33Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ea998a7bce6a0379bd53d40b1cad00528d05a165,feat(email): Create debug build and log SES request / responses
129,https://api.github.com/repos/mozilla/fxa-email-service/pulls/145,145,feat(email): Create debug build and log SES request / responses,"@jrgm This is the debug build that has these extra logs: https://github.com/vladikoff/rusoto/pull/1/files

This means you need to deploy stage / prod with the `feature.debug-ses` docker image",vladikoff,128755,2018-07-26T21:40:33Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,be1050015cd00454ad9020baa863ba9f4d6ffe09,feat(ses): log message before encoding and send params
130,https://api.github.com/repos/mozilla/fxa-email-service/pulls/145,145,feat(email): Create debug build and log SES request / responses,"@jrgm This is the debug build that has these extra logs: https://github.com/vladikoff/rusoto/pull/1/files

This means you need to deploy stage / prod with the `feature.debug-ses` docker image",vladikoff,128755,2018-07-26T21:40:33Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f64702afc605059fa96524d12a107c23fecf302f,feat(email): add logs for the endcoded message
131,https://api.github.com/repos/mozilla/fxa-email-service/pulls/145,145,feat(email): Create debug build and log SES request / responses,"@jrgm This is the debug build that has these extra logs: https://github.com/vladikoff/rusoto/pull/1/files

This means you need to deploy stage / prod with the `feature.debug-ses` docker image",vladikoff,128755,2018-07-26T21:40:33Z,CONTRIBUTOR,False,30,27,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1a459304956f2fc3d64880102d36aab5fa5fce74,feat(bounces): remove bounces checking for testing
132,https://api.github.com/repos/mozilla/fxa-email-service/pulls/144,144,chore(docs): improve release doc,@brizental r?,vladikoff,128755,2018-07-26T01:22:46Z,CONTRIBUTOR,True,2,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,26e7d2a3e023ada535595566d8e50caddbde0bf6,chore(docs): improve release doc
133,https://api.github.com/repos/mozilla/fxa-email-service/pulls/143,143,Release v1.116.3,,vladikoff,128755,2018-07-26T00:58:07Z,CONTRIBUTOR,True,16,3,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7f613980b88d918bf94c7244bfce80851afad569,Release v1.116.3
134,https://api.github.com/repos/mozilla/fxa-email-service/pulls/142,142,feat(settings): enable the default provider to override requests,"Over in https://github.com/mozilla/fxa-auth-server/pull/2535, work is being done to enable the auth server to specify the provider for specific requests. I think this will cause a problem in local dev because we always want to use the local `smtp` provider there, right?

As a hackish approach to resolving that conflict, this change introduces a new boolean setting called `forceprovider`. If `forceprovider` is `true`, the default provider may not be overridden by individual requests.

Maybe there's a less hackish approach though. Any suggestions?

@mozilla/fxa-devs r?",philbooth,64367,2018-07-25T11:38:05Z,CONTRIBUTOR,True,120,33,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ca4b201156e198e5b87b68d2b2092983769a7c62,"feat(settings): enable the default provider to override requests

Over in https://github.com/mozilla/fxa-auth-server/pull/2535, work is
being done to enable the auth server to specify the provider for
specific requests. This causes a problem in fxa-local-dev, because we
always want to use the local smtp provider there.

As a hackish approach to resolving that conflict, this change introduces
a new boolean setting called `forceprovider`. If `forceprovider` is
`true`, the default provider may not be overridden by individual
requests."
135,https://api.github.com/repos/mozilla/fxa-email-service/pulls/142,142,feat(settings): enable the default provider to override requests,"Over in https://github.com/mozilla/fxa-auth-server/pull/2535, work is being done to enable the auth server to specify the provider for specific requests. I think this will cause a problem in local dev because we always want to use the local `smtp` provider there, right?

As a hackish approach to resolving that conflict, this change introduces a new boolean setting called `forceprovider`. If `forceprovider` is `true`, the default provider may not be overridden by individual requests.

Maybe there's a less hackish approach though. Any suggestions?

@mozilla/fxa-devs r?",philbooth,64367,2018-07-25T11:38:05Z,CONTRIBUTOR,True,120,33,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c115318dfa7a848021cc28343a979b69e3439cfc,refactor(settings): group provider-related settings together
136,https://api.github.com/repos/mozilla/fxa-email-service/pulls/141,141,refactor(settings): drop NODE_ENV and add LOG_LEVEL,"Fixes #138 
Connects to #139 

I did this in two different commits on purpose, so that if we wanna keep using `NODE_ENV` we can remove all the code that removes it by resetting to the first commit in this PR. By the way, I had it default to `dev` in case `FXA_EMAIL_ENV` is not set, I'm not sure this is expected behaviour.

Anyways, I added the `FXA_EMAIL_LOG_LEVEL` variable and changed the `FXA_EMAIL_LOGGING` one to `FXA_EMAIL_LOG_FORMAT`. That is getting a little confusing in my opinion, though. This is what is happening right now:

- `FXA_EMAIL_LOG_LEVEL` : sets the rocket logging level, and does nothing to our logs.
- `FXA_EMAIL_LOG_FORMAT`: sets our logs formatting style. One of the options is `null`, though. Which depending on how you look at it, is a logging level and not formatting.

Let me know what you think and if you have better ways to do this.

r? @jrgm @vladikoff @philbooth ",brizental,25176023,2018-07-24T22:18:02Z,MEMBER,True,137,47,11,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c21d0a52b8a4d2ecf766cff1e966f9a8822de99f,refactor(settings): create a logging level setting
137,https://api.github.com/repos/mozilla/fxa-email-service/pulls/141,141,refactor(settings): drop NODE_ENV and add LOG_LEVEL,"Fixes #138 
Connects to #139 

I did this in two different commits on purpose, so that if we wanna keep using `NODE_ENV` we can remove all the code that removes it by resetting to the first commit in this PR. By the way, I had it default to `dev` in case `FXA_EMAIL_ENV` is not set, I'm not sure this is expected behaviour.

Anyways, I added the `FXA_EMAIL_LOG_LEVEL` variable and changed the `FXA_EMAIL_LOGGING` one to `FXA_EMAIL_LOG_FORMAT`. That is getting a little confusing in my opinion, though. This is what is happening right now:

- `FXA_EMAIL_LOG_LEVEL` : sets the rocket logging level, and does nothing to our logs.
- `FXA_EMAIL_LOG_FORMAT`: sets our logs formatting style. One of the options is `null`, though. Which depending on how you look at it, is a logging level and not formatting.

Let me know what you think and if you have better ways to do this.

r? @jrgm @vladikoff @philbooth ",brizental,25176023,2018-07-24T22:18:02Z,MEMBER,True,137,47,11,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,14a6fdc041190f3f5ba6a89fb43d9cf907b9bf46,refactor(settings): drop NODE_ENV in favor of FXA_EMAIL_ENV
138,https://api.github.com/repos/mozilla/fxa-email-service/pulls/141,141,refactor(settings): drop NODE_ENV and add LOG_LEVEL,"Fixes #138 
Connects to #139 

I did this in two different commits on purpose, so that if we wanna keep using `NODE_ENV` we can remove all the code that removes it by resetting to the first commit in this PR. By the way, I had it default to `dev` in case `FXA_EMAIL_ENV` is not set, I'm not sure this is expected behaviour.

Anyways, I added the `FXA_EMAIL_LOG_LEVEL` variable and changed the `FXA_EMAIL_LOGGING` one to `FXA_EMAIL_LOG_FORMAT`. That is getting a little confusing in my opinion, though. This is what is happening right now:

- `FXA_EMAIL_LOG_LEVEL` : sets the rocket logging level, and does nothing to our logs.
- `FXA_EMAIL_LOG_FORMAT`: sets our logs formatting style. One of the options is `null`, though. Which depending on how you look at it, is a logging level and not formatting.

Let me know what you think and if you have better ways to do this.

r? @jrgm @vladikoff @philbooth ",brizental,25176023,2018-07-24T22:18:02Z,MEMBER,True,137,47,11,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2e9b99d576f648dce9fe68527c14ece32893a09f,chore(tests): add tests for new settings options
139,https://api.github.com/repos/mozilla/fxa-email-service/pulls/140,140,feat(providers): create socketlabs provider,"Fixes #123 

Before merging I have to add the instructions for this in the `README.md`, but I thought it was better to just send this in for review first. Also before merging, I will send in a new version of the socketlabs-rs to crates.io. We are pointing to the git repo right now because some minor changes came up during implementation and I thought maybe some more necessary changes might come up during review. When the review is done I publish the new version and point to it instead of the repo.

Theres' a lot of `.clone()` going on in the `SocketLabsProvider`. I don't know if that is necessarily a bad thing, but let me know if you guys think of a better way to do it.

Also, SocketLabs apparently doesn't return any identification for the successfully sent messages. It returns a `TransactionReceipt` field for failed requests, but not successful ones. I just put a blank string where `message_id` should go, for now.

r? @philbooth @vladikoff  ",brizental,25176023,2018-07-24T18:19:56Z,MEMBER,True,185,17,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,05cda64ff3fa6eed532d0ca7b0448cc972096529,feat(providers): create socketlabs provider
140,https://api.github.com/repos/mozilla/fxa-email-service/pulls/137,137,Release v1.116.2,,vladikoff,128755,2018-07-19T14:00:52Z,CONTRIBUTOR,True,12,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,961518fae427e2d01b062ca45794e9cc06b0b3d4,Release v1.116.2
141,https://api.github.com/repos/mozilla/fxa-email-service/pulls/136,136,"fix(docker): Rocket.toml no longer exists, so don't copy it",Docker image build fails without removing this line.,jrgm,758162,2018-07-19T00:06:01Z,CONTRIBUTOR,True,0,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,545fe023c1a72080ed26f0aadee5a369cb38dbb3,"fix(docker): Rocket.toml no longer exists, so don't copy it"
142,https://api.github.com/repos/mozilla/fxa-email-service/pulls/135,135,Release v1.116.1,,vladikoff,128755,2018-07-18T16:42:23Z,CONTRIBUTOR,True,17,2,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,65f953473bfe31e1289b873352182d7fea5b8184,Release v1.116.1
143,https://api.github.com/repos/mozilla/fxa-email-service/pulls/134,134,feat(project): create healthcheck endpoints and make $PORT an env variable,"Fixes #132 
Fixes #133 

I have two questions about this:

1. Should I also check if redis is running on `/__heartbeat__`?
2. Should I add tests for each endpoint?

r? @jrgm @vladikoff 

---

[UPDATE]

I added the fix for #133 in this PR as well, now that I look at it maybe I should have created a different one, but let me know what you think.",brizental,25176023,2018-07-17T19:55:50Z,MEMBER,True,191,18,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,64b44aec43e9fb29fdf47b7399eb0f625da33aa0,feat(project): create healthcheck endpoints
144,https://api.github.com/repos/mozilla/fxa-email-service/pulls/134,134,feat(project): create healthcheck endpoints and make $PORT an env variable,"Fixes #132 
Fixes #133 

I have two questions about this:

1. Should I also check if redis is running on `/__heartbeat__`?
2. Should I add tests for each endpoint?

r? @jrgm @vladikoff 

---

[UPDATE]

I added the fix for #133 in this PR as well, now that I look at it maybe I should have created a different one, but let me know what you think.",brizental,25176023,2018-07-17T19:55:50Z,MEMBER,True,191,18,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,77ca7abd4b06e20c75706f20b4ecf5202322f6fb,feat(settings): make app host and port part of the settings
145,https://api.github.com/repos/mozilla/fxa-email-service/pulls/134,134,feat(project): create healthcheck endpoints and make $PORT an env variable,"Fixes #132 
Fixes #133 

I have two questions about this:

1. Should I also check if redis is running on `/__heartbeat__`?
2. Should I add tests for each endpoint?

r? @jrgm @vladikoff 

---

[UPDATE]

I added the fix for #133 in this PR as well, now that I look at it maybe I should have created a different one, but let me know what you think.",brizental,25176023,2018-07-17T19:55:50Z,MEMBER,True,191,18,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5d770c33e3664a1bb9f8d05401bd95dcd7375bea,chore(test): add tests for healthcheck endpoints
146,https://api.github.com/repos/mozilla/fxa-email-service/pulls/131,131,fix(deploy): pin to a known compatible rust version in docker and ci,"Fixes #130.

We don't want the regular cycle of conflicts between Rust nightlies and (usually) rocket codegen to affect us in prod. And, funnily enough, the version that I first tried pinning to contains one of those of conflicts, so good reminder there. (nightly 2018-07-15 works with Rocket 0.3.15, but we're pinned to a specific commit on master for now)

So this pins to nightly 2018-07-14, and also includes a `cargo update`, and also changes some code in `src/settings/mod.rs` because of an API change in the `config` crate.

@mozilla/fxa-devs r?",philbooth,64367,2018-07-16T11:25:05Z,CONTRIBUTOR,True,214,202,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6b2d4cb935760f1f27d2538da2d0897618425db7,fix(deploy): pin to a known compatible rust version in docker and ci
147,https://api.github.com/repos/mozilla/fxa-email-service/pulls/129,129,fix(docker): include /app/version.json in final image (dockerflow required),"This version.json must be included for the dockerflow to verify to image, so it will require a v1.116.1 tag too.

r? - @philbooth, @vladikoff ",jrgm,758162,2018-07-14T04:31:34Z,CONTRIBUTOR,True,2,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2a6ab88f3001d4925b38136b1f2ca08780d46c19,fix(docker): include /app/version.json in final image (dockerflow required)
148,https://api.github.com/repos/mozilla/fxa-email-service/pulls/128,128,chore(tests): add tests for ses provider and mime message building,"Fixes #21 

Gets all these done: https://github.com/mozilla/fxa-email-service/issues/21#issuecomment-402312872 

I put the mime message building as a default for the `Provider` trait because it is not something exclusive to the SES provider and might be useful for other providers we might implement in the future and it made it easier for testing.

Also, I removed the underline from all error properties, there was no reason for them to be there and it made it more confusing because it seemed like they had the underline because they were not being used... Let me know if you guys think that should be extracted into it's own PR.

Anyways, r? @philbooth @vladikoff ",brizental,25176023,2018-07-12T20:10:15Z,MEMBER,True,285,89,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,86d4854516382c3460ec570e3fafc186a3bfcf74,chore(tests): add tests for mime message building
149,https://api.github.com/repos/mozilla/fxa-email-service/pulls/128,128,chore(tests): add tests for ses provider and mime message building,"Fixes #21 

Gets all these done: https://github.com/mozilla/fxa-email-service/issues/21#issuecomment-402312872 

I put the mime message building as a default for the `Provider` trait because it is not something exclusive to the SES provider and might be useful for other providers we might implement in the future and it made it easier for testing.

Also, I removed the underline from all error properties, there was no reason for them to be there and it made it more confusing because it seemed like they had the underline because they were not being used... Let me know if you guys think that should be extracted into it's own PR.

Anyways, r? @philbooth @vladikoff ",brizental,25176023,2018-07-12T20:10:15Z,MEMBER,True,285,89,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e22741391b0454adc40f8a7ea9a828df01f66001,chore(errors):remove underline from error struct properties
150,https://api.github.com/repos/mozilla/fxa-email-service/pulls/128,128,chore(tests): add tests for ses provider and mime message building,"Fixes #21 

Gets all these done: https://github.com/mozilla/fxa-email-service/issues/21#issuecomment-402312872 

I put the mime message building as a default for the `Provider` trait because it is not something exclusive to the SES provider and might be useful for other providers we might implement in the future and it made it easier for testing.

Also, I removed the underline from all error properties, there was no reason for them to be there and it made it more confusing because it seemed like they had the underline because they were not being used... Let me know if you guys think that should be extracted into it's own PR.

Anyways, r? @philbooth @vladikoff ",brizental,25176023,2018-07-12T20:10:15Z,MEMBER,True,285,89,10,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,178fe728a15218f803a27acd8a00be6f3b2817f3,chore(tests): add tests for the ses provider
151,https://api.github.com/repos/mozilla/fxa-email-service/pulls/127,127,Release v1.116.0,,vladikoff,128755,2018-07-12T16:54:58Z,CONTRIBUTOR,True,33,3,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,926afa4d5ebd4050258fcba3fcae667e050537ac,Release v1.116.0
152,https://api.github.com/repos/mozilla/fxa-email-service/pulls/126,126,chore(config): make smtp provider the default for dev env,"Just like discussed in: https://github.com/mozilla/fxa-auth-server/pull/2511#discussion_r201575999

r? @philbooth @vladikoff ",brizental,25176023,2018-07-12T04:50:31Z,MEMBER,True,5,1,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7ac3d787241c4fd1d69eb82cc200e649816749fa,chore(config): make smtp provider the default for dev env
153,https://api.github.com/repos/mozilla/fxa-email-service/pulls/125,125,feat(logging): turn off rocket logs for production,"Fixes #111 

In order to do this I had to point our rocket version to the Rocket repo and that introduced some breaking changes which I also fixed in this PR. Mostly they were variable name changes 👍 

Anyways now if you run rocket right `ROCKET_ENV=production` you get no rocket logs.

![screen shot 2018-07-11 at 2 26 26 pm](https://user-images.githubusercontent.com/25176023/42600302-abca5e3c-8516-11e8-9eb9-80c0ec34cbe4.png)

r? @vladikoff @philbooth 
",brizental,25176023,2018-07-11T21:28:53Z,MEMBER,True,185,196,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,cc7ba2f77a6ffc29d980d77d54fd768bd3731b0c,feat(logging): turn off rocket logs for production
154,https://api.github.com/repos/mozilla/fxa-email-service/pulls/122,122,feat(providers): implement smtp provider,"Fixes #46 

I also brought back the SMTP settings :)

r? @philbooth @vladikoff ",brizental,25176023,2018-07-10T17:18:31Z,MEMBER,True,339,4,11,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d1c350c7822e505fe7b09f8bacee391085d58f80,feat(providers): implement smtp provider
155,https://api.github.com/repos/mozilla/fxa-email-service/pulls/121,121,fix(docs): better docs for the settings module,"A couple of small documentation fixes, not associated with any issue:

* Add a docstring to the `derive_and_validate` macro expansion. All the other types in `settings` have a doc comment and the generated docs looked incomplete without it for these too.

* Fix up the docs for `SqsUrls`, introducing a newline to keep the outer summary short and moving another note up from the wrong place where it was associated with `SqsUrls::bounce`.

With these changes, the `settings` docs look like this:

<img width=""1057"" alt=""Screen shot of the settings documentation"" src=""https://user-images.githubusercontent.com/64367/42377798-c70dd7bc-811c-11e8-9ddb-1d89b1fd1682.png"" />

@brizental, @mozilla/fxa-devs r?",philbooth,64367,2018-07-06T10:25:07Z,CONTRIBUTOR,True,28,16,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3a376f536b32abca0f48f3c18009928f2369d4b4,fix(docs): add docs for derive_and_validate macro expansion
156,https://api.github.com/repos/mozilla/fxa-email-service/pulls/121,121,fix(docs): better docs for the settings module,"A couple of small documentation fixes, not associated with any issue:

* Add a docstring to the `derive_and_validate` macro expansion. All the other types in `settings` have a doc comment and the generated docs looked incomplete without it for these too.

* Fix up the docs for `SqsUrls`, introducing a newline to keep the outer summary short and moving another note up from the wrong place where it was associated with `SqsUrls::bounce`.

With these changes, the `settings` docs look like this:

<img width=""1057"" alt=""Screen shot of the settings documentation"" src=""https://user-images.githubusercontent.com/64367/42377798-c70dd7bc-811c-11e8-9ddb-1d89b1fd1682.png"" />

@brizental, @mozilla/fxa-devs r?",philbooth,64367,2018-07-06T10:25:07Z,CONTRIBUTOR,True,28,16,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,fe2403e7e0936943f526502d36d56839beae763e,fix(docs): fix docs for settings::SqsUrls
157,https://api.github.com/repos/mozilla/fxa-email-service/pulls/120,120,refactor(types): extract the EmailAddress type to its own module,"@brizental, I changed my mind and decided to do this straight away. The thing that persuaded me was when looking at the docs after merging your PR, `EmailAddress` seemed a bit out-of-place and surprising listed under the `send` module:

<img width=""777"" alt=""Screen shot showing docs for the EmailAddress type appearing on the page for the send module"" src=""https://user-images.githubusercontent.com/64367/42370619-23fd889a-8105-11e8-8e1c-324adb6ccacc.png"" />

@mozilla/fxa-devs r?",philbooth,64367,2018-07-06T09:21:34Z,CONTRIBUTOR,True,81,64,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,db7863a208dfe8b8d743755cf201fd7f48f10240,refactor(types): extract the EmailAddress type to its own module
158,https://api.github.com/repos/mozilla/fxa-email-service/pulls/119,119,fix(scripts): don't try to deploy docs if they haven't changed,,philbooth,64367,2018-07-05T07:06:10Z,CONTRIBUTOR,True,34,17,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e5c05382c47b49517da01dfcdf6c45f68034b7a4,fix(scripts): don't try to deploy docs if they haven't changed
159,https://api.github.com/repos/mozilla/fxa-email-service/pulls/118,118,fix(scripts): stop gh-pages script from failing for pull requests,,philbooth,64367,2018-07-04T22:18:22Z,CONTRIBUTOR,True,18,21,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,9f2741f74b750bae8173d42a3581cce7ba19aa33,fix(scripts): stop gh-pages script from failing for pull requests
160,https://api.github.com/repos/mozilla/fxa-email-service/pulls/117,117,chore(docs): automatically publish rustdoc output to github pages,,philbooth,64367,2018-07-04T20:59:48Z,CONTRIBUTOR,True,35,0,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8b1b2c7ec0b2c592643184ad248c468cbc86349f,chore(docs): automatically publish rustdoc output to github pages
161,https://api.github.com/repos/mozilla/fxa-email-service/pulls/115,115,feat(docs): generate developer docs with rustdoc,"Fixes #51.

Adds a bunch of doc comments for use with `rustdoc`. You can try it out locally by running:

```
cargo doc --no-deps --open
```

It should open something like this in your browser:

<img width=""1230"" alt=""Screen shot showing the generated docs for fxa_email_service"" src=""https://user-images.githubusercontent.com/64367/42247753-05fbf5ee-7f1a-11e8-912a-3d50c92e7f0a.png"" />

If this gets a green-light, I'll also create a GitHub Pages branch so that we can refer/link to a hosted version of the docs without needing to build them locally.

@mozilla/fxa-devs r?",philbooth,64367,2018-07-03T22:37:55Z,CONTRIBUTOR,True,353,38,26,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,17067de49bd54289b23e8a672cc37a84d06b5145,feat(docs): generate developer docs with rustdoc
162,https://api.github.com/repos/mozilla/fxa-email-service/pulls/114,114,refactor(settings): refactor settings properties to types,"Fixes #25 

I gave this a try with only one of the types in Settings to check that I'm in the right direction.

r? @philbooth ",brizental,25176023,2018-07-03T18:01:16Z,MEMBER,True,208,262,17,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7c5ec7260bbcf562b381aaef727cacc65d9d964f,refactor(settings): refactor settings properties to types
163,https://api.github.com/repos/mozilla/fxa-email-service/pulls/112,112,fix(scripts): update references to bin names with `fxa-email-` prefix,,philbooth,64367,2018-07-03T14:30:36Z,CONTRIBUTOR,True,5,5,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,51f95730e65ed78ee8a420086e044475ac1c463b,fix(scripts): update references to bin names with `fxa-email-` prefix
164,https://api.github.com/repos/mozilla/fxa-email-service/pulls/110,110,fix(settings): get message data hmac key setting to work with env variables,"Fixes #109 

Because we had underscores in the name of this setting, it wasn't getting overwritten by an `FXA_EMAIL_` environment variable. At first I thought this was a bug with `config-rs` but it actually looks like a design choice, because they use underscores to signal nesting. For example:

```
  ""authdb"": {
    ""baseuri"": ""http://127.0.0.1:8000/""
  }
```

Will get overwritten by the environment variable `FXA_EMAIL_AUTHDB_BASEURI`.

Anyways, to fix this I changed the `message_id_hmac_key` setting to not have any underscores. Since that was too long for just removing the underscores, I did a little nesting for the resulting environment variable to look nicer. Now, to overwrite the hmac key we can just use `FXA_EMAIL_MESSAGEDATA_HMACKEY`.

I also added that to our settings tests, so that we can make sure it works.

Finally, I remember @philbooth commenting that this is sensitive data that we should probably hide when logging. Should I add a deserializer macro to hide this?

r? @philbooth @vladikoff 

---

[UPDATE]

Looking at `config-rs` source code made me wonder if this really isn't a bug... I filed an issue there (https://github.com/mehcode/config-rs/issues/73) and will try to investigate it.

",brizental,25176023,2018-06-28T00:26:56Z,MEMBER,True,15,8,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f371fa723aa4900f2f898b45fbf82c5c2581c024,fix(settings): get message data hmac key setting to work with env variables
165,https://api.github.com/repos/mozilla/fxa-email-service/pulls/107,107,feat(docker): copy Rocket.toml in the docker image,Fixes #106,vladikoff,128755,2018-06-27T20:10:31Z,CONTRIBUTOR,True,1,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c0e68fa1d3151936066b31c002eb7899ea4fcde4,"feat(docker): copy Rocket.toml in the docker image

Fixes #106"
166,https://api.github.com/repos/mozilla/fxa-email-service/pulls/105,105,feat(docker): set ROCKET_ENV to prod,,vladikoff,128755,2018-06-27T17:58:50Z,CONTRIBUTOR,True,2,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,830db7c6b4f039229af581e2bb6767573146ee4c,feat(docker): set ROCKET_ENV to prod
167,https://api.github.com/repos/mozilla/fxa-email-service/pulls/104,104,chore(settings): prepare prod and stage configs for deployment,"Fixes #100 
Fixes #24 

As mentioned in #24 we still need to see about `ROCKET_WORKERS`.

Also, in production, rocket sends a warning about not having set a secret_key, but I decided to leave it without anything for now. Anyways that would be something that probably we wouldn't ""hard code"" here.

r? @vladikoff @philbooth ",brizental,25176023,2018-06-27T16:28:29Z,MEMBER,True,17,1,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b7022cf1f2598f96cf3dac4bd25ff53e422cab96,chore(settings): prepare prod and stage configs for deployment
168,https://api.github.com/repos/mozilla/fxa-email-service/pulls/103,103,Release v1.115.0,"An initial release to sync up with the rest of the projects. The steps are a bit manual

I looked at more automation with https://github.com/sunng87/cargo-release but not done yet.",vladikoff,128755,2018-06-26T23:33:11Z,CONTRIBUTOR,True,79,2,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,712b1b7acd9693bbf2b267ebcd8bae0d03ce8468,Release v1.115.0
169,https://api.github.com/repos/mozilla/fxa-email-service/pulls/102,102,feat(logging): add null logger for testing environment,"Fixes #82 

When we are in a testing environment (which means when `NODE_ENV=test`) the logger won't show anything. 

So now, instead of having `mozlog:true | false` in the config, we have `logging: null | pretty | mozlog`.

r? @vladikoff ",brizental,25176023,2018-06-26T22:55:27Z,MEMBER,True,35,18,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,57bd9b37ce663ff46801b538df6cadcb07cff4b4,feat(logging): add null logger for testing environment
170,https://api.github.com/repos/mozilla/fxa-email-service/pulls/101,101,chore(ci): add circle ci badge,,vladikoff,128755,2018-06-26T21:52:06Z,CONTRIBUTOR,True,1,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,158b2f7fc7d7975a55cf8a8d298cb7873a934182,chore(ci): add circle ci badge
171,https://api.github.com/repos/mozilla/fxa-email-service/pulls/96,96,Make final binary names more verbose,"Fixes https://github.com/mozilla/fxa-email-service/issues/93

@philbooth is this verbose enough you think? ",vladikoff,128755,2018-06-25T14:27:07Z,CONTRIBUTOR,True,8,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,37620b9642670837b8077d946b9dbbc3984deb89,"refactor(bin): Make final binary names more verbose

Fixes #93"
172,https://api.github.com/repos/mozilla/fxa-email-service/pulls/95,95,chore(project): update rocket to work with latest nightly,,philbooth,64367,2018-06-25T07:42:00Z,CONTRIBUTOR,True,64,64,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1c99ab7443ac7cde6a3424217f4814d9ee000eaf,chore(project): update rocket to work with latest nightly
173,https://api.github.com/repos/mozilla/fxa-email-service/pulls/94,94,refactor(errors): use failure crate to handle errors,"Connects to #48 

I had to change basically everything since my last PR (#85) about this, so I thought it would be best to just create a new PR.

To  get the failure errors working I needed to get at least `providers`, `bounces` and `db` to also work with the failure errors, not just the Rocket and HTTP errors. That's what I'm doing in this PR. Since this is kind of a big change, I thought it would be best to send this in before adapting the tests to the new error type, so, right now, many tests are commented.

Let me know what you guys think. If you think this is a good change I still would need to adapt all tests and also there are some error types specially for the queues bin that need to be changed as well.

I personally think this is a good change. It is abstracting all the errors to one single place in the code. While working on this refactoring, I saw a bunch of repeated code for error handling. This ends that, which means it will be easier to maintain and create new error types with this way of doing things. Also, we are now getting much more information about each error, not just the HTTP status and message and it's very easy to customize this even further.

Anyways, this still has a bunch of work to be ready to merge :)

r? @vladikoff @philbooth @pjenvey",brizental,25176023,2018-06-23T20:49:15Z,MEMBER,True,476,330,15,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,155c8e4b7c50d5665036e3c0332b851849b69cd1,refactor(errors): use failure crate to handle errors
174,https://api.github.com/repos/mozilla/fxa-email-service/pulls/91,91,fix(queues): parse notifications synthesized from sendgrid events,"Fixes #6. Fixes #90.

There are ~~two~~ three fixes here:

* In 13ea68f, I fix a really stupid piece of code that means parsing always fails for queue notifications.

* In 12361e2, I make a bunch of fields in the `Notification` type optional, so that we can synthesize them from Sendgrid events without having to invent dummy data. It's not stuff we're actually using anyway, so it could have been optional already.

* In 8fa51ec, I fix another really stupid piece of code where it was trying to deserialize `bouncedRecipients` using the wrong name.

There are no test changes because we don't have proper test coverage for the SQS stuff yet, which probably contributed to my mistake for the first fix. But writing those tests is a bigger piece of work and landing this in the meantime means I can finally close out #6 (in combination with [mozilla/fxa-sendgrid-event-proxy](https://github.com/mozilla/fxa-sendgrid-event-proxy), which I'll request a review for separately).

@mozilla/fxa-devs r?",philbooth,64367,2018-06-21T09:21:33Z,CONTRIBUTOR,True,24,15,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,13ea68f7213c357a8e59605d5ace54077be0ecc7,fix(queues): fix nonsensical parse logic for sqs notifications
175,https://api.github.com/repos/mozilla/fxa-email-service/pulls/91,91,fix(queues): parse notifications synthesized from sendgrid events,"Fixes #6. Fixes #90.

There are ~~two~~ three fixes here:

* In 13ea68f, I fix a really stupid piece of code that means parsing always fails for queue notifications.

* In 12361e2, I make a bunch of fields in the `Notification` type optional, so that we can synthesize them from Sendgrid events without having to invent dummy data. It's not stuff we're actually using anyway, so it could have been optional already.

* In 8fa51ec, I fix another really stupid piece of code where it was trying to deserialize `bouncedRecipients` using the wrong name.

There are no test changes because we don't have proper test coverage for the SQS stuff yet, which probably contributed to my mistake for the first fix. But writing those tests is a bigger piece of work and landing this in the meantime means I can finally close out #6 (in combination with [mozilla/fxa-sendgrid-event-proxy](https://github.com/mozilla/fxa-sendgrid-event-proxy), which I'll request a review for separately).

@mozilla/fxa-devs r?",philbooth,64367,2018-06-21T09:21:33Z,CONTRIBUTOR,True,24,15,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,12361e2b3316a3249e39dd452c7f2a198bcc744a,fix(queues): accept partially-filled notifications from sendgrid
176,https://api.github.com/repos/mozilla/fxa-email-service/pulls/91,91,fix(queues): parse notifications synthesized from sendgrid events,"Fixes #6. Fixes #90.

There are ~~two~~ three fixes here:

* In 13ea68f, I fix a really stupid piece of code that means parsing always fails for queue notifications.

* In 12361e2, I make a bunch of fields in the `Notification` type optional, so that we can synthesize them from Sendgrid events without having to invent dummy data. It's not stuff we're actually using anyway, so it could have been optional already.

* In 8fa51ec, I fix another really stupid piece of code where it was trying to deserialize `bouncedRecipients` using the wrong name.

There are no test changes because we don't have proper test coverage for the SQS stuff yet, which probably contributed to my mistake for the first fix. But writing those tests is a bigger piece of work and landing this in the meantime means I can finally close out #6 (in combination with [mozilla/fxa-sendgrid-event-proxy](https://github.com/mozilla/fxa-sendgrid-event-proxy), which I'll request a review for separately).

@mozilla/fxa-devs r?",philbooth,64367,2018-06-21T09:21:33Z,CONTRIBUTOR,True,24,15,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8fa51ec2a115655bacd9e838bb6b1c7b8e19c78f,fix(queues): use correct name when deserializing bouncedRecipients
177,https://api.github.com/repos/mozilla/fxa-email-service/pulls/89,89,feat(providers): add custom headers option,"Relates to #75 

This still needs tests, but I thought we should discuss which tests together :)",brizental,25176023,2018-06-21T00:39:39Z,MEMBER,True,122,28,8,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1ae03184bb7879b8fa834d2c32a2c696a0a0e32b,feat(providers): add custom headers option
178,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,23c8fd6796bd230200cfc95dfafdaa5f6ee59a11,"feat(ci): add Dockerhub deploy via CircleCI

Fixes #47"
179,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4618f32d824bbf73a88854085a57f6f068d2c0bd,feat(docker): push docker image
180,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,cd3f0c0b1dd0c934336eab8d24233ee36f63e9a6,Simplify test for now
181,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,343a4b3a9f966f872fd4c3fe0b039eed27ed0c57,fix(ci): test deploy again
182,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,a2d5201b0f8345f8611038e5bd6304debd2619f8,Switch docker image
183,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4c24afeb54ac5ca5a1c085f378396c4e5fc13290,Set shell
184,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2ec349ab4a451e46282f33fad9a32c3a6cc6eef7,fix(ci): move release into root dir so it can consume config
185,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,a64c8dc124f08fdeaacfffcb220abb42cfe8a268,feat(docker): throw more certs at it
186,https://api.github.com/repos/mozilla/fxa-email-service/pulls/87,87,Setup Circle CI to create docker images,"Fixes #47

Rebranched  https://github.com/mozilla/fxa-email-service/pull/64

",vladikoff,128755,2018-06-20T20:32:06Z,CONTRIBUTOR,True,114,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,562382f4ffe127a5b33116e5241d92012e4ec7b8,Move config properly
187,https://api.github.com/repos/mozilla/fxa-email-service/pulls/86,86,fix(validation): make email regex less restrictive,"Fixes #81 

Inspired by: https://github.com/mozilla/fxa-content-server/blob/master/app/scripts/lib/validate.js#L30
Tested with: https://github.com/mozilla/fxa-content-server/blob/master/app/tests/spec/lib/validate.js#L18 and also https://blogs.msdn.microsoft.com/testing123/2009/02/06/email-address-test-cases/

r? @vladikoff @philbooth 

Should we add test cases for this?
",brizental,25176023,2018-06-19T22:53:51Z,MEMBER,True,109,3,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,221244fefa1cf0e6b01abe9e7caee8276f2f7095,fix(validation): make email regex less restrictive
188,https://api.github.com/repos/mozilla/fxa-email-service/pulls/86,86,fix(validation): make email regex less restrictive,"Fixes #81 

Inspired by: https://github.com/mozilla/fxa-content-server/blob/master/app/scripts/lib/validate.js#L30
Tested with: https://github.com/mozilla/fxa-content-server/blob/master/app/tests/spec/lib/validate.js#L18 and also https://blogs.msdn.microsoft.com/testing123/2009/02/06/email-address-test-cases/

r? @vladikoff @philbooth 

Should we add test cases for this?
",brizental,25176023,2018-06-19T22:53:51Z,MEMBER,True,109,3,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,37e8bbb8ae222930ba8c27bc976f2e4924107ac8,fix(validation): add more tests to email validation
189,https://api.github.com/repos/mozilla/fxa-email-service/pulls/86,86,fix(validation): make email regex less restrictive,"Fixes #81 

Inspired by: https://github.com/mozilla/fxa-content-server/blob/master/app/scripts/lib/validate.js#L30
Tested with: https://github.com/mozilla/fxa-content-server/blob/master/app/tests/spec/lib/validate.js#L18 and also https://blogs.msdn.microsoft.com/testing123/2009/02/06/email-address-test-cases/

r? @vladikoff @philbooth 

Should we add test cases for this?
",brizental,25176023,2018-06-19T22:53:51Z,MEMBER,True,109,3,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,71e010f349497d572ba9cd6474b90e17ff9b8060,fix(validation): add tests for email_address deserializer
190,https://api.github.com/repos/mozilla/fxa-email-service/pulls/85,85,refactor(errors): use failure crate to handle errors,"Relates to #48 

This is still a work in progress, but you guys can already have a look at how this would work out.",brizental,25176023,2018-06-19T15:39:32Z,MEMBER,False,154,53,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,011715255e29a6ab3e857566de9a9580d087edf5,refactor(errors): use failure crate to handle errors
191,https://api.github.com/repos/mozilla/fxa-email-service/pulls/80,80,refactor(db): hide queues db access behind bounces interface,"Fixes #68.

We don't want to let knowledge about the auth db leak into any unrelated application logic, because it's both temporary and in possession of capabilities that this repo has no business knowing about.

@mozilla/fxa-devs r?",philbooth,64367,2018-06-17T08:45:39Z,CONTRIBUTOR,True,174,91,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4ad82cc39adfa39dce32f0fe2a58978553291c06,refactor(db): hide queues db access behind bounces interface
192,https://api.github.com/repos/mozilla/fxa-email-service/pulls/79,79,chore(project): unpin rust from nightly-2018-06-10,,philbooth,64367,2018-06-17T05:55:50Z,CONTRIBUTOR,True,77,65,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6c04e9a78e2bfd543a1baa49556d9919fb95ccc4,chore(project): unpin rust from nightly-2018-06-10
193,https://api.github.com/repos/mozilla/fxa-email-service/pulls/78,78,refactor(project): push core code into a common lib,"Fixes #76.

All of the code is now compiled into a common `fxa_email_service` lib, which the `service` and `queues` binaries link to. In terms of running the tests and executing the binaries, nothing has really changed. But it should mean we don't get any more dead code warnings.

No rush to review, it can wait until after the All Hands.",philbooth,64367,2018-06-14T13:11:18Z,CONTRIBUTOR,True,68,85,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ca1e1159f87052deab129f8ba8ca9b35d8e78b0e,refactor(project): push core code into a common lib
194,https://api.github.com/repos/mozilla/fxa-email-service/pulls/74,74,feat(logging): add mozlog to settings and scrub sensitive data,"Fixes #18 
Connects to #10 

I think this turned out nicer than my first trial to log the settings data :) Let me know what you guys think.

This is still a partial fix to #10 because I still need to look at logging for the queues.

This is how the settings log looks like:

```
{""Logger"":""fxa-email-service-0.1.0"",""Type"":""fxa-email-service:log"",""Pid"":14300,""Severity"":6,""Timestamp"":1528911237258753000,""Fields"":{""msg"":""Finished configuration successfully."",""settings"":""{\""authdb\"":{\""baseuri\"":\""http://127.0.0.1:8000/\""},\""aws\"":{\""keys\"":\""[hidden]\"",\""region\"":\""us-east-1\"",\""sqsurls\"":null},\""bouncelimits\"":{\""enabled\"":true,\""complaint\"":[{\""period\"":86400000,\""limit\"":0},{\""period\"":31536000000,\""limit\"":1}],\""hard\"":[{\""period\"":86400000,\""limit\"":0},{\""period\"":31536000000,\""limit\"":1}],\""soft\"":[{\""period\"":300000,\""limit\"":0}]},\""mozlog\"":true,\""provider\"":\""ses\"",\""sender\"":{\""address\"":\""verification@latest.dev.lcip.org\"",\""name\"":\""Firefox Accounts\""},\""sendgrid\"":\""[hidden]\""}""}}
```

---

[EDIT]

Since both queue and service use the settings function and the settings function now uses the logging module, the queue is now worrying about the service dependencies. That's not really nice...

I'll take a look at this and see if I can isolate each of them, instead of just importing everything from service into queue. That is also generating many warnings, which is annoying.

Should I open an issue for that or just try and fix it in this PR already? Do you guys have any idea on how to fix this easily?

Thanks!

---

r? @philbooth @vladikoff ",brizental,25176023,2018-06-13T17:08:38Z,MEMBER,True,142,21,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,92cbe0bcd3a144fcefc7f1f28fbee9fad8022fc9,feat(logging): add mozlog to settings and scrub sensitive data
195,https://api.github.com/repos/mozilla/fxa-email-service/pulls/73,73,feat(metadata): send message metadata in outgoing notifications,"Depends on #72. Fixes #4.

Adds the ability to consume stored metadata from Redis and add it to the outgoing notification.

Again, no rush to review this, it can wait until after the All Hands.",philbooth,64367,2018-06-13T15:36:15Z,CONTRIBUTOR,True,78,20,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,de804e1aeb72a15dcf14d367083d8cb5b283c518,feat(metadata): send message metadata in outgoing notifications
196,https://api.github.com/repos/mozilla/fxa-email-service/pulls/72,72,feat(metadata): store caller-specific metadata with the message id,"Related to #4.

Stores a ""metadata"" string from the caller in Redis, keyed by a hash of the message id. In practice said metadata will be JSON in the auth server's case, but this repo neither knows or cares about that. No functionality is added here to read or clear the data from Redis, that's coming in a separate changeset for the queues process.

No rush to review this, it can wait until you guys are back from the All Hands.",philbooth,64367,2018-06-12T18:42:27Z,CONTRIBUTOR,True,256,11,15,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,801d0a8ef6f8b343e8f912ebb0fb03d8de744719,"feat(metadata): store caller-specific metadata with the message id

Stores a ""metadata"" string from the caller in Redis, keyed by a hash of
the message id. In practice the metadata is JSON in the auth server's
case, but this repo neither knows or cares about that. No functionality
is added here to read or clear the data from Redis, that's coming in a
separate changeset for the queues process.

The HMAC key for hashing the message id comes from config, obviously,
because it's secret. It has a very specific name at the moment, but we
should feel free to rename it to something more generic than that if we
have other data that we'd like to hash with it in the future."
197,https://api.github.com/repos/mozilla/fxa-email-service/pulls/71,71,feat(clippy): add clippy linting to ci and fix lints,"Fixes #52 .

For running this locally, just keep in mind that clippy only shows warnings once after each build. That appears to have changed on the updated version of clippy, but since we locked our nightly version we're still having that issue.

Also I added two macros to avoid clippy linting for some stuff. That was because I didn't agree with the lint and wanted to hide the warning message. I tried to add this kinds of configs to the `.clippy.toml` file, but couldn't figure out how, I'm not even sure it's possible.

I added clippy to the end of our CI, also.

Anyways, mostly I think the lints were useful. What do you guys think?

r? @philbooth @vladikoff 

",brizental,25176023,2018-06-11T18:13:28Z,MEMBER,True,18,17,8,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,99dd493dc0df0e455fd72d9daf3824c8d4484d5b,"refactor(clippy): refactor job based on some clippy lints

Fixes #52"
198,https://api.github.com/repos/mozilla/fxa-email-service/pulls/70,70,refactor(service): remove smtp settings,"Fixes #61 .

Not much to talk about here, just deleted the settings and adjusted the tests.

The `Cargo.lock` file was updated as well, I think that's because some of the crates were updated. Since we got `>=` in the cargo versions right now, I think when crates are updated we just grab the new versions on `cargo build`, thus updating the `Cargo.lock` file.

Anyways, r? @philbooth @vladikoff ",brizental,25176023,2018-06-11T16:04:33Z,MEMBER,True,6,137,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,29b1f4b5473fdd57f67069a0f2f4b28c28d29cb6,refactor(service): remove smtp settings
199,https://api.github.com/repos/mozilla/fxa-email-service/pulls/69,69,chore(project): pin rust to nightly-2018-06-10,,philbooth,64367,2018-06-11T06:54:29Z,CONTRIBUTOR,True,7,9,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,02965a0b4253d513c706f281083dcc0c060e1448,chore(project): pin rust to nightly-2018-06-10
200,https://api.github.com/repos/mozilla/fxa-email-service/pulls/67,67,refactor(service): move bounces and providers to rocket managed state,"Related to #49 and https://github.com/mozilla/fxa-email-service/pull/66#discussion_r194215830. @brizental and @vladikoff this is what I meant by making `Bounces` generic, not sure if I was very clear in my comment. It lets us keep the db stuff out of the calling module is all. Feel free to ignore if you think it's stupid!",philbooth,64367,2018-06-09T11:52:24Z,CONTRIBUTOR,False,94,57,13,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,364accc57cf198af6ca65c82007bb18baed15bf6,refactor(service): move bounces and providers to rocket managed state
201,https://api.github.com/repos/mozilla/fxa-email-service/pulls/66,66,fix(config): inject config in rocket managed state,"Fixes #49 

Send test are failing at the moment, but ready for review.

r? @philbooth @vladikoff 

Co-authored-by: Philip Jenvey <pjenvey@underboss.org>",brizental,25176023,2018-06-09T02:07:11Z,MEMBER,True,135,98,14,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8d1591f6a6c081a91d19af8af1667d006a44e34d,"fix(config): inject config in rocket managed state

fixes #49"
202,https://api.github.com/repos/mozilla/fxa-email-service/pulls/66,66,fix(config): inject config in rocket managed state,"Fixes #49 

Send test are failing at the moment, but ready for review.

r? @philbooth @vladikoff 

Co-authored-by: Philip Jenvey <pjenvey@underboss.org>",brizental,25176023,2018-06-09T02:07:11Z,MEMBER,True,135,98,14,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,409e06e792033a412d8b876bd2ea11e5d1b39983,fix(formatting): apply fmt updated formatting to files
203,https://api.github.com/repos/mozilla/fxa-email-service/pulls/65,65,fix(logging): add mozlog logging for requests,"As discussed in #63 , this is a partial PR to fix #10 .

I adapted the megaphone logging module for our purposes. https://github.com/mozilla-services/megaphone/blob/c7353f7e167a34aa7617cc23ac9489f395d77ff4/src/logging.rs

This is using [Fairings](https://api.rocket.rs/rocket/fairing/trait.Fairing.html) to log every time a user makes a request. It logs when the request started and when it is done and if it errored.

It uses a config variable called `FXA_EMAIL_MOZLOG` which defaults to `true`. I also added a `dev.json` and, if you set your `NODE_ENV` to `dev` it will be used and will set `FXA_EMAIL_MOZLOG` to `false`, which will produce a prettier log.

I think this is ready to be integrated  with our codebase. I will send other PR's with the settings and the queue loggers.

r? @philbooth @vladikoff ",brizental,25176023,2018-06-08T17:18:58Z,MEMBER,True,312,1,8,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e6d4a3fdbc8c1d58c6d115cc0b6424fee1abaded,fix(logging): add mozlog logging for requests
204,https://api.github.com/repos/mozilla/fxa-email-service/pulls/64,64,feat(ci): add Dockerhub deploy via CircleCI,Fixes #47,vladikoff,128755,2018-06-08T03:37:57Z,CONTRIBUTOR,False,127,0,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,aaf843fd976f1ae873527dcb217ee631883a546a,"feat(ci): add Dockerhub deploy via CircleCI

Fixes #47"
205,https://api.github.com/repos/mozilla/fxa-email-service/pulls/63,63,feat(logging): add mozlog logging to requests,"Starts to fix #10 

I adapted the megaphone logging module for our purposes. https://github.com/mozilla-services/megaphone/blob/c7353f7e167a34aa7617cc23ac9489f395d77ff4/src/logging.rs

This is using [Fairings](https://api.rocket.rs/rocket/fairing/trait.Fairing.html) to log every time  a user makes a request. It logs when the request started and when it is done. 

There are still some more `println!`'s to replace, specially in the queues, but I thought it was best to send this in for you guys to check if I'm in the right direction.

Also, I added a new config variable `FXA_EMAIL_JSONLOGGING`, it defaults to `false`. If it's `true` it will log mozlog style. If it's `false` it will use pretty formatting.

r? @philbooth @vladikoff ",brizental,25176023,2018-06-07T17:30:08Z,MEMBER,False,388,14,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6eed66ed8f9e0ecdf55a29165553d88774778ddc,feat(logging): add mozlog logging to requests
206,https://api.github.com/repos/mozilla/fxa-email-service/pulls/63,63,feat(logging): add mozlog logging to requests,"Starts to fix #10 

I adapted the megaphone logging module for our purposes. https://github.com/mozilla-services/megaphone/blob/c7353f7e167a34aa7617cc23ac9489f395d77ff4/src/logging.rs

This is using [Fairings](https://api.rocket.rs/rocket/fairing/trait.Fairing.html) to log every time  a user makes a request. It logs when the request started and when it is done. 

There are still some more `println!`'s to replace, specially in the queues, but I thought it was best to send this in for you guys to check if I'm in the right direction.

Also, I added a new config variable `FXA_EMAIL_JSONLOGGING`, it defaults to `false`. If it's `true` it will log mozlog style. If it's `false` it will use pretty formatting.

r? @philbooth @vladikoff ",brizental,25176023,2018-06-07T17:30:08Z,MEMBER,False,388,14,9,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1cd790844d4baabc11f2cf8f07d22975e8e01c1a,feat(logging): add mozlog logging to settings
207,https://api.github.com/repos/mozilla/fxa-email-service/pulls/60,60,chore(project): remove the validator dependency,"Fixes #41.

Since we got the sprauncy new regex in #45, I decided to quickly whip out this dependency right away. It's been annoying me for a while.

@mozilla/fxa-devs r?",philbooth,64367,2018-06-06T11:16:26Z,CONTRIBUTOR,True,7,19,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,809953e95aef563eff141d94c880363fddb24b5a,chore(project): remove the validator dependency
208,https://api.github.com/repos/mozilla/fxa-email-service/pulls/59,59,fix(bounces): ensure db errors don't get converted to 429 responses,"Fixes #56.

We were indiscriminately converting all bounce errors to a 429 response. This changes it so we only return the 429 if the error has a bounce record, otherwise we return a 500.

@mozilla/fxa-devs r?",philbooth,64367,2018-06-06T10:11:13Z,CONTRIBUTOR,True,18,5,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,ec5d2cea94215e54f0dc3c3b485f70957a7a8bf8,fix(bounces): ensure db errors don't get converted to 429 responses
209,https://api.github.com/repos/mozilla/fxa-email-service/pulls/58,58,chore(project): limit futures to < 0.2,"Whoops, should have remembered this when reviewing #57, we can't use futures 0.2 yet so this pins it to the 0.1 family. (running `cargo update` then `cargo t` without this change will fail)

@mozilla/fxa-devs r?",philbooth,64367,2018-06-05T21:02:42Z,CONTRIBUTOR,True,9,20,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,59724ca757bf95ef856a18d1746df360485fd96b,chore(project): limit futures to < 0.2
210,https://api.github.com/repos/mozilla/fxa-email-service/pulls/57,57,chore(project): loosen dependencies version numbers,"This fixes #40.

I tried to only use the `>` operator, but that didn't work. Since our versions are the latest and the `>` excludes the current version, it just returned an error saying the version was not found.

Anyways, I think the idea was to include the current version or newer, and that's how it is working now.

r? @philbooth @vladikoff ",brizental,25176023,2018-06-05T20:29:23Z,MEMBER,True,21,21,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8acb31601773ed9f62eecaa40c48b932352205b2,chore(project): loosen dependencies version numbers
211,https://api.github.com/repos/mozilla/fxa-email-service/pulls/55,55,fix(validation): relax the sendgrid API key validation regex,"I thought this might have been too restrictive and it was. I didn't listen to myself though, did I?

@brizental, this should let your Sendgrid API key pass validation. r?

(and @fxa-devs r?)",philbooth,64367,2018-06-05T17:48:22Z,CONTRIBUTOR,True,4,10,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,afc556342c5e6c9246e52a823781bc4efb52015c,fix(validation): relax the sendgrid API key validation regex
212,https://api.github.com/repos/mozilla/fxa-email-service/pulls/45,45,bug: allow RFC5321 compliant email addresses,"email address validation is a pain, and you can use a surprising variety
of characters in an address.

(At least we're drawing the line at no quoted characters...)

Closes #44",jrconlin,35755,2018-06-05T16:12:35Z,CONTRIBUTOR,True,5,2,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,9d3ef7ae4b30c9aaa9cf8457906992f7f817a967,"bug: allow RFC5321 compliant email addresses

email address validation is a pain, and you can use a surprising variety
of characters in an address.

(At least we're drawing the line at no quoted characters...)

Closes #44"
213,https://api.github.com/repos/mozilla/fxa-email-service/pulls/43,43,chore(code): eliminate some if-lets in favour of combinators,"Spotted a few more of these just as I was about to start on a new branch, wanted to pull them out of that PR.

@mozilla/fxa-devs r?",philbooth,64367,2018-06-05T12:10:41Z,CONTRIBUTOR,True,4,17,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,11cba477ace4e4e33189f948952fcddb99b33aea,chore(code): eliminate some if-lets in favour of combinators
214,https://api.github.com/repos/mozilla/fxa-email-service/pulls/39,39,chore(errors): don't serialize nulls in error payloads,"It was annoying me that our error payloads include explicit `nulls`, then over the weekend I spotted this fix in someone else's code. Works well, although I couldn't figure out how to write tests for it because we get the `ApplicationError` type back there, rather than the raw JSON string.

Before:

```
~/c/fxa-email-service (master) $ curl -d '{""subject"":""bar"",""body"":{""text"":""baz""}}' -H 'Content-Type: application/json' http://localhost:8001/send
{""status"":400,""error"":""Bad Request"",""errno"":null,""message"":null,""data"":null}
```

After:

```
~/c/fxa-email-service (pb/strip-nulls-from-errors) $ curl -d '{""subject"":""bar"",""body"":{""text"":""baz""}}' -H 'Content-Type: application/json' http://localhost:8001/send
{""status"":400,""error"":""Bad Request""}
```

@mozilla/fxa-devs r?",philbooth,64367,2018-06-04T11:04:16Z,CONTRIBUTOR,True,3,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6ce43f9801deefc00bd72cf66214edfeb25e6eb1,chore(errors): don't serialize nulls in error payloads
215,https://api.github.com/repos/mozilla/fxa-email-service/pulls/37,37,fix(sendgrid): return message id from the sendgrid provider,Marking as `WIP` while I wait to see what comes out of gsquire/sendgrid-rs#23. This gets it working but may be unnecessarily hackish.,philbooth,64367,2018-06-01T22:09:45Z,CONTRIBUTOR,True,314,83,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6a650efc6d0a137b56a12ee8f9a8f8ea071ad1a6,fix(sendgrid): return message id from the sendgrid provider
216,https://api.github.com/repos/mozilla/fxa-email-service/pulls/36,36,fix(errors): return JSON payloads for error responses,"Fixes #8.

It's not a perfect implementation by any means, because there's no request-specific data being included in the payloads. But at least it means we're actually returning JSON for the common error types now.

I opted to include `errno`, `message` and `data` as fields in the `ApplicationError` struct even though we're not setting them yet, just to stake out their existence in the API.

@mozilla/fxa-devs r?",philbooth,64367,2018-06-01T14:35:22Z,CONTRIBUTOR,True,166,7,4,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,3875fa021dd04ced5db5d47853fc57e74482f621,fix(errors): return JSON payloads for error responses
217,https://api.github.com/repos/mozilla/fxa-email-service/pulls/35,35,"chore(project): update rocket, unpin from nightly-2018-05-29",,philbooth,64367,2018-06-01T08:13:23Z,CONTRIBUTOR,True,29,28,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,2cd554a1c03f7ad2daf26114b5b75238d7161a33,"chore(project): update rocket, unpin from nightly-2018-05-29"
218,https://api.github.com/repos/mozilla/fxa-email-service/pulls/34,34,feat(sendgrid): implement basic sending via sendgrid,"Related to #6.

This is the easy part of the Sendgrid implementation, sending email. Bounce/complaint/delivery notifications will come in a subsequent PR.

Hopefully there's nothing too surprising here, it just adds a new `SendgridProvider` that looks much the same as the `SesProvider` we already have.

You can test it out for real by getting a Sendgrid API key and adding `""provider"":""sendgrid""` to your request payload.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-31T13:31:47Z,CONTRIBUTOR,True,367,59,13,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b6a267ae90e43f12f353e552c99dc26f0b682110,feat(sendgrid): implement basic sending via sendgrid
219,https://api.github.com/repos/mozilla/fxa-email-service/pulls/34,34,feat(sendgrid): implement basic sending via sendgrid,"Related to #6.

This is the easy part of the Sendgrid implementation, sending email. Bounce/complaint/delivery notifications will come in a subsequent PR.

Hopefully there's nothing too surprising here, it just adds a new `SendgridProvider` that looks much the same as the `SesProvider` we already have.

You can test it out for real by getting a Sendgrid API key and adding `""provider"":""sendgrid""` to your request payload.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-31T13:31:47Z,CONTRIBUTOR,True,367,59,13,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,5de0af6e4531a98be9907544c09008dd81d2d2a3,chore(validate): limit sendgrid API key to 69 characters
220,https://api.github.com/repos/mozilla/fxa-email-service/pulls/33,33,chore(project): cargo update + pin to nightly-2018-05-29,,philbooth,64367,2018-05-31T08:26:19Z,CONTRIBUTOR,True,69,70,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b2bc4278846c08f11c6761d98a66f9bef743ad49,"chore(project): cargo update + pin to nightly-2018-05-29

Rocket 0.3.11 doesn't compile in Rust nightly-2018-05-30."
221,https://api.github.com/repos/mozilla/fxa-email-service/pulls/32,32,chore(queues): split out a separate process for queue-handling,"Extracted from #28.

Obviously we don't want to do queue-handling in the same process that manages the send API, but we do want to re-use lots of the same code between the two processes. There's a few different ways to achieve that in Rust and I opted for the most basic: just build two different binaries from the same `Cargo.toml`.

I have read some commentary suggesting that a ""better"" way to do it is put all of the common logic into a separate lib project and then have the two binary projects use that, but I think this way works just as well and involves less monkeying about with directories and `Cargo.toml`. Plus there's some logic that isn't common to both binaries, and it feels more coherent for that to live alongside the common logic than be siloed off elsewhere.

But of course there's nothing to stop us from pursuing the other approach in the future if this one doesn't work out for some reason.

Two shell scripts, `./r` and `./rq`, are provided to save keystrokes when you want to run the respective binaries. There is no attempt made here to actually implement any of the queue-handling logic, that will be in a separate PR.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-28T13:41:17Z,CONTRIBUTOR,True,78,25,12,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e418016d7a7d32b90abaa2d1d69ea92e65628873,chore(queues): split out a separate process for queue-handling
222,https://api.github.com/repos/mozilla/fxa-email-service/pulls/31,31,feat(db): implement AuthDb::create_bounce,Extracted from #28. Depends on #29.,philbooth,64367,2018-05-28T11:41:09Z,CONTRIBUTOR,True,190,2,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4cd25cbc299a51dd53b19d30467f106b00df4740,feat(db): implement AuthDb::create_bounce
223,https://api.github.com/repos/mozilla/fxa-email-service/pulls/30,30,fix(errors): include more useful messages in wrapping errors,"Extracted from #28.

External error types seem to print the most helpful information via the `Debug` trait, which can be accessed using the `{:?}` format specifier. This change just ensures we propagate that more useful information when wrapping other error types.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-28T10:47:02Z,CONTRIBUTOR,True,2,2,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,c1e47c07e6626dd4a1905404c7357587620e4442,"fix(errors): include more useful messages in wrapping errors

Error types commonly print the most helpful information via the Debug
trait, which can be accessed using the {:?} format specifier. This
change just ensures we propagate that more useful information when
wrapping other error types."
224,https://api.github.com/repos/mozilla/fxa-email-service/pulls/29,29,fix(db): fix broken BounceSubtype deserialization,"Extracted from #28.

I was missing some tests for `BounceSubtype` deserialization, which meant I hadn't realised that the derived implementation of `Deserialize` was mapping values to strings rather than numbers. This change fixes that and adds the corresponding test coverage.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-28T10:29:00Z,CONTRIBUTOR,True,116,40,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4925f11bad6e0631b440adb347c31039eb1d6be3,"fix(db): fix broken BounceSubtype deserialization

I was missing some tests for BounceSubtype deserialization, which meant
I hadn't realised that the derived implementation of Deserialize was
mapping values to strings rather than numbers. This change fixes that
and adds the corresponding test coverage."
225,https://api.github.com/repos/mozilla/fxa-email-service/pulls/28,28,"feat(queues): handle SES bounce, complaint and delivery notifications","Fixes #5.

Opening as a WIP PR for early feedback, while I continue working on transitioning to futures for the queue-handling code in my local branch (my brain is overloaded for today). Or maybe we want to keep the futures stuff in a separate PR as this one is pretty big already. Either way, bear in mind that all of the queue stuff is synchronous here, but won't be when I'm finished. Polling the queues is not fast and there's three queues to check of course, so the main loop chugs round quite slowly when I run the code in the form you see here.

Anyway, the approach I've taken is to split the code into two separate binaries. The entrypoint for the service, i.e. what used to be `src/main.rs`, is in `src/service_main.rs` and the entrypoint for the queue-handling stuff is in `src/queues_main.rs`. I've also added a couple more shell scripts to save keystrokes when running each binary, `./r` for the service and `./rq` for the queues.

I've made a reasonable effort to keep the SQS stuff behind a trait, but it's by no means a perfect abstraction because the SES `Notification` format leaks out to the main queues module. I figured there's already enough crazy data marshalling going on for one PR here as it is, plus it's easy enough to come back and make that perfect down the line if/when we want to.

A nice bit of strong-typing worth pointing out is the division of `Queue` capabilities into `Incoming` and `Outgoing` traits. This means we can make it compile-time impossible to send messages to queues that we only want to read from and likewise impossible to read from queues that we only want to send to. Maybe not that big a deal in practice, but it seemed like a nice separation of concerns to me.

I'll call out some more of the decisions in the inline comments.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-24T17:32:15Z,CONTRIBUTOR,True,1697,81,18,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,dd6e94f620a0026b818f6d84bb17729396d6338e,"feat(queues): handle SES bounce, complaint and delivery notifications

A direct mapping of functionality from the auth server, so the different
notification types are expected on three different queues. Long-term it
makes sense to simplify that down to a single queue, but this way we can
ease the new service in alongside the existing auth server.

As a first cut, the methods on queues::sqs::Queue all block the thread
in this implementation. A subsequent change will transition to futures."
226,https://api.github.com/repos/mozilla/fxa-email-service/pulls/28,28,"feat(queues): handle SES bounce, complaint and delivery notifications","Fixes #5.

Opening as a WIP PR for early feedback, while I continue working on transitioning to futures for the queue-handling code in my local branch (my brain is overloaded for today). Or maybe we want to keep the futures stuff in a separate PR as this one is pretty big already. Either way, bear in mind that all of the queue stuff is synchronous here, but won't be when I'm finished. Polling the queues is not fast and there's three queues to check of course, so the main loop chugs round quite slowly when I run the code in the form you see here.

Anyway, the approach I've taken is to split the code into two separate binaries. The entrypoint for the service, i.e. what used to be `src/main.rs`, is in `src/service_main.rs` and the entrypoint for the queue-handling stuff is in `src/queues_main.rs`. I've also added a couple more shell scripts to save keystrokes when running each binary, `./r` for the service and `./rq` for the queues.

I've made a reasonable effort to keep the SQS stuff behind a trait, but it's by no means a perfect abstraction because the SES `Notification` format leaks out to the main queues module. I figured there's already enough crazy data marshalling going on for one PR here as it is, plus it's easy enough to come back and make that perfect down the line if/when we want to.

A nice bit of strong-typing worth pointing out is the division of `Queue` capabilities into `Incoming` and `Outgoing` traits. This means we can make it compile-time impossible to send messages to queues that we only want to read from and likewise impossible to read from queues that we only want to send to. Maybe not that big a deal in practice, but it seemed like a nice separation of concerns to me.

I'll call out some more of the decisions in the inline comments.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-24T17:32:15Z,CONTRIBUTOR,True,1697,81,18,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f996c511f1de4bb40a22c434e80688c2ccb17d62,chore(queues): marshall SES notifications to our own generic type
227,https://api.github.com/repos/mozilla/fxa-email-service/pulls/28,28,"feat(queues): handle SES bounce, complaint and delivery notifications","Fixes #5.

Opening as a WIP PR for early feedback, while I continue working on transitioning to futures for the queue-handling code in my local branch (my brain is overloaded for today). Or maybe we want to keep the futures stuff in a separate PR as this one is pretty big already. Either way, bear in mind that all of the queue stuff is synchronous here, but won't be when I'm finished. Polling the queues is not fast and there's three queues to check of course, so the main loop chugs round quite slowly when I run the code in the form you see here.

Anyway, the approach I've taken is to split the code into two separate binaries. The entrypoint for the service, i.e. what used to be `src/main.rs`, is in `src/service_main.rs` and the entrypoint for the queue-handling stuff is in `src/queues_main.rs`. I've also added a couple more shell scripts to save keystrokes when running each binary, `./r` for the service and `./rq` for the queues.

I've made a reasonable effort to keep the SQS stuff behind a trait, but it's by no means a perfect abstraction because the SES `Notification` format leaks out to the main queues module. I figured there's already enough crazy data marshalling going on for one PR here as it is, plus it's easy enough to come back and make that perfect down the line if/when we want to.

A nice bit of strong-typing worth pointing out is the division of `Queue` capabilities into `Incoming` and `Outgoing` traits. This means we can make it compile-time impossible to send messages to queues that we only want to read from and likewise impossible to read from queues that we only want to send to. Maybe not that big a deal in practice, but it seemed like a nice separation of concerns to me.

I'll call out some more of the decisions in the inline comments.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-24T17:32:15Z,CONTRIBUTOR,True,1697,81,18,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d71fe82eeeed7c0e5044a49e0b01c2917956a1a8,feat(queues): return futures instead of blocking for queue handling
228,https://api.github.com/repos/mozilla/fxa-email-service/pulls/28,28,"feat(queues): handle SES bounce, complaint and delivery notifications","Fixes #5.

Opening as a WIP PR for early feedback, while I continue working on transitioning to futures for the queue-handling code in my local branch (my brain is overloaded for today). Or maybe we want to keep the futures stuff in a separate PR as this one is pretty big already. Either way, bear in mind that all of the queue stuff is synchronous here, but won't be when I'm finished. Polling the queues is not fast and there's three queues to check of course, so the main loop chugs round quite slowly when I run the code in the form you see here.

Anyway, the approach I've taken is to split the code into two separate binaries. The entrypoint for the service, i.e. what used to be `src/main.rs`, is in `src/service_main.rs` and the entrypoint for the queue-handling stuff is in `src/queues_main.rs`. I've also added a couple more shell scripts to save keystrokes when running each binary, `./r` for the service and `./rq` for the queues.

I've made a reasonable effort to keep the SQS stuff behind a trait, but it's by no means a perfect abstraction because the SES `Notification` format leaks out to the main queues module. I figured there's already enough crazy data marshalling going on for one PR here as it is, plus it's easy enough to come back and make that perfect down the line if/when we want to.

A nice bit of strong-typing worth pointing out is the division of `Queue` capabilities into `Incoming` and `Outgoing` traits. This means we can make it compile-time impossible to send messages to queues that we only want to read from and likewise impossible to read from queues that we only want to send to. Maybe not that big a deal in practice, but it seemed like a nice separation of concerns to me.

I'll call out some more of the decisions in the inline comments.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-24T17:32:15Z,CONTRIBUTOR,True,1697,81,18,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,005c893c3406d9b7a25f1f088411d74b7b851814,refactor(queues): simplify lifetimes for queue objects
229,https://api.github.com/repos/mozilla/fxa-email-service/pulls/28,28,"feat(queues): handle SES bounce, complaint and delivery notifications","Fixes #5.

Opening as a WIP PR for early feedback, while I continue working on transitioning to futures for the queue-handling code in my local branch (my brain is overloaded for today). Or maybe we want to keep the futures stuff in a separate PR as this one is pretty big already. Either way, bear in mind that all of the queue stuff is synchronous here, but won't be when I'm finished. Polling the queues is not fast and there's three queues to check of course, so the main loop chugs round quite slowly when I run the code in the form you see here.

Anyway, the approach I've taken is to split the code into two separate binaries. The entrypoint for the service, i.e. what used to be `src/main.rs`, is in `src/service_main.rs` and the entrypoint for the queue-handling stuff is in `src/queues_main.rs`. I've also added a couple more shell scripts to save keystrokes when running each binary, `./r` for the service and `./rq` for the queues.

I've made a reasonable effort to keep the SQS stuff behind a trait, but it's by no means a perfect abstraction because the SES `Notification` format leaks out to the main queues module. I figured there's already enough crazy data marshalling going on for one PR here as it is, plus it's easy enough to come back and make that perfect down the line if/when we want to.

A nice bit of strong-typing worth pointing out is the division of `Queue` capabilities into `Incoming` and `Outgoing` traits. This means we can make it compile-time impossible to send messages to queues that we only want to read from and likewise impossible to read from queues that we only want to send to. Maybe not that big a deal in practice, but it seemed like a nice separation of concerns to me.

I'll call out some more of the decisions in the inline comments.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-24T17:32:15Z,CONTRIBUTOR,True,1697,81,18,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,20631a38c1b930bf6492c6ae81f0a9102575f27d,"fix(validation): allow RFC5321 compliant email addresses

email address validation is a pain, and you can use a surprising variety
of characters in an address.

(At least we're drawing the line at no quoted characters...)

Closes #44

https://github.com/mozilla/fxa-email-service/pull/45
r=philbooth"
230,https://api.github.com/repos/mozilla/fxa-email-service/pulls/27,27,fix(db): add missing fields/values to auth_db::BounceRecord,"When I did #22, I didn't pay much attention to the `emailBounces` table because there weren't any rows in my table locally. But it quickly became obvious while implementing #5 that I was missing some columns as well as a valid value for the `BounceType` enum.

This changeset fixes both of those issues and includes a couple of other nearby tweaks taken from the same branch, so that I can bring the size of that PR down a bit (it's a beast).

@mozilla/fxa-devs r?",philbooth,64367,2018-05-23T14:56:10Z,CONTRIBUTOR,True,239,94,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,8d1abaf8dbde8f32efb20be5d9ee6ceffc989fad,fix(db): add missing fields/values to auth_db::BounceRecord
231,https://api.github.com/repos/mozilla/fxa-email-service/pulls/27,27,fix(db): add missing fields/values to auth_db::BounceRecord,"When I did #22, I didn't pay much attention to the `emailBounces` table because there weren't any rows in my table locally. But it quickly became obvious while implementing #5 that I was missing some columns as well as a valid value for the `BounceType` enum.

This changeset fixes both of those issues and includes a couple of other nearby tweaks taken from the same branch, so that I can bring the size of that PR down a bit (it's a beast).

@mozilla/fxa-devs r?",philbooth,64367,2018-05-23T14:56:10Z,CONTRIBUTOR,True,239,94,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,6c4042b814ab520fe378a3c6021b7d35abb88b0d,fix(db): add missing derive(Debug)
232,https://api.github.com/repos/mozilla/fxa-email-service/pulls/27,27,fix(db): add missing fields/values to auth_db::BounceRecord,"When I did #22, I didn't pay much attention to the `emailBounces` table because there weren't any rows in my table locally. But it quickly became obvious while implementing #5 that I was missing some columns as well as a valid value for the `BounceType` enum.

This changeset fixes both of those issues and includes a couple of other nearby tweaks taken from the same branch, so that I can bring the size of that PR down a bit (it's a beast).

@mozilla/fxa-devs r?",philbooth,64367,2018-05-23T14:56:10Z,CONTRIBUTOR,True,239,94,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f954f63328852f16f5e3f68ceb9b3ababc10c635,refactor(db): rename get_email_bounces => get_bounces
233,https://api.github.com/repos/mozilla/fxa-email-service/pulls/23,23,feat(docs): add a readme doc,,philbooth,64367,2018-05-16T06:24:40Z,CONTRIBUTOR,True,179,0,1,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7f1f60824621b6b8f98ff09d30634fc93f792f3a,feat(docs): add a readme doc
234,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,da418066b8acd9e3c842817f7ca2f9fbd3e5565d,"feat(db): check the emailBounces table before sending email

Loads bounce limits from config and then checks email addresses against
those limits before sending the email. If any address violates a limit,
the request will fail with status 429 and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra
scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory
exists and, if not, clone the repo. Then it will check for running db
server processes and, if none are found, run `npm i`, run the db patcher
and start the db server in a background process. Then it finishes by
invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the
background after tests have finished. But I figure it's good enough for
now because it only leaves one of them running, they don't multiply with
subsequent test runs. And you don't have to use the new script of
course, if you already have the db server running in fxa-local-dev, you
can just run `./t` and the tests should pass. The new script is mostly
there for Travis' benefit.

Longer term, if this service is going to stick around, we can do
something more permanent to manage it properly."
235,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f1b927027a04f193094ac6d29e2ad289328228f5,chore(db): locally alias reqwest::Client to RequestClient
236,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,90f4876e90acef3d15599e354fdd6ddc6afd7617,fix(tests): prefer named constants to magic numbers
237,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4e21add3c89f458fa958f109a798f920407ebec4,fix(tests): add more coverage of bounce/complaint limit checking
238,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,d2975bdb8fee571090813a93d0a81f064b211995,refactor(deserialize): extract time period parsing to a dedicated module
239,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,0a6e8ac8a12783a9156650d24317350a2b2aca4d,chore(project): rustup update + cargo update + cargo fmt
240,https://api.github.com/repos/mozilla/fxa-email-service/pulls/22,22,feat(db): check the emailBounces table before sending email,"Fixes #3. (conference got in the way before I could finish it off, sorry for the delay)

Loads bounce limits from config and then checks email addresses against those limits before sending the email. If any address violates a limit, the request will fail with status `429` and email will not be sent.

As it introduces a dependency on the fxa-auth-db-mysql repo, some extra scripting has been thrown in to make working with node.js easier.

Running `./tdb` will check whether an `fxa-auth-db-mysql` directory exists and, if not, clone the repo. Then it will check for running db server processes and, if none are found, run `npm i`, run the db patcher and start the db server in a background process. Then it finishes by invoking the existing `./t` script.

This is not ideal because it leaves the node process running in the background after tests have finished. But I figure it's good enough for now because it only leaves one of them running, they don't multiply with subsequent test runs. And you don't have to use the new script of course, if you already have the db server running in fxa-local-dev, you can just run `./t` and the tests should pass. The new script is mostly there for Travis' benefit.
    
Longer term, if this service is going to stick around, we can do something more permanent to manage it properly.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-12T11:46:11Z,CONTRIBUTOR,True,1329,82,22,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,fc18fc88b15adad06347e9c374b70eec85e8e0a0,refactor(duration): rename period => duration
241,https://api.github.com/repos/mozilla/fxa-email-service/pulls/20,20,chore(project): update regex dependency,,philbooth,64367,2018-05-08T08:09:15Z,CONTRIBUTOR,True,48,36,2,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,743506bb141566dd621879dde7b5a7476381618f,chore(project): update regex dependency
242,https://api.github.com/repos/mozilla/fxa-email-service/pulls/19,19,chore(project): update rocket and unpin from nightly-2018-04-28,,philbooth,64367,2018-05-05T08:31:15Z,CONTRIBUTOR,True,78,68,3,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,644fd11f5750ddda987523603bd65b1881df5203,chore(project): update rocket and unpin from nightly-2018-04-28
243,https://api.github.com/repos/mozilla/fxa-email-service/pulls/17,17,feat(ses): implement ses-based email sending,"Fixes #2.

To test it out:

```
curl -d '{""to"":""foo@example.com"",""subject"":""bar"",""body"":{""text"":""baz""}}' -H 'Content-Type: application/json' http://localhost:8000/send
```

~~Note that we're currently pinned to the `nightly-2018-04-28` toolchain while we wait on a Rocket update, so you'll need to set that up like so:~~

```
rustup toolchain install nightly-2018-04-28
rustup override set nightly-2018-04-28
```

Also note that using a simple `cargo t` to run the tests will fail. You need to run them in a single thread:

```
cargo t -- --test-threads=1
```

I added a shell script called `t` to make this less annoying, so you just need to type `./t` to run them.

There's a bunch of implementation decisions that I'll call out in the inline comments.

@mozilla/fxa-devs r?
",philbooth,64367,2018-05-04T14:25:56Z,CONTRIBUTOR,True,1419,87,17,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,7ef0fc9772150f8b370e8d99d5a9da2058c8af3d,feat(ses): implement basic ses-based email sending
244,https://api.github.com/repos/mozilla/fxa-email-service/pulls/17,17,feat(ses): implement ses-based email sending,"Fixes #2.

To test it out:

```
curl -d '{""to"":""foo@example.com"",""subject"":""bar"",""body"":{""text"":""baz""}}' -H 'Content-Type: application/json' http://localhost:8000/send
```

~~Note that we're currently pinned to the `nightly-2018-04-28` toolchain while we wait on a Rocket update, so you'll need to set that up like so:~~

```
rustup toolchain install nightly-2018-04-28
rustup override set nightly-2018-04-28
```

Also note that using a simple `cargo t` to run the tests will fail. You need to run them in a single thread:

```
cargo t -- --test-threads=1
```

I added a shell script called `t` to make this less annoying, so you just need to type `./t` to run them.

There's a bunch of implementation decisions that I'll call out in the inline comments.

@mozilla/fxa-devs r?
",philbooth,64367,2018-05-04T14:25:56Z,CONTRIBUTOR,True,1419,87,17,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4ed387af9768954438e7b78b24d0f7e1ac79c352,feat(ses): add support for aws access and secret keys
245,https://api.github.com/repos/mozilla/fxa-email-service/pulls/17,17,feat(ses): implement ses-based email sending,"Fixes #2.

To test it out:

```
curl -d '{""to"":""foo@example.com"",""subject"":""bar"",""body"":{""text"":""baz""}}' -H 'Content-Type: application/json' http://localhost:8000/send
```

~~Note that we're currently pinned to the `nightly-2018-04-28` toolchain while we wait on a Rocket update, so you'll need to set that up like so:~~

```
rustup toolchain install nightly-2018-04-28
rustup override set nightly-2018-04-28
```

Also note that using a simple `cargo t` to run the tests will fail. You need to run them in a single thread:

```
cargo t -- --test-threads=1
```

I added a shell script called `t` to make this less annoying, so you just need to type `./t` to run them.

There's a bunch of implementation decisions that I'll call out in the inline comments.

@mozilla/fxa-devs r?
",philbooth,64367,2018-05-04T14:25:56Z,CONTRIBUTOR,True,1419,87,17,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e0cf99ededa68bd4bb8ab5d2eb1c25e73767b01c,chore(tests): remove mutex hack
246,https://api.github.com/repos/mozilla/fxa-email-service/pulls/16,16,chore(project): add the MPL,Fixes #12.,philbooth,64367,2018-05-04T06:09:57Z,CONTRIBUTOR,True,397,0,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b53c6219b0437970cabcba56e385399b56b7a300,chore(project): add the MPL
247,https://api.github.com/repos/mozilla/fxa-email-service/pulls/15,15,refactor(settings): extract common functions for deserialization,"Fixes #13, opened as an alternative to #14 so that it can be r+'ed if it turns out to be the preferred option.

Extracts the inline validation code from the settings module to a dedicated deserialize module, so that the validation rules can be better re-used elsewhere.

Uses functions rather than newtype structs, for 2 reasons:

1. There's an issue in the config crate where newtype structs aren't deserialized. An unmerged PR exists to fix it, but in the meantime this changeset works round the problem.

2. With newtype structs, the tests aren't able to create fresh instances of the `Settings` struct unless it is flattened to a single level.

If we do pursue this approach, we can revisit using newtype structs down the line when both of the above are resolved.

@mozilla/fxa-devs r?",philbooth,64367,2018-05-03T18:12:59Z,CONTRIBUTOR,True,80,53,5,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,4288298981467a0fe71cc4628f43b3f5109ede47,"refactor(settings): extract common functions for deserialization

Extracts the inline validation code from the settings module to a
dedicated deserialize module, so that the validation rules can be better
re-used elsewhere.

Uses functions rather than newtype structs, for 2 reasons:

1. There's an issue in the config crate where newtype structs aren't
   deserialized. An unmerged PR exists to fix it, but in the meantime
   this changeset works round the problem.

2. When using newtype structs, the tests aren't able to create fresh
   instances of the Settings struct unless it is flattened to a single
   level.

Maybe we can revisit the newtype struct approach down the line when both
of the above are resolved."
248,https://api.github.com/repos/mozilla/fxa-email-service/pulls/14,14,refactor(settings): extract types for deserialization,"Fixes #13.

Extracts the inline validation code from the `settings` module to a dedicated `deserialize` module, so that the validation rules can be better re-used elsewhere.

Relies on a currently-unmerged PR in order to work, hence the `config` crate is now resolved with a git URL rather than a version string. If that situation persists, we can change it to point to a fork under our own control but hopefully it will be merged soon and we can revert to a version string. There's also an equivalent refactoring in the [`pb/deserialize-without-types` branch](https://github.com/mozilla/fxa-email-service/compare/pb/deserialize-without-types?expand=1), which doesn't require this fix but uses serde's `deserialize_with` macro instead. I'm happy to pursue that approach if it's preferable.

The other gotcha was that I had to flatten the `Settings` struct in order for the tests to be able to create clean instances with fresh values. This is a little bit annoying and is not necessary for the alternative, function-based refactoring. I don't have a root cause yet, but I'll open an issue in the appropriate repo as soon as I have a minimal test case (or come back and fix it if something's wrong here, which is eminently possible).

@mozilla/fxa-devs r?",philbooth,64367,2018-05-03T16:51:52Z,CONTRIBUTOR,False,193,118,7,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,b4f3f74205a7fcbd32abc0db7c708825233fbf86,"refactor(settings): extract types for deserialization

Extracts the inline validation code from the `settings` module to a
dedicated `deserialize` module, so that the validation rules can be
better re-used elsewhere.

Relies on a currently-unmerged PR in order to work, hence the `config`
crate is now resolved with a git URL rather than a version string.
There is an equivalent refactoring that doesn't require this fix, which
uses functions and serde's `deserialize_with` macro instead of newtype
structs.

The other gotcha was that I had to flatten the `Settings` struct in
order for the tests to be able to create clean instances with fresh
values. This is a little bit annoying and is also not necessary for the
alternative, function-based refactoring. I did spend a bit of time
trying to dig into the root cause, without success. I'll open an issue
in the appropriate repo as soon as I have a minimal test case, or come
back and fix if it's something wrong here, which is eminently possible."
249,https://api.github.com/repos/mozilla/fxa-email-service/pulls/11,11,feat(config): add configuration,"Imitates, as closely as possible, the convict-based approach we use in our node repos. The major difference is that validation here has to happen in the code, we can't define it in config.

Settings are applied in the following order:

* `config/default.json`
* `config/${NODE_ENV}.json` (optional)
* `config/local.json` (optional, git-ignored)
* environment variables

I opted to re-use `$NODE_ENV` instead of some rust-specific environment variable so that our dev setups will work with minimal changes. One less environment variable to manage feels like a win to me but if it seems too weird I can change it.

Uses the `config` crate, which was the convictiest dependency I could find.

Initially I was going to include this in the changeset for #2, but it seems worthy of code review in its own right and may be of use independently if people want to pick up other issues before that PR is ready.

@rfk, @mozilla/fxa-devs r?",philbooth,64367,2018-04-29T07:35:17Z,CONTRIBUTOR,True,412,0,8,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1d356bf12a5fda0019c991954dba2a016fecb618,"feat(config): add configuration

Imitates, as closely as possible, the convict-based approach we use in
our node repos. The major difference is that validation here has to
happen in the code, we can't define it in config.

Settings are applied in the following order:

* config/default.json
* config/${NODE_ENV}.json (optional)
* config/local.json (optional, git-ignored)
* environment variables

I opted to re-use $NODE_ENV instead of some rust-specific environment
variable so that our dev setups will work with minimal changes. If that
seems too weird though I can change it.

Uses the `config` crate, which was the convictiest dependency I could
find."
250,https://api.github.com/repos/mozilla/fxa-email-service/pulls/7,7,feat(api): implement a basic /send endpoint,"Fixes #1.

Not wired in to any behaviour, just does some crude validation and then returns a hard-coded message id. There is some test coverage, but also some gaps where I haven't figured out how we should do stuff yet:

* The validation code is punishingly verbose. I evauated a couple of crates to implement validation, `accord` and `validator`, and opted for `validator`. However they both seem quite simple, for instance there's no support for nested objects or values packed inside arrays. This meant we couldn't lean on the nice, readable macro syntax that's available and have to explitly validate fields using Rocket's `FromData` trait instead.

* Rocket has a feature called error catchers, which I couldn't get to work. These are supposed to let you return custom error data but, no matter what I tried, it always seemed to return the default error response for each type (which is an html string). And even if I could get those to work, I couldn't see a way to propagate rich error information, e.g. names of invalid parameters, into the catcher without having to validate all of the parameters a second time inside the catcher.

* I tried to write a test case that fired unicode at the endpoint and it failed.

I'm sure the root cause of these problems is just my own lack of expertise and we'll figure it out eventually. In the meantime, this seemed like enough to get us started. I'll open issues to cover all of the above.

In terms of code structure, I've just lumped most stuff in to the `send` module for now. As we add more functionality, I expect the natural boundaries to reveal themselves. No point agonising over it yet.

@rfk, @mozilla/fxa-devs r?",philbooth,64367,2018-04-26T18:55:58Z,CONTRIBUTOR,True,535,29,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,f573ab0c5115ade60fc2c25ceb760fd34db17c45,"feat(api): implement a basic /send endpoint

Not wired in to any behaviour, just does some crude validation and then
returns a hard-coded message id. There is some test coverage, but also
some gaps where I haven't figured out how we should do stuff yet:

* The validation code is punishingly verbose. I evauated a couple of
  crates to implement validation, `accord` and `validator`, and opted
  for `validator`. However they both seem quite simple, for instance
  there's no support for nested objects or values packed inside arrays.
  This meant we couldn't lean on the nice, readable macro syntax that's
  available and have to explitly validate fields using Rocket's FromData
  trait instead.

* Rocket has a feature called error catchers, which I couldn't get to
  work. These are supposed to let you return custom error data but, no
  matter what I tried, it always seemed to return the default error
  response for each type (which is an html string). And even if I could
  get those to work, I couldn't see a way to propagate rich error
  information, e.g. names of invalid parameters, into the catcher
  without having to validate all of the parameters a second time inside
  the catcher.

* I tried to write a test case that fired unicode at the endpoint and it
  failed.

I'm sure the root cause of these problems is just my own lack of
expertise and we'll figure it out eventually. In the meantime, this
seemed like enough to get us started. I'll open issues to cover the
above.

In terms of code structure, I've just lumped most stuff in to the send
module for now. As we add more functionality, I expect the natural
boundaries to reveal themselves. No point agonising over it yet."
251,https://api.github.com/repos/mozilla/fxa-email-service/pulls/7,7,feat(api): implement a basic /send endpoint,"Fixes #1.

Not wired in to any behaviour, just does some crude validation and then returns a hard-coded message id. There is some test coverage, but also some gaps where I haven't figured out how we should do stuff yet:

* The validation code is punishingly verbose. I evauated a couple of crates to implement validation, `accord` and `validator`, and opted for `validator`. However they both seem quite simple, for instance there's no support for nested objects or values packed inside arrays. This meant we couldn't lean on the nice, readable macro syntax that's available and have to explitly validate fields using Rocket's `FromData` trait instead.

* Rocket has a feature called error catchers, which I couldn't get to work. These are supposed to let you return custom error data but, no matter what I tried, it always seemed to return the default error response for each type (which is an html string). And even if I could get those to work, I couldn't see a way to propagate rich error information, e.g. names of invalid parameters, into the catcher without having to validate all of the parameters a second time inside the catcher.

* I tried to write a test case that fired unicode at the endpoint and it failed.

I'm sure the root cause of these problems is just my own lack of expertise and we'll figure it out eventually. In the meantime, this seemed like enough to get us started. I'll open issues to cover all of the above.

In terms of code structure, I've just lumped most stuff in to the `send` module for now. As we add more functionality, I expect the natural boundaries to reveal themselves. No point agonising over it yet.

@rfk, @mozilla/fxa-devs r?",philbooth,64367,2018-04-26T18:55:58Z,CONTRIBUTOR,True,535,29,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,1ad64a8217432cafd62d28c6ee725de8ae009e3b,fix(api): limit `to` field to a single recipient
252,https://api.github.com/repos/mozilla/fxa-email-service/pulls/7,7,feat(api): implement a basic /send endpoint,"Fixes #1.

Not wired in to any behaviour, just does some crude validation and then returns a hard-coded message id. There is some test coverage, but also some gaps where I haven't figured out how we should do stuff yet:

* The validation code is punishingly verbose. I evauated a couple of crates to implement validation, `accord` and `validator`, and opted for `validator`. However they both seem quite simple, for instance there's no support for nested objects or values packed inside arrays. This meant we couldn't lean on the nice, readable macro syntax that's available and have to explitly validate fields using Rocket's `FromData` trait instead.

* Rocket has a feature called error catchers, which I couldn't get to work. These are supposed to let you return custom error data but, no matter what I tried, it always seemed to return the default error response for each type (which is an html string). And even if I could get those to work, I couldn't see a way to propagate rich error information, e.g. names of invalid parameters, into the catcher without having to validate all of the parameters a second time inside the catcher.

* I tried to write a test case that fired unicode at the endpoint and it failed.

I'm sure the root cause of these problems is just my own lack of expertise and we'll figure it out eventually. In the meantime, this seemed like enough to get us started. I'll open issues to cover all of the above.

In terms of code structure, I've just lumped most stuff in to the `send` module for now. As we add more functionality, I expect the natural boundaries to reveal themselves. No point agonising over it yet.

@rfk, @mozilla/fxa-devs r?",philbooth,64367,2018-04-26T18:55:58Z,CONTRIBUTOR,True,535,29,6,DEPRECATED - Migrated to https://github.com/mozilla/fxa,Rust,e744a1ce1104bba2205a82ef5d5977eb567d8e76,chore(project): revert a bunch of custom rustfmt settings
