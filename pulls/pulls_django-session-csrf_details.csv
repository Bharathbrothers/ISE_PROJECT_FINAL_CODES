,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/django-session-csrf/pulls/47,47,Add Mozilla Code of Conduct,"Fixes #46

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-28T03:43:20Z,NONE,False,15,0,1,CSRF protection for Django without cookies.,Python,60b3f71f2828e6196e696c5748c0f82f50569a7e,"Add Mozilla Code of Conduct file

Fixes #46.

_(Message COC002)_"
1,https://api.github.com/repos/mozilla/django-session-csrf/pulls/44,44,Add a note about Django's CSRF_USE_SESSIONS,"As @kravietz points out in #43, Django has it's own way to do this know. We should let the users know.

Maybe we should deprecate this library? /cc @peterbe @moggers87  r?",glogiotatidis,584352,2017-05-12T10:24:41Z,CONTRIBUTOR,False,5,0,1,CSRF protection for Django without cookies.,Python,da32f7b4a6eef7a56ade525ed8b06839c474b293,Add a note about Django's CSRF_USE_SESSIONS
2,https://api.github.com/repos/mozilla/django-session-csrf/pulls/42,42,Test against latest Django versions,Includes Django 1.11,moggers87,1490673,2017-04-21T06:50:36Z,CONTRIBUTOR,False,5,4,1,CSRF protection for Django without cookies.,Python,41c43302a78e2f268c5f8a5c126843587448418b,Test against latest Django versions
3,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,169ed8ccee95224c7149855014602c44a5211ccf,"Python 3 support

Django's `_get_new_csrf_key` returns str (unicode) rather than bytes
(str). So this was a fairly painless job!"
4,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,3e2cd2d5f4ce7afce9e9292c8ea65667c67e809b,"type only accepts ""str"" instances, on both versions of Python

¯\_(ツ)_/¯"
5,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,bd459748738144267b6ced49f2293d567e74945b,Add other Python 3 versions supported by Django 1.8
6,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,3c9566a9f6d328cd7c8f8f6ba8559cf3ca088fad,"Add a comment about Django 1.8 and Python 3.3

Out of the currently supported versions of Django, only 1.8 supports
Python 3.3. Builds will error for 1.9 and 1.10"
7,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,e1f991bb861bef3afce8178211fbe72e42f848e2,"Switch around mock import try/except

Try to import the native version in Python 3 first, then try the PyPi
version"
8,https://api.github.com/repos/mozilla/django-session-csrf/pulls/36,36,Python 3 support,"Python 3 support.
",moggers87,1490673,2016-10-03T20:46:19Z,CONTRIBUTOR,True,19,5,3,CSRF protection for Django without cookies.,Python,4b7c0ed489fe9ff020c23738f34a3ea2806a529b,Spelling
9,https://api.github.com/repos/mozilla/django-session-csrf/pulls/35,35,don't require django to install,"A refresh from https://github.com/mozilla/django-session-csrf/pull/17 which has conflicts. 
",peterbe,26739,2016-10-03T13:28:57Z,CONTRIBUTOR,True,0,1,1,CSRF protection for Django without cookies.,Python,06065d2f7bbc4a547344e36363d3e470b801404e,don't require django to install
10,https://api.github.com/repos/mozilla/django-session-csrf/pulls/34,34,don't assume request.user,"A refresh of https://github.com/mozilla/django-session-csrf/pull/23
",peterbe,26739,2016-10-03T13:26:11Z,CONTRIBUTOR,True,12,2,2,CSRF protection for Django without cookies.,Python,714812ac466e129cd70ec1c9b21aa77195b3cc2e,don't assume request.user
11,https://api.github.com/repos/mozilla/django-session-csrf/pulls/34,34,don't assume request.user,"A refresh of https://github.com/mozilla/django-session-csrf/pull/23
",peterbe,26739,2016-10-03T13:26:11Z,CONTRIBUTOR,True,12,2,2,CSRF protection for Django without cookies.,Python,a7a3b1cf775efd80374350e83ddfe93b76873700,actually test that it worked
12,https://api.github.com/repos/mozilla/django-session-csrf/pulls/33,33,ignore build artifacts,,peterbe,26739,2016-10-03T13:13:49Z,CONTRIBUTOR,True,3,0,1,CSRF protection for Django without cookies.,Python,03803b98fa75be4c9af36604ca67773641202b36,ignore build artifacts
13,https://api.github.com/repos/mozilla/django-session-csrf/pulls/30,30,Make compatible with Django 1.10,"replace `_get_new_csrf_key` with `_get_new_csrf_string`
",pcraston,895133,2016-09-05T13:01:32Z,CONTRIBUTOR,True,54,32,5,CSRF protection for Django without cookies.,Python,29d5030ff5cf94013a59ae23b478c97915bb340d,"Make compatible with Django 1.10. Replace _get_new_csrf_key with _get_new_csrf_string, use Middleware Deprecation Mixin, fix urlpatterns"
14,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,15492526b23cdad56fe3df1342e2d82ec5d17c18,tagging v0.5
15,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,1fa1a42fc1b7820979dbb83d64b0e5dabdf963fa,Don't recommend putting important code in manage.py.
16,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,94e2858a427a6b278e41c051643f3c226f096f21,"Merge pull request #9 from carljm/no-code-in-manage-py

Don't recommend putting important code in manage.py."
17,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,b3b73674133766feeffef8e75bc831096eb5a639,"issue 10 - massive cookies cause memcache trouble, r=Osmose"
18,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,13c3cb212ac6ae0b1e9f6db02043bbfb0752d6db,Hash received cookies to normalize length and contents. (bug 872263)
19,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,f00ad913c62e139d36078e8a7e07dab65a021386,"Merge pull request #15 from washort/master

hash csrf tokens for use as memcache keys"
20,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,b975e1d6102e055b3956ba0bedd0168558e1cc8c,Add contribute.json file.
21,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,a9fcd8938685d9d0ac598691d2259ac734ea8fb3,"Merge pull request #18 from Osmose/contribute.json

Add contribute.json file."
22,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,dff6a7345581f3bc75081e59f34e0f0b41a42f00,"Travis config

* config file for Travis CI
* updates to how runtests.sh script works - it now returns the exit code
  of the tests rather than 0"
23,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,3e362c1d6a3c2ae3ad0696e8836fc90a4d9de532,Update tests to work with newer versions of Django
24,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,c0b115528512c8189f9baecf886b44091edff75a,"Don't test on Python 3, it's broken"
25,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,59014dd0e71de0265bb043b927f2269e609efb7c,version 0.6 for a new release
26,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,ab97e335993fe8ca0cc81559f41bb7a5992eaf97,"Change tested versions

* Drop support for 1.4
* Test with 1.9
* Stop testing against Python 2.6"
27,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,98626d367092b99b26f5f98a0c2ee716b81763bf,"Merge pull request #19 from moggers87/travis

Fixed tests & Travis"
28,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,f86e81c52348826372b6d724bc6e6d9a20f4dfa6,Update __init__.py
29,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,bea302105407a78b502b05512f961bafda24343d,Update __init__.py
30,https://api.github.com/repos/mozilla/django-session-csrf/pulls/29,29,Django 1.10 Changes,"I added some changes to get the project working with Django 1.10
",bjinwright,48549,2016-08-20T01:35:21Z,NONE,False,128,75,7,CSRF protection for Django without cookies.,Python,9fdfe4f9f7735cdf8eba1fe0d6cb0ed6f690f79a,Update __init__.py
31,https://api.github.com/repos/mozilla/django-session-csrf/pulls/28,28,monkeypatch django get_token,"django csrf has a get_token function which grabs the token from the cookie,  session_csrf attaches to the request instead so it makes sense to monkey patch the function as well.

I noticed this bug when using the Jinja2 django backend in combination in session_csrf, which makes a call to get_token when attaching it to the enviroment. 

Relevant:
https://github.com/django/django/blob/master/django/template/backends/jinja2.py#L78
https://github.com/django/django/blob/master/django/template/backends/utils.py#L17
https://github.com/django/django/blob/master/django/middleware/csrf.py#L78
",chargreezy,1595222,2016-07-26T15:46:05Z,NONE,False,6,0,1,CSRF protection for Django without cookies.,Python,d8dc04798b7811677c56f0e826a0a0a01b9b3b1f,"monkeypatch django get_token, this also fixes compatibility with the django jinja2 backend csrf support"
32,https://api.github.com/repos/mozilla/django-session-csrf/pulls/27,27,monkeypatch django get_token,"django csrf has a get_token function which grabs the token from the cookie,  session_csrf attaches to the request instead so it makes sense to monkey patch the function as well.

I noticed this bug when using the Jinja2 django backend in combination in session_csrf, which makes a call to get_token when attaching it to the enviroment. 

Relevant:
https://github.com/django/django/blob/master/django/template/backends/jinja2.py#L78
https://github.com/django/django/blob/master/django/template/backends/utils.py#L17
https://github.com/django/django/blob/master/django/middleware/csrf.py#L78
",chargreezy,1595222,2016-07-26T13:45:30Z,NONE,False,6,0,1,CSRF protection for Django without cookies.,Python,194557f6b863bef439689464ddf5d3c9e5eac956,"monkeypatch django get_token, this also fixes compatibility with the django jinja2 backend csrf support"
33,https://api.github.com/repos/mozilla/django-session-csrf/pulls/26,26,Make it slightly more obvious what `ANON_ALWAYS` is for,"It wasn't immediately clear what this setting was did.

Fixes #4 
",moggers87,1490673,2016-03-10T02:28:10Z,CONTRIBUTOR,True,3,2,2,CSRF protection for Django without cookies.,Python,c4e6515fd5ade3a9f1dfcae3bb580921d42ae7ff,Make it slightly more obvious what `ANON_ALWAYS` is for
34,https://api.github.com/repos/mozilla/django-session-csrf/pulls/25,25,tests compatible with django 1.7,"@jbalogh r?
",peterbe,26739,2016-01-15T12:59:13Z,CONTRIBUTOR,False,1,1,1,CSRF protection for Django without cookies.,Python,543a0a439cf30ca6be7fa4c22992715ef4662af8,tests compatible with django 1.7
35,https://api.github.com/repos/mozilla/django-session-csrf/pulls/24,24,added domain kwarg to set_cookie function,"Without this kwarg setting CSRF_COOKIE_DOMAIN has no effect.
",ryechus,4268999,2015-12-09T12:21:17Z,NONE,False,4,2,1,CSRF protection for Django without cookies.,Python,891c9bd75440d91d87ccc92c3b8c661df13c83aa,"added domain kwarg to set_cookie function

Without this kwarg setting CSRF_COOKIE_DOMAIN has no effect."
36,https://api.github.com/repos/mozilla/django-session-csrf/pulls/23,23,Check if user object is set before calling is_authenticated on it.,"Without this change session_csrf crashes when you remove AuthenticationMiddleware from settings. session_csrf should not depend on it I think.
",owad,565526,2015-10-02T13:59:00Z,NONE,False,3,3,1,CSRF protection for Django without cookies.,Python,cf67c8fc98048014cf2dfce7b2f4fa437ed92500,Check if user object is set before calling is_authenticated on it.
37,https://api.github.com/repos/mozilla/django-session-csrf/pulls/22,22,Check if user object is set before calling is_authenticated on it.,"Without this change session_csrf crashes when you remove AuthenticationMiddleware from settings. session_csrf should not depend on it I think.
",owad,565526,2015-10-02T13:40:38Z,NONE,False,6,3,1,CSRF protection for Django without cookies.,Python,aaf447e78c9b31f30780f9adf750642fd9d921bd,Check if user object is set before calling is_authenticated on it.
38,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,cb0eb7c4b4fe71e85cc16a750acec0b918affd48,"Session based CSRF can now be enabled for anonynous users

Introduced a new setting ""ANON_AS_LOGGED_IN"" - if set to True,
anonymous users will be treated the same way logged in users are.
Additionally, anonymous decorators will be ignored."
39,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,dff6a7345581f3bc75081e59f34e0f0b41a42f00,"Travis config

* config file for Travis CI
* updates to how runtests.sh script works - it now returns the exit code
  of the tests rather than 0"
40,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,3e362c1d6a3c2ae3ad0696e8836fc90a4d9de532,Update tests to work with newer versions of Django
41,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,c0b115528512c8189f9baecf886b44091edff75a,"Don't test on Python 3, it's broken"
42,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,149ce3372c0ead8cf35a3d654473c0e1c8c81ec0,"Merge branch 'travis' into 4-auto-anon

Run tests in Travis"
43,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,c8374e83779a38e10043c5216953c6b1928cb2ad,Added tests for ANON_AS_LOGGED_IN
44,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,fb76f7b803df73c695f0c28fa4d293099f5d89bc,Remove unused imports and sort them
45,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,ca416efe2e8e9e776be68a00cc2d99828da11b49,Test anonymous* decorators don't apply anything when ANON_AS_LOGGED_IN is set
46,https://api.github.com/repos/mozilla/django-session-csrf/pulls/21,21,Option to use normal sessions for anonymous users,"This fixes issue #4 and builds on top of PR #19 (which should be reviewed first)
- Adds a new option, `ANON_AS_LOGGED_IN`.
- When set, anonymous sessions are treated the same way logged in sessions are
- The anonymous decorators will return the view untouched if `ANON_AS_LOGGED_IN`
- All the above is tested
",moggers87,1490673,2015-09-06T17:14:40Z,CONTRIBUTOR,False,207,58,5,CSRF protection for Django without cookies.,Python,66734a48224798e98bff45e24a21b5a0a55c5a2c,Update README.rst
47,https://api.github.com/repos/mozilla/django-session-csrf/pulls/19,19,Fixed tests & Travis,"This PR fixes tests with newer versions of Django and adds configuration for Travis CI
",moggers87,1490673,2015-09-04T17:15:17Z,CONTRIBUTOR,True,55,50,3,CSRF protection for Django without cookies.,Python,dff6a7345581f3bc75081e59f34e0f0b41a42f00,"Travis config

* config file for Travis CI
* updates to how runtests.sh script works - it now returns the exit code
  of the tests rather than 0"
48,https://api.github.com/repos/mozilla/django-session-csrf/pulls/19,19,Fixed tests & Travis,"This PR fixes tests with newer versions of Django and adds configuration for Travis CI
",moggers87,1490673,2015-09-04T17:15:17Z,CONTRIBUTOR,True,55,50,3,CSRF protection for Django without cookies.,Python,3e362c1d6a3c2ae3ad0696e8836fc90a4d9de532,Update tests to work with newer versions of Django
49,https://api.github.com/repos/mozilla/django-session-csrf/pulls/19,19,Fixed tests & Travis,"This PR fixes tests with newer versions of Django and adds configuration for Travis CI
",moggers87,1490673,2015-09-04T17:15:17Z,CONTRIBUTOR,True,55,50,3,CSRF protection for Django without cookies.,Python,c0b115528512c8189f9baecf886b44091edff75a,"Don't test on Python 3, it's broken"
50,https://api.github.com/repos/mozilla/django-session-csrf/pulls/19,19,Fixed tests & Travis,"This PR fixes tests with newer versions of Django and adds configuration for Travis CI
",moggers87,1490673,2015-09-04T17:15:17Z,CONTRIBUTOR,True,55,50,3,CSRF protection for Django without cookies.,Python,ab97e335993fe8ca0cc81559f41bb7a5992eaf97,"Change tested versions

* Drop support for 1.4
* Test with 1.9
* Stop testing against Python 2.6"
51,https://api.github.com/repos/mozilla/django-session-csrf/pulls/18,18,Add contribute.json file.,"Add a contribute.json file à la http://contribute.paas.allizom.org/.
",Osmose,193106,2015-03-02T19:05:13Z,CONTRIBUTOR,True,21,0,1,CSRF protection for Django without cookies.,Python,b975e1d6102e055b3956ba0bedd0168558e1cc8c,Add contribute.json file.
52,https://api.github.com/repos/mozilla/django-session-csrf/pulls/17,17,Remove `django` from `install_requires`,"_setup.py_ was defining Django as a dependency. This causes it to be installed automatically if you `pip install django-session-csrf` (or `pip install` a requirements file including `django-session-csrf`).

This results in a mess of 2 copies installed over each other if using a fork of django (e.g. [django-nonrel](https://github.com/django-nonrel/django)), as pip doesn’t recognise them as the same dependency.

Surely projects which want to use django-session-csrf will already have Django: either already installed, or already in a requirements.txt file.

---

Also corrected a deprecated import path in tests.py, for compatibility with Django 1.6+ (as requirements.txt grabs the latest version of Django, tests fail without this, and I try not to raise PRs with failing tests!)
",stucox,1165817,2015-01-28T18:08:56Z,NONE,False,1,2,2,CSRF protection for Django without cookies.,Python,778e67b1a87de5b0cb985583fccd581c142a2fac,Stopped lib from automatically installing Django when it’s installed itself; and corrected a deprecated import path in tests.py.
53,https://api.github.com/repos/mozilla/django-session-csrf/pulls/16,16,Check for existence of request.user before calling is_authenticated(),"There exists a race condition within the csrf middleware which causes AttributeError: 'WSGIRequest' object has no attribute 'user' when using Django's  contrib authentication middleware.

The issue is request.user is created by the Authentication middleware so it doesn't exist yet if you have CSRF middleware listed above the Auth middleware in MIDDLEWARE_CLASSES.

But the CSRF middleware must be placed above the Auth middleware otherwise you get CSRF token errors when attempting to login to the admin.

Adding an extra check that the user attribute exists on the request before checking for is_authenticated() resolves this error.
",eressler,319179,2014-03-25T00:59:07Z,NONE,False,1,1,1,CSRF protection for Django without cookies.,Python,447e8c48a35f17bee367062f52253389ee60af16,"Added check for user on the request object

Make sure the user object exists before checking authentication to prevent AttributeError: 'WSGIRequest' object has no attribute 'user'"
54,https://api.github.com/repos/mozilla/django-session-csrf/pulls/15,15,hash csrf tokens for use as memcache keys,,washort,947487,2013-05-31T22:17:07Z,CONTRIBUTOR,True,30,19,2,CSRF protection for Django without cookies.,Python,13c3cb212ac6ae0b1e9f6db02043bbfb0752d6db,Hash received cookies to normalize length and contents. (bug 872263)
55,https://api.github.com/repos/mozilla/django-session-csrf/pulls/14,14,issue 10 - massive cookies cause memcache trouble,"Solves https://github.com/mozilla/django-session-csrf/issues/10

Here's what it can look like: http://cl.ly/LaHr 
",peterbe,26739,2012-12-14T01:18:58Z,CONTRIBUTOR,False,20,3,3,CSRF protection for Django without cookies.,Python,799dafa1b1fa7150c360d8022ca671bc7864fa22,issue 10 - massive cookies cause memcache trouble
56,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,84db1ae3c1643fb92a69b985657f3f1dcc1afec5,Fix test broken by Django 1.4.
57,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,65c4e307c538c367babfdc79d683dd880f4a50e4,Fix test failures when CSRF_FAILURE_VIEW is set to something that redirects.
58,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,c23330a84660aae218864b66e84699fab4b923ab,"Re-add urls attribute to TestCsrfToken tests.  This is needed to
ensure that / is a simple view that doesn't have side effects that
break the tests.  session-csrf's tests should be independent of the
Django project it's included in."
59,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,8b636bc8701587022acd3ce871c87850819c3436,"Use session cookie for anonymous CSRF cookie.

This fixes an issue with IE 7 and 8 not accepting the cookie if the client's
date is set wrong. Session cookies (cookies that have no set expiry date and
therefore expire at the end of the browser session) are already used by Django
for storing the SESSION_COOKIE (sessionid by default)."
60,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,07458282b2e40d05d7cc248f9e16af489c4510cc,"Merge @anonymous_csrf and ANON_ALWAYS functionality

This requires moving the common code into process_view so we can tell
if the view has been decorated."
61,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,a02ba0495e7edb25bebaece6fb2531643bd5b2fa,"Unset ANON_ALWAYS during TestCsrfMiddleware tests.

This caused test_anon_token_from_cookie to pass when it shouldn't"
62,https://api.github.com/repos/mozilla/django-session-csrf/pulls/11,11,"Anonymous CSRF cookie fix, test fixes, and ANON_ALWAYS cleanup","These commits fix an issue with the anonymous CSRF cookie affecting old versions of IE, fix some tests (including fixes needed by Django 1.4), and clean up the ANON_ALWAYS code I wrote 6 months ago by merging its functionality with @anonymous_csrf.
",scjody,1136329,2012-06-11T16:17:44Z,CONTRIBUTOR,False,40,36,2,CSRF protection for Django without cookies.,Python,452522ad0e5b35235aab2b82d034280e5f33c0a2,"Fix test_anon_token_from_cookie.

The view needs to be decorated with anonymous_csrf before calling
process_view."
63,https://api.github.com/repos/mozilla/django-session-csrf/pulls/9,9,Don't recommend putting important code in manage.py.,"Currently the django-session-csrf README recommends putting the monkeypatch code in `manage.py`. Placing code that your project relies on to function in `manage.py` is an anti-pattern, as there is no reason to believe that `manage.py` will ever be executed in a production deployment of a Django app; in many common deployment setups it is not.

Fortunately there is a simple and equally functional alternative; if the monkeypatch is done in the root `urls.py` before the url patterns are declared, it will still take effect before views are imported. This pull request recommends that instead.
",carljm,61586,2012-02-02T23:53:12Z,MEMBER,True,2,2,1,CSRF protection for Django without cookies.,Python,1fa1a42fc1b7820979dbb83d64b0e5dabdf963fa,Don't recommend putting important code in manage.py.
64,https://api.github.com/repos/mozilla/django-session-csrf/pulls/8,8,allow running of TestCsrfMiddleware tests in isolation,"http://paste.codebasehq.com/pastes/cqiietmujjohn7l0e5

if I run all the tests for the module it passes, if I single out `TestCsrfMiddleware` it fails

the number of tests run each way adds up though, so it's not skipping anything when I run all

I can see why it fails but I wasn't getting why it passes when you run them all. Now I see it's because the Django request middleware gets set up by `ClientHandler`if you run the other test classes, and this is necessary to have a `request.user` for the csrf middleware to check for.

So strictly speaking it seems like `TestCsrfMiddleware` should also set up request middleware, at least for the failing method that needs `request.user`.

I have made a hack for this here, not sure if it's the best way. (or could I just set a dummy `user` attribute on the request and leave it at that?)
",anentropic,147840,2012-01-26T12:11:51Z,CONTRIBUTOR,True,8,6,1,CSRF protection for Django without cookies.,Python,8fb3e70785e05f89117cd1e49962a6b863415a38,all TestCase sub-classes need the urls attribute to run
65,https://api.github.com/repos/mozilla/django-session-csrf/pulls/8,8,allow running of TestCsrfMiddleware tests in isolation,"http://paste.codebasehq.com/pastes/cqiietmujjohn7l0e5

if I run all the tests for the module it passes, if I single out `TestCsrfMiddleware` it fails

the number of tests run each way adds up though, so it's not skipping anything when I run all

I can see why it fails but I wasn't getting why it passes when you run them all. Now I see it's because the Django request middleware gets set up by `ClientHandler`if you run the other test classes, and this is necessary to have a `request.user` for the csrf middleware to check for.

So strictly speaking it seems like `TestCsrfMiddleware` should also set up request middleware, at least for the failing method that needs `request.user`.

I have made a hack for this here, not sure if it's the best way. (or could I just set a dummy `user` attribute on the request and leave it at that?)
",anentropic,147840,2012-01-26T12:11:51Z,CONTRIBUTOR,True,8,6,1,CSRF protection for Django without cookies.,Python,c9a0c9d7edf8f1fae39442a041e27b6db7784290,remove dependency on namedtuple (Py 2.6)
66,https://api.github.com/repos/mozilla/django-session-csrf/pulls/8,8,allow running of TestCsrfMiddleware tests in isolation,"http://paste.codebasehq.com/pastes/cqiietmujjohn7l0e5

if I run all the tests for the module it passes, if I single out `TestCsrfMiddleware` it fails

the number of tests run each way adds up though, so it's not skipping anything when I run all

I can see why it fails but I wasn't getting why it passes when you run them all. Now I see it's because the Django request middleware gets set up by `ClientHandler`if you run the other test classes, and this is necessary to have a `request.user` for the csrf middleware to check for.

So strictly speaking it seems like `TestCsrfMiddleware` should also set up request middleware, at least for the failing method that needs `request.user`.

I have made a hack for this here, not sure if it's the best way. (or could I just set a dummy `user` attribute on the request and leave it at that?)
",anentropic,147840,2012-01-26T12:11:51Z,CONTRIBUTOR,True,8,6,1,CSRF protection for Django without cookies.,Python,890060e67b73ceb8c00abc1ce321df629b5efa81,only need urls for the last class after all
67,https://api.github.com/repos/mozilla/django-session-csrf/pulls/8,8,allow running of TestCsrfMiddleware tests in isolation,"http://paste.codebasehq.com/pastes/cqiietmujjohn7l0e5

if I run all the tests for the module it passes, if I single out `TestCsrfMiddleware` it fails

the number of tests run each way adds up though, so it's not skipping anything when I run all

I can see why it fails but I wasn't getting why it passes when you run them all. Now I see it's because the Django request middleware gets set up by `ClientHandler`if you run the other test classes, and this is necessary to have a `request.user` for the csrf middleware to check for.

So strictly speaking it seems like `TestCsrfMiddleware` should also set up request middleware, at least for the failing method that needs `request.user`.

I have made a hack for this here, not sure if it's the best way. (or could I just set a dummy `user` attribute on the request and leave it at that?)
",anentropic,147840,2012-01-26T12:11:51Z,CONTRIBUTOR,True,8,6,1,CSRF protection for Django without cookies.,Python,c0dbb49ee59cca250411bba59fde1a7a5fd63a70,make TestCsrfMiddleware tests work in isolation (without running the other test classes first)
68,https://api.github.com/repos/mozilla/django-session-csrf/pulls/7,7,fix broken tests,"add urls to _all_ TestCase classes
",anentropic,147840,2012-01-25T16:12:11Z,CONTRIBUTOR,False,4,2,1,CSRF protection for Django without cookies.,Python,8fb3e70785e05f89117cd1e49962a6b863415a38,all TestCase sub-classes need the urls attribute to run
69,https://api.github.com/repos/mozilla/django-session-csrf/pulls/6,6,Added .gitignore file with some rules,,LucianU,912849,2011-12-21T18:46:55Z,CONTRIBUTOR,True,3,0,1,CSRF protection for Django without cookies.,Python,9ef830cca24dfce487cfa5e4fa2f75b799629884,Added a .gitignore file with some rules
70,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,efc71237ccfb71b0716d402bec2c690848b5e737,Add urls attribute to fix broken tests.
71,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,9885ee4ce7ab6f330f627ace1559a4a1828e8acd,Add ANON_ALWAYS setting that enables CSRF protection for all anonymous views.
72,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,4ab84852cb0f8435befcff3e1d63fae3b8e6a621,"Use request.META['CSRF_COOKIE'] instead of request.csrf_token for
consistency with Django.  This eliminates the need for our own context
processor."
73,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,4b92d9d2c6fd6faeb3c35b3b7766272b4cffa4e9,"Set a CSRF cookie when the CSRF token has been used.  This is useful for
AJAX requests and web service APIs that don't want to parse HTML to
extract the token.  Of course, unlike Django's built in CSRF protection,
the server doesn't trust the cookie for CSRF validation purposes.  The token
in the session (or the cache, for anonymous users) is still used."
74,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,d0436fd25c99bca7866321838d74f44ef1b8e003,"Create a RequestContext when testing that a cookie is not sent.
Based on code review comment, BugzID: 761"
75,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,002f87ae720bbc282f8abdd718690d805ba46101,Add documentation about caches for anonymous CSRF
76,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,29a5f796e144c81cf540305a8e0be0c1ef9e5677,Rename csrf_key to _anon_csrf_key to clarify its purpose and mark it as a private variable.
77,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,35dc9f7a16ca1c90bf69f9efd689b5edd866c296,Modify ANON_ALWAYS in setUp and tearDown rather than using a contetx manager.
78,https://api.github.com/repos/mozilla/django-session-csrf/pulls/5,5,Enhancements and bugfixes to session-csrf,"Hi all,

I've made several changes to session-csrf.  The most visible ones in this pull request are:
- Add the ANON_ALWAYS setting.  This makes session-csrf _always_ set an anonymous CSRF cookie without requiring the @anonymous_csrf decorator, to make it work more like Django's existing CSRF functionality.
- Set a CSRF cookie when the CSRF token has been used.  Even though session-csrf doesn't rely on the cookie for CSRF verification, it's useful for the cookie to be available so that web service APIs and AJAX requests can be CSRF protected without having to parse a form.

Cheers,
Jody
",scjody,1136329,2011-11-24T20:07:10Z,CONTRIBUTOR,False,201,43,4,CSRF protection for Django without cookies.,Python,dc60a8b3da685ff0fa4e36533322165770ff22cf,Rename the 'anon' variable to 'use_anon_cookie' and clarify the logic used to set it.
