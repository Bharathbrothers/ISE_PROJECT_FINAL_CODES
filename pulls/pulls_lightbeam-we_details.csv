,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/lightbeam-we/pulls/259,259,Provides consistent lastRequestTime,"Currently lastRequestTime is not set for newly added websites, meaning that some items in the database do not have a lastRequestTime field.",aibo105,12464910,2019-08-02T09:07:32Z,NONE,False,1,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a31359ea160693794b983400272f1931bc1055c6,"Provides consistent lastRequestTime

Makes sure that lastRequestTime is always set,
including for newly added websites."
1,https://api.github.com/repos/mozilla/lightbeam-we/pulls/258,258,Issues/256,fixes #256 ,Parikshit-Hooda,25405707,2019-06-29T22:12:34Z,CONTRIBUTOR,False,841,821,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5190f4000d4c1cc97ed6f9b9a7bc3d7e92fb4140,css update to fix top bar render
2,https://api.github.com/repos/mozilla/lightbeam-we/pulls/258,258,Issues/256,fixes #256 ,Parikshit-Hooda,25405707,2019-06-29T22:12:34Z,CONTRIBUTOR,False,841,821,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,db3372be61c40a34b31fb831c66a827653c231fb,css update to fix top bar render
3,https://api.github.com/repos/mozilla/lightbeam-we/pulls/257,257,css update to fix top bar render,fixes #256 ,Parikshit-Hooda,25405707,2019-06-29T17:45:28Z,CONTRIBUTOR,False,841,821,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5190f4000d4c1cc97ed6f9b9a7bc3d7e92fb4140,css update to fix top bar render
4,https://api.github.com/repos/mozilla/lightbeam-we/pulls/257,257,css update to fix top bar render,fixes #256 ,Parikshit-Hooda,25405707,2019-06-29T17:45:28Z,CONTRIBUTOR,False,841,821,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,db3372be61c40a34b31fb831c66a827653c231fb,css update to fix top bar render
5,https://api.github.com/repos/mozilla/lightbeam-we/pulls/254,254,Issues/253,"fixes #253
`src` added explicitly.
some grammatical changes, some indentation changes.",Parikshit-Hooda,25405707,2019-06-29T10:01:27Z,CONTRIBUTOR,True,9,9,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4cffdfd743fe3fbdc0caeae20c70d0998ee15a07,markdown refactor to increase readability
6,https://api.github.com/repos/mozilla/lightbeam-we/pulls/254,254,Issues/253,"fixes #253
`src` added explicitly.
some grammatical changes, some indentation changes.",Parikshit-Hooda,25405707,2019-06-29T10:01:27Z,CONTRIBUTOR,True,9,9,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0e08624706c2d63b5cbb891dea2b0234628b5ef6,markdown refactor to increase readability
7,https://api.github.com/repos/mozilla/lightbeam-we/pulls/254,254,Issues/253,"fixes #253
`src` added explicitly.
some grammatical changes, some indentation changes.",Parikshit-Hooda,25405707,2019-06-29T10:01:27Z,CONTRIBUTOR,True,9,9,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e9e334753f82c94474d2438eb4d02e376e32e050,markdown refactor
8,https://api.github.com/repos/mozilla/lightbeam-we/pulls/254,254,Issues/253,"fixes #253
`src` added explicitly.
some grammatical changes, some indentation changes.",Parikshit-Hooda,25405707,2019-06-29T10:01:27Z,CONTRIBUTOR,True,9,9,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5e901c65e4fda4d73aaec3b2b046daaa65074fff,markdown refactor to increase readability
9,https://api.github.com/repos/mozilla/lightbeam-we/pulls/252,252,Adopt Mozilla's 2019 Code of Conduct,"Fixes #251.

Copy required parts from https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md",jaller94,10872136,2019-05-28T05:03:26Z,CONTRIBUTOR,True,7,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d4185eb417072be8da881419f708c4e97dc58a6e,"Adopt new Mozilla's 2019 Code of Conduct

Copy required parts from https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md"
10,https://api.github.com/repos/mozilla/lightbeam-we/pulls/239,239,Version bump to 2.1.0,,jonathanKingston,338988,2018-02-17T12:45:12Z,CONTRIBUTOR,True,2,2,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c85875af99f7917cc397630e0e5c2fca4dc8a4ac,Version bump to 2.1.0
11,https://api.github.com/repos/mozilla/lightbeam-we/pulls/234,234,Remove manual tick,"In this PR:

- removed manual tick
- improved alpha values

The explanation about the improved alpha is in this PR - #233 ",princiya,8022693,2017-11-19T09:45:13Z,COLLABORATOR,True,17,11,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,58ba42d917bfb1542c590143b25b8bd66bdb0269,remove manual tick
12,https://api.github.com/repos/mozilla/lightbeam-we/pulls/233,233,[WIP] Introducing web workers,"This is an initial attempt to improve the graph's performance for large no. of nodes.

Issue #232 

The idea in this PR is to off-load the heavy force layout computations to the web worker. This improves performance during page load.

I am also experimenting on passing the logic to web workers during the drag events. This part is still work in progress.

Here is the rough idea that I try to achieve:

![drag](http://g.recordit.co/y9y0prnWQH.gif)

In the present situation, when we drag, the force layout restarts the simulation. When there are large no. of nodes, the graph takes a lot of time to achieve equilibrium, thereby dropping the frame rates. Restarting the simulation is necessary, to compute the updated coordinates and give the soft transition, else the drag effect doesn't appear smooth.

Using web workers, I try to keep the dragged coordinates in the main thread, invoke the web worker during `dragEnd`. The web worker computes the updated coordinates and waits until the graph attains equilibrium. I need to figure a way to get the updated coordinates and achieve smooth animations.

cc @jonathanKingston @biancadanforth ",princiya,8022693,2017-11-18T06:30:19Z,COLLABORATOR,False,205,63,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ee5176a85675200e0d96a08b72aab074eb1697e2,introducing web workers
13,https://api.github.com/repos/mozilla/lightbeam-we/pulls/231,231,Use consistent braces for arrow functions,"Fixes #64. 
* Added ESLint rule arrow-body-style
* Added braces where needed",epq,1719156,2017-10-18T04:01:00Z,CONTRIBUTOR,True,28,8,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,03506803f7a57fbe6792eff602e63ac23d85c108,Add eslint rule arrow-body-style.
14,https://api.github.com/repos/mozilla/lightbeam-we/pulls/231,231,Use consistent braces for arrow functions,"Fixes #64. 
* Added ESLint rule arrow-body-style
* Added braces where needed",epq,1719156,2017-10-18T04:01:00Z,CONTRIBUTOR,True,28,8,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bda8435496c7905cd46322deb7a9b12a88b8b24b,Fixes #64. Apply consistent braces throughout project.
15,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,1ad021d8cab8c7b00d84f8e741e7368a2cdac616,aframe commits
16,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0d20cb38eb98a071936337fbbdf95073df4bc25b,file renamed
17,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ffd22958170041e513f06344872441e8b6b39b4d,reload logic fixed. fixes #202
18,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3d72935e492647131e2b8c6ea7e4ec6819d2a1be,aframe supported
19,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7658d970f815862280fd7c354fb5616bac41a2de,nit fixes
20,https://api.github.com/repos/mozilla/lightbeam-we/pulls/230,230,Lightbeam in VR using A-Frame,"Issue #202 

Launch Lightbeam web-extension and click the `VR` button [below gif] to see Lightbeam in VR.

![screen shot 2017-10-14 at 13 43 19](http://g.recordit.co/VvFHH5Nt8T.gif)

@jonathanKingston @cvan @caseyyee let me know what you think.

",princiya,8022693,2017-10-14T08:19:53Z,COLLABORATOR,False,8915,4,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,05d9ec41b7ffc208c8ef79e5489510ccf33a8f5c,nit fixes
21,https://api.github.com/repos/mozilla/lightbeam-we/pulls/229,229,GIF added for README.md,"Hi all,
Its the PR for issue https://github.com/mozilla/lightbeam-we/issues/132
Kindly review and let me know if we can improve it
Thanks",maqboolkhan,5022287,2017-10-11T15:20:06Z,CONTRIBUTOR,True,1,1,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bec05c6a21602f7bbdbac2d7368e23d0383c70c1,GIF added for README.md
22,https://api.github.com/repos/mozilla/lightbeam-we/pulls/228,228,Update dexie version and bump version to 2.0.5,,jonathanKingston,338988,2017-10-11T00:40:12Z,CONTRIBUTOR,True,4,4,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0c1ef1868385654ed655261d3aa495f0e253db6b,Update dexie version and bump version to 2.0.5
23,https://api.github.com/repos/mozilla/lightbeam-we/pulls/225,225,Version bump to 2.0.4.,,jonathanKingston,338988,2017-10-09T18:25:45Z,CONTRIBUTOR,True,2,2,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0b5c68eba4e20f328bd49b45952611d09ed27fc4,Version bump to 2.0.4.
24,https://api.github.com/repos/mozilla/lightbeam-we/pulls/223,223,Fix broken TP button,The tracking protection button is broken because we re-declare a const. This fixes it.,pauljt,1396160,2017-10-09T02:08:30Z,CONTRIBUTOR,True,2,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a329d6ec122ae40133243bb953d6613a8f65bfde,Fix broken TP button
25,https://api.github.com/repos/mozilla/lightbeam-we/pulls/222,222,190-added-in-link-to-index,"Adds in feature requested in #190 

I have added a button that takes the user from the first-run.html page to index.html
# Starting State:
![lightbeam_button_no_hover](https://user-images.githubusercontent.com/10661000/31254017-de2a2052-aa1e-11e7-9d22-464f44447d6b.jpg)

# Hovering State:
![lightbeam_button_with_hover](https://user-images.githubusercontent.com/10661000/31254046-07275f56-aa1f-11e7-91a1-4534337a52fe.jpg)


",darrylpargeter,10661000,2017-10-05T21:49:56Z,CONTRIBUTOR,True,30,3,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c1d5ce4780099c8cbbc83b8a697eab38f7d18be2,190-added-in-link-to-index
26,https://api.github.com/repos/mozilla/lightbeam-we/pulls/222,222,190-added-in-link-to-index,"Adds in feature requested in #190 

I have added a button that takes the user from the first-run.html page to index.html
# Starting State:
![lightbeam_button_no_hover](https://user-images.githubusercontent.com/10661000/31254017-de2a2052-aa1e-11e7-9d22-464f44447d6b.jpg)

# Hovering State:
![lightbeam_button_with_hover](https://user-images.githubusercontent.com/10661000/31254046-07275f56-aa1f-11e7-91a1-4534337a52fe.jpg)


",darrylpargeter,10661000,2017-10-05T21:49:56Z,CONTRIBUTOR,True,30,3,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,1a81be4404d2a638ef57b1a229a26b74a4a25169,190-made-requested-changes-to-copy
27,https://api.github.com/repos/mozilla/lightbeam-we/pulls/221,221,Switching from native 'confirm' prompt to HTML dialog for reset prompt.,"Closes #198, though not exactly as per the image provided in that issue. From @jonathanKingston's direction, [the previous version of Lightbeam](https://github.com/mozilla/lightbeam/blob/master/data/style.css) also played a part. Happy to make stylistic changes, as needed.

<img width=""1282"" alt=""A screenshot showing the new reset confirmation dialog"" src=""https://user-images.githubusercontent.com/159848/31239598-adf56fe8-a9cb-11e7-99d5-1761deaa9a2b.png"">

This should allow for other dialogs to be easily added in the future too.",andrewhayward,159848,2017-10-05T16:52:42Z,MEMBER,True,167,7,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,17f89754bd325b00a10fb2cf48c3aee351d36d32,"Switching from native 'confirm' prompt to HTML dialog for reset prompt.

Adds Google's `dialog-polyfill` as a dependency."
28,https://api.github.com/repos/mozilla/lightbeam-we/pulls/220,220,Increase favicon size relative to the circle radius,"Hi

This is aPR for issue [#204](https://github.com/mozilla/lightbeam-we/issues/204)
Looking forward to your feedback!",Bilie,8368179,2017-10-04T21:01:15Z,CONTRIBUTOR,True,34,20,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,030aa5e88d4196a9bc1c9f5541338df97324d857,Increase favicon size relative to the circle radius
29,https://api.github.com/repos/mozilla/lightbeam-we/pulls/220,220,Increase favicon size relative to the circle radius,"Hi

This is aPR for issue [#204](https://github.com/mozilla/lightbeam-we/issues/204)
Looking forward to your feedback!",Bilie,8368179,2017-10-04T21:01:15Z,CONTRIBUTOR,True,34,20,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f61d1d87cf73d371e5effcb90c5000e479245b44,Move drawing image to draw favicon function
30,https://api.github.com/repos/mozilla/lightbeam-we/pulls/220,220,Increase favicon size relative to the circle radius,"Hi

This is aPR for issue [#204](https://github.com/mozilla/lightbeam-we/issues/204)
Looking forward to your feedback!",Bilie,8368179,2017-10-04T21:01:15Z,CONTRIBUTOR,True,34,20,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dad07ba11ec80184c792cfeedcfa4af221d3dc33,Move image drawing to a separate function
31,https://api.github.com/repos/mozilla/lightbeam-we/pulls/219,219,Fix repeat loading of erroneous favicons. Fixes #212,,jonathanKingston,338988,2017-10-04T12:47:10Z,CONTRIBUTOR,True,14,1,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,32a4a486191772efa1c00e0ec4e565a6366ba218,Fix repeat loading of erroneous favicons. Fixes #212
32,https://api.github.com/repos/mozilla/lightbeam-we/pulls/218,218,Fix toggle for stable firefox. Fixes #216,,jonathanKingston,338988,2017-10-04T10:31:01Z,CONTRIBUTOR,True,30,2,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,aafee814f3b2e80446c149c9b2ae21561ce13f75,Fix toggle for stable firefox. Fixes #216
33,https://api.github.com/repos/mozilla/lightbeam-we/pulls/214,214,Add json dependency for building,,jonathanKingston,338988,2017-09-30T16:08:19Z,CONTRIBUTOR,True,2,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,77fca7c6af8ac06bc259a3a2ed6c14ec33bbfda5,Add json dependency for building
34,https://api.github.com/repos/mozilla/lightbeam-we/pulls/211,211,Bump to 2.0.1 and remove install page as users had forgotten about in…,…stalling us.,jonathanKingston,338988,2017-09-29T01:26:21Z,CONTRIBUTOR,True,4,2,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,9707f9f87c17fdeff3a8ef3705eda695b2caff31,Bump to 2.0.1 and remove install page as users had forgotten about installing us.
35,https://api.github.com/repos/mozilla/lightbeam-we/pulls/210,210,Fix release,@princiya FYI,jonathanKingston,338988,2017-09-29T00:39:49Z,CONTRIBUTOR,True,11,10,34,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d33eaab5bbecca6cf3f010483f1636f089d34390,Fix release
36,https://api.github.com/repos/mozilla/lightbeam-we/pulls/207,207,Throw away requests that are not in the default cookie store or reque…,"…sts that we can't be certain what cookie store they are in

This patch throws away requests that we can't guarantee are not in default containers. This likely means that service workers will not be shown any more until we fix the browser.webRequest.* APIs to have cookieStoreId. Line 101 is this code which will likely break service worker page loads due to it being a non visible tab  which doesn't have a cookie jar assigned to it (in terms of the APIs anyway).

This function takes either a tab `browser.webRequest.onResponseStarted.addListener(` or `browser.tabs.onUpdated.addListener(` this allows us to capture the tab URL changes and web requests the page makes. Non visible tabs come through on webRequest.* apis which relate to internal code and service workers.

This I feel is better than letting users of Lightbeam think that containers are not isolated. Without this patch they will see one graph for all containers leading users to think they are tracked across a container boundary.

FYI: @biancadanforth, @groovecoder, @princiya (will notify Tanvi too)",jonathanKingston,338988,2017-09-28T17:40:53Z,CONTRIBUTOR,True,18,0,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,32156aa28e544207636e95585fafcabdb359eb3d,Throw away requests that are not in the default cookie store or requests that we can't be certain what cookie store they are in
37,https://api.github.com/repos/mozilla/lightbeam-we/pulls/206,206,Fix capture queue by not preventing the queue from working for an exc…,…eption. Also fix broken URL exceptions.,jonathanKingston,338988,2017-09-28T15:25:19Z,CONTRIBUTOR,True,26,19,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,db80a4dc90246160077c6fe49b59bc6f226f4726,Fix capture queue by not preventing the queue from working for an exception. Also fix broken URL exceptions.
38,https://api.github.com/repos/mozilla/lightbeam-we/pulls/205,205,Screenshot updated,Issue #192 ,princiya,8022693,2017-09-28T15:09:22Z,COLLABORATOR,True,3,4,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c8fe8516627023743e7c7592b2d9dff2efc75988,screenshot updated. fixes #192
39,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8d0b418aa125aca358218e3c2de84576e23163a1,improved graph ticks
40,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ada8b319b280ab5eae58cad437a7dfeb8dc0e3d7,improved force values
41,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e80f1330d97f6c883d50ae2af1e4a4d04270c98a,radius improved
42,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b00e166277dfda2551441c785e2ccc0807880c9a,minor fix
43,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5c5b4234a31562866cc9525dd58ebabf1193f178,numbers renamed
44,https://api.github.com/repos/mozilla/lightbeam-we/pulls/203,203,Force layout nits,"In this PR:

- Improved link distance
- Improved tick events (the graph animates slowly onLoad)
- Dynamic node radius based on no. of thirdParties

![Gif](http://g.recordit.co/tye8mFmBjD.gif)



",princiya,8022693,2017-09-28T10:25:02Z,COLLABORATOR,True,38,18,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5d314e0140286996e80b74a88b895180d402fb8c,radius updated
45,https://api.github.com/repos/mozilla/lightbeam-we/pulls/201,201,Cache favicons and other fixes,"In this PR:
- Cache favicons
- Favicon trailing bug fixed
",princiya,8022693,2017-09-11T10:00:53Z,COLLABORATOR,True,55,30,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3150db238e92a40eeab857d99aec266e5e2455b7,cache favicons and other fixes
46,https://api.github.com/repos/mozilla/lightbeam-we/pulls/201,201,Cache favicons and other fixes,"In this PR:
- Cache favicons
- Favicon trailing bug fixed
",princiya,8022693,2017-09-11T10:00:53Z,COLLABORATOR,True,55,30,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,cec3c474bb2ec5de0a885d805dd433f60eeae828,minor change
47,https://api.github.com/repos/mozilla/lightbeam-we/pulls/197,197,add warning when remove all data,Issue #119 ,joanasouza,8460155,2017-09-03T18:39:21Z,CONTRIBUTOR,True,7,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,787cadd9cdb5870a894ca01c23267c13e6183997,add warning when remove all data. fixes #119
48,https://api.github.com/repos/mozilla/lightbeam-we/pulls/197,197,add warning when remove all data,Issue #119 ,joanasouza,8460155,2017-09-03T18:39:21Z,CONTRIBUTOR,True,7,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,795bf932de6e302c935a6dabadc42ba0c6c7e4cb,fixed code to show warning when remove all data. Fixes #199
49,https://api.github.com/repos/mozilla/lightbeam-we/pulls/197,197,add warning when remove all data,Issue #119 ,joanasouza,8460155,2017-09-03T18:39:21Z,CONTRIBUTOR,True,7,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2c8a39280acd2be5f064d3a6441a70244e3e90de,add template strings to confirmation message. Fixes #119
50,https://api.github.com/repos/mozilla/lightbeam-we/pulls/196,196,Name change. Fixes #195,,jonathanKingston,338988,2017-09-01T22:33:41Z,CONTRIBUTOR,True,9,9,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,35706faf3c12cc219658a1df75321a82223e2d1b,Name change. Fixes #195
51,https://api.github.com/repos/mozilla/lightbeam-we/pulls/194,194,Attempt to fix those line endings,,jonathanKingston,338988,2017-09-01T17:07:31Z,CONTRIBUTOR,True,1,0,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7d268498f4f0e8da4a2841b2b344e9975c6c547f,Attempt to fix those line endings
52,https://api.github.com/repos/mozilla/lightbeam-we/pulls/193,193,Hook up tracking protection toggle with web extensions.,,jonathanKingston,338988,2017-09-01T00:45:17Z,CONTRIBUTOR,True,157,134,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3e642e10761f7fa6f17a1cdf70f1084e9a8d593b,Hook up tracking protection toggle with web extensions. Fixes #143
53,https://api.github.com/repos/mozilla/lightbeam-we/pulls/188,188,Properly munge inbound data in all cases. Fixes #187.,Dynamic vars were not updating correctly with the first party count in the switch statement for the `isVisible` and `firstParty` cases in `store.setWebsite`.,biancadanforth,17437436,2017-08-31T21:34:52Z,COLLABORATOR,True,8,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e383cac27fbc0f48754893b0dca48a1afb394447,Properly munge inbound data in all cases. Fixes #187.
54,https://api.github.com/repos/mozilla/lightbeam-we/pulls/186,186,Add first run page. Fixes #117.,We probably want to make a follow-up issue to check for first run with the browser extension version instead of using local storage and add a button in first-run.html to open the Lightbeam tab from the first-run page.,biancadanforth,17437436,2017-08-31T17:03:11Z,COLLABORATOR,True,157,5,11,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8adf80be1b0c96610cbb6f23bff85cbf160197d8,"Add first run page. Fixes #117.

We probably want to make a follow-up issue to check for first run with the browser extension version instead of using local storage and add a button in first-run.html to open the Lightbeam tab from the first-run page."
55,https://api.github.com/repos/mozilla/lightbeam-we/pulls/185,185,WIP: Cache favicon output to prevent flickering. Fixes #147,"For some reason the scale of this is super off, however it does prevent the flickering when dragging around.",jonathanKingston,338988,2017-08-31T15:46:56Z,CONTRIBUTOR,False,32,11,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6d9220c5fb7fee3106876c674bf3236e0d38dcc8,WIP: Cache favicon output to prevent flickering. Fixes #147
56,https://api.github.com/repos/mozilla/lightbeam-we/pulls/182,182,Fix null error in lightbeam.getDataGatheredSince,Follow on to PR #181 ,biancadanforth,17437436,2017-08-29T21:21:22Z,COLLABORATOR,True,1,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,adba9c609f00ab846cf0da879aff4d6342e9c457,Fix null error in lightbeam.getDataGatheredSince
57,https://api.github.com/repos/mozilla/lightbeam-we/pulls/181,181,Fix TypeError for a null return value in lightbeam.getDataGatheredSince,"If storage is empty, just exit the method to update the dynamic vars.",biancadanforth,17437436,2017-08-29T20:59:42Z,COLLABORATOR,True,3,0,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b7aadf81ba4c8314f3a01294a4e69dd9de446ba2,Fix TypeError for a null return value in lightbeam.getDataGatheredSince
58,https://api.github.com/repos/mozilla/lightbeam-we/pulls/180,180,Treat data with more consistency #177 possibly #179 and issues with #110,"Changes include:
- Ensuring modified data that is stored gets passed back in update calls
- Inbound, outbound data munging to be the same shape (I think there are some bits missing to this)
- Ensures we draw the graph based on the thirdParties and firstParties keys rather than what type the node is
- Merges data for isVisible and firstParty so they never go from true to false after being set
- Fixes race condition where tp fires before fp causing a broken fp node.",jonathanKingston,338988,2017-08-29T19:23:27Z,CONTRIBUTOR,True,105,48,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e02e94efc5b849b49e18ba79c65e17495b4b2b3f,"Fix for #177 possibly #179 and issues with #110, #183"
59,https://api.github.com/repos/mozilla/lightbeam-we/pulls/178,178,Refactor store.setThirdParty,"Removed the nested `if` statements for clarity. This may help in troubleshooting #110.

Also added an eslint rule to ensure there's a space on either side of operators so we don't get things like:

```javascript
if (someVar ===4) {
  // do stuff
}
```",biancadanforth,17437436,2017-08-29T05:26:46Z,COLLABORATOR,False,16,23,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4ebc3f971ab5dabeb85f61b531e3a22908fb6576,"refactor store.setThirdParty

Needs more scrutiny, but could be a good first step."
60,https://api.github.com/repos/mozilla/lightbeam-we/pulls/176,176,Address first parties as third parties. Fixes #110.,"If a first party site later becomes a third party site, keep the firstParty key set to true and do not set isVisible to false, even if the site is on the allowlist as a third party. Added a new method 'isAlsoAThirdParty' to check this.

Before:
![screen shot 2017-08-25 at 12 44 20 pm](https://user-images.githubusercontent.com/17437436/29732403-52116ebe-899d-11e7-8d65-a0236130b787.png)

After:
![screen shot 2017-08-25 at 1 49 35 pm](https://user-images.githubusercontent.com/17437436/29732408-57b7ecf8-899d-11e7-8628-2f89321b150e.png)

@jonathanKingston , I have no known questions; so ready for you to take a look. :)
",biancadanforth,17437436,2017-08-25T20:58:09Z,COLLABORATOR,False,10,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,12348fe8e29176e92401b3fe3bb5ccbd9e510cb4,"Address first parties as third parties. Fixes #110.

If a first party site later becomes a third party site, keep the firstParty key set to true and do not set isVisible to false, even if the site is on the allowlist as a third party. Added a new method 'isAlsoAThirdParty' to check this."
61,https://api.github.com/repos/mozilla/lightbeam-we/pulls/175,175,[WIP] Prevent ghosting - P1,Issue #147 ,princiya,8022693,2017-08-24T16:31:06Z,COLLABORATOR,False,3,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2d935b18b2515df5aeaf8c05f7c87e85a942c3ac,d3 timer added
62,https://api.github.com/repos/mozilla/lightbeam-we/pulls/174,174,Remove google font loading. Fixes #153.,Also added `/ext-libs/*` to `eslintignore` from PR #172  so husky doesn't yell at us!,biancadanforth,17437436,2017-08-24T15:42:57Z,COLLABORATOR,True,8,2,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0cc666299bae34dfaa12abcd3bb118af2e3db30c,Remove google font loading. Fixes #153.
63,https://api.github.com/repos/mozilla/lightbeam-we/pulls/173,173,[README.md] adding separators in between topics,"---

**this PR does basically aim at:**
- *adding separators in between topics in the README.md file;*

---

**main motivation for that does basically lie within the fact within:**
- *turning the file simpler to to be read;*
- *turning the file easier to read;*
- *turning the file easier to be understood;*
- *turning the file simpler to to be understood;*
- *stylizing/beautifying the file;*

---",ghost,10137,2017-08-23T12:49:04Z,NONE,False,6,0,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e61fb0e9c073d5f0b2097c60f1ecd14b93843866,"[README.md] adding separators in between topics

**this PR does basically aim at:**
- *adding separators in between topics in the README.md file;*

---

**main motivation for that does basically lie within the fact within:**
- *turning the file simpler to to be read;*
- *turning the file easier to read;*
- *turning the file easier to be understood;*
- *turning the file simpler to to be understood;*
- *stylizing/beautifying the file;*"
64,https://api.github.com/repos/mozilla/lightbeam-we/pulls/172,172,"Add in lightbeam extension id, fix bundling as node_modules doesn't w…","…ork in web-ext, auto build the submodule. Changed inclusion paths to new ext-libs dir which is built with 'npm run build'. Fixes #159",jonathanKingston,338988,2017-08-23T12:20:44Z,CONTRIBUTOR,True,18,6,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2bb1712d240edbaf13b19c9a380e5cb0ea6e61ff,"Add in lightbeam extension id, fix bundling as node_modules doesn't work in web-ext, auto build the submodule. Changed inclusion paths to new ext-libs dir which is built with 'npm run build'. Fixes #159"
65,https://api.github.com/repos/mozilla/lightbeam-we/pulls/170,170,#66 Changes proposed for getting the toggle button up,"Here are the changes I did to get the toggle button up. 
I have done it using css :before and :after to 'toggle'  like @jonathanKingston proposed to get the button and the 'on'-'off' label. I have also made changes to the button dimensions to make it look more like the original lightbeam switch.
Hope I used the right color.
Let me know if this works.
#66 Fix toggle button to work with CSS",laxmy,25521469,2017-08-23T02:49:47Z,CONTRIBUTOR,True,43,19,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,9c5a34cc4db656f2b4110ffd5417426c7e30d327,Changes for tracking protection toggle button
66,https://api.github.com/repos/mozilla/lightbeam-we/pulls/170,170,#66 Changes proposed for getting the toggle button up,"Here are the changes I did to get the toggle button up. 
I have done it using css :before and :after to 'toggle'  like @jonathanKingston proposed to get the button and the 'on'-'off' label. I have also made changes to the button dimensions to make it look more like the original lightbeam switch.
Hope I used the right color.
Let me know if this works.
#66 Fix toggle button to work with CSS",laxmy,25521469,2017-08-23T02:49:47Z,CONTRIBUTOR,True,43,19,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ee6802cac53a20fd8908751bfa5c5508520360b8,changes for tracking protection toggle buttton with label properly laid out
67,https://api.github.com/repos/mozilla/lightbeam-we/pulls/170,170,#66 Changes proposed for getting the toggle button up,"Here are the changes I did to get the toggle button up. 
I have done it using css :before and :after to 'toggle'  like @jonathanKingston proposed to get the button and the 'on'-'off' label. I have also made changes to the button dimensions to make it look more like the original lightbeam switch.
Hope I used the right color.
Let me know if this works.
#66 Fix toggle button to work with CSS",laxmy,25521469,2017-08-23T02:49:47Z,CONTRIBUTOR,True,43,19,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4c48f67408c59e6be2acdd0f1579c75cfd0b8707,more alignment changes for the toggle switch
68,https://api.github.com/repos/mozilla/lightbeam-we/pulls/170,170,#66 Changes proposed for getting the toggle button up,"Here are the changes I did to get the toggle button up. 
I have done it using css :before and :after to 'toggle'  like @jonathanKingston proposed to get the button and the 'on'-'off' label. I have also made changes to the button dimensions to make it look more like the original lightbeam switch.
Hope I used the right color.
Let me know if this works.
#66 Fix toggle button to work with CSS",laxmy,25521469,2017-08-23T02:49:47Z,CONTRIBUTOR,True,43,19,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e55bc8fd64d68e82c332efc9730fe7af46747f5d,indenting and active state changes
69,https://api.github.com/repos/mozilla/lightbeam-we/pulls/169,169,Make vars dynamic. Fixes #65.,"Added a few new methods to lightbeam.js and store.js to fetch these values from storage to initialize them, and then increment numVisitedSites and numThirdParties when appropriate on each redraw() in lightbeam.js.

It should be noted that for some reason [Dexie filtering does not support boolean values](http://dexie.org/docs/WhereClause/WhereClause.equals().html) for primary keys or indices, so I had to convert the `firstParty` and `isVisible` keys to use `0` for `false` and `1` for `true`...",biancadanforth,17437436,2017-08-22T21:30:33Z,COLLABORATOR,True,135,16,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6b3b660d05f9622cf39cda1cc5438c841ac8edd0,"Make vars dynamic. Fixes #65.

Added a few new methods to lightbeam.js and store.js to fetch these values from storage to initialize them, and then increment numVisitedSites and numThirdParties when appropriate on each redraw() in lightbeam.js."
70,https://api.github.com/repos/mozilla/lightbeam-we/pulls/169,169,Make vars dynamic. Fixes #65.,"Added a few new methods to lightbeam.js and store.js to fetch these values from storage to initialize them, and then increment numVisitedSites and numThirdParties when appropriate on each redraw() in lightbeam.js.

It should be noted that for some reason [Dexie filtering does not support boolean values](http://dexie.org/docs/WhereClause/WhereClause.equals().html) for primary keys or indices, so I had to convert the `firstParty` and `isVisible` keys to use `0` for `false` and `1` for `true`...",biancadanforth,17437436,2017-08-22T21:30:33Z,COLLABORATOR,True,135,16,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3db4c7f3e4cdc7b2ad074deaf3e49afdec6f4989,"Fixes per PR feedback

Also added 'requestTime' to first party website objects, since to this point only third parties had them.

@jonathanKingston, should I worry about the <dl> elements in .top-bar shifting when there is and isn't content in these fields? Was thinking I could do a pseudoelement and remove it once they're populated.

Also, if you know a better way in lightbeam.updateVars to distinguish between initialization and update other than isFirstParty === undefined, please let me know!"
71,https://api.github.com/repos/mozilla/lightbeam-we/pulls/169,169,Make vars dynamic. Fixes #65.,"Added a few new methods to lightbeam.js and store.js to fetch these values from storage to initialize them, and then increment numVisitedSites and numThirdParties when appropriate on each redraw() in lightbeam.js.

It should be noted that for some reason [Dexie filtering does not support boolean values](http://dexie.org/docs/WhereClause/WhereClause.equals().html) for primary keys or indices, so I had to convert the `firstParty` and `isVisible` keys to use `0` for `false` and `1` for `true`...",biancadanforth,17437436,2017-08-22T21:30:33Z,COLLABORATOR,True,135,16,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,774ee25729438d4cd0bb21474b65e8d1fed0c10b,"More fixes from PR feedback

Also fixed a bug when lightbeam.getDataGatheredSince returns null."
72,https://api.github.com/repos/mozilla/lightbeam-we/pulls/164,164,Increase graph area,"![Image](http://g.recordit.co/QW8pHEbj9p.gif)

",princiya,8022693,2017-08-22T11:43:52Z,COLLABORATOR,True,24,11,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,266aeaf85bf5cf784460751eec88389423a3f025,graph area maximised. fixes #146
73,https://api.github.com/repos/mozilla/lightbeam-we/pulls/164,164,Increase graph area,"![Image](http://g.recordit.co/QW8pHEbj9p.gif)

",princiya,8022693,2017-08-22T11:43:52Z,COLLABORATOR,True,24,11,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5e0d7844fac93a7c13d56865893404cf5285d4e4,footer set to display none
74,https://api.github.com/repos/mozilla/lightbeam-we/pulls/164,164,Increase graph area,"![Image](http://g.recordit.co/QW8pHEbj9p.gif)

",princiya,8022693,2017-08-22T11:43:52Z,COLLABORATOR,True,24,11,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b0233326b0590feb8a1a2580bbae4c872d7ed907,cleanup
75,https://api.github.com/repos/mozilla/lightbeam-we/pulls/164,164,Increase graph area,"![Image](http://g.recordit.co/QW8pHEbj9p.gif)

",princiya,8022693,2017-08-22T11:43:52Z,COLLABORATOR,True,24,11,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,255beba1afac5b0e76aeaa6b0e499561e8c7315d,overflow hidden set
76,https://api.github.com/repos/mozilla/lightbeam-we/pulls/160,160,Restructure lightbeam.js similar to other scripts,"@jonathanKingston Good idea to make this a separate PR to the dynamic variables...

Basically I just made the `lightbeam.js` script of the same form as `capture.js`, `store.js`, etc., where `lightbeam` is a global object with methods. I have not modified any methods, just moved things around and renamed the anonymous function that passed an update callback to `storeChild` as `redraw`.",biancadanforth,17437436,2017-08-21T21:45:19Z,COLLABORATOR,True,147,140,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fad35535cbd15c639efdf63f84851e70cc37f539,"Restructure lightbeam.js similar to other scripts

Basically I just made the lightbeam.js script of the same form as capture.js, store.js, etc., where 'lightbeam' is a global object with methods. I have not modified any methods, just moved things around and renamed the anonymous function that passed an update callback to 'storeChild' as 'redraw'."
77,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a14b7ee17007973a1b00706322846d45cf943095,positions updated for new nodes
78,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dbc6db8d7ef6d7a11d000161808b54a7820bb25d,minor change
79,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fbfb6c796d37825b3faa02162a498459d23fe7bd,descriptive vars
80,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,11f4b4bdc13491f448f4a686b1bbac3b2076833b,tick count increased
81,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,784e201b98a665d456f52668e57a0c1220e3e99c,endevent removed
82,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a95c644be523c89e4f38e134213f1420d4161812,minor change
83,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c3d175d05ee89fd7ccc96d022f54283514d07f85,minor change
84,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4920f49b220c0d3925d64bba1ca423c79f9ba67b,forces improved
85,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c89d22c510ea8a7ccf1930ec1337bd6438468337,forces improved. code cleanup
86,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f88f5d0e6571da9ab1f8482a7ea1e76b95e137ef,code cleanup
87,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dbf0f2f30e212b82b134da4f48a6a4fd7fce048e,refactoring
88,https://api.github.com/repos/mozilla/lightbeam-we/pulls/158,158,Improve graph forces,"![Screenshot](http://g.recordit.co/tkzq7o7XCn.gif)

Here is the summary of this PR:

```
simulateForce() {
    let simulation;

    if (!this.simulation) {
      simulation = d3.forceSimulation(this.nodes);
      this.registerSimulationForces(simulation);
    } else {
      simulation = this.simulation;
      simulation.nodes(this.nodes);
    }
    this.registerLinkForce(simulation);
    this.manualTick(simulation);
    return simulation;
  }
```
- On page load, simulation is initialised and the necessary forces are registered.
- For every draw (i.e. when new nodes/links are added), the `linkForce` is re-initialised.
- Because of the dynamic nature of the graph, manual tick is used.
   - When there are too many nodes, the graph constantly tries to to map to the registered forces (in our case, for collisions and to centre the graph) and sometimes ends up in an infinite (long) animated loop.
  - Also, when there are lot of nodes, it takes a while for the simulation to stabilise and favicons aren't loaded until the simulation has reached equilibrium.
- In terms of the whole graph updating when new nodes are added, it is to make sure there are no collisions and the graph is always centred.

---

```
manualTick(simulation) {
    simulation.alphaTarget(0.1);
    for (let i = 0; i < this.tickCount; i++) {
      simulation.tick();
    }
    simulation.alphaTarget(0);
    simulation.stop();
  }
```

The soft animation seen on the graph is because of the simulation and it can be controlled with the value of `alphaTarget`. At each tick, it is ensured to meet the conditions of the above registered forces. This is why, the graph constantly rotates/repels/attracts/non-collides based on the forces registered.

---

```
registerSimulationForces(simulation) {
    const centerForce = d3.forceCenter(this.width/2, this.height/2);
    simulation.force('center', centerForce);

    const forceX = d3.forceX(this.width/2);
    simulation.force('x', forceX);

    const forceY = d3.forceY(this.height/2);
    simulation.force('y', forceY);

    const chargeForce = d3.forceManyBody();
    simulation.force('charge', chargeForce);

    const collisionForce = d3.forceCollide(this.collisionRadius);
    simulation.force('collide', collisionForce);
  }
```
This is one time initialisation, during the page load and the simulation ensures these conditions are met for every tick. The graph alters only when it detects collision or to centre the graph etc. based on the above values set.

`centerForce` is used to centre the graph w.r.to the display area.

`forceX` and `forceY` ensure newly added nodes are w.r.to the centre of the graph.
This is an enhancement in this PR, earlier the newly added nodes started at `<0,0>`.

`collisionForce` ensures there is no collision between nodes. Try to drag a node towards another node, and because of this `collisionForce` the graph tries to redraw itself to ensure there is no collision.

---




",princiya,8022693,2017-08-21T12:48:37Z,COLLABORATOR,True,68,34,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,711e60bb19a9e8824fcea8c6f79b940ddda79063,nodes move after dragged
89,https://api.github.com/repos/mozilla/lightbeam-we/pulls/157,157,First parties as fp,,jonathanKingston,338988,2017-08-21T12:39:46Z,CONTRIBUTOR,True,8,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,eef1c862ba9cb5f9a3c2d6b3653347ec06d5c12b,Fix legacy Firefox versions and missing graph nodes not connected to their first parties. Fixes #150 Fixes #151
90,https://api.github.com/repos/mozilla/lightbeam-we/pulls/157,157,First parties as fp,,jonathanKingston,338988,2017-08-21T12:39:46Z,CONTRIBUTOR,True,8,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,870a2d057a8ca7538fd88d3a48d2bec77a6f303c,Check first party isn't about to become a reference to itself. Fixes #156
91,https://api.github.com/repos/mozilla/lightbeam-we/pulls/157,157,First parties as fp,,jonathanKingston,338988,2017-08-21T12:39:46Z,CONTRIBUTOR,True,8,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,66b9aa42b96c8831671cda55c73a5df40cc66ff0,Merge branch 'master' into first-parties-as-fp
92,https://api.github.com/repos/mozilla/lightbeam-we/pulls/155,155,Fix legacy Firefox versions and missing graph nodes not connected to …,…their first parties. Fixes #150 Fixes #151,jonathanKingston,338988,2017-08-21T12:17:57Z,CONTRIBUTOR,True,17,9,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,eef1c862ba9cb5f9a3c2d6b3653347ec06d5c12b,Fix legacy Firefox versions and missing graph nodes not connected to their first parties. Fixes #150 Fixes #151
93,https://api.github.com/repos/mozilla/lightbeam-we/pulls/144,144,Download json data,"![download](http://g.recordit.co/LKWtp49wUI.gif)

PS: Reload the web extension before testing it out!",princiya,8022693,2017-08-16T09:31:51Z,COLLABORATOR,True,30,6,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0d5c836cd136a2b5ad26888785f4c0cba6d30152,download json data
94,https://api.github.com/repos/mozilla/lightbeam-we/pulls/139,139,Hide unimplemented UI elements.,"Added the `.unimplemented` class to unimplemented UI elements.

This PR is related to Issue #129 , where we discuss removing unimplemented features until they are ready.

I also removed the 'Uninstall Lightbeam' link.",biancadanforth,17437436,2017-08-15T00:29:44Z,COLLABORATOR,True,13,8,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,67eb15cd038084bffb0272b211995fc3915b3b75,"Hide unimplemented UI elements.

Most of these are just `visibility: hidden`, while the unimplemented buttons are `display: none`. As these features get implemented, we can remove the `.unimplemented` class and styles."
95,https://api.github.com/repos/mozilla/lightbeam-we/pulls/138,138,Initial COC and Contributing docs. Fixes #127.,@jonathanKingston This PR is mostly waiting for a Discourse discussion link; once we have that we could probably also quickly close #140 . ,biancadanforth,17437436,2017-08-14T19:43:45Z,COLLABORATOR,True,50,10,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c0cdade01535a9f8afa7f23a9aa9dbbca076ad25,"Initial COC and Contributing docs. Fixes #127.

Added lightbeam-feedback@mozilla.org as contact information to CONTRIBUTING.md.

Also updated all instances of our Electrolyfish repo URL in the docs to Mozilla.

Also snuck in an eslint rule for spaces between operators so we don't see `var x=4`."
96,https://api.github.com/repos/mozilla/lightbeam-we/pulls/137,137,Replace 'whitelist' with 'allowlist'. Fixes #125.,"Thank goodness for Find and Replace!

@groovecoder I found an instance of the word 'whitelist' in the `shavar-prod-lists` [repo](https://github.com/mozilla-services/shavar-prod-lists) as well, in the README.md; just in case you were interested in changing this as well.",biancadanforth,17437436,2017-08-11T20:58:28Z,COLLABORATOR,True,35,35,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e4f875f992f886b2782613691505860b28f9f5c2,Replace 'whitelist' with 'allowlist'. Fixes #125.
97,https://api.github.com/repos/mozilla/lightbeam-we/pulls/135,135,Don't capture private browsing data. Fixes #111.,Using the `tab.incognito` key to check for private browsing in `capture.shouldStore` method.,biancadanforth,17437436,2017-08-10T21:21:31Z,COLLABORATOR,True,3,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,1b1aa626c2c26fcf2806fb7233edc1925e330902,Don't capture private browsing data. Fixes #111.
98,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3abd8f904f480a91989d8f97433586a3f4efb3c1,draw favicons. fixes #126
99,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,488d51fb2b589bdc5828bb125b43d774eb717169,shadow effect. fixes #122
100,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6483a9250070add21f52a9dcb50c5b0cd4010d92,tooltip styles. fixes #114
101,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8ad54f85ee5eb0b160ee40d94c8b36091f36444b,tooltip updates
102,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,eb08d6d181c5fcc2f69b1778e35fa734e76bf39a,tooltips position
103,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0d8225a47d05f9d51d6de33f23be313ae3781c4d,tooltips position
104,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a668918ed31fbfed0033c486a80fc5b95a7aa536,tooltip position math improved
105,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b5f2e06521b5d73a694d215a33b11357673349b4,minor
106,https://api.github.com/repos/mozilla/lightbeam-we/pulls/134,134,Updates,"In this PR:

![Shadow](http://g.recordit.co/fZrNTKCLEo.gif)

![Updates](http://g.recordit.co/1b7DwLqvs1.gif)

- [x]  Favicons #126 
- [x] Shadow highlight the dragged node #122 
- [x] Tooltip styles #114 
- [x] Tooltip position improvements #114 ",princiya,8022693,2017-08-10T20:35:50Z,COLLABORATOR,True,101,20,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,33ebe56f7393ae58f6aa9c73ef3d902fe6d50ef3,from feedback
107,https://api.github.com/repos/mozilla/lightbeam-we/pulls/133,133,added download button,"I created the MOST important feature. Its perfect, you should definitely merge this.",pauljt,1396160,2017-08-09T22:41:29Z,CONTRIBUTOR,False,19,5,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bb778e76b5e94126d458acde54115abbdf9b6389,added download button
108,https://api.github.com/repos/mozilla/lightbeam-we/pulls/133,133,added download button,"I created the MOST important feature. Its perfect, you should definitely merge this.",pauljt,1396160,2017-08-09T22:41:29Z,CONTRIBUTOR,False,19,5,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,639bf99e96a222d990609bffda86e21cf086f22f,"converted to await, bug with target=_blank in web extensions :/"
109,https://api.github.com/repos/mozilla/lightbeam-we/pulls/121,121,Third parties triangles,,jonathanKingston,338988,2017-08-08T12:36:08Z,CONTRIBUTOR,True,19,6,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d538fecc3e81ba378a7e8c1492298cbb1fb94207,"Draw third parties as triangles

Also changed the colors to white just to match the legacy UI"
110,https://api.github.com/repos/mozilla/lightbeam-we/pulls/121,121,Third parties triangles,,jonathanKingston,338988,2017-08-08T12:36:08Z,CONTRIBUTOR,True,19,6,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fdeca38980198e51f5a93dd5383646c5e3dddf82,Moving drawing node code to their own methods.
111,https://api.github.com/repos/mozilla/lightbeam-we/pulls/118,118,Draw third parties as triangles,"Updated the visualization to draw third parties as triangles. Also changed the colors to white. Both of these changes are to match the legacy UI.

I wanted to do this mostly for the sake of my intern presentation so that I could use screenshots from our version to compare and match with those of the legacy UI. If we're not ready to make this change (or don't want it), fine with me. :)",biancadanforth,17437436,2017-08-07T17:48:10Z,COLLABORATOR,False,9,3,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d538fecc3e81ba378a7e8c1492298cbb1fb94207,"Draw third parties as triangles

Also changed the colors to white just to match the legacy UI"
112,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,020e5d74c56edef71bbd0b50c8edcc7311d7dbd6,basic drag. fixes #78
113,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f58fa100c5c36f0b79673632f6222d4a1afa022d,d3 zoom added
114,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ed956c8bda628b392962ef4570cfa2f0f2c5284e,zoom improved. fixes #77
115,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,82e955b97956c67cdfeb817bb3f860e43718c649,"drag, zoom, pan"
116,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3c6d6564879a4eccc2f015c16a2295700fecc574,code improvements
117,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e9cb41c8575b4eb5768eb53956a26428634ed8bf,tooltips improved
118,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,da24d68bb830dacdb432a91f3aa9cc1c621429aa,drag improved
119,https://api.github.com/repos/mozilla/lightbeam-we/pulls/116,116,"D3 drag, zoom and pan","

**In this PR**

- [x] Combine drag/zoom/pan

- [x] Improve tooltip positions during, drag/zoom/pan

- [x] Improve node position during drag `getNodeAtCoordinates(x, y)`

- [x] Limit the zoom factor

- [x] Check for retina display during drag/zoom/pan",princiya,8022693,2017-08-03T17:30:17Z,COLLABORATOR,True,56,4,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,34c7376a960816a9f07d96b130f34428c04295fb,minor change
120,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,1bc729a8c4dd615bff75d58c8ff87d6fe431bd68,"Initial swap of localStorage for IndexedDB via Dexie. Fixes #13.

Still using a `this._websites` local copy. Literally just swapped out localStorage for IndexedDB. I had originally tried getting rid of `this._websites`, but this made almost every method async, and there were numerous update errors in `store.addFirstPartyLink`."
121,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,35ecc64ace56c3b47c1ba681871f72c49a23aee1,"Partial fixes per PR feedback

Add `firstParty` boolean to `data` object passed in from `capture.js`. Replaced `if` statement with a Dexie `filter` method in `store.getAll`. Made `store.setThirdParty` async to wait for `store.addFirstPartyLink` to update and write new first party links before the next third party request is handled. Still need to remove  the `this._websites` cached version of storage data."
122,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a77bc0d3d6b30dd82bb7a06f19810a287586dec4,"Make storage async.

Update store.addFirstPartyLinks
Reordered scripts in manifest.json to avoid race conditions
Add event queue in capture to process requests in order
Make reading/writing to storage async
Remove local clone of storage 'this._websites'"
123,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,94ca0d6c65a5991d704b233139ba7721ee8fafd9,"PR fixes per feedback

Now that we are queue-ing incoming HTTP requests/page loads to process in order and awaiting the return of `sendThirdParty` and `sendFirstParty`, there were a number of bugs in `sendThirdParty` that were previously silently failing that have been fixed!
* `browser.tabs.get(tabId)` throws an error (and exits the script) if the tabId is -1
* The `response` object from `webRequest.onResponseStarted` can have a `originUrl` key with a value of `undefined`."
124,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dd507303e64b9865160f3a1a798c4e16f9523966,"Capture third party requests from non-visible tabs.

Service Workers can make third party requests, for example, and these requests have a tabId = -1. We no longer ignore these kinds of requests. There may be other less obvious third party requests that we miss; there is a follow up issue, #142, to address this."
125,https://api.github.com/repos/mozilla/lightbeam-we/pulls/115,115,Initial swap of localStorage for IndexedDB via Dexie,WIP; Fixes #13  when complete.,biancadanforth,17437436,2017-08-03T17:15:05Z,COLLABORATOR,True,160,87,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,db0f1e08f0e0905955890d2a518cabb4f4542250,Reverse logic on store.isNewWebsite
126,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,391c32c132b18bc643e1a303359e5f0e560765b4,styles fixed. fixes #107
127,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ba4821dd27ca7a73040dfca852699eecba703613,dpi fix. fixes #107
128,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,275055337717aa3000babe6a4e06abc4e0a825ba,css
129,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,868d3d6cc8c538ad2893b5a43df45966e29dd905,css
130,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6353295465f7e2e89a95bda0ba907bc867573381,d3 to dom
131,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8a9304c62f6163ea5d66372d9979dff31d3cab48,min-width removed
132,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b44cb9efbf7bf41cb8a9e680c441cb4412d03d3b,css height
133,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c67dda3c680d8a58626bb5985aa1cd442f57305f,styles updated
134,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b36b45ad354e69ab7ced032715246a8d3a34f0dc,styles
135,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4c6b3767da9fcaa9fce0ec12aea6d8af60d324f1,resize event added. fixes #113
136,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0fd6df3e4843655ad35e63d7d4970ed8da1bb02d,dynamic graph resize
137,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,836681a2ac51970148aade6f82fd459174f26a57,footer and header made responsive
138,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3dc115dd1f32233aba63c966ae00c89fa9af3fae,minor fixes
139,https://api.github.com/repos/mozilla/lightbeam-we/pulls/112,112,Canvas DPI and UI responsiveness,"Issue #107 

**Before:**

![screen shot 2017-07-27 at 11 47 45](https://user-images.githubusercontent.com/8022693/28664680-84b00bac-72c1-11e7-992e-426eead7a263.png)

**After:**

![screen shot 2017-07-27 at 11 47 23](https://user-images.githubusercontent.com/8022693/28664706-9b5f040c-72c1-11e7-87c4-b7371f798dbd.png)

**To test Lightbeam on retina display:** [Link](https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display)

![screen shot 2017-07-27 at 11 52 32](https://user-images.githubusercontent.com/8022693/28664882-256bd15c-72c2-11e7-8c77-39f9e434919f.png)

![screen shot 2017-07-27 at 11 53 08](https://user-images.githubusercontent.com/8022693/28664898-335b6674-72c2-11e7-9182-c28dd98e740a.png)



",princiya,8022693,2017-07-27T09:53:59Z,COLLABORATOR,True,197,138,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,cd70198973961705909cd4da03e1194d9f98e25d,minor
140,https://api.github.com/repos/mozilla/lightbeam-we/pulls/109,109,Override whitelist for special case. Fixes #100.,"Add Doc Block for `store.setThirdParty` method and `lightbeam.js` `transformData` function
Move whitelist logic from `capture.js` to `store.js`
Add override logic inside `store.setThirdParty` with `isIgnored` boolean

Also, I used these two websites for my test cases: tylersavin.com and gravatar.com. Both link to `s.gravatar.com`, which is owned by gravatar.com

@jonathanKingston Still needs some refactoring in `store.setThirdParty` to breakout the whitelist code there. Working on that next. Any advice welcome.",biancadanforth,17437436,2017-07-20T18:49:30Z,COLLABORATOR,True,307,149,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,400e09b0e7f57e4b270e26f9a2b276f86af6b59b,"Override whitelist for special case. Fixes #100.

Add Doc Block for store.setThirdParty method and lightbeam.js transformData function
Move whitelist logic from capture.js to store.js
Add override logic inside store.setThirdParty with isIgnored boolean"
141,https://api.github.com/repos/mozilla/lightbeam-we/pulls/109,109,Override whitelist for special case. Fixes #100.,"Add Doc Block for `store.setThirdParty` method and `lightbeam.js` `transformData` function
Move whitelist logic from `capture.js` to `store.js`
Add override logic inside `store.setThirdParty` with `isIgnored` boolean

Also, I used these two websites for my test cases: tylersavin.com and gravatar.com. Both link to `s.gravatar.com`, which is owned by gravatar.com

@jonathanKingston Still needs some refactoring in `store.setThirdParty` to breakout the whitelist code there. Working on that next. Any advice welcome.",biancadanforth,17437436,2017-07-20T18:49:30Z,COLLABORATOR,True,307,149,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a9fee22d02a22e32076518c0c6dda8622185c30e,"Updates per PR feedback

* Breakout whitelist code in store.init method into its own store.getWhiteList method
* Change 'isIgnored' boolean key to 'isVisible' for clarity
* Ensure 'getAll' only returns websites that are visible
* Remove onWhiteList and whiteListOverride booleans from store.setThirdParty
* Move whitelist logic from store.setThirdParty into its own store.whiteListCheck method
* Make new method `isNewWebsite` (take this check out of `setWebsite`)
* Move update logic from `setWebsite` to `setThirdParty` and `setFirstParty`
* Call `setFirstParty` from inside `setThirdParty` so that the first party is always initialized first, even if `setThirdParty` is called first from data capture."
142,https://api.github.com/repos/mozilla/lightbeam-we/pulls/109,109,Override whitelist for special case. Fixes #100.,"Add Doc Block for `store.setThirdParty` method and `lightbeam.js` `transformData` function
Move whitelist logic from `capture.js` to `store.js`
Add override logic inside `store.setThirdParty` with `isIgnored` boolean

Also, I used these two websites for my test cases: tylersavin.com and gravatar.com. Both link to `s.gravatar.com`, which is owned by gravatar.com

@jonathanKingston Still needs some refactoring in `store.setThirdParty` to breakout the whitelist code there. Working on that next. Any advice welcome.",biancadanforth,17437436,2017-07-20T18:49:30Z,COLLABORATOR,True,307,149,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7e8c2f6bd83ae1d00b4322e4714c9e4a3663f64e,refactor setThirdParty
143,https://api.github.com/repos/mozilla/lightbeam-we/pulls/109,109,Override whitelist for special case. Fixes #100.,"Add Doc Block for `store.setThirdParty` method and `lightbeam.js` `transformData` function
Move whitelist logic from `capture.js` to `store.js`
Add override logic inside `store.setThirdParty` with `isIgnored` boolean

Also, I used these two websites for my test cases: tylersavin.com and gravatar.com. Both link to `s.gravatar.com`, which is owned by gravatar.com

@jonathanKingston Still needs some refactoring in `store.setThirdParty` to breakout the whitelist code there. Working on that next. Any advice welcome.",biancadanforth,17437436,2017-07-20T18:49:30Z,COLLABORATOR,True,307,149,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,446d102e5f5489eea17c7dbd45d28cf57cc9b033,More PR fixes
144,https://api.github.com/repos/mozilla/lightbeam-we/pulls/109,109,Override whitelist for special case. Fixes #100.,"Add Doc Block for `store.setThirdParty` method and `lightbeam.js` `transformData` function
Move whitelist logic from `capture.js` to `store.js`
Add override logic inside `store.setThirdParty` with `isIgnored` boolean

Also, I used these two websites for my test cases: tylersavin.com and gravatar.com. Both link to `s.gravatar.com`, which is owned by gravatar.com

@jonathanKingston Still needs some refactoring in `store.setThirdParty` to breakout the whitelist code there. Working on that next. Any advice welcome.",biancadanforth,17437436,2017-07-20T18:49:30Z,COLLABORATOR,True,307,149,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d3a59b0306b10545630dc12290a8213e68fef1d9,Even more PR fixes
145,https://api.github.com/repos/mozilla/lightbeam-we/pulls/108,108,Graph labels on canvas,"Issue: #102 

![Canvas label screenshot](http://g.recordit.co/2Rb41VsNHB.gif)


",princiya,8022693,2017-07-19T14:26:30Z,COLLABORATOR,True,71,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,104cd8da9d9985a9253c16c2bc21abb97e45830e,click on canvas. fixes #102
146,https://api.github.com/repos/mozilla/lightbeam-we/pulls/108,108,Graph labels on canvas,"Issue: #102 

![Canvas label screenshot](http://g.recordit.co/2Rb41VsNHB.gif)


",princiya,8022693,2017-07-19T14:26:30Z,COLLABORATOR,True,71,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f9b3fcc2510030de2db1cd923f323fa429bf1add,tooltip added.
147,https://api.github.com/repos/mozilla/lightbeam-we/pulls/108,108,Graph labels on canvas,"Issue: #102 

![Canvas label screenshot](http://g.recordit.co/2Rb41VsNHB.gif)


",princiya,8022693,2017-07-19T14:26:30Z,COLLABORATOR,True,71,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,138aea55f77450572bab712eb90e38b1ea85c312,updates
148,https://api.github.com/repos/mozilla/lightbeam-we/pulls/108,108,Graph labels on canvas,"Issue: #102 

![Canvas label screenshot](http://g.recordit.co/2Rb41VsNHB.gif)


",princiya,8022693,2017-07-19T14:26:30Z,COLLABORATOR,True,71,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,32c32b6b0c500adef14b8344b415a1fb217547ad,tooltips fixed for page refresh. fixes #102
149,https://api.github.com/repos/mozilla/lightbeam-we/pulls/106,106,Add Disconnect entity list (aka whitelist). Fixes #98.,"This PR includes the following changes:
Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
Update `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
Reformat the object to more easily check if a first and third party pair are whitelisted
Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
Add `.eslintignore` to ignore submodule
**NEW**: Fix `store.setWebsite` method so that it doesn't silently fail when `this._websites` is `null`.",biancadanforth,17437436,2017-07-18T04:10:25Z,COLLABORATOR,True,165,22,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8a1b4ba00cc629f708f8c519cb1f55cf0436e030,"Add Disconnect Entity List (AKA whitelist). Fixes #98.

This PR includes the following changes:
Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
Update `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
Reformat the object to more easily check if a first and third party pair are whitelisted
Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
Add `.eslintignore` to ignore submodule"
150,https://api.github.com/repos/mozilla/lightbeam-we/pulls/106,106,Add Disconnect entity list (aka whitelist). Fixes #98.,"This PR includes the following changes:
Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
Update `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
Reformat the object to more easily check if a first and third party pair are whitelisted
Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
Add `.eslintignore` to ignore submodule
**NEW**: Fix `store.setWebsite` method so that it doesn't silently fail when `this._websites` is `null`.",biancadanforth,17437436,2017-07-18T04:10:25Z,COLLABORATOR,True,165,22,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,82cea92e3625f5b9b60f7215083024aa7a6c6a7c,Fix store.getWebsite method
151,https://api.github.com/repos/mozilla/lightbeam-we/pulls/106,106,Add Disconnect entity list (aka whitelist). Fixes #98.,"This PR includes the following changes:
Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
Update `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
Reformat the object to more easily check if a first and third party pair are whitelisted
Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
Add `.eslintignore` to ignore submodule
**NEW**: Fix `store.setWebsite` method so that it doesn't silently fail when `this._websites` is `null`.",biancadanforth,17437436,2017-07-18T04:10:25Z,COLLABORATOR,True,165,22,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0aba06788ea8f4657a14b4ff1b0efccfe9df2a26,Add error handling for fetching whitelist
152,https://api.github.com/repos/mozilla/lightbeam-we/pulls/104,104,"Revert ""Add Disconnect Entity List (AKA whitelist). Fixes #98.""",Reverts electrolyfish/lightbeam-we#99,jonathanKingston,338988,2017-07-17T18:36:39Z,CONTRIBUTOR,True,17,149,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c1cd0a33b2f86f1d082570d7fd657f6d072bef12,"Revert ""Add Disconnect Entity List (AKA whitelist). Fixes #98.""

This reverts commit a9636c7ee69737f762eeef415bc908e9eaaee519."
153,https://api.github.com/repos/mozilla/lightbeam-we/pulls/103,103,D3 canvas in memory hack,,jonathanKingston,338988,2017-07-17T13:56:23Z,CONTRIBUTOR,False,109,66,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5f530c5bddaf3f0a609b37e7d7a7f430ccba65f2,migration to canvas. fixes #90
154,https://api.github.com/repos/mozilla/lightbeam-we/pulls/103,103,D3 canvas in memory hack,,jonathanKingston,338988,2017-07-17T13:56:23Z,CONTRIBUTOR,False,109,66,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ca78e4e083431d9bb07f0b3a0705ea4924a34523,colors added
155,https://api.github.com/repos/mozilla/lightbeam-we/pulls/103,103,D3 canvas in memory hack,,jonathanKingston,338988,2017-07-17T13:56:23Z,CONTRIBUTOR,False,109,66,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,064e469c05e3d9ffabefba7b4994bec77259f74d,onupdate links are drawn. fixes #90
156,https://api.github.com/repos/mozilla/lightbeam-we/pulls/103,103,D3 canvas in memory hack,,jonathanKingston,338988,2017-07-17T13:56:23Z,CONTRIBUTOR,False,109,66,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7236aae042f284252a0915571d0f704d3ed74500,minor change
157,https://api.github.com/repos/mozilla/lightbeam-we/pulls/103,103,D3 canvas in memory hack,,jonathanKingston,338988,2017-07-17T13:56:23Z,CONTRIBUTOR,False,109,66,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,aadb0823331e253b081461e2ca573b843ed8e548,Hack to demo using in memory objects is possible.
158,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5f530c5bddaf3f0a609b37e7d7a7f430ccba65f2,migration to canvas. fixes #90
159,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ca78e4e083431d9bb07f0b3a0705ea4924a34523,colors added
160,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,064e469c05e3d9ffabefba7b4994bec77259f74d,onupdate links are drawn. fixes #90
161,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7236aae042f284252a0915571d0f704d3ed74500,minor change
162,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6e3d1b8ce735f0d3d94342fc5b0c919e1bba1e24,objects in memory. fixes #90
163,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,aeea216cc36e69dc4e76778708144b45a6bb56c7,force center coordinates added.
164,https://api.github.com/repos/mozilla/lightbeam-we/pulls/101,101,D3 on canvas,"Fixes #90 

Canvas based solution for the visualisations.

PR started by following this blog: https://bocoup.com/blog/d3js-and-canvas
As pointed out in this blog, the idea is to create custom elements which aren't loaded into the DOM, but are in memory (virtual dom) and then repainting the canvas. Doing so, we get to use D3's core algorithms (force layout in our case).

We don't use dummy elements anymore. D3's force layout algorithm is used and nodes, links are painted on the canvas.",princiya,8022693,2017-07-14T20:06:20Z,COLLABORATOR,True,82,94,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d230f894e6c04bf0bd75bbfc573c99f5ea6d4fd0,labels updated
165,https://api.github.com/repos/mozilla/lightbeam-we/pulls/99,99,Add Disconnect Entity List (AKA whitelist). Fixes #98.,"This PR includes the following changes:
* Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
* Updated `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
* Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
* Reformat the object to more easily check if a first and third party pair are whitelisted
* Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
  - @jonathanKingston: I couldn't use `object.hasOwnProperty` to check if the first party was in the whitelist, because the whitelist hostname is a substring of the first party request hostname (ex: ""youtube.com"" when I have ""www.youtube.com"" from the request). Any thoughts on how to improve the performance of this check would be greatly appreciated.
* Add `.eslintignore` to ignore submodule

Youtube.com subgraph before whitelist:
![beforewhitelist](https://user-images.githubusercontent.com/17437436/28131779-d600fa44-66ef-11e7-984b-e0d968ada214.png)
Youtube.com subgraph after whitelist:
![afterwhitelist](https://user-images.githubusercontent.com/17437436/28131801-e4a95bb8-66ef-11e7-9ea4-39da7397ed5b.png)
",biancadanforth,17437436,2017-07-12T17:48:55Z,COLLABORATOR,True,149,17,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8a1b4ba00cc629f708f8c519cb1f55cf0436e030,"Add Disconnect Entity List (AKA whitelist). Fixes #98.

This PR includes the following changes:
Add [Shavar-Prod-Lists](https://github.com/mozilla-services/shavar-prod-lists) repo as a submodule to use their maintained `disconnect-entitylist.json` whitelist. The submodule is located in the `shavar-prod-lists` subfolder in this repo's root directory.
Update `README.md` with new instructions for cloning the repo with the submodule and updating the submodule
Import the `disconnect-entitylist.json` object, parsed, into `capture.js`
Reformat the object to more easily check if a first and third party pair are whitelisted
Update `capture.shouldStore` method to return `false` if the first and third party from a request are on the whitelist
Add `.eslintignore` to ignore submodule"
166,https://api.github.com/repos/mozilla/lightbeam-we/pulls/97,97,D3 updates,"This PR has some updates to `viz.js`
- Tries to solve #94. Although this issue wasn't a bug, graphs are improved in this PR
- thirdParties are blue in color
- hover state for text labels

This PR aimed to solve #76, but as per discussions, we have decided to implement it in #77.",princiya,8022693,2017-07-10T20:45:10Z,COLLABORATOR,True,70,42,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7658c10309130a9c5310716212b3d70ef20b66ab,positions updated. fixes #94
167,https://api.github.com/repos/mozilla/lightbeam-we/pulls/97,97,D3 updates,"This PR has some updates to `viz.js`
- Tries to solve #94. Although this issue wasn't a bug, graphs are improved in this PR
- thirdParties are blue in color
- hover state for text labels

This PR aimed to solve #76, but as per discussions, we have decided to implement it in #77.",princiya,8022693,2017-07-10T20:45:10Z,COLLABORATOR,True,70,42,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bb3e6e7a883c70b57f4ef3dc48a4aa95dcf1f808,misc changes. fixes #94
168,https://api.github.com/repos/mozilla/lightbeam-we/pulls/97,97,D3 updates,"This PR has some updates to `viz.js`
- Tries to solve #94. Although this issue wasn't a bug, graphs are improved in this PR
- thirdParties are blue in color
- hover state for text labels

This PR aimed to solve #76, but as per discussions, we have decided to implement it in #77.",princiya,8022693,2017-07-10T20:45:10Z,COLLABORATOR,True,70,42,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ddf6098405cef0755465e8c40681cec04618d7d2,x y positions reverted
169,https://api.github.com/repos/mozilla/lightbeam-we/pulls/97,97,D3 updates,"This PR has some updates to `viz.js`
- Tries to solve #94. Although this issue wasn't a bug, graphs are improved in this PR
- thirdParties are blue in color
- hover state for text labels

This PR aimed to solve #76, but as per discussions, we have decided to implement it in #77.",princiya,8022693,2017-07-10T20:45:10Z,COLLABORATOR,True,70,42,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,558bc7cc426f0a4ab99c9274eeb527ee30601dc7,function renamed
170,https://api.github.com/repos/mozilla/lightbeam-we/pulls/97,97,D3 updates,"This PR has some updates to `viz.js`
- Tries to solve #94. Although this issue wasn't a bug, graphs are improved in this PR
- thirdParties are blue in color
- hover state for text labels

This PR aimed to solve #76, but as per discussions, we have decided to implement it in #77.",princiya,8022693,2017-07-10T20:45:10Z,COLLABORATOR,True,70,42,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,47193ee2dfefe48578e68482fe33df1ce4df5d5f,hover for text labels
171,https://api.github.com/repos/mozilla/lightbeam-we/pulls/95,95,Refactor storage shape to reduce lookups required for third parties.,You can review it this time @princiya as I haven't had time to check this over much. Also this is your code and I want you to still be aware of it.,jonathanKingston,338988,2017-07-10T10:08:50Z,CONTRIBUTOR,True,49,43,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,4a8ad2536b08ace0797aeb8b7acd3b780c559942,Refactor storage shape to reduce lookups required for third parties.
172,https://api.github.com/repos/mozilla/lightbeam-we/pulls/93,93,Bug fix: Improve graph forces,"Bug: #76 

I have fixed the following bugs:

- the spinning graph
- sub-graphs going out of view
  * Even though the sub-graph goes out of view, when the update is complete the graph is pulled back and displayed in the main display area. The graph out of view still needs to be fixed, but this PR is an improvement to the old code

Before:

![graph-spin](https://user-images.githubusercontent.com/8022693/27933149-9c40dc50-62a0-11e7-99b7-58f57114cba9.gif)

After:

![graph-no-spin](https://user-images.githubusercontent.com/8022693/27933170-a3aca12c-62a0-11e7-9e36-7fb146216b60.gif)

Before:

![graph-out](https://user-images.githubusercontent.com/8022693/27936676-3c5919f8-62b2-11e7-8167-46718d23a4ee.gif)

After:

![graph-in](https://user-images.githubusercontent.com/8022693/27936696-6e81639a-62b2-11e7-942f-28997c79ec67.gif)








",princiya,8022693,2017-07-06T21:14:10Z,COLLABORATOR,True,49,65,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dbc55465c43fac55d971ce4869515012452e4c88,tick event improved. fixes #76
173,https://api.github.com/repos/mozilla/lightbeam-we/pulls/93,93,Bug fix: Improve graph forces,"Bug: #76 

I have fixed the following bugs:

- the spinning graph
- sub-graphs going out of view
  * Even though the sub-graph goes out of view, when the update is complete the graph is pulled back and displayed in the main display area. The graph out of view still needs to be fixed, but this PR is an improvement to the old code

Before:

![graph-spin](https://user-images.githubusercontent.com/8022693/27933149-9c40dc50-62a0-11e7-99b7-58f57114cba9.gif)

After:

![graph-no-spin](https://user-images.githubusercontent.com/8022693/27933170-a3aca12c-62a0-11e7-9e36-7fb146216b60.gif)

Before:

![graph-out](https://user-images.githubusercontent.com/8022693/27936676-3c5919f8-62b2-11e7-8167-46718d23a4ee.gif)

After:

![graph-in](https://user-images.githubusercontent.com/8022693/27936696-6e81639a-62b2-11e7-942f-28997c79ec67.gif)








",princiya,8022693,2017-07-06T21:14:10Z,COLLABORATOR,True,49,65,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,698adcbc2496a4da1e575ade824fd6dd1f65cfc7,misc changes. fixes #76
174,https://api.github.com/repos/mozilla/lightbeam-we/pulls/93,93,Bug fix: Improve graph forces,"Bug: #76 

I have fixed the following bugs:

- the spinning graph
- sub-graphs going out of view
  * Even though the sub-graph goes out of view, when the update is complete the graph is pulled back and displayed in the main display area. The graph out of view still needs to be fixed, but this PR is an improvement to the old code

Before:

![graph-spin](https://user-images.githubusercontent.com/8022693/27933149-9c40dc50-62a0-11e7-99b7-58f57114cba9.gif)

After:

![graph-no-spin](https://user-images.githubusercontent.com/8022693/27933170-a3aca12c-62a0-11e7-9e36-7fb146216b60.gif)

Before:

![graph-out](https://user-images.githubusercontent.com/8022693/27936676-3c5919f8-62b2-11e7-8167-46718d23a4ee.gif)

After:

![graph-in](https://user-images.githubusercontent.com/8022693/27936696-6e81639a-62b2-11e7-942f-28997c79ec67.gif)








",princiya,8022693,2017-07-06T21:14:10Z,COLLABORATOR,True,49,65,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ff0b509f219b625a5d815aa0a68f8f7cb26b9e76,arrow functions added. fixes #76
175,https://api.github.com/repos/mozilla/lightbeam-we/pulls/91,91,text labels added. fixes #81,"Added the d3 text label to aid in debugging.

![screen shot 2017-07-05 at 17 47 46](https://user-images.githubusercontent.com/8022693/27872827-5a98da74-61aa-11e7-929a-a74a3205985d.png)
",princiya,8022693,2017-07-05T15:50:03Z,COLLABORATOR,True,35,0,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,06dd591ec0c1650decaf8a7ccd21f47a8fdd44f1,text labels added. fixes #81
176,https://api.github.com/repos/mozilla/lightbeam-we/pulls/87,87,Fix graph update issue. Fixes #86,,jonathanKingston,338988,2017-07-04T21:46:20Z,CONTRIBUTOR,True,1,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e0c29954a73fce553c4bd608e15d19de121e9def,Fix graph update issue. Fixes #86
177,https://api.github.com/repos/mozilla/lightbeam-we/pulls/85,85,Storage callback for vis,,jonathanKingston,338988,2017-07-04T21:32:51Z,CONTRIBUTOR,True,153,48,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,68a8bbb367e82623ccd25ed79d2860c61b787476,"Storage callback to update visualization. Fixes #75.

WIP. Using `runtime.onMessage` and `runtime.sendMessage` to pass data to `lightbeam.js` when `store.setFirstParty` or `store.setThirdParty` is called. Currently the data is pretty ugly and logs to the console. Need to ensure that each first and third party request only pings the page scripts once per new node/link."
178,https://api.github.com/repos/mozilla/lightbeam-we/pulls/85,85,Storage callback for vis,,jonathanKingston,338988,2017-07-04T21:32:51Z,CONTRIBUTOR,True,153,48,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,97d6464041bcf0b8c251e84965f0860269d555fa,"Cleaning up message passing, adding proxy method for storeChild. Fixes #71. Fixes #83. Fixes #75"
179,https://api.github.com/repos/mozilla/lightbeam-we/pulls/84,84,Storage callback to update visualization. Fixes #75.,WIP. Using `runtime.onMessage` and `runtime.sendMessage` to pass data to `lightbeam.js` when `store.setFirstParty` or `store.setThirdParty` is called. Currently the data is pretty ugly and logs to the console. Need to ensure that each first and third party request only pings the page scripts once per new node/link.,biancadanforth,17437436,2017-07-03T23:15:30Z,COLLABORATOR,False,64,2,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,68a8bbb367e82623ccd25ed79d2860c61b787476,"Storage callback to update visualization. Fixes #75.

WIP. Using `runtime.onMessage` and `runtime.sendMessage` to pass data to `lightbeam.js` when `store.setFirstParty` or `store.setThirdParty` is called. Currently the data is pretty ugly and logs to the console. Need to ensure that each first and third party request only pings the page scripts once per new node/link."
180,https://api.github.com/repos/mozilla/lightbeam-we/pulls/74,74,Fix arguments to storage API,,jonathanKingston,338988,2017-06-26T20:55:40Z,CONTRIBUTOR,True,4,3,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c998417d423a56037fda5797646691fb0e53e733,Fix arguments to storage API
181,https://api.github.com/repos/mozilla/lightbeam-we/pulls/72,72,POC: d3 force layout with dynamic data," Got d3 to update without a re-render in a force-directed graph! Using fake data and setInterval currently.
The good news is that it does calculate the diff for us. We just have to pass in the updated value for nodes and links and preserve order by passing in a function that returns a unique ID for each node as the second argument for the `data()` method.
Also for a fraction of a second, some nodes appear at (0,0) (top left corner of the page) -- not sure if that is preventable but worth looking into as well.
Next step would be to draw with `<canvas>` instead and try using fake data that is even more similar to the form of data we would be passing in (maybe taking two or three snapshots of data and inserting it into this code)..",biancadanforth,17437436,2017-06-23T04:05:47Z,COLLABORATOR,False,128,38,4,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b05dc5855023e16a33983d3e6a425bef23d3a6c5,d3 force layout with dynamic data POC
182,https://api.github.com/repos/mozilla/lightbeam-we/pulls/70,70,Fix for the duplicate store,"Issue: #54 

As specified in the issue, we now have a `storeChild.js` which is the entry point for the `lightbeam.js` to talk to the background script `store.js`. Having this setup ensures there is always one `store` instance.",princiya,8022693,2017-06-22T12:05:25Z,COLLABORATOR,True,36,11,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,78ce21bd2210d0707a748ce7f3787612874b89f3,message passing. fixes #54
183,https://api.github.com/repos/mozilla/lightbeam-we/pulls/70,70,Fix for the duplicate store,"Issue: #54 

As specified in the issue, we now have a `storeChild.js` which is the entry point for the `lightbeam.js` to talk to the background script `store.js`. Having this setup ensures there is always one `store` instance.",princiya,8022693,2017-06-22T12:05:25Z,COLLABORATOR,True,36,11,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b259245dfde1a10583ffae535b08ee23996aa0a6,viz removed from background
184,https://api.github.com/repos/mozilla/lightbeam-we/pulls/70,70,Fix for the duplicate store,"Issue: #54 

As specified in the issue, we now have a `storeChild.js` which is the entry point for the `lightbeam.js` to talk to the background script `store.js`. Having this setup ensures there is always one `store` instance.",princiya,8022693,2017-06-22T12:05:25Z,COLLABORATOR,True,36,11,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2e26bea71631622e32c12198bff34f2551d097e3,bind added
185,https://api.github.com/repos/mozilla/lightbeam-we/pulls/70,70,Fix for the duplicate store,"Issue: #54 

As specified in the issue, we now have a `storeChild.js` which is the entry point for the `lightbeam.js` to talk to the background script `store.js`. Having this setup ensures there is always one `store` instance.",princiya,8022693,2017-06-22T12:05:25Z,COLLABORATOR,True,36,11,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d0e24124aef7186255e40a0b8c14b0309029f712,arrow function used
186,https://api.github.com/repos/mozilla/lightbeam-we/pulls/70,70,Fix for the duplicate store,"Issue: #54 

As specified in the issue, we now have a `storeChild.js` which is the entry point for the `lightbeam.js` to talk to the background script `store.js`. Having this setup ensures there is always one `store` instance.",princiya,8022693,2017-06-22T12:05:25Z,COLLABORATOR,True,36,11,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,382037754df4d54b54a4b4a57437b7c0689db1d7,code cleanup. fixes #54
187,https://api.github.com/repos/mozilla/lightbeam-we/pulls/67,67,Initial d3 visualization,"Updates with real data, but updates on a timer, rather than being notified that something has changed from storage.
@todo:
* Consider using canvas instead of svg elements
* Consider using a callback in storage to update visualization
* Currently the storage data is reformatted with a function transformData; consider alternatives.",biancadanforth,17437436,2017-06-19T19:08:08Z,COLLABORATOR,False,168,40,6,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ae96bcf944f288a57d05e183945b2ce1a92422b1,"Initial D3 visualization

@todo:
* Consider using canvas instead of svg elements
* Consider using a callback in storage to update visualization
* Currently the storage data is reformatted with a function transformData; consider alternatives."
188,https://api.github.com/repos/mozilla/lightbeam-we/pulls/63,63,D3 visualization,Initial D3 visualization draws first and third party requests to the page.,biancadanforth,17437436,2017-06-18T20:30:19Z,COLLABORATOR,False,151,35,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5e8883f61f84635da6f5d46327434887c9f6a2e2,Initial D3 test
189,https://api.github.com/repos/mozilla/lightbeam-we/pulls/63,63,D3 visualization,Initial D3 visualization draws first and third party requests to the page.,biancadanforth,17437436,2017-06-18T20:30:19Z,COLLABORATOR,False,151,35,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,331f6b23395eabf6ffabca8dc54eb7880bb0b4e3,"D3 drawing first and third parties

@todo make third parties white and equilateral triangles
@todo add text labels for each node's hostname
@todo consider using `<canvas>` instead of `<svg>` to draw in UI"
190,https://api.github.com/repos/mozilla/lightbeam-we/pulls/63,63,D3 visualization,Initial D3 visualization draws first and third party requests to the page.,biancadanforth,17437436,2017-06-18T20:30:19Z,COLLABORATOR,False,151,35,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ac13a70960703788a91a7ae1776dece45896a9b6,Add js/lib/* to .eslintignore and .gitignore
191,https://api.github.com/repos/mozilla/lightbeam-we/pulls/63,63,D3 visualization,Initial D3 visualization draws first and third party requests to the page.,biancadanforth,17437436,2017-06-18T20:30:19Z,COLLABORATOR,False,151,35,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e5ec941713ddcbf94a7445d7c49831a030b20e9b,Draw third-party nodes as white triangles
192,https://api.github.com/repos/mozilla/lightbeam-we/pulls/62,62,Remove moz-extension:* paths from capture. Fixes #49.,"Added a helper function called `shouldStore` to filter out unwanted first- and third-party requests, rather than just first-party only.

Also removed a duplicate `js/store.js` in the `manifest.json` file.",biancadanforth,17437436,2017-06-16T21:00:57Z,COLLABORATOR,True,20,8,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3dac143012dbc36b47b25b68c889b7be2e9b644e,Remove moz-extension:* paths from capture. Fixes #49.
193,https://api.github.com/repos/mozilla/lightbeam-we/pulls/61,61,Add structural/layout fixes to top bar. Fixes #56.,"- Changed structure of `.top-bar` to use more semantic elements than `<span>`.
- Tracking protection toggle now uses `<input>` and `<label>` elements. Note: still using `<span>` elements for custom appearance. Added a @todo to couple checkbox to custom `<span>` element.
- Added a `min-width` property to `<main>`, so the `.top-bar` text (or content elsewhere in `<main>`) doesn't break. I plan to make a follow-up issue to make UI responsive.",biancadanforth,17437436,2017-06-16T18:37:36Z,COLLABORATOR,True,47,31,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,962c68ec2b3a5af61e55984be5997cf154628016,"Add structural/layout fixes to top bar. Fixes #56.

- Changed structure of .top-bar to use more semantic elements than <span>.
- Tracking protection toggle now uses <input> and <label> elements. Note: still using <span> elements for custom appearance. Added a @todo to couple checkbox to custom <span> element.
- Added a `min-width` property to <main>, so the top bar text (or content elsewhere in <main>) doesn't break. I plan to make a follow-up issue to make UI responsive."
194,https://api.github.com/repos/mozilla/lightbeam-we/pulls/60,60,Nit follow ups for layout. Fixes #55.,"Comments from Issue #55:
Comment 1: Fixed with a new `info-panel` button class.
Comment 2: `.blocked-sites` and `.watched-sites` both have two SVG icons instead of one (unlike any of the other controls buttons. Yes they can share a selector! Added a `two-icons` button class for that.
I use the width to specify the width of the `::before` pseudoelement. In the case of two icons, that space, originally specified in `button::before` for general icon buttons, needs to be increased from 15px to 30px for this case of two icons (each of width 15px). Alternative ideas on this welcome!
Comment 3: Typo fixed!",biancadanforth,17437436,2017-06-16T16:56:49Z,COLLABORATOR,True,23,27,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8707d64438dd325cebbb30fd984fee43ce5b8467,"Nit follow ups for layout. Fixes #55.

Comments from Issue #55:
Comment 1: Fixed with a new `info-panel` button class.
Comment 2: `.blocked-sites` and `.watched-sites` both have two SVG icons instead of one (unlike any of the other controls buttons. Yes they can share a selector! Added a `two-icons` button class for that.
I use the width to specify the width of the `::before` pseudoelement. In the case of two icons, that space, originally specified in `button::before` for general icon buttons, needs to be increased from 15px to 30px for this case of two icons (each of width 15px). Alternative ideas on this welcome!
Comment 3: Typo fixed!"
195,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a3a9a955dce2ef40068f87be555e3cc5c2e3f70a,setTimeout removed. fixes #48
196,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7ec1a486913d56ecc831ed823e6a37e5fa359ca9,storage set first party fixed. fixes #51
197,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,a19c25d432db8adc7cfd9b02656a07831c83316a,set third party improved
198,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2e20de7af7f3effbaa7b59ed3fe2a59c1b19fbaf,clear storage catered. fixes #50
199,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d05caffaca137b690179943cf8157a2ba4191af6,third parties shown in the vis
200,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,44f7b960bc99d9382393564b0e44210618d6963c,spaces
201,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0ec58fad4ce0f7287d7eb2babddc824844583f32,eslint rule added
202,https://api.github.com/repos/mozilla/lightbeam-we/pulls/57,57,Storage bug fixes,"Fixes the following bugs:

Bug: #48 
Bug: #50  
Bug #51 

In addition to the above bug fixes, third parties are also displayed.
![screen shot 2017-06-16 at 14 48 30](https://user-images.githubusercontent.com/8022693/27227332-61458630-52a3-11e7-8739-8281f635b0ba.png)

",princiya,8022693,2017-06-16T12:52:19Z,COLLABORATOR,True,58,15,5,Web Extension version of the Firefox Lightbeam add-on,JavaScript,30d117469731f2ca38c10de21b010516b18a847c,eslint rules
203,https://api.github.com/repos/mozilla/lightbeam-we/pulls/47,47,Top level grid layout for UI.,Just saving progress thus far. Experimenting with CSS Grid.,biancadanforth,17437436,2017-06-13T21:11:50Z,COLLABORATOR,True,502,2,13,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d5d733d403dba93efed435f9d27777abbdb0e7c7,"Initial UI. Fixes #53.

A clone of the existing Lightbeam UI, made with CSS Grid and Flexbox. Still need to fix multi-svg buttons in graph controls area.

Simplified button classes and class naming more generally (no more BEM).
Removed all uses of absolute positioning in favor of CSS Grid and Flexbox.
Added @todos for future PRs.
Removed anti-pattern classes 'col-X' and 'row-x'.
Used ::before pseudoelement for placing icons before text labels on buttons and links.
Added global variables using CSS custom properties and the :root selector."
204,https://api.github.com/repos/mozilla/lightbeam-we/pulls/46,46,Viz object. fixes #41,"Issue #41 

Very basic setup to integrate capture and store with the viz object.

`lightbeam.js` calls `renderGraph()` by passing into it a `canvas context` and `websites object`.

`draw()` method in viz object takes in a `canvas context` and `websites object` and draws the graph.

**Fancy screenshot** ;)

![screen shot 2017-06-14 at 00 13 36](https://user-images.githubusercontent.com/8022693/27107108-a8aec13a-5096-11e7-8b65-ca84a2c234fa.png)

",princiya,8022693,2017-06-12T16:26:57Z,COLLABORATOR,True,50,8,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3af78b9c0c16beac8392d850df94fa12481dcfc7,"basic setup to integrate capture, store and viz. fixes #41"
205,https://api.github.com/repos/mozilla/lightbeam-we/pulls/46,46,Viz object. fixes #41,"Issue #41 

Very basic setup to integrate capture and store with the viz object.

`lightbeam.js` calls `renderGraph()` by passing into it a `canvas context` and `websites object`.

`draw()` method in viz object takes in a `canvas context` and `websites object` and draws the graph.

**Fancy screenshot** ;)

![screen shot 2017-06-14 at 00 13 36](https://user-images.githubusercontent.com/8022693/27107108-a8aec13a-5096-11e7-8b65-ca84a2c234fa.png)

",princiya,8022693,2017-06-12T16:26:57Z,COLLABORATOR,True,50,8,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,371ba66ed2e10ec0c57730b79486be9412c3ad6c,eslint globals fixed
206,https://api.github.com/repos/mozilla/lightbeam-we/pulls/46,46,Viz object. fixes #41,"Issue #41 

Very basic setup to integrate capture and store with the viz object.

`lightbeam.js` calls `renderGraph()` by passing into it a `canvas context` and `websites object`.

`draw()` method in viz object takes in a `canvas context` and `websites object` and draws the graph.

**Fancy screenshot** ;)

![screen shot 2017-06-14 at 00 13 36](https://user-images.githubusercontent.com/8022693/27107108-a8aec13a-5096-11e7-8b65-ca84a2c234fa.png)

",princiya,8022693,2017-06-12T16:26:57Z,COLLABORATOR,True,50,8,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,555cba5a1299ee031dc6137e8d213bfb49875813,capture.init moved after declaration
207,https://api.github.com/repos/mozilla/lightbeam-we/pulls/46,46,Viz object. fixes #41,"Issue #41 

Very basic setup to integrate capture and store with the viz object.

`lightbeam.js` calls `renderGraph()` by passing into it a `canvas context` and `websites object`.

`draw()` method in viz object takes in a `canvas context` and `websites object` and draws the graph.

**Fancy screenshot** ;)

![screen shot 2017-06-14 at 00 13 36](https://user-images.githubusercontent.com/8022693/27107108-a8aec13a-5096-11e7-8b65-ca84a2c234fa.png)

",princiya,8022693,2017-06-12T16:26:57Z,COLLABORATOR,True,50,8,8,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ded82261910a898ccbb737e7c5d4744a5aa239cb,canvas object created
208,https://api.github.com/repos/mozilla/lightbeam-we/pulls/43,43,Integrate storage API with data capture. Fixes #42.,"Now with calls to storage API instead of `console.log`!
I know I am still overriding some ESLint rules; but I believe they are a consequence of using separate scripts that are bundled. @jonathanKingston: When I tried to use modules (import/export) earlier for the web extension, Firefox didn't recognize the syntax. How can we avoid these manual overrides of ESLint rules?",biancadanforth,17437436,2017-06-11T02:48:36Z,COLLABORATOR,True,21,15,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f3ba4121abe6d6fca5be79842c30b19b76573549,Integrate storage API with data capture. Fixes #42.
209,https://api.github.com/repos/mozilla/lightbeam-we/pulls/43,43,Integrate storage API with data capture. Fixes #42.,"Now with calls to storage API instead of `console.log`!
I know I am still overriding some ESLint rules; but I believe they are a consequence of using separate scripts that are bundled. @jonathanKingston: When I tried to use modules (import/export) earlier for the web extension, Firefox didn't recognize the syntax. How can we avoid these manual overrides of ESLint rules?",biancadanforth,17437436,2017-06-11T02:48:36Z,COLLABORATOR,True,21,15,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,9aaf99d744750f8563e0a8dd9a4685e2c643a4ec,Integrate storage API with data capture. Fixes #42.v2
210,https://api.github.com/repos/mozilla/lightbeam-we/pulls/40,40,Adding travis builds to moz,,jonathanKingston,338988,2017-06-07T11:18:09Z,CONTRIBUTOR,True,1,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0267263324cfdad8f29eb6cb381ce172b72276d9,Merge remote-tracking branch 'upstream/master'
211,https://api.github.com/repos/mozilla/lightbeam-we/pulls/40,40,Adding travis builds to moz,,jonathanKingston,338988,2017-06-07T11:18:09Z,CONTRIBUTOR,True,1,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c1a1b05ebaa355aa56a97a1d424209456cf6bb9f,Adding travis builds
212,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2e7ab4a4fa534b950642b92a47b9ff1e18a68fba,initial set method functions. fixes #18
213,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0c2e21cf76ffdf6c7c0b08e4c59230d743fb10b1,listeners added. fixes #18
214,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dfb5d0087df778e6a68414fd18834e85be99b0a0,misc changes. fixes #18
215,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2bf419ec0b675e3359468e41e757ba4c86b047f0,error handlers added. fixes #18
216,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,66d843f9c869067f67aaf755d09f0ef568cd347f,event handler removed. fixes #18
217,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c2dae19ea9f3dd06efbc0d656d823a59a51a8c2f,names updated. fixes #18
218,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,512c66b2d530cd10f154c7cdf0637330b56754fe,clone function added. fixes #18
219,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,78cdfb45c5d85cb94d950a21aaaa6608acfbe649,set third party improved. fixes #18
220,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c3c970cd087af443feb0cf6f740c723e268fd19a,minor change. fixes #18
221,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,07a6d2bfa444e1de2f2834b52e2368f1ea168e5e,tests added. fixes #18
222,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8cb060939682beffe3f603311cfde1254fbdcbad,_read method removed. fixes #18
223,https://api.github.com/repos/mozilla/lightbeam-we/pulls/39,39,Store set method. Fixes #18,"Work in progress. Description to be updated shortly...

Issue #18 

Structure of the store is discussed here #15 ",princiya,8022693,2017-06-07T10:27:01Z,COLLABORATOR,True,165,83,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,114f828809e0d996ba1e760a0d0cc611efabc896,tests updated. fixes #18
224,https://api.github.com/repos/mozilla/lightbeam-we/pulls/37,37,README. fixes #21,"Issue #21 

Work in Progress :) Everyone is free to edit!",princiya,8022693,2017-06-01T21:27:35Z,COLLABORATOR,True,37,1,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ca704b6e83f6e085d47485f466642db9fdf473f5,readme updated. fixes #21
225,https://api.github.com/repos/mozilla/lightbeam-we/pulls/37,37,README. fixes #21,"Issue #21 

Work in Progress :) Everyone is free to edit!",princiya,8022693,2017-06-01T21:27:35Z,COLLABORATOR,True,37,1,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,509dad7ede255ba01b0894678ceefdb8d87f38c1,bullet indentation updated. fixes #21
226,https://api.github.com/repos/mozilla/lightbeam-we/pulls/36,36,chai assert used. fixes #33,"Issue #33 

As discussed in the above issue, `expect` is replaced with `assert`.",princiya,8022693,2017-06-01T12:22:41Z,COLLABORATOR,True,7,7,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,325484163bdba1bcad33b2432a69d3c4f789e438,chai assert used. fixes #33
227,https://api.github.com/repos/mozilla/lightbeam-we/pulls/35,35,husky added. fixes #34,"Issue #34 

Added precommit and prepush hooks",princiya,8022693,2017-06-01T11:16:28Z,COLLABORATOR,True,4,1,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,25ce1d16e84d889b54a73ed2bb19182079356706,husky added. fixes #34
228,https://api.github.com/repos/mozilla/lightbeam-we/pulls/31,31,Add new ESLint rules. Fixes #29.,,biancadanforth,17437436,2017-05-25T21:18:06Z,COLLABORATOR,True,65,11,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f58f741693540c0d9f233f7b89f02d199721983c,"Add new ESLint rules. Fixes #29.

Also included eslint-plugin-no-unsanitized (https://github.com/mozilla/eslint-plugin-no-unsanitized)."
229,https://api.github.com/repos/mozilla/lightbeam-we/pulls/30,30,Fix third party check. Fixes #26.,I did some restructuring and accidentally dropped the `.hostname` part. 🥇 ,biancadanforth,17437436,2017-05-25T16:10:18Z,COLLABORATOR,True,1,1,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,53fd340f75587ef0a3640c5eb54292d4351f41e5,Fix third party check. Fixes #26.
230,https://api.github.com/repos/mozilla/lightbeam-we/pulls/28,28,Adding travis.yml,,jonathanKingston,338988,2017-05-25T11:30:49Z,CONTRIBUTOR,True,6,0,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c201f6d1a1f35dd6dd4a9ebab3db483fd65f54b3,Adding travis.yml
231,https://api.github.com/repos/mozilla/lightbeam-we/pulls/27,27,Files moved into JS directory,"Related issue: #25 

The JS files are moved into the corresponding JS directory.
ESLint errors fixed: `let` changed to `const`",princiya,8022693,2017-05-25T11:02:34Z,COLLABORATOR,True,32,32,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ea176dd3c0747482387797e8a115338b55d7c2b5,files moved into js dir. fixes #25
232,https://api.github.com/repos/mozilla/lightbeam-we/pulls/27,27,Files moved into JS directory,"Related issue: #25 

The JS files are moved into the corresponding JS directory.
ESLint errors fixed: `let` changed to `const`",princiya,8022693,2017-05-25T11:02:34Z,COLLABORATOR,True,32,32,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d054cdb16a93438af7daaed99c14c9b80d12e331,let changed to const. fixes #25
233,https://api.github.com/repos/mozilla/lightbeam-we/pulls/24,24,Re-focus tab on subsequent icon clicks. Fixes #14.,,biancadanforth,17437436,2017-05-25T03:14:44Z,COLLABORATOR,True,5,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bb333af19da91537965c3d49d70854e6a2e559e7,Re-focus tab on subsequent icon clicks. Fixes #14.
234,https://api.github.com/repos/mozilla/lightbeam-we/pulls/24,24,Re-focus tab on subsequent icon clicks. Fixes #14.,,biancadanforth,17437436,2017-05-25T03:14:44Z,COLLABORATOR,True,5,2,1,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bdecbd027a9a571cebf73df62a81018f83ca1b55,Merge branch 'master' into refocus-lightbeam-tab
235,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,23cce9deca5d5336dab13a757d3d59f7cc25400f,"karma, mocha, chai setup"
236,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,e37dc5d3bd49ff2c5a57198ac5d394640b49c4d7,basic setup works
237,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,6939bc356ad46caa3082425ebf8b69a3e88c59b9,line endings fixed
238,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,8c2bfaf9b7a0216caa0f715f48bb994d39a5aa8b,mock test removed
239,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7e983991207b0b67bb451061e8961d172003c8e7,getAll works with mock store returning promise
240,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,5ed86e34b8a387bd5a6fb8c015c65f40ffb0d8b4,eslint file tab indented to 2 spaces
241,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,428ee7d154e05b59594716bdecc2a8f609f7868b,"all tests pass, code cleanup"
242,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b9d62d18301891aded43225dd15e795a2b13a5c9,tests added
243,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ec86643d3ebcfb83837bd70f9fc57985819cc3e5,misc changes
244,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d6918f89bc14875ec14256fc542c16520e81258e,code cleanup
245,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,71781cf4c646bac46e9ca1a76a86064698c5116b,all tests cleared!
246,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d8d000ba89b4722917692165b4c8c210b3218688,firefox addon added to travis.yml
247,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,f86dcfcdfc3e3cf2eea7a7357ba7f40b10c3027b,capture.init moved back
248,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,7db63444b8409fdf88f06528ad786ba53b152052,eslint rules disabled
249,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,b345db0e8f4b0d4983e259c1ff41505a54490d83,console stmt removed
250,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,3f337feafc07740f5139c5a56f7ab027d361c308,travis trials
251,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dcff981256820b49b3aed5c2da2ccae4da34fb0e,travis trials
252,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,d931a8c6556eb5d7d2564f7a6ef8baa44f95a361,travis trials
253,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,acf9901e07331bf709ef22296e96d4eb75359857,travis trials
254,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,c5ee6a38ced0c196f154073dd612d3c838dd2365,travis trials
255,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,93d728c7d38608ccc010b606009e5294ab3f4255,travis trials
256,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,2832e92b983681826e7a8d31c7a701ba31df4f5f,travis trials
257,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,08ea4af282710e7639706fdece4b8520d89a8f80,travis trials
258,https://api.github.com/repos/mozilla/lightbeam-we/pulls/23,23,Basic test environment setup,"* As pointed out in this issue #19, the goal is to move [non-functional code](https://github.com/electrolyfish/lightbeam-we/blob/master/js/store.js#L62) into a test directory.
* Using this [example](https://github.com/Standard8/example-webextension) as a reference, I have setup a basic test environment which includes - Karma, Mocha and Chai.
* `get` methods from `js/store.js` are now testable.
* The store object is mocked and the corresponding methods are tested.

**To test this PR:**
`npm install`
`npm run test`

**Screenshot**

![test-success-1](https://cloud.githubusercontent.com/assets/8022693/26494904/623be90e-4221-11e7-85bc-df37217897ca.png)
",princiya,8022693,2017-05-24T21:22:59Z,COLLABORATOR,True,201,63,9,Web Extension version of the Firefox Lightbeam add-on,JavaScript,04388277f03fcb7929c2ac623fe5c24b3024872e,travis trials
259,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fb8b5b57c54a1395332641f1646cd1e9aa43d6c0,basic storage class layout. closes #6
260,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,aa84a00075ff2591e23f0d42a7e0f072191fe484,storage object skeleton created. closes #6
261,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ef565679800c33d16ca32e3c06ecd0f00e44966f,storage file moved to js directory. Fixes #6
262,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,007e7880d3fb5c286cfbfb68f1e77d30c614515d,lint errors fixed. fixes #6
263,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,982d3a7ec14d518b5b210f49a68d911a7e3aae93,store get method
264,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,bdb106cf4673d0b550b609cec4738fd26c414a86,debug statements removed
265,https://api.github.com/repos/mozilla/lightbeam-we/pulls/17,17,Store object: get method,"Related issue: #6 
Structure of the store object: #15 

The `get()` method for the store object.",princiya,8022693,2017-05-23T09:29:22Z,COLLABORATOR,True,98,16,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fd07131be4d08ac9adb2414d311cc3debf2c1e95,changes as per comments
266,https://api.github.com/repos/mozilla/lightbeam-we/pulls/16,16,Simplified data capture to storage API. Fixes #7.,Makes data capture agnostic of storage object/method.,biancadanforth,17437436,2017-05-23T03:48:58Z,COLLABORATOR,True,52,2,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,dcf51ddf73b063b3db5c7c4e988ea277bd59d277,"Simplified data capture to storage API. Fixes #7.

Makes data capture agnostic of storage object/method.
Changed 'captureData.js' to 'capture.js'.
Modified structure of 'capture.js' to an object with methods, rather than a wrapper function.
First party requests now only fire on tab update, rather than every request and filter out non-visible and about:* tabs."
267,https://api.github.com/repos/mozilla/lightbeam-we/pulls/12,12,[WIP] The storage object. Fixes #6,"Related issue #6 

Work in progress.

I have created a skeleton for the storage object. Open for discussions.

And yes off-course, need to update my ESLint ;) ",princiya,8022693,2017-05-19T07:40:09Z,COLLABORATOR,False,39,1,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,fb8b5b57c54a1395332641f1646cd1e9aa43d6c0,basic storage class layout. closes #6
268,https://api.github.com/repos/mozilla/lightbeam-we/pulls/12,12,[WIP] The storage object. Fixes #6,"Related issue #6 

Work in progress.

I have created a skeleton for the storage object. Open for discussions.

And yes off-course, need to update my ESLint ;) ",princiya,8022693,2017-05-19T07:40:09Z,COLLABORATOR,False,39,1,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,aa84a00075ff2591e23f0d42a7e0f072191fe484,storage object skeleton created. closes #6
269,https://api.github.com/repos/mozilla/lightbeam-we/pulls/12,12,[WIP] The storage object. Fixes #6,"Related issue #6 

Work in progress.

I have created a skeleton for the storage object. Open for discussions.

And yes off-course, need to update my ESLint ;) ",princiya,8022693,2017-05-19T07:40:09Z,COLLABORATOR,False,39,1,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,ef565679800c33d16ca32e3c06ecd0f00e44966f,storage file moved to js directory. Fixes #6
270,https://api.github.com/repos/mozilla/lightbeam-we/pulls/11,11,Change indent rule to use 2 spaces. Fixes #9,,biancadanforth,17437436,2017-05-18T16:26:39Z,COLLABORATOR,True,18,15,2,Web Extension version of the Firefox Lightbeam add-on,JavaScript,64e8a1e3d38dd5e2bdb1d71600e8780facbc948c,"Update ESLint, indent and trailing spaces. Fixes #9"
271,https://api.github.com/repos/mozilla/lightbeam-we/pulls/10,10,Adding initial ESLint config. Fixes #5,,jonathanKingston,338988,2017-05-17T09:47:50Z,CONTRIBUTOR,True,63,0,3,Web Extension version of the Firefox Lightbeam add-on,JavaScript,76def5e9f69a28d4f5c3dd795293f6258d7cc9d7,Adding initial ESLint config. Fixes #5
272,https://api.github.com/repos/mozilla/lightbeam-we/pulls/8,8,Set up basic web extension,"In response to [Issue #4](https://github.com/pauljt/lightbeam-we/issues/4) 
Note: The `filter()` method is used with `tabs.query()` instead of a match pattern or regular expression to check if Lightbeam is already open. This is because Mozilla match patterns do not support any URLs with schemes other than: ""http"", ""https"", ""file"", ""ftp"", ""app"". This webext has a scheme of ""moz-extension"". It also doesn't support regular expressions in place of match patterns.",biancadanforth,17437436,2017-05-16T21:39:09Z,COLLABORATOR,True,213,0,7,Web Extension version of the Firefox Lightbeam add-on,JavaScript,0b6248044ad1622755d72c0d3a750f960fea4794,"Fix #4

Note: The filter() method is used with tabs.query() instead of a match pattern or regular expression to check if Lightbeam is already open. This is because Mozilla match patterns do not support any URLs with schemes other than: ""http"", ""https"", ""file"", ""ftp"", ""app"". This webext has a scheme of ""moz-extension"". It also doesn't support regular expressions in place of match patterns."
