,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/OpenWPM/pulls/882,882,Moved _issue_command to BrowserManagerHandle,"This piece of code conceptually belongs to the BrowserManagerHandle, so I moved it there.
However I couldn't think of an easy way to remove all references to the TaskManager so for now we still pass the TaskManager as a parameter.",vringar,13276717,2021-04-06T13:59:31Z,COLLABORATOR,False,202,197,2,A web privacy measurement framework,Python,b5eb45206764a4c865d15c7794b5a3aa891ba0b3,Renamed Browser to BrowserManagerHandler
1,https://api.github.com/repos/mozilla/OpenWPM/pulls/882,882,Moved _issue_command to BrowserManagerHandle,"This piece of code conceptually belongs to the BrowserManagerHandle, so I moved it there.
However I couldn't think of an easy way to remove all references to the TaskManager so for now we still pass the TaskManager as a parameter.",vringar,13276717,2021-04-06T13:59:31Z,COLLABORATOR,False,202,197,2,A web privacy measurement framework,Python,0e0ca552d24a375056b73bbf5212629fb008f666,Renamed TaskManager._issue_command to BrowserManagerHandle.execute_command_sequence
2,https://api.github.com/repos/mozilla/OpenWPM/pulls/882,882,Moved _issue_command to BrowserManagerHandle,"This piece of code conceptually belongs to the BrowserManagerHandle, so I moved it there.
However I couldn't think of an easy way to remove all references to the TaskManager so for now we still pass the TaskManager as a parameter.",vringar,13276717,2021-04-06T13:59:31Z,COLLABORATOR,False,202,197,2,A web privacy measurement framework,Python,ba4d4f2ef216df83f0d28fab98ad826f64eb7203,Fixing stuff
3,https://api.github.com/repos/mozilla/OpenWPM/pulls/881,881,Clean up some unused files,"This PR removes some files that don't seem to be used anymore:

1. [`deploy-to-dockerhub.sh`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/scripts/deploy-to-dockerhub.sh) was used on Travis but now we have a Github Actions workflow for this.
2. [`profile.tar.gz`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/profile.tar.gz) was introduced in https://github.com/mozilla/OpenWPM/pull/736 (not really sure why) but is not used by any tests now. Do we have a reason for keeping it around?
3. [`openwpm/commands/utils/file_utils.py`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/openwpm/commands/utils/file_utils.py) was introduced in https://github.com/mozilla/OpenWPM/commit/b6fe171d47b43c55305da1ba4ad9bbb9c7141957 and used in a flash related function that now doesn't exist.",boolean5,5280463,2021-04-06T12:13:14Z,COLLABORATOR,True,2,49,5,A web privacy measurement framework,Python,ab526002f3acaf70d38cb398d6173027f5983575,Remove some unused files
4,https://api.github.com/repos/mozilla/OpenWPM/pulls/881,881,Clean up some unused files,"This PR removes some files that don't seem to be used anymore:

1. [`deploy-to-dockerhub.sh`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/scripts/deploy-to-dockerhub.sh) was used on Travis but now we have a Github Actions workflow for this.
2. [`profile.tar.gz`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/profile.tar.gz) was introduced in https://github.com/mozilla/OpenWPM/pull/736 (not really sure why) but is not used by any tests now. Do we have a reason for keeping it around?
3. [`openwpm/commands/utils/file_utils.py`](https://github.com/mozilla/OpenWPM/blob/8030c2c470015350f510af4e42f1389e1ffe1c1c/openwpm/commands/utils/file_utils.py) was introduced in https://github.com/mozilla/OpenWPM/commit/b6fe171d47b43c55305da1ba4ad9bbb9c7141957 and used in a flash related function that now doesn't exist.",boolean5,5280463,2021-04-06T12:13:14Z,COLLABORATOR,True,2,49,5,A web privacy measurement framework,Python,f5ebce04c0788822b0f9ffeb4bba4650215515bf,Fix minor typos
5,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,9f4268de5b98b9b3c5404c193fced623bc10252d,Intermediate Progress
6,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,182c5ea0091f3f76edd56ba4d780dc89191c37a4,"Adjusted check for debug mode in loggingdb.js

This way the default config in index.js and the check in loggingdb.js
match up"
7,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,9c20c5101c47bf413dd3701a8bcf4519acd3b98d,Merge branch 'debug_in_loggingdb' into remove_python_to_js_string
8,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,a520433bcc76ec3425c9422791f3cb39c1ce19fc,Adjusted WebExtension code to handle JsInstrumentsSettings object
9,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,0b917fe1f1343ec74a85b035530fedff500d0181,Fixed type signature
10,https://api.github.com/repos/mozilla/OpenWPM/pulls/879,879,Remove python to js string,"We now pass along a Dict/JS object for as long as possible, only serialize it to valid JSON and eval at the last reasonable location.
Closes #857 ",vringar,13276717,2021-03-26T14:56:29Z,COLLABORATOR,True,41,92,10,A web privacy measurement framework,Python,d6c12a83684c32a34c1220d7368cd827304d1d3a,Adjusted parameter name
11,https://api.github.com/repos/mozilla/OpenWPM/pulls/878,878,Adjusted check for debug mode in loggingdb.js,"This way the default config in index.js and the check in loggingdb.js
match up",vringar,13276717,2021-03-26T14:16:00Z,COLLABORATOR,True,1,1,1,A web privacy measurement framework,Python,182c5ea0091f3f76edd56ba4d780dc89191c37a4,"Adjusted check for debug mode in loggingdb.js

This way the default config in index.js and the check in loggingdb.js
match up"
12,https://api.github.com/repos/mozilla/OpenWPM/pulls/875,875,Hotfixed GetCommand,"`webdriver.switch_to.alert` unlike most other variants of the `switch_to` API is not a function but a property.
This led to `TypeError:'Alert' object is not callable` when there was actually an `Alert` to switch to.
This PR fixes that behaviour. ",vringar,13276717,2021-03-23T19:11:06Z,COLLABORATOR,True,613,784,4,A web privacy measurement framework,Python,019049a4907f0ebf4b9bad1f2fcd2b9a8356cb12,Hotfixing get_command
13,https://api.github.com/repos/mozilla/OpenWPM/pulls/875,875,Hotfixed GetCommand,"`webdriver.switch_to.alert` unlike most other variants of the `switch_to` API is not a function but a property.
This led to `TypeError:'Alert' object is not callable` when there was actually an `Alert` to switch to.
This PR fixes that behaviour. ",vringar,13276717,2021-03-23T19:11:06Z,COLLABORATOR,True,613,784,4,A web privacy measurement framework,Python,1baf75a286b31073d79343cd0e946d295a0cc9f1,Fixed black error
14,https://api.github.com/repos/mozilla/OpenWPM/pulls/872,872,Quick extension code cleanup,"This removes some commented out code that was left behind from the upgrade.

 I also enable logging speculative connections, as there's no reason for us to skip logging. I suspect they're actually disabled anyway via [these prefs](https://github.com/mozilla/OpenWPM/blob/b6849c71f53185d1202d862ed34ef71d9c8cc860/openwpm/deploy_browsers/configure_firefox.py#L70), but if not they should definitely be logged.",englehardt,3280150,2021-03-18T02:13:36Z,MEMBER,True,5,416,6,A web privacy measurement framework,Python,856d1dabe2d5e867076243d431ab7a7a311a26e1,Remove commented out code; monitor speculative connections
15,https://api.github.com/repos/mozilla/OpenWPM/pulls/871,871,Restoring Docker build,Closes #848,vringar,13276717,2021-03-16T13:35:39Z,COLLABORATOR,True,60,0,1,A web privacy measurement framework,Python,6f52c23ef164f32a6d7c7b4f45c8c5b7e61e81d5,"Copied over official example

see https://github.com/usha-mandya/SimpleWhaleDemo/blob/master/.github/workflows/github_registry.yml"
16,https://api.github.com/repos/mozilla/OpenWPM/pulls/871,871,Restoring Docker build,Closes #848,vringar,13276717,2021-03-16T13:35:39Z,COLLABORATOR,True,60,0,1,A web privacy measurement framework,Python,e94c0fa8aa80e0be477c922bc444c28531c7a51c,Build_and_publish now tags correctly
17,https://api.github.com/repos/mozilla/OpenWPM/pulls/871,871,Restoring Docker build,Closes #848,vringar,13276717,2021-03-16T13:35:39Z,COLLABORATOR,True,60,0,1,A web privacy measurement framework,Python,e0900a3ab0c8121e66c86f3f8ab660cba56f8457,Added ability to force a run via tag
18,https://api.github.com/repos/mozilla/OpenWPM/pulls/871,871,Restoring Docker build,Closes #848,vringar,13276717,2021-03-16T13:35:39Z,COLLABORATOR,True,60,0,1,A web privacy measurement framework,Python,298fd34905ac5b96e4679c6a70f2df0cc9109f3b,force-docker-build tags no longer get tagged as latest
19,https://api.github.com/repos/mozilla/OpenWPM/pulls/871,871,Restoring Docker build,Closes #848,vringar,13276717,2021-03-16T13:35:39Z,COLLABORATOR,True,60,0,1,A web privacy measurement framework,Python,e1ae7e4ea002e45f41473c96810c054eab3c45a7,Addressed review comments
20,https://api.github.com/repos/mozilla/OpenWPM/pulls/866,866,Release preparations,,vringar,13276717,2021-03-12T18:34:08Z,COLLABORATOR,True,608,978,12,A web privacy measurement framework,Python,93a645bda371079a636e22b53bbdb82ed3e25359,Release preparations
21,https://api.github.com/repos/mozilla/OpenWPM/pulls/866,866,Release preparations,,vringar,13276717,2021-03-12T18:34:08Z,COLLABORATOR,True,608,978,12,A web privacy measurement framework,Python,eb002d208fc6af7acbeea0a8e953b94ab72d9267,"Apply suggestions from code review

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
22,https://api.github.com/repos/mozilla/OpenWPM/pulls/866,866,Release preparations,,vringar,13276717,2021-03-12T18:34:08Z,COLLABORATOR,True,608,978,12,A web privacy measurement framework,Python,112d8228c13072a0a9d785a0a202a54eeb77ea5a,Bumped typedoc version number
23,https://api.github.com/repos/mozilla/OpenWPM/pulls/866,866,Release preparations,,vringar,13276717,2021-03-12T18:34:08Z,COLLABORATOR,True,608,978,12,A web privacy measurement framework,Python,bb52d51d757f89b72ff48791cc778e6e175cdae1,Merge remote-tracking branch 'origin/v0.14.0' into v0.14.0
24,https://api.github.com/repos/mozilla/OpenWPM/pulls/865,865,Updated wording for profiles,Closes #790,vringar,13276717,2021-03-11T13:46:21Z,COLLABORATOR,True,11,3,2,A web privacy measurement framework,Python,26ac68280cb2450866e00e5a4836ea81bd6ee77d,Updated wording for profiles
25,https://api.github.com/repos/mozilla/OpenWPM/pulls/865,865,Updated wording for profiles,Closes #790,vringar,13276717,2021-03-11T13:46:21Z,COLLABORATOR,True,11,3,2,A web privacy measurement framework,Python,9dbd3e83d92f00b11bac56c7c14b1a7469ec124e,"Update package.json

Co-authored-by: Georgia Kokkinou <geor5ko@gmail.com>"
26,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,daa6dba4e3c9cd2b5b6ccd4fb1d01b174aef7c7d,"Enable stateful crawling and tests

Reenable stateful crawling and profile tests. Also, update the docs now
that stateful crawling is supported. Currently, stateful crawling is
broken, as geckodriver deletes the browser profile when closing or
crashing before we can archive it."
27,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,51c0849cbd5c23ee42e3c1c21394e6ab4de2003d,"Use custom browser profile

Use a custom profile by setting it as an argument via the Options class,
instead of using the FirefoxProfile class. This way geckodriver does not
delete it when crashing or closing. Also, remove some unused arguments
from the function that configures privacy settings in Firefox. Finally,
remove the code that clears driver.profile before calling driver.quit(),
as driver.profile is always None when using a custom profile."
28,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,7f51e50f4462002987d88c5d92a963526cd63847,"Pass service_args to geckodriver

Fix a bug in PatchedGeckoDriverService that caused geckodriver not to
receive the service_args passed when starting the browser.
PatchedGeckoDriverService is a modified version of Selenium's Service
class and this bug has been fixed in the original version."
29,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,a355dc840d9b28762138fa8c92f9ae02ceb44047,"Create user.js manually in custom profile

Geckodriver has a bug that makes it write the browser preferences we
set, as well as its own default browser preferences, to a user.js file
in the wrong profile directory when using a custom profile:
https://github.com/mozilla/geckodriver/issues/1844. As a temporary
workaround until this issue gets fixed, we create the user.js file
ourselves. In order to do this, we keep a copy of geckodriver's default
preferences in our code.

Closes #423"
30,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,2237822eab3e5890d6575350371833a4f98ab72e,Do not intercept profile location from logs
31,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,403185a38a1547c61f426c0fd78709ea865aea37,"Simplify profile location handling

1. In `deploy_firefox` do not use `driver.capabilities[""moz:profile""]`
to get the profile location. Custom profiles, unlike profiles created
via `FirefoxProfile`, are used in-place, so we already know the
location.

2. In `launch_browser_manager`, `spawned_profile_path` and
`driver_profile_path` point to the same location now that we are using a
custom profile. Replace them with a single `browser_profile_path`
variable.

3. Rename `prof_folder` and `browser_profile_folder` to
`browser_profile_path` for consistency.

4. Improve naming of the temporary Firefox profile."
32,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,d2aff836f440e52703a812ead60ef2f47ab1a222,"Remove unused status string ""Proxy Ready"""
33,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,1d3de72292d861e6f530b692459fd6d302ac5928,Reference our own issue instead of geckodriver's
34,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,f5bacaed84ae624b0a9d602bd4f28770976b8164,"Update manual_test.py

Running manual_test.py resulted in an error because the `xpi()` fixture
was called directly. Apply the fix suggested in
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly
Also, use a custom profile instead of `FirefoxProfile` and update some
docstrings."
35,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,aa1de922c9b69f19d0400bd4f01a09b4aed47acb,Add reminder to update geckodriver prefs
36,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,9ea8e8a051a9894c08c2b9ce7a6ac4233cf2ceb5,Rename temp dir of crashed browser's profile tar
37,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,3f7efc249088c11c32a4740de8a2203b185f0728,Skip test_browser_profile_coverage locally
38,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,1e165133703482c58f40372452ed5edcf06e5d56,"Improve profile dumping logic

Move the core implementation of profile dumping into a `dump_profile`
function, which can be used both internally when closing or restarting a
crashed browser and from the `execute()` method of `DumpProfileCommand`.
Also, make compression the default in `DumpProfileCommand`. Finally, do
not compress the tar archive of the crashed browser's profile when
restarting from a crash. We should avoid the extra compression/
decompression step as this is a short-lived tar file."
39,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,3b4219d0f98049d0689987f84e81f3957a4d8faa,Add some type annotations
40,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,a19b12478be0c3fe96118bc861666c7c3d5043ae,Remove `reset=True` from tests
41,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,c51f9e56bffd12ab57a8930b9afde01c6dfdfd85,Fix minor typos
42,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,9e8298c455f184560598d13ab3abc84673490ee6,"Fix test_browser_profile_coverage

Use the public suffix + 1 instead of the public suffix when comparing
the domains in the crawl database with those in the profile history.
Also, update an incorrectly formed query to the crawl database."
43,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,e536c630cc6da5e5d32cd5a56d10f42e266348d7,Add comment for Marionette port race condition
44,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,06b83596ab35646f0dddea85ae2bea0a6511f06c,Do not copy tar before extracting in load_profile
45,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,49965db164e424f174dd749a87902ad95e10db63,Use local test server in profile tests
46,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,9a21d86e8f283dbf9bd733566e01348ada7681c4,"Simplify PatchedGeckoDriverService class

Make `PatchedGeckoDriverService` class subclass
selenium.webdriver.firefox.service.Service instead of
selenium.webdriver.common.service.Service, so that we only have to keep
track of the changes in the `__init__()` method of the former class."
47,https://api.github.com/repos/mozilla/OpenWPM/pulls/864,864,Restore stateful crawling support,"This PR restores support for stateful crawling by addressing the core issue that broke it, i.e., the fact that geckodriver would delete the browser profile when closing or crashing before we had a chance to archive it. It does so by using a [custom profile](https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html) instead of creating the profile via the `FirefoxProfile` Selenium class. The custom profile is set via the arguments of the `Options` class. 

**Note:**
Geckodriver has a bug that makes it write the browser preferences we set, as well as its own default browser preferences, to a `user.js` file in the wrong profile directory when using a custom profile: https://github.com/mozilla/geckodriver/issues/1844. As a temporary workaround until this issue gets fixed, we create the `user.js` file ourselves. In order to do this, we keep a copy of geckodriver's default preferences in `configure_firefox.py`.


This PR also:
* Fixes a bug in `PatchedGeckoDriverService` class that caused geckodriver not to receive the `service_args` passed when starting the browser.
* Removes the [code that intercepts the location of the browser profile from the geckodriver logs](https://github.com/mozilla/OpenWPM/blob/cb95ecc05fb4618e4275faecbc62b84123ebf1b0/openwpm/deploy_browsers/selenium_firefox.py#L71L74), as we no longer need it.
* Updates `manual_test.py`


Closes https://github.com/mozilla/OpenWPM/issues/423, Closes https://github.com/mozilla/OpenWPM/issues/383, Closes https://github.com/mozilla/OpenWPM/issues/161, Closes https://github.com/mozilla/OpenWPM/issues/253, Closes https://github.com/mozilla/OpenWPM/issues/384, Closes https://github.com/mozilla/OpenWPM/issues/680",boolean5,5280463,2021-03-03T13:02:39Z,COLLABORATOR,True,609,516,16,A web privacy measurement framework,Python,37271ba62d9307df7f9403ff0f2a857813617c85,Remove unnecessary import
48,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,2e17baa15e59e5d49549f1d59f3c1ad868995bd9,Initial progress on Documentation
49,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,c24e03552b0a405f3c88d1a8aa0acbcbcadc34e6,Merge commit '2e17baa' into issue__820
50,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,542b6c5e2486cc1e60f8c2d1b54e2fe2e3b2d992,added sphinx dev-dependency in environment-unpinned-dev.yaml
51,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,54fdec257524d4cd35f01c73c69edbf97e7aa0d9,added .readthedocs.yml file
52,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,85c9df71c137de6d399c15f0114ef6224e199fdf,added nbsphinx in the dev-dependencies
53,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,8d675d2b276bc4bfbf86494434fab975fa5fb743,"added nbsphinx, sphinx in dev-dependencies"
54,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,131a00279633a0c06cf50f846fec2cd2afda8dbd,reset environment.yaml
55,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,b01c37161fbb82bf01b6f6161d9977c2aa20d550,chaged environment.yaml file after running repin.sh
56,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,c40af1a5e4ce20d5b8135a9614fec45153ed0cfe,added sphinx in readthedocs.yaml
57,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,4684b17478959da55cf2783b6e9226848e7b9670,"Command refactoring (#750)

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* Ported SaveScreenshotFullPage #763

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove custom function command and format code

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove duplicate append_command

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* generate new xpi

* Fixing tests

* Fixing tests

* Fixing up more tests

* Removed type annotations

* Fixing tests

* Fixing tests

* Removed command_executor

* Moved Commands to commands

* Fixing imports

* Fixed skipped test

* Removed duplicate append_command

* docs: update adding command in usingOpenWPM

* Forgot to save

* Removed datadir

* Cleaning up imports

* Implemented simple command

* Added documentation to simple_command.py

* Renamed to custom_command.py

* Moved docs around

* Referencing BaseCommand.execute

* Update docs/Using_OpenWPM.md

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>

Co-authored-by: Cyrus <cyruskarsan@gmail.com>
Co-authored-by: cyruskarsan <55566678+cyruskarsan@users.noreply.github.com>
Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
58,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,1a5748d05317d307e6b4fc0529092a9e0502aa92,"Updated webdriver syntax (#841)

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* Ported SaveScreenshotFullPage #763

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove custom function command and format code

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove duplicate append_command

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* generate new xpi

* Fixing tests

* Fixing tests

* Fixing up more tests

* Removed type annotations

* Fixing tests

* Fixing tests

* Removed command_executor

* Moved Commands to commands

* Fixing imports

* Fixed skipped test

* Removed duplicate append_command

* docs: update adding command in usingOpenWPM

* Forgot to save

* Removed datadir

* removed use of depricated methods

* Command refactoring (#750)

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* Ported SaveScreenshotFullPage #763

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove custom function command and format code

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove duplicate append_command

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* generate new xpi

* Fixing tests

* Fixing tests

* Fixing up more tests

* Removed type annotations

* Fixing tests

* Fixing tests

* Removed command_executor

* Moved Commands to commands

* Fixing imports

* Fixed skipped test

* Removed duplicate append_command

* docs: update adding command in usingOpenWPM

* Forgot to save

* Removed datadir

* Cleaning up imports

* Implemented simple command

* Added documentation to simple_command.py

* Renamed to custom_command.py

* Moved docs around

* Referencing BaseCommand.execute

* Update docs/Using_OpenWPM.md

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>

Co-authored-by: Cyrus <cyruskarsan@gmail.com>
Co-authored-by: cyruskarsan <55566678+cyruskarsan@users.noreply.github.com>
Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>

Co-authored-by: Cyrus <cyruskarsan@gmail.com>
Co-authored-by: cyruskarsan <55566678+cyruskarsan@users.noreply.github.com>
Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>
Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
59,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,e88df25bdaeda63feeec935c5c0ec9f00204b73f,"Pyvirtualdisplay update (#844)

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* Ported SaveScreenshotFullPage #763

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove custom function command and format code

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove duplicate append_command

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* generate new xpi

* Fixing tests

* Fixing tests

* Fixing up more tests

* Removed type annotations

* Fixing tests

* Fixing tests

* Removed command_executor

* Moved Commands to commands

* Fixing imports

* Fixed skipped test

* Removed duplicate append_command

* manual test breaking post-#807

* replacing with standard json function for single string

* modifying test to see if stops running for over two hours:

* docs: update adding command in usingOpenWPM

* Forgot to save

* Removed datadir

* Reverting error, updating function to current name

* Attempted fix treats display as object

* changing display; pytest unchanged

* added a test case to ensure xvfb runs

* simplifying test

* manual test breaking post-#807

* replacing with standard json function for single string

* modifying test to see if stops running for over two hours:

* Deleted redundant files and references to default_browser_params.json and default_manager_params.json (#822)

* Deleted redundant files and references to -
default_browser_params.json and default_manager_params.json

* added validate_crawl_configs to docs

* updated the docs on how to instantiate TaskManager

* Updated Using_OpenWPM.md

* Updated Platform-Architecture.md

* Attempted fix treats display as object

* changing display; pytest unchanged

* added a test case to ensure xvfb runs

* simplifying test

* fixing requested issues

* runs; modified test to include exception

* fix import

* Queue not optional; removed

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* updated test to check for lockfile

* Update test/test_xvfb_browser.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* sticky key in the last commit, same change

* Command refactoring (#750)

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* Ported SaveScreenshotFullPage #763

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove custom function command and format code

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* remove duplicate append_command

* Refactored GetCommand, BrowseCommand to have execute method

* Fixed type name format issues in __issue_command

* Fixed everything I broke

* Changed import style so tests can run

* Added BrowseCommad to imports

* Added some more self

* Added logging to explain failing test

* Added one more self

* Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax

* Ported SaveScreenshotFullPage #763

* Ported DumpPageSource and RecursiveDumpPageSource (#767)

* Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict

* Ran isort

* Added append_command

* generate new xpi

* Fixing tests

* Fixing tests

* Fixing up more tests

* Removed type annotations

* Fixing tests

* Fixing tests

* Removed command_executor

* Moved Commands to commands

* Fixing imports

* Fixed skipped test

* Removed duplicate append_command

* docs: update adding command in usingOpenWPM

* Forgot to save

* Removed datadir

* Cleaning up imports

* Implemented simple command

* Added documentation to simple_command.py

* Renamed to custom_command.py

* Moved docs around

* Referencing BaseCommand.execute

* Update docs/Using_OpenWPM.md

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>

Co-authored-by: Cyrus <cyruskarsan@gmail.com>
Co-authored-by: cyruskarsan <55566678+cyruskarsan@users.noreply.github.com>
Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>

* Changed finally condition

* Restoring manual_test.py

Co-authored-by: Cyrus <cyruskarsan@gmail.com>
Co-authored-by: cyruskarsan <55566678+cyruskarsan@users.noreply.github.com>
Co-authored-by: Mollie Bakal <bakalm@umich.edu>
Co-authored-by: MollieBakal <molliebakal@gmail.com>
Co-authored-by: Ankush Dua <61025943+ankushduacodes@users.noreply.github.com>
Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
60,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,99db8de17585b80168e382bcab69789c84b14b6c,Made taskmanager a context manager (#836)
61,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,cdb3be2dac7b94addab0c195c8da833b2d07a446,Added sphinx_autodoc_annotation
62,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,351d5b0152487d48d2249abf934e785f82d47566,Merge branch 'master' into sphinx
63,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,ef86e1338cb921307a745c4dacc059ec811330dd,Merge branch 'master' into sphinx
64,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,e4d797df31862eac9e0d9799f41fa327f225c9f5,Merge branch 'master' into sphinx
65,https://api.github.com/repos/mozilla/OpenWPM/pulls/863,863,Introducing Sphinx,"We have long wanted HTML documentation for OpenWPM.
This is our first attempt at doing so.
This PR closes #834 and closes #820
",vringar,13276717,2021-02-23T12:57:29Z,COLLABORATOR,False,235,72,14,A web privacy measurement framework,Python,6ef0478e90b2f1dc4f24be8ce9729212857f0779,Second steps with sphinx
66,https://api.github.com/repos/mozilla/OpenWPM/pulls/860,860,Now handling all constraint notations in unpinned enviroment.yamls,"@birdsarah mentioned in https://github.com/mozilla/OpenWPM/issues/858#issuecomment-779931118 that we don't pin dependencies specified by `<` or `>`.

This PR fixes that inconsistency and guarantees that the last `not_pip` dependency will get pinned if there are no pip dependencies",vringar,13276717,2021-02-16T18:08:10Z,COLLABORATOR,True,23,20,1,A web privacy measurement framework,Python,fff8ed20f625c0a70193c9f377c0bb1b36aee303,Now handling all constraint notations in unpinned enviroment.yamls
67,https://api.github.com/repos/mozilla/OpenWPM/pulls/860,860,Now handling all constraint notations in unpinned enviroment.yamls,"@birdsarah mentioned in https://github.com/mozilla/OpenWPM/issues/858#issuecomment-779931118 that we don't pin dependencies specified by `<` or `>`.

This PR fixes that inconsistency and guarantees that the last `not_pip` dependency will get pinned if there are no pip dependencies",vringar,13276717,2021-02-16T18:08:10Z,COLLABORATOR,True,23,20,1,A web privacy measurement framework,Python,9c4d861b15689cc82835c6e15ea43c39a5cd0a9d,Addressing review comments
68,https://api.github.com/repos/mozilla/OpenWPM/pulls/860,860,Now handling all constraint notations in unpinned enviroment.yamls,"@birdsarah mentioned in https://github.com/mozilla/OpenWPM/issues/858#issuecomment-779931118 that we don't pin dependencies specified by `<` or `>`.

This PR fixes that inconsistency and guarantees that the last `not_pip` dependency will get pinned if there are no pip dependencies",vringar,13276717,2021-02-16T18:08:10Z,COLLABORATOR,True,23,20,1,A web privacy measurement framework,Python,1db7bc026e846f53bbba5cdd6db107fc11e8739e,Merge branch 'master' into prune_env
69,https://api.github.com/repos/mozilla/OpenWPM/pulls/859,859,Pin python to 3.8.6,,vringar,13276717,2021-02-16T16:41:26Z,COLLABORATOR,True,1719,1841,6,A web privacy measurement framework,Python,500523781832e0d8ac0277bceac91282e0f4f1b4,Update npm
70,https://api.github.com/repos/mozilla/OpenWPM/pulls/859,859,Pin python to 3.8.6,,vringar,13276717,2021-02-16T16:41:26Z,COLLABORATOR,True,1719,1841,6,A web privacy measurement framework,Python,3c462343bb00175099c9f8f5dc764ea785c82274,Repin
71,https://api.github.com/repos/mozilla/OpenWPM/pulls/859,859,Pin python to 3.8.6,,vringar,13276717,2021-02-16T16:41:26Z,COLLABORATOR,True,1719,1841,6,A web privacy measurement framework,Python,5a0e025ec583096d04db67a8bf47b3f321abb43a,Make sure python makes it into pinned environment
72,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,a7fa2e087a5dc32e7c65e5e81ba988e4408ab478,"Set failure_limit default in config.py

Set the default value for failure_limit in config.py instead of setting
it in the TaskManager. Also, accept 0 as a valid value for
failure_limit."
73,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,db4e4c540c8a05a80571f6996e4e3f14e0b63d60,Rename failurecount to failure_count
74,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,9ddf142e0f12d25600cfc01f34a1ca08d3a29084,"Clear failure_count on successful command sequence

Reset failure_count to 0 only at the end of each successfully completed
command sequence. Before it was reset after each successful command.
This would result in failures of subsequent commands that belonged to
different command sequences not triggering a CommandExecutionError
because failure_count was reset upon every InitializeCommand. Also,
update the docs to reflect the current behavior of failure_limit.

Closes #851"
75,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,647fbef4baf5ff117b7afe25ea5151abd7f927e0,Enable test_crash
76,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,5ad618d2a7fbd08d7b98ec31037981c4d715740b,Fix some minor typos
77,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,2d09142c75b394d22a84fa38fd6db2f886b33f43,"Test failure limit behavior

Move `test_crash` out of test_profile.py, as it does not depend on
profile saving support and rename it to `test_failure_limit_exceeded`,
which is more descriptive. Also, add two more tests to cover more
aspects of failure limit behavior."
78,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,48154a1666ca928c61fca2fa915bcd78eba73985,Use local test server in TaskManager tests
79,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,aea19e2df9e9b114c38dcda422970234a6329b1b,"Clarify failure_limit behavior in docs

Mention that the CommandExecutionError gets raised by the next command
sequence after failure_limit has been exceeded."
80,https://api.github.com/repos/mozilla/OpenWPM/pulls/854,854,Fix behavior of failure_limit,"This PR will close #851. 

It does mainly two things:
1. Moves setting the default value of the `failure_limit` config option from the `TaskManager` to `config.py`
2. Corrects the behavior of `failure_limit` by reseting `failure_count` to 0 after every successfully completed command sequence instead of after every successful command. 
",boolean5,5280463,2021-02-08T15:23:43Z,COLLABORATOR,True,81,42,5,A web privacy measurement framework,Python,291c0c2b03b6405469f3ecd0dcaf1f18cab7f839,Add type annotations for failure_limit property
81,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
82,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
83,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
84,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
85,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
86,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
87,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
88,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
89,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
90,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
91,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
92,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
93,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
94,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
95,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
96,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
97,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
98,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
99,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
100,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
101,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
102,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
103,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
104,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
105,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
106,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
107,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
108,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
109,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
110,https://api.github.com/repos/mozilla/OpenWPM/pulls/844,844,Pyvirtualdisplay update,"Reopened #831 as I accidentally closed it before

Co-authored by: Mollie Bakal <bakalm@umich.edu>",vringar,13276717,2021-01-11T18:10:02Z,COLLABORATOR,True,175,99,8,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
111,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
112,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
113,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
114,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
115,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
116,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
117,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
118,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
119,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
120,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
121,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
122,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
123,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
124,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
125,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
126,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
127,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
128,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
129,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
130,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
131,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
132,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
133,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
134,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
135,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
136,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
137,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
138,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
139,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
140,https://api.github.com/repos/mozilla/OpenWPM/pulls/841,841,Updated webdriver syntax,"Based on #833 

Co-authored-by: ankushduacodes <61025943+ankushduacodes@users.noreply.github.com>",vringar,13276717,2021-01-11T11:34:41Z,COLLABORATOR,True,17,17,4,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
141,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
142,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
143,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
144,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
145,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
146,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
147,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
148,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
149,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
150,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
151,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
152,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
153,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
154,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
155,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
156,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
157,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
158,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
159,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
160,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
161,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
162,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
163,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
164,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
165,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
166,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
167,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
168,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
169,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
170,https://api.github.com/repos/mozilla/OpenWPM/pulls/840,840,Remove use of deprecated methods,,vringar,13276717,2021-01-11T11:16:32Z,COLLABORATOR,False,611,669,15,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
171,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,44340bee51366d3a1590af4badf1c80c5e5710a7,First action test
172,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,2aecea432d5a6b57084d2b6e78f977f1b418083c,Fixing paths
173,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,315a2a9d78568fdc25e1a5cfa4830f26b0b2eeef,Adding cache to github actions
174,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,7979bdc4bdb61fde4aa48dbe2da05d1500ba62cd,Added badge
175,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,c0999be2a4cfece30cdb9bef1274d4aa2acaf13d,Debugging
176,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,dea7362ca8e08d36914b80d4a5b3e9d1c0427a87,Trying better caching
177,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,2a21188f6936c699338ef71dfc386504d793d387,More trying
178,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,09114a1f958409072d951e6bf5e083a03ebb59de,More trying
179,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,0e341cd3424999792f4244e0d934ed2bbf27df3d,More trying
180,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,fb3e2fab78881f536f43f5003507f476e3c751bf,More trying
181,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,10e6fe8a06218e8868c8a5a94e8a11981f2c9519,More trying
182,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,b39c5587cec452999fb5e164e1b87cf5839819c8,More trying
183,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,6f9d600a9a77b7c4fe18a736f27c90c0eda605fc,More trying
184,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,05f878bbf2ac75894c12435a1d92b1cffea71929,More trying
185,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,85c126d76e02cfe8b554612b9768ffdbecb5659e,More trying
186,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,57bd6314ab4fcca6212cf58c915919a9d3ab41ee,More trying
187,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,04f19242472ef2bc0dbfddd044cddd075d5a64d6,More trying
188,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,d99e88b50b4ed7262736920518d09ea0d8cb14d1,More trying
189,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,f5b0cb920a82ba5c6cd05b75fc91f6da5cef356f,More trying
190,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,84b926cb4e59582b47f2ab5e26c3a0ad864aa2ff,More trying
191,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,aa13c31a03df0d18fb6b869911998d0fc912d2f7,More trying
192,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,dcb56357bbfd9d968c9aa3e817a4bc1b65957472,More trying
193,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,a273ec365de7a74dd91df6a6f80fb6bec1832b27,More trying
194,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,9fc182717f5422b89070629219372623f52c1151,More trying
195,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,b1117a493d158c227515810cb51d135416cdb458,More trying
196,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,2056c5f68bc5b81d25443020382ba29c417deb70,More trying
197,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,ec97db934249697e834d8b5400976adfade0bd31,More trying
198,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,3f5aa4e728ed7abb988a6aad77a084fa5db13312,Trying tests
199,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,8837cfe59b5e4dfaefae313f66273bc7ab1bb080,Fixing tests
200,https://api.github.com/repos/mozilla/OpenWPM/pulls/838,838,Github Actions for OpenWPM,,vringar,13276717,2021-01-08T16:07:56Z,COLLABORATOR,True,130,78,10,A web privacy measurement framework,Python,418b3c1d5146ab8c86a13b27f6ef7d022962d9d8,Removed travis.yml
201,https://api.github.com/repos/mozilla/OpenWPM/pulls/836,836,Made taskmanager a context manager,Fixes #812 ,jhabarsingh,43932986,2020-12-22T14:10:06Z,CONTRIBUTOR,True,12,0,1,A web privacy measurement framework,Python,87b057071b083e5ad3400f0732d08ad735d90427,Made taskmanager a context manager
202,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,2e17baa15e59e5d49549f1d59f3c1ad868995bd9,Initial progress on Documentation
203,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,c24e03552b0a405f3c88d1a8aa0acbcbcadc34e6,Merge commit '2e17baa' into issue__820
204,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,542b6c5e2486cc1e60f8c2d1b54e2fe2e3b2d992,added sphinx dev-dependency in environment-unpinned-dev.yaml
205,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,54fdec257524d4cd35f01c73c69edbf97e7aa0d9,added .readthedocs.yml file
206,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,85c9df71c137de6d399c15f0114ef6224e199fdf,added nbsphinx in the dev-dependencies
207,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,8d675d2b276bc4bfbf86494434fab975fa5fb743,"added nbsphinx, sphinx in dev-dependencies"
208,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,131a00279633a0c06cf50f846fec2cd2afda8dbd,reset environment.yaml
209,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,b01c37161fbb82bf01b6f6161d9977c2aa20d550,chaged environment.yaml file after running repin.sh
210,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,c40af1a5e4ce20d5b8135a9614fec45153ed0cfe,added sphinx in readthedocs.yaml
211,https://api.github.com/repos/mozilla/OpenWPM/pulls/834,834,Setting up Sphinx and preparing readthedocs.io,"Resolved Issue 820
Fixes #820 ",jhabarsingh,43932986,2020-12-15T13:05:17Z,CONTRIBUTOR,False,112,2,7,A web privacy measurement framework,Python,b51ecd3e9cab8a6153d04002f141abafd002da0c,Merge branch 'master' into issue__820
212,https://api.github.com/repos/mozilla/OpenWPM/pulls/833,833,Removed use of deprecated methods,,ankushduacodes,61025943,2020-12-15T11:33:48Z,CONTRIBUTOR,False,15,15,2,A web privacy measurement framework,Python,4ec9898e1a724e2f67ff1ea2a57b48718ae693d3,removed use of depricated methods
213,https://api.github.com/repos/mozilla/OpenWPM/pulls/832,832,Removing use of deprecated methods,"Removing use of deprecated method `webdriver.switch_to_window(window)` in favor of `webdriver.switch_to.window(window)` to avoid unnecessary warnings
`webdriver.switch_to_window(window)` calls `webdriver.switch_to.window(window)` internally.
Also removed some more methods like above that were deprecated by selenium.

`webdriver.switch_to.<method>` also seems to be the way selenium will be going moving forward as they are added few more new exclusive methods to `SwitchTo` class to be released with selenium4",ankushduacodes,61025943,2020-12-15T08:56:42Z,CONTRIBUTOR,False,15,15,2,A web privacy measurement framework,Python,a61c0f1b2bc60ead06157f8a0071822aedb97889,Removing use of deprecated method switch_to_window()
214,https://api.github.com/repos/mozilla/OpenWPM/pulls/832,832,Removing use of deprecated methods,"Removing use of deprecated method `webdriver.switch_to_window(window)` in favor of `webdriver.switch_to.window(window)` to avoid unnecessary warnings
`webdriver.switch_to_window(window)` calls `webdriver.switch_to.window(window)` internally.
Also removed some more methods like above that were deprecated by selenium.

`webdriver.switch_to.<method>` also seems to be the way selenium will be going moving forward as they are added few more new exclusive methods to `SwitchTo` class to be released with selenium4",ankushduacodes,61025943,2020-12-15T08:56:42Z,CONTRIBUTOR,False,15,15,2,A web privacy measurement framework,Python,444237dc4417c4fd8bc7ae2fb04e6df82c65702b,Removing use of more deprecated method
215,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,25fe8e96fb978c85bb0981057ce996d961b50903,manual test breaking post-#807
216,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,d112642ffd82175b44d985340dcea78bca2e74e8,replacing with standard json function for single string
217,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,79aa5983403640e0d0dd3fa077fc6933d7ba230b,modifying test to see if stops running for over two hours:
218,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,b08dfe17223b5ed30d514abed3e809c62eb4545d,"Reverting error, updating function to current name"
219,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,2d6cfb26f28ffe0895439add2733be7b6bb48fb4,"Deleted redundant files and references to default_browser_params.json and default_manager_params.json (#822)

* Deleted redundant files and references to -
default_browser_params.json and default_manager_params.json

* added validate_crawl_configs to docs

* updated the docs on how to instantiate TaskManager

* Updated Using_OpenWPM.md

* Updated Platform-Architecture.md"
220,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,6bab765aa4cb05b2aafb0e07ae07af6aa5c25bf4,Merge branch 'post-rename-fixes' of https://github.com/MollieBakal/OpenWPM into post-rename-fixes
221,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,e694157b77e73d425437964260451abc4c55628c,Attempted fix treats display as object
222,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,abcd7d1be39589a030b5c5d25a689b3c3bbefad2,changing display; pytest unchanged
223,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,579555289eabca59c3dba0df3f0a31f14e916700,added a test case to ensure xvfb runs
224,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,65d010b4ee6a3a43054a185cb299f903879d0981,simplifying test
225,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,6afb48492d1e1d8c2c8a37f33c581c3b1802e41e,"Merge pull request #2 from mozilla/master

forgot to pull across fork"
226,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,58b0ff8092cfe146d334fd5560b7c7cead452373,"Bump ini in /openwpm/Extension/webext-instrumentation (#828)

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
227,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,2064b9119dee563389e19c887e49c07a976cdcae,"Bump ini from 1.3.5 to 1.3.8 in /openwpm/Extension/firefox (#829)

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
228,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,fc7c7729860ef81a31df803ac7fbdf44195e913f,"Bump ini from 1.3.5 to 1.3.8 (#827)

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
229,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,1255cdb550284f56a127076b3ddb0cd5af3f332a,manual test breaking post-#807
230,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,9832dae3505e3286097908567b74ad49fe292987,replacing with standard json function for single string
231,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,a90269fdbc1c64d0841660baf7cf05cbedb620e1,modifying test to see if stops running for over two hours:
232,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,4d17abfcd62dfd928d725f6e6708d99fa60ddd7c,"Deleted redundant files and references to default_browser_params.json and default_manager_params.json (#822)

* Deleted redundant files and references to -
default_browser_params.json and default_manager_params.json

* added validate_crawl_configs to docs

* updated the docs on how to instantiate TaskManager

* Updated Using_OpenWPM.md

* Updated Platform-Architecture.md"
233,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,62daf2248eb43dde3568769c6eeb06074fe3c8eb,Attempted fix treats display as object
234,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,47578965959cca0a1ed7c45ee2495fda9de2acc0,changing display; pytest unchanged
235,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,774e4d6feec470a8b4af4f071c002eb1b8765eff,added a test case to ensure xvfb runs
236,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,641f1683b63f8b02e9adeccb8a7ede4581b0829d,simplifying test
237,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,bfede3f7d6f7aa69944684c410c97808fa228978,fixing requested issues
238,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,bcb16fbb7f1877f04c3465c078d21e93a53ff287,Merge branch 'post-rename-fixes' of https://github.com/MollieBakal/OpenWPM into post-rename-fixes
239,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,b693700d3348ea7a192ef9729873df553ffea458,runs; modified test to include exception
240,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,ebe318e17ae77f6e17b258062a3d6762c049a669,Merge branch 'master' into post-rename-fixes
241,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,f0bba54bf165a96e14e13c7af96b966310d6e4a4,fix import
242,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,e6223784770b957eda490d09b03c295c215ff846,Merge branch 'post-rename-fixes' of https://github.com/MollieBakal/OpenWPM into post-rename-fixes
243,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,f20e6c3acb3b361aa732db15cb3186c047848f86,"Queue not optional; removed

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
244,https://api.github.com/repos/mozilla/OpenWPM/pulls/831,831,Update pyvirtualdisplay,Closes #694,MollieBakal,22957978,2020-12-14T02:10:35Z,CONTRIBUTOR,False,232,1820,16,A web privacy measurement framework,Python,e15acf8aeba357b0f4af1dbb20d1b42929b8a20d,updated test to check for lockfile
245,https://api.github.com/repos/mozilla/OpenWPM/pulls/829,829,Bump ini from 1.3.5 to 1.3.8 in /openwpm/Extension/firefox,"[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

If you make any changes to it yourself then they will take precedence over the rebase.

---

[//]: # (dependabot-end)

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/ini/commit/a2c5da86604bc2238fe393c5ff083bf23a9910eb""><code>a2c5da8</code></a> 1.3.8</li>
<li><a href=""https://github.com/npm/ini/commit/af5c6bb5dca6f0248c153aa87e25bddfc515ff6e""><code>af5c6bb</code></a> Do not use Object.create(null)</li>
<li><a href=""https://github.com/npm/ini/commit/8b648a1ac49e1b3b7686ea957e0b95e544bc6ec1""><code>8b648a1</code></a> don't test where our devdeps don't even work</li>
<li><a href=""https://github.com/npm/ini/commit/c74c8af35f32b801a7e82a8309eab792a95932f6""><code>c74c8af</code></a> 1.3.7</li>
<li><a href=""https://github.com/npm/ini/commit/024b8b55ac1c980c6225607b007714c54eb501ba""><code>024b8b5</code></a> update deps, add linting</li>
<li><a href=""https://github.com/npm/ini/commit/032fbaf5f0b98fce70c8cc380e0d05177a9c9073""><code>032fbaf</code></a> Use Object.create(null) to avoid default object property hazards</li>
<li><a href=""https://github.com/npm/ini/commit/2da90391ef70db41d10f013e3a87f9a8c5d01a72""><code>2da9039</code></a> 1.3.6</li>
<li><a href=""https://github.com/npm/ini/commit/cfea636f534b5ca7550d2c28b7d1a95d936d56c6""><code>cfea636</code></a> better git push script, before publish instead of after</li>
<li><a href=""https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1""><code>56d2805</code></a> do not allow invalid hazardous string as section name</li>
<li>See full diff in <a href=""https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for ini since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ini&package-manager=npm_and_yarn&previous-version=1.3.5&new-version=1.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-12-13T07:18:41Z,CONTRIBUTOR,True,6,24,1,A web privacy measurement framework,Python,4b6c41ce80d8253996c9b1f430cb60334db50279,"Bump ini from 1.3.5 to 1.3.8 in /openwpm/Extension/firefox

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>"
246,https://api.github.com/repos/mozilla/OpenWPM/pulls/828,828,Bump ini from 1.3.5 to 1.3.8 in /openwpm/Extension/webext-instrumentation,"Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/ini/commit/a2c5da86604bc2238fe393c5ff083bf23a9910eb""><code>a2c5da8</code></a> 1.3.8</li>
<li><a href=""https://github.com/npm/ini/commit/af5c6bb5dca6f0248c153aa87e25bddfc515ff6e""><code>af5c6bb</code></a> Do not use Object.create(null)</li>
<li><a href=""https://github.com/npm/ini/commit/8b648a1ac49e1b3b7686ea957e0b95e544bc6ec1""><code>8b648a1</code></a> don't test where our devdeps don't even work</li>
<li><a href=""https://github.com/npm/ini/commit/c74c8af35f32b801a7e82a8309eab792a95932f6""><code>c74c8af</code></a> 1.3.7</li>
<li><a href=""https://github.com/npm/ini/commit/024b8b55ac1c980c6225607b007714c54eb501ba""><code>024b8b5</code></a> update deps, add linting</li>
<li><a href=""https://github.com/npm/ini/commit/032fbaf5f0b98fce70c8cc380e0d05177a9c9073""><code>032fbaf</code></a> Use Object.create(null) to avoid default object property hazards</li>
<li><a href=""https://github.com/npm/ini/commit/2da90391ef70db41d10f013e3a87f9a8c5d01a72""><code>2da9039</code></a> 1.3.6</li>
<li><a href=""https://github.com/npm/ini/commit/cfea636f534b5ca7550d2c28b7d1a95d936d56c6""><code>cfea636</code></a> better git push script, before publish instead of after</li>
<li><a href=""https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1""><code>56d2805</code></a> do not allow invalid hazardous string as section name</li>
<li>See full diff in <a href=""https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for ini since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ini&package-manager=npm_and_yarn&previous-version=1.3.5&new-version=1.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-12-13T07:18:40Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,d864cfd01500c80298282f1ec767b781339ce6cf,"Bump ini in /openwpm/Extension/webext-instrumentation

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>"
247,https://api.github.com/repos/mozilla/OpenWPM/pulls/827,827,Bump ini from 1.3.5 to 1.3.8,"[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

If you make any changes to it yourself then they will take precedence over the rebase.

---

[//]: # (dependabot-end)

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/ini/commit/a2c5da86604bc2238fe393c5ff083bf23a9910eb""><code>a2c5da8</code></a> 1.3.8</li>
<li><a href=""https://github.com/npm/ini/commit/af5c6bb5dca6f0248c153aa87e25bddfc515ff6e""><code>af5c6bb</code></a> Do not use Object.create(null)</li>
<li><a href=""https://github.com/npm/ini/commit/8b648a1ac49e1b3b7686ea957e0b95e544bc6ec1""><code>8b648a1</code></a> don't test where our devdeps don't even work</li>
<li><a href=""https://github.com/npm/ini/commit/c74c8af35f32b801a7e82a8309eab792a95932f6""><code>c74c8af</code></a> 1.3.7</li>
<li><a href=""https://github.com/npm/ini/commit/024b8b55ac1c980c6225607b007714c54eb501ba""><code>024b8b5</code></a> update deps, add linting</li>
<li><a href=""https://github.com/npm/ini/commit/032fbaf5f0b98fce70c8cc380e0d05177a9c9073""><code>032fbaf</code></a> Use Object.create(null) to avoid default object property hazards</li>
<li><a href=""https://github.com/npm/ini/commit/2da90391ef70db41d10f013e3a87f9a8c5d01a72""><code>2da9039</code></a> 1.3.6</li>
<li><a href=""https://github.com/npm/ini/commit/cfea636f534b5ca7550d2c28b7d1a95d936d56c6""><code>cfea636</code></a> better git push script, before publish instead of after</li>
<li><a href=""https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1""><code>56d2805</code></a> do not allow invalid hazardous string as section name</li>
<li>See full diff in <a href=""https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for ini since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ini&package-manager=npm_and_yarn&previous-version=1.3.5&new-version=1.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-12-13T06:54:05Z,CONTRIBUTOR,True,13,1647,1,A web privacy measurement framework,Python,a1aa99772b567c7710046d710d164c59c1e34812,"Bump ini from 1.3.5 to 1.3.8

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.8.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.8)

Signed-off-by: dependabot[bot] <support@github.com>"
248,https://api.github.com/repos/mozilla/OpenWPM/pulls/822,822,Deleted redundant files and references to default_browser_params.json and default_manager_params.json,fixes #819 ,ankushduacodes,61025943,2020-12-09T11:52:44Z,CONTRIBUTOR,True,33,46,7,A web privacy measurement framework,Python,776adc6fc8a2ededf349cdef7882a250522f9c65,"Deleted redundant files and references to -
default_browser_params.json and default_manager_params.json"
249,https://api.github.com/repos/mozilla/OpenWPM/pulls/822,822,Deleted redundant files and references to default_browser_params.json and default_manager_params.json,fixes #819 ,ankushduacodes,61025943,2020-12-09T11:52:44Z,CONTRIBUTOR,True,33,46,7,A web privacy measurement framework,Python,4d1835a8af1c146eb954a71dba3144b44d37ebb1,added validate_crawl_configs to docs
250,https://api.github.com/repos/mozilla/OpenWPM/pulls/822,822,Deleted redundant files and references to default_browser_params.json and default_manager_params.json,fixes #819 ,ankushduacodes,61025943,2020-12-09T11:52:44Z,CONTRIBUTOR,True,33,46,7,A web privacy measurement framework,Python,13dd1849c1662b73fdcbe9997ad1cd400144d222,updated the docs on how to instantiate TaskManager
251,https://api.github.com/repos/mozilla/OpenWPM/pulls/822,822,Deleted redundant files and references to default_browser_params.json and default_manager_params.json,fixes #819 ,ankushduacodes,61025943,2020-12-09T11:52:44Z,CONTRIBUTOR,True,33,46,7,A web privacy measurement framework,Python,0ecc02375d2b2cc4f9df0abadbc128388cf1f799,Updated Using_OpenWPM.md
252,https://api.github.com/repos/mozilla/OpenWPM/pulls/822,822,Deleted redundant files and references to default_browser_params.json and default_manager_params.json,fixes #819 ,ankushduacodes,61025943,2020-12-09T11:52:44Z,CONTRIBUTOR,True,33,46,7,A web privacy measurement framework,Python,c7916785fddd7c28255310fa380c4c1da0b5e204,Updated Platform-Architecture.md
253,https://api.github.com/repos/mozilla/OpenWPM/pulls/821,821,Bump highlight.js from 10.3.2 to 10.4.1 in /openwpm/Extension/webext-instrumentation,"Bumps [highlight.js](https://github.com/highlightjs/highlight.js) from 10.3.2 to 10.4.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/highlightjs/highlight.js/releases"">highlight.js's releases</a>.</em></p>
<blockquote>
<h2>10.4.1</h2>
<p>Security fixes:</p>
<ul>
<li>(fix) Exponential backtracking fixes for: <a href=""https://github.com/joshgoebel"">Josh Goebel</a>
<ul>
<li>cpp</li>
<li>handlebars</li>
<li>gams</li>
<li>perl</li>
<li>jboss-cli</li>
<li>r</li>
<li>erlang-repl</li>
<li>powershell</li>
<li>routeros</li>
</ul>
</li>
<li>(fix) Polynomial backtracking fixes for: <a href=""https://github.com/joshgoebel"">Josh Goebel</a>
<ul>
<li>asciidoc</li>
<li>reasonml</li>
<li>latex</li>
<li>kotlin</li>
<li>gcode</li>
<li>d</li>
<li>aspectj</li>
<li>moonscript</li>
<li>coffeescript/livescript</li>
<li>csharp</li>
<li>scilab</li>
<li>crystal</li>
<li>elixir</li>
<li>basic</li>
<li>ebnf</li>
<li>ruby</li>
<li>fortran/irpf90</li>
<li>livecodeserver</li>
<li>yaml</li>
<li>x86asm</li>
<li>dsconfig</li>
<li>markdown</li>
<li>ruleslanguage</li>
<li>xquery</li>
<li>sqf</li>
</ul>
</li>
</ul>
<p>Very grateful to <a href=""https://github.com/RunDevelopment"">Michael Schmidt</a> for all the help.</p>
<h2>10.4.0 - November 2020</h2>
<p>A largish release with many improvements and fixes from quite a few different contributors.  Enjoy!</p>
<p>Deprecations:</p>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/highlightjs/highlight.js/blob/master/CHANGES.md"">highlight.js's changelog</a>.</em></p>
<blockquote>
<h2>Version 10.4.1 (tentative)</h2>
<p>Security</p>
<ul>
<li>(fix) Exponential backtracking fixes for: <a href=""https://github.com/joshgoebel"">Josh Goebel</a>
<ul>
<li>cpp</li>
<li>handlebars</li>
<li>gams</li>
<li>perl</li>
<li>jboss-cli</li>
<li>r</li>
<li>erlang-repl</li>
<li>powershell</li>
<li>routeros</li>
</ul>
</li>
<li>(fix) Polynomial backtracking fixes for: <a href=""https://github.com/joshgoebel"">Josh Goebel</a>
<ul>
<li>asciidoc</li>
<li>reasonml</li>
<li>latex</li>
<li>kotlin</li>
<li>gcode</li>
<li>d</li>
<li>aspectj</li>
<li>moonscript</li>
<li>coffeescript/livescript</li>
<li>csharp</li>
<li>scilab</li>
<li>crystal</li>
<li>elixir</li>
<li>basic</li>
<li>ebnf</li>
<li>ruby</li>
<li>fortran/irpf90</li>
<li>livecodeserver</li>
<li>yaml</li>
<li>x86asm</li>
<li>dsconfig</li>
<li>markdown</li>
<li>ruleslanguage</li>
<li>xquery</li>
<li>sqf</li>
</ul>
</li>
</ul>
<p>Very grateful to <a href=""https://github.com/RunDevelopment"">Michael Schmidt</a> for all the help.</p>
<h2>Version 10.4.0</h2>
<p>A largish release with many improvements and fixes from quite a few different contributors.  Enjoy!</p>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/e96b915af70d1c3f014b732c10e7cd077f22b9c3""><code>e96b915</code></a> bump 10.4.1</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/065f65f41e803ef80a334f7d30da30e7bc653801""><code>065f65f</code></a> chore(release) allow release script to handle production releases</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/68509fc6301f5bb504d33766c45dd64253512e4b""><code>68509fc</code></a> chore(docs) bump SECURITY mention to 9.18.5</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/aa0fb850c24e94081bc65687010d41e1b7dda28a""><code>aa0fb85</code></a> chore(docs) Version 9 has reached EOL.</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/fb0a62650c39bc6b9c9365657ce4f912d50523fc""><code>fb0a626</code></a> enh(ci): Add tests for polynomial regex issues</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/fa46dd181d3fc37d43847aa253176c88d3d1e640""><code>fa46dd1</code></a> fix(reasonml) fix poly backtracking issue</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/d496052534bb4317373991098d15ddd5ccb8f566""><code>d496052</code></a> fix(latex) fix poly backtracking issue</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/d9f1cdb9924a1f22fc145711a499962a76477ac7""><code>d9f1cdb</code></a> fix(javascript/typescript) fix poly backtracking issue</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/fdec037a569c9f06592dd17304b07640365573b7""><code>fdec037</code></a> fix(asciidoc) fix poly backtracking issue</li>
<li><a href=""https://github.com/highlightjs/highlight.js/commit/02ca487e8ca4d56f2cbd1b738eae8f814688b5eb""><code>02ca487</code></a> fix(kotlin) fix poly backtracking issue</li>
<li>Additional commits viewable in <a href=""https://github.com/highlightjs/highlight.js/compare/10.3.2...10.4.1"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~joshgoebel"">joshgoebel</a>, a new releaser for highlight.js since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=highlight.js&package-manager=npm_and_yarn&previous-version=10.3.2&new-version=10.4.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-12-04T21:59:47Z,CONTRIBUTOR,True,104,137,1,A web privacy measurement framework,Python,f40e244d2e561f3c483b677e94b5c73b93d6ff49,"Bump highlight.js in /openwpm/Extension/webext-instrumentation

Bumps [highlight.js](https://github.com/highlightjs/highlight.js) from 10.3.2 to 10.4.1.
- [Release notes](https://github.com/highlightjs/highlight.js/releases)
- [Changelog](https://github.com/highlightjs/highlight.js/blob/master/CHANGES.md)
- [Commits](https://github.com/highlightjs/highlight.js/compare/10.3.2...10.4.1)

Signed-off-by: dependabot[bot] <support@github.com>"
254,https://api.github.com/repos/mozilla/OpenWPM/pulls/818,818,docs: update adding command in usingOpenWPM,@vringar Updated Using_OpenWPM.md to reflect the new command refactoring changes. ,cyruskarsan,55566678,2020-12-03T19:11:10Z,CONTRIBUTOR,True,819,494,46,A web privacy measurement framework,Python,9794b30bb74c47a40780be5d5f9142597028f1f9,Fixed nodejs version typo (#815)
255,https://api.github.com/repos/mozilla/OpenWPM/pulls/818,818,docs: update adding command in usingOpenWPM,@vringar Updated Using_OpenWPM.md to reflect the new command refactoring changes. ,cyruskarsan,55566678,2020-12-03T19:11:10Z,CONTRIBUTOR,True,819,494,46,A web privacy measurement framework,Python,db1186a9f60e02a182f9405722f5e73e12d59e26,"Refactoring browser and manager params into dataclasses (#807)

* initial file commit

* add new dependency for dataclasses

* implemeted basic BrowserParams dataclass

* dependencies update

* file reformat

* implemented basic ManagerParams dataclass

* Update environment dependencies

* Added new error class to validate
 browser and manager params

* file reformat

* Update scripts/environment-unpinned.yaml

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* added validations for BrowserParams dataclass

* Update openwpm/config.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Removed unnecessary checks

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Changed error string formatting

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)

* Revert ""Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)""

This reverts commit e550c3bd604f415272bd05ee3d9c76397ad98006.

* Revert ""Merge branch 'master' into turn_browser_and_manager_params_into_dataclasses""

This reverts commit aff5a384e737477746d6a38d3b2be6244f8dfd11, reversing
changes made to 6ecaf5d0a94d376126692c3785692ba10626d88a.

* Revert ""Update environment dependencies""

This reverts commit 385825b10aee4610a6e304122bec4ab2b7219a5b.

* Revert ""Merge branch 'turn_browser_and_manager_params_into_dataclasses' of https://github.com/ankushduacodes/OpenWPM into turn_browser_and_manager_params_into_dataclasses""

This reverts commit 6ecaf5d0a94d376126692c3785692ba10626d88a, reversing
changes made to e550c3bd604f415272bd05ee3d9c76397ad98006.

* file reformat

* finalized validate_browser_params function

* fixed typo in error string

* added validations for manager_params

* Explanation for using list for supported browser

* Revert ""Revert ""Merge branch 'master' into turn_browser_and_manager_params_into_dataclasses""""

This reverts commit 6c3e98e57bd9c42acd029c74649742dcc81de86c.

* Revert ""Revert ""Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)""""

This reverts commit fc8f48f1878ea7c43b342989ce581dc3d6eab929.

* import name change from .Error to .error

* moved call_instrument check to config.py

* fixed accidental use of dict syntax in a class

* moved save_content check from deploy_firefox.py

* deleting redundent file

* deleted more redundent files

* removed redundant imports

* added new save_content check

* property name changevariables can not have '-'

* added new attribute  to ManagerParams

* adapted files to validate manager & broswer params

- also added logic to convert the objects(BrowserParams and ManagerParams) to dictionaries to not break the functionality
- also updated demo.py to work with new file names on this branch

* removed obsolete documentaion

* Dependency Update

* Revert ""Dependency Update""

This reverts commit 8ee3a02b1764883a1f5922e0b52e9f17f8e098db.

* Dependencies Update

* unset memory and process watchdogs

* add new output_format and failure_limit checks

* inheriting dataclasses and added type hints to fn

* added todo

* fixed inheritance of dataclasses acc. to plan

* refactor use of dict to use dataclasses(pending)

* more refactoring use of dict to dataclasses -
Also changed some type hints related to new refactoring

* fixed screenshot directory issue -
because of which some of the tests were failing

* added try-except clause for unexpected errors

* added tests to cover dataclasses

* added some new and edited some old docs

* refactor use of __dict__ to dataclass.to_dict()

* Revert ""refactor use of __dict__ to dataclass.to_dict()""

This reverts commit a4f35513fa26d23a073c16af9fb332045826dcb2.

* fixed some tests

* refactor use of __dict__ in favor of
dataclass.to_dict() method

* removed some TODOS

* fixed dataclases validation tests

* Update docs/Configuration.md

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Update docs/Configuration.md

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Update docs/Configuration.md

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Update openwpm/config.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Update openwpm/config.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* Update openwpm/task_manager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>

* minor fixed wrt polishing the PR

* added new check and test for crawl configs

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
256,https://api.github.com/repos/mozilla/OpenWPM/pulls/818,818,docs: update adding command in usingOpenWPM,@vringar Updated Using_OpenWPM.md to reflect the new command refactoring changes. ,cyruskarsan,55566678,2020-12-03T19:11:10Z,CONTRIBUTOR,True,819,494,46,A web privacy measurement framework,Python,68382dcaa942b8770d26137c5ac5d75513ca4122,docs: update adding command in usingOpenWPM
257,https://api.github.com/repos/mozilla/OpenWPM/pulls/817,817,Fixing import in manual_test.py broken after #807,"Minor fix for import no longer found. Quick question--given the recent work converting module names to abide by snake_case, should BrowserParams be browser_params?",MollieBakal,22957978,2020-12-03T06:09:13Z,CONTRIBUTOR,True,5,5,1,A web privacy measurement framework,Python,25fe8e96fb978c85bb0981057ce996d961b50903,manual test breaking post-#807
258,https://api.github.com/repos/mozilla/OpenWPM/pulls/817,817,Fixing import in manual_test.py broken after #807,"Minor fix for import no longer found. Quick question--given the recent work converting module names to abide by snake_case, should BrowserParams be browser_params?",MollieBakal,22957978,2020-12-03T06:09:13Z,CONTRIBUTOR,True,5,5,1,A web privacy measurement framework,Python,d112642ffd82175b44d985340dcea78bca2e74e8,replacing with standard json function for single string
259,https://api.github.com/repos/mozilla/OpenWPM/pulls/817,817,Fixing import in manual_test.py broken after #807,"Minor fix for import no longer found. Quick question--given the recent work converting module names to abide by snake_case, should BrowserParams be browser_params?",MollieBakal,22957978,2020-12-03T06:09:13Z,CONTRIBUTOR,True,5,5,1,A web privacy measurement framework,Python,b08dfe17223b5ed30d514abed3e809c62eb4545d,"Reverting error, updating function to current name"
260,https://api.github.com/repos/mozilla/OpenWPM/pulls/815,815,fixes nodejs version typo,,ankushduacodes,61025943,2020-11-30T16:50:58Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,fa5b0a4df71984991dab8c57a8e025cd2ae6fac7,fixes nodejs version typo
261,https://api.github.com/repos/mozilla/OpenWPM/pulls/813,813,Update README.md,Need to fix TOC,cyruskarsan,55566678,2020-11-28T03:39:14Z,CONTRIBUTOR,False,40,0,1,A web privacy measurement framework,Python,586de44650af620780572e4bb6277ce27f3d71a4,"Update README.md

Need to fix TOC"
262,https://api.github.com/repos/mozilla/OpenWPM/pulls/811,811,Resolving imports to avoid errors,fixes #810 ,ankushduacodes,61025943,2020-11-25T18:43:30Z,CONTRIBUTOR,True,13,12,2,A web privacy measurement framework,Python,acf513146a8b8d440e4115bba1608ace8eb45f9a,fixing attribute error
263,https://api.github.com/repos/mozilla/OpenWPM/pulls/811,811,Resolving imports to avoid errors,fixes #810 ,ankushduacodes,61025943,2020-11-25T18:43:30Z,CONTRIBUTOR,True,13,12,2,A web privacy measurement framework,Python,9785c9f2ae3e849d9b5ec9555478f1d1a99f118c,import fixes
264,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
265,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
266,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
267,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
268,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
269,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
270,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
271,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
272,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
273,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
274,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
275,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
276,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
277,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
278,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
279,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
280,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
281,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
282,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
283,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
284,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
285,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
286,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
287,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
288,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
289,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
290,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
291,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
292,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
293,https://api.github.com/repos/mozilla/OpenWPM/pulls/809,809,Cyruskarsan command refactoring,,vringar,13276717,2020-11-24T16:38:25Z,COLLABORATOR,True,801,164,11,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
294,https://api.github.com/repos/mozilla/OpenWPM/pulls/808,808,Open wpm,,FukurouMakoto,66639510,2020-11-23T20:26:51Z,CONTRIBUTOR,False,226,175,35,A web privacy measurement framework,Python,ee4e3a45b6a20615f92e08b9928c4ac7897f124c,Module & Imports conformed to PEP8
295,https://api.github.com/repos/mozilla/OpenWPM/pulls/808,808,Open wpm,,FukurouMakoto,66639510,2020-11-23T20:26:51Z,CONTRIBUTOR,False,226,175,35,A web privacy measurement framework,Python,718b5897f1d4ced754f4e20aea37d2e47038d45d,Conformed tests to PEP8
296,https://api.github.com/repos/mozilla/OpenWPM/pulls/808,808,Open wpm,,FukurouMakoto,66639510,2020-11-23T20:26:51Z,CONTRIBUTOR,False,226,175,35,A web privacy measurement framework,Python,21bf53b973ead99dcda774a38bcb60fa065508d0,Conformed tests to PEP8 (2)
297,https://api.github.com/repos/mozilla/OpenWPM/pulls/808,808,Open wpm,,FukurouMakoto,66639510,2020-11-23T20:26:51Z,CONTRIBUTOR,False,226,175,35,A web privacy measurement framework,Python,a72ad86260adfb378c92ce435410c27f34fa6c76,updated where clause on test_timer
298,https://api.github.com/repos/mozilla/OpenWPM/pulls/808,808,Open wpm,,FukurouMakoto,66639510,2020-11-23T20:26:51Z,CONTRIBUTOR,False,226,175,35,A web privacy measurement framework,Python,8c1b587b42c3fb0c2878999b3a66826603dcfbc8,Changed where clause in webdriver test
299,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,df6d960d7ef6c3112c4521c4b51aa90fd4a524ec,initial file commit
300,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,21e74069b9b7e52cc088fbe29c2fefbb355882a1,add new dependency for dataclasses
301,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,453d6fdd604e5275ec8b2dc04054556176a2efc8,implemeted basic BrowserParams dataclass
302,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,a7865745d45b7ad43410f4c4f61bc6bbed9e63d8,dependencies update
303,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,d7d1cf1ad9bdbb61e2ea8a10b35849e50cf5243a,file reformat
304,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,d878a6c753633d3d1e45f0af4aaa11e4dfdd19dc,implemented basic ManagerParams dataclass
305,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,385825b10aee4610a6e304122bec4ab2b7219a5b,Update environment dependencies
306,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,74a80b441204795b6097ebad7356f96812198483,"Added new error class to validate
 browser and manager params"
307,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,b2bccb1a9be2e5a05fde0fec8e44c326f1a95191,file reformat
308,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,858812ac71a73fd795933481e466f83eba1227ce,"Update scripts/environment-unpinned.yaml

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
309,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,f4e78e4080bfc9de26312da6cf2d1938fc51f83a,added validations for BrowserParams dataclass
310,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,31a39b212092087255569157150322433c614f34,"Update openwpm/config.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
311,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,21f4e48cf9d538f97e89a518f03a102bff53ad6c,"Removed unnecessary checks

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
312,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,dcd792ad4358c95ef2bdaae1ff8a2ac8a2a34ccc,"Changed error string formatting

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
313,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,e550c3bd604f415272bd05ee3d9c76397ad98006,Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)
314,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,6ecaf5d0a94d376126692c3785692ba10626d88a,Merge branch 'turn_browser_and_manager_params_into_dataclasses' of https://github.com/ankushduacodes/OpenWPM into turn_browser_and_manager_params_into_dataclasses
315,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,aff5a384e737477746d6a38d3b2be6244f8dfd11,Merge branch 'master' into turn_browser_and_manager_params_into_dataclasses
316,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,fc8f48f1878ea7c43b342989ce581dc3d6eab929,"Revert ""Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)""

This reverts commit e550c3bd604f415272bd05ee3d9c76397ad98006."
317,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,6c3e98e57bd9c42acd029c74649742dcc81de86c,"Revert ""Merge branch 'master' into turn_browser_and_manager_params_into_dataclasses""

This reverts commit aff5a384e737477746d6a38d3b2be6244f8dfd11, reversing
changes made to 6ecaf5d0a94d376126692c3785692ba10626d88a."
318,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,3c5f82ebe08c8fe7f9a6a89dfe878371ba5db156,"Revert ""Update environment dependencies""

This reverts commit 385825b10aee4610a6e304122bec4ab2b7219a5b."
319,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,625266548d8713c81eb6a0d4ddfe8d66b9118373,"Revert ""Merge branch 'turn_browser_and_manager_params_into_dataclasses' of https://github.com/ankushduacodes/OpenWPM into turn_browser_and_manager_params_into_dataclasses""

This reverts commit 6ecaf5d0a94d376126692c3785692ba10626d88a, reversing
changes made to e550c3bd604f415272bd05ee3d9c76397ad98006."
320,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,cd8f5926a6d60dba5568ed1cf31abe1fb4a15eac,file reformat
321,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,85c22aed74dc83c6c01c07fdc7031a7fe6e0df65,finalized validate_browser_params function
322,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,cfdfb115f6409e16fb8f9e8246e1568f5c3aac15,fixed typo in error string
323,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,5265076cd01f3a02db362b18bf39f94a7ea50e99,added validations for manager_params
324,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,6489ef0eed48a8c4028883f1cc76b794770ad20d,Explanation for using list for supported browser
325,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,86ed78d50d39665befce0ca5f75af4eafc585a14,"Revert ""Revert ""Merge branch 'master' into turn_browser_and_manager_params_into_dataclasses""""

This reverts commit 6c3e98e57bd9c42acd029c74649742dcc81de86c."
326,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,2ab525d75a0ec7a797623f5bc085e1a79c1cb3fe,"Revert ""Revert ""Changed filenamea and necessary imports to resolve conflicts with new master branch(refering to PEP-8 reformatting)""""

This reverts commit fc8f48f1878ea7c43b342989ce581dc3d6eab929."
327,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,6e51185cd34abc1c5e9dda78d268f8f5696da5c6,import name change from .Error to .error
328,https://api.github.com/repos/mozilla/OpenWPM/pulls/807,807,Refactoring browser and manager params into dataclasses,"This pull request/draft aims to fix #495 

### TODOS
- [x] Refactor use of params dicts to use BrowserParams and ManagerPramans everywhere
- [x] Write Tests
- [x] Write tutorial/Documentation for the use of custom browser and manager params
- [x] Write documentation for dataclasses use
- [x] Resolve all the #TODOS that I added in this pull request",ankushduacodes,61025943,2020-11-23T10:06:30Z,CONTRIBUTOR,True,786,423,46,A web privacy measurement framework,Python,8e52ca44c8ac472e06078d2dbc36d73d3b84c2bc,moved call_instrument check to config.py
329,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,ee4e3a45b6a20615f92e08b9928c4ac7897f124c,Module & Imports conformed to PEP8
330,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,718b5897f1d4ced754f4e20aea37d2e47038d45d,Conformed tests to PEP8
331,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,21bf53b973ead99dcda774a38bcb60fa065508d0,Conformed tests to PEP8 (2)
332,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,3c5d752cd3515b38ef57a922a95a60b4db60f04a,Updated webdriver test for PEP8
333,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,790d56c22f8df38bcde3fb3b44413145c9c1433f,Updated test_timer for PEP8
334,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,b648978f402b52ceb09cf4a7dabbc6e17f8e2f49,Deleting Workspace file
335,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,d2a60959514117cace98186c3427ecba3de00b03,renamed files to match PEP8
336,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,f0fe39082d14fa5056ff6e359b895ce3e28a0645,"Update docs/Using_OpenWPM.md

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
337,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,49ba1b65c8789c1a6557a668c09c0dfdc27533e9,Changed serversocket to ServerSocket
338,https://api.github.com/repos/mozilla/OpenWPM/pulls/806,806,Module & Imports conformed to PEP8,"To handle [Issue #779 ](https://github.com/mozilla/OpenWPM/issues/779).

Modules and their imports have been changed to snake_case.",FukurouMakoto,66639510,2020-11-22T20:34:33Z,CONTRIBUTOR,True,246,203,49,A web privacy measurement framework,Python,e296530de579ef435e1468d70f5ff228af2c6a17,Merge branch 'master' of https://github.com/FukurouMakoto/OpenWPM
339,https://api.github.com/repos/mozilla/OpenWPM/pulls/804,804,Updated stored commands in test_webdriver_utils.py,Fixes updated change issue in #800 ,LordReigns,29643986,2020-11-19T15:53:23Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,6cb4911113fcc642b464773d4f0599ca236e45bc,Updated stored commands in test_webdriver_utils.py
340,https://api.github.com/repos/mozilla/OpenWPM/pulls/803,803,Removed unneccessary List unpacking,Fixes #800,LordReigns,29643986,2020-11-19T02:41:30Z,CONTRIBUTOR,True,5,5,1,A web privacy measurement framework,Python,7e57e57bb8b20589655d5bbdb6310c08c882142f,"Fixes #800, Removed unneccessary List unpacking"
341,https://api.github.com/repos/mozilla/OpenWPM/pulls/803,803,Removed unneccessary List unpacking,Fixes #800,LordReigns,29643986,2020-11-19T02:41:30Z,CONTRIBUTOR,True,5,5,1,A web privacy measurement framework,Python,9bdd40e8cfc54a475879ce6d5c38cf326c116208,Removed unneccesary comments
342,https://api.github.com/repos/mozilla/OpenWPM/pulls/801,801,Moved CONTRIBUTING.md from docs to top level directory,Closes #797  ,LordReigns,29643986,2020-11-18T15:01:16Z,CONTRIBUTOR,True,0,0,1,A web privacy measurement framework,Python,19d0a71927542a23e1774255e8f00e1d2608c8c9,Moved CONTRIBUTING.md from docs to top level directory
343,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,4b942cd77189e303de85d062b5901563e4a2281d,Added new duration column to crawl_history table
344,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,6c46dd89700d9516013b3ef684ff48ff05ddfb5d,adding timer to populate new duration column
345,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,30e6d4412f7de4ac04c824ed27a75631d5d0006b,"replaced .time() with .time_ns() to store duration
in nanoseconds"
346,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,73ae8f99e95098b4651ff4ca8992043ac265be58,Update Schema-Documenation with new duration col.
347,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,f237c0c44dab1da5155ea7077a6b5c0279c84e1d,documenting unit of duration being stored
348,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,578cf4552e82ea11ba4575962a8e79bb86b8fdf9,"Update automation/TaskManager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
349,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,fc0185dc1fa3183c61448805e5e33cbc3878ddfb,reformat file in accordance with pre-commit config
350,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,93e55914e4e793c383dde0fb174392c817e3a846,"add test -
to assert that new column for command duration is storing valid values"
351,https://api.github.com/repos/mozilla/OpenWPM/pulls/799,799,Adding performance timer to see how much time a command took,fixes #679 ,ankushduacodes,61025943,2020-11-17T01:40:21Z,CONTRIBUTOR,True,37,1,5,A web privacy measurement framework,Python,0d3bd4bf7aacfdc0c4cabb7df877416ee50f2b32,making the test run locally without internet
352,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,3ee1b28572edfea420c178e0a76509f8da4a3252,Preparing v0.13.0 release
353,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,ac6e9a4ca47c9344d0a1c598ac47d6545779b6ce,Made links work
354,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,e818a155cf100915214b37a92018b62626918fb1,Rebuild extension
355,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,34789301e3492f685e5b1037fe145d8c4708d7cc,Fixed extension build script
356,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,c51bc30490ec64b0b9210126fa420e2c2c2dc988,Removed prepare step as it breaks fresh installs
357,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,081df2edf5f8cdd070e25ac92133552b07bfdb2d,Changed openwpm import in tests to absolute
358,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,e8ac5330ce7a6db6e2176b23c5d5398b78007af1,Merge branch 'master' into v0.13.0_release
359,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,172342cf9b389263fa53fc8ed69f1d9c01bf59b5,Fixed test_timer.py
360,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,e22c5f93e81a46bec798b4ad0d70d654669a0b0f,Reverted changes to webext-instrumentation/package.json
361,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,6444bef3a79e8c365e5f4cdb60b46b9a5187fc17,Pinning to node<15.0.0
362,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,d2e2a52e9e4ba26a2b2e2325cbeb9c2ba91436c6,Rebuilding package-lock.json
363,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,5b80acd75f287353b7ed37bd08158825d031ce04,Fixed test
364,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,e2914e09c4e1961e3ba401b696db6c4f09b86c79,Also mentioned LordReigns
365,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,c63272f06f0d7a1acbd4a0c79f0c3114122ed11f,Fixed links to CONTRIBUTING.md
366,https://api.github.com/repos/mozilla/OpenWPM/pulls/798,798,V0.13.0 release,,vringar,13276717,2020-11-16T18:48:13Z,COLLABORATOR,True,14643,6964,33,A web privacy measurement framework,Python,6eabff93714a58b4c4d435f5c482e13afa260a0f,Moved to FF83
367,https://api.github.com/repos/mozilla/OpenWPM/pulls/794,794,Updated all JS/TS dependencies,"I just went through and updated everything to the most up to date version of each package.
I should note that tslint [is being deprecated in favour of eslint](https://github.com/palantir/tslint/issues/4534) with TS configs, so we should eventually remove that as well.
But for now this seems good enough :)
",vringar,13276717,2020-11-16T10:55:13Z,COLLABORATOR,True,4840,4962,5,A web privacy measurement framework,Python,ef4ae4702ffbfc2ac10bb2609398b104fa61d4f8,Updated all JS/TS dependencies
368,https://api.github.com/repos/mozilla/OpenWPM/pulls/794,794,Updated all JS/TS dependencies,"I just went through and updated everything to the most up to date version of each package.
I should note that tslint [is being deprecated in favour of eslint](https://github.com/palantir/tslint/issues/4534) with TS configs, so we should eventually remove that as well.
But for now this seems good enough :)
",vringar,13276717,2020-11-16T10:55:13Z,COLLABORATOR,True,4840,4962,5,A web privacy measurement framework,Python,0699172c7a80f6128955b68ef17e555c3fc0cec4,Removed xbl as ResourceType
369,https://api.github.com/repos/mozilla/OpenWPM/pulls/793,793,Renaming automation module to openwpm,fixes #685 ,ankushduacodes,61025943,2020-11-13T16:00:57Z,CONTRIBUTOR,True,92,93,136,A web privacy measurement framework,Python,8a9521e5a695b5a7bdd460daea33f55753ffc2c8,Renaming automation module to openwpm
370,https://api.github.com/repos/mozilla/OpenWPM/pulls/792,792,Rename top level module from automation to openwpm,fixes #685,ankushduacodes,61025943,2020-11-13T12:18:48Z,CONTRIBUTOR,False,92,92,136,A web privacy measurement framework,Python,75a863a2facf67dde4620e9d91ab01a20b7f7471,rename top level module from automation to openwpm
371,https://api.github.com/repos/mozilla/OpenWPM/pulls/792,792,Rename top level module from automation to openwpm,fixes #685,ankushduacodes,61025943,2020-11-13T12:18:48Z,CONTRIBUTOR,False,92,92,136,A web privacy measurement framework,Python,c3e6cccb162a4f7b6d5d677f49cd7535c8fce58a,adapt documentation according to changes reqested
372,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,3ed66c7583b88c2372c7ee9254c085b882c64519,Added new duration column to crawl_history table
373,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,850263b4fa8ddcfadca62e742dc2a4eb4fd3e327,adding timer to populate new duration column
374,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,2393e4933dd61e67c896aafcad7002a6b854024c,"replaced .time() with .time_ns() to store duration
in nanoseconds"
375,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,077f9dd35e88f71331ba8d697db1d8f74a3ccdd2,Update Schema-Documenation with new duration col.
376,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,78865d97669520ab49925b03c0c943642544c905,"Update automation/TaskManager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
377,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,2578322c1f48d6a4b2373b5cec2eac68043ecd6d,documenting unit of duration being stored
378,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,ec2c33ce9670c9fb9037ddf434bfc941c5001edb,Merge branch 'add_performace_timer' of https://github.com/ankushduacodes/OpenWPM into add_performace_timer
379,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,1cdca649d21a0dd104d02426f0a6757e2ee49cb3,reformat file in accordance with pre-commit config
380,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,3e0ae137108ec2f0ce3a437dc4e6ffdea1d0012e,folder name change to avoid conflicts
381,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,28d54d5e8c76a22cfbcca0e47ddc65abbf2d1ad3,reverse accidental commit
382,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,fd0e895bb7f9c10712279e976f1165c9821502fe,reverse accidental commit
383,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,9ec34386ed4a03fc4369ba402e5ac7bebe9784c5,"Revert ""reverse accidental commit""

This reverts commit fd0e895bb7f9c10712279e976f1165c9821502fe."
384,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,62a8f551d4fdf8c6ba31625f186c2303cc9708c4,"Revert ""reverse accidental commit""

This reverts commit 28d54d5e8c76a22cfbcca0e47ddc65abbf2d1ad3."
385,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,b0500906f2b5803a795c99e48b20b554d9dbd280,"Revert ""folder name change to avoid conflicts""

This reverts commit 3e0ae137108ec2f0ce3a437dc4e6ffdea1d0012e."
386,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,42790bdebba1c82c20d903a4be33144cec77840d,folder name change to avoid conflicts
387,https://api.github.com/repos/mozilla/OpenWPM/pulls/791,791,Add performace timer,fixes #679 ,ankushduacodes,61025943,2020-11-12T15:36:41Z,CONTRIBUTOR,False,8,1,4,A web privacy measurement framework,Python,aee85501d93093b3dae8d43280821bc86ba32565,"Revert ""folder name change to avoid conflicts""

This reverts commit 42790bdebba1c82c20d903a4be33144cec77840d."
388,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,ac9f3129a8a2189a72bb20528fef6217aa42e7bb,making process_watchdog part of manager_params
389,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,dd33ae0ec868d7aeccf95e1945780939fb3de9b5,"Updating documentation to reflect making process_
watchdog a part of manager_params"
390,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,0239b168b7281f5d6c459f97722af6e182becca8,setting process_watchdog to true in demo.py
391,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,86fffedb8d0aa973927e1c9bc77738c989425379,"Update docs/Platform-Architecture.md

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
392,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,7d3c6b6c65111c0b0264241d65b8920cfaeffb01,Removed a TODO as it was outdated
393,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,64cbc1795787dc698c861ea995f9fe7ab10b79ad,Merge branch 'make_process_watchdog_manager_param' of https://github.com/ankushduacodes/OpenWPM into make_process_watchdog_manager_param
394,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,58e804da237e4ab809e3b04da0028ec2c18f8b20,"Removing an outdated TODO

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
395,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,7d54643d48bbac1e53d2dee50f4031aefb9e41bd,add sample comment
396,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,84e4fa4f5f8feaf0367967d16d4ed115dea97544,removed redundent TODO
397,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,2e4b3b80b1050f87cce54ec5390eff2cf27c0f5d,trying to delete outdated TODO
398,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,f2e04c0d2626bbb5a5561a3b8d8c114cff62946e,"Update __init__.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
399,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,19de9af6ef9c215c12d58d617710202b6100cf53,"Update automation/TaskManager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
400,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,8fd91a0b90fea264bdfe4be58f66562fdaf3ed47,fix code formatting
401,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,6340f9716f49274b997e72bf9d9e3273d75b3765,Update automation/TaskManager.py
402,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,6f8bb15d0c4bf8ca0c8c537390ec77f46962f4ca,Update automation/TaskManager.py
403,https://api.github.com/repos/mozilla/OpenWPM/pulls/787,787,Making process_watchdog part of manager_param and removed a process_watchdog check to reflect current state of watchdogs in OpenWPM,fixes #749 ,ankushduacodes,61025943,2020-11-11T11:56:25Z,CONTRIBUTOR,True,17,18,6,A web privacy measurement framework,Python,ff469ca27adf0a076d30b6e055e412547bc52f1d,Update automation/TaskManager.py
404,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,94377a45cc0f8b49acbf27c6821cc6daacdd07e7,adding new manager_param -> memery_watchdog
405,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,3d255a46f36d0006f9ee8855624b01b5bb6ab9b5,adding check to see memory_watchdog is set or not
406,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,ba90c6dce8b9ed35cd95a9b0eeaad88c93edf1e6,adding new manager_param -> memery_watchdog
407,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,2641fa30f03c15b8c5b89c1e035d108e607f0625,adding check to see memory_watchdog is set or not
408,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,c193ec7f1df7121bd17a8f78d4464a8ada184ea2,set memory_watchdog
409,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,3e97b5a616767b3773431e0c15218ff36b190fb7,Merge branch 'fix_mem_watchdog' of https://github.com/ankushduacodes/OpenWPM into fix_mem_watchdog
410,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,bb311ecc1e312bbddb739b95a2c3294706172d51,adding memory_watchdog documentation
411,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,eec94bff25369a4a74a61778589533ef50d8173b,adding OpenWPM watchdogs documentation
412,https://api.github.com/repos/mozilla/OpenWPM/pulls/785,785,Making memory_watchdog not run by default,Running test to fix #778 ,ankushduacodes,61025943,2020-11-10T12:14:07Z,CONTRIBUTOR,True,42,29,5,A web privacy measurement framework,Python,51da058369c4b8598e59467dab5254c108774bd1,chnge debug msg to refect current state of OpenWPM
413,https://api.github.com/repos/mozilla/OpenWPM/pulls/784,784,Created test to recreate issue #741,This test currently fails.,vringar,13276717,2020-11-10T10:34:40Z,COLLABORATOR,False,13,0,1,A web privacy measurement framework,Python,a4ff0b6bbe8158387629c7b177c5421ec20d2a95,Created test to recreate issue #741
414,https://api.github.com/repos/mozilla/OpenWPM/pulls/776,776,Update README.md,"Output wasn't dumped to host directory, must be /opt/ instead of /root/

compare:

```
========== Manager Configuration ==========
{
  ""aggregator_address"": [
    ""127.0.0.1"",
    33585
  ],
  ""data_directory"": ""/opt/Desktop/"",
  ""database_name"": ""/opt/Desktop/crawl-data.sqlite"",
  ""failure_limit"": null,
  ""log_directory"": ""/opt/Desktop/"",
  ""log_file"": ""/opt/Desktop/openwpm.log"",
  ""logger_address"": [
    ""127.0.0.1"",
    34201
  ],
  ""num_browsers"": 1,
  ""output_format"": ""local"",
  ""s3_bucket"": null,
  ""s3_directory"": null,
  ""screenshot_path"": ""/opt/Desktop/screenshots"",
  ""source_dump_path"": ""/opt/Desktop/sources"",
  ""testing"": false
}
```",7brokenmirrors,70488420,2020-11-02T09:32:18Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,d9ea89fe2fbfaa47c42894e6ae9ac3607d1c3dec,"Update README.md

Output wasn't dumped to host directory, must be /opt/ instead of /root/

compare:

```
========== Manager Configuration ==========
{
  ""aggregator_address"": [
    ""127.0.0.1"",
    33585
  ],
  ""data_directory"": ""/opt/Desktop/"",
  ""database_name"": ""/opt/Desktop/crawl-data.sqlite"",
  ""failure_limit"": null,
  ""log_directory"": ""/opt/Desktop/"",
  ""log_file"": ""/opt/Desktop/openwpm.log"",
  ""logger_address"": [
    ""127.0.0.1"",
    34201
  ],
  ""num_browsers"": 1,
  ""output_format"": ""local"",
  ""s3_bucket"": null,
  ""s3_directory"": null,
  ""screenshot_path"": ""/opt/Desktop/screenshots"",
  ""source_dump_path"": ""/opt/Desktop/sources"",
  ""testing"": false
}
```"
415,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,948b4175cd5758e9249e3130378656bf0bfd7b7a,"remove support for random_attributes,
ua_strings,
screen_res"
416,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,c8e59a5babb9e44057403a4b12b2b6ec381ed77d,Merge branch 'master' into remove_support_rand_attrs
417,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,7f615bc4e0f39601af62ab5550944f30287e91d6,add DEFAULT_SCREEN_SIZE replacing screen_res
418,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,fd4e35f9cccdd85c480431d13310226dc6a78210,Merge branch 'remove_support_rand_attrs' of https://github.com/ankushduacodes/OpenWPM into remove_support_rand_attrs
419,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,4ec583fc9da27d5a5a5cbf7a0eb8ee6957015878,"Update automation/BrowserManager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
420,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,b704c62b89c3d6bb93d8752a2df2e1cb91cbc070,"Update automation/default_browser_params.json

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
421,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,5c9b7941eb3ddbb352df32f93011bef27acaedba,"removed random attrs property from json file
removed some comments mentioning screen_res and ua_strings"
422,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,a5d7ff50cfcce7704c917321452ab7c0e924b96f,removed traces of screen_res & ua_string from docs
423,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,f95a38c8c6406e7f75ce63eabb292c80bd0f123a,Removed traces of browser settings
424,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,b24484fa25138335e01a1d77553f9dae7dca5634,"Update automation/DeployBrowsers/deploy_firefox.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
425,https://api.github.com/repos/mozilla/OpenWPM/pulls/775,775,"Remove support for random_attributes, ua_strings, screen_res #745","Running tests to fix #745 
",ankushduacodes,61025943,2020-10-31T17:01:32Z,CONTRIBUTOR,True,9,92,5,A web privacy measurement framework,Python,0414adeb221ade969cdaca41f2c39890aa15eaa0,"Update automation/BrowserManager.py

Co-authored-by: Stefan Zabka <zabkaste@informatik.hu-berlin.de>"
426,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
427,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
428,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
429,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
430,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
431,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
432,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
433,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
434,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
435,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
436,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
437,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
438,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
439,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
440,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
441,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
442,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
443,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
444,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
445,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
446,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
447,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
448,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
449,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
450,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
451,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
452,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
453,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
454,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
455,https://api.github.com/repos/mozilla/OpenWPM/pulls/774,774,Command refactoring,remove custom function command and format code with black and isort. ,cyruskarsan,55566678,2020-10-31T16:18:59Z,CONTRIBUTOR,True,697,98,7,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
456,https://api.github.com/repos/mozilla/OpenWPM/pulls/772,772,Update study count with new milestone,"This updates the study count to the newest value, and updates the link to a new table maintained on Princeton's page.",englehardt,3280150,2020-10-29T03:05:25Z,MEMBER,True,1,1,1,A web privacy measurement framework,Python,dfa84374b3ba813482fcdd9696c57650de3580f6,Update study count with new milestone
457,https://api.github.com/repos/mozilla/OpenWPM/pulls/771,771,Bump bl from 1.2.2 to 1.2.3 in /automation/Extension/firefox,"Bumps [bl](https://github.com/rvagg/bl) from 1.2.2 to 1.2.3.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/rvagg/bl/commit/d69edfd66f2b1d8b50abc0ecfe42216437540178""><code>d69edfd</code></a> 1.2.3</li>
<li><a href=""https://github.com/rvagg/bl/commit/847473ab543e99a687a1ef871ba9a1c4d2e26ee7""><code>847473a</code></a> test all branches</li>
<li><a href=""https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00""><code>0bd87ec</code></a> Fix unintialized memory access</li>
<li><a href=""https://github.com/rvagg/bl/commit/dc097f3f33dffbe11ce4753cf0806ffca632260e""><code>dc097f3</code></a> test newer versions of Node</li>
<li>See full diff in <a href=""https://github.com/rvagg/bl/compare/v1.2.2...v1.2.3"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=bl&package-manager=npm_and_yarn&previous-version=1.2.2&new-version=1.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-10-28T13:14:25Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,edf96fd7256906742392f750683987f114da3219,"Bump bl from 1.2.2 to 1.2.3 in /automation/Extension/firefox

Bumps [bl](https://github.com/rvagg/bl) from 1.2.2 to 1.2.3.
- [Release notes](https://github.com/rvagg/bl/releases)
- [Commits](https://github.com/rvagg/bl/compare/v1.2.2...v1.2.3)

Signed-off-by: dependabot[bot] <support@github.com>"
458,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
459,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
460,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
461,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
462,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
463,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
464,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
465,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
466,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
467,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
468,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
469,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
470,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
471,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
472,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
473,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
474,https://api.github.com/repos/mozilla/OpenWPM/pulls/770,770,Command refactoring,"refactored finalize and initialize commands
@vringar Please review. 

Are `DumpProfCommand` , `RunCustomFunctionCommand`, and `ShutdownCommand` the only commands left to refactor? If so, these didn't appear in `browser_commands.py` so would I just add the execute function to each of these classes in `browser_commands.py`?",cyruskarsan,55566678,2020-10-19T16:17:23Z,CONTRIBUTOR,True,56,61,5,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
475,https://api.github.com/repos/mozilla/OpenWPM/pulls/769,769,Clean up un-context-managed use of open,#708 ,jyothisjagan,19793212,2020-10-18T06:41:32Z,CONTRIBUTOR,True,23,18,2,A web privacy measurement framework,Python,8414c3639e781e478c3c3852c4790f81c3b944fb,Clean up un-context-managed use of open
476,https://api.github.com/repos/mozilla/OpenWPM/pulls/768,768,"Removed Tuple[str,str], added Status obj, Fixes #619","This completely revamps the Status queue. Addresses issue #619 

Instead of constantly passing Tuple[str,str] into the Queue, we created a whole new Status object to be pickled.

As of right now, I can't properly test OpenWPM, as Catalina broke pip and some packages required to run OpenWPM.

Some help with debugging would be appreciated as I fix my end. ",Metropass,58116522,2020-10-16T22:28:02Z,CONTRIBUTOR,False,91,38,3,A web privacy measurement framework,Python,65c20203d4440765bc5883e459802ec1df39b553,"Removed Tuple[str,str], added Status obj

This completely revamps the Status queue.

Instead of constantly passing Tuple[str,str] into the Queue, we created a whole new Status object to be pickled."
477,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
478,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
479,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
480,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
481,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
482,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
483,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
484,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
485,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
486,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
487,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
488,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
489,https://api.github.com/repos/mozilla/OpenWPM/pulls/767,767,Command refactoring,"refactored dump page source and recursive page source dump
@vringar please review",cyruskarsan,55566678,2020-10-16T04:30:54Z,CONTRIBUTOR,True,117,160,12,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
490,https://api.github.com/repos/mozilla/OpenWPM/pulls/765,765,Change request_id to integer,"Fixes #748
Subsumes #752",vringar,13276717,2020-10-12T08:47:38Z,COLLABORATOR,True,17,44,7,A web privacy measurement framework,Python,52eee9fcb36ec0f96c27c50b08b6e152449df522,"Update all 'request_id' types in Data Aggregator to integer.

Fixes: #748

Signed-off-by: Richard O. Gregory <richardgrecoson@gmail.com>"
491,https://api.github.com/repos/mozilla/OpenWPM/pulls/765,765,Change request_id to integer,"Fixes #748
Subsumes #752",vringar,13276717,2020-10-12T08:47:38Z,COLLABORATOR,True,17,44,7,A web privacy measurement framework,Python,180f9737d17cb8db78ee9c16cdf4cc4078640f77,Changed requestId in web-request-event-details.ts to string
492,https://api.github.com/repos/mozilla/OpenWPM/pulls/764,764,"Revert ""Command refactoring""",Reverts mozilla/OpenWPM#763,vringar,13276717,2020-10-12T07:49:21Z,COLLABORATOR,True,57,72,4,A web privacy measurement framework,Python,63eddf2429a745398ffde38a7cffe941d2324eb9,"Revert ""Ported SaveScreenshotFullPage""

This reverts commit 1ef710fa3d4763c5c2678309996140e120a4c308."
493,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
494,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
495,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
496,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
497,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
498,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
499,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
500,https://api.github.com/repos/mozilla/OpenWPM/pulls/763,763,Command refactoring,refactored screenshot_full_page command to follow command sequence and formatted code with black.,cyruskarsan,55566678,2020-10-10T22:21:34Z,CONTRIBUTOR,True,72,57,4,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
501,https://api.github.com/repos/mozilla/OpenWPM/pulls/762,762,Update geckodriver version numbers,"Update the references of geckodriver 0.15 -> 0.26 & Check if new implementation is needed

Fixes #651 ",MLJBrackett,34899426,2020-10-08T22:41:04Z,NONE,False,3,0,1,A web privacy measurement framework,Python,4d7cfc5cc5352dd1579559cb06292237f39cfe31,updated version number
502,https://api.github.com/repos/mozilla/OpenWPM/pulls/762,762,Update geckodriver version numbers,"Update the references of geckodriver 0.15 -> 0.26 & Check if new implementation is needed

Fixes #651 ",MLJBrackett,34899426,2020-10-08T22:41:04Z,NONE,False,3,0,1,A web privacy measurement framework,Python,04b3d0d771c8e97a8b2d8917cb49f76093e861a9,added note
503,https://api.github.com/repos/mozilla/OpenWPM/pulls/762,762,Update geckodriver version numbers,"Update the references of geckodriver 0.15 -> 0.26 & Check if new implementation is needed

Fixes #651 ",MLJBrackett,34899426,2020-10-08T22:41:04Z,NONE,False,3,0,1,A web privacy measurement framework,Python,8ceb6dd35356109f3d2a4780951744ba84d3ca07,fixed note
504,https://api.github.com/repos/mozilla/OpenWPM/pulls/760,760,Update environment.yaml,"@vringar 
This is related to the issue #759 . I ran repin.sh in a new branch. After running this, I tested the installation on my OS : Ubuntu 18.04 and also on gitpod. Now both seems to be working fine. Installation, now does not cause the error mentioned in the issue.
",Prajwal7842,34996624,2020-10-07T04:45:52Z,CONTRIBUTOR,True,48,11,2,A web privacy measurement framework,Python,72fe004a4811828165f969fc4806206fed3d4713,Update environment.yaml
505,https://api.github.com/repos/mozilla/OpenWPM/pulls/757,757,Command refactoring,"@vringar I spent a while trying to understand your code and here's what I came up with (it will certainly need revision)
It looks like for the other classes you created, i.e. `GetCommand` and `BrowseCommand`, the only variables to be printed by repr method were to be instantiated of the class. In the `SaveScreenShotCommand` , when running `demo.py` I did not see it called anywhere and hence, did not know how to which variables to instaitate.

This leads me to a major issue I encountered. After unsuccessfully attempting to debug the program, I read that you must build `./scripts/build-extension.sh` and then run `python -m test.manual_test`
I did this and the program stopped (according to the terminal) but I did not know how to advance it. 
I've got a working copy of the repo in VScode and was hoping to set breakpoints throughout the program to see where certain methods (`saveScreenshot`) were being called. Do you have any advice? Thank you. ",cyruskarsan,55566678,2020-10-05T05:09:37Z,CONTRIBUTOR,True,25,29,5,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
506,https://api.github.com/repos/mozilla/OpenWPM/pulls/757,757,Command refactoring,"@vringar I spent a while trying to understand your code and here's what I came up with (it will certainly need revision)
It looks like for the other classes you created, i.e. `GetCommand` and `BrowseCommand`, the only variables to be printed by repr method were to be instantiated of the class. In the `SaveScreenShotCommand` , when running `demo.py` I did not see it called anywhere and hence, did not know how to which variables to instaitate.

This leads me to a major issue I encountered. After unsuccessfully attempting to debug the program, I read that you must build `./scripts/build-extension.sh` and then run `python -m test.manual_test`
I did this and the program stopped (according to the terminal) but I did not know how to advance it. 
I've got a working copy of the repo in VScode and was hoping to set breakpoints throughout the program to see where certain methods (`saveScreenshot`) were being called. Do you have any advice? Thank you. ",cyruskarsan,55566678,2020-10-05T05:09:37Z,CONTRIBUTOR,True,25,29,5,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
507,https://api.github.com/repos/mozilla/OpenWPM/pulls/757,757,Command refactoring,"@vringar I spent a while trying to understand your code and here's what I came up with (it will certainly need revision)
It looks like for the other classes you created, i.e. `GetCommand` and `BrowseCommand`, the only variables to be printed by repr method were to be instantiated of the class. In the `SaveScreenShotCommand` , when running `demo.py` I did not see it called anywhere and hence, did not know how to which variables to instaitate.

This leads me to a major issue I encountered. After unsuccessfully attempting to debug the program, I read that you must build `./scripts/build-extension.sh` and then run `python -m test.manual_test`
I did this and the program stopped (according to the terminal) but I did not know how to advance it. 
I've got a working copy of the repo in VScode and was hoping to set breakpoints throughout the program to see where certain methods (`saveScreenshot`) were being called. Do you have any advice? Thank you. ",cyruskarsan,55566678,2020-10-05T05:09:37Z,CONTRIBUTOR,True,25,29,5,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
508,https://api.github.com/repos/mozilla/OpenWPM/pulls/757,757,Command refactoring,"@vringar I spent a while trying to understand your code and here's what I came up with (it will certainly need revision)
It looks like for the other classes you created, i.e. `GetCommand` and `BrowseCommand`, the only variables to be printed by repr method were to be instantiated of the class. In the `SaveScreenShotCommand` , when running `demo.py` I did not see it called anywhere and hence, did not know how to which variables to instaitate.

This leads me to a major issue I encountered. After unsuccessfully attempting to debug the program, I read that you must build `./scripts/build-extension.sh` and then run `python -m test.manual_test`
I did this and the program stopped (according to the terminal) but I did not know how to advance it. 
I've got a working copy of the repo in VScode and was hoping to set breakpoints throughout the program to see where certain methods (`saveScreenshot`) were being called. Do you have any advice? Thank you. ",cyruskarsan,55566678,2020-10-05T05:09:37Z,CONTRIBUTOR,True,25,29,5,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
509,https://api.github.com/repos/mozilla/OpenWPM/pulls/756,756,Disabled s3 tests,"This way we can get CI passing again.
Closes #755",vringar,13276717,2020-09-30T10:48:30Z,COLLABORATOR,True,13,0,1,A web privacy measurement framework,Python,3a2349c6b3c4ce1b04e43b6b8c7e98faa4feddb4,Disabling s3 tests
510,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,6cdd9cb0f1bdde03641aa1abaf6a838b56355a16,"Fixes #233, removed built-in extensions

Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`"
511,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,93fdedff0590ac37bdbe0b6462ddc63861697920,Removed deleted extensions from JSON
512,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,13af2795734eb7707ed8f469cc3182c3d684ae4d,Updated to be formatted with black
513,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,0943000df51927e56bf0495148a150d0a9432b68,Removed AdBlock Plus from `browser_params`
514,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,b9dd319db602e67903957686c5fde09ec5f2a0ec,Removed `AdBlock` from JSON
515,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,2b1a54eff38feebb737abf402382156e7b2a7438,"Updated repo from PR #756, deleted firefox_extensions"
516,https://api.github.com/repos/mozilla/OpenWPM/pulls/754,754,"Fixes #233, removed built-in extensions","Removed from `configure_firefox.py`:
`ghostery`
`uBlock Origin`
`https-everywhere`

I also removed the whitespace to save a few bytes. I checked `deploy_browser.py`, `deploy_firefox.py`, and `selenium_firefox.py` just to make sure the removed extensions aren't referenced, but I found nothing.

I deleted the references within `default_browser_params.json`",Metropass,58116522,2020-09-29T15:47:17Z,CONTRIBUTOR,True,13,81,9,A web privacy measurement framework,Python,efe2e5210f8ab5421b7e2d8b27864037a7a5e648,Removed Storage Directory from configure_firefox.py
517,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,f252410e8f917372edd707475a05fbf5a6f8c6ad,First steps in the rewrite
518,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,0ba7de76e6f1aaa91b61277e187c3cd5d9e58630,Fixed import paths
519,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,d65af1e4a8a6f11412af70fdaf1080dc6e36b1dc,One giant refactor
520,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,0a18a1997c1ec26d012cb5d08bc411aae4feb626,Merge branch 'master' into DataAggregatorRefactor
521,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,3fb70b88ca550ade4c421b81897915484e0f1cdf,Fixing tests
522,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,53b55cdeaf79121297e18cdb5de070bc2104f168,Adding mypy
523,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,ec4c7df8ae5e966ea0cd0b01bfeaf6d94ef50de2,Removed mypy from pre-commit workflow
524,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,7288783082f5b71f557c9a78e266941979ad710d,First draft on DataAggregator
525,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,f6942540330ca79adee4de6a43a37031c0a5be29,Wrote a DataAggregator that starts and shuts down
526,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,b7e9b1d34da0e9779f42e45d09ba1a407416213d,Created tests and added more empty types
527,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,8eaf7ce283a0c91adb18fcbbe1cd5db9a18891ce,Got demo.py working
528,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,d633f9510e8fed5c5288429590ced2a158f64750,Created sql_provider
529,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,71ae8b06d412fe10f7a27454fb8ee59fc61b9326,Cleaned up imports in TaskManager
530,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,6e11e1b60666f55fd05d49512f9ab429957d4397,Added async
531,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,07db4ab2d003026da8285c3262386f34e811e9f4,Fixed minor bugs
532,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,f3857ac61320192770efce7300d4cbafecd25c7c,First steps at porting arrow
533,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,ee5d5b6ed90a1c4d7e02ec2269ae2d0d8077d6a6,Introduced TableName and different Task handling
534,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,9e06a5ee61b3c69b180d94e234535f25e75c92ca,Added more failing tests
535,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,2737ec099818f2b67c7531db0a5c68eb5b27bb79,First first completes others don't
536,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,c63ae828cbca517d482b5c6859bbbc3cab41d87e,It works
537,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,8177ed4b4b0dd72ce3995c8a57e6fb6fce2cc923,Started working on arrow_provider
538,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,50e1539e84c090a78e6970eda39f8d74835eb7e2,Implemented ArrowProvider
539,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,9e1d67e976350c718d040eda81405d2142b43811,Added logger fixture
540,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,fe2e977c5c91cd47986d309d108c828957d5bf71,Fixed test_storage_controller
541,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,157ee240e5608b8516305e89d8606e298487b85f,Fixing OpenWPMTest.visit()
542,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,52c4ff6161ac4e6d244151c88c1af54251b89755,Moved test/storage_providers to test/storage
543,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,1098727ab8b0d9457e37a7bab3b7209c9ca33a01,Fixing up tests
544,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,d7e7268a51c41532fc3c42306f367da121a3570f,Moved automation to openwpm
545,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,86fa88cab038d3765a30932d387251fa177ed51a,Merge branch 'master' into DataAggregatorRefactor
546,https://api.github.com/repos/mozilla/OpenWPM/pulls/753,753,Data Aggregator Rewrite,"This rewrite modularizes the storage provider setup to make it more flexible and easier to extend.
It also aims to reduce the coupling between how the extension outputs data and how it's passed to storage
Closes #561, Closes #652, Closes #684",vringar,13276717,2020-09-29T12:59:28Z,COLLABORATOR,True,4422,3095,96,A web privacy measurement framework,Python,ce5e901f5ebf7c144370bac6a2079876237358c3,Readded datadir to .gitignore
547,https://api.github.com/repos/mozilla/OpenWPM/pulls/752,752,Update all request_id types to integer.,"Fixes: #748

Signed-off-by: Richard O. Gregory <richardgrecoson@gmail.com>",richardgreg,35255909,2020-09-26T14:28:00Z,CONTRIBUTOR,False,50,13,6,A web privacy measurement framework,Python,32189a8dccb14103654c7ce957a97243e452dc28,"Update all 'request_id' types in Data Aggregator to integer.

Fixes: #748

Signed-off-by: Richard O. Gregory <richardgrecoson@gmail.com>"
548,https://api.github.com/repos/mozilla/OpenWPM/pulls/751,751,Fixed exception not bubbling correctly through the status_queue,Another tuple where we expected an exception,vringar,13276717,2020-09-17T09:57:01Z,COLLABORATOR,True,2,1,1,A web privacy measurement framework,Python,c6fd1417ff1e72ec7527a090a66dac7ce4de3655,Fixed exception bubbling
549,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,506bf90920b8f2f09e494962200bb007dfaa20f0,"Refactored GetCommand, BrowseCommand to have execute method"
550,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,d5d643f6691dfd8d3b819cd4e0e3e991c437f0a2,Fixed type name format issues in __issue_command
551,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,e7d164b7a89a1b3e756953a450a52fb9b93585e1,Fixed everything I broke
552,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,b97dbb136a1c15502f9a8dfd524aa1050adbcf8d,Changed import style so tests can run
553,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,e2035780eaeea76eb0d7da8163f08e3eb0a0759c,Added BrowseCommad to imports
554,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,58d033a341470620eb3711f9be1a87c6f4bddf15,Added some more self
555,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,5e0b6e5bab3e7ff7ad6972a23a640149a6150ccb,Added logging to explain failing test
556,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,b4d21cd24f0c3d275d7fd500727d6d01fb984098,Merge branch 'master' into CommandRefactoring
557,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,e3925210246709a2a63534cc09724c0249ecc986,Added one more self
558,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,3ec39833cfc9b30711bb3340f326e0a394c8d2f2,attempt at refactoring save_screenshot
559,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,8cef409362a0245c1dd36081d2f5372aba2b34c9,"fixed indentation, attempt at refactoring save_screenshot"
560,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,6815a25bba78350fa46352b29a3563e526d65d46,refactored SaveScreenshot command to have execute method
561,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,ab35cfc4c24217c5b36612fda23aec99e5ebdf8b,reformatted code using black
562,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,75f2b89fa482265214c249a66746c2a461b3b744,"Ported SaveScreenshotCommand

It now uses the new command.execute(...) syntax"
563,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,b8cf9d670662dab829a37241f516d2b490417f3b,:wqMerge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
564,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,de6701108d88401dd7337c9e7a72b8caaf7951f2,refactored savefullscreenshot command to follow command sequence
565,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,db1c2d5a9709f524a453c1773c5988d8fe729be9,formatted files with black
566,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,bbe7345525e0c6ded739f527c262484cd2d70478,removed extraneous commands
567,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,4f466a552716324d05574707c3a1ed9a992626b1,Ported SaveScreenshotFullPage #763
568,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,7af4fa4dbcbbe0c4609c43a0c692a91ff408bf95,Merge branch 'CommandRefactoring' of https://github.com/mozilla/OpenWPM into CommandRefactoring
569,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,7a89ef48a9cf5a6f903000583002e891fa4f9ad9,refactored dump page source and formatted code with black
570,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,ff22b148cc671ae2c8d732009d793d47c5d90ac0,reformatted recursive dump page source command and formatted code w black
571,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,c5958bd024d9a4f5b7b2bea8e9332f6dcf0f83a9,formatted files using isort
572,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,bedcfd8aa15722b9bb8f456afaa26674fea8f7c7,formatted all files with isort
573,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,4f2c63715a86ae32935bd47f398d08c2b78c1bc8,Ported DumpPageSource and RecursiveDumpPageSource (#767)
574,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,e8d314d8b6b41ccafb86be55c4d6b44d9c3e351b,refactor finalize command
575,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,3199dd54140d4afeb9b632734ea6abd87b501c62,refactored initalize command and formatted with black and isort
576,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,229079b3e0cdcc5151181e1e73d6f81cf9f84a58,didn't pull before I push. Resolve merge conflicts
577,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,b75fb66fa83119f8385a083c8ecb1b7f41a4eb43,missed a conflict
578,https://api.github.com/repos/mozilla/OpenWPM/pulls/750,750,Command refactoring,Closes #743 ,vringar,13276717,2020-09-17T09:00:21Z,COLLABORATOR,True,668,682,20,A web privacy measurement framework,Python,c5ff4ee47086f554957584f4a93eaca581a57fe6,"Command refactoring (#770)

* attempt at refactoring save_screenshot

* fixed indentation, attempt at refactoring save_screenshot

* refactored SaveScreenshot command to have execute method

* reformatted code using black

* refactored savefullscreenshot command to follow command sequence

* formatted files with black

* removed extraneous commands

* refactored dump page source and formatted code with black

* reformatted recursive dump page source command and formatted code w black

* formatted files using isort

* formatted all files with isort

* refactor finalize command

* refactored initalize command and formatted with black and isort

* missed a conflict"
579,https://api.github.com/repos/mozilla/OpenWPM/pulls/747,747,Bump node-fetch from 2.6.0 to 2.6.1 in /automation/Extension/webext-instrumentation,"Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/bitinn/node-fetch/releases"">node-fetch's releases</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<p>See <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md#v261"">CHANGELOG</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md"">node-fetch's changelog</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<ul>
<li>Fix: honor the <code>size</code> option after following a redirect.</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/b5e2e41b2b50bf2997720d6125accaf0dd68c0ab""><code>b5e2e41</code></a> update version number</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334""><code>2358a6c</code></a> Honor the <code>size</code> option after following a redirect and revert data uri support</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/8c197f8982a238b3c345c64b17bfa92e16b4f7c4""><code>8c197f8</code></a> docs: Fix typos and grammatical errors in README.md (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/686"">#686</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1e99050f944ac435fce26a9549eadcc2419a968a""><code>1e99050</code></a> fix: Change error message thrown with redirect mode set to error (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/653"">#653</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/244e6f63d42025465796e3ca4ce813bf2c31fc5b""><code>244e6f6</code></a> docs: Show backers in README</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/6a5d192034a0f438551dffb6d2d8df2c00921d16""><code>6a5d192</code></a> fix: Properly parse meta tag when parameters are reversed (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/682"">#682</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/47a24a03eb49a49d81b768892aee10074ed54a91""><code>47a24a0</code></a> chore: Add opencollective badge</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/7b136627c537cb24430b0310638c9177a85acee1""><code>7b13662</code></a> chore: Add funding link</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/5535c2ed478d418969ecfd60c16453462de2a53f""><code>5535c2e</code></a> fix: Check for global.fetch before binding it (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/674"">#674</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1d5778ad0d910dbd1584fb407a186f5a0bc1ea22""><code>1d5778a</code></a> docs: Add Discord badge</li>
<li>Additional commits viewable in <a href=""https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~akepinski"">akepinski</a>, a new releaser for node-fetch since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=node-fetch&package-manager=npm_and_yarn&previous-version=2.6.0&new-version=2.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-09-14T09:04:04Z,CONTRIBUTOR,True,91,366,1,A web privacy measurement framework,Python,6a829513e913cb78cd9a8e42ade385bc939a4105,"Bump node-fetch in /automation/Extension/webext-instrumentation

Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
- [Release notes](https://github.com/bitinn/node-fetch/releases)
- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)
- [Commits](https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1)

Signed-off-by: dependabot[bot] <support@github.com>"
580,https://api.github.com/repos/mozilla/OpenWPM/pulls/746,746,Hotfixing kill_process_and_children,I managed to forget to pass a logger everywhere and we don't have any tests on this codepath,vringar,13276717,2020-09-13T10:08:19Z,COLLABORATOR,True,5,4,3,A web privacy measurement framework,Python,55a0f6f5945528117ff275d037d1baf7a24629c4,Hotfixing kill_process_and_children
581,https://api.github.com/repos/mozilla/OpenWPM/pulls/744,744,Bump node-fetch from 2.6.0 to 2.6.1 in /automation/Extension/webext-instrumentation,"Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/bitinn/node-fetch/releases"">node-fetch's releases</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<p>See <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md#v261"">CHANGELOG</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md"">node-fetch's changelog</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<ul>
<li>Fix: honor the <code>size</code> option after following a redirect.</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/b5e2e41b2b50bf2997720d6125accaf0dd68c0ab""><code>b5e2e41</code></a> update version number</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334""><code>2358a6c</code></a> Honor the <code>size</code> option after following a redirect and revert data uri support</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/8c197f8982a238b3c345c64b17bfa92e16b4f7c4""><code>8c197f8</code></a> docs: Fix typos and grammatical errors in README.md (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/686"">#686</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1e99050f944ac435fce26a9549eadcc2419a968a""><code>1e99050</code></a> fix: Change error message thrown with redirect mode set to error (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/653"">#653</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/244e6f63d42025465796e3ca4ce813bf2c31fc5b""><code>244e6f6</code></a> docs: Show backers in README</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/6a5d192034a0f438551dffb6d2d8df2c00921d16""><code>6a5d192</code></a> fix: Properly parse meta tag when parameters are reversed (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/682"">#682</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/47a24a03eb49a49d81b768892aee10074ed54a91""><code>47a24a0</code></a> chore: Add opencollective badge</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/7b136627c537cb24430b0310638c9177a85acee1""><code>7b13662</code></a> chore: Add funding link</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/5535c2ed478d418969ecfd60c16453462de2a53f""><code>5535c2e</code></a> fix: Check for global.fetch before binding it (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/674"">#674</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1d5778ad0d910dbd1584fb407a186f5a0bc1ea22""><code>1d5778a</code></a> docs: Add Discord badge</li>
<li>Additional commits viewable in <a href=""https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~akepinski"">akepinski</a>, a new releaser for node-fetch since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=node-fetch&package-manager=npm_and_yarn&previous-version=2.6.0&new-version=2.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-09-11T18:15:02Z,CONTRIBUTOR,True,15,15,1,A web privacy measurement framework,Python,410f2014b4738dc51c6e2fb7aac57d6864037228,"Bump node-fetch in /automation/Extension/webext-instrumentation

Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
- [Release notes](https://github.com/bitinn/node-fetch/releases)
- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)
- [Commits](https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1)

Signed-off-by: dependabot[bot] <support@github.com>"
582,https://api.github.com/repos/mozilla/OpenWPM/pulls/740,740,Replaced autopep8 and flake8 with black,"As we want to add more type annotations our code will get longer and require more line breaks, and where to place them and how to format the code around them can take up a lot of time and energy. Especially when the types get programmatically inserted such as with [pyannotate](https://github.com/dropbox/pyannotate).

To save us this time, I introduced black which automatically formats code to be pep8 compliant instead of nagging us to do it.
Closes #723
",vringar,13276717,2020-09-07T11:34:55Z,COLLABORATOR,True,3770,2991,52,A web privacy measurement framework,Python,0258ae527aa28515b1f7fbb38bd37e9f8b173969,Added black
583,https://api.github.com/repos/mozilla/OpenWPM/pulls/738,738,Separate JS instrument config from table,"This moves the js instrumentation config to a separate line so it doesn't create a huge and unreadable table. While we'd like to find a better way to output this information in the future, this removes the unnecessary messiness until then.

Closes #733. ",englehardt,3280150,2020-08-24T21:13:24Z,MEMBER,True,10,0,1,A web privacy measurement framework,Python,9231549a9b99b5206c350c7d60989cc370df319e,Separate JS instrument config from table
584,https://api.github.com/repos/mozilla/OpenWPM/pulls/738,738,Separate JS instrument config from table,"This moves the js instrumentation config to a separate line so it doesn't create a huge and unreadable table. While we'd like to find a better way to output this information in the future, this removes the unnecessary messiness until then.

Closes #733. ",englehardt,3280150,2020-08-24T21:13:24Z,MEMBER,True,10,0,1,A web privacy measurement framework,Python,ef1afcf0892e02ca8bbbf57cc956fbb4e5ddaafe,Load the js_instrument_settings into a dict
585,https://api.github.com/repos/mozilla/OpenWPM/pulls/737,737,Fixed CriticalChildException in TaskManager.py,"We're getting a tuple instead of just the exception in python 3 so we need to unpack the tuple.
To test this code merge https://github.com/mozilla/OpenWPM/pull/735 and then comment out 
https://github.com/mozilla/OpenWPM/blob/dc9e02bdf2400f42754fa2876a16ff4a7cabd33f/test/test_profile.py#L106
This will trigger an assertion error in the BrowserManager, which will bubble into the TaskManager were the changed code will expose the desired behaviour.

While I see the necessity to test this code path I haven't attached any tests.
Closes #547",vringar,13276717,2020-08-24T18:55:37Z,COLLABORATOR,True,2,8,1,A web privacy measurement framework,Python,4ea8272e4668591c854c32ed55c1dd796216f811,Fixed CriticalChildException in TaskManager.py
586,https://api.github.com/repos/mozilla/OpenWPM/pulls/736,736,Moved all s3 tests into one class,"to avoid https://github.com/mozilla/OpenWPM/issues/732
Please note that this doesn't close the issue.",vringar,13276717,2020-08-24T18:08:37Z,COLLABORATOR,True,729,420,5,A web privacy measurement framework,Python,f078d148283552993cf3e1ed458ca17e98a4fa8b,"Moved all s3 tests into one class

to avoid https://github.com/mozilla/OpenWPM/issues/732
Please note that this doesn't close the issue"
587,https://api.github.com/repos/mozilla/OpenWPM/pulls/736,736,Moved all s3 tests into one class,"to avoid https://github.com/mozilla/OpenWPM/issues/732
Please note that this doesn't close the issue.",vringar,13276717,2020-08-24T18:08:37Z,COLLABORATOR,True,729,420,5,A web privacy measurement framework,Python,5b34a97248be5cc9daaa829b0fdab33c6505855e,Fixed test_callback.py
588,https://api.github.com/repos/mozilla/OpenWPM/pulls/735,735,Introducing seed profile,Closes #734,vringar,13276717,2020-08-24T16:09:29Z,COLLABORATOR,True,78,19,7,A web privacy measurement framework,Python,e3e8012266e4705e6aa0791983e4600154b0beee,Differentiating seed_profile and recovery_profile
589,https://api.github.com/repos/mozilla/OpenWPM/pulls/735,735,Introducing seed profile,Closes #734,vringar,13276717,2020-08-24T16:09:29Z,COLLABORATOR,True,78,19,7,A web privacy measurement framework,Python,be49f4c632cf748a8dde311d63007756b21ec736,Created test_seed_persistance
590,https://api.github.com/repos/mozilla/OpenWPM/pulls/735,735,Introducing seed profile,Closes #734,vringar,13276717,2020-08-24T16:09:29Z,COLLABORATOR,True,78,19,7,A web privacy measurement framework,Python,dc9e02bdf2400f42754fa2876a16ff4a7cabd33f,"Added exception handling in test_seed_persistance

instead of letting the WebDriverException bubble up
we're now turning it into an AssertionError"
591,https://api.github.com/repos/mozilla/OpenWPM/pulls/735,735,Introducing seed profile,Closes #734,vringar,13276717,2020-08-24T16:09:29Z,COLLABORATOR,True,78,19,7,A web privacy measurement framework,Python,a20c7b608081e46178030280adcb19b39d4d9e4a,Add more specific seed_tar documentation to README
592,https://api.github.com/repos/mozilla/OpenWPM/pulls/731,731,Expaned the assertion in CriticalChildException,"This way we can actually see what's going on instead of
just getting told again that exc isn't of type BaseException",vringar,13276717,2020-08-10T15:10:13Z,COLLABORATOR,True,6,1,1,A web privacy measurement framework,Python,1843d42cdcece5ef0d1969c5833daec7b094c441,"Expaned the assertion in CriticalChildException

This way we can actually see what's going on instead of
just getting told again that exc isn't of type exception"
593,https://api.github.com/repos/mozilla/OpenWPM/pulls/731,731,Expaned the assertion in CriticalChildException,"This way we can actually see what's going on instead of
just getting told again that exc isn't of type BaseException",vringar,13276717,2020-08-10T15:10:13Z,COLLABORATOR,True,6,1,1,A web privacy measurement framework,Python,6afc6c5eea885e617ef0ea3e73bdc1710882273e,Cleaned up
594,https://api.github.com/repos/mozilla/OpenWPM/pulls/731,731,Expaned the assertion in CriticalChildException,"This way we can actually see what's going on instead of
just getting told again that exc isn't of type BaseException",vringar,13276717,2020-08-10T15:10:13Z,COLLABORATOR,True,6,1,1,A web privacy measurement framework,Python,c1ca34cb191d3d4b901b330eaaa1a932f638259f,Finally figured out good formatting
595,https://api.github.com/repos/mozilla/OpenWPM/pulls/731,731,Expaned the assertion in CriticalChildException,"This way we can actually see what's going on instead of
just getting told again that exc isn't of type BaseException",vringar,13276717,2020-08-10T15:10:13Z,COLLABORATOR,True,6,1,1,A web privacy measurement framework,Python,6b8cfdfb77c9a587953847aca0aec550ffac7b1d,Improved error message on assertion failure
596,https://api.github.com/repos/mozilla/OpenWPM/pulls/730,730,Renamed crawl_id to browser_id,Closes #701,vringar,13276717,2020-08-07T21:27:01Z,COLLABORATOR,True,168,165,25,A web privacy measurement framework,Python,e242ccc4f25d4adaa83af56a32f827745f350fb6,Renamed crawl_id to browser_id
597,https://api.github.com/repos/mozilla/OpenWPM/pulls/729,729,Make CI error out if our tests aren't passing,Closes #707,vringar,13276717,2020-08-07T21:05:26Z,COLLABORATOR,True,14,8,2,A web privacy measurement framework,Python,4f589e0453cff19fd5d3847217d99af301e20834,Make python tests error out if they aren't passing
598,https://api.github.com/repos/mozilla/OpenWPM/pulls/729,729,Make CI error out if our tests aren't passing,Closes #707,vringar,13276717,2020-08-07T21:05:26Z,COLLABORATOR,True,14,8,2,A web privacy measurement framework,Python,1956c5004a4c4f7128c1a124b705d7123fa49f45,Adding missing semicolon
599,https://api.github.com/repos/mozilla/OpenWPM/pulls/729,729,Make CI error out if our tests aren't passing,Closes #707,vringar,13276717,2020-08-07T21:05:26Z,COLLABORATOR,True,14,8,2,A web privacy measurement framework,Python,0729ed48230c0a6bca7da33e702a9fc5169f4449,"Moved travis script into file

This is done to avoid Travis removing all newlines in the file making
it unparseable for bash"
600,https://api.github.com/repos/mozilla/OpenWPM/pulls/729,729,Make CI error out if our tests aren't passing,Closes #707,vringar,13276717,2020-08-07T21:05:26Z,COLLABORATOR,True,14,8,2,A web privacy measurement framework,Python,7c93164a00405208704fbff93472fa5556595931,Fixing travis.sh
601,https://api.github.com/repos/mozilla/OpenWPM/pulls/729,729,Make CI error out if our tests aren't passing,Closes #707,vringar,13276717,2020-08-07T21:05:26Z,COLLABORATOR,True,14,8,2,A web privacy measurement framework,Python,ff89476044285312b7fe1a1cee5967e7326ef981,"Delete test_failure.py

Removing intentional test failure."
602,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,7047e57ae73c0a142486d8f0fd56adb1295db1a8,Renamed browser_pid to geckodriver_pid
603,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,6c72fd18db9949df207ffe1db02378ead62ecacb,"Update automation/TaskManager.py

Co-authored-by: Stefan Zabka <szabka@mozilla.com>"
604,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,cf103bc28918dd1754366f73e712e5c138240acd,Refactored kill_process_and_children into existance
605,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,37aaabc70c5cde22fd1a3f6f80d32e2aec47cc3e,Update automation/TaskManager.py
606,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,272a389b6f51cad2f3b10deb2787add60d4e4dff,Merge remote-tracking branch 'origin/geckodriver_pid' into geckodriver_pid
607,https://api.github.com/repos/mozilla/OpenWPM/pulls/728,728,Renamed browser_pid to geckodriver_pid,,vringar,13276717,2020-08-07T20:51:57Z,COLLABORATOR,True,37,37,3,A web privacy measurement framework,Python,718e8cdb67117ca2a0bdf4ddc7eda898d34dddd8,Made the process watchdog functional again
608,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,292b307f303f5d9779f1579d5282287205624663,"Moved travis script into file

This is done to avoid Travis removing all newlines in the file making
it unparseable for bash"
609,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,428ed5ecccc0fa67882b365c437bb78382936ecf,Upgrade to FF79
610,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,fbc7c44a261a3b8b1145fa5aa6cfc8db3760b8c9,Fixed test_cache_hits_recorded
611,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,ae4a1c0b686a79b202233e7d7d97eec6c12f7015,Less things are cached??
612,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,1e97443ff95517218bcc347a45d0c9f2942aaa0a,Preparing release v0.12.0
613,https://api.github.com/repos/mozilla/OpenWPM/pulls/727,727,Release v0.12.0 with FF80,,vringar,13276717,2020-08-07T20:36:09Z,COLLABORATOR,True,671,1031,10,A web privacy measurement framework,Python,5788e41ceb2572c187213db1994af0f8d06aaa0b,Added regression note
614,https://api.github.com/repos/mozilla/OpenWPM/pulls/726,726,Added scripts to set PYTHONUSERSITE,"This also puts in place a more general infrastructure
should we ever become more opinionated and
automatically hook up things like pre-commit

Closes #689",vringar,13276717,2020-08-07T19:55:07Z,COLLABORATOR,False,46,0,4,A web privacy measurement framework,Python,eb5328e398b1d78575283c16b32329de3baa22b4,"Added scripts to set PYTHONUSERSITE

This also puts in place a more general infrastructure
should we ever become more opinionated and
automatically hook up things like pre-commit"
615,https://api.github.com/repos/mozilla/OpenWPM/pulls/726,726,Added scripts to set PYTHONUSERSITE,"This also puts in place a more general infrastructure
should we ever become more opinionated and
automatically hook up things like pre-commit

Closes #689",vringar,13276717,2020-08-07T19:55:07Z,COLLABORATOR,False,46,0,4,A web privacy measurement framework,Python,c2941ce4df0e8ce3dbc9a9e37f46393d028c948e,Added newlines for conda_scripts
616,https://api.github.com/repos/mozilla/OpenWPM/pulls/722,722,Update examples for JS instrument settings,Closes #720,vringar,13276717,2020-08-07T08:57:03Z,COLLABORATOR,True,9,8,1,A web privacy measurement framework,Python,4068cb5419bee080dc4dbd2c08a9a0b572e6fe18,"Update examples for JS instrument settings

Closes #720"
617,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,ed90f64c5ce26778f43d4cdae9cebb6c12b560b0,fixed missing logging output (Issue #258)
618,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,e37186d257a355d94e7407465b36aa8ee8a376a2,fixed missing logging output (Issue #258)
619,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,a8837de50abc2d5b3090b246b597424f00f543f8,fixed missing logging output (Issue #258)
620,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,f28b25adc7a8cfb7ef9e3e368553db401ec22cba,fixed missing logging output (Issue #258)
621,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,f29a271d9b6f3c523c2c42a9caa0a03bf5c8c181,resolving local conflicts
622,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,1fe9deaa3def8cc109d7b47a6bf785d23eb292e3,merge with latest upstream/master
623,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,b410932eda29b608d6b0ebd0b082f8ee0dee080d,merge with latest upstream/master
624,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,dfa970f1719c59fd2279a7d6805a4ad3e70e52f3,added DNS resolution support
625,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,22780267f6524521331e0747d02be1b66a0c2929,updated the demo and reverted one local change in teh HTTP instrumentation
626,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,0e307af221af89c01fc8f9f5b62e5691a94cc908,add dns instrumentation class
627,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,12e58b44c54b242535765e3f9052b815b2a5095a,removed old (unused?) files
628,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,243c54b1d077ea773f04cf8ead4cf38ff716c28c,added DNS resolution to the arrow/parquet schema
629,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,561e80d4ad9c64b173c7a2fd9f68c4bbf3aa59e2,added export/import of the ResourceType arry from http-instrument.ts
630,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,1c897b005c77e6c1c3da7faf4d9f72eda62a6cfd,fixed some permission changes
631,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,871edf48d3ecad909d74d5652b7ee366513578d4,Added test for dns instrument
632,https://api.github.com/repos/mozilla/OpenWPM/pulls/721,721,Added support to allow to track the resolution of DNS requests.,"This pull request offers the option to log the resolution of DNS requests.
This allows one to track and detect, for example, [CNAME cloaking](https://tma.ifip.org/2020/wp-content/uploads/sites/9/2020/06/tma2020-camera-paper66.pdf) or to easily determine the possible IP address used by Firefox (e.g., to detect violations to the GDPR or CCPA).

The implementation uses the `browser.dns` interface provided by Firefox and writes results provided by the interface into the `dns_resolution` table in the SQLite database.
",turban1988,29097632,2020-08-05T09:45:31Z,CONTRIBUTOR,True,1174,757,14,A web privacy measurement framework,Python,e6e4d46890574ce0790ec253f07b77ce7423890b,"Merge pull request #1 from mozilla/dns_instrument

Added test for dns instrument"
633,https://api.github.com/repos/mozilla/OpenWPM/pulls/718,718,Bump elliptic from 6.5.2 to 6.5.3 in /automation/Extension/firefox,"Bumps [elliptic](https://github.com/indutny/elliptic) from 6.5.2 to 6.5.3.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/indutny/elliptic/commit/8647803dc3d90506aa03021737f7b061ba959ae1""><code>8647803</code></a> 6.5.3</li>
<li><a href=""https://github.com/indutny/elliptic/commit/856fe4d99fe7b6200556e6400b3bf585b1721bec""><code>856fe4d</code></a> signature: prevent malleability and overflows</li>
<li>See full diff in <a href=""https://github.com/indutny/elliptic/compare/v6.5.2...v6.5.3"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=elliptic&package-manager=npm_and_yarn&previous-version=6.5.2&new-version=6.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-07-30T14:08:35Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,4adfc6288a1a481a7ffae52afb774474a1a00908,"Bump elliptic from 6.5.2 to 6.5.3 in /automation/Extension/firefox

Bumps [elliptic](https://github.com/indutny/elliptic) from 6.5.2 to 6.5.3.
- [Release notes](https://github.com/indutny/elliptic/releases)
- [Commits](https://github.com/indutny/elliptic/compare/v6.5.2...v6.5.3)

Signed-off-by: dependabot[bot] <support@github.com>"
634,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,6f4ea999c075780aadc503f3826562160c87564b,Initial port of wiki
635,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,43c7d80441661ae2afcb943d6c51ecaef14d6b68,Switched back to stars
636,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,b23ab6eca764544761d11dc148f62187c2919d13,Moved developer troubleshooting into CONTRIBUTING.md
637,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,b03a4bbdffca7d291b75d4f86ff836a2a1c9e246,Cleaning up
638,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,ea9ef6328ce9acd3b7826a9eeae6f4d606fea34d,Moved stuff around and added tooling
639,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,91a698a0fd0c55be272e33a4af0e25ac508d59db,Fixed error in custom command tutorial
640,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,de11b1560d686a27a4634ea85b5235321d7b5be5,Fixed formatting error
641,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,df5a1ac593fd861d5c7723ab7ebaeea1bc6024de,Cleaned up the extensions readmes
642,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,5b20212931d3d9fdd3f48951e88304505ef1a791,Moved wiki into docs/
643,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,5178bc8271cce7981ad1a7652e3cfbb9b1ba990f,Deleted Available-Commands.md
644,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,64f5a3d784b09d8c940fd1bccf561952e29a753d,Starting to work on Platform-Architecture.md
645,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,0409761a1425f2fb59ca1de6e0f9c9dd39b4344d,Rewrote Platform-Architecture.md
646,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,6b770c3ac9c1ac80da61d8a21de7db91084803a2,Minor cleanup
647,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,1dd5f208c2b7f9d54e692e96f0e06c2ab5e7b597,Moved Troubleshooting into README.md
648,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,26d4ecfa0134142c78ecdd301eb4ffee1e4f570d,Moved Mac OSX section into README.md
649,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,eb3012523d3b68f3f7027054e82c8dabf5a03067,Added link to OpenWPM riot channel
650,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,1223afc663ad039a2c897d1b804202766dcae4cf,Removed references to extensions
651,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,241515787f5661561af1223398409d3b7017ef4e,Created Configuration.md
652,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,e8ddbeb3216b453c1cfb54ebffa9b0411b7c6353,Added more TODOs
653,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,a94b1eb3f377de85e56433546adca621ccba7977,More crossreferencing
654,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,ab7bbb766f55f5579a65d6b4dce3abc2954d75a8,"Apply suggestions from code review

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
655,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,54f9b9ccf07c68bd5bc1f875ca380f22196bc9f6,"Update README.md

Co-authored-by: Steven Englehardt <senglehardt@mozilla.com>"
656,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,4a139ee3faf9f6959093c55392d391fa0d75bc50,Fixed numbers
657,https://api.github.com/repos/mozilla/OpenWPM/pulls/716,716,Pulling the wiki into the repo,"The wiki was horribly out of date since it was never checked out to disk and never updated alongside the code.
This PR aims to change that by moving all files that previously existed as part of wiki into a wiki folder.",vringar,13276717,2020-07-24T14:14:48Z,COLLABORATOR,True,1956,628,14,A web privacy measurement framework,Python,c638692e47f4ee6849e802e69854e4b96c1e5795,Fixed links
658,https://api.github.com/repos/mozilla/OpenWPM/pulls/715,715,Update hash function - use await (and generally clean up),"This code change updates the sha256 function to match the latest code on MDN.

It's my attempt to fix #711. 

I don't think we could say we definitively know it's worked to fix #711 without running it with a large crawl and repeating the analysis I did.

That said, we have tests in `test_http_instrumentation.py` that explicitly test for expected hashes. 

This code is simpler than the previous code. So if we think the tests are sufficient, then we could merge this on the grounds it's simpler and have an outstanding todo to rerun an analysis when a crawl's been run with this fix in.",birdsarah,1796208,2020-07-23T21:53:39Z,MEMBER,True,272,594,3,A web privacy measurement framework,Python,9804b889828fbef7128b6bb6d4effff707464d0d,Update hash function to use await
659,https://api.github.com/repos/mozilla/OpenWPM/pulls/713,713,Bump codecov from 3.7.0 to 3.7.1 in /automation/Extension/webext-instrumentation,"Bumps [codecov](https://github.com/codecov/codecov-node) from 3.7.0 to 3.7.1.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/codecov/codecov-node/commit/29dd5b6b039ce03c7bc368855896641441233417""><code>29dd5b6</code></a> 3.7.1</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/c0711c656686e902af2cd92d6aecc8074de4d83d""><code>c0711c6</code></a> Switch from execSync to execFileSync (<a href=""https://github-redirect.dependabot.com/codecov/codecov-node/issues/180"">#180</a>)</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/5f6cc62d4f83bf3a75c973868259798814cd231e""><code>5f6cc62</code></a> Bump lodash from 4.17.15 to 4.17.19 (<a href=""https://github-redirect.dependabot.com/codecov/codecov-node/issues/183"">#183</a>)</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/0c4d7f3c6f2950445913e7f8081b26da4b41cbad""><code>0c4d7f3</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/codecov/codecov-node/issues/182"">#182</a> from codecov/update-readme-badges</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/cc5e1218426f21beaea94908775342623c27934b""><code>cc5e121</code></a> Update depstat image and urls</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/b44b44e1f8265d8f8b8f27c343283d6d2e8ee668""><code>b44b44e</code></a> Update readme with 400 error info (<a href=""https://github-redirect.dependabot.com/codecov/codecov-node/issues/181"">#181</a>)</li>
<li><a href=""https://github.com/codecov/codecov-node/commit/bb793357190e1d799da5b5732ef57d1e7968680a""><code>bb79335</code></a> V3.7.0 (<a href=""https://github-redirect.dependabot.com/codecov/codecov-node/issues/179"">#179</a>)</li>
<li>See full diff in <a href=""https://github.com/codecov/codecov-node/compare/v3.7.0...v3.7.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=codecov&package-manager=npm_and_yarn&previous-version=3.7.0&new-version=3.7.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-07-21T12:41:18Z,CONTRIBUTOR,True,4,4,2,A web privacy measurement framework,Python,445bae85078159e811b8e3e22d5e4b30ba1c4e2e,"Bump codecov in /automation/Extension/webext-instrumentation

Bumps [codecov](https://github.com/codecov/codecov-node) from 3.7.0 to 3.7.1.
- [Release notes](https://github.com/codecov/codecov-node/releases)
- [Commits](https://github.com/codecov/codecov-node/compare/v3.7.0...v3.7.1)

Signed-off-by: dependabot[bot] <support@github.com>"
660,https://api.github.com/repos/mozilla/OpenWPM/pulls/712,712,Bump lodash from 4.17.15 to 4.17.19 in /automation/Extension/firefox,"Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to 4.17.19.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/lodash/lodash/releases"">lodash's releases</a>.</em></p>
<blockquote>
<h2>4.17.16</h2>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a> Bump to v4.17.19</li>
<li><a href=""https://github.com/lodash/lodash/commit/2e1c0f22f425e9c013815b2cd7c2ebd51f49a8d6""><code>2e1c0f2</code></a> Add npm-package</li>
<li><a href=""https://github.com/lodash/lodash/commit/1b6c282299f4e0271f932b466c67f0f822aa308e""><code>1b6c282</code></a> Bump to v4.17.18</li>
<li><a href=""https://github.com/lodash/lodash/commit/a370ac81408de2da77a82b3c4b61a01a3b9c2fac""><code>a370ac8</code></a> Bump to v4.17.17</li>
<li><a href=""https://github.com/lodash/lodash/commit/1144918f3578a84fcc4986da9b806e63a6175cbb""><code>1144918</code></a> Rebuild lodash and docs</li>
<li><a href=""https://github.com/lodash/lodash/commit/3a3b0fd339c2109563f7e8167dc95265ed82ef3e""><code>3a3b0fd</code></a> Bump to v4.17.16</li>
<li><a href=""https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12""><code>c84fe82</code></a> fix(zipObjectDeep): prototype pollution (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4759"">#4759</a>)</li>
<li><a href=""https://github.com/lodash/lodash/commit/e7b28ea6cb17b4ca021e7c9d66218c8c89782f32""><code>e7b28ea</code></a> Sanitize sourceURL so it cannot affect evaled code (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4518"">#4518</a>)</li>
<li><a href=""https://github.com/lodash/lodash/commit/0cec225778d4ac26c2bac95031ecc92a94f08bbb""><code>0cec225</code></a> Fix lodash.isEqual for circular references (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4320"">#4320</a>) (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4515"">#4515</a>)</li>
<li><a href=""https://github.com/lodash/lodash/commit/94c3a8133cb4fcdb50db72b4fd14dd884b195cd5""><code>94c3a81</code></a> Document matches* shorthands for over* methods (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4510"">#4510</a>) (<a href=""https://github-redirect.dependabot.com/lodash/lodash/issues/4514"">#4514</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/lodash/lodash/compare/4.17.15...4.17.19"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~mathias"">mathias</a>, a new releaser for lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.15&new-version=4.17.19)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-07-16T22:48:28Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,0f15e7cfd34121b8a6435cfd3a75df452c1f8d48,"Bump lodash from 4.17.15 to 4.17.19 in /automation/Extension/firefox

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to 4.17.19.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.17.15...4.17.19)

Signed-off-by: dependabot[bot] <support@github.com>"
661,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,8198e7ffaa461873a1e1c4b26d5cd385bca51fc2,Update to FF 78_0_1
662,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,a033a9bf72bf6fd5e835315eb5f0801b5beb3b95,npm updates
663,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,96437f12dc2e6ac2a787cc6c17dc4fad5bf1a482,Repin python (including unpinning localstack)
664,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,ac6cd8c0744a9bb815da68e89a27242891604bbd,New version number.
665,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,b7bd1309cf901141df76e05df19f2c78f1516cd4,"Make CHANGELOG a markdown file, so it renders nicely"
666,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,3a14d98be43178d919577163015168cf300b5639,Keep pinning localstack
667,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,cdb747179c5ae3339ffda8aba8d5e7ec366a9ee7,"Add CHANGELOG, tweak to full rst"
668,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,8363ae0ff23b6a5690b952241460a8917072e615,Some RST fixups
669,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,cb2aab68a2b071a5451667de15d97da2077d70e1,Actually update the FF version!
670,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,4a4206c961715238967eebeb42e27ccacc3b6819,"Revert ""Keep pinning localstack""

This reverts commit 3a14d98be43178d919577163015168cf300b5639."
671,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,e282b4f3d6164366d871af0615c535787d5371ba,Update codecov target - it's making it look like CI is failing
672,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,783026d9fe48537e0b7fa56ea24a987d9a20d1f7,"Revert ""Revert ""Keep pinning localstack""""

This reverts commit 4a4206c961715238967eebeb42e27ccacc3b6819."
673,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,6fd699ded420e5a419f13e70fa0145e3d8fe8a4b,Update changelog to markdown
674,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,87d242fd29a4aa44a6edd5546cb289da67fa41f3,Merge branch 'master' into ff78
675,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,3c0830620783143a582f4f1c66ea0582dcc152f5,Repin environment.yaml
676,https://api.github.com/repos/mozilla/OpenWPM/pulls/706,706,v0.11.0 / Firefox 78.0.1 release,"Note this PR also reduces the codecov to what we actually currently have, as it makes it look like the CI is failing when it's not. I should have probably done this in #703.

Sorry for the back and forth on localstack. I thought we were passing, but we weren't - see #707.",birdsarah,1796208,2020-07-08T06:11:49Z,MEMBER,True,772,1876,10,A web privacy measurement framework,Python,19c7a5c047637efb5ea1e321a2d9ffbbfa0480b0,Update to 40% now we have it.
677,https://api.github.com/repos/mozilla/OpenWPM/pulls/705,705,Asserting that unpickled exception is an exception,Allows us to investigate #547,vringar,13276717,2020-06-29T13:51:09Z,COLLABORATOR,True,3,1,1,A web privacy measurement framework,Python,08d91bbef3e313333e45fa4420becf78d4fa27c0,Asserting that unpickled exception is an exception
678,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,de1bd565341a70cfa7f3bcc64d882a347a5965c4,Rename DataAggregator to data_aggregator
679,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,7c8538d171a36ff537bedb76b3ffe1340e210791,A little moving files around and ref the new builder.
680,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,c32727421134f1a6c24d8d4a922e50352bbca39d,Implement new DataAggregator builder function
681,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,39d728a8d969a0f513f2811dad44cb108973ae02,Merge branch 'master' into structured_aggregator
682,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,1d196930de7e572c7023bdf0d1de5e620c9185e7,Merge branch 'master' into structured_aggregator
683,https://api.github.com/repos/mozilla/OpenWPM/pulls/704,704,Structured aggregator,"This PR is functionally a no-op, but it starts us down the path of splitting up the aggregators (see #701, #652, #561).

This PR dynamically builds a class DataAggregator pulling in either former LocalAggregator methods or former S3Aggregator methods.

We should be able to build on this relatively simply to start adding, for example, parquet saving locally. There maybe some combinations we never want to support - e.g. ldb in an s3 context (seems like we could support that though, even though it would be a little odd for distributed crawls).

I'm thinking that once we have unpacked the classes so that the type of structured/content data and how you save it are separate we can work on the pieces to unify the structured data processing with something like sqlalchemy and a single schema.

Open questions:
- should you be able to send structured data and unstructured data to separate destinations? Can we live with not being able to do this for now.
- Why not have more listeners - one running process_record (listening to data coming up from the socket and parsing it out) and then one each for structured and unstructured data? (just a thought - this could pave the way for one process_record listener per browser if that was useful)

Notes:
- Don't see the need for s3_bucket and s3_directory
- Don't see the need for user's to be able to specify the database name - they can just specify the folder - like they do with s3
- I think this can work gracefully if we unify some concepts - like handling batches - which are in both.
- The tricky bit is that sometimes there's interplay between what you're storing and where you're storing it, so we need to make a graceful interface that allows for a matrix / mixin approach even if not all elements of matrix will be supported. In particular, blob output types (sqlite, leveldb) are not going to get cloud support. But there's no reason for parquet and gzip not to have local support. And postgres and rocksdb, for example, should work as local or cloud....I think I have a plan.

```
DataAggregator - should be scoped down to controlling the listener process and passing messages to it
- launch
- shutdown
- get_status
- get_most_recent_status
- get_new_completed_visits

It does not need to be responsible for making a visit_id.
It would perhaps be better named as a DataProcessBus

Listener - consider renaming to DataProcess 
- it has top level methods for setup and teardown, draining the queue, processing records, managing the
concept of a batch
- it sets up a ""structured"" and an ""unstructured"" class (unstructured only if needed - save_content=True) - examples below
- The (un)structured class that is used then decides how it wants to work with batches e.g. pretty diff between
S3Parquet and LocalSqlite. 
- The storage destination becomes the lowest level of implementation detail (see class structure below) instead of being
wrapped up at the top level.

- Structured
-- Parquet
--- S3Parquet
--- LocalParquet
-- Sql
--- Postrgresql
--- LocalSqlite

- Unstructured
-- LocalLevelDB
-- Gzip
--- LocalGzip
--- S3Gzip
```

The goal of a first PR would be to:
* Only change TaskManager in two ways: 
  - Simplified launch of ""DataAggregator"" https://github.com/mozilla/OpenWPM/pull/704/commits/7c8538d171a36ff537bedb76b3ffe1340e210791#diff-df517bce823800d647ba110df4679453L261-L265
  - Remove visit_id responsibility out of DataAggregator
  - Rest of TaskManager interface remains unchanged but guts of DataAggregator gets pulled out and put back together with:
     - new DataProcess / Listener that has taken on new responsibilities as outline above
     - only implement: LocalGZip, LocalSQlite, S3Parquet, S3Gzip

Follow-on PR:
* Implement new manager params to allow for:
   - specific specification of structured / unstructured class desired
   - unify some params that can be

Follow-on PRs:
* Implement additional classes e.g. LocalParquet, LocalGzip
* Unify structured processing to have one schema backing it (so everyone gets task id for example)
",birdsarah,1796208,2020-06-26T06:42:22Z,MEMBER,False,874,727,17,A web privacy measurement framework,Python,700aab7301dae9505ec2019c2789e3cb3fd4ffe0,WIPPY WIP - overhaul everything
684,https://api.github.com/repos/mozilla/OpenWPM/pulls/703,703,Minor fixes,Fixes #699 #697 and a README typo,birdsarah,1796208,2020-06-26T01:53:45Z,MEMBER,True,3,50,4,A web privacy measurement framework,Python,79409fbaa57289f23805478315143bccf8ebf86c,We support OSX now we have conda
685,https://api.github.com/repos/mozilla/OpenWPM/pulls/703,703,Minor fixes,Fixes #699 #697 and a README typo,birdsarah,1796208,2020-06-26T01:53:45Z,MEMBER,True,3,50,4,A web privacy measurement framework,Python,3ed26e4912ba27433a38c6a17a5e12ded3571a5b,Fixes #697
686,https://api.github.com/repos/mozilla/OpenWPM/pulls/703,703,Minor fixes,Fixes #699 #697 and a README typo,birdsarah,1796208,2020-06-26T01:53:45Z,MEMBER,True,3,50,4,A web privacy measurement framework,Python,8e6b373a87729aecd480cf8fb99a79ced813da0b,Fixes #699
687,https://api.github.com/repos/mozilla/OpenWPM/pulls/703,703,Minor fixes,Fixes #699 #697 and a README typo,birdsarah,1796208,2020-06-26T01:53:45Z,MEMBER,True,3,50,4,A web privacy measurement framework,Python,01138af9dc38a651223130f4d8d05ab227a7d356,Only report coverage for automation code
688,https://api.github.com/repos/mozilla/OpenWPM/pulls/696,696,Better crawling experience,"Removed noisy errors and deprecation warnings.
Closes #672",vringar,13276717,2020-06-25T13:15:11Z,COLLABORATOR,True,5,3,3,A web privacy measurement framework,Python,08b19013e96b35b8b6ed5bf7308c452b392699f2,Fixing crawl_history for RunCustomFunctionCommand
689,https://api.github.com/repos/mozilla/OpenWPM/pulls/696,696,Better crawling experience,"Removed noisy errors and deprecation warnings.
Closes #672",vringar,13276717,2020-06-25T13:15:11Z,COLLABORATOR,True,5,3,3,A web privacy measurement framework,Python,78f5fc2c9928f7f72d4ae0cdb94b2b75f318b670,Reduced severity of interrupted visit from error to warn
690,https://api.github.com/repos/mozilla/OpenWPM/pulls/696,696,Better crawling experience,"Removed noisy errors and deprecation warnings.
Closes #672",vringar,13276717,2020-06-25T13:15:11Z,COLLABORATOR,True,5,3,3,A web privacy measurement framework,Python,592898970c6d8b53816e8fe4152d47c8025c06c6,Replaced deprecated warn with warning
691,https://api.github.com/repos/mozilla/OpenWPM/pulls/693,693,Fixing crawl_history for RunCustomFunctionCommand,"Now the repr of all non trivial types will be stored in the JSON.  
This now allows RunCustomFunctionCommand to be serialized instead of crashing the issue_command thread.  
Closes #692",vringar,13276717,2020-06-22T15:28:41Z,COLLABORATOR,True,3,1,1,A web privacy measurement framework,Python,08b19013e96b35b8b6ed5bf7308c452b392699f2,Fixing crawl_history for RunCustomFunctionCommand
692,https://api.github.com/repos/mozilla/OpenWPM/pulls/690,690,New url for conda,"As conda have changed there url for `Miniconda3-latest-Linux-x86_64.sh` I've changed this to avoid at least one redirect and currently assured the future, in they disable the old url... which probably isn't soon, but why not do it right up :)",spirillen,44526987,2020-06-18T22:30:12Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,d40d1b1af8ec9cad55cd5b7521e69c7556a328d4,"New url for minicinda

As conda have changed there url for `Miniconda3-latest-Linux-x86_64.sh` I've changed this to avoid at least one redirect and currently assured the future, in they disable the old url... which probably isn't soon, but why not do it right up :)"
693,https://api.github.com/repos/mozilla/OpenWPM/pulls/687,687,Removed custom profile class,"- Removed profile imports
- Removed Custom Class",Devjeel,43183066,2020-06-17T03:39:17Z,CONTRIBUTOR,True,3,95,2,A web privacy measurement framework,Python,6dea8482ad797531a44eceb20b3231eab67c2525,Removed custom profile class
694,https://api.github.com/repos/mozilla/OpenWPM/pulls/687,687,Removed custom profile class,"- Removed profile imports
- Removed Custom Class",Devjeel,43183066,2020-06-17T03:39:17Z,CONTRIBUTOR,True,3,95,2,A web privacy measurement framework,Python,c8f9c3e761404027d619235ace5402cf1cbf0375,Test fix
695,https://api.github.com/repos/mozilla/OpenWPM/pulls/687,687,Removed custom profile class,"- Removed profile imports
- Removed Custom Class",Devjeel,43183066,2020-06-17T03:39:17Z,CONTRIBUTOR,True,3,95,2,A web privacy measurement framework,Python,8d9683794141e769d91c19ff1e8fcb0dac107595,Test fix
696,https://api.github.com/repos/mozilla/OpenWPM/pulls/687,687,Removed custom profile class,"- Removed profile imports
- Removed Custom Class",Devjeel,43183066,2020-06-17T03:39:17Z,CONTRIBUTOR,True,3,95,2,A web privacy measurement framework,Python,ab5d26a2ff6402652871ac3b0c5155991a813d2d,Test fix :)
697,https://api.github.com/repos/mozilla/OpenWPM/pulls/687,687,Removed custom profile class,"- Removed profile imports
- Removed Custom Class",Devjeel,43183066,2020-06-17T03:39:17Z,CONTRIBUTOR,True,3,95,2,A web privacy measurement framework,Python,10b4660a8b2d80f4d44d56292cb4511ea221f603,Another Test fix.... :)
698,https://api.github.com/repos/mozilla/OpenWPM/pulls/683,683,Fixing neterror re,Closes #676,vringar,13276717,2020-06-12T14:19:33Z,COLLABORATOR,True,37,2,2,A web privacy measurement framework,Python,601f9c2be3f26cbaa887f6092cb3a703228271ba,Fixed NETERROR_RE
699,https://api.github.com/repos/mozilla/OpenWPM/pulls/683,683,Fixing neterror re,Closes #676,vringar,13276717,2020-06-12T14:19:33Z,COLLABORATOR,True,37,2,2,A web privacy measurement framework,Python,c2e3971a901e25909777fd1e503cf7c8939a227e,Added test for test_parse_neterror
700,https://api.github.com/repos/mozilla/OpenWPM/pulls/683,683,Fixing neterror re,Closes #676,vringar,13276717,2020-06-12T14:19:33Z,COLLABORATOR,True,37,2,2,A web privacy measurement framework,Python,edbb48524e40b2e3c122fdf3992964a1facf9909,Fixing test
701,https://api.github.com/repos/mozilla/OpenWPM/pulls/683,683,Fixing neterror re,Closes #676,vringar,13276717,2020-06-12T14:19:33Z,COLLABORATOR,True,37,2,2,A web privacy measurement framework,Python,f9d6377ecc043a0ffcf20821ae89a51d278c1139,Added integration test for parse_neterror
702,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,cd63949caecca657f3426475de2a3ecca7ca8165,v0.10.0 release
703,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,7658184c0d7bc424e4267cac2513e825224f0987,Add new section to TOC
704,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,055130358491f407f6851e03deaa43d3b4d64e66,Remove old section from TOC
705,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,8579e8735e0125d6b0f7a11ed4ff3ae5c1942d15,Add a note about release cadence
706,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,92e20a0ca906843b2a6af2f0439edfd07293ac8f,"Ignore python user packages from ~/.local when building env

See: https://github.com/conda/conda/issues/448#issuecomment-195848539"
707,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,cdadbf81f4cc3de142cac15905913f62c3d7c6fd,Fix generated environment
708,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,def3a636d104b9f916ac17803959df3bcaec972f,Pin to localstack 0.11.1 since 0.11.2 seems to be causing issues
709,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,f1d6dbf1a13f330e02f43723355d528cb951e7c3,Pinning localstack dependencies as well
710,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,e76b153e56c51eb1ddfed56697e50b26f3a83716,Pinning only  to fix timeouts
711,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,83a012ac033050883d78fe7d3d701ba306fb5ead,Pinning pyvirtualdisplay due to incompatible interface change
712,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,a7baca0a9a5f8ead6b14639243eada8d2cd8af06,Add comment to describe new env var
713,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,f0783030e9fa2fca2d6583382f347e9ae11b871e,Pin localstack to 0.11.1.1
714,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,feb6628d4a40b9cf8e7f4524c4cc139c0b0a8f0a,Ignore user site packages in install.sh and for dev dependencies
715,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,909837093ad7011a5f8cf3f4ff6dc57963ff8209,Add a troubleshooting note related to 689
716,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,4e82083bdef90c8458625f4f781a958d705a1f07,Extend README comment to request feedback
717,https://api.github.com/repos/mozilla/OpenWPM/pulls/682,682,v0.10.0 / Firefox 77.0.1 release,I followed the steps in the new [release checklist](https://github.com/mozilla/OpenWPM/wiki/Release-Checklist) for this.,englehardt,3280150,2020-06-12T05:10:20Z,MEMBER,True,1016,1125,12,A web privacy measurement framework,Python,cab0f52f2459e9d2a0ce300cdf1f53049724198b,Merge branch 'master' into v0.10.0
718,https://api.github.com/repos/mozilla/OpenWPM/pulls/675,675,UI instrument,"A first version of the proposed UI instrument. Implements:
 - Clicks
 - Document/Page visibility (indicates if the window/tab is active)
 - HTML5 Media states (is a sound/video playing etc)

Leaves the following for future PRs:
 - Scrolls
 - Keyboard event metadata
 - Frame dimensions / Viewport dimensions
 - etc

Fixes #669",motin,793037,2020-05-31T04:54:48Z,CONTRIBUTOR,False,502,12,16,A web privacy measurement framework,Python,29c38d880b5cbb5a259eb78f76c8b4b2a1efff93,Namespaced openWpmContentScriptConfig to js instrument (openWpmJsInstrumentContentScriptConfig)
719,https://api.github.com/repos/mozilla/OpenWPM/pulls/675,675,UI instrument,"A first version of the proposed UI instrument. Implements:
 - Clicks
 - Document/Page visibility (indicates if the window/tab is active)
 - HTML5 Media states (is a sound/video playing etc)

Leaves the following for future PRs:
 - Scrolls
 - Keyboard event metadata
 - Frame dimensions / Viewport dimensions
 - etc

Fixes #669",motin,793037,2020-05-31T04:54:48Z,CONTRIBUTOR,False,502,12,16,A web privacy measurement framework,Python,67dda2931589f79a8e1857df0f93d6ddeb9ece11,A first version of the ui instrument
720,https://api.github.com/repos/mozilla/OpenWPM/pulls/675,675,UI instrument,"A first version of the proposed UI instrument. Implements:
 - Clicks
 - Document/Page visibility (indicates if the window/tab is active)
 - HTML5 Media states (is a sound/video playing etc)

Leaves the following for future PRs:
 - Scrolls
 - Keyboard event metadata
 - Frame dimensions / Viewport dimensions
 - etc

Fixes #669",motin,793037,2020-05-31T04:54:48Z,CONTRIBUTOR,False,502,12,16,A web privacy measurement framework,Python,39062fe48dac8624ec1904bf43f105a9b2800ebe,Small fixes in ui instrument
721,https://api.github.com/repos/mozilla/OpenWPM/pulls/668,668,Http instrument additional config options,"Backwards compatible.
Useful for limiting the scope of the collected data without having to fork and modify the source code of the webext instrumentation

These can be supplied as follows in the configuration:
```
      http_instrument_resource_types: ""main_frame,xmlhttprequest"",
      http_instrument_urls: ""*://*.example.com/*|*://*.example.org/*"",
```

And supplied in the run() command:
```
      this.httpInstrument.run(
        config[""crawl_id""],
        config[""save_content""],
        config[""http_instrument_resource_types""],
        config[""http_instrument_urls""],
      );
```",motin,793037,2020-05-26T13:48:48Z,CONTRIBUTOR,False,48,29,1,A web privacy measurement framework,Python,7f302415ef9b1715b3021a4820cc46b276ef0100,Add resourceTypesOption to http instrument
722,https://api.github.com/repos/mozilla/OpenWPM/pulls/668,668,Http instrument additional config options,"Backwards compatible.
Useful for limiting the scope of the collected data without having to fork and modify the source code of the webext instrumentation

These can be supplied as follows in the configuration:
```
      http_instrument_resource_types: ""main_frame,xmlhttprequest"",
      http_instrument_urls: ""*://*.example.com/*|*://*.example.org/*"",
```

And supplied in the run() command:
```
      this.httpInstrument.run(
        config[""crawl_id""],
        config[""save_content""],
        config[""http_instrument_resource_types""],
        config[""http_instrument_urls""],
      );
```",motin,793037,2020-05-26T13:48:48Z,CONTRIBUTOR,False,48,29,1,A web privacy measurement framework,Python,ca39289c77670572521edb077226ab35f764d81c,Add urlsOption to http instrument
723,https://api.github.com/repos/mozilla/OpenWPM/pulls/667,667,Typing tweaks,Backwards-compatible clean ups and tweaks that make integration of webext-instrumentation into an existing add-on a bit more straightforward.,motin,793037,2020-05-26T13:47:48Z,CONTRIBUTOR,True,9,1,5,A web privacy measurement framework,Python,21e1555e155aba1cb708ad76e212ff4ebd3fa775,Type-declare window.openWpmContentScriptConfig
724,https://api.github.com/repos/mozilla/OpenWPM/pulls/667,667,Typing tweaks,Backwards-compatible clean ups and tweaks that make integration of webext-instrumentation into an existing add-on a bit more straightforward.,motin,793037,2020-05-26T13:47:48Z,CONTRIBUTOR,True,9,1,5,A web privacy measurement framework,Python,d63dd5fc2cc61f3a7ccecd675a13982d9da2be4f,Renamed two .d.ts files to .ts so that they are available for inclusion downstream
725,https://api.github.com/repos/mozilla/OpenWPM/pulls/667,667,Typing tweaks,Backwards-compatible clean ups and tweaks that make integration of webext-instrumentation into an existing add-on a bit more straightforward.,motin,793037,2020-05-26T13:47:48Z,CONTRIBUTOR,True,9,1,5,A web privacy measurement framework,Python,2f53bf5c2b6097bf8f67810f8178cc3bb8e201aa,Added typing to an argument
726,https://api.github.com/repos/mozilla/OpenWPM/pulls/667,667,Typing tweaks,Backwards-compatible clean ups and tweaks that make integration of webext-instrumentation into an existing add-on a bit more straightforward.,motin,793037,2020-05-26T13:47:48Z,CONTRIBUTOR,True,9,1,5,A web privacy measurement framework,Python,17c137f4f6b86d260b588419547719608324b25f,Linting
727,https://api.github.com/repos/mozilla/OpenWPM/pulls/667,667,Typing tweaks,Backwards-compatible clean ups and tweaks that make integration of webext-instrumentation into an existing add-on a bit more straightforward.,motin,793037,2020-05-26T13:47:48Z,CONTRIBUTOR,True,9,1,5,A web privacy measurement framework,Python,a7860b97105df231e1b0f03667379627325d34bc,Clarify the name of a type file
728,https://api.github.com/repos/mozilla/OpenWPM/pulls/666,666,Consider non-prettier-formatted files a warning rather than an error in lint test,This makes hacking on the webext instrumentation more forgivable and clearer,motin,793037,2020-05-26T13:46:48Z,CONTRIBUTOR,False,1,1,1,A web privacy measurement framework,Python,773e694b0bf83af33cfe2580b57cfb979654e6a8,Clarify and consider non-prettier-formatted files a warning rather than an error in lint test
729,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,bdc8c62fe3ec9897e528649a78d7cbb1fb5a021a,"Added coverage for js tests
Added codecov as python dependency and uploaded the test"
730,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,a97619ac8a69b5a95dd36501e48d09c257dfd62c,added codecov yaml file
731,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,e13449a1db69f85ac8911cba4455954ec16e45c4,updated dependency for codecov
732,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,0ae373e618a406ffa2e0ee85b396f6f91c9c634a,updated dependency for codecov
733,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,22669ef369503338761c901eee5ddbae70d1be09,end semicolon fix
734,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,de1b8d7da8b9fb13e9b74a15d232887b731f3983,fixed xml generation
735,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,7192a4571376e2e35357024cf2dfa80f10b2ba02,position change of args
736,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,230d47686570b6f8c1cace9a53579c015ce0f197,minor tweaks
737,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,3347eceba4fef7911de9bb5e0c259211ae836607,fixed codecov option
738,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,c697723a4eb23a40844f662904081a0502d2435c,added pytest cov
739,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,ee20b2a2fe618048cc6ad055454bb527705e7459,added pytest cov
740,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,4fe5140ce33422762423fc74697d94da5edc4b3b,added semicolon
741,https://api.github.com/repos/mozilla/OpenWPM/pulls/661,661,Codecov added,This fixes #640 ,shubhank-saxena,29003047,2020-05-19T08:55:55Z,CONTRIBUTOR,True,17,4,4,A web privacy measurement framework,Python,c86c851abe2c7f9bb215f0bb2eb5ddfbec422cda,report generation
742,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,b31e9f8f3f0c7e1099d709abd26367c6d3b69ea5,Start moving dependencies to environment.yaml
743,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,9b4dedbcfaad59354063101c10225181e127460a,wip updating mac-dev dependencies
744,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,288a1e8f6d73955f3c6b9bbd3fb910f503f67d50,WIP
745,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,87702988fdf2b3c38aef4fe2b7f59985182ac951,"Fixes #638, replaces utilities/domain_utils.py with domain_utils"
746,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,f75cfe93008485d6cc1e7f81c7c2bef7583fed94,Finish mac dependencies
747,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,1f17909f78c9b3f316e1d8a775a91b62fe717a20,"Rename install-mac-dev -> install-firefox-mac

That's the only functionality that's left"
748,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,a34be300909f6e11cff74942c5241ec1254f4bbb,"Remove geckdriver finding

geckodriver will be on path, as it is installed by conda, so the default
webdriver settings will find it. We don't need to test this."
749,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,14257b8d6aa283e2401028efb151e5965ab58003,"Remove uneeded install files

Correct typo in run-on-osx-via-docker.sh"
750,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,b4d689905a20f22597d1ea5b9f9d001fb7b35da1,Make one install-firefox script
751,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,8c51249e7b85e8cbdbafaecf9456121c43d2643c,Merge branch 'master' into conda-install-dependencies
752,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,330049995ad1d8df8d86b1f13fccd37976c6cc72,Add new install script
753,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,d033aa7e02ac510673f86abebf91825a9ab3de36,Fix echo
754,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,af21bdaa92a7072c3c438e386d043392ebe85b39,de-dupe dev requirements after merge
755,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,747a4cae4194acb2df9d01504d4a05d96bbcc25e,Add pinning capabilities
756,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,e77edfacfc0a9ab13ec50a67b044a2d38c39189b,Add dev dependencies to environment
757,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,3e2503ab948f49af2b5618151d0117a48f712a0b,"Update .travis.yaml

It's a brave new world!"
758,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,1fdd42770a82b402d80dd95c39bb2c6e1999eb8a,Better name webextension tests
759,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,10ac7a8bd422c97d3a002003f13465e0e2d0a8c4,pep8
760,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,7da68871f4de58645b000e0bab48dceecb3e68bc,The apt-get update just wastes time
761,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,510c7770f5c12a2067a4093214cfcf436a09615f,Only run pre-commit for python tests
762,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,b9647980cecdc51af98ae0fe09fc050e28053577,Add psutil dependency
763,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,d00370589a61c9c2d4ba3822cc74d86faff3aa0a,Add missing pillow dependency
764,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,3dff21679588664ad44b8e30d2ff705775e25552,"Move miniconda install to script, remove rogue -k"
765,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,2edf8c71aeaaab42ec345564e45bcf72ed04d2a3,Try putting source before install
766,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,9b47966ddf281d3b065d2f6ec995bab6d4fad2fd,Add missing localstack dependencies
767,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,76c4a5d86d7c11ab448fd95bd43c422e1711f489,updated package-lock.json
768,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,3253fe7a890ba8d524372cf885f8f33d5284508c,Make sure build extension uses conda node
769,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,475057b0872df0bd15c1a7ac73e6d8343a3ee3f5,No builds in environment.yaml
770,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,c497f89277e6b64e9447e07fc225b53eb8af7840,Repin per OS
771,https://api.github.com/repos/mozilla/OpenWPM/pulls/648,648,Conda install dependencies,"Fixes: #615, #638, #628

This PR will result in the following changes:

- [x] Installation of OpenWPM will have a completely new procedure.
  * [x] Documented in README
  * [x] Implemented in docker
  * [x] Implemented in .travisci
  * [x] Same installation procedure for OSX and Linux (OpenWPM remains windows incompatible)
- [x] Geckodriver will be conda installed and so no geckodriver finding, it's just assumed to be on path
- [x] Re-pinning of dependencies will be done via a script, documented in README, not handled through pip-tools
- [x] There will only be one environment that contains both development and production needs. See ""one environment"" note below.
- [x] While cleaning up dependencies also add in domain_utils and resolve #638
- [x] Should fix #628, as it was fixed upstream and this PR will pick up those changes
- [x] Will standardize on one version of python. Because python installation is managed via conda, and all installation flows from conda, we do not need to support and test against multiple versions of python.
- [x] Will standardize on one version of node, for the same reason as above. This will reduce complexity of .travis.yaml
- [x] The majority of scripts / dev utils have been moved to a scripts directory, to keep things a bit tidier.

Firefox installation will not be managed by conda installation for now. There will need to be a follow-on PR and possible work done in conda packaging. The firefox available via `conda install firefox -c conda-forge` is release, not unbranded. (So #66 and #381 will not be resolved here.) 

Note on one environment: With this PR we'll move to having only one environment instead of a requirements.txt and a requirements-dev.txt. Conda doesn't have the same tooling for managing dependencies as pip-tools. I'm happy with the `repin.sh` it's pretty simple. But I can't see a lightweight way to make a pinned `environment-dev.yaml` that has the same pinning `environment.yaml`. That same pinning is critical to ensure that the tests we run give the same result as someone who would just be using `environment.yaml`. That's not to say it isn't possible, we can write a bash script to do it, but I can't see that the extra maintenance and complexity is worth it, the only impact, as far as I can see, is that the conda environment grows a little. To measure this, I ran `conda pack` with and without the dev dependencies. The packed environments is 295M without dev dependencies and 322M with dev dependencies, a difference of <10%. I have, however, kept the input yaml files seperate so it's still clear what dependencies we have for dev and what for prod.

Package management desires / constraints:
- Installation should be encapsulated in an environment and not change user's machine outside that environment.
-  Pinned packages for deployments to facilitate replicability
  - Pinning / replicability is not so important for dev environments / toolsets.
- Run tests on OSX as well (future)

After merging this PR:
- [ ] Update wiki to reflect new installation changes, in particular OSX workflow
- [ ] Review need for `run-on-osx-via-docker.sh` script",birdsarah,1796208,2020-05-13T19:03:59Z,MEMBER,True,633,1037,32,A web privacy measurement framework,Python,705de01e0330ca9e4a2e8976474b04e932463adc,"Try a pruning strategy

Alternative cross-platform strategy"
772,https://api.github.com/repos/mozilla/OpenWPM/pulls/647,647,Fix bulk of linting errors,"Was getting bothered by all the linting errors, so fixing the bulk.",birdsarah,1796208,2020-05-13T00:50:39Z,MEMBER,False,205,195,13,A web privacy measurement framework,Python,87fee51dbfcc4c7e6e98efeb53d0ceda60811411,webext-instrumentation/src/background
773,https://api.github.com/repos/mozilla/OpenWPM/pulls/647,647,Fix bulk of linting errors,"Was getting bothered by all the linting errors, so fixing the bulk.",birdsarah,1796208,2020-05-13T00:50:39Z,MEMBER,False,205,195,13,A web privacy measurement framework,Python,d6a86142dcd3cbb43612c33168544cde0a04ed11,Continue
774,https://api.github.com/repos/mozilla/OpenWPM/pulls/647,647,Fix bulk of linting errors,"Was getting bothered by all the linting errors, so fixing the bulk.",birdsarah,1796208,2020-05-13T00:50:39Z,MEMBER,False,205,195,13,A web privacy measurement framework,Python,1557244010d3b0929bd56693dcf1e8b89812f4e7,Continue
775,https://api.github.com/repos/mozilla/OpenWPM/pulls/647,647,Fix bulk of linting errors,"Was getting bothered by all the linting errors, so fixing the bulk.",birdsarah,1796208,2020-05-13T00:50:39Z,MEMBER,False,205,195,13,A web privacy measurement framework,Python,c2492f94067f57d371b2f7fc1a36e053b7ecf597,Finish-up
776,https://api.github.com/repos/mozilla/OpenWPM/pulls/647,647,Fix bulk of linting errors,"Was getting bothered by all the linting errors, so fixing the bulk.",birdsarah,1796208,2020-05-13T00:50:39Z,MEMBER,False,205,195,13,A web privacy measurement framework,Python,00d2d67fcfc77ed337f434f4415973f8e603dab4,"Fix up small things

* Don't use arrow func when you want implied arguments
* _ makes things go away
* restore lost export"
777,https://api.github.com/repos/mozilla/OpenWPM/pulls/645,645,added codecov support,"This fixes #640 
We still need to register the repo on codecov so that the test coverage can be picked up!
@vringar ",shubhank-saxena,29003047,2020-05-12T10:23:49Z,CONTRIBUTOR,False,16,1,2,A web privacy measurement framework,Python,161a799293f0ede29293b5db71f5b002a2193aed,added codecov.yml file
778,https://api.github.com/repos/mozilla/OpenWPM/pulls/645,645,added codecov support,"This fixes #640 
We still need to register the repo on codecov so that the test coverage can be picked up!
@vringar ",shubhank-saxena,29003047,2020-05-12T10:23:49Z,CONTRIBUTOR,False,16,1,2,A web privacy measurement framework,Python,437a141b2ba2564ee5112e77bd613bbca29bce9e,"Addded codecov for python tests
Added codecov for js tests"
779,https://api.github.com/repos/mozilla/OpenWPM/pulls/644,644,Update README.md,,romy421kumari,44578093,2020-05-12T05:45:41Z,NONE,False,3,3,1,A web privacy measurement framework,Python,897889b3dfb33406f1ffa6b3f244b7e4dd36dbe9,Update README.md
780,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,cd40e32cbf10463acc0b0efb35ccd77f4a35cdd6,Add mdn-browser-compat-data
781,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,a2531b2cd19f1d9e53b529afa9bd48143e33f2bf,js_instrument_modules as list
782,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,b7403d013bccbc5c60aa8e5ba5377a101790668b,Add mdn-browser-compat
783,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,d211a1c5a0807cbe715e853afaf26be2b31c4b46,Pass a list of instrumentingFunctions
784,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,7db500b0c61cebfc134802d688f9b352467987fa,Script to generate api data
785,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,5046246517ae9e2d91ee110eb0a19440011074ea,"Working give or take

Getting errors like

OpenWPM: Error name: TypeError post_request_ajax.html:237:17
OpenWPM: Error message: can't redefine non-configurable property
""UNSENT"" post_request_ajax.html:238:17"
786,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,2a972620aa038a19d8392953c38aabf66c5d54d6,Small naming cleanup
787,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,946ec0790e33c67eefbff1e8e5a15ffc09f336f2,Handle non-configurable properties
788,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,7fd8842a4d091a77c6357c6c8282f6cbf5b1e227,Lint
789,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,ba6ab103d6c5183319a8afa819adfd66f417e93a,Add aspirational API
790,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,eba6c96696e62c3d404fa556cb8f431e1d907ea8,Merge branch 'master' into js-instrumentation
791,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,527645497ef2d91d611e706fd008f805ab061eb8,"Begin migration to new JSInstrumentationRequest interface.

* We build and mandate LogSettings.
* We have a new JSInstrumentatinRequest that everything runs through
* Preset, fingerprinting, will be specified in JSON"
792,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,3d72db9f6e7e688d72725cd28fde86ee4dbf1ca1,"Continue making progress

Enum for Operation"
793,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,a9f3d93bf41e90b9e8e50d74a208ed7d8356a802,"Begin implementing jsModuleRequest validation.

Changing my mind - all validation and construction to be done python
side.
This will reduce JS overhead at runtime."
794,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,9139ebecc2185198effb0f63f4c66d3b05e8ce20,Big cleanout- js-instrumentation work moving to python.
795,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,ce3b80e364f8f47a05ebb1850e9b1cbad1d4ceb4,Continue update to python js-instrumentation
796,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,cdd2f0d1019ef48fb39092252a20136cb2304446,"Lint

Can't do all the things I want to with typing due to scope
when content is loaded into page."
797,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,de83eaca46e52bb0cee3e322bbe4193f450060af,noqa on wip jsinstrumentation file
798,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,82720a2061303572a3c442074265e0cf830a2c96,Begin updating existing js instrument tests.
799,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,d9266c66fcb06ee83f3b9a1114728455f363d2a9,Merge branch 'master' into js-instrumentation
800,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,0226f8db048e37420956882e8d99c04215320f99,Merge branch 'issue-443' into js-instrumentation
801,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,68f80770bf91e41baea367930df6607d9ba9622d,Small cleanups
802,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,bae565b970508f299e632e551737a17e82449497,Fix naming in calling instrumentJS
803,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,7557bc2f7194c530d874b456dfc399922db4d371,No display mode native for testing
804,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,9d8ca65a5ff3a27f1f250b5b5340125d45773207,Restore py test file to orig.
805,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,8e40b55104b018eaea278c08fa6b32848ea660ff,Support null propertiesToInstrument
806,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,6559a4df7b101c62e1801f255f595dc0146af90e,Re-work instrumentObject tests
807,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,0c0ca21181e9e9177e48b40379d853d94ee7d0a3,Clean-up text in test page.
808,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,ab6d3ceb05825e671e2f6d9d027bed3e994a1e19,Add default to getLogSettings function
809,https://api.github.com/repos/mozilla/OpenWPM/pulls/642,642,Arbitrary WebAPI JS instrumentation,"Fixes #641 


To do:
* [x] Getting the pasted below error when instrumenting XMLHttpObject. These all appear to be `Can't redefine non-configurable property ""XXX""`. Need to handle this property type. There may be other cases that come up. **wontfix** - these errors don't prevent instrumentation occurring.
* [x] Implement API as below. Can also pass in a logSettings object.
* [x] Ensure do not repeat instrument - creates issues because the new prototype ends up with separate getters and setters.
* [x] Can pass, for example, ""excludedProperties"" or ""nonExistingPropertiesToInstrument"" a logSettings object if desired.
* [x] Tests
* [x] Add support to instrument arrays (plugins, mimeTypes currently missing from fingerprinting.json too) - I've added back a version of the instrumentation that could be sufficient.
* [x] Performance test - tests that: 
  * [x] (a) time how long it takes instrumentation to load 
  * [x] (b) hits an API over and over and see if we miss any. Decided there's no point in doing this as instrumentation def loads first.
  * [x] (c) will *not* cover how much instrumentation of n apis slows down a page.
* [x] Regression - add a test for not propogating down propertiesToInstrument and fix regression I introduced.
* [x] Add JSON parsing to crawler.py
* [x] Update README . 
  * [x] From @englehardt review - ""Now that folks can instrumentation arbitrary JS objects, we should (a) mention that, (b) describe what a shortcut is, and which ones exist already, and (c) provide a short example of two."" ""I like that we've moved the documentation for instrumentObject out of JS (which is good, since it's user configurable). I'm not sure how someone who wants to write their own settings file would be able to figure out which options are available. Is the only way to read the schema file? That would be pretty clunky. (Perhaps this will be covered by a README update).""
  * [x] Add developer docs about rendering schemas to markdown.

```js
      js_instrument:true,
      js_instrument_modules: [
        // Shortcut
        ""fingerprinting"",
        // APIs
        ""Storage"",
        {""XMLHttpRequest"": [""send""]},
        // Specific instances on window
        {""window.document"": [""cookie"", ""referrer""]},
        {""window"": [""name"", ""localStorage"", ""sessionStorage""]}
      ],
      http_instrument:true,
      callstack_instrument:true,
```

For follow-on issues:
* Update [openwpm-crawler](https://github.com/mozilla/openwpm-crawler) with new input
* ~~Add an ""all"" option~~ (nope - crashes everything)
* ~~Do you want to be able to specify just a property? e.g. `XMLHttpReqest.send` vs `XMLHttpRequest` (this could be a follow-on PR)~~

Questions:
* For ""fingerprinting"" - do we want to keep the current set of instrumented APIs which is some whole modules, and sometimes just a limited set of properties? For example, we only take pixelDepth and colorDepth from window.screen instead of the full 15 or so options. The difference might be starker on other modules, I haven't done a thorough review. 
  - Keep the same for now.
* I'm leaving all logSettings options default. As best as I can tell we've never used them. Thoughts? (Given that we haven't used it, I'm tempted to propose removing it to simplify the code).
  - I was wrong. They're all used (or desired in the webcompat work - https://github.com/mozilla/OpenWPM/compare/master...motin:webcompat-instrumentation). This PR hopefully makes logSettings and it's default clearer.
* Why not have it so settings are passed around as JSON and JSON is handled webext side.
  - Because by making a magic js string we are actually referring to the window object as opposed to having a string in JSON. It's' the difference between `'{object: window.CanvasRenderingContext2D.prototype, instrumentedName: ""CanvasRenderingContext2D"",...}'` and `{object: ""window.CanvasRenderingContext2D.prototype"", instrumentedName: ""CanvasRenderingContext2D"",...}`. In the latter case where we're passing around JSON, on the JS side we then have to find a way to turn the string `""window.CanvasRenderingContext2D.prototype""` into the object `window.CanvasRenderingContext2D.prototype`.",birdsarah,1796208,2020-05-09T09:31:27Z,MEMBER,True,6862,4077,62,A web privacy measurement framework,Python,87ccdabf9a97a5b50e33d66754b764fa91738a90,Don't re-assign logSettings.propertiesToInstrument
810,https://api.github.com/repos/mozilla/OpenWPM/pulls/639,639,Tweak demo.py,This is a tiny tweak. I'm regularly messing with demo.py to try out various things. This small tweak just makes each time I do that a little quicker as I just have to add and delete lines rather than editing around the parens.,birdsarah,1796208,2020-05-07T23:30:02Z,MEMBER,True,5,3,1,A web privacy measurement framework,Python,404409433bdd15d9556cd49111ccffb1318f3691,Tweak demo.py
811,https://api.github.com/repos/mozilla/OpenWPM/pulls/636,636,Added pip-tools as a dev requirement,"We describe usage of `pip-tools` notably `pip-compile` in our README, so we should include it in our dependencies",vringar,13276717,2020-05-07T16:15:26Z,COLLABORATOR,True,9,13,2,A web privacy measurement framework,Python,ac70469da91f10943f1624de50df537e0d7ffe8a,Added pip-tools as a dev requirement
812,https://api.github.com/repos/mozilla/OpenWPM/pulls/635,635,Moved developement tools into requirements-dev.in,"When looking at our dependencies I noticed that we had a lot of stuff in requirements.in that didn't belong there as it's strictly for developers.
So I moved it over and regenerated both `requirements.txt` as well as `requirements-dev.txt`",vringar,13276717,2020-05-07T10:46:53Z,COLLABORATOR,True,39,43,4,A web privacy measurement framework,Python,2958b56af1777d5e157352a87839f76ba077deb6,Moved developement tools into requirements-dev.in
813,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,0a0062b1c179c00ec57131d069e55739a50082ef,Added pre-commit hook
814,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,40e6f3618e03fd5119e1c73d1ee3cb6b6489dbd3,added shellcheck and isort hooks
815,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,423fcbebd5244837f00994ced72e06897524104e,updated docs
816,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,bb059ef5c434ea64da9d0ebe21b8cfb5b429e968,"Added pre-commit as a requirement in dev.in
Added autopep8 pre-commit hook"
817,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,9984f30ea0a9500d53d7ae44cdfa0f52d02a6564,added extra line
818,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,ed1bbfa0e8bc4a45920b6abd739f8f8d99e5bb71,fixed suspected pre-commit issues
819,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,75b58cd45370f2a346db5447b90301abbf129e8c,fixed version
820,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,926ffa13737b5901e539e4b76057e1ff7afc5dd0,fixed pre-commit issues
821,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,f5125100f0f4bc37ed361093cc18c3db215eb51f,added pre-commit to travis
822,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,e7a9c91c2909cf9da97a192b5b4dcbe7bddb0b3a,Build requirements-dev.txt
823,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,fab7f61ee4a53052d98c3bf337e378326cbfe9be,"Merge pull request #1 from mozilla/pre-commit

Build requirements-dev.txt"
824,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,c7b5f4d69e69086434af7cd972de9eb0c0d819fa,fixed all indents
825,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,3c493163291813f252b37f892c09f268a533fd9f,removed shellcheck
826,https://api.github.com/repos/mozilla/OpenWPM/pulls/634,634,Pre commit hooks,"This fixes #633 
@vringar
- I have added pre-commit hooks
- Have added flake8,isort and shellcheck(as project contains lot of shell scripts)
- Updated the docs
Let me know if any further changes are required",shubhank-saxena,29003047,2020-05-07T09:22:43Z,CONTRIBUTOR,True,42,8,11,A web privacy measurement framework,Python,b64b97681bc20423e9f6044270b771230bafdf54,Merge branch 'master' into pre-commit
827,https://api.github.com/repos/mozilla/OpenWPM/pulls/631,631,Save the HTTP response headers for HTTP redirects,"Currently, the HTTP response headers of the server are not logged when
the server responds with an HTTP redirect. Wit this patch, they are
saved as well.

I can add a test for this as well, but when I would test for the exact headers present, then it might break easily once the HTTP server for the tests is upgraded.",eriktews,1436802,2020-05-04T21:40:52Z,CONTRIBUTOR,True,43,19,5,A web privacy measurement framework,Python,2f3dc0475123e966ced3ddb849e76fd623a012a5,"Save the HTTP response headers for HTTP redirects

Currently, the HTTP response headers of the server are not logged when
the server responds with an HTTP redirect. Wit this patch, they are
saved as well."
828,https://api.github.com/repos/mozilla/OpenWPM/pulls/631,631,Save the HTTP response headers for HTTP redirects,"Currently, the HTTP response headers of the server are not logged when
the server responds with an HTTP redirect. Wit this patch, they are
saved as well.

I can add a test for this as well, but when I would test for the exact headers present, then it might break easily once the HTTP server for the tests is upgraded.",eriktews,1436802,2020-05-04T21:40:52Z,CONTRIBUTOR,True,43,19,5,A web privacy measurement framework,Python,c319e8142b7239bc0aaaef4da2be489e5d5cf119,"Test for location header

Test whether at least the location header is properly saved by the http redirect instrumentation."
829,https://api.github.com/repos/mozilla/OpenWPM/pulls/630,630,Dockerfile now has a develop stage,"This change allows people to run `docker build --target develop -t openwpm_develop . ` to build a dockerfile that has the dev-dependencies installed.
This enables tests to be run in the dockerfile if for some reason (be it that your developing on Windows or that your local installation of localstack is broken) you can't run the tests natively.
Then you could run
```bash
docker run --rm --name crawl  -v $PWD/docker-volume:/root/Desktop -v $PWD:/opt/OpenWPM \
 -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --shm-size=2g \
 -it openwpm_develop
```
to mount the current python code and test it.",vringar,13276717,2020-05-04T13:35:47Z,COLLABORATOR,False,9,1,1,A web privacy measurement framework,Python,2a6b3c453b1dfde8ac42aa4173f08231f5d879c3,Dockerfile now has a develop stage
830,https://api.github.com/repos/mozilla/OpenWPM/pulls/629,629,Prevent IndexError in memory watchdog,This PR resolves https://github.com/mozilla/OpenWPM/issues/626 by checking if the geckodriver process has children before attempting to access its Firefox child process in the memory watchdog.,boolean5,5280463,2020-05-03T10:15:19Z,COLLABORATOR,True,7,5,1,A web privacy measurement framework,Python,936dba674cbe6a5c92b4b138e620ca4d3fce0aae,"Prevent IndexError in memory watchdog

Check if the geckodriver process has children before attempting to
access its Firefox child process. This will prevent getting an
IndexError in case the geckodriver process has no child Firefox process
because of an unexpected failure. Closes #626"
831,https://api.github.com/repos/mozilla/OpenWPM/pulls/625,625,Add CALLSTACK_INSTRUMENT environment variable,Fixes #623,birdsarah,1796208,2020-05-01T02:07:40Z,MEMBER,True,6,0,1,A web privacy measurement framework,Python,b88f40fb9e0eebf3eb939f5c775d0b5fc5835209,Add CALLSTACK_INSTRUMENT environment variable
832,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,bfadd3aae0ce2dd45b6455c094d13696a4b3fa5f,Make core changes reinstating Xvfb
833,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,6d51fa739d371baada6f418dc7036da556c147ce,Merge branch 'master' into 504_restore_xvfb
834,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,36989e963d3ade5303d442fb7e818178206366ec,"Latest requirements

Added pyvirtualdisplay but running pip-compile caused additional
upgrades."
835,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,02e33bd7564177a9386a8f64ef81252a2cb3ce88,Default should not be headless
836,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,6180c7474c5b3a30e19fba141b31a2670c8340ae,Fix flake8
837,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,275c1733206e84d9cb5f71501e6e74eff3e5c4f5,"Revert ""Latest requirements""

This reverts commit 36989e963d3ade5303d442fb7e818178206366ec."
838,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,c840648c3f78b1e1acd894f24c9c7de184e11f41,Manually add only pyvirtualdisplay
839,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,ab08ecce7f162c7f7ac80d7e3515eaab16759ffd,Parametrize test_simple_commands for two display modes.
840,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,79e8de886eb17e80ce0bf6b06106c7fe45417b6a,flake8
841,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,f5c0b8af2210d495a828fe3b93e776a4abe2b936,"Rebalance tests

test_[a-d, d-e] and test_c both taking 5 minutes each can be combined.
Other tests hopefully taking ~10 min each."
842,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,eb3d4cd7a6c484497aff49067ce32cbd59efe36e,Update crawler.py and demo.py
843,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,eef9bb71d47734381839f819b48a6ee0b8fa86c3,Add DISPLAY_MODE to sentry
844,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,a132647b1ccfa779a746d91671c1e858bee705ac,flake8
845,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,b0e105884dd36a07c2fd053aebdf85d208127205,Merge branch 'master' into 504_restore_xvfb
846,https://api.github.com/repos/mozilla/OpenWPM/pulls/621,621,Restore xvfb,Fixes #504,birdsarah,1796208,2020-04-28T23:50:26Z,MEMBER,True,153,52,13,A web privacy measurement framework,Python,acd6934ea148031b0097254ecd05e5793cddee07,Add extra info about display_modes
847,https://api.github.com/repos/mozilla/OpenWPM/pulls/617,617,More npm dependency updates,,englehardt,3280150,2020-04-20T18:33:09Z,MEMBER,True,4157,4098,4,A web privacy measurement framework,Python,db842a8f86a556be665920caec4942fec2f180b9,More npm dependency updates
848,https://api.github.com/repos/mozilla/OpenWPM/pulls/617,617,More npm dependency updates,,englehardt,3280150,2020-04-20T18:33:09Z,MEMBER,True,4157,4098,4,A web privacy measurement framework,Python,16af5e8eee5294197364b40f8ea6e37742fc2ead,Fix ava syntax changes + update unsupported eslint parser
849,https://api.github.com/repos/mozilla/OpenWPM/pulls/612,612,Removing missed reference to flash cookies,This was missed by ##593.,englehardt,3280150,2020-04-17T04:07:47Z,MEMBER,True,0,6,1,A web privacy measurement framework,Python,c16306bc57c96fb6d82260350b7759d144f34562,Removing missed reference to flash cookies
850,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,c6d97ddf70201b833042a8f4f5da051d40e183f9,First steps towards marking visits during shutdown as uncomplete
851,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,092bca3108f2adb89eb0fe0583c9c798b65214c5,Merge branch 'onSavedCallback' into issue-443
852,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,cc8898a29fba5221b73ba262a73932f4e2a7d999,No longer calling callbacks of interrupted command_sequences
853,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,baea253889bfca3ddb6dab169f13f1323648ed13,Merge branch 'master' into issue-443
854,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,20425f73fe62f02545dcd9530b86091cf4a39c44,Merge branch 'onSavedCallback' into issue-443
855,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,5bd55ea05bff3c0676d6307c00bf745cd8b461f4,No longer appending visit_id multiple times to _unsaved_visit_ids
856,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,676bc816a823d561399efa5a1d4d3ed204c580fa,Rewrote crawler callback to capture everything correctly
857,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,a82d56bb0771d96e56893d2ea76a573681cce903,Pleasing flake8
858,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,eeb2130c0c4b27b8ffa963c71605b17fafdb38eb,Toned down log messages in callback
859,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,8f7fc7ebad4a7fd062df819b463b2f5c87e4c3d1,Fixed import order
860,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,07a74adb12ad2f22b573d69b481c36c3a468ee97,Merge branch 'master' into Fixing_crawler
861,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,23dbb61417a081639da133076fe8a49b2f7288b0,Merge branch 'master' into Fixing_crawler
862,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,355d1e2065b01a27e8e5aa9de8c7c68517590e20,Resetting to the correct data type
863,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,668de457284b010da3f5d647d4d0bcf17f622652,more type annotations
864,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,ab24721dc5542e339ddf3f0885333eff5a7630d0,"Removed redundant check and renaming for clarity

Since json.dumps returns a string it always needs to be
encoded to bytes"
865,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,f7cf81b93bc73dc1f97ac00f66494e8606bfd346,Merge branch 'master' into Fixing_crawler
866,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,2e17baa15e59e5d49549f1d59f3c1ad868995bd9,Initial progress on Documentation
867,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,f5ce99cc8f82dfa6deb83df262fa3cd07f036a2f,Added logging to indicate start of CommandSequence
868,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,f34de1101e940d419636429e1d285aaf23aa4d2c,Merge branch 'master' into issue-443
869,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,2503fd989cb4aa9274be67b9fa766cfde138bf90,Merge branch 'Fixing_crawler' into issue-443
870,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,1d9ee5b475903fb1e897196c49536921e0a6343a,Merge branch 'documentation' into throw_away
871,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,ca950bac5363083e67e510628cfddbd2acb41336,Better Docs
872,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,849d179c27bc21eebe332b05ed19c422221c3d46,First type annotations for BrowserManager
873,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,ad3557c347ded04ba9f8945f4ddb208eee3ca271,First step in implementing relaxed shutdown
874,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,af18cafcc0d0bb0c8cceb0e7ed7197b00520f149,WIP thinking about shutdown and callbacks
875,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,0b62f6b5b7adfd79aaa7db771f71edcec256c2cd,Merge branch 'issue-443' into throw_away
876,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,8b62edf56396d85c4af0118f987fe5dd72e7e6df,Lots of different stuff
877,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,66913e68333fad210379c780b38e52528667c6d7,Committing build files
878,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,ffe27f7ba84bce9dc8ae10f6a30555643586bd35,Removed docs/_build
879,https://api.github.com/repos/mozilla/OpenWPM/pulls/610,610,[WIP] Throw away,,vringar,13276717,2020-04-15T15:36:36Z,COLLABORATOR,False,333,86,15,A web privacy measurement framework,Python,b47bd78feb32b368d520faea2b9b33ccb49d2799,Formatting and more types
880,https://api.github.com/repos/mozilla/OpenWPM/pulls/607,607,"Update to FF75, including new setting.",Fixes #606,birdsarah,1796208,2020-04-10T23:49:31Z,MEMBER,True,25,14,5,A web privacy measurement framework,Python,bd7abbc12321b917b9152675051f31a5b30f6167,"Update to FF75, including new setting.

Fixes #606"
881,https://api.github.com/repos/mozilla/OpenWPM/pulls/607,607,"Update to FF75, including new setting.",Fixes #606,birdsarah,1796208,2020-04-10T23:49:31Z,MEMBER,True,25,14,5,A web privacy measurement framework,Python,c4b5049e80363cb178237ad77e1af857b65ab807,Merge branch 'master' into issue_606_upgrade_ff
882,https://api.github.com/repos/mozilla/OpenWPM/pulls/607,607,"Update to FF75, including new setting.",Fixes #606,birdsarah,1796208,2020-04-10T23:49:31Z,MEMBER,True,25,14,5,A web privacy measurement framework,Python,82cc27d2ecc019e65f9bbdbeef463e8c470fe545,"Code clean

The test is passing locally, this is just a gentle code cleanup
to force travis to rerun."
883,https://api.github.com/repos/mozilla/OpenWPM/pulls/607,607,"Update to FF75, including new setting.",Fixes #606,birdsarah,1796208,2020-04-10T23:49:31Z,MEMBER,True,25,14,5,A web privacy measurement framework,Python,fde7ebb94380235eaf49cecf8a883b87d51b6c3d,Update preference in web-ext also
884,https://api.github.com/repos/mozilla/OpenWPM/pulls/607,607,"Update to FF75, including new setting.",Fixes #606,birdsarah,1796208,2020-04-10T23:49:31Z,MEMBER,True,25,14,5,A web privacy measurement framework,Python,2208396c254d00cded4ef1999a166126499fa80d,"Add new source_pragemas option.

It's not in ff yet, but will be soon, and setting an unused config
does not harm."
885,https://api.github.com/repos/mozilla/OpenWPM/pulls/603,603,Fix some test warnings,"
I've seen these two warnings when running the tests for a while now:
1. https://travis-ci.org/github/mozilla/OpenWPM/jobs/671679677#L2939
2. https://travis-ci.org/github/mozilla/OpenWPM/jobs/671679677#L2948

Regarding the first warning, when `pytest.mark.slow` was added, it was perhaps assumed that it is one of the built-in marks of pytest, when it is in fact a custom mark. Registering it in the `pytest.ini` file, as mentioned in the [pytest documentation](https://docs.pytest.org/en/latest/mark.html#registering-marks) fixes the `PytestUnknownMarkWarning`. 

To address the second warning (`DeprecationWarning`), I just changed the deprecated `warn` method to `warning`.
",boolean5,5280463,2020-04-07T12:18:22Z,COLLABORATOR,True,4,1,2,A web privacy measurement framework,Python,75b31ef49175736b6b97bfddb9aa69e2b453b785,"Register slow pytest mark

Register the custom ""slow"" pytest mark in pytest.ini to avoid
PytestUnknownMarkWarning."
886,https://api.github.com/repos/mozilla/OpenWPM/pulls/603,603,Fix some test warnings,"
I've seen these two warnings when running the tests for a while now:
1. https://travis-ci.org/github/mozilla/OpenWPM/jobs/671679677#L2939
2. https://travis-ci.org/github/mozilla/OpenWPM/jobs/671679677#L2948

Regarding the first warning, when `pytest.mark.slow` was added, it was perhaps assumed that it is one of the built-in marks of pytest, when it is in fact a custom mark. Registering it in the `pytest.ini` file, as mentioned in the [pytest documentation](https://docs.pytest.org/en/latest/mark.html#registering-marks) fixes the `PytestUnknownMarkWarning`. 

To address the second warning (`DeprecationWarning`), I just changed the deprecated `warn` method to `warning`.
",boolean5,5280463,2020-04-07T12:18:22Z,COLLABORATOR,True,4,1,2,A web privacy measurement framework,Python,7037110326efdd271c0f1945296b54ec83fa93bc,"Fix warn method DeprecationWarning

Use the `warning` method instead of `warn` in method `_issue_command` of
the TaskManager, as `warn` is deprecated."
887,https://api.github.com/repos/mozilla/OpenWPM/pulls/601,601,Correcting return value of __repr__,"@vringar I've made the changes for __repr__

The tests seem to have errored, is it possible for me to retrigger the build",svensevenslow,21080355,2020-04-03T07:32:54Z,CONTRIBUTOR,True,15,18,3,A web privacy measurement framework,Python,fd3d6ba008ee35dd21c0fcac80a36a86b7dc3c0d,correcting return value of __repr__
888,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,68304e3d83209f3e7e02f7424bd5a0f2ed325290,Remove support for mini-amf and update dependencies
889,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,71e4d33f072c906dec71139d2be57b475fdae83c,Merge branch 'master' into 2020-03-20_dependency_update
890,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,14ff330fee115fa6fa60861ad0e845a42dc26eea,Merge branch 'master' into 2020-03-20_dependency_update
891,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,945e04c62d4592e27f1ee016065a70dda05bc778,Update python dependencies
892,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,3eae017331be573a0df0b728a27574f30cdd14e8,Updating extension dependencies
893,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,080a0fbd247854db376f5530b47431fb742885fe,Pin s3fs to fix test failures
894,https://api.github.com/repos/mozilla/OpenWPM/pulls/600,600,Update dependencies,"I've had to add:

```
# localstack compatibility
more-itertools==5.0.0
zipp==0.6.0
```

due to localstack's outdated pinned dependencies

and we already pin `psutil` for the same reason. 

We should investigate what it would take to run localstack as a docker image to avoid these issues in the future, since the current installation approach we use [is deprecated](https://github.com/localstack/localstack/issues/2019#issuecomment-582581192).",englehardt,3280150,2020-04-03T05:17:01Z,MEMBER,True,527,781,6,A web privacy measurement framework,Python,3a2df96150db923f17f5a0bf700de5cdece63d5e,"Update automation/Extension/webext-instrumentation/package.json

Co-Authored-By: Stefan Zabka <szabka@mozilla.com>"
895,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,5bd55ea05bff3c0676d6307c00bf745cd8b461f4,No longer appending visit_id multiple times to _unsaved_visit_ids
896,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,676bc816a823d561399efa5a1d4d3ed204c580fa,Rewrote crawler callback to capture everything correctly
897,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,a82d56bb0771d96e56893d2ea76a573681cce903,Pleasing flake8
898,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,eeb2130c0c4b27b8ffa963c71605b17fafdb38eb,Toned down log messages in callback
899,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,8f7fc7ebad4a7fd062df819b463b2f5c87e4c3d1,Fixed import order
900,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,07a74adb12ad2f22b573d69b481c36c3a468ee97,Merge branch 'master' into Fixing_crawler
901,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,23dbb61417a081639da133076fe8a49b2f7288b0,Merge branch 'master' into Fixing_crawler
902,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,355d1e2065b01a27e8e5aa9de8c7c68517590e20,Resetting to the correct data type
903,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,668de457284b010da3f5d647d4d0bcf17f622652,more type annotations
904,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,ab24721dc5542e339ddf3f0885333eff5a7630d0,"Removed redundant check and renaming for clarity

Since json.dumps returns a string it always needs to be
encoded to bytes"
905,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,f7cf81b93bc73dc1f97ac00f66494e8606bfd346,Merge branch 'master' into Fixing_crawler
906,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,f5ce99cc8f82dfa6deb83df262fa3cd07f036a2f,Added logging to indicate start of CommandSequence
907,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,c938bd3933bbb83ffdf526db432aac493d152507,Made requested changes
908,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,78506efce69732b846a58f2231346dcfa96a4617,Merge branch 'master' into Fixing_crawler
909,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,d5d544f9a63a634cce84c59ab1a59a2dbaccf3a4,Porting cleanup and convinience forward
910,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,b5455840a6fb07fca58b0c89a1b3ea9b77a7c12c,Added anti starvation tactic to crawler
911,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,157cb07a7b9f2130d8f0b10f6f032cc842561d86,Removed queue and replaced it with callbacks
912,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,24fff277e08f19a83a57007bac391d9a36f59947,Cleanup and more types
913,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,fc35c5e6cf952e34e801aaae4a2bc8550418b49f,updated package-lock
914,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,e1ed529c77121dcb77dba9e70a86287ad1301414,Fixed extension
915,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,df43853910163d6ec0b6607264cba39c620ac571,Implemented Finalize command
916,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,3d7a1207e67799baadfe231e79c827f8bba8f736,Cleaned up crawler
917,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,41a39c9535e6dd6421a1bd9fb714d4edbf2b3078,Merge branch 'master' into Fixing_crawler
918,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,fd0c7f405b309445cbbb66ff7570959131a52cbd,Moved finished message where it belongs
919,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,3959c67c38e88b986e842a2732fc099308f61d23,Cleaning up if chains
920,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,357a2869aa8020bacf5e936206835a0d8b0f6cad,Merge branch 'master' into Fixing_crawler
921,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,6cc28e7f9c59227ba4e0f712515e7e7563c871fa,Merge branch 'master' into Fixing_crawler
922,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,c8e31e7579bb2fea349faf66890a7604fd21787e,Dropping about:blank visits
923,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,2095ac12eb0b635d9cd08ae351f8d456629e85cc,Moved the append command into the command_sequence
924,https://api.github.com/repos/mozilla/OpenWPM/pulls/599,599,Fixing crawler,"The code I had in `crawler.py` wasn't capturing the variables as expected (it only bound the first job) and this PR fixes it.
It also adds more logging to entire callback chain that should help debugging.",vringar,13276717,2020-04-01T18:16:25Z,COLLABORATOR,True,1511,832,18,A web privacy measurement framework,Python,6868fff5771a0f31c79c504a5975e730f851fc0c,"Update automation/Commands/Types.py

Co-authored-by: Steven Englehardt <englehardt@gmail.com>"
925,https://api.github.com/repos/mozilla/OpenWPM/pulls/596,596,Restore intended functionality of memory watchdog,This PR fixes https://github.com/mozilla/OpenWPM/issues/501 by making the `_manager_watchdog` method in the `TaskManager` monitor the memory consumption of the Firefox process and all its child processes instead of that of the geckodriver process.,boolean5,5280463,2020-03-25T20:51:46Z,COLLABORATOR,True,12,3,2,A web privacy measurement framework,Python,af764467a4b2936b1ae58acf22b3e625ad5d7dcc,Extend default flake8 config instead of overriding
926,https://api.github.com/repos/mozilla/OpenWPM/pulls/596,596,Restore intended functionality of memory watchdog,This PR fixes https://github.com/mozilla/OpenWPM/issues/501 by making the `_manager_watchdog` method in the `TaskManager` monitor the memory consumption of the Firefox process and all its child processes instead of that of the geckodriver process.,boolean5,5280463,2020-03-25T20:51:46Z,COLLABORATOR,True,12,3,2,A web privacy measurement framework,Python,7b9b5931f12ae5e8fa4d4eb820418fef5110780a,"Restore intended functionality of memory watchdog

Monitor the memory consumption of the geckodriver process, the main
Firefox process and all its child processes in _manager_watchdog,
instead of monitoring only that of the geckodriver process. Closes #501"
927,https://api.github.com/repos/mozilla/OpenWPM/pulls/593,593,Remove support for flash cookie saving,,svensevenslow,21080355,2020-03-22T10:57:45Z,CONTRIBUTOR,True,19,463,24,A web privacy measurement framework,Python,b4cc3d76094094f2a2926a4992ec423f682bb080,Remove support for flash cookie saving
928,https://api.github.com/repos/mozilla/OpenWPM/pulls/592,592,added scripts folder and cmd line arg for dev requirments,As discussed in #550 added a scripts folder and move main scripts into scripts folder.,LilyLME,38939048,2020-03-21T05:03:42Z,CONTRIBUTOR,False,28,12,9,A web privacy measurement framework,Python,accca3df65af5c1a887ed88b1ba94b09f7f2af02,"added scripts folder and cmd line arg for dev requirments

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
929,https://api.github.com/repos/mozilla/OpenWPM/pulls/592,592,added scripts folder and cmd line arg for dev requirments,As discussed in #550 added a scripts folder and move main scripts into scripts folder.,LilyLME,38939048,2020-03-21T05:03:42Z,CONTRIBUTOR,False,28,12,9,A web privacy measurement framework,Python,4d5e93b481012b78364464831efdd1c14962ee11,"added check for existing node installation

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
930,https://api.github.com/repos/mozilla/OpenWPM/pulls/592,592,added scripts folder and cmd line arg for dev requirments,As discussed in #550 added a scripts folder and move main scripts into scripts folder.,LilyLME,38939048,2020-03-21T05:03:42Z,CONTRIBUTOR,False,28,12,9,A web privacy measurement framework,Python,8d6d50f5588831f38ef2e892404415461cf2a58e,"added check for existing node installation

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
931,https://api.github.com/repos/mozilla/OpenWPM/pulls/592,592,added scripts folder and cmd line arg for dev requirments,As discussed in #550 added a scripts folder and move main scripts into scripts folder.,LilyLME,38939048,2020-03-21T05:03:42Z,CONTRIBUTOR,False,28,12,9,A web privacy measurement framework,Python,7eed5ab5d9a616192ba3c91f2d389333b033ce37,"updated references to script in dockerfile

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
932,https://api.github.com/repos/mozilla/OpenWPM/pulls/591,591,Disable intermittent mp_logger test failure,"Fixes #559. We should be sure to file an issue to investigate, but for now we need to disable this test as it's failing constantly and makes it harder to read unrelated test failures.",englehardt,3280150,2020-03-20T17:47:40Z,MEMBER,True,3,0,1,A web privacy measurement framework,Python,3e97ed4d3eeb4cf46290f5eca2ea16e1b71fbe8e,Disable intermittent mp_logger test failure
933,https://api.github.com/repos/mozilla/OpenWPM/pulls/590,590,removed iframe/page type check from HTTP requests,Removed is_full_page and is_frame_load in http_requests as prescribed in  #565 ,LilyLME,38939048,2020-03-19T18:45:21Z,CONTRIBUTOR,True,40,55,5,A web privacy measurement framework,Python,86daa9ff315ddba29e1c862054516986d8b148cb,"removed iframe/page type check from HTTP requests

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
934,https://api.github.com/repos/mozilla/OpenWPM/pulls/590,590,removed iframe/page type check from HTTP requests,Removed is_full_page and is_frame_load in http_requests as prescribed in  #565 ,LilyLME,38939048,2020-03-19T18:45:21Z,CONTRIBUTOR,True,40,55,5,A web privacy measurement framework,Python,aef3dfca8011d3b4695d43534e72bb39311e8494,"corrected tests for removed page types

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
935,https://api.github.com/repos/mozilla/OpenWPM/pulls/590,590,removed iframe/page type check from HTTP requests,Removed is_full_page and is_frame_load in http_requests as prescribed in  #565 ,LilyLME,38939048,2020-03-19T18:45:21Z,CONTRIBUTOR,True,40,55,5,A web privacy measurement framework,Python,054aa15c1f973f2db56fc8ceeeafc5eb4963d317,"corrected tests for removed page types

Signed-off-by: LilyLME <brilyjoy@gmail.com>"
936,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,c6d97ddf70201b833042a8f4f5da051d40e183f9,First steps towards marking visits during shutdown as uncomplete
937,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,092bca3108f2adb89eb0fe0583c9c798b65214c5,Merge branch 'onSavedCallback' into issue-443
938,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,cc8898a29fba5221b73ba262a73932f4e2a7d999,No longer calling callbacks of interrupted command_sequences
939,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,baea253889bfca3ddb6dab169f13f1323648ed13,Merge branch 'master' into issue-443
940,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,20425f73fe62f02545dcd9530b86091cf4a39c44,Merge branch 'onSavedCallback' into issue-443
941,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,f34de1101e940d419636429e1d285aaf23aa4d2c,Merge branch 'master' into issue-443
942,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,2503fd989cb4aa9274be67b9fa766cfde138bf90,Merge branch 'Fixing_crawler' into issue-443
943,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,849d179c27bc21eebe332b05ed19c422221c3d46,First type annotations for BrowserManager
944,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,ad3557c347ded04ba9f8945f4ddb208eee3ca271,First step in implementing relaxed shutdown
945,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,af18cafcc0d0bb0c8cceb0e7ed7197b00520f149,WIP thinking about shutdown and callbacks
946,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,2a623f4f4dbad9cc2eaea3550efc7deb346dd34c,Lots of different stuff
947,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,36e849477dea6245ca719f913581b4c348b87d30,Formatting and more types
948,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,811df1d20800f1926f349d18d14461159fac35c2,Sorting out shutdown behaviour
949,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,8f7bcca5c6fb0c7d40b22ae95771db8200c937e5,More types and better logging
950,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,666fb2565c73b3a0adae1459a4113aa33e341a08,Trying new starvation prevention
951,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,6cb33fdae50c1d111df39a94376458332a0f74d0,Actually working starvation prevention
952,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,ab849cbf04ea1757f6de5cbd05f133ec53af6525,Created interrupted table to document all interrupted visits
953,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,98a670652950805015eae620e21225579efc680d,Got parquet interrupted table working
954,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,f865ab969db795fb66ad939ab32b9334f4599f10,Fixing flake8
955,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,b19f25f5a385bb55ee2b16619b030cddd6e6625c,Fixing flake8 errors
956,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,84f68011cfafa745f45c45285f42af1a0f2d4391,Merge branch 'master' into issue-443
957,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,c9c72427573a632fde5935101626363684eaa970,Fixing flake8
958,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,08a3cc0871f8cb08748fc726318e8c1fa8356bd4,Merge branch 'Fixing_crawler' into issue-443
959,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,9a7a0c2862e440b782d9c7f321277326c198cfb6,Merge branch 'master' into issue-443
960,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,be29cd5b702972baa341236de15c068a3880b476,Removed _cleanup_before_fail
961,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,9c5dba9d7381285f0c221c2638c310cb2f694685,Propagating relaxed flag to browser_shutdown
962,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,b8481e602b726c7fe724ce89a9912c934663526c,Scoped try/catch tighter to reduce indentation
963,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,87c352ee32939a4334eefd07b91b56be48cdf57b,Added failure handling to finalize message
964,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,67d7a0b167e65a04bb974fc8052618bcf433d577,Lowered log level of no visitID error and made it easier to parse for sentry
965,https://api.github.com/repos/mozilla/OpenWPM/pulls/589,589,Mark visits during shutdown as incomplete,"Closes #443 
Current implementation problems:
- We aren't writing out whether a certain command sequence ran to completion
- We don't have a unique identification per entry in the reddis queue that we persist
- We currently discard the whole batch and not just the actually interrupted crawls

Resulting problems:
- If we have multiple data entries for the same top level domain, we can't just throw the first one away as there might have been other things that weren't captured

Suggestion:
- Create a column in site_visits that contains a unique id (that would have to be generated when inserting into the redis queue)
   This would be pretty easy to do
- Create a field to indicate unsuccessful crawl
  This is really hard as we need to write it out during shutdown",vringar,13276717,2020-03-19T15:45:45Z,COLLABORATOR,True,804,308,19,A web privacy measurement framework,Python,d146042ab8b888a3b0c4d11c0726b8cfca562df3,Now closing the current window when a finalize command is sent
966,https://api.github.com/repos/mozilla/OpenWPM/pulls/587,587,Fixed log reading in python3.8.1,"We don't need to read the logfile, so we should just use ""a"".

Also somehow I get a ""File is not seekable"" exception on Python3.8.1 and this fixes it",vringar,13276717,2020-03-18T17:50:58Z,COLLABORATOR,True,1,1,1,A web privacy measurement framework,Python,80a97cf697baea0baa6f36411f0757fe322af92c,Fixed log reading in python3.8.1
967,https://api.github.com/repos/mozilla/OpenWPM/pulls/586,586,Add libsasl2-dev to development dependencies,"This PR adds `libsasl2-dev` to the development dependencies to prevent the following:

After the dependencies were updated in https://github.com/mozilla/OpenWPM/pull/581, running `install-dev.sh` would fail because the wheel for `sasl` couldn't be built:

  ```
In file included from sasl/saslwrapper.cpp:254:0:
  sasl/saslwrapper.h:22:10: fatal error: sasl/sasl.h: No such file or directory
   #include <sasl/sasl.h>
            ^~~~~~~~~~~~~
  compilation terminated.
  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1
  ----------------------------------------
  ERROR: Failed building wheel for sasl
```

In order to build  it successfully one should manually install `libsasl2-dev`, as mentioned in https://github.com/cloudera/python-sasl/issues/10#issuecomment-400418240",boolean5,5280463,2020-03-18T17:32:52Z,COLLABORATOR,True,1,0,1,A web privacy measurement framework,Python,3098222f91610d9d5a417f6fdf450a22b6c21448,"Add libsasl2-dev to development dependencies

Add libsasl2-dev to the development dependencies. Without it, building
the wheel for the sasl python package fails."
968,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,9a018fdbfacfa6889cc3f075f2466e18bd97aab3,Tagging_Browsers
969,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,cd2c266c32e22ae015529157e6bfb9852b19eb53,Tagging-Browsers
970,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,2a7582d321a0d943c6c85bfb126505548d0ff980,Tagging-Browsers
971,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,3818ec213515a8434ea8b90be1ae18048ebd0099,Tagging-Browsers
972,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,0c8614a3670f4b8726d6af3e47e13e50b85c7e35,Tagging-Browsers
973,https://api.github.com/repos/mozilla/OpenWPM/pulls/585,585,[WIP] Tagging-Browsers-Changing-Default-Browser-params,,Akhila499,60104414,2020-03-16T17:53:23Z,NONE,False,179,26,5,A web privacy measurement framework,Python,fbb83ee300a3055ac2f2bd0b7081bc3f7180d548,Merge branch 'Tagging-Browsers' of github.com:Akhila499/OpenWPM into Tagging-Browsers
974,https://api.github.com/repos/mozilla/OpenWPM/pulls/583,583,Remove --user flag from pip install,"This PR resolves #577 by removing the `--user` flag from `pip3 install` and `python3 get-pip.py` commands.

This flag caused `install.sh` and `install-dev.sh` to fail with the following error when run in a virtual environment: `ERROR: Can not perform a '--user' install. User site-packages are not visible in this virtualenv.`

As @englehardt [pointed out](https://github.com/mozilla/OpenWPM/issues/577#issuecomment-598475227), pip now behaves by default as if the `--user` flag was used when running outside of a virtual environment and there is no write permission for the global site-packages directory. Given that, using this flag is no longer necessary.",boolean5,5280463,2020-03-13T16:55:29Z,COLLABORATOR,True,3,3,2,A web privacy measurement framework,Python,c240690a16a04beeecea24da31ee0c4850d7c559,"Remove --user flag from pip install

Remove the --user flag from 'pip install' commands. This flag caused
install.sh and install-dev.sh to fail when run in a virtual environment,
because user site-packages were not visible. It is no longer necessary,
as the current default behavior of pip is to perform a user install when
not running in a virtual environment and the global site-packages
directory is not writeable."
975,https://api.github.com/repos/mozilla/OpenWPM/pulls/582,582,Remove test/expected.py,"This PR removes the `test/expected.py` file, as none of the expected values defined within it is used by any tests. Expected values are defined in the test file where they are used. Closes #73 ",boolean5,5280463,2020-03-13T09:49:02Z,COLLABORATOR,True,0,30,1,A web privacy measurement framework,Python,f2bb36d2aefc6c1310b7c36704c7141fd804b7ba,"Remove test/expected.py

Remove the test/expected.py file, as none of the expected values defined
within it is used by any tests. Expected values are defined in the test
file where they are used."
976,https://api.github.com/repos/mozilla/OpenWPM/pulls/581,581,Update python dependencies,Updates pinned dependencies.,englehardt,3280150,2020-03-12T22:21:43Z,MEMBER,True,107,99,2,A web privacy measurement framework,Python,6a1c85a73a2d3114325451083d6aa1e4e57ccad0,Update python dependencies
977,https://api.github.com/repos/mozilla/OpenWPM/pulls/581,581,Update python dependencies,Updates pinned dependencies.,englehardt,3280150,2020-03-12T22:21:43Z,MEMBER,True,107,99,2,A web privacy measurement framework,Python,feaf32ed3090ac5a584d54b78638308146e809fe,Merge branch 'master' into 2020_03_12_update_dependencies
978,https://api.github.com/repos/mozilla/OpenWPM/pulls/580,580,Adding Commands.py file,"This a WIP PR. I have currently just added the base class and subclasses for the commands in the Commands.py file. Please let me know if this is the way you wanted it to be implemented(I have used factory method pattern) and if the naming of classes etc is ok. 
Also a few questions
1. Do we intend to pass the entire object to function calls for eg [here](https://github.com/mozilla/OpenWPM/blob/59e79a7adbb41b2a801b7f8fb9c2863cb6222cc7/automation/TaskManager.py#L457) or send something like obj.command
2. Also we are getting a visit_id [here](https://github.com/mozilla/OpenWPM/blob/59e79a7adbb41b2a801b7f8fb9c2863cb6222cc7/automation/TaskManager.py#L452) and also a visit_id [here](https://github.com/mozilla/OpenWPM/blob/master/automation/Commands/command_executor.py#L12). Which one am I supposed to maintain in the class?
3. How do you want me write the class for [this](https://github.com/mozilla/OpenWPM/blob/master/automation/Commands/command_executor.py#L59)?",svensevenslow,21080355,2020-03-12T10:18:47Z,CONTRIBUTOR,True,160,54,6,A web privacy measurement framework,Python,fcefcc87560a580882c93dacdbb55a979b3c9497,Simplify command issuing
979,https://api.github.com/repos/mozilla/OpenWPM/pulls/578,578,Type annotation and refactoring in TaskManager.py,Should be merged before #574 ,vringar,13276717,2020-03-11T22:39:56Z,COLLABORATOR,True,130,136,5,A web privacy measurement framework,Python,b838e700c335916a63a1dc5b435a5738bd2615ff,Type annotation and refactoring in TaskManager.py
980,https://api.github.com/repos/mozilla/OpenWPM/pulls/578,578,Type annotation and refactoring in TaskManager.py,Should be merged before #574 ,vringar,13276717,2020-03-11T22:39:56Z,COLLABORATOR,True,130,136,5,A web privacy measurement framework,Python,ca6a31dc02d52653e7ea3d04ffdd75ac44e23800,Updated S3 tests
981,https://api.github.com/repos/mozilla/OpenWPM/pulls/578,578,Type annotation and refactoring in TaskManager.py,Should be merged before #574 ,vringar,13276717,2020-03-11T22:39:56Z,COLLABORATOR,True,130,136,5,A web privacy measurement framework,Python,f74a660770fd5e8fba15a190efb1687b46e7506a,Removed Python3.5 support to get type annotated local variables
982,https://api.github.com/repos/mozilla/OpenWPM/pulls/578,578,Type annotation and refactoring in TaskManager.py,Should be merged before #574 ,vringar,13276717,2020-03-11T22:39:56Z,COLLABORATOR,True,130,136,5,A web privacy measurement framework,Python,467fe164ef2edf8f90e06f51c6e11800a2a0f053,"Added type hints to development pointers

Also now autogenerating the ToC and removed trailing
whitespace"
983,https://api.github.com/repos/mozilla/OpenWPM/pulls/575,575,Setting site_rank in crawler.py,Closes #564,svensevenslow,21080355,2020-03-10T08:53:53Z,CONTRIBUTOR,True,2,1,1,A web privacy measurement framework,Python,d41ff52bdeaaa6c9bb8a35d6060261c791b2ba9f,setting site_rank
984,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,f6f7b9e2bb129be7e683ca7edd39e711fda9c900,Added signalhandler to DataAggregator
985,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,55f87570f746565efc581b9fe2ce0dbf692c81af,Logging draining the queue
986,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,71eef0297f23635e0c72d631959bc2091a2def3e,Reorder imports and removed unused
987,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,6627a63e8910bf05f49b0c90e3e198de80be1ce8,Merge branch 'master' into issue-450
988,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,cf011814803af09edf8b9644d0e1a19e7b5badf2,trying different script
989,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,a28a13f9bf25be4736050cc316dbf181340e5ea3,Moved signal hooks to TaskManager
990,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,6196167e9ce0198981ac6e18f1956b3d2d1a8ccd,removed all hacks/experimental code
991,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,8047f08e9d29bdbd234bf18a682734b619efc495,reverted accidental change in demo.py
992,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,2ba7b8ccd78b4dab07978ee3ca8ec58496eea735,Made signal handler registering more pythonic
993,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,8dc6dee380e9e6fb3793c7bc2e98ff5736da596c,"Different syntax for default executable

otherwise PID 1 is /bin/sh which doesn't forward
signals to the running process but instead just
exits"
994,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,8a8231fab5bd7018fbd3aaee7a9f25cf8f9a6bac,"Added tini as init system to docker image

It will clean up zombie processes for us and
forwards signals from outside to our script"
995,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,16c4ed7aca1bd1bfa153e52dc69087c2bf3a0628,Merge branch 'master' into issue-450
996,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,4c2be988c8c6d17085b9f25a39ba7e43eabf7399,added additional logging for shutdown and comments
997,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,1d1f0050ec616d65cff7afd842c88f32210d2cd4,Added first draft of an infra drawing
998,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,61e3c0e41678d22eede69235927683377457e721,Added callback to constructor of CommandSequence
999,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,2861c850040a76050026a6d7d7153a3c7e918bce,Flake8 fixes
1000,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,3c95de3a06299e7dc13b1561ff476471acefcdd3,First draft of CompletionQueue
1001,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,0b5b1f2e7a0f2b43cf3fe4db3a6d4bf500ec5acd,"Different syntax for default executable

otherwise PID 1 is /bin/sh which doesn't forward
signals to the running process but instead just
exits"
1002,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,3e48deeff2829d3de74ece302950f019a09ec72a,"Added tini as init system to docker image

It will clean up zombie processes for us and
forwards signals from outside to our script"
1003,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,09a400c881be4227d2742fd775dbcb7f5bfaff35,Added first draft of an infra drawing
1004,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,4f850e669eea92db459b4a52e8df3d5414fc8ae4,Added callback to constructor of CommandSequence
1005,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,e47e0eef31170d9b733a652ada1a5c4d3ff8a742,Flake8 fixes
1006,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,1721a27410f958b5a95dbb821c5e7d52654609d0,First draft of CompletionQueue
1007,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,c5d959223e76ab04f7b36ea365e381a664b94ea5,Introduced base_params tuple in aggregators
1008,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,86a7d575bae5f4aff330512952b79f441d2d77d8,Fixed s3 test after removing *
1009,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,4e418b37b5b72446c74109343cad98859d07382e,working callbacks
1010,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,41aef26408a88542b3d7746da00225b3aaf1e5b7,removed accidentally added compile cache
1011,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,8c91b52ba3ab3081690601b46543b4fd633c249f,Renamed CommandSequence.markDone to mark_done
1012,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,eae0604adf940464614509d2b6f2506e6bc38483,First proper attempt at mark_visit_id_done in S3aggregator
1013,https://api.github.com/repos/mozilla/OpenWPM/pulls/574,574,On saved callback,"Added the ability for the user to supplied a callback that will be invoked once the aggregator has saved all content for the given visit_id.
Also rewrote `crawler.py` to make use of this possibility",vringar,13276717,2020-03-06T16:47:13Z,COLLABORATOR,True,343,92,17,A web privacy measurement framework,Python,7edd789543bd0cd98242918963470aedb7c64c67,Fix S3Aggregator
1014,https://api.github.com/repos/mozilla/OpenWPM/pulls/568,568,Bump codecov from 3.6.1 to 3.6.5 in /automation/Extension/webext-instrumentation,"Bumps [codecov](https://github.com/codecov/codecov-node) from 3.6.1 to 3.6.5.
<details>
<summary>Release notes</summary>

*Sourced from [codecov's releases](https://github.com/codecov/codecov-node/releases).*

> ## v3.6.4
> Fix for Cirrus CI
> 
> ## v3.6.3
> AWS Codebuild fixes + package updates
> 
> ## v3.6.2
> command line args sanitised
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/codecov/codecov-node/commits)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [drazisil](https://www.npmjs.com/~drazisil), a new releaser for codecov since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=codecov&package-manager=npm_and_yarn&previous-version=3.6.1&new-version=3.6.5)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-02-19T18:24:19Z,CONTRIBUTOR,True,97,39,1,A web privacy measurement framework,Python,77e6e7aa0f54d88d2692eccf7e4710011a6d25b7,"Bump codecov in /automation/Extension/webext-instrumentation

Bumps [codecov](https://github.com/codecov/codecov-node) from 3.6.1 to 3.6.5.
- [Release notes](https://github.com/codecov/codecov-node/releases)
- [Commits](https://github.com/codecov/codecov-node/commits)

Signed-off-by: dependabot[bot] <support@github.com>"
1015,https://api.github.com/repos/mozilla/OpenWPM/pulls/560,560,Bump handlebars from 4.1.2 to 4.5.3 in /automation/Extension/webext-instrumentation,"Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> 
> Bugfixes:
> 
> - fix: add ""no-prototype-builtins"" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> 
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies,
>   deprecate old assertion-methods - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__`
>   have been added to the list of ""properties that must be enumerable"".
>   If a property by that name is found and not enumerable on its parent,
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the ""lookup""-helper.
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes:
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string';
> }
> ```
> 
> - The change may be breaking in that respect, but we still only
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> 
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for ""constructor"" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add ""no-prototype-builtins"" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to ""runtime""-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2020-02-11T17:13:40Z,CONTRIBUTOR,True,443,274,1,A web privacy measurement framework,Python,c7658908a4c9589bb8a222175d49b5552b102ebe,"Bump handlebars in /automation/Extension/webext-instrumentation

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>"
1016,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,ae8d8021880ce3fcb80edb5907b2e2b49aacc18c,"Cleanup HTTP Instrument

* Remove commented code
* Re-enable logging of speculative requests
* Remove `new_request_id` from `http_redirects`. Replace
  `old_request_id` with `request_id` since the request ID persits through
  redirects."
1017,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,36ccff5c90863549d7f806cb280f8c56f8de503e,Rename legacy javascript_cookies table to cookies
1018,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,ba83f2cfab59f042d6d1beb9977a83bdf3144ed2,Cleanup js_instrument
1019,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,4a051f2de4962731b9c5617e3ee516d3583308e2,Cleanup POST parser
1020,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,5222bc888222290958496ea4a6785b3b6c83d73a,Update README to reflect current status of OpenWPM
1021,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,e6d5380b1efb8bd1e760d5b77bfca7ce34d5af74,Fix name collision in cookie instrument
1022,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,8f2e41d248a8850cc1df13c0e6a0e10d98277708,Update license to reflect code removal
1023,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,e7017452ed082336c18e76a0f04c17d6f447735d,Fixed import order in cookie-instrument.ts
1024,https://api.github.com/repos/mozilla/OpenWPM/pulls/556,556,[WIP] Code cleanup,,englehardt,3280150,2020-01-31T08:32:44Z,MEMBER,False,65,660,12,A web privacy measurement framework,Python,dc7dec6b029dc6cf9ea08ad8eefef663fba9fcd9,Finally understood the tslint error
1025,https://api.github.com/repos/mozilla/OpenWPM/pulls/555,555,Better download links,"Changing the download link to display the hash of the source it was build from.
This allows us to look up a tagged version in [hg](https://hg.mozilla.org/releases/mozilla-release/tags) (e.g. release or beta), take it's hash, paste it in and start working with it.
Closes #553 ",vringar,13276717,2020-01-22T11:07:17Z,COLLABORATOR,True,16,6,2,A web privacy measurement framework,Python,5047cfadae118855094e176e914648aa5b89aab2,Found pinned versions and linked to how to
1026,https://api.github.com/repos/mozilla/OpenWPM/pulls/555,555,Better download links,"Changing the download link to display the hash of the source it was build from.
This allows us to look up a tagged version in [hg](https://hg.mozilla.org/releases/mozilla-release/tags) (e.g. release or beta), take it's hash, paste it in and start working with it.
Closes #553 ",vringar,13276717,2020-01-22T11:07:17Z,COLLABORATOR,True,16,6,2,A web privacy measurement framework,Python,ee03904ddd1321c2792be30ec1b7123eea3fe45d,Updated comment in linux script as well
1027,https://api.github.com/repos/mozilla/OpenWPM/pulls/555,555,Better download links,"Changing the download link to display the hash of the source it was build from.
This allows us to look up a tagged version in [hg](https://hg.mozilla.org/releases/mozilla-release/tags) (e.g. release or beta), take it's hash, paste it in and start working with it.
Closes #553 ",vringar,13276717,2020-01-22T11:07:17Z,COLLABORATOR,True,16,6,2,A web privacy measurement framework,Python,8a57029bea4d8721a65d891ee16cf472f190988b,Merge branch 'master' into better_download_links
1028,https://api.github.com/repos/mozilla/OpenWPM/pulls/555,555,Better download links,"Changing the download link to display the hash of the source it was build from.
This allows us to look up a tagged version in [hg](https://hg.mozilla.org/releases/mozilla-release/tags) (e.g. release or beta), take it's hash, paste it in and start working with it.
Closes #553 ",vringar,13276717,2020-01-22T11:07:17Z,COLLABORATOR,True,16,6,2,A web privacy measurement framework,Python,cdee74956c52c641f082a8b89512d842a8117ca9,Inlined FF version upgrade description
1029,https://api.github.com/repos/mozilla/OpenWPM/pulls/554,554,Switched to latest release instead of specific version,"With the link that @nhtn11 has received we no longer are bound to a specific version
but instead run on the lastest stable release

Closes #553 ",vringar,13276717,2020-01-17T16:27:30Z,COLLABORATOR,False,4,4,2,A web privacy measurement framework,Python,e8a50349d28177c281e56e75b1652a0dd800e9f8,"Switched to latest release instead of specific version

With the link that @nhtn11 has received we no longer are bound to a specific version
but instead run on the lastest stable release"
1030,https://api.github.com/repos/mozilla/OpenWPM/pulls/554,554,Switched to latest release instead of specific version,"With the link that @nhtn11 has received we no longer are bound to a specific version
but instead run on the lastest stable release

Closes #553 ",vringar,13276717,2020-01-17T16:27:30Z,COLLABORATOR,False,4,4,2,A web privacy measurement framework,Python,63e14958db475694455424cd83bd37feb7938eb4,Used from arch string for MaxOS X
1031,https://api.github.com/repos/mozilla/OpenWPM/pulls/549,549,Fix missing command_status for critical errors,Fixes #546 ,englehardt,3280150,2019-12-20T15:28:03Z,MEMBER,True,1,0,1,A web privacy measurement framework,Python,495fbb143085e7d1f21d77e58d5b8a3e18fe3434,Fix missing command_status for critical errors
1032,https://api.github.com/repos/mozilla/OpenWPM/pulls/544,544,Upgrade to Firefox 71 and geckodriver 0.26.0,,englehardt,3280150,2019-12-18T19:25:22Z,MEMBER,True,6,6,2,A web privacy measurement framework,Python,96c4ba28cd31d49198b016b6f78b2ccf8266b97f,Upgrade to Firefox 71 and geckodriver 0.26.0
1033,https://api.github.com/repos/mozilla/OpenWPM/pulls/543,543,Update dependecies,"Update npm packages.

I've also added two project-scoped npm config files to specify that the `https` registry should be used. This seems to prevent the types of changes that just overwrite `package-lock.json` package urls from `https` to `http`, like what happened in 05af31afcbe027b0d6ea251831bb7d2d65bd2b51.

I did have to follow the steps in https://github.com/npm/npm/issues/16938#issuecomment-339863980 to clear out my locally cached packages before this change took effect. ",englehardt,3280150,2019-12-18T16:37:58Z,MEMBER,True,2142,3266,6,A web privacy measurement framework,Python,05af31afcbe027b0d6ea251831bb7d2d65bd2b51,Update npm packages
1034,https://api.github.com/repos/mozilla/OpenWPM/pulls/543,543,Update dependecies,"Update npm packages.

I've also added two project-scoped npm config files to specify that the `https` registry should be used. This seems to prevent the types of changes that just overwrite `package-lock.json` package urls from `https` to `http`, like what happened in 05af31afcbe027b0d6ea251831bb7d2d65bd2b51.

I did have to follow the steps in https://github.com/npm/npm/issues/16938#issuecomment-339863980 to clear out my locally cached packages before this change took effect. ",englehardt,3280150,2019-12-18T16:37:58Z,MEMBER,True,2142,3266,6,A web privacy measurement framework,Python,212c23024e9af78b59a8a88288814be045af38db,Actually update dependencies
1035,https://api.github.com/repos/mozilla/OpenWPM/pulls/543,543,Update dependecies,"Update npm packages.

I've also added two project-scoped npm config files to specify that the `https` registry should be used. This seems to prevent the types of changes that just overwrite `package-lock.json` package urls from `https` to `http`, like what happened in 05af31afcbe027b0d6ea251831bb7d2d65bd2b51.

I did have to follow the steps in https://github.com/npm/npm/issues/16938#issuecomment-339863980 to clear out my locally cached packages before this change took effect. ",englehardt,3280150,2019-12-18T16:37:58Z,MEMBER,True,2142,3266,6,A web privacy measurement framework,Python,341c10b0530a83f1a5cc33a61bed5c2f156e847a,Force https registry
1036,https://api.github.com/repos/mozilla/OpenWPM/pulls/542,542,Generate positive visit_id and crawl_ids,Follow on from #392 ,englehardt,3280150,2019-12-17T20:36:17Z,MEMBER,True,26,24,3,A web privacy measurement framework,Python,4f8cee8797f23f6bda33f22b8c0d3caceecd40fa,"Switch random number generation to getrandbits

The previous implementation based on UUIDs used to generate negative random numbers as well. This commit changes the random number generation to random.getrandbits which makes sure only positive numbers are used as IDs."
1037,https://api.github.com/repos/mozilla/OpenWPM/pulls/542,542,Generate positive visit_id and crawl_ids,Follow on from #392 ,englehardt,3280150,2019-12-17T20:36:17Z,MEMBER,True,26,24,3,A web privacy measurement framework,Python,69ff758a8ffeb690af25ece2e0a5aac6283abf6a,Test whether the generated visid_ids are in range
1038,https://api.github.com/repos/mozilla/OpenWPM/pulls/542,542,Generate positive visit_id and crawl_ids,Follow on from #392 ,englehardt,3280150,2019-12-17T20:36:17Z,MEMBER,True,26,24,3,A web privacy measurement framework,Python,d8a64f08f523f7c91543b6f0ecefc7908e352073,Merge branch 'mozilla-random-id-fix-and-test' of git://github.com/eriktews/OpenWPM into eriktews-mozilla-random-id-fix-and-test
1039,https://api.github.com/repos/mozilla/OpenWPM/pulls/542,542,Generate positive visit_id and crawl_ids,Follow on from #392 ,englehardt,3280150,2019-12-17T20:36:17Z,MEMBER,True,26,24,3,A web privacy measurement framework,Python,8f6c4122d1655050db1be2b77b3219dfb7bc66df,Update schema to unsigned 32bit ids
1040,https://api.github.com/repos/mozilla/OpenWPM/pulls/542,542,Generate positive visit_id and crawl_ids,Follow on from #392 ,englehardt,3280150,2019-12-17T20:36:17Z,MEMBER,True,26,24,3,A web privacy measurement framework,Python,61e2c35dd74f44007a2dea66afa783e892c91bf5,Update instance_id to 32 bits
1041,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,d781c6c4d27c37a82778bb81f6e5f83719647aaa,WIP callstacks
1042,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,2c9a88cb8fc616cdf83693e6a036ee3ed9a4ceb1,Propagate callstacks to webextension background script
1043,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,879502d0cfa8904fb733c4a79db0b0767ff624ce,Send request id matching webRequest instead of channel id
1044,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,991797a93e657bfeb91f1d7fde3db107bf807b23,Observe all http response notifications and add comments
1045,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,b0b5bb8858ae6f8ce71f85831f626b0233c47114,Initial Draft for saving callstacks
1046,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,82eced7a80e98028e74ce9ec6317141521217b64,Merge branch 'master' into nhnt11-callstacks
1047,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,d6de37427f487c802421a6779f75dbdc055b5f67,now creating the Callstack Instrument
1048,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,b2fda413606cda55f0ef55309406c92f6b0e6c4c,Fixed StackDumpChild and moved callstack-instrument
1049,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,5162fd0e538c4fd52c6f333694c156fe3bfb8fb1,adding comments
1050,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,10cbc5f95730ddce64aa1ab85741249c6516a4e2,Callstack capturing activated in demo.py
1051,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,5357aebd13487da3b67fb1f63ccbdc91caad7e98,cherrypicking changes to schemas
1052,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,e03b07e42890904cc27232e6717c8aa86a0f662e,aligning on data types with the rest of parquest_schema.py
1053,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,61a58b62c681968943a59a17ff18b3f019189fa6,rawgit is shutting down
1054,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,ea9a96d8e93521522f08ab1f20be65e18a61c8e0,"Fixing S3 Aggregator test

By calling a remote resource via JS the callstack table gets
created."
1055,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,6a8464c32f1b2956a7365ba9e293d73d4857df60,Removing debug messages
1056,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,703281d30035c3a70ee16ae5ef0594198b98237d,Implemented review suggestions
1057,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,8e3a637e8ea8cd412baf66366375aa4212bccd61,Created new callstack_instrument test
1058,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,579e83b588b7846b5730df78b83b00563f5c6d7c,"Changed listening adress in test server

Because with 0.0.0.0 it listens to all interfaces instead
of just the loopback one. This makes debugging test failures
inside a container easier"
1059,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,2fc30da6b184a3c5141e31aabea8c49829b328f4,First version of test_callstack_instrument that returns anything
1060,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,bfb0ace359f636760e3637c07e817faaa6163c0b,passing callstack_test
1061,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,65ab31e4561b6993f1b72ac514ac2de166c965b6,removed unneeded script
1062,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,bbd0a098cf4567937c07069d6d75d812c5cebe73,Merge branch 'better_download_links' into nhnt11-callstacks
1063,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,c9f13dcd757585301a3a70cff368bf5c440aea4d,Added browser config error
1064,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,5d2341ea3596f4022963cad26f836df0d4bf2e86,reverted Nhnt11's package.json changes
1065,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,5765406f339a93b42747b3c4637e91621a35eaf8,removed build artifact
1066,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,333370920f21ab107e86c7ff6d8fe03ff1ae887b,Merge branch 'master' into nhnt11-callstacks
1067,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,cac0b55d3e3084480e10da367edd19ff9d3809b5,Removed unused import
1068,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,e9aef3b377efde1c68385c93e31864d35d07f4ba,Fixing import order
1069,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,c13f7de58571d0737abb6f5a9eb6a0c42dcda443,Added callstack_instrument to default_browser_params
1070,https://api.github.com/repos/mozilla/OpenWPM/pulls/540,540,Callstacks,"Just opening this so I can write my thoughts inline.
Closes #352 ",vringar,13276717,2019-12-13T14:50:25Z,COLLABORATOR,True,944,683,22,A web privacy measurement framework,Python,4814cdb6fb430c298b62edb4c2be7daa8898e1e0,Fixed s3_aggregator test
1071,https://api.github.com/repos/mozilla/OpenWPM/pulls/536,536,Created a testcase that sends exc_info to MPLogger,"This was needed as the old testcases were sending exc_text instead
while real runs crashed on exc_info formatting

Closes #534 ",vringar,13276717,2019-11-26T11:13:07Z,COLLABORATOR,True,21,0,1,A web privacy measurement framework,Python,6f54b9152c6aded03d82c7d8ed25b36ab0283587,"created a testcase sends exc_info to MPLogger

This was needed as the old testcases were sending exc_info instead
while real runs crashed on exc_info formatting"
1072,https://api.github.com/repos/mozilla/OpenWPM/pulls/533,533,Correct dependency management documentation,"We should never operate directly on the compiled `.txt` files and should only make changes to the `.in` files. The current documentation is incorrect.

This also runs an update on both dependency files (using the correct commands).",englehardt,3280150,2019-11-21T23:44:26Z,MEMBER,True,56,56,3,A web privacy measurement framework,Python,571fd0ffacda3d8a7ceec65e33c617c7e51ab00b,Correct documentation on dependency upgrades
1073,https://api.github.com/repos/mozilla/OpenWPM/pulls/533,533,Correct dependency management documentation,"We should never operate directly on the compiled `.txt` files and should only make changes to the `.in` files. The current documentation is incorrect.

This also runs an update on both dependency files (using the correct commands).",englehardt,3280150,2019-11-21T23:44:26Z,MEMBER,True,56,56,3,A web privacy measurement framework,Python,add89c17974902f01bcbc9e9762c3547c2cf54b9,Update dependencies
1074,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,034b937b340f3a38166b7458f9b126820eb1e941,removed all __future__
1075,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,c8fcd64f7f5c761c9a37d8217d0702cd198da048,removing six as a project dependency
1076,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,f0136dd78cb1f19ad2ffbeb9992bfa290acd8fab,removed all uses of six
1077,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,c3a240e7894aedf6f535ceb8dee38b160e1ba878,removed unused range import and some empty lines
1078,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,734b8429be6ddb1818f55dfe678e2ac1979d1bef,removed faulty import
1079,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,9c1464a9d101e4c1aca73b5cc766ba17708363ad,Removing reraise call
1080,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,b7f2ae2cad23a88185cdf5426ee9e363d520a983,cleaned up ensure_str comment
1081,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,74b629eee783977ce2598e16ca4be94a212c3160,ran pip-compile --upgrade
1082,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,d8cbfee8bff559203a24d83f5aac3ab82031062b,removed python2 from scripts and dockerfile
1083,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,196ab1a5ffede7c6424729f39442f7c65f3b5dfa,"removed ensure_str in MPLogger.py

it was causing exceptions because we were trying to ensure
that a pickled object was a valid unicode string"
1084,https://api.github.com/repos/mozilla/OpenWPM/pulls/532,532,Removed all traces of python2,Breaking all the backwards compat to move forward to a less cluttered future,vringar,13276717,2019-11-20T20:10:01Z,COLLABORATOR,True,77,171,53,A web privacy measurement framework,Python,a8a753e45b22876fe8bca6e1715a8abae3c6ed72,Indicate the Python 2 is not supported
1085,https://api.github.com/repos/mozilla/OpenWPM/pulls/531,531,Added Table of Contents,,vringar,13276717,2019-11-20T19:38:30Z,COLLABORATOR,True,30,0,1,A web privacy measurement framework,Python,0be5d9b22068b2636da74dec157b124f01520625,Added Table of Contents
1086,https://api.github.com/repos/mozilla/OpenWPM/pulls/531,531,Added Table of Contents,,vringar,13276717,2019-11-20T19:38:30Z,COLLABORATOR,True,30,0,1,A web privacy measurement framework,Python,3773702c870c830ae10bdcc97c4a7f8baccac3a9,Missing # in readme ToC
1087,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,f6f7b9e2bb129be7e683ca7edd39e711fda9c900,Added signalhandler to DataAggregator
1088,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,55f87570f746565efc581b9fe2ce0dbf692c81af,Logging draining the queue
1089,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,71eef0297f23635e0c72d631959bc2091a2def3e,Reorder imports and removed unused
1090,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,6627a63e8910bf05f49b0c90e3e198de80be1ce8,Merge branch 'master' into issue-450
1091,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,cf011814803af09edf8b9644d0e1a19e7b5badf2,trying different script
1092,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,a28a13f9bf25be4736050cc316dbf181340e5ea3,Moved signal hooks to TaskManager
1093,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,6196167e9ce0198981ac6e18f1956b3d2d1a8ccd,removed all hacks/experimental code
1094,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,8047f08e9d29bdbd234bf18a682734b619efc495,reverted accidental change in demo.py
1095,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,2ba7b8ccd78b4dab07978ee3ca8ec58496eea735,Made signal handler registering more pythonic
1096,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,8dc6dee380e9e6fb3793c7bc2e98ff5736da596c,"Different syntax for default executable

otherwise PID 1 is /bin/sh which doesn't forward
signals to the running process but instead just
exits"
1097,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,8a8231fab5bd7018fbd3aaee7a9f25cf8f9a6bac,"Added tini as init system to docker image

It will clean up zombie processes for us and
forwards signals from outside to our script"
1098,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,16c4ed7aca1bd1bfa153e52dc69087c2bf3a0628,Merge branch 'master' into issue-450
1099,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,4c2be988c8c6d17085b9f25a39ba7e43eabf7399,added additional logging for shutdown and comments
1100,https://api.github.com/repos/mozilla/OpenWPM/pulls/528,528,Registering signal handler to handle shutdown gracefully,"To reduce data loss in Kubernetes
Closes #450 ",vringar,13276717,2019-11-14T11:44:43Z,COLLABORATOR,False,32,10,6,A web privacy measurement framework,Python,1d1f0050ec616d65cff7afd842c88f32210d2cd4,Added first draft of an infra drawing
1101,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,2bdef1be30278e4b4234e0756b575fde1f73e7bd,.gitignore/.dockerignore build artifact `spoof.js`
1102,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,80ef59ad6e0731aa5d512c2f950783050d46f6fc,"Adjusted Firefox extension structure for a new component

The actual executed code is located in ""automation/Extension/spoof.js"""
1103,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,f8c112d00186bba76b2bc185f9961180bcf799ae,"Add browser parameter `spoof_navigator`

The parameter equals `false` by default, that is the spoofing is disabled by default."
1104,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,a20449152ec0f308d1466c179b7ba2c29534f2f4,Use JavaScript proxy to spoof `webdriver` attribute
1105,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,57a249528078fc504637dde79f2228381a34108f,License reference and README adjustment for `navigator` spoofing
1106,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,f7d35ec408538bbf5d5d19b48f5d1ffe61240f72,"Rename option

This renames `spoof_navigator` to `hide_webdriver` to be more descriptive."
1107,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,ce75907d98571f4ebfb34239e8ef3a7c8a1e6e57,"Fix problem with broken functions

Previously, `navigator` functions such as `javaEnabled` were not proxied correctly and lead to broken pages (for example embedded YouTube videos)."
1108,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,4ca525ca0200765f3d4a70a23d15516c2498344e,"Enable Firefox preference for pop-up window prevention

We suspect this setting is set to `false` by Selenium. It is now manually overwritten such that pop-up windows are blocked by default. See discussion in #526."
1109,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,84e4b4811b4bcc8dca4f817e18252d97c850a02d,"Integrate best effort workaround for iframes

Previously, in iframes the original `navigator` values could be accessed. Now, this is only possible via `window.frames[0]`/`window[0]` (which is the same). Again thanks to Alexander Schlarbs User Agent Switcher extension for the code."
1110,https://api.github.com/repos/mozilla/OpenWPM/pulls/526,526,Spoof `navigator.webdriver` to `false`,"### What?
Regarding to  #448 this PR extends the OpenWPM instrumentation extension (WebExtension) to spoof the `navigator.webdriver` attribute to `false`. This is done by overwriting `window.navigator` with a JavaScript proxy.

### Why a JavaScript proxy?
Why not simply do a `Object.defineProperty(navigator, 'webdriver', {enumerable: true, value: false})`? Well, this changes the `webdriver` attribute but also the order of the `window.navigator` attributes. That is, the overwritten `webdriver` attribute is listed as first while normally listed later:
```
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""webdriver"": true,
...
""storage"": {}
```
becomes
```
""webdriver"": false,
""permissions"": {},
""doNotTrack"": ""unspecified"",
...
""storage"": {}
```
Thus, it would still be detectable.

### How does it work?
Simply set `spoof_navigator` to `True` and the instrumentation extension registers the content script that spoofs the `navigator` object with a JavaScript proxy. This option defaults to `False`.

### Other remarks
- I did my best to comply with the project structure but I am keen to get your feedback.
- The JavaScript proxy code is based on another Firefox extension (also GPLv3) as indicated in `automation/Extension/firefox/spoof.js/index.js` and `LICENSE`.
",Flnch,33035992,2019-11-05T20:22:52Z,NONE,False,216,1,12,A web privacy measurement framework,Python,8253dd74658f6ab7c3b2a4f106ac626d2b9e6ee8,"Merge branch 'master' into issue-448-webdriver_attr

This merges the current upstream to this issue branch.

Merge conflict in `automation/Extension/firefox/feature.js/index.js` fixed manually."
1111,https://api.github.com/repos/mozilla/OpenWPM/pulls/525,525,Moved schema.sql to the DataAggregator directory,,vringar,13276717,2019-11-05T16:14:40Z,COLLABORATOR,True,3,3,3,A web privacy measurement framework,Python,492c879b994dbf71a15bc82191ef842873773a46,moved schema.sql to the DataAggregator directory
1112,https://api.github.com/repos/mozilla/OpenWPM/pulls/524,524,converting bytes to string in manual_test,"This is necessary because Python3 differentiates between a bunch of bytes
,which is what we are getting from stdin, and a string",vringar,13276717,2019-11-05T14:12:24Z,COLLABORATOR,True,1,7,1,A web privacy measurement framework,Python,df44299a4c0decf67d157ccb681d76a48b5e1aa2,"converting bytes to string in manual_test
This is necessary because Python3 differentiates between a bunch of bytes
which is what we are getting from stdin and a string"
1113,https://api.github.com/repos/mozilla/OpenWPM/pulls/524,524,converting bytes to string in manual_test,"This is necessary because Python3 differentiates between a bunch of bytes
,which is what we are getting from stdin, and a string",vringar,13276717,2019-11-05T14:12:24Z,COLLABORATOR,True,1,7,1,A web privacy measurement framework,Python,e3d062fcec27129ed9e620466147e1f1d0a62e59,removed unused import in manual_test
1114,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,e0e2f765ec854e2b6849beaf2cf74338dd63da51,added site_rank to both database schemas
1115,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,274fde765889c4b806bbca58174c2819e0e7f126,ran pip-compile --upgrade
1116,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,6ddf5fccf2dedffddff5d162a9c0562f5ceeff84,upgrading requirements brakes travis
1117,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,e46575be7c8b6cac57843f4730c5eeed42bd588e,removing accidentally commited files
1118,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,7400d546e4a7179fbfdea008fd0a95c554353e34,"Reformatted BaseListener docstring

as it was too long for flake8"
1119,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,001060c8d1ef78a54d1a475512c5ca59c4caee8d,"Added site_rank to CommandSequence

and all necessary code to make it get to the aggregator"
1120,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,1ce5c5d1285182990dd6be06fbd9878a037297ce,flake8 issues fixed
1121,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,77d21d1cf88f696d7a87174459fe0799e5488985,Merge branch 'master' into issue-285
1122,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,e59dc10e818a95e4b71614987191f89e7b3144a7,added tests
1123,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,dfbfc3ccde1fe10537337a9f786762f0a550d8ca,fixing assert in test_browse_site_visits_table_valid
1124,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,036581922d5f3de577ba26ef5fc5adf88e1ca1c7,"Reformatted sql comments

Mainly to trigger a rebuild on travis"
1125,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,ece886739109d6dddc6ad2b313af62749a2090c9,Merge branch 'master' into issue-285
1126,https://api.github.com/repos/mozilla/OpenWPM/pulls/523,523,Adding site_rank to site_visits,Closes #285 ,vringar,13276717,2019-11-05T11:42:29Z,COLLABORATOR,True,1147,198,7,A web privacy measurement framework,Python,87cc2e44f0451770c5ed3fe44347616a3ce0b7f1,"Revert ""Reformatted sql comments""

This reverts commit 036581922d5f3de577ba26ef5fc5adf88e1ca1c7."
1127,https://api.github.com/repos/mozilla/OpenWPM/pulls/522,522,Updated to FF70,"Closes #512 
Changes the Firefox version used to crawl to 70",vringar,13276717,2019-11-01T17:09:58Z,COLLABORATOR,True,78,893,4,A web privacy measurement framework,Python,f373ab2c7b4e2371b58dac97fe39c2ea7fac8637,Updated to FF70
1128,https://api.github.com/repos/mozilla/OpenWPM/pulls/522,522,Updated to FF70,"Closes #512 
Changes the Firefox version used to crawl to 70",vringar,13276717,2019-11-01T17:09:58Z,COLLABORATOR,True,78,893,4,A web privacy measurement framework,Python,dc170adc5ccc88728e7dd7f07b301a2bfc64a2d4,Now correctly creating an EventManager
1129,https://api.github.com/repos/mozilla/OpenWPM/pulls/522,522,Updated to FF70,"Closes #512 
Changes the Firefox version used to crawl to 70",vringar,13276717,2019-11-01T17:09:58Z,COLLABORATOR,True,78,893,4,A web privacy measurement framework,Python,0122dc3067bf4afb966464ea0c5080858f1283a2,Merge branch 'issue-519' into FF70Upgrade
1130,https://api.github.com/repos/mozilla/OpenWPM/pulls/521,521,Using new ExtensionCommon.EventManager Constructor," Closes #519
Broke in FF70",vringar,13276717,2019-11-01T16:50:27Z,COLLABORATOR,True,5,6,1,A web privacy measurement framework,Python,dc170adc5ccc88728e7dd7f07b301a2bfc64a2d4,Now correctly creating an EventManager
1131,https://api.github.com/repos/mozilla/OpenWPM/pulls/521,521,Using new ExtensionCommon.EventManager Constructor," Closes #519
Broke in FF70",vringar,13276717,2019-11-01T16:50:27Z,COLLABORATOR,True,5,6,1,A web privacy measurement framework,Python,eb30dfaed7cb4532ae12bf9d56836d9b69e34f96,Removed unneeded console.log in sockets/api.js
1132,https://api.github.com/repos/mozilla/OpenWPM/pulls/520,520,added .vscode to .gitignore,Seeing as `.idea` was already there it only seemed okay,vringar,13276717,2019-10-29T17:01:55Z,COLLABORATOR,True,3,0,1,A web privacy measurement framework,Python,dfabebed071652556039d273b5c6e4e855684eb9,added .vscode to .gitignore
1133,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,f373ab2c7b4e2371b58dac97fe39c2ea7fac8637,Updated to FF70
1134,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,9f65a9f624775aa671ec5754727b3a5a87a30270,added .vscode to .gitignore
1135,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,361a39c28671ddf9b326e3eebeccfb19fb11a227,setting up manual_test.py to enable debuging #519
1136,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,7ed01b4920a9e93d1a30111e98b3ec8d4b314b3e,"converting line from bytes to str in manual_test.py
this was needed as manual_test would break with python3"
1137,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,4d4c4c0c5e8507be263baca096eaa8ec9306e5c5,reformatting and dependency update
1138,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,4001794b6c226dadacaef37f4a1352ce8ee69b02,Cluttering sockets/api.js with log statements
1139,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,f38b262b04dc08deea5784700095c4d9b9f808df,Set up clientSocket for ease of debugging
1140,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,050aa6f12fd9f1cd1958807d0651d56c34218e2e,Added tracing around sockets/api.js
1141,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,a73d02bb2933b82492714e1e11a466ad236606b3,Now correctly creating an EventManager
1142,https://api.github.com/repos/mozilla/OpenWPM/pulls/515,515,[WIP] Firefox 70 Update,A PR to track the progress on #512 ,vringar,13276717,2019-10-25T18:53:30Z,COLLABORATOR,False,433,291,7,A web privacy measurement framework,Python,d74d944a1f54b6d33db526864df28f424b71e803,Merge branch 'master' into FF70
1143,https://api.github.com/repos/mozilla/OpenWPM/pulls/514,514,Removed one mention of python2 in README.md,"Removed it under ""Running Measurements from inside the Container"" as the instruction wasn't working anymore.
Closes #513",vringar,13276717,2019-10-25T17:33:36Z,COLLABORATOR,True,1,3,1,A web privacy measurement framework,Python,5722a0fcd6f90de5fac51c536e448015519a6f6c,"Removed one mention of python2 in README.md

Removed it under ""Running Measurements from inside the Container"" as the instruction wasn't working anymore.
Closes #513"
1144,https://api.github.com/repos/mozilla/OpenWPM/pulls/510,510,Make MacOS Docker GUI instructions easier to parse,Fixes #507,englehardt,3280150,2019-10-22T05:07:07Z,MEMBER,True,4,2,1,A web privacy measurement framework,Python,2330f91f95b8f4c8776f7ca82578d73ca4313c67,"Make MacOS Docker GUI instructions easier to parse

Fixes #507"
1145,https://api.github.com/repos/mozilla/OpenWPM/pulls/509,509,Use extension built within Dockerfile instead of from the local system,"Made the Dockerfile do the same steps as build-extension.sh
Hopefully closes #508 ",vringar,13276717,2019-10-18T11:44:38Z,COLLABORATOR,True,1,0,1,A web privacy measurement framework,Python,57a1742b7e7cd4f3594ddf776b7258a18b2787b5,"Update Dockerfile

Made the Dockerfile do the same steps as build-extension.sh"
1146,https://api.github.com/repos/mozilla/OpenWPM/pulls/509,509,Use extension built within Dockerfile instead of from the local system,"Made the Dockerfile do the same steps as build-extension.sh
Hopefully closes #508 ",vringar,13276717,2019-10-18T11:44:38Z,COLLABORATOR,True,1,0,1,A web privacy measurement framework,Python,98a72b8d1504fe4ede2910c3969dacfd3e85f632,copying inside the container instead of from host filesystem
1147,https://api.github.com/repos/mozilla/OpenWPM/pulls/509,509,Use extension built within Dockerfile instead of from the local system,"Made the Dockerfile do the same steps as build-extension.sh
Hopefully closes #508 ",vringar,13276717,2019-10-18T11:44:38Z,COLLABORATOR,True,1,0,1,A web privacy measurement framework,Python,d3e964a43e64e4d3ada6ac315f70aefcce7d5746,Update Dockerfile
1148,https://api.github.com/repos/mozilla/OpenWPM/pulls/509,509,Use extension built within Dockerfile instead of from the local system,"Made the Dockerfile do the same steps as build-extension.sh
Hopefully closes #508 ",vringar,13276717,2019-10-18T11:44:38Z,COLLABORATOR,True,1,0,1,A web privacy measurement framework,Python,d6dbbe84a424c69d1f24fa8739ec8d0d7c6901eb,Update Dockerfile
1149,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,30871ad40525c25d26e37f2858110dd5e235aa6e,Move to pinned packages. Drop python2 tests
1150,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,a464d045176f387c4e59798cd856e9f42daca36a,Remove python2 install in Dockerfile
1151,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,4f259e33e8a685fb4ad039899574f0848078952d,Update requirements to work when layered
1152,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,04e8ef094d0312687861bd95dfe758042d8e0a97,Document requirements layering
1153,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,a84712988e92c40ba0255edc664dc315be86b80b,Use python3 in Dockerfile
1154,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,a56bb1d37b065e0c25e2fa4c5f7a73646a038228,Ensure tests and CI are using python 3
1155,https://api.github.com/repos/mozilla/OpenWPM/pulls/502,502,Pin requirements to specific versions and start removing python 2 support,"(~Includes #498, but will be rebased once that is merged)~ DONE

This PR does three things:
* Uses `pip-compile` from `pip-tools` to pin requirements to specific versions. Fixes #499.
* Disables python 2.7 in the tests and removes python 2 support from a number of the install files. We previous decided to drop python 2 support in #466. I'm starting this in this PR from the reasons described in #499, namely incompatibilities between python 2 and python 3 pinned dependencies. Fixes #486.
* Removes the test that checks if python packages are installed for the reasons described in the commit message for be771c839941aa3ec003a90360c9c2a979a550db.",englehardt,3280150,2019-10-08T05:19:16Z,MEMBER,True,228,75,10,A web privacy measurement framework,Python,5df35f1ec5ab00c3db61e246f84dd3e49292fed3,"Removing test for python packages.

Now that we have proper support for pinned packages, this is more
trouble than it's worth. Over the past few years the only time I've seen
this test fail is when I needed to track down a mismatch between a
package name on pip and the import name. That's only going to get worse
now that we are pinning all sub-dependencies."
1156,https://api.github.com/repos/mozilla/OpenWPM/pulls/500,500,Remove unsupported parameter for write_to_dataset,Fixes #498.,englehardt,3280150,2019-10-08T01:07:45Z,MEMBER,True,0,1,1,A web privacy measurement framework,Python,080e9d95785db878f848af8c23110e84c53fb6cb,Remove unsupported parameter for write_to_dataset
1157,https://api.github.com/repos/mozilla/OpenWPM/pulls/492,492,Add a little more context around parallelization in demo.py,Small doc tweak,birdsarah,1796208,2019-09-17T13:24:12Z,MEMBER,True,4,1,1,A web privacy measurement framework,Python,5e9b00145eca32a4902cfbe1005c09faa9066cbc,Add a little more context around parallelization in demo.py
1158,https://api.github.com/repos/mozilla/OpenWPM/pulls/492,492,Add a little more context around parallelization in demo.py,Small doc tweak,birdsarah,1796208,2019-09-17T13:24:12Z,MEMBER,True,4,1,1,A web privacy measurement framework,Python,d88bdeaa7644ed80507be609f27de0233b86450e,Add closing parenthesis to comment
1159,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,5e99f2dd3f8f5d8084ccf2bf2597eacad31de22f,VisitID is passed with browser_params
1160,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,300b4be05d4b02d1819db55e9ffd7bb1a8f27d9a,log the visitid
1161,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,1ff6410b8e4b18e4f6608ad093d2c2f301e235ae,Logging working
1162,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,5c6380a5eec932d65a05a136fa24e85cc16ef9f1,Add websocket io
1163,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,75aebf14b0c952ec244a373c2841d4c955c9dc4a,Test ws
1164,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,5b2479cfe11adb0187f8e4f0db2db32aad7c512c,Test ws
1165,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,a00453d31c363fd67dfcdfc9fbd5effff5687106,Continue
1166,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,09b0e1e286d30ebf13c097368367d7624f4a8259,Set crawl_ID correctly
1167,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,5746ce76863fe07eb216c8f8b47433b707dabc86,Latest
1168,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,7b308045733f2a6643424a8a1774c89a1a0e7554,Finish logging to websocket working start.
1169,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,cb1d528f9f3cb00d617df535078b93e693b12341,Merge branch 'ws-test-2' of github.com:birdsarah/OpenWPM into ws-test-2
1170,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,00f20af568ee0f2ad6515fd3390d6ddc70b88b6a,Format all messages as json with standardized _component
1171,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,697fab9838d98e9024a839d818db2e4da365320e,This is tested and works
1172,https://api.github.com/repos/mozilla/OpenWPM/pulls/491,491,Websocket implementation,"For interest only a working implementation of OpenWPM webextension over a web socket. 

Tested working with https://github.com/birdsarah/faust-selenium - an alternative implementation of OpenWPM that supports windows crawls.",birdsarah,1796208,2019-09-16T12:36:25Z,MEMBER,False,183,276,4,A web privacy measurement framework,Python,7223970118efa284dcfc3fdf664428e824f2b5ee,Merge branch 'ws-test-2' into websocket-implementation
1173,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,0886df1b2e26a6089c348b8ade0905bbf143f921,Update localstack to newest version
1174,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,decab4cb1a857863588cbceaf5f6f3bdada5496a,Remove other package pins
1175,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,c10e1670a333b2ef1ccee68c9c1b358d3f579d9d,Add requests as a requirement
1176,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,f377c84360e729de750e3059406d745dc4cfd386,Use full profile during localstack install
1177,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,d35ba33a3948aa70d17a773a59a27faeded97378,Strip requirement profiles from dependency test
1178,https://api.github.com/repos/mozilla/OpenWPM/pulls/490,490,Update localstack to newest version,"The S3Aggregator tests are failing again, but we didn't make any recent changes. I suspect this is due to `localstack` dependency issues, though I'm unable to reproduce the failures locally. Let's try removing the pin to an old version.",englehardt,3280150,2019-09-14T21:33:55Z,MEMBER,True,5,4,3,A web privacy measurement framework,Python,744462c9fa6a4a148717ac39124a09a94c6c1fcd,Make it clear how we're parsing package names
1179,https://api.github.com/repos/mozilla/OpenWPM/pulls/488,488,Add page visit test including a worker script making a request,"This patch adds a new testcase for the http instrumentation. 
A page is loaded that includes a worker script. The page and the script both load the same image, resulting in different requests with differen top-level-urls. 
As mentioned [here](https://github.com/mozilla/OpenWPM/pull/469#discussion_r321275524), I'm not sure this behaviour is actually desired. The request made by the script would have been attributed to the page's URL before [PR#469](https://github.com/mozilla/OpenWPM/pull/469), now it gets the URL of the script itself. The URL-attribution code might need to be adapted to handle requests by worker scripts differently.
Also, as mentioned, I wasn't able to create a similar test for a page with a Service Worker because that would reuqire the page to be served over https. 

",jallmann,35806322,2019-09-11T09:11:17Z,NONE,True,216,0,5,A web privacy measurement framework,Python,fcc01c8e909d472dbec2f9ac63495166a72fe7f0,Added page visit test including a worker script making a request
1180,https://api.github.com/repos/mozilla/OpenWPM/pulls/488,488,Add page visit test including a worker script making a request,"This patch adds a new testcase for the http instrumentation. 
A page is loaded that includes a worker script. The page and the script both load the same image, resulting in different requests with differen top-level-urls. 
As mentioned [here](https://github.com/mozilla/OpenWPM/pull/469#discussion_r321275524), I'm not sure this behaviour is actually desired. The request made by the script would have been attributed to the page's URL before [PR#469](https://github.com/mozilla/OpenWPM/pull/469), now it gets the URL of the script itself. The URL-attribution code might need to be adapted to handle requests by worker scripts differently.
Also, as mentioned, I wasn't able to create a similar test for a page with a Service Worker because that would reuqire the page to be served over https. 

",jallmann,35806322,2019-09-11T09:11:17Z,NONE,True,216,0,5,A web privacy measurement framework,Python,55fc62e560ef59d2b0f5f46066bcdf56fad6da36,Add http page visit test including a service worker
1181,https://api.github.com/repos/mozilla/OpenWPM/pulls/484,484,More crawler configuration,Adding to the configuration that is configurable for crawls by env vars,motin,793037,2019-08-30T16:46:46Z,CONTRIBUTOR,True,5,0,1,A web privacy measurement framework,Python,80073c9c0db2b1176b108fc3179029b2371af43e,Add-ons configurable in crawler.py
1182,https://api.github.com/repos/mozilla/OpenWPM/pulls/484,484,More crawler configuration,Adding to the configuration that is configurable for crawls by env vars,motin,793037,2019-08-30T16:46:46Z,CONTRIBUTOR,True,5,0,1,A web privacy measurement framework,Python,4c4007451f5fc9aa44329a0fcfcf9f70925ea920,Make it possible to override specific browser preferences in crawler.py
1183,https://api.github.com/repos/mozilla/OpenWPM/pulls/484,484,More crawler configuration,Adding to the configuration that is configurable for crawls by env vars,motin,793037,2019-08-30T16:46:46Z,CONTRIBUTOR,True,5,0,1,A web privacy measurement framework,Python,ae36231205c701e79e903eab21a613fdc2a7b634,Remove prefs for deprecated extensions
1184,https://api.github.com/repos/mozilla/OpenWPM/pulls/484,484,More crawler configuration,Adding to the configuration that is configurable for crawls by env vars,motin,793037,2019-08-30T16:46:46Z,CONTRIBUTOR,True,5,0,1,A web privacy measurement framework,Python,06b32e27e07b28cc6c9679318bcc1aac49e615cc,Remove unnecessary linebreak
1185,https://api.github.com/repos/mozilla/OpenWPM/pulls/483,483,Avoid TypeError: logSettings.nonExistingPropertiesToInstrument is undefined,"Found this error during manual testing. Introduced in #452. Happens when attempting to instrument a non-existing property without using the nonExistingPropertiesToInstrument config attribute. 
",motin,793037,2019-08-30T15:47:10Z,CONTRIBUTOR,True,5,1,1,A web privacy measurement framework,Python,e0f434290c4c01a2a91908cd55fa6f0e04d88045,Avoid TypeError: logSettings.nonExistingPropertiesToInstrument is undefined
1186,https://api.github.com/repos/mozilla/OpenWPM/pulls/481,481,Add --shm-size argument to docker osx helper script,"As mentioned in https://github.com/mozilla/OpenWPM/issues/474
Edit: Removed ""Fixed"" keyword",motin,793037,2019-08-28T08:25:51Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,5bcfedfadd7d383aaf9aebb9bc69e27c5ad939aa,Add --shm-size argument to docker osx helper script
1187,https://api.github.com/repos/mozilla/OpenWPM/pulls/480,480,Remove stability warning from README,With the recent changes I think it's safe to say we no longer need to recommend folks to use the add-on sdk version of OpenWPM.,englehardt,3280150,2019-08-27T22:59:13Z,MEMBER,True,0,6,1,A web privacy measurement framework,Python,089df3b0490728b98391af58b134f7396a058667,Remove stability warning
1188,https://api.github.com/repos/mozilla/OpenWPM/pulls/478,478,Bump eslint-utils from 1.3.1 to 1.4.2 in /automation/Extension/firefox,"Bumps [eslint-utils](https://github.com/mysticatea/eslint-utils) from 1.3.1 to 1.4.2.
<details>
<summary>Commits</summary>

- [`4e1bc07`](https://github.com/mysticatea/eslint-utils/commit/4e1bc077c2a6bb00538d66b69a63c24de3463bed) 1.4.2
- [`e4cb014`](https://github.com/mysticatea/eslint-utils/commit/e4cb01498df6096b66edb0c78965ee6f47d3ac77) 🐛 add null test
- [`230a4e2`](https://github.com/mysticatea/eslint-utils/commit/230a4e2275cde169cbfbb95cd2e4de2152fae0a2) 1.4.1
- [`08158db`](https://github.com/mysticatea/eslint-utils/commit/08158db1c98fd71cf0f32ddefbc147e2620e724c) 🐛 fix getStaticValue security issue
- [`587cca2`](https://github.com/mysticatea/eslint-utils/commit/587cca2f82c245f5fc4a8b9fb2cf6b35c0d02552) 🐛 fix getStringIfConstant to handle literals correctly
- [`c119e83`](https://github.com/mysticatea/eslint-utils/commit/c119e832952c8c653bd4f21e39eb9f7ce48e5947) 🐛 fix getStaticValue to handle bigint correctly
- [`531b16f`](https://github.com/mysticatea/eslint-utils/commit/531b16fa686b80a8cc450eb87525115233ce6064) 🔖 1.4.0
- [`276303d`](https://github.com/mysticatea/eslint-utils/commit/276303d826bf94b9e6d6cdf5697cb1feb54c89ca) ⚒ upgrade rollup
- [`cb518c7`](https://github.com/mysticatea/eslint-utils/commit/cb518c70ee037722f802d808bbbe93da83f07fb3) 🐛 fix hasSideEffect false negative
- [`aac472e`](https://github.com/mysticatea/eslint-utils/commit/aac472e815551688d23cc8fd88f9044dbf276804) 🐛 fix isParenthesized had false positive on ImportExpression (fixes [#1](https://github-redirect.dependabot.com/mysticatea/eslint-utils/issues/1))
- Additional commits viewable in [compare view](https://github.com/mysticatea/eslint-utils/compare/v1.3.1...v1.4.2)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=eslint-utils&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.4.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2019-08-26T22:38:54Z,CONTRIBUTOR,True,30,27,1,A web privacy measurement framework,Python,61a8a6902268d7b3cd73c8961905e40ea2670fb5,"Bump eslint-utils from 1.3.1 to 1.4.2 in /automation/Extension/firefox

Bumps [eslint-utils](https://github.com/mysticatea/eslint-utils) from 1.3.1 to 1.4.2.
- [Release notes](https://github.com/mysticatea/eslint-utils/releases)
- [Commits](https://github.com/mysticatea/eslint-utils/compare/v1.3.1...v1.4.2)

Signed-off-by: dependabot[bot] <support@github.com>"
1189,https://api.github.com/repos/mozilla/OpenWPM/pulls/477,477,Add shared memory param to docker README,"See https://github.com/mozilla/OpenWPM/issues/255#issuecomment-523762666 for a description of the problem. We can also consider moving over to `docker-compose` and hard coding this parameter there as described here: https://stackoverflow.com/questions/30210362/how-to-increase-the-size-of-the-dev-shm-in-docker-container, but I've chosen to take the simpler approach for now.",englehardt,3280150,2019-08-26T22:38:17Z,MEMBER,True,5,1,1,A web privacy measurement framework,Python,1da176a1faa83229f9eea09b3306bb9999aa4969,Add shared memory param to docker README
1190,https://api.github.com/repos/mozilla/OpenWPM/pulls/475,475,Check for Firefox process crashes explicitly,"In #255 we saw a lot of unclear error messages caused by the Firefox process crashing after the initial `get()` command. In this PR we check the webdriver's `current_url` attribute, which will cause marionette to query the Firefox process. If the process is dead or stalled, or if the marionette connection was severed for some reason, we will see a crash from this call and raise a more helpful error message.",englehardt,3280150,2019-08-26T20:25:39Z,MEMBER,False,11,1,1,A web privacy measurement framework,Python,8a10c19cf003e2d0e1600079ea92056d83fb678a,Check for Firefox process crashes explicitly
1191,https://api.github.com/repos/mozilla/OpenWPM/pulls/473,473,Improved browser error logging in crawl_history,"This contains the changes in #468, will rebase once that merges.

This PR includes several improvements to error logging:
1. `bool_success` has been removed from the `crawl_history` table and replaced by `command_status`, which is a string.
    1. Successful commands use `""ok""`
    2. Exceptions in the browser manager process use `""error""`
    3. `about:neterror` WebDriverExceptions are special cased, and use `""neterror""`
    4. Timeouts use `""timeout""`
2. Error messages and full, serialized tracebacks are included in the `crawl_history` table in the columns `error` and `traceback`. The error message for `about:neterror` exceptions parses out the exact error from the `about:` url -- e.g., `dnsError`.
3. `about:neterror` exceptions now log at the `logging.INFO` level, so they should not be included in Sentry to cut down on noise.

A sample from a very small, 10 site crawl is available here: https://dbc-caf9527b-e073.cloud.databricks.com/#notebook/154881/command/154898.",englehardt,3280150,2019-08-22T05:46:04Z,MEMBER,True,105,41,10,A web privacy measurement framework,Python,e53b03a1af347a5cc8810bd22c9a1822fb690b4f,Add error information to the crawl_history table
1192,https://api.github.com/repos/mozilla/OpenWPM/pulls/473,473,Improved browser error logging in crawl_history,"This contains the changes in #468, will rebase once that merges.

This PR includes several improvements to error logging:
1. `bool_success` has been removed from the `crawl_history` table and replaced by `command_status`, which is a string.
    1. Successful commands use `""ok""`
    2. Exceptions in the browser manager process use `""error""`
    3. `about:neterror` WebDriverExceptions are special cased, and use `""neterror""`
    4. Timeouts use `""timeout""`
2. Error messages and full, serialized tracebacks are included in the `crawl_history` table in the columns `error` and `traceback`. The error message for `about:neterror` exceptions parses out the exact error from the `about:` url -- e.g., `dnsError`.
3. `about:neterror` exceptions now log at the `logging.INFO` level, so they should not be included in Sentry to cut down on noise.

A sample from a very small, 10 site crawl is available here: https://dbc-caf9527b-e073.cloud.databricks.com/#notebook/154881/command/154898.",englehardt,3280150,2019-08-22T05:46:04Z,MEMBER,True,105,41,10,A web privacy measurement framework,Python,a075c9cd84a3ee0f6479584d5da46b9f2867a41f,Bugfix: remove missed reference to command_succeeded
1193,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,877b53a816e3fcbe43c32e82fa255d7458a850df,experimental changes
1194,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,06f25f0a236e93e95cc337faad0add0ff9fd36bf,Fix build. Fix misattribution of urls
1195,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,9d73df9292cf0718f2629213a89896a9de7bbcc4,Possibly working fix for url-misattribution.
1196,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,aa3b361fcfb70f38fd902c2dd3271b607fe19ecd,Fix python linting error
1197,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,58e8045bfcd8f1b030a45a4cae135bbdf993d6d9,Review amendments
1198,https://api.github.com/repos/mozilla/OpenWPM/pulls/469,469,Top-Level-Url attribution for HTTP-Requests,"I call this work-in-progress because I'm not sure this is exactly what we want for Issue #245, although if it is, this might be close to a working fix.
Contrary to what is mentioned in #245 I didn't need to switch the listener to onBeforeRequest, since frameAncestors are also available in the onBeforeSendHeaders details object. 

I borrowed heavily from the work on this issue in privacy badger, only stripped their solution down to what I think we need for our purpose. I'm not entirely sure the four cases in my function cover all possible types of requests, but they are the ones I could identify through spec research and experiments.

This currently gives the entire URL for a given document, not only the host. That is especially true for service workers, where the returned URL might not match the URL dispalyed in the associated tab in the browser. Is that the intended behaviour?",jallmann,35806322,2019-08-20T09:47:06Z,NONE,True,38,17,2,A web privacy measurement framework,Python,a696f0b682759b3f369985801423eb0a45d8825e,Fix prettier error.
1199,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,99c9b7f7da36e216e35769bc534192c2f420a212,Implement lease expiration
1200,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,1d02391655167825fab5f243f0bcc4927c62ff49,Add lease renewal with a maximum retry limit
1201,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,88368e89a564081e3cfab8103c49c9a7b7f2857b,Cleanup of rediswq + add max_retries config
1202,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,aaefab458c0795f7c73b944b7322e55fa1090dbf,Add claification to debug log
1203,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,f4e17893cec334c800ed322284d52f2471463793,Remove NUM_BROWSERS configuration
1204,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,d5f8efa32365fb099696996c391b6ad4b0b7e896,Include dwell time in lease timeout
1205,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,feb42119075fccbecc58a4bc1b3656135c44ad85,Lower default retry count to 2
1206,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,6f85b898c5ec7f0d4d17c26fbde5338a9c799f69,Log the number of retries that have been attempted for a command
1207,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,4ef65c94af5599a2ce9713a31d3344c1c0dcd57f,Return zero instead of null for jobs that have never been retried
1208,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,617622f83a89f3bfc2fe720e7b02ea5b82274f65,Safer None check
1209,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,ab42c8c7ecef09b5011297f31bf1a0d5c154476d,Fix spelling error in docstring
1210,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,7aeb01f48feb7d227e5bc3858b8072cba3e744d3,Bugfix: cast retry number to integer
1211,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,41d76e4d04d175462c3e9ad73819f274aa303d5a,Merge branch 'queue_leases' of github.com:mozilla/OpenWPM into queue_leases
1212,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,ab5d2d45a285dbeff7a90cdc06183a68cf190bab,Bugfix: Log and pass WatchErrors
1213,https://api.github.com/repos/mozilla/OpenWPM/pulls/468,468,Add lease expiration and job retries to the Redis job queue,"This is the start of lease expiration. Will rebase on #467 once merged.

The TODO left in the library says:
```
                # TODO: transactionally move the key from processing queue to
                # to main queue, while detecting if a new lease is created
                # or if either queue is modified.
```

This PR currently only does the former, but the latter is necessary since Redis [doesn't support rollback](https://stackoverflow.com/questions/39585903/how-to-implement-transaction-with-rollback-in-redis). Instead we can use [WATCH](https://redis.io/topics/transactions) to ensure that race conditions don't result in duplicate transactions. If we don't implement watch, the following is possible:
1. Two workers see that a lease for a specific key is expired.
2. Both workers submit a transaction to move the key prior from the processing queue to the main queue, of which one will necessarily run first.
3. After the first transaction is complete, the second starts. The delete operation fails, since the key is already removed from the processing queue. However, exceptions do not stop a transaction from processing the rest of the commands.
4. The second worker's transaction writes a duplicate job to the main queue.
5. We learn that the duplicate job was written, but only after the transaction completes. By then, two workers may have checked out the transactions.

This PR also doesn't implement retry at most N times, but I think that will be simple. The solution there is simply to include an integer with all records that counts the number of retries, increment it on lease expiration, and abort the expiration if it exceed the max.",englehardt,3280150,2019-08-18T00:16:31Z,MEMBER,True,192,43,6,A web privacy measurement framework,Python,62d5a36710700d01ae90c190a9cbf9f19e890c39,Refactor error logging for job renewal
1214,https://api.github.com/repos/mozilla/OpenWPM/pulls/467,467,Configurable log levels,"This allows the log levels for the various outputs (console, file, and sentry) to be configured individually. It also includes a helper function to read log levels from env variables, as set by the complementary PR https://github.com/mozilla/openwpm-crawler/pull/25.

This also includes a small cleanup related to the `process_watchdog` feature, which is currently broken (see #174).",englehardt,3280150,2019-08-17T20:37:22Z,MEMBER,True,93,23,3,A web privacy measurement framework,Python,d4f5c7016b7124ffc0555648bbf8b0e5576373f3,"Make log levels configurable.

This also includes a minor cleanup of the TaskManager docstring and adds
better handling of the (currently broken) process watchdog
functionality."
1215,https://api.github.com/repos/mozilla/OpenWPM/pulls/467,467,Configurable log levels,"This allows the log levels for the various outputs (console, file, and sentry) to be configured individually. It also includes a helper function to read log levels from env variables, as set by the complementary PR https://github.com/mozilla/openwpm-crawler/pull/25.

This also includes a small cleanup related to the `process_watchdog` feature, which is currently broken (see #174).",englehardt,3280150,2019-08-17T20:37:22Z,MEMBER,True,93,23,3,A web privacy measurement framework,Python,73e04f8131a999f2900d7f719931f5b9d5902e39,"Make socket handler use a permissive log level

Tieing the socket handler's log level to the file output means that in
the unlikely event file logging is retricted to a more critical errors
than SENTRY, some data that would be logged in sentry will never make it
to the handlers."
1216,https://api.github.com/repos/mozilla/OpenWPM/pulls/467,467,Configurable log levels,"This allows the log levels for the various outputs (console, file, and sentry) to be configured individually. It also includes a helper function to read log levels from env variables, as set by the complementary PR https://github.com/mozilla/openwpm-crawler/pull/25.

This also includes a small cleanup related to the `process_watchdog` feature, which is currently broken (see #174).",englehardt,3280150,2019-08-17T20:37:22Z,MEMBER,True,93,23,3,A web privacy measurement framework,Python,b4b8532f03f212d6591ea1aea39c5cc9ca8458be,Revert unintentional change to demo.py
1217,https://api.github.com/repos/mozilla/OpenWPM/pulls/462,462,Add JS_INSTRUMENT_MODULES to crawler.py,Forgot this in https://github.com/mozilla/OpenWPM/pull/457,motin,793037,2019-08-15T20:25:17Z,CONTRIBUTOR,True,4,0,1,A web privacy measurement framework,Python,9890f121e52c7f27b10de98e1cbeea9b0a799da5,Add JS_INSTRUMENT_MODULES to crawler.py
1218,https://api.github.com/repos/mozilla/OpenWPM/pulls/459,459,Js instrument retain prototype and constructor,"Restore the original prototype and constructor so that instrumented classes remain intact.

Fixes #461

This PR currently also includes https://github.com/mozilla/OpenWPM/pull/458, will be rebased after its merge.",motin,793037,2019-08-14T11:38:28Z,CONTRIBUTOR,True,10,1,1,A web privacy measurement framework,Python,d08f1edb0ec299ec3a04e90071c75c5522edb2d3,Restore the original prototype and constructor so that instrumented classes remain intact
1219,https://api.github.com/repos/mozilla/OpenWPM/pulls/458,458,Add logSettings.logFunctionGets,"... for also logging access (gets) to instrumented function properties, not only their execution (calls).",motin,793037,2019-08-14T11:36:50Z,CONTRIBUTOR,True,10,0,1,A web privacy measurement framework,Python,3966aa2a17f4efc9c9f6f79c5e46cfcafc2e2d80,"Add logSettings.logFunctionGets for also logging access (gets) to instrumented function properties, not only their execution (calls)"
1220,https://api.github.com/repos/mozilla/OpenWPM/pulls/457,457,Add config option js_instrument_modules,"... with default value ""fingerprinting"" for instrumenting fingerprinting-related apis.

This is a step towards https://github.com/mozilla/OpenWPM/issues/353, allowing custom instrumentation to be implemented without having to comment out the fingerprinting-related api:s, which breaks many of the tests.",motin,793037,2019-08-14T11:28:07Z,CONTRIBUTOR,True,31,10,6,A web privacy measurement framework,Python,de2396093033fa80491c6c7011c27d2db25a81f7,"Add config option js_instrument_modules with default value ""fingerprinting"" for instrumenting fingerprinting-related apis"
1221,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,0ff197501b747a3cee61264b4a089c04a25f83cd,Allow content saving to be configured by any resource type
1222,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,2e99d250a65ce22423232300a201c54ddbbeea80,Updated docs and codebase in general to use save_content instead of save_all_content and save_javascript
1223,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,4aff95a7c05b2379d77218ab3bea3b8537913679,Crawler.py converts '1' and '0' to corresponding booleans
1224,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,6599a3317ada5fc852ffd8e729cd94f193395c51,Clarify which config is being used during manual test runs
1225,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,4f7e3774d04a22e7ee459a5554206aee18d84649,Better name for method - isContentSavingEnabled
1226,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,3a2fc61f7769d976f663017bdc2ffe89e6921959,Only accept boolean and string for save_content config option
1227,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,8afdf27a24aa85916e333fa9a1ac472a630e5fee,Throw an error if an unknown resource type is included in the save_content config option
1228,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,e445e0bbe70743608d2c12ca1787632bc4ab8cc7,Auto-formatting
1229,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,f6745b6e0ecff1659bc78fb3f05f031b88a562f1,Updated package-lock.json
1230,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,7decb4ba66d81a5d5f3595977dc501eebdb73c18,Added tests for document content saving (based on https://github.com/englehardt/OpenWPM/commit/3ee26fa0fd3a8913a72a7e6665860fe1a569212c)
1231,https://api.github.com/repos/mozilla/OpenWPM/pulls/456,456,Allow content saving to be configured by any resource type,"Fixes #344  

Possible ways to specify ""save_content"": 
* script,main_frame,sub_frame
* True
* False

But not:
* ['script', 'main_frame', 'sub_frame']
* '0'
* '1'",motin,793037,2019-08-14T10:16:06Z,CONTRIBUTOR,True,139,58,11,A web privacy measurement framework,Python,9f20d068ed9dab07c62a03ac4f241afadbca7d0e,Added expected hashes
1232,https://api.github.com/repos/mozilla/OpenWPM/pulls/455,455,Upgrade to fx69,"Fixes https://github.com/mozilla/OpenWPM/issues/454

Should probably not be merged before Firefox 69 is officially released.",motin,793037,2019-08-13T11:30:18Z,CONTRIBUTOR,True,11,5,3,A web privacy measurement framework,Python,b7115f7bdb4aff1b30e7a4597e77e150cfe08786,Specify which unbranded build is used via variable names rather than a code comment
1233,https://api.github.com/repos/mozilla/OpenWPM/pulls/455,455,Upgrade to fx69,"Fixes https://github.com/mozilla/OpenWPM/issues/454

Should probably not be merged before Firefox 69 is officially released.",motin,793037,2019-08-13T11:30:18Z,CONTRIBUTOR,True,11,5,3,A web privacy measurement framework,Python,ede251b63d1b26dfb3fb0890e4599d8e1ba0641b,Upgrade to unbranded Firefox 69b12
1234,https://api.github.com/repos/mozilla/OpenWPM/pulls/455,455,Upgrade to fx69,"Fixes https://github.com/mozilla/OpenWPM/issues/454

Should probably not be merged before Firefox 69 is officially released.",motin,793037,2019-08-13T11:30:18Z,CONTRIBUTOR,True,11,5,3,A web privacy measurement framework,Python,233c60f30c0752a88bf53d5648c80b09cc99cff5,Bump version to 69.0b16
1235,https://api.github.com/repos/mozilla/OpenWPM/pulls/455,455,Upgrade to fx69,"Fixes https://github.com/mozilla/OpenWPM/issues/454

Should probably not be merged before Firefox 69 is officially released.",motin,793037,2019-08-13T11:30:18Z,CONTRIBUTOR,True,11,5,3,A web privacy measurement framework,Python,c96fd9642ec586455c9b56c3f0b09a82fa0d2b7b,Address to address nsISocketTransportService interface changes (Bug 1558726)
1236,https://api.github.com/repos/mozilla/OpenWPM/pulls/455,455,Upgrade to fx69,"Fixes https://github.com/mozilla/OpenWPM/issues/454

Should probably not be merged before Firefox 69 is officially released.",motin,793037,2019-08-13T11:30:18Z,CONTRIBUTOR,True,11,5,3,A web privacy measurement framework,Python,f72056be055758904adea3376e6a2f6420883274,Bump Firefox 69 to release build
1237,https://api.github.com/repos/mozilla/OpenWPM/pulls/453,453,"Avoid using ""index='**'"" in demo.py since it is a bit confusing","I believe this makes the behavior of demo.py somewhat easier to understand, and reflects the most common use case for multiple browsers (simple parallelization).

Ideally, we should have an examples-directory to demonstrate more advanced use cases, so that the demo.py can stay simple.",motin,793037,2019-08-13T09:10:13Z,CONTRIBUTOR,True,2,2,1,A web privacy measurement framework,Python,560c6579a127d1a7d8b47fc5204d93e26cfa2a08,"Avoid using ""index='**'"" in demo.py since it is a bit confusing"
1238,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,8f887b03b0525ed913fe06b3bc21a0ea82f96122,Support instrumentation of non-existant js objects and properties
1239,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,430a28bd3ae66b4d48f564e587182fa263c41b5a,Clearer error message when attempting to get property names of undefined
1240,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,1fb8a26586e6ddb2e9847385f4fff71862e02a16,Add simple test page for manually testing non-existent properties
1241,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,1818251b52edc35fcf4f25104f0c75ae237e74c3,Add attempt to call the non-existent object to test page
1242,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,88934b2cf5df19cdec431f1d87842f498dd348ef,Corrected instrumentation of non-existing properties + added corresponding test page content
1243,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,22dd48a1a8002953144e9582c4daa5c8d408429f,Added instrumentation of window.partiallyExisting.nonExistingMethod1 to test page
1244,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,29d576624eb0ddfd37387baf74f1f7d7eac5cb8f,Clarified that instrumenting window.nonExisting object properties is not supported
1245,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,96bee442f32fb8e30a5c9cc46108c761d716a3f3,Lint
1246,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,c704fb5f16daadbcb51a35df700d17b94b96bbda,Renamed test page to instrument_non_existing_properties to match naming convention within the test page
1247,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,d5e064a3d81671117da576232ba9f24ce11035f1,Fixed a typo
1248,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,1412bcd360bd6f1b9966a5609c7665e53c254ee4,Add error context to instrumentation errors
1249,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,09501694bcf0f7a84eb223e9d78035af4230506b,Split test pages for non-existing objects/properties
1250,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,8d5428462fc360dbfd048de8b1c92561fe9158ee,Add wip tests for instrumenting non-existing properties/object
1251,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,778861d0134c4ae259855ec8aafcbd7abacd6588,Renamed one of the tests
1252,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,10fee839ded239ded1c40301f3552b04e4bf57f8,"Organized js instrument tests somewhat more representably, including adding specific tests showing the use of a mock class to instrument non-existing secondary attributes"
1253,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,48b4ef6febfe1e64e6715babef2cd10e533e245e,"Added expected gets, sets, calls based on observation in manual tests"
1254,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,a67dfe6bdedeb93567dd13b10c85af909f675267,Flake8
1255,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,23e3ef2af4d02cb071caf868c06251669a23da1b,Made the js instrument tests related to non-existing properties easier to understand at a glance by repeating the symbol prefix in the expected-definitions
1256,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,8d4d0503753d8a590b3c7d5a88b3be392e97bb0a,Flake8
1257,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,123fe682df31d3088c2e342c0a01e9d94166e910,Removed unclear code comments
1258,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,928f7a212973af0296bfd57b3de10c016870ab89,Require non-existing properties be instrumented using `nonExistingPropertiesToInstrument`
1259,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,6909fa270d73b94bf8c353a4e91d6021a0136787,Doc comment about possible prototype pollution (https://github.com/mozilla/OpenWPM/issues/471)
1260,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,94496e192c8e2984cf21dbb5443edd296473f28f,Don't break if not instrumenting any non-existing properties...
1261,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,7619c0dad84595ea18dd2b9f4734485724bf669f,Proper configuration for the non existing window property instrumentation test
1262,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,5803b5c7db639a8b5371911f82f4b88dd21a1226,Removed unclear code comment
1263,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,7311b4e07a78ae6509e7e24884b9d6f4ce2efc66,Some code clean up and added sanity checks
1264,https://api.github.com/repos/mozilla/OpenWPM/pulls/452,452,Js instrument non existing properties,To allow for instrumentation of JS properties that may not exist in the DOM but scripts out in the wild are attempting to access.,motin,793037,2019-08-13T09:08:10Z,CONTRIBUTOR,True,625,24,11,A web privacy measurement framework,Python,81d73ddf00a1cb7673eb88bc7a9d3c3784e2d49e,Test pages prevent default mode of instrumenting all properties when instrumenting non-existing properties
1265,https://api.github.com/repos/mozilla/OpenWPM/pulls/451,451,Extension debug console output sent without stringification,Allows for easier-on-the-eye inspection from the devtools console.,motin,793037,2019-08-13T09:07:01Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,4e681b2d0ebf65a0becae24f182e7b63995cb2f0,Extension debug console output sent without stringification (allows for easier inspection from the devtools console)
1266,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,0843236f62d697e6ff3982365698f86b67ad2b1d,"Increase number of retries for data written to S3.

This also better handles errors if we still fail after retrying (so the
aggregator process doesn't crash)."
1267,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,8a4a293ab4f58cd5885ce3067d6629df374090c3,"Pass all log information across process boundary.

The current inter-process log handler discards `exc_info` and adds the
arguments to the exception message. This prevents Sentry from properly
grouping log messages by their exception and call information. We send
the information if possible (or fall back to the previous approach if
not)."
1268,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,917bb7cbb3e5ad9b83318cb4e55ecd2d1160fc09,"Use exc_info for errors, rather than strings"
1269,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,6d33b72262a26f124ad290014d660356bd839777,Fix flake8 errors
1270,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,0b9ccb780685052a2a47d7dbd11bb91fa07c7050,Ignore WebDriverException errors that result from alert handling code
1271,https://api.github.com/repos/mozilla/OpenWPM/pulls/449,449,Improved stability and error logging,This is addressing some of the errors observed in a recent large crawl.,englehardt,3280150,2019-08-10T00:42:38Z,MEMBER,True,191,47,6,A web privacy measurement framework,Python,8903f9d287e949e716d07e9c227f461a84ef7277,Add  as a safer alternative to
1272,https://api.github.com/repos/mozilla/OpenWPM/pulls/447,447,[WIP] Add non-ascii characters to post body tests,Creating this to show that the current master branch fails to parse post bodies that contain non-ascii characters. Will fold into #442.,englehardt,3280150,2019-08-06T22:07:15Z,MEMBER,False,27,9,3,A web privacy measurement framework,Python,2609930ed366ecd6811d3f5a7eb9c26abf79417a,Add non-ascii characters to post body tests
1273,https://api.github.com/repos/mozilla/OpenWPM/pulls/445,445,Add specific webdriver exception reporting,"Specifically capture Selenium Exceptions and report.

@englehardt this is the other ""fix"" from my frankenstein branch. You already did the s3 bug in #438.

I don't know whether this should be logged as ""error"" or put in status queue as ""failed"".

Am more than happy for you to copy paste and make a PR that is in line with your better judgement on how to report.
",birdsarah,1796208,2019-08-06T19:20:24Z,MEMBER,False,6,0,1,A web privacy measurement framework,Python,092869f0ca5d866528f81130821132080d2fdddc,Add specific webdriver exception reporting
1274,https://api.github.com/repos/mozilla/OpenWPM/pulls/445,445,Add specific webdriver exception reporting,"Specifically capture Selenium Exceptions and report.

@englehardt this is the other ""fix"" from my frankenstein branch. You already did the s3 bug in #438.

I don't know whether this should be logged as ""error"" or put in status queue as ""failed"".

Am more than happy for you to copy paste and make a PR that is in line with your better judgement on how to report.
",birdsarah,1796208,2019-08-06T19:20:24Z,MEMBER,False,6,0,1,A web privacy measurement framework,Python,7bd02ff9e9445e4caf6fca159027cc658cbb3835,Fix flake8 errors
1275,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,b8becd712656bb6bb6d268dddf9cd75ec751e687,Encode post bodies as utf-8 before sending
1276,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,e7f1a5a65209276529331916977c186577b307fc,JSON stringify post body object before stringification
1277,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,6690b3c62103aa8abcde1f6402c69cc64a0afe4e,Update npm dependencies
1278,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,7bb8cb3f1b90e68a3bc3519076f2be14082a83d2,Add non-ascii characters to post body tests
1279,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,b3a9cc2e7c9a6236a2d74f3200d57a5b26c4cb15,Fix spacing of new line
1280,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,a4944de8d412ff25506b4d4d2db7cd35e270ffd2,Second attempt at fixing spacing
1281,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,710a5138dc11126b971463d2ddc03ac8d0766e22,Another attempt at fixing spacing
1282,https://api.github.com/repos/mozilla/OpenWPM/pulls/442,442,Encode post bodies as utf-8 before sending,Post bodies that contain non-ascii characters are currently discarded by the SocketInterface during deserialization.,englehardt,3280150,2019-08-06T04:37:41Z,MEMBER,True,3015,1299,8,A web privacy measurement framework,Python,41e025bc5009c9f83a5751dd63c866b10f23bc3d,Spacing
1283,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,e0acfeaa90696a3a69ccc7b0e1721e0a02cb9ee1,Replace print calls will logging
1284,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,3cb0131f8618317eac0a6fe19ad1088972d55b47,Include extra error info in sentry
1285,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,bd020fd4106a75c3882cb83359ca3fa43a6b2355,Remove message from log to avoid futher encoding errors upon logging
1286,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,856f2b28740976f5c06b9a210236a9e616d7689a,Try switching serialization type for logging
1287,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,058ad2b3d91d552d5dd5693f5a8c203e224dd5ae,Merge branch 'master' of github.com:mozilla/OpenWPM into remove_print
1288,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,0843236f62d697e6ff3982365698f86b67ad2b1d,"Increase number of retries for data written to S3.

This also better handles errors if we still fail after retrying (so the
aggregator process doesn't crash)."
1289,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,8a4a293ab4f58cd5885ce3067d6629df374090c3,"Pass all log information across process boundary.

The current inter-process log handler discards `exc_info` and adds the
arguments to the exception message. This prevents Sentry from properly
grouping log messages by their exception and call information. We send
the information if possible (or fall back to the previous approach if
not)."
1290,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,917bb7cbb3e5ad9b83318cb4e55ecd2d1160fc09,"Use exc_info for errors, rather than strings"
1291,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,56f32b17d6ef14d738fd35fb2e5a7956c1c56e15,Merge remote-tracking branch 'origin/s3_stability_fixes' into remove_print
1292,https://api.github.com/repos/mozilla/OpenWPM/pulls/441,441,[WIP] Replace print calls with logging,"This is especially important in `SocketInterface.py`, which is currently `print`ing important serialization errors.",englehardt,3280150,2019-08-05T21:59:55Z,MEMBER,False,127,61,7,A web privacy measurement framework,Python,0899d5ff8abcca8de494bca132c74721d668173b,Fix flake8 errors
1293,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,6db59512ee88ea86b71bb8db2d89b7f7f290752e,Attempt to fix dependency conflict by combining installs to a single command
1294,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,e764278704657a0c26caee1bbdc8c6bc09b8349a,Second attempt to fix dependencies
1295,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,7dfb93339c2a36a04ce2fe977bb6c9cae5786074,Adding requests as explicit requirement
1296,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,3f869818250d12b2ad3d260c3f2b5c6106e23468,Pin to older version of localstack
1297,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,fbe1037f0dca19ce80b0aa5e3b2a46b2e9fd890e,Ignore Q000
1298,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,71fa3ee936070a1d5b027ccdf0eb169f9e7164c2,Fix flake8 issues
1299,https://api.github.com/repos/mozilla/OpenWPM/pulls/440,440,Pin localstack to older version to fix dependency issues,"Broken out from #438.

Localstack released 10.X on August 3rd. The newest version has installation issues. See #439. Pinning to `0.9.6` then introduced a bunch of `flake8` errors that we didn't have before. This is caused by the fact that localstack includes `flake8-quotes` as a dependency (https://travis-ci.org/mozilla/OpenWPM/jobs/568044495#L2129-L2130) and this plugin flags any use of double quotes as an error. Unfortunately flake8 automatically loads any installed plugins and doesn't provide a way to disable an installed plugin or restrict the set of possible plugins (https://gitlab.com/pycqa/flake8/issues/133). Thus, I've decided to disable the entire `QXXX` error code range, which as of 2 years ago isn't used by any plugins we plan to install (https://gitlab.com/pycqa/flake8/issues/339).",englehardt,3280150,2019-08-05T21:16:08Z,MEMBER,True,21,22,7,A web privacy measurement framework,Python,2642f0550f121b784ba385bed7a9c065112f7d7e,Ignore all flake8-quotes error codes
1300,https://api.github.com/repos/mozilla/OpenWPM/pulls/438,438,Fix S3Aggregator crash when records are flushed twice,"Will rebase once #434 is merged into master. See the commit message for https://github.com/mozilla/OpenWPM/commit/4a0e4e4ede9120c28cabe2c35fef0487f9835220 for a description of the issue.

This should fix errors of this type: https://sentry.prod.mozaws.net/operations/web-crawls/issues/6111973/, which are likely lead to the socket errors we're seeing here: https://sentry.prod.mozaws.net/operations/web-crawls/issues/6101037/.

",englehardt,3280150,2019-08-02T22:08:14Z,MEMBER,True,4,1,1,A web privacy measurement framework,Python,9a9d9e4fb6ff6ee2798dd2d8698bed0499f5a1d2,"Fix crasher in S3Aggregator

This crash results when the records for a site are flushed by
S3Aggregator::save_batch_if_past_timeout (thus deleting the raw records
for that visit_id). If no new records are saved for that visit_id and a
new page is visted by the crawler, the aggregator attempts to flush the
same record batch before moving to the next site. We can skip that
second attempt at a flush."
1301,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,4691cbd65bbc348c834b6121a6c7daa7c3646922,Avoid TypeError: logSettings.nonExistingPropertiesToInstrument is undefined
1302,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,a8b4fef4967edf6243b5b6f3c42185624fc76c61,Add-ons configurable in crawler.py
1303,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,676ee47643a160c0f073355a7a29be416a46e10f,Make it possible to override specific browser preferences in crawler.py
1304,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,96d6737e1826bf1073cbd05155485859b13b80da,"Instrumented webcompat-related properties (Members supported by Chrome 76, not supported by Firefox 69b6)

Squashed commits:
Moved webcompat-related instrumentation to separate file
Added test page for webkitSpeechRecognition
Properly instrument non-existing window-level properties that also have instrumented properties
Properly instrumenting webcompat instances vs classes
Added the full list of properties to instrument from (Members supported by Chrome 76, not supported by Firefox 69b6)
Improved webcompat js instrumentation approach
Avoid repeated symbol declaration for webcompat properties
Proof of concept instrumentation of several webcompat-related properties"
1305,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,0cabf218f61f386926fcf1ab750f34c93cd5abb4,Configure to only instrument webcompat apis during manual testing
1306,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,ee03cd1506ceabd880397b8a7776ea50e0af4612,Clarified a doc comment
1307,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,145b610f1bdd659f830b3b59e3ceedade4908c57,Do not mock non-existing objects in webcompat instrumentation (and do not instrument properties that require mock objects)
1308,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,107c7ed6e62bf4fc7e9d663b8d6d664065db4eed,"Instrument a mock trap property, window.NothingToSeeHere"
1309,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,5917e33ef78d0c9d312befee4dfd9ef8c29f7409,Using nonExistingPropertiesToInstrument instead of propertiesToInstrument (required after the recent rebase on master)
1310,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,a92052c8c1bb893a8c1e0caf402a785c65beb4db,Add back empty propertiesToInstrument to prevent the default mode of instrumenting all properties
1311,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,c1ef2f06aeb69444f9d3d85233da141094de429e,Do not use objectMissingOnWindow since it may not reflect the current Fx version
1312,https://api.github.com/repos/mozilla/OpenWPM/pulls/437,437,[WIP] Web compat instrumentation mvp,"Work in progress MVP example of how to instrument OpenWPM for web compat research. Adds instrumentation for non-existing properties outlined in https://docs.google.com/spreadsheets/d/1GpXp4fAYRhdBqJvfpEGC89tPWXQaKX8t0PV_qDpgrGE/edit#gid=1220537757

Note: This particular PR is not meant to be merged. The to-be-merged-into-OpenWPM-master parts of this PR has been extracted into:
- https://github.com/mozilla/OpenWPM/pull/452 - Js instrument non existing properties #452
- https://github.com/mozilla/OpenWPM/pull/456 - Allow content saving to be configured by any resource type #456
- https://github.com/mozilla/OpenWPM/pull/457 - Add config option js_instrument_modules #457
- https://github.com/mozilla/OpenWPM/pull/458 - Add logSettings.logFunctionGets #458
- https://github.com/mozilla/OpenWPM/pull/459 - Js instrument retain prototype and constructor #459
- https://github.com/mozilla/OpenWPM/pull/484 - More crawler configuration #484",motin,793037,2019-08-02T12:52:34Z,CONTRIBUTOR,False,5943,3,9,A web privacy measurement framework,Python,764e433a981935c744b76208c948bdd3d2dfe45e,Clarified some webcompat instrumentation log output
1313,https://api.github.com/repos/mozilla/OpenWPM/pulls/436,436,Configurable Redis host,"Allows for use of Google Cloud Memorystore for Redis in GCP for instance, as implemented in https://github.com/mozilla/openwpm-crawler/pull/20",motin,793037,2019-08-01T12:05:25Z,CONTRIBUTOR,True,2,1,1,A web privacy measurement framework,Python,1b2313349740e036070807036f56df49221dd6d2,Configurable Redis host
1314,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,fcd654bfd233c1aac1c97b5fec730a9ff95c0c85,Dropped pyvirtualdisplay and the xvfb requirement as we can just use Firefox's headless mode.
1315,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,f800965aaa317cb4d9044601cfb44047d3c2bd49,added a docker-compose.yml (v3) file to simplify the docker image build command.
1316,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9080602e5a04d716a7f1f1f51cc4088dbfeffadb,fixed flake8 errors
1317,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,f40ca824d49d57ab75b599bf804155ba472ef1c5,geckodriver is just geckodriver when conda installed
1318,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,7ff5bcb7848b26e99504d95ddf6628542decf00b,Merge remote-tracking branch 'crankycoder/features/425-headless-osx' into conda-install-openwpm-dependencies
1319,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,8ca31cb5aedc5317302f56ffee06c9109737d190,"Switch from plyvel to leveldb

That was easy!"
1320,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,b07b3d38c02777bae37ffac03b1dce2b84b11d81,"First clean-up switching to conda env

* need to test scripts on osx, linux, windows
* need to update ci scripts
* have put some core requirements in requirements-dev for now"
1321,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,0c0151a1342e01c0b5264f76f2c1cb123e3d0096,First stab at travis
1322,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9fd916a58c89235f36ed300f5bd47b1b35f0f3e0,Fix travis yaml
1323,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,5ae2ddcae305c41444c37709d07a024074b20fba,yaml !!
1324,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,010a7292d7ac80fcfbfdb340079ddb2637836d41,"Use conda nodejs

As users will"
1325,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,70477eda4d666d69b608fa910f8f65c142ab8a4d,Better dir management
1326,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,8d6b0db05d0ca3786a5cf608ba81d7d6720c8159,"Fix-up db_utils leveldb

TODO Does anything actually use this"
1327,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,932216cd84d21e51206e1e56289530864d77ed49,Install under firefox too
1328,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,91a7fef521d0a1c81903df14eaff6fc3f06e50d2,Install firefox and flash
1329,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,443fcc1ce450d2fe713b81516fb501102fb54b04,"Scripts should be executable, don't need to check flash install"
1330,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,bdfcf4da07e634f052d01e3673e089a941662be5,Remove wget from environment.yaml as its not available in windows
1331,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,2cfbf62f5497014705aea100907b25688b380848,Use build-extension to build extension
1332,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,0e76f6324419a1cf219a798220b3da33f887fa12,Update test_env
1333,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9612a449f2efdf6b75de0a62cd641db9b69e5d29,"Try commenting out compression=snappy

plyvel -> leveldb problem"
1334,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,a63ad843fbce1d89ee8cc6da8bde4f9f5573510e,Add sentry logging to MPLogger
1335,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9b3c8e7fc77465c69472b8524fe2c8a16101c8f4,Get docker running
1336,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,4839474bbf90f6716ceddba5220cc65a654b7c12,Uncomment default sites
1337,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9733a5fc3c7d9caf4bc00f79f7bb34a841df8604,Comment properly
1338,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,18a2336098aaaa5d1c011aaedd0d6fe92952fb6a,Deploy to dockerhub is for after success
1339,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,414845d8a9fd7c1ef8498825a34279dff19570ef,Try state flash 1
1340,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,adf8c59a6c5c17a0a3b3bde04b6808e6d2007abf,"Revert ""Try state flash 1""

This reverts commit 414845d8a9fd7c1ef8498825a34279dff19570ef."
1341,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,c71d81a5f855c2c66cfed8178c072ffd7cb69cdf,Try new method for installing flash
1342,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,9d4f963492259641a0ade99416298132b99b3979,Undo my plyvel vandalism :)
1343,https://api.github.com/repos/mozilla/OpenWPM/pulls/435,435,[WIP] conda + headless + new logging + tweaks,This is a mish-mosh of a bunch of recent PRs. Seeing what it throws up for a big crawl.,birdsarah,1796208,2019-08-01T09:49:53Z,MEMBER,False,593,743,32,A web privacy measurement framework,Python,faa3902380ff4ea3427a0b73c13734bd177ca51d,Complete refactor of MPLogger
1344,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,a63ad843fbce1d89ee8cc6da8bde4f9f5573510e,Add sentry logging to MPLogger
1345,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,faa3902380ff4ea3427a0b73c13734bd177ca51d,Complete refactor of MPLogger
1346,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,398fb13dd07cd6ab947050d7c8fa342105345e43,Fix Flake8-flagged issues
1347,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,7264b018e975f02625db13c8c5a91a4ed137feb3,Restore SocketInterface relative import statement
1348,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,ad7d8a3264eaf92da7c2fcee1ebab175f1a61550,Moved back crawler.py-specific sentry context to crawler.py
1349,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,292cc4871571b094960486106cdf070bc5803b04,Integrate new logging class with entire codebase
1350,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,0382307d7b2ce25c10266cc24875947ff9067050,Don't attach multiple handlers to logger
1351,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,8b4f8fda806691e5ea546975fc0cab49e81d1094,Remove old handlers and register new ones
1352,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,81a345ac524e0bab091462caedc9622072c79e68,Properly clear old handlers
1353,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,23fcd44d235c14f00d20d8e4f660a52519c14ea7,Add tests for MPLogger + bugfixes
1354,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,9747ecdeac4c5442b1f1640ccb42fa90382a4eaa,Log uncaught exceptions in child processes to logger
1355,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,aa17cbb9062ce81789f54da14487c8e79f69f088,Fix remaining logger references
1356,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,8c0dea5cf6a20eb6da46aed9f78bc218d5d814b0,Avoid name collisions in utility
1357,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,e890b6b05aa7625dedbf38d1a6ed6efe99fcd24f,Fix naming
1358,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,207a280ab2d7134959817573e2fd4e93a282ad16,Merge branch 'master' into multiprocess_logging_refactor
1359,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,49fe696869adb7059ed03b671d7def5ec9c7174e,Fix W292
1360,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,0039eff0f105e46134ba75325047fa52afbdae8b,Use OpenWPM scoped logger
1361,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,5ac35f665913b1ea6ac9f710686ceb8bfe9153cd,Attach exception text to logs such that sentry will pick it up
1362,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,6625d8711f5b7f5f5a027305fdfe985dc3f29ba4,Fix flake8 issue
1363,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,ae87fb79b7a7f036a88dfa1b217d21035acbfbc8,Attach full traceback to sentry logs + better aggregation
1364,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,8a977859afc842600d3690f8dd2672337506cac6,Fix race condition when reading from status queue
1365,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,30e6af261aac0f4277d1645ba40cbe3ea0f0f225,Parse traceback to fit within sentry string limits
1366,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,9087ab59f2b369ef23803ced5a8bcad234af4d20,Fix exception references in BrowserManager
1367,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,230cb073525db09a05156463a3cf7fe174c9153e,Use a more descriptive error message from traceback
1368,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,9d26c5f69f9a0f0c631e7c1bfd059c7be3b1df9b,Add crawl bucket and directory tag to all sentry logs
1369,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,bac1052fd0f89559db27cd2e96bc39118b5cdac5,Combine neterrors with a fingerprint based on error type
1370,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,bd09d5d796e3d39729fe895839ce075c71ad24ef,Make sentry crawl context optional
1371,https://api.github.com/repos/mozilla/OpenWPM/pulls/434,434,Refactor MPLogger to make cross-process sentry logging work,"This is an alternate approach to #432. MPLogger's current structure is quite broken (in that it requires child processes to explicitly connect to the central logging processing) and doesn't play well with Sentry. This refactor allows us to serialize logs from all processes in a single sentry report. The only remaining issue is that it [doesn't appear to be possible](https://github.com/getsentry/sentry-python/issues/291) to capture uncaught exceptions of child processes in the new Sentry SDK.

Fixes #406",englehardt,3280150,2019-07-31T06:45:01Z,MEMBER,True,441,212,13,A web privacy measurement framework,Python,c71456b3fc5b6a9641a714dbb3993545d9856e04,Bugfix misspelled variable
1372,https://api.github.com/repos/mozilla/OpenWPM/pulls/432,432,[WIP] Add sentry logging to MPLogger,This allows Sentry to capture the full set of logs that are normally only sent to the local log file.,englehardt,3280150,2019-07-30T16:39:10Z,MEMBER,False,67,27,4,A web privacy measurement framework,Python,a63ad843fbce1d89ee8cc6da8bde4f9f5573510e,Add sentry logging to MPLogger
1373,https://api.github.com/repos/mozilla/OpenWPM/pulls/432,432,[WIP] Add sentry logging to MPLogger,This allows Sentry to capture the full set of logs that are normally only sent to the local log file.,englehardt,3280150,2019-07-30T16:39:10Z,MEMBER,False,67,27,4,A web privacy measurement framework,Python,326d23b487d7031cd221ee0cfcbdfe4a4708fa45,Use activate_sentry utility method to activate sentry in each process
1374,https://api.github.com/repos/mozilla/OpenWPM/pulls/432,432,[WIP] Add sentry logging to MPLogger,This allows Sentry to capture the full set of logs that are normally only sent to the local log file.,englehardt,3280150,2019-07-30T16:39:10Z,MEMBER,False,67,27,4,A web privacy measurement framework,Python,617327c58f93c519547f2a8f687611301dc1ce6e,Removed now unused sentry_sdk import
1375,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,fcd654bfd233c1aac1c97b5fec730a9ff95c0c85,Dropped pyvirtualdisplay and the xvfb requirement as we can just use Firefox's headless mode.
1376,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,f800965aaa317cb4d9044601cfb44047d3c2bd49,added a docker-compose.yml (v3) file to simplify the docker image build command.
1377,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,9080602e5a04d716a7f1f1f51cc4088dbfeffadb,fixed flake8 errors
1378,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,f40ca824d49d57ab75b599bf804155ba472ef1c5,geckodriver is just geckodriver when conda installed
1379,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,7ff5bcb7848b26e99504d95ddf6628542decf00b,Merge remote-tracking branch 'crankycoder/features/425-headless-osx' into conda-install-openwpm-dependencies
1380,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,8ca31cb5aedc5317302f56ffee06c9109737d190,"Switch from plyvel to leveldb

That was easy!"
1381,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,b07b3d38c02777bae37ffac03b1dce2b84b11d81,"First clean-up switching to conda env

* need to test scripts on osx, linux, windows
* need to update ci scripts
* have put some core requirements in requirements-dev for now"
1382,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,0c0151a1342e01c0b5264f76f2c1cb123e3d0096,First stab at travis
1383,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,9fd916a58c89235f36ed300f5bd47b1b35f0f3e0,Fix travis yaml
1384,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,5ae2ddcae305c41444c37709d07a024074b20fba,yaml !!
1385,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,010a7292d7ac80fcfbfdb340079ddb2637836d41,"Use conda nodejs

As users will"
1386,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,70477eda4d666d69b608fa910f8f65c142ab8a4d,Better dir management
1387,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,8d6b0db05d0ca3786a5cf608ba81d7d6720c8159,"Fix-up db_utils leveldb

TODO Does anything actually use this"
1388,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,7bac7c3a77074d9aabc1bc4f40181e8c155a162b,No FirefoxLogInterceptor
1389,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,f4cf163df3c525dc96cd80c5e58f380b238d879c,Upda pid kill mechanism
1390,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,db7594948f8051e633b1166fd5f1ebd466652d08,firefox binary must be specified as FIREFOX_BINARY env variable
1391,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,9e0e3bf21bfac80a6bebebcc9e6b205537682b25,Need freeze_support and no wget for windows
1392,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,8feb5150154ed2eb8c5057aa8979e93656719ff1,Impor tpsutil
1393,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,5e196ac52d7b46d27ccfe62879cd926ae595f725,Add instruction and config to demo.py
1394,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,7269f1cb167ad5897b5f7ea9d67b34112122ebc7,Run all three sites
1395,https://api.github.com/repos/mozilla/OpenWPM/pulls/430,430,[WIP] Windows hackathon,"@crankycoder - this should run locally if you follow the README and the notes in demo.py

Note you have to get firefox and openwpm.xpi yourself.

* openwpm.log ends up with some stuff in it
* the sqlite database ends up with some stuff in tables that are not populated by the web extension

Earlier today I thought I knew why the table was not getting populated but I don't. 

The plyvel swap for python-leveldb is on #429 and you can test that it works and is populating fine on linux (I haven't tried on osx yet so if you want to give that a walk through on osx that's cool).

So, it's not that and I would hazard a guess that it's something to do with sockets. If you wouldn't mind starting there - getting data into the sqlite database OR getting it into parquet with S3, it doesn't really matter, but I would hunch that they both don't currently work.

This may all be late night ramblings so hit me up in the morning for some clarity.

Also note your headless mode pr is working on windows too :D 

Note would recommend not running in headless mode because my pid code does not work properly so this will help to remind you. Because pid code doesn't work properly you'll have a bunch of firefox and geckodriver processes lurking around that need manually killing.",birdsarah,1796208,2019-07-30T05:24:07Z,MEMBER,False,285,421,22,A web privacy measurement framework,Python,19408d4d10665fd3e17b58b957740a43e2b18980,proc typo
1396,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,fcd654bfd233c1aac1c97b5fec730a9ff95c0c85,Dropped pyvirtualdisplay and the xvfb requirement as we can just use Firefox's headless mode.
1397,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,f800965aaa317cb4d9044601cfb44047d3c2bd49,added a docker-compose.yml (v3) file to simplify the docker image build command.
1398,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9080602e5a04d716a7f1f1f51cc4088dbfeffadb,fixed flake8 errors
1399,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,f40ca824d49d57ab75b599bf804155ba472ef1c5,geckodriver is just geckodriver when conda installed
1400,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,7ff5bcb7848b26e99504d95ddf6628542decf00b,Merge remote-tracking branch 'crankycoder/features/425-headless-osx' into conda-install-openwpm-dependencies
1401,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,8ca31cb5aedc5317302f56ffee06c9109737d190,"Switch from plyvel to leveldb

That was easy!"
1402,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,b07b3d38c02777bae37ffac03b1dce2b84b11d81,"First clean-up switching to conda env

* need to test scripts on osx, linux, windows
* need to update ci scripts
* have put some core requirements in requirements-dev for now"
1403,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,0c0151a1342e01c0b5264f76f2c1cb123e3d0096,First stab at travis
1404,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9fd916a58c89235f36ed300f5bd47b1b35f0f3e0,Fix travis yaml
1405,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,5ae2ddcae305c41444c37709d07a024074b20fba,yaml !!
1406,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,010a7292d7ac80fcfbfdb340079ddb2637836d41,"Use conda nodejs

As users will"
1407,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,70477eda4d666d69b608fa910f8f65c142ab8a4d,Better dir management
1408,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,8d6b0db05d0ca3786a5cf608ba81d7d6720c8159,"Fix-up db_utils leveldb

TODO Does anything actually use this"
1409,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,932216cd84d21e51206e1e56289530864d77ed49,Install under firefox too
1410,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,91a7fef521d0a1c81903df14eaff6fc3f06e50d2,Install firefox and flash
1411,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,443fcc1ce450d2fe713b81516fb501102fb54b04,"Scripts should be executable, don't need to check flash install"
1412,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,bdfcf4da07e634f052d01e3673e089a941662be5,Remove wget from environment.yaml as its not available in windows
1413,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,2cfbf62f5497014705aea100907b25688b380848,Use build-extension to build extension
1414,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,0e76f6324419a1cf219a798220b3da33f887fa12,Update test_env
1415,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9612a449f2efdf6b75de0a62cd641db9b69e5d29,"Try commenting out compression=snappy

plyvel -> leveldb problem"
1416,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9b3c8e7fc77465c69472b8524fe2c8a16101c8f4,Get docker running
1417,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,4839474bbf90f6716ceddba5220cc65a654b7c12,Uncomment default sites
1418,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9733a5fc3c7d9caf4bc00f79f7bb34a841df8604,Comment properly
1419,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,18a2336098aaaa5d1c011aaedd0d6fe92952fb6a,Deploy to dockerhub is for after success
1420,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,414845d8a9fd7c1ef8498825a34279dff19570ef,Try state flash 1
1421,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,adf8c59a6c5c17a0a3b3bde04b6808e6d2007abf,"Revert ""Try state flash 1""

This reverts commit 414845d8a9fd7c1ef8498825a34279dff19570ef."
1422,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,c71d81a5f855c2c66cfed8178c072ffd7cb69cdf,Try new method for installing flash
1423,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,9d4f963492259641a0ade99416298132b99b3979,Undo my plyvel vandalism :)
1424,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,74c079291da2802453ce506c387cc52f520fdbc0,"Revert ""Try new method for installing flash""

This reverts commit c71d81a5f855c2c66cfed8178c072ffd7cb69cdf."
1425,https://api.github.com/repos/mozilla/OpenWPM/pulls/429,429,[WIP] Conda install openwpm dependencies,"Task: make dependencies conda installable
Why: so we can get going on windows
Side benefit: installation for all platforms will be simplified and unified

Depends on #426 ",birdsarah,1796208,2019-07-30T01:20:46Z,MEMBER,False,193,404,19,A web privacy measurement framework,Python,cb356cdedb12c72f26fd87543516ef76c55e6363,"Revert ""Merge remote-tracking branch 'crankycoder/features/425-headless-osx' into conda-install-openwpm-dependencies""

This reverts commit 7ff5bcb7848b26e99504d95ddf6628542decf00b, reversing
changes made to f40ca824d49d57ab75b599bf804155ba472ef1c5."
1426,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,400c7f6fcd6b07d03d0d660dd9b21b455467f0e4,Dropped pyvirtualdisplay and the xvfb requirement as we can just use Firefox's headless mode.
1427,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,a54c5c5f3b88ee3cf424996f909cdd894f566ab3,added a docker-compose.yml (v3) file to simplify the docker image build command.
1428,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,9f8ae9722951ae8a9ca462aa20a85c97c1d7805a,fixed flake8 errors
1429,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,057afb613f2409851d882b4da342e5cf4f66e938,skip test_flash_cookies to ignore flash
1430,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,72b206daec9c50c65f80823ceccb6c0efee0e6c6,removed display_pid and display_port as we no longer have xvfb
1431,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,eefc72ba7f170e79644ef323a2ebc38f04688187,"removed references to display_pid and display port

Removed the references from BrowserManager and TaskManager"
1432,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,c0af6d7401afea6a637a2c8008cce5798298512d,Updated README to reflect headless mode changes
1433,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,bf97c6a0804b1c52b75c435122f74f5012d1e752,swapped skip with xfail for flash cookie testcase.
1434,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,7d6568867d0fde3b4fdb52a11e0015fc9501f2be,shortened xfail message for flake8
1435,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,62084b69956b278a456bce0b29967f7dde5e0036,"More XVFB related cleanup

* Removed more display references in comments
* removed pyvirtualdisplay from requirements.txt
* removed flash support from demo.py
* dropped Makefile and docker-compose.yml"
1436,https://api.github.com/repos/mozilla/OpenWPM/pulls/426,426,Switch from XVFB/pyvirtualdisplay to Firefox's native headless mode,"This should fix #425

This removes the dependency on xvfb and pyvirtualdisplay to run headless.

I've also added a couple other things to simplify the developer workflow a little
 * a minimal docker-compose.yml file to simplify the build to include the `openwpm` image name.  
 * Makefile with a single `devshell` target so you can run bash inside of the container to debug things when things go unexpectedly.",crankycoder,4829,2019-07-26T19:55:26Z,CONTRIBUTOR,True,21,70,8,A web privacy measurement framework,Python,3fe85a3074bab1c22cf5b2c1930c64cd7a8931e3,Revert docker-compose
1437,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,9f1d8ea1cd8f0ee2dcf12c68722f58be41e0a47e,Add timeout to batch upload in S3Aggregator
1438,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,f85fe21a080e59339f8e475b074abdf41083afa8,Update timestamp with each new record
1439,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,287c1f332c4c2426854124a64eb10158e14a7e92,Move config files into subdirectory
1440,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,ff96dbb0386ad54d45bcb6caa8c398400cd611bc,Fix timeout check
1441,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,02e8490b6d618e224d4eb0e58a7b717e2facf515,Fix logging in S3Aggreagtor + test for timeout
1442,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,24a6911131a018ed30b1a32ddcf207ae60e43e21,Fix bug in aggregator and python3 tests
1443,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,625f7bcd77512ba845b85cf27c050ee495afa1aa,Fix handling of multiple exceptions
1444,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,2a4b6f6e7be28fe4b174ea3ede8bad8187d11d9c,Merge remote-tracking branch 'origin/s3_aggregator_timeout' into s3_config_cleanup
1445,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,53d894e127d8cebb7b8a21357e000ee62d468291,Convert to text type for Python 3.5 compat
1446,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,5970063d200c333591eeb9d728dcdc2b2ceba757,Second attempt at a fix
1447,https://api.github.com/repos/mozilla/OpenWPM/pulls/421,421,Move config files into subdirectory,"This moves the config files on S3 into a subdirectory. Since there are typically hundreds of files, this will keep the root directory much cleaner.",englehardt,3280150,2019-07-23T16:08:28Z,MEMBER,True,102,7,4,A web privacy measurement framework,Python,e62a4bf8f6e642dc25ca178b48bcf0fb5cf8df17,Bugfix for encoding
1448,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,9f1d8ea1cd8f0ee2dcf12c68722f58be41e0a47e,Add timeout to batch upload in S3Aggregator
1449,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,f85fe21a080e59339f8e475b074abdf41083afa8,Update timestamp with each new record
1450,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,ff96dbb0386ad54d45bcb6caa8c398400cd611bc,Fix timeout check
1451,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,02e8490b6d618e224d4eb0e58a7b717e2facf515,Fix logging in S3Aggreagtor + test for timeout
1452,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,24a6911131a018ed30b1a32ddcf207ae60e43e21,Fix bug in aggregator and python3 tests
1453,https://api.github.com/repos/mozilla/OpenWPM/pulls/420,420,Add timeout to batch upload in S3Aggregator,"Alternate to #414.
Fixes #413",englehardt,3280150,2019-07-23T15:12:32Z,MEMBER,True,53,2,3,A web privacy measurement framework,Python,625f7bcd77512ba845b85cf27c050ee495afa1aa,Fix handling of multiple exceptions
1454,https://api.github.com/repos/mozilla/OpenWPM/pulls/419,419,Bump lodash.merge from 4.6.1 to 4.6.2 in /automation/Extension/webext-instrumentation,"Bumps [lodash.merge](https://github.com/lodash/lodash) from 4.6.1 to 4.6.2.
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/lodash/lodash/commits)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash.merge&package-manager=npm_and_yarn&previous-version=4.6.1&new-version=4.6.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2019-07-23T14:39:26Z,CONTRIBUTOR,True,7,7,1,A web privacy measurement framework,Python,c0a6f2824c611b0f71f97cd9f7207bfa03cf1776,"Bump lodash.merge in /automation/Extension/webext-instrumentation

Bumps [lodash.merge](https://github.com/lodash/lodash) from 4.6.1 to 4.6.2.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/commits)

Signed-off-by: dependabot[bot] <support@github.com>"
1455,https://api.github.com/repos/mozilla/OpenWPM/pulls/418,418,Bump lodash.template from 4.4.0 to 4.5.0 in /automation/Extension/webext-instrumentation,"Bumps [lodash.template](https://github.com/lodash/lodash) from 4.4.0 to 4.5.0.
<details>
<summary>Commits</summary>

- [`ab73503`](https://github.com/lodash/lodash/commit/ab73503859a2d2f7f603bc8a293ce93ecc071e83) Bump to v4.5.0.
- [`a4f7d4c`](https://github.com/lodash/lodash/commit/a4f7d4cc2a3b6d3a43f6c27beadbf90410eecdcd) Rebuild lodash and docs.
- [`cca5ac6`](https://github.com/lodash/lodash/commit/cca5ac60d61a2f786eeafadb674d6e12fc6179c8) Fix npm-test by removing the call to test-docs.
- [`9f7f9fc`](https://github.com/lodash/lodash/commit/9f7f9fc3c5f1a4db9a2134950872440c792ee8bb) Adjust heading order. [ci skip]
- [`6e2fb92`](https://github.com/lodash/lodash/commit/6e2fb92e9a2fd29ef630f71bd571afcdf0f2e206) Remove unused `baseArity`.
- [`4f702e2`](https://github.com/lodash/lodash/commit/4f702e238183444ff392c3c7be5b48f1a7271519) Specify utf8 encoding.
- [`b188f90`](https://github.com/lodash/lodash/commit/b188f903ce41e624d6169f47a0c9e5091c178160) Add fp tests for iteratee shorthands.
- [`7b93dc9`](https://github.com/lodash/lodash/commit/7b93dc9c3253c342a45881392d2308374a8909b3) Ensure clone methods clone expando properties of boolean, number, & string ob...
- [`664d66a`](https://github.com/lodash/lodash/commit/664d66a89ec553438d5560239eba24d30867e580) Make string tests more consistent.
- [`d9dc0e6`](https://github.com/lodash/lodash/commit/d9dc0e6fd13c030029964b5ba468e0df3e2de3b2) Add `_.invertBy` tests.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.4.0...4.5.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash.template&package-manager=npm_and_yarn&previous-version=4.4.0&new-version=4.5.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mozilla/OpenWPM/network/alerts).

</details>",dependabot[bot],49699333,2019-07-22T23:57:11Z,CONTRIBUTOR,True,4,4,1,A web privacy measurement framework,Python,fc4a49ce1a466f6833f72b42bf8d84eeac3c0868,"Bump lodash.template in /automation/Extension/webext-instrumentation

Bumps [lodash.template](https://github.com/lodash/lodash) from 4.4.0 to 4.5.0.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.4.0...4.5.0)

Signed-off-by: dependabot[bot] <support@github.com>"
1456,https://api.github.com/repos/mozilla/OpenWPM/pulls/415,415,Activate Sentry in crawler.py,"Activates Sentry in crawler.py if SENTRY_DSN env var is configured
Part of solution to #406",motin,793037,2019-07-20T10:49:50Z,CONTRIBUTOR,True,30,0,3,A web privacy measurement framework,Python,0306ace0ab52b5814ad1ed2e6a5db8414922312e,Activate Sentry in crawler.py if SENTRY_DSN env var is configured
1457,https://api.github.com/repos/mozilla/OpenWPM/pulls/415,415,Activate Sentry in crawler.py,"Activates Sentry in crawler.py if SENTRY_DSN env var is configured
Part of solution to #406",motin,793037,2019-07-20T10:49:50Z,CONTRIBUTOR,True,30,0,3,A web privacy measurement framework,Python,5275173a44447f18954a514cbd25043a70bd8ccd,Satisfy assert_py_pkg_installed test
1458,https://api.github.com/repos/mozilla/OpenWPM/pulls/414,414,Periodically drain the s3 aggregator queue,"To avoid data loss in case of stalled processes.
Works around #413",motin,793037,2019-07-20T10:48:56Z,CONTRIBUTOR,False,13,0,1,A web privacy measurement framework,Python,0b3f1ed604b5f34e57524486cbb3148f3cc4fdf3,Periodically drain the write queue in order to avoid data loss in stalled or indefinite processes
1459,https://api.github.com/repos/mozilla/OpenWPM/pulls/412,412,Deploy to Dockerhub,Fixes #411,motin,793037,2019-07-19T11:44:00Z,CONTRIBUTOR,True,35,0,2,A web privacy measurement framework,Python,37b2af69bc3b6028cc8b8c2be4cb256693efeccd,Deploy to Dockerhub
1460,https://api.github.com/repos/mozilla/OpenWPM/pulls/412,412,Deploy to Dockerhub,Fixes #411,motin,793037,2019-07-19T11:44:00Z,CONTRIBUTOR,True,35,0,2,A web privacy measurement framework,Python,c6fa6d3c78c607d1eb6358bf74ea5f3841d9abd4,Set deploy script executable and only attempt dockerhub deploy if docker user env var is set
1461,https://api.github.com/repos/mozilla/OpenWPM/pulls/412,412,Deploy to Dockerhub,Fixes #411,motin,793037,2019-07-19T11:44:00Z,CONTRIBUTOR,True,35,0,2,A web privacy measurement framework,Python,50bf2bbe4be83c88b31424d567ce1de83208c8dc,Cleaned up the deploy to dockerhub script somewhat
1462,https://api.github.com/repos/mozilla/OpenWPM/pulls/412,412,Deploy to Dockerhub,Fixes #411,motin,793037,2019-07-19T11:44:00Z,CONTRIBUTOR,True,35,0,2,A web privacy measurement framework,Python,f75305db8c9c9ba9e732c77f15f9dc9a50aa5bbf,Cleaned up the deploy to dockerhub script even more
1463,https://api.github.com/repos/mozilla/OpenWPM/pulls/412,412,Deploy to Dockerhub,Fixes #411,motin,793037,2019-07-19T11:44:00Z,CONTRIBUTOR,True,35,0,2,A web privacy measurement framework,Python,7b61e88800c5aa137818102e756b01f015b98966,Corrected the docker tag to push
1464,https://api.github.com/repos/mozilla/OpenWPM/pulls/410,410,Remove unused interface,"This is a follow up to https://github.com/mozilla/OpenWPM/pull/409

",dashed,139499,2019-07-18T16:32:19Z,CONTRIBUTOR,True,0,4,1,A web privacy measurement framework,Python,d98babd344ed75aaf66194b027b864b90e6fec36,Remove unused interface
1465,https://api.github.com/repos/mozilla/OpenWPM/pulls/409,409,GH-408: Refactor String.prototype.rsplit to be a local function,Closes #408,dashed,139499,2019-07-17T20:19:52Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,f57ea0b987fbe8f7740ceca101f07abc988f0917,"GH-408: Refactor String.prototype.rsplit to be a local function

Closes #408"
1466,https://api.github.com/repos/mozilla/OpenWPM/pulls/402,402,Add filename caching to S3 aggregator,"This is @englehardt's patch that avoids uploading of the same files multiple time within each OpenWPM container / instance. 

(A future patch can optionally use the shared redis server if available to ensure that this enhancement spans across all containers / instances used in a crawl)",motin,793037,2019-07-15T18:30:01Z,CONTRIBUTOR,True,16,0,1,A web privacy measurement framework,Python,95f13c1cc81877e95e148ed7375374057abb1b53,Add filename caching to S3 aggregator
1467,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,42cea2dc4dba1e0331ab57eeef491d7413c5570f,Change the default Docker container behavior to execute a headless crawl configured using environment variables
1468,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,57e4aa7d7b512ffb9591531c7aa59bcd5bf85b59,Use redis as crawl queue backend instead of s3
1469,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,07605bf2d78be738f2814b15912b2a95661ab7fe,Allow the use of localstack's mock s3 service in the headless crawl script
1470,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,720efaa431e31243501d449560cb01f59f441d6f,Adding WIP redis cluster crawler
1471,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,9ade695e396f071458c848aa1e0fbb6670b1acc4,Do not attempt to visit a site if waiting for work
1472,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,dc6c990058876230ce3f6953f332751075245812,Merged crawler.py and headless_crawl.py
1473,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,8ae6ae42cb3d5994bd7cc0759840ed44ded94596,Cleaned up rediswq.py somewhat
1474,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,beab5d318a85643be14ba3a0e1ddd4cd1fc4ba71,Abide to mighty flake + bonus: clarify a comment in the demo and crawler scripts
1475,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,82c93cb788eafc701af7140dba205e1eb9fc1d69,Default values for crawler env vars
1476,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,a054e7ffe28f9dc9b164ad3d328799b0ae78223d,Don't include .git in Docker images
1477,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,263f838c2a2283019b9ca3c61d273719f9ad79dd,Crawler script uses logger instead of printing to console
1478,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,ec3411165c8eeb9cc308d11a5ffa0c8173a08fe0,Abide by flake
1479,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,2cb59f7129cba5f5f6d35150f263b7a08e119540,Fix default s3 crawl bucket typo
1480,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,a3ee3fe5ef84aec8fc5840cabf64bb1f8fd6f310,"Add ""http://"" to site to crawl if it does not contain ""://"" already"
1481,https://api.github.com/repos/mozilla/OpenWPM/pulls/401,401,Openwpm crawler support,This merges efforts from @englehardt and me in order to make OpenWPM support containerized crawls via https://github.com/mozilla/openwpm-crawler,motin,793037,2019-07-13T15:12:02Z,CONTRIBUTOR,True,211,1,5,A web privacy measurement framework,Python,c0bacb1feb40920366026b876639dee1ff0b27d2,Restore the default Docker container behavior to execute the demo crawl
1482,https://api.github.com/repos/mozilla/OpenWPM/pulls/399,399,"Update default_browser_params to include ""navigation_instrument"" ","Added ""navigation_instrument"" parameter to default_browser_params.json file",aliamcami,12300792,2019-07-11T22:23:33Z,CONTRIBUTOR,True,1,0,1,A web privacy measurement framework,Python,4abd0ef6a50d4937efb13ed6b596639fc5c14f07,Update default_browser_params.json
1483,https://api.github.com/repos/mozilla/OpenWPM/pulls/397,397,Updated webext instrumentation readme and metadata,Noticed some outdated information after publishing to npm,motin,793037,2019-07-11T15:57:39Z,CONTRIBUTOR,True,21,3,2,A web privacy measurement framework,Python,b00b9b9692d769d5319d6cc40bf231ab5bf6615f,Updated webext instrumentation readme and metadata
1484,https://api.github.com/repos/mozilla/OpenWPM/pulls/396,396,Use the Unbranded build that corresponds to Firefox 68 release (for both Linux and Mac),"In https://github.com/mozilla/OpenWPM/pull/385 we hard-coded the unbranded version of Firefox to a specific build. 

This PR makes this available also for the Mac build, and changes the build to correspond to the one that matches Firefox 68 (according to https://wiki.mozilla.org/Add-ons/Extension_Signing#Unbranded_Builds where this is tracked)",motin,793037,2019-07-10T21:06:59Z,CONTRIBUTOR,True,5,6,2,A web privacy measurement framework,Python,008fa77fde8610a850c7bcc67fe5515d81b89f99,Use the Unbranded build that corresponds to Firefox 68 release (for both Linux and Mac)
1485,https://api.github.com/repos/mozilla/OpenWPM/pulls/395,395,Set @openwpm/webext-instrumentation package to be published as a public package,"Required since scoped npm packages are attempted to be published as private by default.

Blocks https://github.com/mozilla/OpenWPM/issues/329",motin,793037,2019-07-10T07:38:23Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,758415fab2ff91850b5eb8b10c31c4996db217ee,Set @openwpm/webext-instrumentation package to be published as a public package
1486,https://api.github.com/repos/mozilla/OpenWPM/pulls/394,394,Restore run-on-osx-via-docker.sh,Fixes #317,motin,793037,2019-07-07T12:20:57Z,CONTRIBUTOR,True,8,3,3,A web privacy measurement framework,Python,c684326490caf70b16aa32d35145fb0d711e2922,Fix typo in Dockerfile
1487,https://api.github.com/repos/mozilla/OpenWPM/pulls/394,394,Restore run-on-osx-via-docker.sh,Fixes #317,motin,793037,2019-07-07T12:20:57Z,CONTRIBUTOR,True,8,3,3,A web privacy measurement framework,Python,ed5757976b9a177aa3ad582fae78a3dd27250708,In the docker image: move the firefox binary away from the /opt/OpenWPM root so that it is available if we mount a local source code directory as /opt/OpenWPM
1488,https://api.github.com/repos/mozilla/OpenWPM/pulls/394,394,Restore run-on-osx-via-docker.sh,Fixes #317,motin,793037,2019-07-07T12:20:57Z,CONTRIBUTOR,True,8,3,3,A web privacy measurement framework,Python,ab58317b3777a4e47654720e5d621a002db64de7,Restore run-on-osx-via-docker.sh
1489,https://api.github.com/repos/mozilla/OpenWPM/pulls/392,392,Mozilla random id fix and test,"The current implementation uses the _uuid_ module to generate random integers. As a result, the current ids are negative with a chance of 50%, which is probably not intended.

This PR changes the generation of the random ids to the _random.getrandbits_ function, which only returns positive values. Also, test is added that fails should one of the visit_id integers be out of range.",eriktews,1436802,2019-07-04T11:01:06Z,CONTRIBUTOR,False,8,6,2,A web privacy measurement framework,Python,4f8cee8797f23f6bda33f22b8c0d3caceecd40fa,"Switch random number generation to getrandbits

The previous implementation based on UUIDs used to generate negative random numbers as well. This commit changes the random number generation to random.getrandbits which makes sure only positive numbers are used as IDs."
1490,https://api.github.com/repos/mozilla/OpenWPM/pulls/392,392,Mozilla random id fix and test,"The current implementation uses the _uuid_ module to generate random integers. As a result, the current ids are negative with a chance of 50%, which is probably not intended.

This PR changes the generation of the random ids to the _random.getrandbits_ function, which only returns positive values. Also, test is added that fails should one of the visit_id integers be out of range.",eriktews,1436802,2019-07-04T11:01:06Z,CONTRIBUTOR,False,8,6,2,A web privacy measurement framework,Python,69ff758a8ffeb690af25ece2e0a5aac6283abf6a,Test whether the generated visid_ids are in range
1491,https://api.github.com/repos/mozilla/OpenWPM/pulls/390,390,[WIP] Convert S3Aggregator to ParquetAggregator,"See #294 for motivation. I've stopped working on this because I think it's going to be more complex than I expected. While it's true that we can easily save the parquet database locally, we need to handle the de-duplicated content somehow. We currently write content to a `content` directory on S3 rather than as a table in the database. This lets us de-duplicate across independent crawls (but leads to #247). So how do we save these when saving locally? Also as individual files? But we know that's super inefficient. The current `LocalAggregator` uses a LevelDB database to store the files. This is very performant, but I didn't want to duplicate that logic in the ParquetAggregator class. So we'll need to do some refactoring or rethink how we save content files.",englehardt,3280150,2019-07-03T22:52:45Z,MEMBER,False,156,55,4,A web privacy measurement framework,Python,3e28c8e373a3932c6e2de9d94f6eb3f4028c145e,Rename S3Aggregator to ParquetAggregator
1492,https://api.github.com/repos/mozilla/OpenWPM/pulls/390,390,[WIP] Convert S3Aggregator to ParquetAggregator,"See #294 for motivation. I've stopped working on this because I think it's going to be more complex than I expected. While it's true that we can easily save the parquet database locally, we need to handle the de-duplicated content somehow. We currently write content to a `content` directory on S3 rather than as a table in the database. This lets us de-duplicate across independent crawls (but leads to #247). So how do we save these when saving locally? Also as individual files? But we know that's super inefficient. The current `LocalAggregator` uses a LevelDB database to store the files. This is very performant, but I didn't want to duplicate that logic in the ParquetAggregator class. So we'll need to do some refactoring or rethink how we save content files.",englehardt,3280150,2019-07-03T22:52:45Z,MEMBER,False,156,55,4,A web privacy measurement framework,Python,8fa12de0d0d907df04f781c16060b279e67d0b1a,Correct docstring
1493,https://api.github.com/repos/mozilla/OpenWPM/pulls/390,390,[WIP] Convert S3Aggregator to ParquetAggregator,"See #294 for motivation. I've stopped working on this because I think it's going to be more complex than I expected. While it's true that we can easily save the parquet database locally, we need to handle the de-duplicated content somehow. We currently write content to a `content` directory on S3 rather than as a table in the database. This lets us de-duplicate across independent crawls (but leads to #247). So how do we save these when saving locally? Also as individual files? But we know that's super inefficient. The current `LocalAggregator` uses a LevelDB database to store the files. This is very performant, but I didn't want to duplicate that logic in the ParquetAggregator class. So we'll need to do some refactoring or rethink how we save content files.",englehardt,3280150,2019-07-03T22:52:45Z,MEMBER,False,156,55,4,A web privacy measurement framework,Python,0f80ae624f428b6c6ab7ba5553288985d735ef08,Add stub test page for local aggregator
1494,https://api.github.com/repos/mozilla/OpenWPM/pulls/389,389,Bugfix for broken build,Reverts a2dce7a5d30cec72455639f40e4b93dbe6bc9315,englehardt,3280150,2019-07-03T15:59:36Z,MEMBER,True,2,2,2,A web privacy measurement framework,Python,dd0b4e7b3e9544b75652a4f154aebf8b320775d3,Bugfix for broken branch. Reverts a2dce7a5d30cec72455639f40e4b93dbe6bc9315
1495,https://api.github.com/repos/mozilla/OpenWPM/pulls/388,388,Disable virtual display creation for MacOS,"We know MacOS will throw XVFB errors when we attempt to start a virtual display using `pyvirtualdisplay`. Rather than relying on a user to skip the `headless` configuration, we prevent OpenWPM from initializing the display on darwin even when the config parameter is set.

@nhnt11 or @motin: do you mind to test this on MacOS?",englehardt,3280150,2019-07-03T15:30:32Z,MEMBER,True,12,8,2,A web privacy measurement framework,Python,e5b883364cbb1d6312fbc3236d3e318ed3b66fc8,Disable virtual display creation for MacOS
1496,https://api.github.com/repos/mozilla/OpenWPM/pulls/386,386,Fix visit_id range for JS limits.,"Will fix #277. Alternative to https://github.com/mozilla/OpenWPM/pull/323, which has errors related to signed/unsigned integers and does not pass the new included test. I verified that the master branch fails this test due to the truncation issue.

This also fixes two other issues:
* The S3 Aggregator would silently drop the last page visit (or set of visits).
* `utilities::get_test_config` accepts a browser count as an argument, but only makes the first browser headless.",englehardt,3280150,2019-07-02T00:54:01Z,MEMBER,True,60,17,5,A web privacy measurement framework,Python,aba6a193ae819bf7d3593a738428e42077b1dc1f,Fix visit_id range for JS limits.
1497,https://api.github.com/repos/mozilla/OpenWPM/pulls/386,386,Fix visit_id range for JS limits.,"Will fix #277. Alternative to https://github.com/mozilla/OpenWPM/pull/323, which has errors related to signed/unsigned integers and does not pass the new included test. I verified that the master branch fails this test due to the truncation issue.

This also fixes two other issues:
* The S3 Aggregator would silently drop the last page visit (or set of visits).
* `utilities::get_test_config` accepts a browser count as an argument, but only makes the first browser headless.",englehardt,3280150,2019-07-02T00:54:01Z,MEMBER,True,60,17,5,A web privacy measurement framework,Python,49e0d2c3676fe53964a7680e4ccfe6261e73477e,Remove code used to debug test
1498,https://api.github.com/repos/mozilla/OpenWPM/pulls/386,386,Fix visit_id range for JS limits.,"Will fix #277. Alternative to https://github.com/mozilla/OpenWPM/pull/323, which has errors related to signed/unsigned integers and does not pass the new included test. I verified that the master branch fails this test due to the truncation issue.

This also fixes two other issues:
* The S3 Aggregator would silently drop the last page visit (or set of visits).
* `utilities::get_test_config` accepts a browser count as an argument, but only makes the first browser headless.",englehardt,3280150,2019-07-02T00:54:01Z,MEMBER,True,60,17,5,A web privacy measurement framework,Python,cbcd9282240d2b785ac5bda568d5b966740b5e50,Add test page
1499,https://api.github.com/repos/mozilla/OpenWPM/pulls/386,386,Fix visit_id range for JS limits.,"Will fix #277. Alternative to https://github.com/mozilla/OpenWPM/pull/323, which has errors related to signed/unsigned integers and does not pass the new included test. I verified that the master branch fails this test due to the truncation issue.

This also fixes two other issues:
* The S3 Aggregator would silently drop the last page visit (or set of visits).
* `utilities::get_test_config` accepts a browser count as an argument, but only makes the first browser headless.",englehardt,3280150,2019-07-02T00:54:01Z,MEMBER,True,60,17,5,A web privacy measurement framework,Python,d9923895d4dfac58c4db54fbfd4addb55b22a41a,Iterate over visit_ids instead of crawl_ids
1500,https://api.github.com/repos/mozilla/OpenWPM/pulls/385,385,Hardcode FF binary,"Using the ""latest"" taskcluster build url means that OpenWPM will automatically update to the newest build as soon as it's released. This is great for keeping things up to date, but not so great when there are breaking changes between major releases. Unfortunately there is no way to specify ""give me the latest point release of Firefox XX"", so we will hardcode specific builds for the time being. See #381 for a discussion of our options.",englehardt,3280150,2019-07-01T21:33:44Z,MEMBER,True,3,5,1,A web privacy measurement framework,Python,3447449e2be657adde31feddafa0dc7d9b4677d1,Hardcode FF binary.
1501,https://api.github.com/repos/mozilla/OpenWPM/pulls/382,382,Disable profile saving,"Profile saving has long had intermittent issues. The update to Firefox 68 has fully broken profile saving. I've created [a project](https://github.com/mozilla/OpenWPM/projects/2) to track these issues, have added exceptions to OpenWPM for codepaths that rely on a browser profile (stateful crawling and profile dumping), and have disabled the profile tests.",englehardt,3280150,2019-07-01T20:38:13Z,MEMBER,True,61,20,9,A web privacy measurement framework,Python,8e427fb5d1ffd526b4d950e30fd6e3ec27af5e01,Disable profile saving (currently broken).
1502,https://api.github.com/repos/mozilla/OpenWPM/pulls/382,382,Disable profile saving,"Profile saving has long had intermittent issues. The update to Firefox 68 has fully broken profile saving. I've created [a project](https://github.com/mozilla/OpenWPM/projects/2) to track these issues, have added exceptions to OpenWPM for codepaths that rely on a browser profile (stateful crawling and profile dumping), and have disabled the profile tests.",englehardt,3280150,2019-07-01T20:38:13Z,MEMBER,True,61,20,9,A web privacy measurement framework,Python,040d401ef11b38ffc94c8e32d8648e0061a504b3,Update documentation and disable another test that relies on profile support
1503,https://api.github.com/repos/mozilla/OpenWPM/pulls/382,382,Disable profile saving,"Profile saving has long had intermittent issues. The update to Firefox 68 has fully broken profile saving. I've created [a project](https://github.com/mozilla/OpenWPM/projects/2) to track these issues, have added exceptions to OpenWPM for codepaths that rely on a browser profile (stateful crawling and profile dumping), and have disabled the profile tests.",englehardt,3280150,2019-07-01T20:38:13Z,MEMBER,True,61,20,9,A web privacy measurement framework,Python,451c3babf9659fcd5816967442d1653faddbc721,"Allow stateful crawling, but provide a warning about profile loss."
1504,https://api.github.com/repos/mozilla/OpenWPM/pulls/378,378,Restored travis for webext-instrumentation,Restored a version of the webext-instrumentation for travis (originally dropped in 49078b3b219da4b847e775f7ab095f437639e66e),motin,793037,2019-06-28T15:05:20Z,CONTRIBUTOR,True,89,24,4,A web privacy measurement framework,Python,130088ae75f9cf802b2879b1c928302b17106d05,Npm run fix
1505,https://api.github.com/repos/mozilla/OpenWPM/pulls/378,378,Restored travis for webext-instrumentation,Restored a version of the webext-instrumentation for travis (originally dropped in 49078b3b219da4b847e775f7ab095f437639e66e),motin,793037,2019-06-28T15:05:20Z,CONTRIBUTOR,True,89,24,4,A web privacy measurement framework,Python,43d1ab3daead3b6efb6aaa48514ae2412f700843,Linting
1506,https://api.github.com/repos/mozilla/OpenWPM/pulls/378,378,Restored travis for webext-instrumentation,Restored a version of the webext-instrumentation for travis (originally dropped in 49078b3b219da4b847e775f7ab095f437639e66e),motin,793037,2019-06-28T15:05:20Z,CONTRIBUTOR,True,89,24,4,A web privacy measurement framework,Python,554c6544484fc68ce78aa24c712874fd0138c32f,Configured travis for the webext-instrumentation (related: 49078b3b219da4b847e775f7ab095f437639e66e)
1507,https://api.github.com/repos/mozilla/OpenWPM/pulls/378,378,Restored travis for webext-instrumentation,Restored a version of the webext-instrumentation for travis (originally dropped in 49078b3b219da4b847e775f7ab095f437639e66e),motin,793037,2019-06-28T15:05:20Z,CONTRIBUTOR,True,89,24,4,A web privacy measurement framework,Python,1cf4c9d1776cdb49ad090561de5f63d39460cfb4,Add travis jobs to test the webext-instrumentation with different node versions
1508,https://api.github.com/repos/mozilla/OpenWPM/pulls/378,378,Restored travis for webext-instrumentation,Restored a version of the webext-instrumentation for travis (originally dropped in 49078b3b219da4b847e775f7ab095f437639e66e),motin,793037,2019-06-28T15:05:20Z,CONTRIBUTOR,True,89,24,4,A web privacy measurement framework,Python,4d7a73d592f73b026b7c69e74a6b63d81d57e4a5,Inactivated nyc report due to silent failures
1509,https://api.github.com/repos/mozilla/OpenWPM/pulls/377,377,Pass config['testing'] testing flag to content scripts,"Fixes #376

Related: https://github.com/mozilla/OpenWPM/pull/291#issue-273586535

Also paves way for https://github.com/mozilla/OpenWPM/issues/353 by providing a method of passing config options without editing the content script.

Note: This PR includes the commit from #375, so to keep clean PRs, that PR should be merged first, followed by this being rebased on the subsequent master.",motin,793037,2019-06-27T22:55:13Z,CONTRIBUTOR,True,14,4,3,A web privacy measurement framework,Python,7108aa2f09f0db4308df28cd60c74e1eab5c87e6,Pass config['testing'] testing flag to content scripts
1510,https://api.github.com/repos/mozilla/OpenWPM/pulls/377,377,Pass config['testing'] testing flag to content scripts,"Fixes #376

Related: https://github.com/mozilla/OpenWPM/pull/291#issue-273586535

Also paves way for https://github.com/mozilla/OpenWPM/issues/353 by providing a method of passing config options without editing the content script.

Note: This PR includes the commit from #375, so to keep clean PRs, that PR should be merged first, followed by this being rebased on the subsequent master.",motin,793037,2019-06-27T22:55:13Z,CONTRIBUTOR,True,14,4,3,A web privacy measurement framework,Python,a2dce7a5d30cec72455639f40e4b93dbe6bc9315,Don't use window for the openWpmTesting variable
1511,https://api.github.com/repos/mozilla/OpenWPM/pulls/375,375,Only register the JS instrument content script if JS instrument is enabled,Fixes #374,motin,793037,2019-06-27T21:52:16Z,CONTRIBUTOR,True,12,9,3,A web privacy measurement framework,Python,6095756087ac38fbedc741bce0268b4108894e37,Only register the JS instrument content script if JS instrument is enabled
1512,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,d1aa170a8e43f9fa01f4aaee7bd372828821b3d5,Package scoped under the openwpm npm org
1513,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,5147f12bf9da072ccbf6bca0d81fc60f36cf75e9,Package.json uses a valid SPDX license expression
1514,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,2b4e65100d34bdd3c797214cfc851865556c8723,Updated the repository reference for webext-instrumentation
1515,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,545320f803d91d6e051ea820f8473592cfdf55e0,"Add npm run commands for bumping major, minor and patch versions (using standard-version with changelog generation disabled)"
1516,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,deb5ea52330ed145b3dfe7fab4c3a515f64f37e1,Configured publish-please
1517,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,0679f5dfbf42e1ef6db2dae72ae30d27e39f1b5d,Npm audit fixes
1518,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,163238d529e6fff9e4cd818a9822642d01529d9e,Formatting
1519,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,aa608062bfb91b832c71b451b5628cef0054d9ba,Enabled git tag validation prior to npm publishing (using publish-please to 5.5.0 which includes support for git tag prefixes - https://github.com/inikulin/publish-please/pull/90)
1520,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,3680ac89e6764fd9487f1a5b5a3d889774c0d37b,Added docs for npm publishing of webext-instrumentation
1521,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,af928d10ad8b0908d825d3b7d90687a0f07b2bdd,Updated the tag prefix to reflect the npm package name and version combo
1522,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,c9f87297b37e11d673f7a8f9de6a3f63fcff8b61,Inactivated sensitive data validation prior to npm publish (due to SyntaxError: Unexpected token : in JSON at position 7)
1523,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,adbd471ddc36c8669d231c0eb11c7e6885741a6e,Reminder to push the release commit and tag
1524,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,a9daf609b0faf22232b2c5cb672a3bdbe5b360cd,Make the webext instrumentation version commit message include the reference to the webext instrumentation npm package name
1525,https://api.github.com/repos/mozilla/OpenWPM/pulls/373,373,Npm publishing routines for instrumentation prepared,"Fixes #337
Enables https://github.com/mozilla/OpenWPM/issues/329

This configures standard-version and publish-please according to https://github.com/mozilla/OpenWPM/issues/337, except for `""gitTag"": true` which is currently set to `""gitTag"": false` pending upstream merge/accept of https://github.com/inikulin/publish-please/pull/90 (which in turn allows us to use `""gitTag"": ""webext-instrument/v""` so that we can continue prefixing the instrumentation git tags as per our monorepo setup.)

Example output after instrumentation tests have run:
```
Running validations
-------------------------
✓ Checking for the vulnerable dependencies
✓ Checking for the uncommitted changes
✓ Checking for the untracked files
✓ Checking for the sensitive and non-essential data in the npm package
✓ Validating branch

-------------------
👍 👍 👍

Release info
-------------------------
  Version:       0.3.0
  Latest commit: 68f799a Tmp to test
  Publish tag:   latest
  Publisher:     motin
? Are you sure you want to publish this version to npm? y/N
```

Actual publishing can be done first after this has been merged, since publishing should always be done from the master branch, synced with a corresponding git tag etc.",motin,793037,2019-06-27T16:54:09Z,CONTRIBUTOR,True,1602,2390,6,A web privacy measurement framework,Python,cb164a30758a10a6813e6a29fc13ccc1c952d5f0,Using standard-version .versionrc.json instead of key in package.json
1526,https://api.github.com/repos/mozilla/OpenWPM/pulls/372,372,Start the JS instrumentation listener as early as possible,"...in order not to miss events that may arrive before the logging backend is configured (which is done asynchronously and thus page scripts may already be sending events before it has been set up).

May mitigate some timing issues somewhat.",motin,793037,2019-06-27T14:07:14Z,CONTRIBUTOR,False,9,1,1,A web privacy measurement framework,Python,e8a0419dc4cf9da04af2913a668f6eb8beabb43a,Start the JS instrumentation listener as early as possible in order not to miss events that may arrive before the logging backend is configured
1527,https://api.github.com/repos/mozilla/OpenWPM/pulls/371,371,Add data URLs test page,Created this for use in manual testing mode while developing the JESTr study add-on. Seems relevant to add to the general test page collection.,motin,793037,2019-06-27T14:00:21Z,CONTRIBUTOR,True,15,0,1,A web privacy measurement framework,Python,c20b0fd1a3721ab7fbf226a4d72cfe1b16e42f5f,Add data URLs test page
1528,https://api.github.com/repos/mozilla/OpenWPM/pulls/370,370,Add large payloads test page,Created this for use in manual testing mode while developing the JESTr study add-on. Seems relevant to add to the general test page collection since there are several pages out there that use canvas heavily and the platform should handle it.,motin,793037,2019-06-27T13:59:44Z,CONTRIBUTOR,True,42,0,1,A web privacy measurement framework,Python,93121bccd48cd15a836512e7942f36ebbcd1b317,Add large payloads test page
1529,https://api.github.com/repos/mozilla/OpenWPM/pulls/369,369,Print the result of the build extension script when it has finished,"Before looking into the script, I was unsure that the openwpi.xpi actually got replaced by the freshly built xpi (mentioned last in the current output: `Your web extension is ready: dist/openwpm-1.0.zip`). This clarifies that.",motin,793037,2019-06-27T13:57:56Z,CONTRIBUTOR,True,2,0,1,A web privacy measurement framework,Python,ec710d21eeb3e332a0d7206245dc39af1185f0bc,Print the result of the build extension script when it has finished
1530,https://api.github.com/repos/mozilla/OpenWPM/pulls/368,368,Enable navigation and js instruments for demo crawl,"Just to make sure that newcomers don't get the impression that OpenWPM only does HTTP and Cookies :)

Enabling JS instrument also works around https://github.com/mozilla/OpenWPM/issues/289",motin,793037,2019-06-27T13:57:02Z,CONTRIBUTOR,True,4,0,1,A web privacy measurement framework,Python,fe11c536200de062f24e1cf32cf58d8fdf7cf9dc,Enable navigation and js instruments for demo crawl
1531,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,186448978130dcdb9f28906c943652eb7777ba58,Demo local S3 setup using localstack
1532,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,1483f82351b9d9ae15927ca026684b58fcf7a621,Provide fake credentials when using local s3 so that ~/.aws does not need to be present
1533,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,2267813afdb5cb52509233059f23b122d8a4c5dd,Local s3 also applied to s3fs
1534,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,1a4d445847508054fcdbf018cda950bbec3e42f0,Minimal S3 aggregator test (just runs a s3 crawl and stores the the resulting contents without asserting its correctness)
1535,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,d28cda8c60ac93fc477ab9eb25badea4029eb53f,Update integration test for S3 aggregator + cleanup.
1536,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,868eb3d5561db9b8157b1b74e853b95ad19997a7,Remove unused download helper
1537,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,e060752f7063ac191a3fb76355bd015a291e12af,Merge remote-tracking branch 'origin/master' into motin-demo-local-s3
1538,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,d2790b355f2020a247ebbd2058f0c5f3d435c08e,Add localstack to dev requirements and CI
1539,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,087ae294ac265e73df213a29234c004cae468293,Update env test for requirements-dev.txt
1540,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,088525dafeea99eff44086067b2e4c9b271279f7,Fix travis tets
1541,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,6dc8210f546e440271ecd53f46858fa0b524c217,Second attempt to fix travis issues
1542,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,5b521e51387ff2569e04210c7fff2e4771425a6b,Third attempt to fix travis tests
1543,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,b672f2dfbe9b865d86b614d14dac823f8f6576b7,Only starting the mock s3 service before s3 aggregator test
1544,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,d3ba8f08fbf01b51673f42eb6efd8d5304fcabfb,Tmp travis s3 debug
1545,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,bfe93bde2c22f04339e9f3ce8f07c2a9c6aa3bc4,Attempt travis workaround for importing google_compute_engine in travis (required by localstack)
1546,https://api.github.com/repos/mozilla/OpenWPM/pulls/333,333,Add support for testing the S3Aggregator with localstack.,"This builds on top of the work done in #297, but cleans up the localstack code and isolates it to the test suite. The test file currently only contains a very basic correctness check.",englehardt,3280150,2019-06-25T23:26:12Z,MEMBER,True,128,5,6,A web privacy measurement framework,Python,ec595dd7537c0101028aa23b0a097c39ae3257fe,Remove temporary travis debug config
1547,https://api.github.com/repos/mozilla/OpenWPM/pulls/332,332,Mozilla dockerfile dev,"Add a development Dockerfile

The current Dockerfile is optimized to run OpenWPM, but it is less useful for development. This commit adds a Dockerfile-dev, which contains also the tools that are required to modify and test OpenWPM.

This PR makes the current Dockerfile also a bit lighter by removing everything that is not needed to just _run_ OpenWPM.",eriktews,1436802,2019-06-25T14:30:52Z,CONTRIBUTOR,False,71,1,4,A web privacy measurement framework,Python,3e8e4a768204938c5e4792756f7bb5902bfceb50,"Add a development Dockerfile

The current Dockerfile is optimized to run OpenWPM, but it is less useful for development. This commit adds a Dockerfile-dev, which contains also the tools that are required to modify and test OpenWPM."
1548,https://api.github.com/repos/mozilla/OpenWPM/pulls/332,332,Mozilla dockerfile dev,"Add a development Dockerfile

The current Dockerfile is optimized to run OpenWPM, but it is less useful for development. This commit adds a Dockerfile-dev, which contains also the tools that are required to modify and test OpenWPM.

This PR makes the current Dockerfile also a bit lighter by removing everything that is not needed to just _run_ OpenWPM.",eriktews,1436802,2019-06-25T14:30:52Z,CONTRIBUTOR,False,71,1,4,A web privacy measurement framework,Python,9c2a0deb75ad4801115ac81733bf75b1cd1488a9,Document _Dockerfile-dev_ in README.md
1549,https://api.github.com/repos/mozilla/OpenWPM/pulls/331,331,Add .dockerignore,"Somewhat synchronized with gitignore but dedicated to ignoring the largest files and directories that may be lying around in a developer's openwpm folder.

Before (on my machine):
Sending build context to Docker daemon  1.715GB

After:
Sending build context to Docker daemon  71.97MB",motin,793037,2019-06-25T11:23:10Z,CONTRIBUTOR,True,28,1,2,A web privacy measurement framework,Python,e75052a6d1221e60d75576384404e046ecf4e80e,"Add .dockerignore, somewhat synchronized with gitignore but dedicated to ignoring the largest files and directories that may by lying around in a developer's openwpm folder"
1550,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,b6430fb709c165d2bc6ccf0423d982b0f1812b8c,"Initial commit

Created with bitjson/typescript-starter@fd420b8f098c9b5d7a6784139ef401309486a752

Disable tslint-immutable, Include VS Code debugging config, Include CircleCI config, Include Travis CI config"
1551,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,9fdb23a2ca5fbe87baf4f2e3d38c501a805b2108,chore: Set initial version to 0.1.0
1552,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,6277db8ef72cc85d368ad8e74013f66479d2e612,chore: Add npm run commit. Add commitizen as dev dependency
1553,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,a4448bde36f89f49a0c6e3a611b905fecbc293e3,style: Modify prettier configuration
1554,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,03cff1bb0170562b79e8b0152ac6222c73ed28b1,chore: Remove example typings from boilerplate
1555,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,3ce6d147c642793d221bb09909ded717a13cc364,build: Add npm run prepare so that build artifacts gets included in the package
1556,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,80e3dec3dd1f3cf067ffe8de26c8756aa8a15f28,refactor: Renamed package to openwpm-webext-instrumentation
1557,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,743d765370069d573d56de839f22cdeff23aa504,Add typescript typings for Firefox web extensions apis
1558,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,a9d8fc0eb65ad6703b4466cf9385bb829e8e8f46,"feat: Import reusable instrumentation from the OpenWPM repository

(at the time of the merge of https://github.com/citp/OpenWPM/pull/221)"
1559,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,94d856bb49c92d0be1c13b18a2a874bdb7b2859f,refactor: Move from js to ts file extensions
1560,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,4bcc6f3fe7936c9fc87e278100af57d64444e265,docs: Update official repo url
1561,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,9aeafb59bef61ac9ea75289db7ee5cc2184824e4,refactor: Inject loggingDB into HttpPostParser at runtime
1562,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,311763267bd677827d0335d43f81e4b2dae39e55,refactor: Moved http-post-parser to lib folder
1563,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,d54902e9aea57aa23f99783c5efe3140ad3bfd03,refactor: Move all export declarations to a single file
1564,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,a7a5b2016fc8859acf4e65a700b0e1db55725439,refactor: Moved out page-scoped js-instrumentation to separate file
1565,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,01f702dd9498bdef341b16d5186777b0cc115acd,style: npm run fix
1566,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,9e07ec55b8d251b1e7dc5eb043878623b7b8eff6,style: Set severity of currently applicable tslint rules to warning instead of error
1567,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,bb9c3c655f5e307f3c4923bf43e1f9b440e99be1,style: Adhere to tslint rule triple-equals
1568,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,980fda724d5fffc636b7224c80d9acfd4a414122,feat: Typescript compiles
1569,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,8e44ba855024b6624129bfaa25307f2d78619f88,feat: Improve lint and test npm scripts
1570,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,bdc64156de317a4f6821ca2c0b5f03e81fb402a7,refactor: Simplify module exports
1571,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,e42c40be889a8ae1b19c2a82dbd4277ac1b95011,refactor: Simplify the public interface
1572,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,689f4a722380b7ae7cd9ac05e2f5b84281ce66d9,fix: Not catching errors in emitMsg sendMessage since this fudges Fx error reporting for things happening in the background event listener
1573,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,8429acd4bd660dd9b0e328cadcc9c1f62d53f2c6,feat: Make functional again when running in openwpm web extension
1574,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,12d4b58b7e48448ec59e1b06c20e5453dd430494,fix: Make testing param in injectJavascriptInstrumentPageScript optional
1575,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,745f6bf8831ed791397067a5a1be712415cf7d1e,fix: Restore js instrumentation (including inclusion of relevant methods previously found in loggingdb.js) and adhere to no-this-assignment rule once again
1576,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,91fa3ae2a4b0f409e5cf1cb9db8898b3353d9529,refactor: Rename loggingDB to dataReceiver
1577,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,8f1a3248a8b0fcdab848b96b20829ff6b3aa1365,fix: Export string-utils
1578,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,0815d9bde62f2a0b82c69fadf5be3ac496ff94bf,style: Add editorconfig
1579,https://api.github.com/repos/mozilla/OpenWPM/pulls/328,328,Merge openwpm-webext-instrumentation repo,For #300,motin,793037,2019-06-25T08:19:56Z,CONTRIBUTOR,True,13247,15,40,A web privacy measurement framework,Python,8a6c84ad288f3d246248d973c5eb3523d5b03631,refactor: Use functions from lib/string-utils in http and cookie instrumentation
1580,https://api.github.com/repos/mozilla/OpenWPM/pulls/327,327,Restored a lean version of install-dev.sh,Fixes #236 by restoring install-dev.sh and requirements-dev.txt (some of my wip PRs depend on these files to exist so it'd be great to have them in place for now),motin,793037,2019-06-25T07:40:23Z,CONTRIBUTOR,True,6,0,2,A web privacy measurement framework,Python,619a2e26c65ae476c7174f5eb03040ab75e8d76c,Restored a lean version of install-dev.sh
1581,https://api.github.com/repos/mozilla/OpenWPM/pulls/323,323,Make random ids JavaScript safe,"JavaScript might only support integers up to 53 bits. This commit limits the randomly generated visid_id to 53 bits and also changes the generation of the random ids from uuid.uuid4 to random.getrandbits.

Since the S3Aggregator is currently not covered by TravisCi, the code here is unfortunately untested.",eriktews,1436802,2019-06-18T07:19:29Z,CONTRIBUTOR,False,10,6,1,A web privacy measurement framework,Python,d4498fbd7545f052ef0d686aae793938ccee247e,"Make random ids JavaScript safe

JavaScript might only support integers up to 53 bits. This commit
limits the randomly generated visid_id to 53 bits and also changes
the generation of the random ids from uuid.uuid4 to random.getrandbits."
1582,https://api.github.com/repos/mozilla/OpenWPM/pulls/322,322,Disable file upload test,"Firefox is currently not able to return the FormData with the file contents, currently only the filenames are returned. This is due to a limitation in the current API implementation. Therefore, this commit disables the file upload test.",eriktews,1436802,2019-06-18T07:03:54Z,CONTRIBUTOR,True,11,0,1,A web privacy measurement framework,Python,b813fe7656fbb7b9ba8c92004412ba3c5f79729d,"Disable file upload test

Firefox is currently not able to return the FormData with the file
contents, currently only the filenames are returned. This is due to
a limitation in the current API implementation. Therefore, this commit
disables the file upload test."
1583,https://api.github.com/repos/mozilla/OpenWPM/pulls/320,320,Update npm packages,`js-yaml` has a security advisory for versions <3.13.1. This runs a full npm update on our dependencies.,englehardt,3280150,2019-06-12T15:37:10Z,MEMBER,True,1104,2497,2,A web privacy measurement framework,Python,7d5fe6d2b1f973b24212c4f6ec5aea960c6748f7,Update npm packages
1584,https://api.github.com/repos/mozilla/OpenWPM/pulls/319,319,Remove dump_profile_cookies command.,"This command is no longer necessary with the new instrumentation. It was
broken by the latest Firefox upgrade, so it no longer makes sense to
keep it around.",englehardt,3280150,2019-06-12T15:09:31Z,MEMBER,True,8,160,9,A web privacy measurement framework,Python,01f2fba875823abc7a58045cdac4d45622288734,"Remove dump_profile_cookies command.

This command is no longer necessary with the new instrumentation. It was
broken by the latest Firefox upgrade, so it no longer makes sense to
keep it around."
1585,https://api.github.com/repos/mozilla/OpenWPM/pulls/318,318,Fix test_js_profile_cookies,"Previously, test_js_profile_cookies used _dump_profile_cookies_ which dumps the Firefox internal SQLite database to a table. This doesn't work very well anymore in the current version of Firefox and OpenWPM. Instead, the new extension provides a _javascript_cookies_ table that is filled with the cookies when _cookie_instrument_ is set to true. This commit updates the test so that the new table is used now and checks whether a cookie set by JavaScript is correctly recorded there.",eriktews,1436802,2019-06-12T14:35:13Z,CONTRIBUTOR,True,19,10,1,A web privacy measurement framework,Python,f216981a93aa07632e68f1af16d60d5a5a2622dc,"Fix test_js_profile_cookies

Previously, test_js_profile_cookies used _dump_profile_cookies_ which dumps the Firefox internal SQLite database to a table. This doesn't work very well anymore in the current version of Firefox and OpenWPM. Instead, the new extension provides a _javascript_cookies_ table that is filled with the cookies when _cookie_instrument_ is set to true. This commit updates the test so that the new table is used now and checks whether a cookie set by JavaScript is correctly recorded there."
1586,https://api.github.com/repos/mozilla/OpenWPM/pulls/316,316,Mozilla rmjquery raw post,"This is an updated PR for https://github.com/mozilla/OpenWPM/pull/311

In a nutshell, the code in the previous PR was correct, but the post body was considered to be ""raw"" by Firefox, so it only works when https://github.com/mozilla/OpenWPM/pull/315 has been merged.

This PR includes https://github.com/mozilla/OpenWPM/pull/315, otherwise it would not work.",eriktews,1436802,2019-06-11T22:27:26Z,CONTRIBUTOR,True,15,12,2,A web privacy measurement framework,Python,722371f5e713d7e568286a9d58c490cbc9fd2439,Use XHR directly instead of jquery post for plaintext request bodies.
1587,https://api.github.com/repos/mozilla/OpenWPM/pulls/316,316,Mozilla rmjquery raw post,"This is an updated PR for https://github.com/mozilla/OpenWPM/pull/311

In a nutshell, the code in the previous PR was correct, but the post body was considered to be ""raw"" by Firefox, so it only works when https://github.com/mozilla/OpenWPM/pull/315 has been merged.

This PR includes https://github.com/mozilla/OpenWPM/pull/315, otherwise it would not work.",eriktews,1436802,2019-06-11T22:27:26Z,CONTRIBUTOR,True,15,12,2,A web privacy measurement framework,Python,e721709d8469aafc15a58701546382219f1eaf76,"Adopt tests for raw request bodies from jQuery

This patch is based on previous work from Nihanth Subramanya and Steven Englehardt. Instead of using jQuery to send post requests, the post requests are send directly using XMLHttpRequest."
1588,https://api.github.com/repos/mozilla/OpenWPM/pulls/315,315,Handle HTTP POST requests with raw form data,"A recent version of openwpm-webext-instrumentation also supports HTTP
POST request in which the POST body is only available as raw binary
data that is stored in the post_body_raw column.

This change updates the database structure with that column and adjusts
the tests so that those cases are correctly tested.

Before this can be merged, https://github.com/mozilla/openwpm-webext-instrumentation/pull/47 needs to be merged.",eriktews,1436802,2019-06-08T00:18:00Z,CONTRIBUTOR,True,17,8,3,A web privacy measurement framework,Python,ebc499da3357500cf4971f5d152d7c4daf7a40af,"Handle HTTP POST requests with raw form data

A recent version of openwpm-webext-instrumentation also supports HTTP
POST request in which the POST body is only available as raw binary
data that is stored in the post_body_raw column.

This change updates the database structure with that column and adjusts
the tests so that those cases are correctly tested."
1589,https://api.github.com/repos/mozilla/OpenWPM/pulls/314,314,Optimize the Dockerfile,This optimizes the Dockerfile in a way that a lot of caching for subsequent builds can be used. Also the installer is split into multiple smaller parts that can be mostly shared with the Dockerfile.,eriktews,1436802,2019-06-05T22:52:03Z,CONTRIBUTOR,True,174,168,9,A web privacy measurement framework,Python,a9148af7dc56700a6cf53f6bd01ce6b388707633,Split the installer into smaller scripts
1590,https://api.github.com/repos/mozilla/OpenWPM/pulls/314,314,Optimize the Dockerfile,This optimizes the Dockerfile in a way that a lot of caching for subsequent builds can be used. Also the installer is split into multiple smaller parts that can be mostly shared with the Dockerfile.,eriktews,1436802,2019-06-05T22:52:03Z,CONTRIBUTOR,True,174,168,9,A web privacy measurement framework,Python,78924a363037743cc715ec4689135eb1cba55446,"Update the Dockerfile so that caching works better

This also introduces a two stage build."
1591,https://api.github.com/repos/mozilla/OpenWPM/pulls/314,314,Optimize the Dockerfile,This optimizes the Dockerfile in a way that a lot of caching for subsequent builds can be used. Also the installer is split into multiple smaller parts that can be mostly shared with the Dockerfile.,eriktews,1436802,2019-06-05T22:52:03Z,CONTRIBUTOR,True,174,168,9,A web privacy measurement framework,Python,1c584626e69f0320a04815f3beaadb923882b693,Document the new Dockerfile and how to use it
1592,https://api.github.com/repos/mozilla/OpenWPM/pulls/314,314,Optimize the Dockerfile,This optimizes the Dockerfile in a way that a lot of caching for subsequent builds can be used. Also the installer is split into multiple smaller parts that can be mostly shared with the Dockerfile.,eriktews,1436802,2019-06-05T22:52:03Z,CONTRIBUTOR,True,174,168,9,A web privacy measurement framework,Python,78c9e00f91f9a15625b7aeb1c4251d7438b2e33f,"Remove artifacts from the previous version

The previous version used install-dev.sh and requirements-dev.txt as part of the build process of the extension. This commit removes them since they are not needed anymore for the new extension. Also Dockerfile-dev is not required anymore."
1593,https://api.github.com/repos/mozilla/OpenWPM/pulls/311,311,Use XHR directly instead of jquery post for plaintext request bodies.,Untested. This should fix the issue Erik found where the POST tests are detecting unexpectedly mutated data. See https://github.com/mozilla/OpenWPM/pull/310#pullrequestreview-242449003,nhnt11,485488,2019-05-28T05:34:11Z,MEMBER,False,10,8,1,A web privacy measurement framework,Python,41c2a3e4aaf8e2d810b0e2f260165d3ac8d7591f,Use XHR directly instead of jquery post for plaintext request bodies.
1594,https://api.github.com/repos/mozilla/OpenWPM/pulls/311,311,Use XHR directly instead of jquery post for plaintext request bodies.,Untested. This should fix the issue Erik found where the POST tests are detecting unexpectedly mutated data. See https://github.com/mozilla/OpenWPM/pull/310#pullrequestreview-242449003,nhnt11,485488,2019-05-28T05:34:11Z,MEMBER,False,10,8,1,A web privacy measurement framework,Python,7dca4b8be42e937b7c0aa9d36c4be0ef3f4248b0,Bugfix in XMLHttpRequest call.
1595,https://api.github.com/repos/mozilla/OpenWPM/pulls/310,310,Fix two HTTP tests,The new version of Firefox returns the HTTP POST body as key-value pairs and does not provide raw access to the body. This patch adjusts the tests to expect this behaviour.,eriktews,1436802,2019-05-21T23:42:25Z,CONTRIBUTOR,False,6,2,1,A web privacy measurement framework,Python,d438affb888578b3b88d0420abe1055fbcc16534,"Fix two HTTP tests

The new version of Firefox returns the HTTP POST body as key-value pairs and does not provide raw access to the body. This patch adjusts the tests to expect this behaviour."
1596,https://api.github.com/repos/mozilla/OpenWPM/pulls/310,310,Fix two HTTP tests,The new version of Firefox returns the HTTP POST body as key-value pairs and does not provide raw access to the body. This patch adjusts the tests to expect this behaviour.,eriktews,1436802,2019-05-21T23:42:25Z,CONTRIBUTOR,False,6,2,1,A web privacy measurement framework,Python,9c4dc0474afc87b33ed909daa55477234add1e21,Explain why this specific value is expected by the test
1597,https://api.github.com/repos/mozilla/OpenWPM/pulls/309,309,Use base64 encoding for the response body,"The response body might contain binary content that cannot be correctly represented by a string. This patch assumes that the openwpm-webext-instrumentation returns the response body as an Uint8Array instead of a string. It is then encoded using base64 to make it string-safe and then send to the DataAggregator of OpenWPM to be saved in a database there.

This patch needs a change in openwpm-webext-instrumentation which is currently not available in the official repository. As long as mozilla/openwpm-webext-instrumentation#45 has not been merged, the patch will not work correctly.",eriktews,1436802,2019-05-21T22:24:33Z,CONTRIBUTOR,True,25,5,4,A web privacy measurement framework,Python,c4083083fab888498f57a779c48991616142e88b,"Use base64 encoding for the response body

The response body might contain binary content that cannot be correctly represented by a string. This patch assumes that the openwpm-webext-instrumentation returns the response body as an Uint8Array instead of a string. It is then encoded using base64 to make it string-safe and then send to the DataAggregator of OpenWPM to be saved in a database there.

This patch needs a change in openwpm-webext-instrumentation which is currently not available in the official repository. As long as mozilla/openwpm-webext-instrumentation#45 has not been merged, the patch will not work correctly."
1598,https://api.github.com/repos/mozilla/OpenWPM/pulls/309,309,Use base64 encoding for the response body,"The response body might contain binary content that cannot be correctly represented by a string. This patch assumes that the openwpm-webext-instrumentation returns the response body as an Uint8Array instead of a string. It is then encoded using base64 to make it string-safe and then send to the DataAggregator of OpenWPM to be saved in a database there.

This patch needs a change in openwpm-webext-instrumentation which is currently not available in the official repository. As long as mozilla/openwpm-webext-instrumentation#45 has not been merged, the patch will not work correctly.",eriktews,1436802,2019-05-21T22:24:33Z,CONTRIBUTOR,True,25,5,4,A web privacy measurement framework,Python,29b127c97e261e4988babaf553c54abc50ea9bf0,"Test whether the contentHash was saved correctly

This patch re-enables a test that checks whether the contentHash was saved in the http_responses table."
1599,https://api.github.com/repos/mozilla/OpenWPM/pulls/309,309,Use base64 encoding for the response body,"The response body might contain binary content that cannot be correctly represented by a string. This patch assumes that the openwpm-webext-instrumentation returns the response body as an Uint8Array instead of a string. It is then encoded using base64 to make it string-safe and then send to the DataAggregator of OpenWPM to be saved in a database there.

This patch needs a change in openwpm-webext-instrumentation which is currently not available in the official repository. As long as mozilla/openwpm-webext-instrumentation#45 has not been merged, the patch will not work correctly.",eriktews,1436802,2019-05-21T22:24:33Z,CONTRIBUTOR,True,25,5,4,A web privacy measurement framework,Python,314627c80ef1297e87e70c6bdd65f1afc1c6b7e6,"Use base64 decoding in the S3Aggregator

Since the content returned by the extension is base64 encoded now, the S3Aggregator needs to decode it before it is written to disk.

https://github.com/mozilla/OpenWPM/pull/309#issuecomment-495258457"
1600,https://api.github.com/repos/mozilla/OpenWPM/pulls/305,305,Run autopep8 to fix errors not flagged by flake8,"Running autopep8 on a clean branch which has no other pep8 errors. This should allow for cleaner diffs if someone decides to use autopep8 for a future PR.

Also note that I updated the isort config with some additional context.",englehardt,3280150,2019-05-16T02:53:34Z,MEMBER,True,45,27,11,A web privacy measurement framework,Python,774f665f8fc205934161c1ff5aaf309152e058b3,Run autopep8 to fix errors not flagged by flake8
1601,https://api.github.com/repos/mozilla/OpenWPM/pulls/303,303,Fix PEP8 Errors on python2 caused by ConnectionAbortedError,"This exception is not defined in 2.7. From my testing, there doesn't seem to be an alternate exception thrown on MacOS so the best option seems to be to define a dummy exception.",englehardt,3280150,2019-05-16T01:37:56Z,MEMBER,True,5,0,1,A web privacy measurement framework,Python,5d4b0876ff9f689b8e089e576ef8c99d3a324e6c,Fix PEP8 Errors on python2
1602,https://api.github.com/repos/mozilla/OpenWPM/pulls/303,303,Fix PEP8 Errors on python2 caused by ConnectionAbortedError,"This exception is not defined in 2.7. From my testing, there doesn't seem to be an alternate exception thrown on MacOS so the best option seems to be to define a dummy exception.",englehardt,3280150,2019-05-16T01:37:56Z,MEMBER,True,5,0,1,A web privacy measurement framework,Python,7cda8bdaf97b34d28b78d6215e192d93aa6871ce,Catch socket.error in python 2
1603,https://api.github.com/repos/mozilla/OpenWPM/pulls/303,303,Fix PEP8 Errors on python2 caused by ConnectionAbortedError,"This exception is not defined in 2.7. From my testing, there doesn't seem to be an alternate exception thrown on MacOS so the best option seems to be to define a dummy exception.",englehardt,3280150,2019-05-16T01:37:56Z,MEMBER,True,5,0,1,A web privacy measurement framework,Python,0759558b9a6e203ec3e764f3d86733db01042e1c,"Revert ""Catch socket.error in python 2""

This reverts commit 7cda8bdaf97b34d28b78d6215e192d93aa6871ce."
1604,https://api.github.com/repos/mozilla/OpenWPM/pulls/302,302,Fix PEP8 error related to ConnectionAbortedError in python 2.7,"This exception is not defined in 2.7. From my testing, there doesn't seem to be an alternate exception thrown on MacOS so the best option seems to be to define a dummy exception.",englehardt,3280150,2019-05-16T01:35:42Z,MEMBER,False,91,67,2,A web privacy measurement framework,Python,e955ef70d38b69e560e6e350474ee1aca190173f,Fix PEP8 errors for python 2.7
1605,https://api.github.com/repos/mozilla/OpenWPM/pulls/301,301,Fix all flake8 errors,"This fixes all flake8 errors in the current master branch, so the build on travis-ci should be back to normal.",eriktews,1436802,2019-05-15T14:59:29Z,CONTRIBUTOR,True,8,5,3,A web privacy measurement framework,Python,3ac1b8ed550d50eed70e76ef75851b6a59c82b79,Fix all flake8 errors
1606,https://api.github.com/repos/mozilla/OpenWPM/pulls/299,299,Fix the Dockerfile,"For some reasons, the build-extension.sh script does not work as root. This can be fixed by creating an openwpm user with sudo permissions and run the install.sh script as openwpm.

Currently, the openwpm user remains in the image, but the Dockerfile could also be changed to remove the user after the build again.

Once this is merged, I would also recommend to merge https://github.com/mozilla/OpenWPM/pull/270 since that adds the Dockerfile to the travis-ci build.",eriktews,1436802,2019-05-12T11:28:56Z,CONTRIBUTOR,True,4,1,1,A web privacy measurement framework,Python,861fde772cf4f4a5c1dd2e0ecf45b87d8ab15da5,"Fix the Dockerfile

For some reasons, the build-extension.sh script does not work as root. This can be fixed by creating an openwpm user with sudo permissions and run the install.sh script as openwpm.

Currently, the openwpm user remains in the image, but the Dockerfile could also be changed to remove the user after the build again."
1607,https://api.github.com/repos/mozilla/OpenWPM/pulls/299,299,Fix the Dockerfile,"For some reasons, the build-extension.sh script does not work as root. This can be fixed by creating an openwpm user with sudo permissions and run the install.sh script as openwpm.

Currently, the openwpm user remains in the image, but the Dockerfile could also be changed to remove the user after the build again.

Once this is merged, I would also recommend to merge https://github.com/mozilla/OpenWPM/pull/270 since that adds the Dockerfile to the travis-ci build.",eriktews,1436802,2019-05-12T11:28:56Z,CONTRIBUTOR,True,4,1,1,A web privacy measurement framework,Python,1be52e2ada33de14fdf6074f808969180fcae13a,Update comment in Dockerfile
1608,https://api.github.com/repos/mozilla/OpenWPM/pulls/298,298,Fix for issue 286 (S3Aggregation/parquet),"With these changes, S3Aggregation/parquet works again.
Fixes #286 ",motin,793037,2019-05-10T23:44:29Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,b25de2c7666d02a6436c0d1f50f9c4c66dec03d4,Cast visit_id as int before sending to the data aggregator
1609,https://api.github.com/repos/mozilla/OpenWPM/pulls/298,298,Fix for issue 286 (S3Aggregation/parquet),"With these changes, S3Aggregation/parquet works again.
Fixes #286 ",motin,793037,2019-05-10T23:44:29Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,ddb998bd356823d2d4a0b4d2e8c6c45394828830,Fix small typo in comment text
1610,https://api.github.com/repos/mozilla/OpenWPM/pulls/298,298,Fix for issue 286 (S3Aggregation/parquet),"With these changes, S3Aggregation/parquet works again.
Fixes #286 ",motin,793037,2019-05-10T23:44:29Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,51d1d4131eec34a957906ab2f683c34dc85ad559,Fix typo in parquet schema
1611,https://api.github.com/repos/mozilla/OpenWPM/pulls/298,298,Fix for issue 286 (S3Aggregation/parquet),"With these changes, S3Aggregation/parquet works again.
Fixes #286 ",motin,793037,2019-05-10T23:44:29Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,8a29861926061dede851ed2c62dc5629a435135b,Casting the crawl_history arguments attribute to string in task manager since it is required by the parquet schema
1612,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,619a2e26c65ae476c7174f5eb03040ab75e8d76c,Restored a lean version of install-dev.sh
1613,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,23b1de28a0d90124adb2f50d4aca8ff1f6f70f72,Demo local S3 setup using localstack
1614,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,9ac0181c41dfbf073b37beb60387ace18c7b1342,Provide fake credentials when using local s3 so that ~/.aws does not need to be present
1615,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,9daff8ca4c813fa3f3d849910f10cc06c6062826,Local s3 also applied to s3fs
1616,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,6b4786be3c8f102277c40da9c2ab3278e07250d6,Minimal S3 aggregator test (just runs a s3 crawl and stores the the resulting contents without asserting its correctness)
1617,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,ac8b404c86684f5e607cffc423085cce9e45cd3b,Removed profile_archive_dir option from test_s3_crawl
1618,https://api.github.com/repos/mozilla/OpenWPM/pulls/297,297,Demo local S3 setup using localstack,Found this useful to try out the S3Aggregator locally without setting up S3 credentials etc. May also be useful in testing (https://github.com/mozilla/OpenWPM/issues/294),motin,793037,2019-05-09T17:58:09Z,CONTRIBUTOR,False,207,1,7,A web privacy measurement framework,Python,c210885356c12231cf9e23011d6da5d169996326,Moved local s3 utility code to automation.utilities
1619,https://api.github.com/repos/mozilla/OpenWPM/pulls/296,296,Some Mac-related improvements,"Allows demo crawls and manual tests to be run on a Mac natively.

Fixes https://github.com/mozilla/OpenWPM/issues/284
Works around https://github.com/mozilla/OpenWPM/issues/278

",motin,793037,2019-05-09T09:47:20Z,CONTRIBUTOR,True,25,9,4,A web privacy measurement framework,Python,29d02ce72deb50407fc62c018bc7d1a73688b45c,Do not fail hard on not being able to close a socket (works around potential socket issue on Mac)
1620,https://api.github.com/repos/mozilla/OpenWPM/pulls/296,296,Some Mac-related improvements,"Allows demo crawls and manual tests to be run on a Mac natively.

Fixes https://github.com/mozilla/OpenWPM/issues/284
Works around https://github.com/mozilla/OpenWPM/issues/278

",motin,793037,2019-05-09T09:47:20Z,CONTRIBUTOR,True,25,9,4,A web privacy measurement framework,Python,dd8f76d78dcced0e64e718794fa86c2101adf629,Set FIREFOX_BINARY on Mac to default to the one that install-mac-dev.sh provisions
1621,https://api.github.com/repos/mozilla/OpenWPM/pulls/296,296,Some Mac-related improvements,"Allows demo crawls and manual tests to be run on a Mac natively.

Fixes https://github.com/mozilla/OpenWPM/issues/284
Works around https://github.com/mozilla/OpenWPM/issues/278

",motin,793037,2019-05-09T09:47:20Z,CONTRIBUTOR,True,25,9,4,A web privacy measurement framework,Python,5a0f63b89a865dd3e37e0cda7f2fb8a0c5c8f5a4,Restore manual test runs on Mac
1622,https://api.github.com/repos/mozilla/OpenWPM/pulls/296,296,Some Mac-related improvements,"Allows demo crawls and manual tests to be run on a Mac natively.

Fixes https://github.com/mozilla/OpenWPM/issues/284
Works around https://github.com/mozilla/OpenWPM/issues/278

",motin,793037,2019-05-09T09:47:20Z,CONTRIBUTOR,True,25,9,4,A web privacy measurement framework,Python,f3e7630622c07c3a855954bdd80c0906c8e78853,Add pointer to bug #278
1623,https://api.github.com/repos/mozilla/OpenWPM/pulls/296,296,Some Mac-related improvements,"Allows demo crawls and manual tests to be run on a Mac natively.

Fixes https://github.com/mozilla/OpenWPM/issues/284
Works around https://github.com/mozilla/OpenWPM/issues/278

",motin,793037,2019-05-09T09:47:20Z,CONTRIBUTOR,True,25,9,4,A web privacy measurement framework,Python,a0816ed9c24a307f0e17262d1f8356274f9bc90e,Don't upgrade node in install-mac-dev.sh if already exists
1624,https://api.github.com/repos/mozilla/OpenWPM/pulls/295,295,Update instrumentation development pointers in README.md,,nhnt11,485488,2019-05-08T23:44:10Z,MEMBER,True,4,6,1,A web privacy measurement framework,Python,c4ab47b49d6bcedaefb4e3274fb6f05c2cc2d556,Update instrumentation development pointers in README.md
1625,https://api.github.com/repos/mozilla/OpenWPM/pulls/295,295,Update instrumentation development pointers in README.md,,nhnt11,485488,2019-05-08T23:44:10Z,MEMBER,True,4,6,1,A web privacy measurement framework,Python,848b2666f2c2659671a76a0a06b362b0052253f3,Add link to package.json in README
1626,https://api.github.com/repos/mozilla/OpenWPM/pulls/292,292,Fix isort issues and update travis tests,We've merged a bunch of PRs that have isort errors. This PR fixes those and updates the travis tests to use a newer version of Ubuntu + add python 3.7.,englehardt,3280150,2019-04-26T17:22:07Z,MEMBER,True,16,16,13,A web privacy measurement framework,Python,78e6b3fb04d176fbbe321ec1fb806263c3f6cf16,Fix isort failures
1627,https://api.github.com/repos/mozilla/OpenWPM/pulls/292,292,Fix isort issues and update travis tests,We've merged a bunch of PRs that have isort errors. This PR fixes those and updates the travis tests to use a newer version of Ubuntu + add python 3.7.,englehardt,3280150,2019-04-26T17:22:07Z,MEMBER,True,16,16,13,A web privacy measurement framework,Python,6b043060f35b0257dbd00cbe9e0ffaa9dff1c715,Bump travis CI tests to newest version
1628,https://api.github.com/repos/mozilla/OpenWPM/pulls/292,292,Fix isort issues and update travis tests,We've merged a bunch of PRs that have isort errors. This PR fixes those and updates the travis tests to use a newer version of Ubuntu + add python 3.7.,englehardt,3280150,2019-04-26T17:22:07Z,MEMBER,True,16,16,13,A web privacy measurement framework,Python,72c60a2f8deba0293bc627093841bb9c404dfd2b,Merge branch 'master' of github.com:mozilla/OpenWPM into isort-fixes
1629,https://api.github.com/repos/mozilla/OpenWPM/pulls/292,292,Fix isort issues and update travis tests,We've merged a bunch of PRs that have isort errors. This PR fixes those and updates the travis tests to use a newer version of Ubuntu + add python 3.7.,englehardt,3280150,2019-04-26T17:22:07Z,MEMBER,True,16,16,13,A web privacy measurement framework,Python,1f4f22238bad7bc285b593a42332bca76155497c,Fix isort relative import issues
1630,https://api.github.com/repos/mozilla/OpenWPM/pulls/291,291,Fix JS instrument test,"The fix is in 2 parts:
1. The function argument lists are now stored as JSON arrays and we need to modify our expected values accordingly.
2. window.instrumentObject is not exposed unless we pass testing=true to the content script. We need to find a way to reliably pass this based on config['testing']",nhnt11,485488,2019-04-25T15:57:14Z,MEMBER,True,9,4815,5,A web privacy measurement framework,Python,58a7d60d9815eb3c55d8f259d630ff5110f976be,Update expected function arguments arrays to be JSON strings in test_js_instrument.py
1631,https://api.github.com/repos/mozilla/OpenWPM/pulls/291,291,Fix JS instrument test,"The fix is in 2 parts:
1. The function argument lists are now stored as JSON arrays and we need to modify our expected values accordingly.
2. window.instrumentObject is not exposed unless we pass testing=true to the content script. We need to find a way to reliably pass this based on config['testing']",nhnt11,485488,2019-04-25T15:57:14Z,MEMBER,True,9,4815,5,A web privacy measurement framework,Python,3363cc4a6a65abc372b96d1137f1ace6879b8475,Always enable testing-mode for JS instrumentation page script
1632,https://api.github.com/repos/mozilla/OpenWPM/pulls/291,291,Fix JS instrument test,"The fix is in 2 parts:
1. The function argument lists are now stored as JSON arrays and we need to modify our expected values accordingly.
2. window.instrumentObject is not exposed unless we pass testing=true to the content script. We need to find a way to reliably pass this based on config['testing']",nhnt11,485488,2019-04-25T15:57:14Z,MEMBER,True,9,4815,5,A web privacy measurement framework,Python,b73fe0cc3ce684d80388deaa934c711185c44171,Stop tracking built content.js and feature.js in the extension
1633,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,59b9b114c70ed71595270f1a3a4f6a663d05982c,Updated install-mac-dev.sh to install on recent versions of OSX and XCode + updated the Mac section in the readme
1634,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,22deff38eb85d8bb369b0c744bf61a25f7a20710,Restored force-rebuild of plyvel on Mac
1635,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,01156f5f58b96bee2f5f6d63562fa20a601fdbab,"Fixed Mac docs: not using Nightly, but the latest Unbranded Firefox Release"
1636,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,ebfa7439499ae5a21514a3a82db79a84fa224a46,Not hard-coding Python 3.6
1637,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,0f445d5718194d28f0fad7d76f8955bb87fc2b0d,Linked more docs in the Mac section of the readme
1638,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,6ed446c18e349ba46c382024eb08b64252017fbb,"Correct python version in README

We run `python3 -m venv venv`, which should use whatever point release of python 3 is the system default (not necessarily 3.6)"
1639,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,b3fdae4ca6106543fcb8f44643c8abb5546be13d,Move detailed instructions to wiki
1640,https://api.github.com/repos/mozilla/OpenWPM/pulls/283,283,Updated install-mac-dev.sh to install on recent versions of OSX and XCode,"Also updated the Mac section in the readme.
Note: The python packages are now installed in a local virtualenv in order to increase reproducability of Mac OpenWPM environments.",motin,793037,2019-04-18T13:20:19Z,CONTRIBUTOR,True,40,14,2,A web privacy measurement framework,Python,7252768c8a31c6235988e2923846e7394076e9a6,Add additional detail on XQuartz
1641,https://api.github.com/repos/mozilla/OpenWPM/pulls/275,275,Add Mozilla Code of Conduct,"Fixes #274


As of January 1 2019, Mozilla requires that all GitHub projects include this [CODE_OF_CONDUCT.md](https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md) file in the project root. The file has two parts:

1. Required Text - All text under the headings *Community Participation Guidelines and How to Report*, are required, and should not be altered.
2. Optional Text - The Project Specific Etiquette heading provides a space to speak more specifically about ways people can work effectively and inclusively together. Some examples of those can be found on the [Firefox Debugger](https://github.com/devtools-html/debugger.html/blob/master/CODE_OF_CONDUCT.md) project, and [Common Voice](https://github.com/mozilla/voice-web/blob/master/CODE_OF_CONDUCT.md). (The optional part is commented out in the [raw template file](https://raw.githubusercontent.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md), and will not be visible until you modify and uncomment that part.)

If you have any questions about this file, or Code of Conduct policies and procedures, please see [Mozilla-GitHub-Standards](https://wiki.mozilla.org/GitHub/Repository_Requirements) or email Mozilla-GitHub-Standards+CoC@mozilla.com.

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-29T04:58:48Z,CONTRIBUTOR,True,15,0,1,A web privacy measurement framework,Python,38560403f5029ada92bd332e97c272cd62b3aaad,"Add Mozilla Code of Conduct file

Fixes #274.

_(Message COC002)_"
1642,https://api.github.com/repos/mozilla/OpenWPM/pulls/271,271,Fix one more problem with checking json results,This fixes one more problem with checking json results,eriktews,1436802,2019-02-28T12:49:47Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,aa22066576ce670e4a20b6af5ebf5ac8ba01ed93,Fix one more problem with checking json results
1643,https://api.github.com/repos/mozilla/OpenWPM/pulls/270,270,Also try to test the Dockerfile,Also try to test the Dockerfile in travis-ci,eriktews,1436802,2019-02-27T12:52:29Z,CONTRIBUTOR,True,14,0,1,A web privacy measurement framework,Python,acc1d0222ffa3bf70331b3f9322d8be89854e3cc,Also test the Dockerfile in Travis-CI
1644,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,bf609e1baebd9fdd8207725a529e7e9c707672da,Fix all pep8 errors in the branch
1645,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,0257e8621400412e5e8ac8fa063ce3fdfe5f05bf,Fix over identation
1646,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,dd743e9e1d8701234f9af1530695ead95e52db49,Ignore the firefox-bin folder for flake checks
1647,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,1dc29bf55e4d70e77cb617b269b0d61683916116,Fix test cases
1648,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,2ea48741f865c909965825eacc0ed2e5a81b5147,Try to fix more tests
1649,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,37b1b838e87e75f7df56f3f6407601c21be7bcb3,Remove unneeded HTTP request
1650,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,0f3cf92c1a390373830e945e6f08bca1df65793a,Fix more of the post/form test cases
1651,https://api.github.com/repos/mozilla/OpenWPM/pulls/269,269,Fix all pep8 errors in the branch,This fixes all errors reported by flake so that the build pipeline might work again,eriktews,1436802,2019-02-26T10:46:14Z,CONTRIBUTOR,True,180,115,6,A web privacy measurement framework,Python,e3034830383dd747eedf50e64a0bc9ab6e147658,Fix a problem with post requests being converted to JSON
1652,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,c9a5a2a40c95d8819159bfb693366e1905130ba7,Use latest selenium directly
1653,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,a2243e43c2c5c9851dfd4b1f21a01f4274446679,"Use Firefox 60, geckodriver 0.23"
1654,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,57c4679a03c19a4df1609e23b84e5d2e6aad6e4a,Replace firefox extension with WebExtension version from Github
1655,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,c40298628889a654e95d9c91212926a7b7b11aef,Add automation/Extension/firefox to .gitignore
1656,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,6c6e75349baf2af33f2e10290edabb0e166bab5c,"Install node and npm from install.js, also make it build the extension"
1657,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,4dc54507c13c60337f73a36c4e4efa317b544ade,"Remove npm dependency, unneeded"
1658,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,bdb930f6f93664dca1a70e743b3e326618addbbd,"Enable e10s, use profile dir from driver capabilities"
1659,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,8211bb777bfac7b42c42d0197961cf0f9559afd9,Update sql schema
1660,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,5f25cbbd7fa30d4cf9817c6669389445c1f3dcd5,Update parquet schema
1661,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,5a74f2273f1587717c1e78da324f7ecbf46fea9e,Set default values for missing fields to avoid type conversion issues with pandas
1662,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,b7c58358519d2ac1f42ea85c58470a7b2a8a07ba,"Simplify Dockerfile, add ~/.local/bin to PATH after installing pip"
1663,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,2c60ebc4f4b466828ecae64c9ea5755746554ec8,Update Dockerfile; add git and npm as dependencies in install.sh
1664,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,831a7b611e2449b43c00a340ecc16c06c2423b4b,Install node/npm properly
1665,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,4b487a25cd85f337b694c8d5f63e5b0766892d6e,Install nodejs silently
1666,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,b73265f618a23e8ba4d703f221de43d53c9c624b,Allow crawl to continue after InterfaceErrors
1667,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,c01971088a21a47348ce8b861e2ee252ef9e60f6,Fix encoding errors in S3Aggregator
1668,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,57f635c7c74c26adb8b046d545769d8e638a1b7b,Fixing bug in missing data routine
1669,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,2c6f748a0800d2a0dd52f441cf8f267b55bd4e92,"Update crawler and test scripts to support unsigned extensions

Note that the extension is still broken on release versions of Firefox,
which require signing to use experiment APIs. However, these changes
allow unsigned extensions to run on Nightly/Beta versions of Firefox"
1670,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,72092d1f209094a4030d2a732a3dd9cbc188d76e,Remove jpm dependency check in test_env.py
1671,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,c2465e726a596bdc9efcfa82da35cfa2a591978b,Fix test_extension.py
1672,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,18471b4a2c667b505d4cb5755a01374308817414,"Update test_page_visit to work with webext instrumentation

- channel_id isn't available anymore and is replaced with request_id
- is_tp_content and is_tp_content are not set yet, they are always None
- different information is supplied through webext APIs - for example, 'System Principal' and browser.xul are never exposed as triggering or loading origins.
- referrer and new_request_id aren't supported yet."
1673,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,a4f002c06069463d065c202364c3cebd3a4caefc,"Update test_cache_hits_recorded for new webext instrumentation

- Similar to the changes made to test_page_visit
- Some hacks documented inline"
1674,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,8f7465bdff66d1a61a539967c434d2a73f63abd2,"Disable tests using req_call_stack; update test_javascript_saving

- sha256 instead of md5, and always compare lowercase hashes to avoid weirdness with dependencies"
1675,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,1ab398b37bf1535eaf382a6970e78839bc7e6347,"Update test_content_saving

In LocalAggregator's process_content(), only encode content
if it's a unicode string. This allows us to compare content
and hashes properly in the test.

Also convert dict to json to fix InterfaceErrors"
1676,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,2c41e4b5924cfbc80a23af32dd1564b4859f2faa,Use unbranded build of latest firefox release instead of esr60
1677,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,c9d00c6dfe0b74014af50b5ef3fa7b0f12c07dda,Make a copy of cookies.sqlite before connecting to avoid db lock errors
1678,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,2ea54426b3d35bc7e456e73808471bad9803f36a,Update sdp offer expectations in test_extension.py for firefox 65
1679,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,bf609e1baebd9fdd8207725a529e7e9c707672da,Fix all pep8 errors in the branch
1680,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,0257e8621400412e5e8ac8fa063ce3fdfe5f05bf,Fix over identation
1681,https://api.github.com/repos/mozilla/OpenWPM/pulls/267,267,Firefox 60 + WebExtension upgrade,"- Use latest Selenium and Firefox 60 (soon possibly an Unbranded build of latest Release)
- Bake the new WebExtension instrumentation add-on into the repo
- Update tests",nhnt11,485488,2019-02-21T20:39:35Z,MEMBER,True,18077,2645,57,A web privacy measurement framework,Python,dd743e9e1d8701234f9af1530695ead95e52db49,Ignore the firefox-bin folder for flake checks
1682,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,4fb09d7fa068089fd4346b24027198fe1450127b,"Fix a few syntax bugs

A few strings have been line wrapped, which broke the string formatting using the percent sign. In general, ""a"" + ""%s"" % ""b"" works in python, but ""%s"" + ""b"" % ""a"" will not work since the % binds first to ""b"", before the + can be applied. This commit fixes this by wrapping all line wrapped strings with brackets."
1683,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,74eb9012774c571175a78b38084c0b2b79bdb1cd,"Set daemon to false to fix the socketio server

Sets the daemon flag of the BrowserManager process to false. Daemon processes in python cannot have childs and the BrowserManager tries to fork a new child process when starting the socketio server."
1684,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,fa2e09bab43e5ff5977ee09e6f0a32f79d6ee583,"Upgrade selenium to a newer version

The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine."
1685,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,5d598605fab31cc43e3afc4c48d9a3fa9e92494f,Fix indentation
1686,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,cb7064f02ce5271bf97bfe60266d8dfbf7a5d5fa,Fix invalid syntax
1687,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,4dc060790ec3d60cab3d8970d904950de9f9d247,Convert print statements to proper python3 style
1688,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,921af008f11ea42fe4f34b8915ac61863d99f174,Looks like install-dev.sh is needed to get rollup
1689,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,ee70c6002ff46eec4f5997e82a91679333ec9501,Use both install scripts
1690,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,11db63c11baf37e922f770b9492ed714485a7fda,Make install-dev.sh aware of virtualenv
1691,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,8f57047a495e3ef7c0cfe78f185c98ce5dfe2b99,Merge branch 'develop-line-wrap-fix' into develop-all-fixes
1692,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,1a3e93ca039a1fec193c9670ade69353c968229d,Merge branch 'develop-socketio-fix' into develop-all-fixes
1693,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,628409b2b30dd5e5bd741509120c714696a08868,Fix syntax for pep8
1694,https://api.github.com/repos/mozilla/OpenWPM/pulls/265,265,Develop all fixes,That's a combined pull request for #262 #263 and #264 and I hope it runs at least partially fine through travis CI.,eriktews,1436802,2019-02-20T17:53:05Z,CONTRIBUTOR,False,57,57,7,A web privacy measurement framework,Python,dd5bf4d21a5ffda1bc55ec100fa9fe221d916752,Merge branch 'develop-line-wrap-fix' into develop-all-fixes
1695,https://api.github.com/repos/mozilla/OpenWPM/pulls/264,264,Fix a few syntax bugs,"A few strings have been line wrapped, which broke the string formatting using the percent sign. In general, ""a"" + ""%s"" % ""b"" works in python, but ""%s"" + ""b"" % ""a"" will not work since the % binds first to ""b"", before the + can be applied. This commit fixes this by wrapping all line wrapped strings with brackets.",eriktews,1436802,2019-02-20T15:36:24Z,CONTRIBUTOR,False,33,32,1,A web privacy measurement framework,Python,4fb09d7fa068089fd4346b24027198fe1450127b,"Fix a few syntax bugs

A few strings have been line wrapped, which broke the string formatting using the percent sign. In general, ""a"" + ""%s"" % ""b"" works in python, but ""%s"" + ""b"" % ""a"" will not work since the % binds first to ""b"", before the + can be applied. This commit fixes this by wrapping all line wrapped strings with brackets."
1696,https://api.github.com/repos/mozilla/OpenWPM/pulls/264,264,Fix a few syntax bugs,"A few strings have been line wrapped, which broke the string formatting using the percent sign. In general, ""a"" + ""%s"" % ""b"" works in python, but ""%s"" + ""b"" % ""a"" will not work since the % binds first to ""b"", before the + can be applied. This commit fixes this by wrapping all line wrapped strings with brackets.",eriktews,1436802,2019-02-20T15:36:24Z,CONTRIBUTOR,False,33,32,1,A web privacy measurement framework,Python,628409b2b30dd5e5bd741509120c714696a08868,Fix syntax for pep8
1697,https://api.github.com/repos/mozilla/OpenWPM/pulls/263,263,Set daemon to false to fix the socketio server,Sets the daemon flag of the BrowserManager process to false. Daemon processes in python cannot have childs and the BrowserManager tries to fork a new child process when starting the socketio server.,eriktews,1436802,2019-02-20T15:35:27Z,CONTRIBUTOR,False,1,1,1,A web privacy measurement framework,Python,74eb9012774c571175a78b38084c0b2b79bdb1cd,"Set daemon to false to fix the socketio server

Sets the daemon flag of the BrowserManager process to false. Daemon processes in python cannot have childs and the BrowserManager tries to fork a new child process when starting the socketio server."
1698,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,fa2e09bab43e5ff5977ee09e6f0a32f79d6ee583,"Upgrade selenium to a newer version

The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine."
1699,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,5d598605fab31cc43e3afc4c48d9a3fa9e92494f,Fix indentation
1700,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,cb7064f02ce5271bf97bfe60266d8dfbf7a5d5fa,Fix invalid syntax
1701,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,4dc060790ec3d60cab3d8970d904950de9f9d247,Convert print statements to proper python3 style
1702,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,921af008f11ea42fe4f34b8915ac61863d99f174,Looks like install-dev.sh is needed to get rollup
1703,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,ee70c6002ff46eec4f5997e82a91679333ec9501,Use both install scripts
1704,https://api.github.com/repos/mozilla/OpenWPM/pulls/262,262,Upgrade selenium to a newer version,"The currently used git snapshot version fails to build:

https://travis-ci.org/mozilla/OpenWPM/jobs/485662449

But at least the latest 3.141.* release of selenium seems to build fine.

I'm not exactly sure whether this fixes all problems related to selenium, but it seems to be an improvement at least.",eriktews,1436802,2019-02-20T15:34:29Z,CONTRIBUTOR,False,23,24,6,A web privacy measurement framework,Python,11db63c11baf37e922f770b9492ed714485a7fda,Make install-dev.sh aware of virtualenv
1705,https://api.github.com/repos/mozilla/OpenWPM/pulls/260,260,Fix to #258,"I passed the logger to the function. I do not know if this is elegant, in the opwnWPM context, but it works.",turban1988,29097632,2019-02-10T15:03:58Z,CONTRIBUTOR,False,26,9,4,A web privacy measurement framework,Python,ed90f64c5ce26778f43d4cdae9cebb6c12b560b0,fixed missing logging output (Issue #258)
1706,https://api.github.com/repos/mozilla/OpenWPM/pulls/260,260,Fix to #258,"I passed the logger to the function. I do not know if this is elegant, in the opwnWPM context, but it works.",turban1988,29097632,2019-02-10T15:03:58Z,CONTRIBUTOR,False,26,9,4,A web privacy measurement framework,Python,e37186d257a355d94e7407465b36aa8ee8a376a2,fixed missing logging output (Issue #258)
1707,https://api.github.com/repos/mozilla/OpenWPM/pulls/260,260,Fix to #258,"I passed the logger to the function. I do not know if this is elegant, in the opwnWPM context, but it works.",turban1988,29097632,2019-02-10T15:03:58Z,CONTRIBUTOR,False,26,9,4,A web privacy measurement framework,Python,a8837de50abc2d5b3090b246b597424f00f543f8,fixed missing logging output (Issue #258)
1708,https://api.github.com/repos/mozilla/OpenWPM/pulls/260,260,Fix to #258,"I passed the logger to the function. I do not know if this is elegant, in the opwnWPM context, but it works.",turban1988,29097632,2019-02-10T15:03:58Z,CONTRIBUTOR,False,26,9,4,A web privacy measurement framework,Python,f28b25adc7a8cfb7ef9e3e368553db401ec22cba,fixed missing logging output (Issue #258)
1709,https://api.github.com/repos/mozilla/OpenWPM/pulls/254,254,Paint it Black,"Paint the code [""black.""](https://github.com/ambv/black)

Untested(!)",stephendonner,387249,2019-02-06T17:18:10Z,CONTRIBUTOR,False,3335,2125,41,A web privacy measurement framework,Python,df219cf9dfa5d11305bd0245d29770fbdd12dd42,Paint it Black
1710,https://api.github.com/repos/mozilla/OpenWPM/pulls/254,254,Paint it Black,"Paint the code [""black.""](https://github.com/ambv/black)

Untested(!)",stephendonner,387249,2019-02-06T17:18:10Z,CONTRIBUTOR,False,3335,2125,41,A web privacy measurement framework,Python,26aca221097f9aab0888d7e3cc5fcf74481a009d,Run 'black -l 80 .' to preserve line length
1711,https://api.github.com/repos/mozilla/OpenWPM/pulls/248,248,Update number of studies using OpenWPM,,gunesacar,5788790,2019-01-03T16:35:00Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,b845d5c6008a1f85fe8a6541028f22e1aa1c7b2d,Update number of studies using OpenWPM
1712,https://api.github.com/repos/mozilla/OpenWPM/pulls/244,244,Fix Travis badge,@englehardt r?,stephendonner,387249,2018-11-27T04:49:39Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,9cafa2c3d9300588abb9c33e7784056666aeb9f8,Fix Travis badge
1713,https://api.github.com/repos/mozilla/OpenWPM/pulls/244,244,Fix Travis badge,@englehardt r?,stephendonner,387249,2018-11-27T04:49:39Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,660a4b78453f6981581d5e478184f0c57bb6ac2a,*Really* fix Travis CI badge
1714,https://api.github.com/repos/mozilla/OpenWPM/pulls/234,234,Stream urls,Pull URLs from database and update the last time these URLs were scanned,hudson-ayers,32688905,2018-11-09T02:37:13Z,NONE,False,169,0,3,A web privacy measurement framework,Python,a1766d71ee913eb26b1727ef2b8a264665a5395a,Add virtualenv to gitignore
1715,https://api.github.com/repos/mozilla/OpenWPM/pulls/234,234,Stream urls,Pull URLs from database and update the last time these URLs were scanned,hudson-ayers,32688905,2018-11-09T02:37:13Z,NONE,False,169,0,3,A web privacy measurement framework,Python,b8d6f7913cab6a59008d4020b95d11e160dd4b59,Adds code to pulls urls from database and visit them using OpenWPM
1716,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,cf6190584678294b3ee353c4beb282fe04b1d3ff,Improve error handling during start of openwpm webext instrumentation
1717,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,c8b270db510703dacbc40bf7203a6b4399e2f838,Make use of navigation instrument in extension if enabled in config
1718,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,b7500a181db09e00b0f4288dd2a18d03a4184f5f,Readability - add newlines between certain code blocks
1719,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,9f11a24c46791d0165eff2cd6961f442eb5e1fe8,Disabled the wait for configuration in the fx extension content script since it delays the availability of the instrumentation
1720,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,3dd87d64320912012c6c8d2d660c574d161c8e69,Add data URLs test page
1721,https://api.github.com/repos/mozilla/OpenWPM/pulls/229,229,Navigation instrument,Makes use of [the navigation instrument](https://github.com/mozilla/openwpm-webext-instrumentation/issues/9) - as implemented in https://github.com/mozilla/openwpm-webext-instrumentation/pull/11,motin,793037,2018-11-02T19:31:20Z,CONTRIBUTOR,False,113,81,9,A web privacy measurement framework,Python,8e5effc300dd8842dff00cd497a8e2c174e12c04,Add large payloads test page
1722,https://api.github.com/repos/mozilla/OpenWPM/pulls/228,228, Replace occurrences of `is_displayed` with the safe version. ,"- Replace occurrences of `is_displayed` with the safe version. 
- Replace unused variable with `_`. 

Fixes #167 

(@englehardt  I noticed this issue was assigned to you, but couldn't resist fixing it :)",gunesacar,5788790,2018-10-26T22:00:57Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,ea72dfed464e4fa4805556064fa238ec59734c50,"Replace occurrences of `is_displayed` with the safe version.
Replace unused variable with _.

Fixes #167."
1723,https://api.github.com/repos/mozilla/OpenWPM/pulls/227,227,Rename `document_url` to `doc_url` in the README.,Fixes #218.,gunesacar,5788790,2018-10-26T18:30:56Z,CONTRIBUTOR,True,3,3,1,A web privacy measurement framework,Python,f844d89f082a0e1936998ec4a7bae9b3517c026a,"Rename `document_url` to `doc_url` in the README.

Fixes #218."
1724,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,6345a689b98c9cae8fa1971352d0b6c79d7c9456,Removing visit_id partition column
1725,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,f9bb292b405ba2b9342eec2e2f6d152156385df5,"Upload to S3 in batches, rather than per-site"
1726,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,370fb1cb0481357af4d08694a263ae69e9a1dbf9,"Add partitioning by instance + make visit_id 64 bits.

The intention of adding partitioning by instance_id is that it will be
easier to read slices of a large dataset (e.g. the first 100k sites out
of a million site dataset). An instance_id partitioning doesn't add any
overhead as different instances will already store data in different
parquet files. To help with slicing, I've also added a site_visits
index, which maps the instance id to everything stored in the
site_visits table."
1727,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,96d90a7dbaf349deb252bad36604fb8c932a4a3d,Fix flake8 errors
1728,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,07133cfa0113c1310fbdd4c8a2339b143cf1c239,"Merge LevelDBAggregator and SqliteAggregator into LocalAggregator

This single aggregator should handle persisting all data to the local
disk regardless of the structure of the output. Also updates the
BaseAggregator interface to require all implementers to handle page
content records. The S3Aggregator will require updating."
1729,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,6dfe1a33f46aa9532e7a7506543030c5cdd1df0b,Add page content saving to S3Aggregator
1730,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,4fb13c3fedb5af67ac9d996b9accf7306d81d1ba,Merge remote-tracking branch 'origin/master' into s3-performance
1731,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,48e222c6306138165d6b13a8ad17ef7de857f274,Add Aggregator status updates + blocking of main process
1732,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,eb14738d8429c9242bfb6478cf58eb845feb1c74,Update schema to be compatible with spark
1733,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,7939f81628bddf29f7934f52d96b2ff21545fa0e,bugfix: output seconds when aggregator times out
1734,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,d2091ad092fc1592bf34f1edfe90f4d9dc4c2905,Merge remote-tracking branch 'origin/master' into s3-performance
1735,https://api.github.com/repos/mozilla/OpenWPM/pulls/226,226,Full Parquet support and performance improvements,"This PR addresses several remaining tasks for parquet writing support:
1. Batch Parquet writes so the database isn't completely fragmented.
2. Support for saving files and page content to S3
3. Refactor the local data aggregator to handle both sqlite and leveldb writes.",englehardt,3280150,2018-10-25T20:26:31Z,MEMBER,True,389,236,11,A web privacy measurement framework,Python,db190f7aa30783efca077263259957e44c554c20,Align SQL and parquet schemas
1736,https://api.github.com/repos/mozilla/OpenWPM/pulls/225,225,Align SQL and parquet schemas,"I noticed these inconsistencies when creating [the client side typescript interfaces corresponding to the OpenWPM schemata](https://github.com/mozilla/openwpm-webext-instrumentation/blob/master/src/types/schema.d.ts).

Note: Adding table-name comments to the SQL schema allows for `diff -y automation/schema.sql automation/DataAggregator/parquet_schema.py` to present a side-by-side comparison of the schemas.",motin,793037,2018-10-24T09:08:08Z,CONTRIBUTOR,False,18,9,2,A web privacy measurement framework,Python,dc68a79e6747328152072ec0bfb327d7d39d0026,Align SQL and parquet schemas
1737,https://api.github.com/repos/mozilla/OpenWPM/pulls/223,223,Use openwpm-webext-instrumentation,"Make the extension (in the develop branch) use https://github.com/mozilla/openwpm-webext-instrumentation for instrumentation.

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/221 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current develop branch, making it easier to review)",motin,793037,2018-10-22T23:48:07Z,CONTRIBUTOR,True,11,1737,9,A web privacy measurement framework,Python,eac208a964b5e4b4e2102d4ad893808b9cf66da0,Use github:mozilla/openwpm-webext-instrumentation#master
1738,https://api.github.com/repos/mozilla/OpenWPM/pulls/222,222,"Fix Dockerfile-dev build, by ADDing requirements-dev.txt to /opt/Open…","…WPM/

@englehardt r?

```Dockerfile-dev``` build output on master:

```
Could not open requirements file: [Errno 2] No such file or directory: 'requirements-dev.txt'
The command '/bin/sh -c cd /opt/OpenWPM/ && ./install-dev.sh' returned a non-zero code: 1
```

See https://gist.github.com/stephendonner/de8d4b623b3c89cdafaa667466cd9965 for moar output.",stephendonner,387249,2018-10-19T00:27:43Z,CONTRIBUTOR,True,1,0,1,A web privacy measurement framework,Python,0f9ab26066adacb1238b7c02e283b53b29274e16,"Fix Dockerfile-dev build, by ADDing requirements-dev.txt to /opt/OpenWPM/"
1739,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,0f9ab26066adacb1238b7c02e283b53b29274e16,"Fix Dockerfile-dev build, by ADDing requirements-dev.txt to /opt/OpenWPM/"
1740,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,a7357c8cb3d1cd906967284b47789b3335e29a9c,"Merge pull request #222 from stephendonner/fix-dockerfile-dev

Fix Dockerfile-dev build, by ADDing requirements-dev.txt to /opt/Open…"
1741,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,db1347100d76ab49b2d23a97f2985b57452c383f,"Updated downloaded Firefox to v60 esr, geckodriver to 0.21.0 and selenium to 0.3.14"
1742,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,243a30921ce7547c74408c2b791e9c327cad4821,Imported relevant files from tommybananas/OpenWPM for initial webextension boilerplate and usage of socket.io instead of legacy sdk socket + port.emit
1743,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,03f2e0d49d1a1a7e353f7a826e734772c2a18f20,Ran autopep on automation/websocketServer/__init__.py
1744,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,4fa9232a2d5afc2b34c80e366e55f696678b9d1b,Made websocketServer start
1745,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,c3978eb987ef0158893f6739e2136a922237a007,Show socket server log output when websocketServer is invoked directly
1746,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,25ee686b7638e377703584c9ed42eabb70bfbcb5,"Cleaned up web extension manifest file, including adding an icon from https://openclipart.org/detail/294403/cctv"
1747,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,d2145f21e095d5baa4fa947e8afb2c00608cf3ce,Web extension sends messages that are received by the python environment and vice versa
1748,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,2d41eb68f026f44f95f3a66318e9fbc5c456311e,Removed legacy-only parts of the extension boilerplate
1749,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,2887d08048e44753b0f24b0371616fea0e979909,Using rollup and web-ext for building the extension instead of jpm
1750,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,154d79d370629bd9250e05c92e969c520b9f803b,Converted commonjs requires to es6 imports
1751,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,a5718d23c03976a5682d6660d9a913d71c57e35c,Restored extension build pipeline
1752,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,0504f44246edf329e1bbea8229b7413864b3252b,"Basic functionality ported to web extensions, using socket.io and messaging in lieu of raw network sockets and file system access. Http and cookie instrumentation currently only holds placeholders for updated instrumentation, but javascript instrumentation works. Aggregators are yet to be reinstated."
1753,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,643e45766a24fd2fd72c98b902599faa3422e423,Test pages wait for window.instrumentObject to be set by the injected page script before continuing
1754,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,c52305ce438a5f611acd595e05c4e7996a7e8cd9,Using yet-to-be-released version of selenium so that web extensions can be installed to the profile
1755,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,a9afea75f76e480bbd069573fbf4b46e78471934,Renamed socket.io server python file and mentioned how to troubleshoot it in the readme
1756,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,b0345018dd9ddbb9890f2974f5303b68defdbdb6,Passing code style checks
1757,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,0ede77beeb9b123ce3a18f281c9c04f59df250a0,"Injecting loggingDB into js, http, cookie instrumentation at runtime"
1758,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,8cb8bcf5209e8b0b4c182a6f05800f94b04173ec,Restored ability to run web extension in test mode if socket.io server is not available
1759,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,ef50bbd55314a663b6b4a72729496f5c1503353e,Moved out content-scoped js-instrumentation to separate file
1760,https://api.github.com/repos/mozilla/OpenWPM/pulls/221,221,Initial work on upgrading OpenWPM to Firefox ESR 60,"Work in progress, not ready for merge yet. Created for discussion and ongoing review purposes. 

Relates to https://github.com/citp/OpenWPM/issues/148

@englehardt In order to make this a collaborative effort, please create a `firefox-upgrade` or `develop` branch in the OpenWPM repo for this PR to target, so that the master branch can still be used for bugfixes to the stable version while we get the major version upgrade in order. 

(Note: this PR includes the commits from https://github.com/citp/OpenWPM/pull/219 as well. It is advised to first review and merge that PR, whereafter this PR will be rebased on the current master branch, making it easier to review)
EDIT: https://github.com/citp/OpenWPM/pull/219 has been merged and this PR has been rebased.",motin,793037,2018-09-29T22:06:50Z,CONTRIBUTOR,True,1363,1366,38,A web privacy measurement framework,Python,ef1a2b166d47a0c57e5749968ea389c0d8569325,Inject content script also in about:blank
1761,https://api.github.com/repos/mozilla/OpenWPM/pulls/220,220,Add in_frame property to javascript instrumentation,"This change seems to be the only meaningful difference between the main master branch of OpenWPM and [the code that was used for the Overscripted crawl](https://github.com/RuizhiYou/OpenWPM/tree/RunThis).

Adding this PR to gather feedback and discuss whether or not it ought to be included in the main branch (if so, of course it should have accompanying tests).",motin,793037,2018-09-29T07:53:49Z,CONTRIBUTOR,False,7,0,3,A web privacy measurement framework,Python,9f7d50f5c7f7dd827d8a5b3bd994f1143862b5d4,"Add in_frame property to javascript instrumentation (from RuizhiYou/OpenWPM/tree/RunThis, but renamed in_iframe -> in_frame in order to reflect what it actually checks)"
1762,https://api.github.com/repos/mozilla/OpenWPM/pulls/220,220,Add in_frame property to javascript instrumentation,"This change seems to be the only meaningful difference between the main master branch of OpenWPM and [the code that was used for the Overscripted crawl](https://github.com/RuizhiYou/OpenWPM/tree/RunThis).

Adding this PR to gather feedback and discuss whether or not it ought to be included in the main branch (if so, of course it should have accompanying tests).",motin,793037,2018-09-29T07:53:49Z,CONTRIBUTOR,False,7,0,3,A web privacy measurement framework,Python,9fd6200a30e7d7f66a6a541ec65dd55bd22c0453,Taking the same-origin policy error into account when checking if the script has been loaded within a frame
1763,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,d66150154ff1a4901a2fb14f5dc0637a2dfd26f5,Ability to specify a custom Firefox installation via the FF_BIN_PATH environment variable
1764,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,c661301aa476e2b623a20e86f1a1dfc40c5b7581,"Added pytest as a testing dependency, installed by install-dev.sh"
1765,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,9d7e0c0f2968bc35fda86a7fc58ba634200f7d2a,"Attempts at getting tests to run on Mac, both locally and via Docker for Mac and XQuartz"
1766,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,a4958f200fbaeae3ae91dfbf0fc675bd49897bf6,Running tests and demo in Mac OSX now works as long as the FIREFOX_BINARY environment variable is set
1767,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,b98c3befc75625c653f74f99f40daf7438ecffec,Passing code style and functional tests
1768,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,5b7c2644e70493430ea1e4ca358c8a240dcc24e7,Improved support for running commands and tests using Docker for Mac
1769,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,20ba3df2a449ffda455523f12c6487a7a40bb807,Tweak: install-mac.sh does not fail if node is already installed
1770,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,2a58dd603f8dc8b86be6ad18890581ab73514952,Moved test/requirements.txt to requirements-dev.txt and added autopep8
1771,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,38354e2c4c831d2a269193801c373e75806098bf,Minor refectoring and updated error message when firefox/gecko is not found
1772,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,18721a6d33f5a58e0df54d24e88b3f6c2551bb00,Excluding venv and automation/Extension from code style checks
1773,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,8aa44e156172173b014760d122d56d39cf2cc85c,Ignore all downloaded Firefox mac app directories
1774,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,19708ae120c1742a74bf73bbefa2342d019ad67a,Removed duplicate pytest dependency
1775,https://api.github.com/repos/mozilla/OpenWPM/pulls/219,219,Mac developer support,"Work in progress. Haven't succeeded in getting the tests to run yet, neither locally nor via Docker for Mac. ",motin,793037,2018-09-17T14:42:19Z,CONTRIBUTOR,True,226,33,13,A web privacy measurement framework,Python,9d67d1df19adf0738c3802be2b75ddf18b2fa8da,Added friendly error message if the path specified in FIREFOX_BINARY does not exist
1776,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,7d0dd18201d6d36546a5988dc48b47f6a0ed3c44,"Initial commit of S3Aggregator.

Save data to Amazon S3 as an alternative to saving it locally in a
SQLite database."
1777,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,5efc9897abad09525dd091bdc8484c7df5cd6d45,Add boto3 as a dependency
1778,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,3867784782cd3f015f7c66c8e113083ed92cb675,Fix imports and encodings for python3
1779,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,0a9b0bb5b1784132f890ab7b400147b814049142,Add visit_id to crawl_history and write valid json
1780,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,68c36d9d81a36f90ee2bef5b9280ef750fe03513,Update S3 writer to write directly in Parquet instead of json
1781,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,2514dccb6608436fba01f168cd34f7058e2e8eaf,Add pandas as dependency
1782,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,03c25e062763b2cb9928fc95add61b579e593bc1,Add Cython as a dependency
1783,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,1d8c214272071ed3a814f7ac556b69753f676002,Add pandas-compat as a dependency
1784,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,bb64f34a3130b8931a125c7a466f48c42076eb49,Dropping Python 3.4 support as it's not supported by pyarrow
1785,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,0dba25c56efd9e4ff6ef110999a9078b1be68cf7,Possible bugfix for compat import error on Travis
1786,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,6a54a7c15b827793027bac5191a6c987d40f25bc,Remove 3.7 testing since it's not supported by Travis
1787,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,1b66d4ff28a4c0a3ab836b299d16b4df6f90249a,Use correct column when checking for test failures
1788,https://api.github.com/repos/mozilla/OpenWPM/pulls/217,217,Add an AWS S3 aggregator,"This PR adds an aggregator that saves records to Amazon S3 as an alternative to saving it locally using the SQLite Aggregator. There are still a couple things to fix:

1. The `LevelDBAggregator` is still the only option for saving page content. This should be merged into the `SQLiteAggegator`. That should be the default choice for local data output. The `S3Aggregator` should be updated to compress and send content files to S3.
2. The various commands to save screenshots and dump page source all save to the local disk directly. We should extend the BaseAggregator interface to include a method for saving files. ",englehardt,3280150,2018-08-15T23:26:00Z,MEMBER,True,420,37,12,A web privacy measurement framework,Python,8c227f413243c00615a002d5a717e8b121ecb3ff,Add S3 Aggregator info to README
1789,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,99984e538ec275144c0dad22ac25effb6ae3a606,First big round of flake8 + isort fixes
1790,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,d3c0a35413f53ccb28a476f1a48cac948a37019f,Second hefty round of flake8-isort fixes
1791,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,0519088e39e89555c1ed846521f6ad7e518e2b0a,"Run flake8 everywhere, a.k.a 'make the pain worth it.'"
1792,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,fb7adc8e8eb48a336c3b39b1e4485a6313b53851,Fix remaining flake8 issues
1793,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,e3cef0c65bd18b11f915d0ab6c951d5b2bb950ef,"Fixing isort issues, reclassifying six"
1794,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,c783fc78a549d0054df969791c3922afd991f097,Change the default category for isort
1795,https://api.github.com/repos/mozilla/OpenWPM/pulls/215,215,Fix flake8 issues throughout entire project,Taking over #214. This should fix (or ignore) the remaining flake8 issues in the repo. Future PRs should be flake8/isort compliant.,englehardt,3280150,2018-08-02T22:23:39Z,MEMBER,True,512,409,34,A web privacy measurement framework,Python,1e770c35ca5563ea8310f60d3a7ff1bd4ed054e4,Enforcing line limits in flake8
1796,https://api.github.com/repos/mozilla/OpenWPM/pulls/214,214,[WIP] First big round of flake8 + isort fixes,,stephendonner,387249,2018-08-01T11:30:42Z,CONTRIBUTOR,True,444,352,27,A web privacy measurement framework,Python,99984e538ec275144c0dad22ac25effb6ae3a606,First big round of flake8 + isort fixes
1797,https://api.github.com/repos/mozilla/OpenWPM/pulls/214,214,[WIP] First big round of flake8 + isort fixes,,stephendonner,387249,2018-08-01T11:30:42Z,CONTRIBUTOR,True,444,352,27,A web privacy measurement framework,Python,d3c0a35413f53ccb28a476f1a48cac948a37019f,Second hefty round of flake8-isort fixes
1798,https://api.github.com/repos/mozilla/OpenWPM/pulls/214,214,[WIP] First big round of flake8 + isort fixes,,stephendonner,387249,2018-08-01T11:30:42Z,CONTRIBUTOR,True,444,352,27,A web privacy measurement framework,Python,0519088e39e89555c1ed846521f6ad7e518e2b0a,"Run flake8 everywhere, a.k.a 'make the pain worth it.'"
1799,https://api.github.com/repos/mozilla/OpenWPM/pulls/213,213,Refactor data handling to use a generic format internally.,"The platform currently uses SQL throughout all of the instrumentation. This makes it impossible to provide the option of an alternate data format. This commit moves all SQL logic into a SQLiteAggregator and uses simple dictionaries for passing data through the rest of the platform. The BaseAggregator and BaseListener classes can be used to support alternate output formats.

The internal format is still structured, as follows:

(`instrument_name`, `dict` that maps field name to data)

Thus, when the data is save to a SQL database we map `instrument_name` --> table, `field_name` --> column, and `data` to the values saved. Future aggregators can handle this differently.

I have special cased `create_table` as an instrument name to allow tables to be generated on the fly. Future aggregators can drop these records.

This PR also removes the `extract_links` command, since it produces a table which is not keyed with the rest of the instrumentation and thus was not worth updating.",englehardt,3280150,2018-07-30T15:29:33Z,MEMBER,True,500,459,21,A web privacy measurement framework,Python,27882e066e2028ebea82ad75a159329c761820a0,"Refactor data handling to use a generic format internally.

The platform currently uses SQL throughout all of the instrumentation.
This makes it impossible to move to provide the option of an alternate
data format. This commit moves all SQL logic into a SQLiteAggregator and
uses simple dictionaries for passing data through the rest of the
platform. The BaseAggregator and BaseListener classes can be used to
support alternate output formats."
1800,https://api.github.com/repos/mozilla/OpenWPM/pulls/213,213,Refactor data handling to use a generic format internally.,"The platform currently uses SQL throughout all of the instrumentation. This makes it impossible to provide the option of an alternate data format. This commit moves all SQL logic into a SQLiteAggregator and uses simple dictionaries for passing data through the rest of the platform. The BaseAggregator and BaseListener classes can be used to support alternate output formats.

The internal format is still structured, as follows:

(`instrument_name`, `dict` that maps field name to data)

Thus, when the data is save to a SQL database we map `instrument_name` --> table, `field_name` --> column, and `data` to the values saved. Future aggregators can handle this differently.

I have special cased `create_table` as an instrument name to allow tables to be generated on the fly. Future aggregators can drop these records.

This PR also removes the `extract_links` command, since it produces a table which is not keyed with the rest of the instrumentation and thus was not worth updating.",englehardt,3280150,2018-07-30T15:29:33Z,MEMBER,True,500,459,21,A web privacy measurement framework,Python,8317c0b3edc313544efd5eb3e3959240cf216db3,Merge branch 'master' of github.com:citp/OpenWPM into data_format_cleanup
1801,https://api.github.com/repos/mozilla/OpenWPM/pulls/213,213,Refactor data handling to use a generic format internally.,"The platform currently uses SQL throughout all of the instrumentation. This makes it impossible to provide the option of an alternate data format. This commit moves all SQL logic into a SQLiteAggregator and uses simple dictionaries for passing data through the rest of the platform. The BaseAggregator and BaseListener classes can be used to support alternate output formats.

The internal format is still structured, as follows:

(`instrument_name`, `dict` that maps field name to data)

Thus, when the data is save to a SQL database we map `instrument_name` --> table, `field_name` --> column, and `data` to the values saved. Future aggregators can handle this differently.

I have special cased `create_table` as an instrument name to allow tables to be generated on the fly. Future aggregators can drop these records.

This PR also removes the `extract_links` command, since it produces a table which is not keyed with the rest of the instrumentation and thus was not worth updating.",englehardt,3280150,2018-07-30T15:29:33Z,MEMBER,True,500,459,21,A web privacy measurement framework,Python,f3e46b09dc56e175866ca5b0ae9dbf5f02af299c,Merge branch 'master' of github.com:citp/OpenWPM into data_format_cleanup
1802,https://api.github.com/repos/mozilla/OpenWPM/pulls/213,213,Refactor data handling to use a generic format internally.,"The platform currently uses SQL throughout all of the instrumentation. This makes it impossible to provide the option of an alternate data format. This commit moves all SQL logic into a SQLiteAggregator and uses simple dictionaries for passing data through the rest of the platform. The BaseAggregator and BaseListener classes can be used to support alternate output formats.

The internal format is still structured, as follows:

(`instrument_name`, `dict` that maps field name to data)

Thus, when the data is save to a SQL database we map `instrument_name` --> table, `field_name` --> column, and `data` to the values saved. Future aggregators can handle this differently.

I have special cased `create_table` as an instrument name to allow tables to be generated on the fly. Future aggregators can drop these records.

This PR also removes the `extract_links` command, since it produces a table which is not keyed with the rest of the instrumentation and thus was not worth updating.",englehardt,3280150,2018-07-30T15:29:33Z,MEMBER,True,500,459,21,A web privacy measurement framework,Python,ddb54c2fcb455714ed6d79a11193fbd97b930e33,Bugfix: Update method name in BaseListener.drain_queue()
1803,https://api.github.com/repos/mozilla/OpenWPM/pulls/212,212,Issue 185; rename is_third_party_window column to is_third_party_to_top_window,@englehardt r?  when you get a chance (no rush)?  Thanks!,stephendonner,387249,2018-07-25T11:36:37Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,f594a152fff9e49ce286bd6611167065dafc15de,Issue 185; rename is_third_party_window column (and respective JavaScript variable name) to is_third_party_to_top_window
1804,https://api.github.com/repos/mozilla/OpenWPM/pulls/212,212,Issue 185; rename is_third_party_window column to is_third_party_to_top_window,@englehardt r?  when you get a chance (no rush)?  Thanks!,stephendonner,387249,2018-07-25T11:36:37Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,6631669083f173eb23bb6b84fb7959f7886930e0,"Rename to is_third_party_to_top_window in the SQL-creation table, too"
1805,https://api.github.com/repos/mozilla/OpenWPM/pulls/212,212,Issue 185; rename is_third_party_window column to is_third_party_to_top_window,@englehardt r?  when you get a chance (no rush)?  Thanks!,stephendonner,387249,2018-07-25T11:36:37Z,CONTRIBUTOR,True,5,5,3,A web privacy measurement framework,Python,4a249dc8998c1fb7a3aba57034b782f74d8972e2,Fix now-renamed row names
1806,https://api.github.com/repos/mozilla/OpenWPM/pulls/211,211,"Fix Issue 192; normalize CrawlHistory table to crawl_history, for consistency",Fixes https://github.com/citp/OpenWPM/issues/192,stephendonner,387249,2018-07-23T18:36:32Z,CONTRIBUTOR,True,5,6,4,A web privacy measurement framework,Python,964e5a1d438af33381655693473f6b8b81f7ec9c,"Fix Issue 192; normalize CrawlHistory table to crawl_history, for consistency"
1807,https://api.github.com/repos/mozilla/OpenWPM/pulls/210,210,[WIP] Run Travis tests using pytest-xdist for concurrency,"Got a ways to go, here; we'll have to smartly deal with having enough unique webserver ports, dynamically, if we're going to go the pytest-xdist route, due to the current hardcode in https://github.com/citp/OpenWPM/blob/7be2dec15807a46f86876eea480696b1584ab9ec/test/utilities.py#L13",stephendonner,387249,2018-07-23T06:34:22Z,CONTRIBUTOR,False,4,2,3,A web privacy measurement framework,Python,977a7a49890a91ddf67fa05bec26bc7cfb9b9099,Run Travis tests using pytest-xdist for concurrency
1808,https://api.github.com/repos/mozilla/OpenWPM/pulls/210,210,[WIP] Run Travis tests using pytest-xdist for concurrency,"Got a ways to go, here; we'll have to smartly deal with having enough unique webserver ports, dynamically, if we're going to go the pytest-xdist route, due to the current hardcode in https://github.com/citp/OpenWPM/blob/7be2dec15807a46f86876eea480696b1584ab9ec/test/utilities.py#L13",stephendonner,387249,2018-07-23T06:34:22Z,CONTRIBUTOR,False,4,2,3,A web privacy measurement framework,Python,89fa1b60be7ae37c206c320ffc27928044cd3d18,"Restore original test-dist logic; keep -n=auto, too, though"
1809,https://api.github.com/repos/mozilla/OpenWPM/pulls/210,210,[WIP] Run Travis tests using pytest-xdist for concurrency,"Got a ways to go, here; we'll have to smartly deal with having enough unique webserver ports, dynamically, if we're going to go the pytest-xdist route, due to the current hardcode in https://github.com/citp/OpenWPM/blob/7be2dec15807a46f86876eea480696b1584ab9ec/test/utilities.py#L13",stephendonner,387249,2018-07-23T06:34:22Z,CONTRIBUTOR,False,4,2,3,A web privacy measurement framework,Python,570eb8e25144ae13dd542cdf9b5aa89e788bd4e1,Test if -n=1 still works
1810,https://api.github.com/repos/mozilla/OpenWPM/pulls/210,210,[WIP] Run Travis tests using pytest-xdist for concurrency,"Got a ways to go, here; we'll have to smartly deal with having enough unique webserver ports, dynamically, if we're going to go the pytest-xdist route, due to the current hardcode in https://github.com/citp/OpenWPM/blob/7be2dec15807a46f86876eea480696b1584ab9ec/test/utilities.py#L13",stephendonner,387249,2018-07-23T06:34:22Z,CONTRIBUTOR,False,4,2,3,A web privacy measurement framework,Python,3420998df2fa77903a90a572d0424dc66255bb64,Add and map pytest-xdist package
1811,https://api.github.com/repos/mozilla/OpenWPM/pulls/208,208,Add and run flake8-isort in Travis builds,"Also not-yet **_fully_** ready for review, but I think this Should Just Work (tm).  ",stephendonner,387249,2018-07-21T08:05:29Z,CONTRIBUTOR,True,70,53,16,A web privacy measurement framework,Python,6ffc8f6c131cfb2b343a31f86d85c1dbbec8acf9,"Add and run flake8-isort in Travis builds

Add [isort] to setup.cfg, per docs

Fix flake8-isort errors in /test/*

Add mapped flake8-isort to pkg_name_mapping()

Fix one isort error

See https://travis-ci.org/citp/OpenWPM/jobs/407022965

Try fixing second flake8-isort error

See https://travis-ci.org/citp/OpenWPM/jobs/407388964

Moar fixes for flake8-isort validation

See https://travis-ci.org/citp/OpenWPM/jobs/407390660

This |isort --diff| run made flake8-isort happy, locally

Add future, six, and six.moves to isort's known_future_library section

Try outputting suggested flake8-isort fixes

Address a slew of flake8-isort issues, in Travis

Another round of flake8-isort 'fixes?

Add configs to isort; fix a few flake8-isort issues

Should fix isort errors

Hopefully final isort fixes

I think I cracked it: fixed isort issues

Remove debug flake8-isort command in Travis builds

Just update known_first_party with the couple I know"
1812,https://api.github.com/repos/mozilla/OpenWPM/pulls/208,208,Add and run flake8-isort in Travis builds,"Also not-yet **_fully_** ready for review, but I think this Should Just Work (tm).  ",stephendonner,387249,2018-07-21T08:05:29Z,CONTRIBUTOR,True,70,53,16,A web privacy measurement framework,Python,b2533e9cd85519c1dc4f54596408aff12df9031d,"Follow prevailing style (which I wrote, even)"
1813,https://api.github.com/repos/mozilla/OpenWPM/pulls/208,208,Add and run flake8-isort in Travis builds,"Also not-yet **_fully_** ready for review, but I think this Should Just Work (tm).  ",stephendonner,387249,2018-07-21T08:05:29Z,CONTRIBUTOR,True,70,53,16,A web privacy measurement framework,Python,2e9b3775b0d4cb82d87228dfc234214a2dbeee6d,Fix flake8_isort package-name mapping (review comment)
1814,https://api.github.com/repos/mozilla/OpenWPM/pulls/208,208,Add and run flake8-isort in Travis builds,"Also not-yet **_fully_** ready for review, but I think this Should Just Work (tm).  ",stephendonner,387249,2018-07-21T08:05:29Z,CONTRIBUTOR,True,70,53,16,A web privacy measurement framework,Python,14636dba1d48e123fd39f2f86f58d68ca37467f1,Restore original commonly-used modules import section; add isort:skip to # noqa comment
1815,https://api.github.com/repos/mozilla/OpenWPM/pulls/207,207,[WIP] Fix Issue 205: add pinned pipenv to replace pip and virtualenv,"Not (yet) ready for review on this, although I welcome comments/feedback, of course!

Caveat: Ideally, I'd be ```git -rm```ing ```requirements.txt``` **and** ```git add```ing the resulting ```Pipfile``` from ```pip install -r requirements.txt``` as a swap-in replacement, but I need to be careful with at least two issues:

1. Make sure the current [WIP] PR passes in Travis CI, with multiple Python versions
2. Ditto for once we remove ```requirements.txt``` and add the ```Pipfile```
",stephendonner,387249,2018-07-20T23:12:17Z,CONTRIBUTOR,False,11,6,4,A web privacy measurement framework,Python,a842050320ab1d089db990c2ff7345b86e72ef2a,"Fixes Issue 205: add a pinned pipenv for reqs install, to replace pip and virtualenv"
1816,https://api.github.com/repos/mozilla/OpenWPM/pulls/206,206,Remove the content policy instrument and page manager,"These were left over from FourthParty and were never integrated with
OpenWPM's other instrumentation. The new context we've added to requests
and JS calls removes the need for the tricks done in page_manager. The
request context pulled in the content_policy_instrument was made
redundant by the context we pulled directly from the channel in the
http_instrument. Other context available in the content policy listener
can be pulled off of the channel's loadInfo property.",englehardt,3280150,2018-07-20T22:43:05Z,MEMBER,True,0,164,9,A web privacy measurement framework,Python,33bd80f18d005b56fe58d518afe1cc113b35aea5,"Remove content_policy_instrument and page_manager

These were left over from FourthParty and were never integrated with
OpenWPM's other instrumentation. The new context we've added to requests
and JS calls removes the need for the tricks done in page_manager. The
request context pulled in the content_policy_instrument was made
redundant by the context we pulled directly from the channel in the
http_instrument. Other context available in the content policy listener
can be pulled off of the channel's loadInfo property."
1817,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,d8101647ab3213adf50df873ad3d7d898aab5aac,Added a Dockerfile and README for building and running OpenWPM on Docker
1818,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,0e3a6a2af31a8e443ab87beb3bcb473fe6199a4b,Modified Dockerfile to use already cloned OpenWPM source
1819,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,6f6ccb7324a42c775d2dab5c12c6e6eb3c66d9da,Update Dockerfile & demo for FF52
1820,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,4d455a59356cc04f4fa38de5b84aa035e824c1af,Bumped up Docker's Firefox
1821,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,3b7c812266c02484facdc181528ebb46b54b102f,Simplifying Dockerfile; removing repetition from install.sh
1822,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,68fa3679da36ae296dd5a103f4628c4f6a76b82f,Move Dockerfile to root directory and remove unnecessary files
1823,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,0e8b9cefd84fad09983e312d0b7035dbbe749d1c,Merge branch 'master' of github.com:citp/OpenWPM into docker
1824,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,565aecf795ae3e3c3e8ed23cf528211f27f48d34,Fix headings and line breaks
1825,https://api.github.com/repos/mozilla/OpenWPM/pulls/203,203,Add Dockerfile with instructions on how to use,This is split out from #159. All the hard work was done by @hadiasghari.,englehardt,3280150,2018-07-11T21:39:49Z,MEMBER,True,104,0,3,A web privacy measurement framework,Python,94b550064681d07ca49867a922ea8e3ffe86b9b0,Updating README reference after directory change
1826,https://api.github.com/repos/mozilla/OpenWPM/pulls/202,202,Implement some kind of popup protection,"When 'no-popups' in the browser-configuration is set to true, websites cannot open a new tab or window by for example setting a link target to '_blank' or a similar method. This is useful when you wanna make sure that all actions happen only inside a single tab and window.

This can also be archived using the current codebase and setting additional preferences, this patch makes it just more convenient for the user.",eriktews,1436802,2018-07-11T08:46:39Z,CONTRIBUTOR,False,9,1,3,A web privacy measurement framework,Python,fe439594beda734bb26f8f1e4990065645475672,"Implement some kind of popup protection

When 'no-popups' in the browser-configuration is set to true, websites cannot open a new tab or window by for example setting a link target to '_blank' or a similar method. This is useful when you wanna make sure that all actions happen only inside a single tab and window."
1827,https://api.github.com/repos/mozilla/OpenWPM/pulls/201,201,Give the thread for socketserver a name.,"By giving the thread that accepts the socket connections in socketserver a name, the code should be easier to debug so that in case an exception happens, it is clear in which thread it happened.

This will not fix issue #145 but it will help at least to debug it.",eriktews,1436802,2018-07-11T08:11:44Z,CONTRIBUTOR,True,7,4,4,A web privacy measurement framework,Python,a6c1f1b8d5684c9ec531d2edb814bb38654b3e59,"Give the thread for socketserver a name.

By giving the thread that accepts the socket connections in socketserver a name, the code should be easier to debug so that in case an exception happens, it is clear in which thread it happened."
1828,https://api.github.com/repos/mozilla/OpenWPM/pulls/200,200,Fix all flake8 issues except for E501,"This patch addresses all ```flake8``` issues (in the test/ dir) except for E501, so helps with https://github.com/citp/OpenWPM/issues/116 (but doesn't obviate further fixes).  And, if accepted, we'll need it *before* we merge in https://github.com/citp/OpenWPM/pull/199.

```
./test_profile.py:23:68: E231 missing whitespace after ','
./test_profile.py:23:80: E501 line too long (86 > 79 characters)
./test_profile.py:30:46: E261 at least two spaces before inline comment
./test_profile.py:31:39: E261 at least two spaces before inline comment
./test_profile.py:32:39: E261 at least two spaces before inline comment
./test_profile.py:39:46: E261 at least two spaces before inline comment
./test_profile.py:40:39: E261 at least two spaces before inline comment
./test_profile.py:41:39: E261 at least two spaces before inline comment
./test_profile.py:42:39: E261 at least two spaces before inline comment
./test_profile.py:43:39: E261 at least two spaces before inline comment
./test_profile.py:46:68: E231 missing whitespace after ','
./test_profile.py:46:80: E501 line too long (86 > 79 characters)
./test_profile.py:65:47: E261 at least two spaces before inline comment
./test_profile.py:66:58: E261 at least two spaces before inline comment
./test_profile.py:66:80: E501 line too long (86 > 79 characters)
./test_profile.py:67:35: E261 at least two spaces before inline comment
./test_profile.py:67:80: E501 line too long (87 > 79 characters)
./test_profile.py:75:68: E231 missing whitespace after ','
./test_profile.py:75:80: E501 line too long (86 > 79 characters)
./test_profile.py:77:5: E265 block comment should start with '# '
./test_profile.py:78:5: E265 block comment should start with '# '
./test_profile.py:78:80: E501 line too long (100 > 79 characters)
./test_crawl.py:90:35: E127 continuation line over-indented for visual indent
./test_crawl.py:109:80: E501 line too long (94 > 79 characters)
./test_crawl.py:118:39: E127 continuation line over-indented for visual indent
./test_crawl.py:124:39: E127 continuation line over-indented for visual indent
./test_crawl.py:131:39: E127 continuation line over-indented for visual indent
./expected.py:3:1: F401 '.utilities.BASE_TEST_URL_NOPATH' imported but unused
./expected.py:3:80: E501 line too long (80 > 79 characters)
```

Also note: we've been running with ```flake8-isort==2.5``` - not sure if you're interested in adding that, but I'd be happy to help, if so!",stephendonner,387249,2018-07-05T00:21:02Z,CONTRIBUTOR,True,51,50,8,A web privacy measurement framework,Python,496f8b227c2ffa484be5f4a2fdedea4bf9731e4e,Fix a flew of flake8 issues
1829,https://api.github.com/repos/mozilla/OpenWPM/pulls/200,200,Fix all flake8 issues except for E501,"This patch addresses all ```flake8``` issues (in the test/ dir) except for E501, so helps with https://github.com/citp/OpenWPM/issues/116 (but doesn't obviate further fixes).  And, if accepted, we'll need it *before* we merge in https://github.com/citp/OpenWPM/pull/199.

```
./test_profile.py:23:68: E231 missing whitespace after ','
./test_profile.py:23:80: E501 line too long (86 > 79 characters)
./test_profile.py:30:46: E261 at least two spaces before inline comment
./test_profile.py:31:39: E261 at least two spaces before inline comment
./test_profile.py:32:39: E261 at least two spaces before inline comment
./test_profile.py:39:46: E261 at least two spaces before inline comment
./test_profile.py:40:39: E261 at least two spaces before inline comment
./test_profile.py:41:39: E261 at least two spaces before inline comment
./test_profile.py:42:39: E261 at least two spaces before inline comment
./test_profile.py:43:39: E261 at least two spaces before inline comment
./test_profile.py:46:68: E231 missing whitespace after ','
./test_profile.py:46:80: E501 line too long (86 > 79 characters)
./test_profile.py:65:47: E261 at least two spaces before inline comment
./test_profile.py:66:58: E261 at least two spaces before inline comment
./test_profile.py:66:80: E501 line too long (86 > 79 characters)
./test_profile.py:67:35: E261 at least two spaces before inline comment
./test_profile.py:67:80: E501 line too long (87 > 79 characters)
./test_profile.py:75:68: E231 missing whitespace after ','
./test_profile.py:75:80: E501 line too long (86 > 79 characters)
./test_profile.py:77:5: E265 block comment should start with '# '
./test_profile.py:78:5: E265 block comment should start with '# '
./test_profile.py:78:80: E501 line too long (100 > 79 characters)
./test_crawl.py:90:35: E127 continuation line over-indented for visual indent
./test_crawl.py:109:80: E501 line too long (94 > 79 characters)
./test_crawl.py:118:39: E127 continuation line over-indented for visual indent
./test_crawl.py:124:39: E127 continuation line over-indented for visual indent
./test_crawl.py:131:39: E127 continuation line over-indented for visual indent
./expected.py:3:1: F401 '.utilities.BASE_TEST_URL_NOPATH' imported but unused
./expected.py:3:80: E501 line too long (80 > 79 characters)
```

Also note: we've been running with ```flake8-isort==2.5``` - not sure if you're interested in adding that, but I'd be happy to help, if so!",stephendonner,387249,2018-07-05T00:21:02Z,CONTRIBUTOR,True,51,50,8,A web privacy measurement framework,Python,44e376ab26690b79e256258cf045698998236ff4,Fix E211 whitespace before '(' issue
1830,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,cba4c2cf5a4e7073cd65982a0f0b3f960862569f,Add and run flake8 in Travis
1831,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,67cb5bc462ff7536b66a5f4f2bd2ee8c666bd505,"Invoke flake8 in Travis with --ignore=E501 (line length), for now"
1832,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,c51e4cb45ddf5cfa2ce515a20ba3cfbe15b862d4,Add and use setup.cfg file to ignore E501 in Travis builds
1833,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,c140843220a3498c4379d69a372a70428de50984,Fix E127 continuation-over-indent flake8 issue
1834,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,9164fc3e0d15a79dd7fb197bdfb6c60070578867,Actually fix E127 issue
1835,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,f71d57af74c93666fc001afb32f98a57edf4a61d,Merge branch 'master' into run-flake8-travis
1836,https://api.github.com/repos/mozilla/OpenWPM/pulls/199,199,Add and run flake8 in Travis,"Before this lands (assuming it gets approved), we'll also need https://github.com/citp/OpenWPM/pull/200 in, with a rebase.",stephendonner,387249,2018-07-04T23:47:41Z,CONTRIBUTOR,True,7,2,4,A web privacy measurement framework,Python,7662ad1be5ce664e3e188fe01c863002e42c5f5b,Un-pin flake8
1837,https://api.github.com/repos/mozilla/OpenWPM/pulls/198,198,[BUGFIX] Move timestamp to the content script part,"This patch moves the generation of the timestamp for the message from the page script part to the content script part. The page script code is execute with all the other JavaScript code of the website, and when a website decides to change the Date prototype to something else, then the previous variant might generate incorrect timestamps. By generating the timestamp in the content script part, the timestamp is not affected by any JavaScript code running in the website.",eriktews,1436802,2018-06-28T13:46:56Z,CONTRIBUTOR,True,3,4,2,A web privacy measurement framework,Python,10c1cdd80a6aa8443ef2b0d9e13893a010e6fcc2,"Move timestamp to the content script part

This patch moves the generation of the timestamp for the message from the page script part to the content script part. The page script code is execute with all the other JavaScript code of the website, and when a website decides to change the Date prototype to something else, then the previous variant might generate incorrect timestamps. By generating the timestamp in the content script part, the timestamp is not affected by any JavaScript code running in the website."
1838,https://api.github.com/repos/mozilla/OpenWPM/pulls/196,196,Add frame information to the JS calls table,This PR adds frame information to the Javascript calls table. `document_url` is the URL of the frame in which the JS call occurred. `top_level_url` is the URL of the tab. These URLs will be equal for JS calls that occur in the top-level context.,englehardt,3280150,2018-06-25T01:38:19Z,MEMBER,True,300,45,9,A web privacy measurement framework,Python,f308b523447e83fc408c9200eb730870f105bb30,Ensure e10s is disabled with pref
1839,https://api.github.com/repos/mozilla/OpenWPM/pulls/196,196,Add frame information to the JS calls table,This PR adds frame information to the Javascript calls table. `document_url` is the URL of the frame in which the JS call occurred. `top_level_url` is the URL of the tab. These URLs will be equal for JS calls that occur in the top-level context.,englehardt,3280150,2018-06-25T01:38:19Z,MEMBER,True,300,45,9,A web privacy measurement framework,Python,3206133cc30764d030dea3cd108ee63fd97c469b,Adding frame and document urls to js instrument logs
1840,https://api.github.com/repos/mozilla/OpenWPM/pulls/196,196,Add frame information to the JS calls table,This PR adds frame information to the Javascript calls table. `document_url` is the URL of the frame in which the JS call occurred. `top_level_url` is the URL of the tab. These URLs will be equal for JS calls that occur in the top-level context.,englehardt,3280150,2018-06-25T01:38:19Z,MEMBER,True,300,45,9,A web privacy measurement framework,Python,73bc6249db0ec492dd71bae0347337958e09cf00,Ignore pytest cache directory
1841,https://api.github.com/repos/mozilla/OpenWPM/pulls/196,196,Add frame information to the JS calls table,This PR adds frame information to the Javascript calls table. `document_url` is the URL of the frame in which the JS call occurred. `top_level_url` is the URL of the tab. These URLs will be equal for JS calls that occur in the top-level context.,englehardt,3280150,2018-06-25T01:38:19Z,MEMBER,True,300,45,9,A web privacy measurement framework,Python,4959f27db74c741f93de2fa86631feb4a7364a29,Merge branch 'master' of github.com:citp/OpenWPM into js_frame
1842,https://api.github.com/repos/mozilla/OpenWPM/pulls/195,195,Fix crash due to unsuccessful closing of windows,"Fixes citp/OpenWPM#166

This should fix the referenced issue.
`tab_restart_browser` will now immediately create a new window and change to it (unless the current window is `about:blank`) and let `close_other_windows` close all other windows.
`close_other_windows` will now loop through the list of window handles, as long as there's more than one in it, to kill popups caused by closing windows. This can lead to non-termination, e.g. when a window keeps reopening itself. However, this might be acceptable, as the TaskManager will kill the browser when the timeout period has elapsed.",ghost,10137,2018-06-16T17:39:26Z,NONE,False,4,20,1,A web privacy measurement framework,Python,dc0db58f69f21e0722511e70baba8d9fd3cb4885,"Fix crash due to unsuccessful closing of windows

Fixes citp/OpenWPM#166"
1843,https://api.github.com/repos/mozilla/OpenWPM/pulls/181,181,Fix of browser sync/index in _distribute_command,"Faulty comparison (first with integers, and only after that with '\*' and '\*\*') made the code crash when execute_command_sequence was called with the special '\*' and '\*\*' values. This made the demo.py disfunctional. The order was changed to make the special values work again.",noise-field,14188757,2018-04-17T17:40:41Z,CONTRIBUTOR,True,10,10,1,A web privacy measurement framework,Python,f6540415564b85135b79af8fc09dc67c444dbb8c,"Fix of browser sync/index in _distribute_command

Faulty comparison (first with integers, and only after that with '*' and '**') made the code crash when execute_command_sequence was called with the special '*' and '**' values. This made the demo.py disfunctional."
1844,https://api.github.com/repos/mozilla/OpenWPM/pulls/178,178,Bugfix for isThirdPartyWindow,"When a new page is loaded, then by definition, the http request does not belong to a third party window. This corner case is currently not handled correctly by OpenWPM. To fix this, this commit sets 'isThirdPartyWindow' only to true, when 'isFullPageLoad' is false.",eriktews,1436802,2018-03-15T17:53:06Z,CONTRIBUTOR,False,4,1,2,A web privacy measurement framework,Python,b078652d7fb9697dd4d537d1091adf49d511a57e,"Bugfix for isThirdPartyWindow

When a new page is loaded, then by definition, the http request does not belong to a third party window. This corner case is currently not handled correctly by OpenWPM. To fix this, this commit sets 'isThirdPartyWindow' only to true, when 'isFullPageLoad' is false."
1845,https://api.github.com/repos/mozilla/OpenWPM/pulls/177,177,Add original_url and is_replace to http_requests,"This patch adds the fields original_url and is_replace to the http_requests table. is_replace checks for Ci.nsIHttpChannel.LOAD_REPLACE and original_url stores the httpChannel.originalURI.spec value, which might be useful for redirects.",eriktews,1436802,2018-03-15T17:51:08Z,CONTRIBUTOR,False,14,0,3,A web privacy measurement framework,Python,be021fb79a2bf2b38524546be83e6e5735ac09fa,"Add original_url and is_replace to http_requests

This patch adds the fields original_url and is_replace to the http_requests table. is_replace checks for Ci.nsIHttpChannel.LOAD_REPLACE and original_url stores the httpChannel.originalURI.spec value, which might be useful for redirects."
1846,https://api.github.com/repos/mozilla/OpenWPM/pulls/177,177,Add original_url and is_replace to http_requests,"This patch adds the fields original_url and is_replace to the http_requests table. is_replace checks for Ci.nsIHttpChannel.LOAD_REPLACE and original_url stores the httpChannel.originalURI.spec value, which might be useful for redirects.",eriktews,1436802,2018-03-15T17:51:08Z,CONTRIBUTOR,False,14,0,3,A web privacy measurement framework,Python,4c8ea67e9be4992dc5f3db4281dfb40e76cb6e2e,"Merge branch 'citp-master' into citp-more-http-info

Rebuild xpi."
1847,https://api.github.com/repos/mozilla/OpenWPM/pulls/176,176,Provide JavaScript 1st/3rd party information,"By adding the fields document_url, top_document_url, and referrer_url to the javascript table, it is now possible to determine whether a JavaScript was executed in a 1st or 3rd party context. The easiest way to do that is by checking whether top_document_url is NULL, which indicates that this script is a third party JavaScript. Other evaluations are possible too.",eriktews,1436802,2018-03-15T17:48:33Z,CONTRIBUTOR,False,28,1,4,A web privacy measurement framework,Python,7789e0257dbc8ee1d6109c55216473c8490ac9ca,"Provide JavaScript 1st/3rd party information

By adding the fields document_url, top_document_url, and referrer_url to the javascript table, it is now possible to determine whether a JavaScript was executed in a 1st or 3rd party context. The easiest way to do that is by checking whether top_document_url is NULL, which indicates that this script is a third party JavaScript. Other evaluations are possible too."
1848,https://api.github.com/repos/mozilla/OpenWPM/pulls/176,176,Provide JavaScript 1st/3rd party information,"By adding the fields document_url, top_document_url, and referrer_url to the javascript table, it is now possible to determine whether a JavaScript was executed in a 1st or 3rd party context. The easiest way to do that is by checking whether top_document_url is NULL, which indicates that this script is a third party JavaScript. Other evaluations are possible too.",eriktews,1436802,2018-03-15T17:48:33Z,CONTRIBUTOR,False,28,1,4,A web privacy measurement framework,Python,a75c58de465b97ff9ad2a4a7bf6d3998f2905c57,"Merge branch 'citp-master' into citp-js-3rd-party

Rebuild xpi."
1849,https://api.github.com/repos/mozilla/OpenWPM/pulls/175,175,"Bugfix: display port parsing was incorrect, causing lockfiles to accumulate in /tmp","The XVFB command format must have changed at some point, causing our
simple index-based parsing of the display port to fail. This bugfix
updates to the new command format by assuming the port is the last item
in the list.",englehardt,3280150,2018-03-06T00:19:28Z,MEMBER,True,5,4,2,A web privacy measurement framework,Python,f29f5a6ff2a4c1bc34235b33a74a49ba38438ea3,"Bugfix: display port parsing incorrect, causing lockfiles to accumulate

The XVFB command format must have changed at some point, causing our
simple index-based parsing of the display port to fail. This bugfix
updates to the new command format by assuming the port is the last item
in the list."
1850,https://api.github.com/repos/mozilla/OpenWPM/pulls/172,172,Use IPython < 6.0 for python 2.7.,"IPython 6.0 and newer versions do not support python 2.7 anymore. For python 2.7 and older versions, there is still IPython 5.x. When using the default version of pip (8.1.1) in Ubuntu 16.04, the following problem might be encountered when running 'pip install -U -r requirements.txt':

```
    IPython 6.0+ does not support Python 2.6, 2.7, 3.0, 3.1, or 3.2.
    When using Python 2.7, please install IPython 5.x LTS Long Term Support version.
    Beginning with IPython 6.0, Python 3.3 and above is required.

    See IPython `README.rst` file for more information:

        https://github.com/ipython/ipython/blob/master/README.rst

    Python sys.version_info(major=2, minor=7, micro=12, releaselevel='final', serial=0) detected.
```

When using the installer with 'install.sh', then this problem is not encountered since pip is upgraded to a newer version which seems to fix this automatically.",eriktews,1436802,2018-02-22T18:10:04Z,CONTRIBUTOR,True,2,1,1,A web privacy measurement framework,Python,22869647012d894791209358f2794ece4f39aabd,"Use IPython <= 6.0 for python 2.7.

IPython 6.0 and newer versions do not support python 2.7 anymore. For python 2.7 and older versions, there is still IPython 5.x. When using the default version of pip (8.1.1) in Ubuntu 16.04, the following problem might be encountered when running 'pip install -U -r requirements.txt':

```
    IPython 6.0+ does not support Python 2.6, 2.7, 3.0, 3.1, or 3.2.
    When using Python 2.7, please install IPython 5.x LTS Long Term Support version.
    Beginning with IPython 6.0, Python 3.3 and above is required.

    See IPython `README.rst` file for more information:

        https://github.com/ipython/ipython/blob/master/README.rst

    Python sys.version_info(major=2, minor=7, micro=12, releaselevel='final', serial=0) detected.
```

When using the installer with 'install.sh', then this problem is not encountered since pip is upgraded to a newer version which seems to fix this automatically."
1851,https://api.github.com/repos/mozilla/OpenWPM/pulls/172,172,Use IPython < 6.0 for python 2.7.,"IPython 6.0 and newer versions do not support python 2.7 anymore. For python 2.7 and older versions, there is still IPython 5.x. When using the default version of pip (8.1.1) in Ubuntu 16.04, the following problem might be encountered when running 'pip install -U -r requirements.txt':

```
    IPython 6.0+ does not support Python 2.6, 2.7, 3.0, 3.1, or 3.2.
    When using Python 2.7, please install IPython 5.x LTS Long Term Support version.
    Beginning with IPython 6.0, Python 3.3 and above is required.

    See IPython `README.rst` file for more information:

        https://github.com/ipython/ipython/blob/master/README.rst

    Python sys.version_info(major=2, minor=7, micro=12, releaselevel='final', serial=0) detected.
```

When using the installer with 'install.sh', then this problem is not encountered since pip is upgraded to a newer version which seems to fix this automatically.",eriktews,1436802,2018-02-22T18:10:04Z,CONTRIBUTOR,True,2,1,1,A web privacy measurement framework,Python,b1655a655e970e4afcccc46755a1e62c32b56c5b,Update requirements.txt
1852,https://api.github.com/repos/mozilla/OpenWPM/pulls/172,172,Use IPython < 6.0 for python 2.7.,"IPython 6.0 and newer versions do not support python 2.7 anymore. For python 2.7 and older versions, there is still IPython 5.x. When using the default version of pip (8.1.1) in Ubuntu 16.04, the following problem might be encountered when running 'pip install -U -r requirements.txt':

```
    IPython 6.0+ does not support Python 2.6, 2.7, 3.0, 3.1, or 3.2.
    When using Python 2.7, please install IPython 5.x LTS Long Term Support version.
    Beginning with IPython 6.0, Python 3.3 and above is required.

    See IPython `README.rst` file for more information:

        https://github.com/ipython/ipython/blob/master/README.rst

    Python sys.version_info(major=2, minor=7, micro=12, releaselevel='final', serial=0) detected.
```

When using the installer with 'install.sh', then this problem is not encountered since pip is upgraded to a newer version which seems to fix this automatically.",eriktews,1436802,2018-02-22T18:10:04Z,CONTRIBUTOR,True,2,1,1,A web privacy measurement framework,Python,c2c1eb681903a12a0684d1bd2b843373322419e0,Update requirements.txt
1853,https://api.github.com/repos/mozilla/OpenWPM/pulls/171,171,Install curl and wget in the installer.,"Some editions of ubuntu 16.04 such as the default docker images do not come with curl and wget. So just try to install them in install.sh. When they are already installed, they will maybe be updated but it is not supposed to cause any problems.",eriktews,1436802,2018-02-22T17:50:34Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,3da92af746a94035515086fa6596c1825a6233a4,"Install curl and wget in the installer.

Some editions of ubuntu 16.04 such as the default docker images do not come with curl and wget. So just try to install them in install.sh. When they are already installed, they will maybe be updated but it is not supposed to cause any problems."
1854,https://api.github.com/repos/mozilla/OpenWPM/pulls/165,165,Change sqlite timeout to 60 seconds to avoid database locking problems.,"Sometimes a query fails with ""database is locked"". By changing the timeout from the default value of 5 seconds to 60 seconds, we can maybe avoid that problem. The problem usually looks like this in the logs:

```
DataAggregator       - ERROR    - Unsupported query
<class 'sqlite3.OperationalError'>
database is locked
```",eriktews,1436802,2017-11-23T17:39:52Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,5c118f43bf9993a211641d07a4bd796f810169ee,"Change sqlite timeout to 60 seconds to avoid database locking problems.

Sometimes a query fails with ""database is locked"". By changing the timeout from the default value of 5 seconds to 60 seconds, we can maybe avoid that problem."
1855,https://api.github.com/repos/mozilla/OpenWPM/pulls/164,164,Use extension based http request and responses for building cookie tables,"Fall back to proxy based tables if extension based http_requests
or http_responses does not exist.",gunesacar,5788790,2017-11-12T06:13:36Z,CONTRIBUTOR,True,17,4,1,A web privacy measurement framework,Python,ad96cf53b651f03d139653d5572b102fe48459e2,Use extension based http request and responses for building cookie tables.
1856,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,90c8de4c63254346bb978ac883aa3c76270494f8,Added a Dockerfile and README for building and running OpenWPM on Docker
1857,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,91a5980c579343a6f58653c15af71a2005456722,Merge remote-tracking branch 'upstream/master'
1858,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,385e34f2348071f121d585994af51b4f7602666d,Modified Dockerfile to use already cloned OpenWPM source
1859,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,687be4564e1b73abf118d46e8b3b503dd6bef3fa,Added new browser command  and related utility functions and test
1860,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,73537f33e4078e6c3b646ea96598144652b929ec,Merged banner-detection with latest upstream
1861,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,8349779bfe6157c0229436f8670e37ccf57fd3b8,Merge remote-tracking branch 'upstream/master'
1862,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,145edaafd207ef7e452bbf18793bc4e1ae42fc2f,Update Dockerfile & demo for FF52
1863,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,839120307975334412f8f280e121bd46c64a96a2,Added absolute_import for Python 3/tests
1864,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,e9432eed1a795d08b5b92b03d5c10d7ac83d9332,merged with latest upstream
1865,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,90c7d20e8c4ad126e81687612c7b281aa9ba657a,Bumped up Docker's Firefox
1866,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,674fdd6676641ebca32e873e7e3339b4e2671cd0,removed 2 banner tests
1867,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,7bb3e62771e08f4d5d34459e6c61f56f2954f41c,increased youtube banner test timeout
1868,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,f221be9deb6379afe995f6966859fdb7f43a738c,Merge remote-tracking branch 'upstream/master'
1869,https://api.github.com/repos/mozilla/OpenWPM/pulls/159,159,Add: cookie_banner_detect() browser command & tests;  and Docker support,"The PR adds two things:

First,  a new `cookie_banner_detect() ` browser command, along with utilities (`automation/Commands/utils/banner_utils.py`) and tests (`test/test_banner_detection.py`).

Second, a Dockerfile to build OpenWPM Docker images (along with instructions). I had submitted this PR earlier, and have now updated it for FF52.

(Btw, thanks to @NullHypothesis for the earlier work on the banner-detection.)",hadiasghari,5025042,2017-10-12T19:16:04Z,CONTRIBUTOR,False,38518,0,20,A web privacy measurement framework,Python,6c9b52aad89d838cd27d754418e80ef69bae7089,Merge remote-tracking branch 'upstream/master'
1870,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,f661e61fbb19772e0331799354e83c1f3a1392f2,Adding recursive page source dumping
1871,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,fa2559eea8fca47241f5aa56000605455db508d1,PEP8 Fixes
1872,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,a4bbd9db8cfe5111998b8a29905a4d6222644d5f,Bugfix: revent changes to dump_page_source
1873,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,34a44af686e8c3d5508e65277e7fea2947506372,Updating the API for `dump_page_source` to match new recursive dump
1874,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,720fbaf574c27da015337706a1f49a44f463ed58,Adding test for recursive page source dump command
1875,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,9ab7fd0017b1c7348c637e506fcdba6b6fc5ab37,Python 3 import fix
1876,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,e3edf688cfc3b14540786c7d49655d6814531985,Python 3 compatibility fixes
1877,https://api.github.com/repos/mozilla/OpenWPM/pulls/157,157,Add a recursive page source dump command,"By default, page source dumps only contain the source of the main frame. This adds a command that will also recurse into iframes to save their page source as well.

Dumps are saved with the following structure:
```
{
    'document_url': ""http://example.com"",
    'source': ""<html> ... </html>"",
    'iframes': {
        'frame_1': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_2': {'document_url': ...,
                    'source': ...,
                    'iframes: { ... }},
        'frame_3': { ... }
    }
}
```",englehardt,3280150,2017-10-09T17:30:27Z,MEMBER,True,415,64,22,A web privacy measurement framework,Python,36e3ce94fba13f261ac4b46074259b1a9a4e7204,Adding pointer to new functions in README
1878,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,d84ec7120631b605c2a2478f3bb4f4fa94f3dee2,Adding a full-page screenshot command
1879,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,f6da805b07acfe17f78a6a23373c11d24d765d05,Removing print statements meant for debugging
1880,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,ccc7276c1d78091422133600b32c96fdefead11c,Pillow is required for the new full page screenshot function
1881,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,2aa639079e3490bfea9263e1076ec19c2b2af01c,Save screenshot parts into a separate subfolder
1882,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,faa968d1fa4f3273db77a5ccfc33aa498e455c0a,Better error handling in screenshot saving
1883,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,e42d737638436924b7e0e79a9b70fbc03d9acebb,Better error handling for screenshot function
1884,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,432fe02fabaadc84327310fb10e3d13cc5cf7e2b,Bugfix: Single-part images should now save correctly
1885,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,a1a1a00ada3f572d8a079d19cf4412197eaad543,Bugfix: Adding pillow->PIL map to
1886,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,56458927bd530003329a46c2e4ee5038c86387e7,Updating the API of
1887,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,ec9b3fe2b6dea89338e918a39ec2e30bf337275b,Merge remote-tracking branch 'origin/master' into full_page_screenshots
1888,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,2ee2f9c9eec9b7f5b7401d8c0cb58088f7bd675f,Bugfix: Fixing naming and tests for viewport screenshot command
1889,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,e9c2ef8ce044961d73be2968ef237d5a58cd4f56,Adding documentation
1890,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,7ce19c15e91f22e292dc08b628fd0c61a5def441,Merge remote-tracking branch 'origin/master' into full_page_screenshots
1891,https://api.github.com/repos/mozilla/OpenWPM/pulls/156,156,Add a command to save full page screenshots,"In Selenium 3, screenshots are limited to the current viewport. This adds a full page screenshot command that scrolls the page, takes separate viewport screenshots, and stitches them together for a full page screenshot. Additional notes from the command docstring:

>NOTE: geckodriver v0.15 only supports viewport screenshots. To screenshot the entire page we scroll the page using javascript and take a viewport screenshot at each location. This method will save the parts and a stitched version in the `screenshot_path`. We only scroll vertically, so pages that are wider than the viewport will be clipped. See: https://github.com/mozilla/geckodriver/issues/570

>The screenshot produced will only include the area originally loaded at the start of the command. Sites which dynamically expand as the page is scrolled (i.e. infinite scroll) will only go as far as the original height.

>ALSO NOTE: In geckodriver v0.15 doing any scrolling (or having devtools open) seems to break element-only screenshots. So using this command will cause any future element-only screenshots to be mis-aligned

I'm not going to add tests here, since I've done a bunch of manual testing and it's very easy to verify that the command is working as expected. Automated tests to be addressed in a follow-up issue.",englehardt,3280150,2017-10-09T17:17:41Z,MEMBER,True,222,28,11,A web privacy measurement framework,Python,aa5e2a6fe628e67953016f79fddd6e9c9096ac7f,Bugfix: Full page screenshot command fixed + tests added
1892,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,379d11caf4da94b59166e0102af28ff2284cd458,Adding an option to save all page content
1893,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,9761b06eeb92ebffc1168d0f95ec58933d976e9f,Start LevelDB for both JS and all content saving
1894,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,fdbef681dd437cbb6235440dbaae25df23426100,Bugfix for `save_all_content` option
1895,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,3dc40234ab6b6ee9c497625cda90ae164764f1f7,Fixing unresolved merge conflict
1896,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,ed13a90f0b276fecdb206a1ef6e509139741cfb7,Merge remote-tracking branch 'origin/master' into save_all_content
1897,https://api.github.com/repos/mozilla/OpenWPM/pulls/155,155,Add option to save all page content from the HTTP Instrumentation,We currently only support saving response body content when the response is Javascript. This adds an option to save all response body content regardless of content type.,englehardt,3280150,2017-10-09T16:56:11Z,MEMBER,True,75,26,9,A web privacy measurement framework,Python,a52475b52a10c305bcb9cdce47ac71558e11a4a2,Adding documentation and tests for content saving
1898,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,5fc97dd6f0d43f0ddbfd2ba2548f9bcc2ee76ad2,Adding channelId to link requests and responses
1899,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,bd945c076fdfd4e325a532c08f64be4ece4051db,Monitor HTTP Redirects explicitly
1900,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,a46c72a37ac444a0985a079f87cf4368dcd0a4e3,Bugfix: channelID may be null
1901,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,67398eefc518003ee15862ebf23d6ed6e6dba0d2,Adding crawlID to http_redirects insert statement
1902,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,3a956e04e16d0e82193119a6caeee35202e64d5d,"Bugfix in HTTP Instrument + fixing tests [wip]

Most of the HTTP Instrument tests broke due to a new column being added
in the middle of the http request and response tables. Our tests
shouldn't have such a strong dependence on column order. Let's move
query responses over to the `sqlite3.Row` datatype, which allows access
by name. This is work in progress, I expect a bunch of other tests to
fail on calls to `db_utils::query_db`."
1903,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,ffffb36f90fec7388a7f81d8f0618a12b646b0b9,New query_db API + PEP8 Fixes
1904,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,7f5a4efaa0ccf464c82d64da1e51bc7bdc9d8606,Reverting some changes to expected values causing tests to fail
1905,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,fc36fe89b611472c131544ec8e54ce2215635f46,Bugfix: channel->TopWindow failed due due to incorrect interface
1906,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,a172b4bc6f4ba86b9f5c48461159636171e4cfda,Bugfix: removing duplicate statements left over from merge
1907,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,58324b4804ffaa4674c3e9ab1e557fd88fd4465c,Merge remote-tracking branch 'origin/master' into http_redirects
1908,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,f2b4d5ec3e0e2a5817de9ceb63fcdf7eb845c5c8,Bugfix: exclude *_test.py files from the automated tests
1909,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,746469a132d3d24ad591182d86aa36df95b8b93f,Adding tests for HTTP redirects and channel ID
1910,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,b82554d62c88c6de91fa8bb1773290cb24194fcc,Merge remote-tracking branch 'origin/master' into http_redirects
1911,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,12e61ec8d1ca4bbbb1a6b2543eae056e86913b02,Updating documentation
1912,https://api.github.com/repos/mozilla/OpenWPM/pulls/154,154,"Include channelId in HTTP instrumentation to link requests, responses, and redirects",The http channel interface ([nsIHttpChannel.idl](http://searchfox.org/mozilla-central/rev/1033bfa26f6d42c1ef48621909f04e734a7ed8a3/netwerk/protocol/http/nsIHttpChannel.idl#452-457)) we use to monitor requests and responses added a `channelId` property [in Firefox 49](https://bugzilla.mozilla.org/show_bug.cgi?id=1274556). We can use this ID to explicitly link requests and responses. This also lets us use `nsIChannelEventSink::asyncOnChannelRedirect` to explicitly link channels during an HTTP redirection from one to another.,englehardt,3280150,2017-10-09T16:37:54Z,MEMBER,True,588,173,16,A web privacy measurement framework,Python,74904d43d28b41be85bb0ed98dfeb4b87e075550,Adding logs in the HTTP instrument so channel errors aren't silent
1913,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,a24da928fe1f22c0af303f6499b77f4bee3f1dc3,Remove mitmproxy; replace pyamf with mini-amf.
1914,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,eb1def59fc9d2a73c3e376ce93929ecb8d839b93,"Ensure PIL is available during automated tests on Travis.

PIL is not a dependency of OpenWPM proper, so it would be inappropriate
to list it in requirements.txt, but it _is_ used by one of the tests.
Kludge a direct installation command into .travis.yml."
1915,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,1c5d9356c0078d722e8f66f012316c41634060a0,"Apply python-modernize + some hand tidy-ups.

This should get us 90% of the way to Python 3 support."
1916,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,861052c178240e3fd907a14321711eb8fa6283a0,Allow blank lines in requirements.txt
1917,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,5c131a7623f75899faabf0609a7cffbd152f3ea8,"Automated tests on 2.7 are green, so activate 3.x"
1918,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,a5b76e7d42c52a288c22f1346128d1074456465b,"Remove uses of the 'commands' module.

This module was completely removed in Python 3."
1919,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,fc9a7ff106b97979666b9f4d56827906947ff7e2,urlparse -> six.moves.urllib.parse
1920,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,43dc955d5be7bed97ecd93aec64f53b5b2d24655,One more place where we need to use six.moves.urllib
1921,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,9787c16472479a789cd0081c49f25061a87f7507,Fix bytes/unicode confusion around the internal client/server protocol
1922,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,ae722a9971e7e50fb691ed900a8a7667327fdd89,Add missing paren
1923,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,4bd069ffd6b12ab451c99d624be804a809b0f236,Must also use byte strings in recieve_msg
1924,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,76f07f0e4ec76fece9ca083f37a54519233a0021,"Bump Selenium requirement to 3.3.0 or later.

This may mean install.sh now needs to install something called 'GeckoDriver',
but let's see if we can get away without it."
1925,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,a19aa8dcea810f5308f627e04d9bb78b0ed4df26,"Tidy-ups:

 * Rationalize import ordering in some files.
 * Don't run nontrivial code at module scope when invoked as __main__.
 * If jpm is not available, but the .xpi exists, don't bomb out."
1926,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,3a800c564724f38f6f1721e90a46bc59258c5094,Install geckodriver and ensure it is findable. Bump to Firefox 52.0esr.
1927,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,4408d48f6d8782e6038b7e4dd47aa7045a56e7d2,Delete less
1928,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,2ba17e0ed6768005c360791dd98fbdf21db8fbd0,"Remove more dependencies on firefox-bin.

Since Selenium 3.3 requires a 'geckodriver' executable in
the PATH, put <root_dir>/firefox-bin in the PATH if it exists,
and rely on PATH search to find 'firefox'."
1929,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,5b702a9ade19ccc636bc27e41a9647fbecfe00fe,"Extension updates.

 * Replace Adblock Plus with uBlock Origin
   (which does not need precached filter lists)
 * Replace Ghostery with Disconnect (ditto)
 * Update HTTPS Everywhere to latest version"
1930,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,414e1acc295c4546a5f82702cc3c8aed7d2c8dee,Handle geckodriver copying the target profile.
1931,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,78aaffd28d90b8cda5a78b818a7908b01dc3e20b,"Fix more failures induced by the new Selenium.

We _might_ be down to just HTTP instrumentation problems at this point."
1932,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,7aa04afd58b5e071c4d21102a69259bb8e128c0b,foo.next() -> next(foo) for py3 compat
1933,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,279de8f1a92bd5483776494032309ff40314f6cf,"Further workaround for Python 3 + Selenium 3 + FIFOs.

The behavior of `open(path, ""a+"")` differs between Python 2 and Python 3.
In the latter, it will try to seek to the end, and if this fails (e.g. if
`path` is a pipe) it will throw an exception.  To work around this we
have to monkey-patch selenium.webdriver.firefox.service.Service."
1934,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,6eb51b745131517a08369c826ad79b580f9e32c5,Fix a few more places where 'str' is used sloppily.
1935,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,19e037e78827b83c0ffbe505e00176a49033f1c5,Print a complete traceback when reading an LSO fails.
1936,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,d954c71d1e83604e07c7b7b630dabe68aa6e8a8d,"Fix thinko in test_storage_vectors.py.

sqlite3 fetchall() has always returned an array of tuples even when
the query returns a single row; Python 2's sloppy cross-type comparisons
let us get away with it."
1937,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,bcb3edae3965569afc41c9b0e8bd8dcb46cba3cc,Another str -> binary_type adjustment.
1938,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,c12399f134feb4746c2b4ce212a4cf6331c78f0e,Fix yet more bytes/str/unicode confusion
1939,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,3d65cfff94de88be926570464e85d4752ae2453f,Work around Selenium bug #3670.
1940,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,7337377fa3360f32732556ca651ab72edaa187f9,Update expectations for Firefox 52.
1941,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,2ba308aea30d9696ab53195b2adc146733ac2b0c,Whack some more byte/unicode confusion moles.
1942,https://api.github.com/repos/mozilla/OpenWPM/pulls/152,152,"Update to Selenium 3.4+, FF 52 ESR, and add support for Python 3.4+.","This builds on top of #143. I've successfully run crawls using most of the platform features over the past 2 months, so I think this is ready to merge to master.

The following changes above that PR are included:
1. Bump Selenium and FF version to most recent.
2. Bugfixes in process management, in the manual test script, and in POST request processing.
3. Added support for WebExtensions (note that our extension is still an add-on sdk extension).
4. Updated browser prefs for FF 52.
5. Updated bundled extensions.
6. Disabled Tracking Protection. We need to determine how to gracefully update the tracking protection lists before we can re-enable.
7. Completely remove the proxy from the tree.
8. Remove webdriver self-identification protections. 
9. Some additional minor tweaks, refactorings, and PEP8 Fixes.

One known issue: Ghostery, uBlock Origin, and Disconnect will all phone home in some way when the browser first starts. uBlock Origin downloads all of the lists and Disconnect fetches the public suffix list. I have set any preferences/settings I could find to disable auto-updating, so I think these updates are inevitable. This is undesirable for two reasons: we don't want filter lists changing mid-measurement and stateless crawls will download these lists on **every** page visit. 

We should be able to prime an otherwise bare browser profile with the filter lists for any enabled extension and load that profile in both a stateful or stateless crawl. This would also allow us to re-enable Tracking Protection and Safebrowsing, if desired. I'll create a follow-up issue once merged.

Thanks to @zackw for doing all of the heavy lifting.",englehardt,3280150,2017-10-08T22:56:09Z,MEMBER,True,2140,2005,79,A web privacy measurement framework,Python,84050ba71eebe57e00ca756adb4ef5f65b2be54f,"If Flash is active, set it to run automatically."
1943,https://api.github.com/repos/mozilla/OpenWPM/pulls/151,151,Added a colume with the current url.,"This adds a colume named top\_url with the current URL in the address bar to the extension instrumentation to close issue #77 on github. In detail, this has been added for the http requests and reponses, javascript and cookie events.",eriktews,1436802,2017-09-19T13:48:35Z,CONTRIBUTOR,False,30,5,8,A web privacy measurement framework,Python,566a7c8445b312a7dbafd03fe0410bb2f3500cac,"Added a colume with the current url.

This adds a colume named top_url with the current URL in the address bar to the extension instrumentation to close issue #77 on github. In detail, this has been added for the http requests and reponses, javascript and cookie events."
1944,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,90c8de4c63254346bb978ac883aa3c76270494f8,Added a Dockerfile and README for building and running OpenWPM on Docker
1945,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,91a5980c579343a6f58653c15af71a2005456722,Merge remote-tracking branch 'upstream/master'
1946,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,385e34f2348071f121d585994af51b4f7602666d,Modified Dockerfile to use already cloned OpenWPM source
1947,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,687be4564e1b73abf118d46e8b3b503dd6bef3fa,Added new browser command  and related utility functions and test
1948,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,73537f33e4078e6c3b646ea96598144652b929ec,Merged banner-detection with latest upstream
1949,https://api.github.com/repos/mozilla/OpenWPM/pulls/150,150,Added a Dockerfile and README for building and running OpenWPM on Docker,,hadiasghari,5025042,2017-09-01T15:49:26Z,CONTRIBUTOR,False,39464,0,21,A web privacy measurement framework,Python,8349779bfe6157c0229436f8670e37ccf57fd3b8,Merge remote-tracking branch 'upstream/master'
1950,https://api.github.com/repos/mozilla/OpenWPM/pulls/149,149,Installer improvements,Improved the installer a bit so that it's more suitable for scripting.,eriktews,1436802,2017-08-29T16:23:43Z,CONTRIBUTOR,True,34,12,2,A web privacy measurement framework,Python,ab337bfda02ba2dee155c0e9aed9ef11473e9010,Use apt-get -y so there is no promt for the user anymore.
1951,https://api.github.com/repos/mozilla/OpenWPM/pulls/149,149,Installer improvements,Improved the installer a bit so that it's more suitable for scripting.,eriktews,1436802,2017-08-29T16:23:43Z,CONTRIBUTOR,True,34,12,2,A web privacy measurement framework,Python,e1f19e8bb2d5e4062aed12098e47595bc31af0b4,Added --flash and --no-flash flags to install.sh.
1952,https://api.github.com/repos/mozilla/OpenWPM/pulls/147,147,Added a little visualization,,amoghbl1,1174084,2017-06-21T20:46:12Z,CONTRIBUTOR,False,88,0,2,A web privacy measurement framework,Python,affcc5771c93225ddf9c05d5057ae8ee1c18d7f6,Added a little visualization
1953,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,a24da928fe1f22c0af303f6499b77f4bee3f1dc3,Remove mitmproxy; replace pyamf with mini-amf.
1954,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,eb1def59fc9d2a73c3e376ce93929ecb8d839b93,"Ensure PIL is available during automated tests on Travis.

PIL is not a dependency of OpenWPM proper, so it would be inappropriate
to list it in requirements.txt, but it _is_ used by one of the tests.
Kludge a direct installation command into .travis.yml."
1955,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,1c5d9356c0078d722e8f66f012316c41634060a0,"Apply python-modernize + some hand tidy-ups.

This should get us 90% of the way to Python 3 support."
1956,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,861052c178240e3fd907a14321711eb8fa6283a0,Allow blank lines in requirements.txt
1957,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,5c131a7623f75899faabf0609a7cffbd152f3ea8,"Automated tests on 2.7 are green, so activate 3.x"
1958,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,a5b76e7d42c52a288c22f1346128d1074456465b,"Remove uses of the 'commands' module.

This module was completely removed in Python 3."
1959,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,fc9a7ff106b97979666b9f4d56827906947ff7e2,urlparse -> six.moves.urllib.parse
1960,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,43dc955d5be7bed97ecd93aec64f53b5b2d24655,One more place where we need to use six.moves.urllib
1961,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,9787c16472479a789cd0081c49f25061a87f7507,Fix bytes/unicode confusion around the internal client/server protocol
1962,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,ae722a9971e7e50fb691ed900a8a7667327fdd89,Add missing paren
1963,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,4bd069ffd6b12ab451c99d624be804a809b0f236,Must also use byte strings in recieve_msg
1964,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,76f07f0e4ec76fece9ca083f37a54519233a0021,"Bump Selenium requirement to 3.3.0 or later.

This may mean install.sh now needs to install something called 'GeckoDriver',
but let's see if we can get away without it."
1965,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,a19aa8dcea810f5308f627e04d9bb78b0ed4df26,"Tidy-ups:

 * Rationalize import ordering in some files.
 * Don't run nontrivial code at module scope when invoked as __main__.
 * If jpm is not available, but the .xpi exists, don't bomb out."
1966,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,3a800c564724f38f6f1721e90a46bc59258c5094,Install geckodriver and ensure it is findable. Bump to Firefox 52.0esr.
1967,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,4408d48f6d8782e6038b7e4dd47aa7045a56e7d2,Delete less
1968,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,2ba17e0ed6768005c360791dd98fbdf21db8fbd0,"Remove more dependencies on firefox-bin.

Since Selenium 3.3 requires a 'geckodriver' executable in
the PATH, put <root_dir>/firefox-bin in the PATH if it exists,
and rely on PATH search to find 'firefox'."
1969,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,5b702a9ade19ccc636bc27e41a9647fbecfe00fe,"Extension updates.

 * Replace Adblock Plus with uBlock Origin
   (which does not need precached filter lists)
 * Replace Ghostery with Disconnect (ditto)
 * Update HTTPS Everywhere to latest version"
1970,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,414e1acc295c4546a5f82702cc3c8aed7d2c8dee,Handle geckodriver copying the target profile.
1971,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,78aaffd28d90b8cda5a78b818a7908b01dc3e20b,"Fix more failures induced by the new Selenium.

We _might_ be down to just HTTP instrumentation problems at this point."
1972,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,7aa04afd58b5e071c4d21102a69259bb8e128c0b,foo.next() -> next(foo) for py3 compat
1973,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,279de8f1a92bd5483776494032309ff40314f6cf,"Further workaround for Python 3 + Selenium 3 + FIFOs.

The behavior of `open(path, ""a+"")` differs between Python 2 and Python 3.
In the latter, it will try to seek to the end, and if this fails (e.g. if
`path` is a pipe) it will throw an exception.  To work around this we
have to monkey-patch selenium.webdriver.firefox.service.Service."
1974,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,6eb51b745131517a08369c826ad79b580f9e32c5,Fix a few more places where 'str' is used sloppily.
1975,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,19e037e78827b83c0ffbe505e00176a49033f1c5,Print a complete traceback when reading an LSO fails.
1976,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,d954c71d1e83604e07c7b7b630dabe68aa6e8a8d,"Fix thinko in test_storage_vectors.py.

sqlite3 fetchall() has always returned an array of tuples even when
the query returns a single row; Python 2's sloppy cross-type comparisons
let us get away with it."
1977,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,bcb3edae3965569afc41c9b0e8bd8dcb46cba3cc,Another str -> binary_type adjustment.
1978,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,c12399f134feb4746c2b4ce212a4cf6331c78f0e,Fix yet more bytes/str/unicode confusion
1979,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,3d65cfff94de88be926570464e85d4752ae2453f,Work around Selenium bug #3670.
1980,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,7337377fa3360f32732556ca651ab72edaa187f9,Update expectations for Firefox 52.
1981,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,2ba308aea30d9696ab53195b2adc146733ac2b0c,Whack some more byte/unicode confusion moles.
1982,https://api.github.com/repos/mozilla/OpenWPM/pulls/143,143,"Support Python 3.4+, Selenium 3.3 and Firefox 52esr","This PR addresses issues #88, #92, #93, and maybe #101.

Selenium 2.x does not support Python 3, so it's necessary to bump the Selenium and Firefox versions, and that was actually the hardest part of the change.  MITMProxy has been completely ripped out, but I kept the proxy_queue around in case it is desirable to add some other HTTP proxy in the future (it'll just always be None and do nothing).  The only other dependency that hadn't been updated was PyAMF, which I forked and pruned down to just enough for what OpenWPM needs.

This passes the internal test suite, but it probably needs quite a bit more testing; I expect there is lots of stuff the internal test suite does not cover.  I am happy to continue working with you on this, but I need to get back to the project that this is in aid of, so I may be slow, and I'm not going to do any more testing myself, beyond what my own project involves.  Y'all are welcome to add patches on top of this, however is convenient for you.  I may add patches on top of this if I turn up more problems in my own testing.  (More bytes/str/unicode mixup bugs are practically certain to exist.)

TravisCI report for my branch: https://travis-ci.org/zackw/OpenWPM

Some notes on specific concerns from the issues and/or bits of the patch that may not seem obvious:

 * Yes, Python 2 is still supported.  I am *tempted* to start a further branch that only supports 3.6+ and uses asyncio instead of threads, as this would make it much easier to integrate with my own code, but that's probably at least another man-month of coding, and from a project management perspective I'm sure you don't want to take that plunge all at once. :wink:
 * The OpenWPM extension *seems* to load and run just fine, despite the concerns about extension signatures and e10s in #92. (I did notice something about ""extension @openwpm incompatible with e10s"" in firefox startup spew.)
 * I had to work around some bugs in GeckoDriver and Selenium.  The one that worries me the most is that it copies the profile, [geckodriver issue #299](https://github.com/mozilla/geckodriver/issues/299) implies that it's *supposed* to delete its copy when it exits, and profile archiving relies on it not doing that. My long-term recommendation would actually be to work directly with the [Marionette client library](https://marionette-client.readthedocs.io/en/latest/), which would eliminate *both* Selenium and GeckoDriver from the equation, but I expect that would be a lot of work and might break existing OpenWPM crawler scripts.  The Marionette API *resembles* the Selenium/Python API but is not actually a subset or superset, I don't think.
 * Selenium 3 does not expose itself to page JS, so toggling disable_webdriver_self_id no longer has any effect.  There are a number of vestiges of that kept around until we're sure we don't need to go back to Selenium 2.
 * Selenium 3 needs both geckodriver and firefox to be in $PATH, so what we do now is make sure the top-level firefox-bin directory is at the head of $PATH if it exists, and `install.sh` copies geckodriver in there.  If it doesn't exist, we go ahead and try to run system-installed firefox/geckodriver instead.
 * I un-disabled Tracking Protection but I did not actually test it.  With the removal of MITMProxy, perhaps ""behind the scenes"" network traffic is less of a problem now?
 * I replaced Adblock Plus with uBlock Origin and Ghostery with Disconnect, because that seems to be what privacy-conscious users are doing these days.  These are also not being tested.  I can't spare the time to develop tests for them right now.
 * There are a number of places where I rejiggered the code just to make it easier to read.  I apologize if this makes the _diff_ harder to read.
",zackw,325899,2017-03-17T18:33:54Z,CONTRIBUTOR,False,1028,1277,70,A web privacy measurement framework,Python,84050ba71eebe57e00ca756adb4ef5f65b2be54f,"If Flash is active, set it to run automatically."
1983,https://api.github.com/repos/mozilla/OpenWPM/pulls/140,140,Make visit_id = -1 when visit_id would otherwise be null,"When visit_id is null, and the extension attempts to log something, it should send '-1' instead of null to the data aggregator.",dreisman,5740389,2017-02-02T17:47:34Z,CONTRIBUTOR,True,4,1,2,A web privacy measurement framework,Python,0ec97d16edaf6516eb7abea37a2c5ffa8289d44f,Make visit_id = -1 when visit_id would otherwise be null
1984,https://api.github.com/repos/mozilla/OpenWPM/pulls/137,137,Improve instrumentObject javascript instrumentation,"This pull request includes three fixes.

1. Gets of instrumented nested objects and functions are not logged to reduce clutter in the database.
2. A `preventSets` option has been added to prevent overwriting of nested instrumented objects and functions
3. Function arguments are not longer saved on individual rows, and are instead saved as a json object, such that `function('a', 123, 'b')` will save arguments `{""0"":""a"", ""1"":123, ""2"":""b""}`. The purpose of this nesting with index is to make it possible to slice the json column using a sqlite extension like `json1`. 

Unfortunately, (3) will require all analysis scripts using the javascript instrumentation to be updated.",englehardt,3280150,2017-01-25T22:36:40Z,MEMBER,True,194,141,8,A web privacy measurement framework,Python,6cb26dbfa33377c1a6ef921bc86cc665e63e80a2,"Preventing logs of gets for instrumented objects and functions

In #133 I intentionally logged gets of nested, instrumented objects and
functions with the intention of having full coverage. However, this
adds quite a bit of records to the database."
1985,https://api.github.com/repos/mozilla/OpenWPM/pulls/137,137,Improve instrumentObject javascript instrumentation,"This pull request includes three fixes.

1. Gets of instrumented nested objects and functions are not logged to reduce clutter in the database.
2. A `preventSets` option has been added to prevent overwriting of nested instrumented objects and functions
3. Function arguments are not longer saved on individual rows, and are instead saved as a json object, such that `function('a', 123, 'b')` will save arguments `{""0"":""a"", ""1"":123, ""2"":""b""}`. The purpose of this nesting with index is to make it possible to slice the json column using a sqlite extension like `json1`. 

Unfortunately, (3) will require all analysis scripts using the javascript instrumentation to be updated.",englehardt,3280150,2017-01-25T22:36:40Z,MEMBER,True,194,141,8,A web privacy measurement framework,Python,70bba2b35034dba3dca2ea5653449d1d79d27267,"Add `preventSet` option to instrumentObject js instrumentation

This option can be used to prevent other scripts from overwriting any
instrumented object/function, possibily preventing future logs."
1986,https://api.github.com/repos/mozilla/OpenWPM/pulls/137,137,Improve instrumentObject javascript instrumentation,"This pull request includes three fixes.

1. Gets of instrumented nested objects and functions are not logged to reduce clutter in the database.
2. A `preventSets` option has been added to prevent overwriting of nested instrumented objects and functions
3. Function arguments are not longer saved on individual rows, and are instead saved as a json object, such that `function('a', 123, 'b')` will save arguments `{""0"":""a"", ""1"":123, ""2"":""b""}`. The purpose of this nesting with index is to make it possible to slice the json column using a sqlite extension like `json1`. 

Unfortunately, (3) will require all analysis scripts using the javascript instrumentation to be updated.",englehardt,3280150,2017-01-25T22:36:40Z,MEMBER,True,194,141,8,A web privacy measurement framework,Python,4f94f24ba190fa82ccef60dc32e057e5fa09d84f,"Save javascript function arguments as json instead of separate rows

This should help reduce the javascript table size by about 33% and will
make it easier to filter rows by one argument. We choose to save the
arguments as a json object instead of a strified array to make slicing
easier, both in a pandas dataframe and with sqlite extensions like
`json1`."
1987,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,bd4fa88d31b0a96c12c3a3d47d9ec5e104c4ce25,"Fix instrumentObject for data properties.

instrumentObject only worked for accessor properties (those with get
and set methods on their descriptor). data properties (those only with
value attribute on descriptor) would break when instrumented.

Also slightly improving documentation for instrumentObject"
1988,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,b608519945b0df50532c5df4a10b9a330cfb44cb,"Adding testing platform configuration flag.

A `testing` boolean is available within `manager_params` in the python
portion of the platform, in the `config` dictionary in the extension
scripts, and in the `testing` variable for the injected content script.
The flag is being added to make it possible to expose different
functionality throughout the platform when it is being tested, whether
manually or in automated tests.

As an example, we expose the `instrumentObject` method on the page
global object `window` when testing."
1989,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,72ccfa6d264704252bbc07f23a7ab4f5d9cfa9c5,Updating instrumentObject documentation
1990,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,5962239882228ac564e4f1aae1bb04b9ffc73ecf,[WIP] Adding tests for instrumentObject. Mostly a stub test file.
1991,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,bdbf8f929c590fadef9e2fbd34a2e4d0ece2832c,Adding tests for instrumentObject
1992,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,887393e03b70f13e293c5a9213ef1a568ff99000,Merge remote-tracking branch 'origin/master' into instrument_obj_fixes
1993,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,3aeb5a3a5434dcc8db6583d0e648483e47dd5e67,"Refactor instrumentObject so functions are fully instrumented.

Previously function instrumentation was treated as an alternative operation
to other property instrumentation. This isn't necessary as functions
are accessed the same way other object properties are, so we should
instrument access to them in the same way. Instead, the logging of a
function calls is done by additional instrumentation of the returned
function."
1994,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,829de7c867c0dd68c8a5fde0751b38ed40dba489,Updating utility location
1995,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,729f0dbe517290ea71feb3fa953fb78364343fb5,Add support for recursive object instrumentation
1996,https://api.github.com/repos/mozilla/OpenWPM/pulls/133,133,Fix and expand instrumentObject javascript instrumentation and add tests,"The current `instrumentObject` javascript call instrumentation assumes that all properties being instrumented are accessor properties, and thus fails to work correctly for data properties. This pull request:

* Fixes `instrumentObject` for both accessor and data properties
* Refactors `instrumentObject` to better handle function instrumentation. It was previously possible to miss certain instrumentation when functions were overwritten by values or vice-versa. Similarly, when a function is overwritten by a new function, the new function is now instrumented on-the-fly.
* Simplifies the API -- it's no longer necessary to specify when the object being instrumented is a prototype of the object to be monitored.
* Adds optional ""recursive"" instrumentation that will instrument any nested objects within the object in question
* Adds tests for `instrumentObject` along with a ""testing"" mode for OpenWPM, which makes it possible to only use certain configuration options when set.

There are still some limitations
1. Unlike before, every `get` is recorded, even for function calls and nested objects. Though this is more correct, it adds noise to the logs. I've decided to keep this functionality so if any object were overwritten, we would still see gets and sets of the new object (even if the new object isn't instrumented -- see below).
    1. `console.log(test.obj1.obj2.prop1);` will log a `get` for `obj1`, `obj2`, and `prop1` when `test` is instrumented recursively.
    2. `test.methodCall(argument1);` will log a `get` for `test.methodCall` as well as a `call` for the function.
2. When instrumenting recursively, objects overwritten with new objects do not re-instrument the new object.
",englehardt,3280150,2017-01-06T01:07:51Z,MEMBER,True,697,272,11,A web privacy measurement framework,Python,24bff3804884b6b8b6074a8e7a50af96e981977e,Addressing review comments in #133.
1997,https://api.github.com/repos/mozilla/OpenWPM/pulls/132,132,Distribute Travis tests to four concurrent jobs.,"This is to reduce the test wall time.
With this change Travis tests will take 7-8 mins (was 20+mins).

Measure and print the slowest ten tests.",gunesacar,5788790,2016-12-31T01:56:17Z,CONTRIBUTOR,True,12,1,2,A web privacy measurement framework,Python,7c7cbae57e89f2b3ebff3c36a4d294dffd1180c0,"Distribute Travis tests to four concurrent jobs.

This reduces the test wall time to 7-8 mins (was 20+mins).

Measure and print the slowest ten tests."
1998,https://api.github.com/repos/mozilla/OpenWPM/pulls/131,131,"Refactor utilities, add a database utility module","Add a new utility module for DB related
functions. This is to be used by test and data analysis code.

Use shutil's rmtree, remove file_utils.py.
Move domain_utils.py to automation/utilities.

Use domain_utils' `get_psl`, remove repeated PSL related code.",gunesacar,5788790,2016-12-31T01:36:04Z,CONTRIBUTOR,True,120,126,13,A web privacy measurement framework,Python,2f2bf9ceba5037c172aabd14ea2007053271ff15,"Refactor utilities, add a database utility module.

Add a new utility module for DB related
functions. This is to be used by test and data analysis code.

Move domain_utils.py to automation/utilities.
Remove repeating PSL related code."
1999,https://api.github.com/repos/mozilla/OpenWPM/pulls/129,129,Don't complain for visitID being null in debugging mode.,"When `debugging` is true, we don't expect to have a valid `visitID`
and we don't execute SQL statements.

Fixes #128.",gunesacar,5788790,2016-12-28T10:55:11Z,CONTRIBUTOR,True,1,1,2,A web privacy measurement framework,Python,146a2dc790993aefe1602b9ad352e990991bfa50,"Don't complain for visitID being null in debugging mode.

When `debugging` is true, we don't expect to have a valid `visitID`
and we don't execute SQL statements.

Fixes #128."
2000,https://api.github.com/repos/mozilla/OpenWPM/pulls/127,127,Add instrumentation for document.cookie,"Log cookie read and writes, capture call stack.

OpenWPM already monitors cookie change events in `cookie-instrument.js`,
but it doesn't capture calls to read cookies.

Remove leading and trailing whitespace from Javascript call stack.",gunesacar,5788790,2016-12-21T22:29:21Z,CONTRIBUTOR,True,43,3,5,A web privacy measurement framework,Python,60f3ac37ecdd2bc21fb14504216860bfe9548d33,"Add instrumentation for document.cookie.

Log cookie read and writes, capture call stack."
2001,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,d2bb45ec686333ba8b074a15510977d1ec63d39c,"First stage of logging from extension - MPLogger is getting messages, for some reason it isn't actually logging them..."
2002,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,3c15d81a380ca68baf7f33ae350e3d5c6ec97e23,"Logging from extension is working, except for from content script"
2003,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,ba061f5aaa6bdc89c27e77eb60d0c4ee410ec3e4,Added basic log messages to extension
2004,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,69f53316cbd2388b0f3e5a97b334ec2657ada694,Fix typo
2005,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,5f0f0a5970d77d4a6400813cf3a4c6dc9806bf0b,"Bug fixes, tests are passing."
2006,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,e4d7dc8c11355ba60d87b74d479f2d5feb42b131,Fixed breaking typo
2007,https://api.github.com/repos/mozilla/OpenWPM/pulls/126,126,Extension logging,"Adding logging to Firefox extension, along with some basic log messages.

Future work, which I'd like to save for a different PR:
-Adding logging to the content script: I'd rather not couple this enhancement to that one, though they are similar.

It isn't productive to write tests that test specific log messages - if you can think of a more robust way to automate the check that logging works let me know.",dreisman,5740389,2016-12-21T21:52:41Z,CONTRIBUTOR,True,128,16,6,A web privacy measurement framework,Python,910c0c78412e2ab954b1c227fe477f6771fcaa5e,Adding log level information to loggingdb.js comments
2008,https://api.github.com/repos/mozilla/OpenWPM/pulls/125,125,Store POST request data as JSON in the database.,"Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.",gunesacar,5788790,2016-12-21T01:25:08Z,CONTRIBUTOR,True,626,12,12,A web privacy measurement framework,Python,f4cc4ef180cf8c74b5ea2edb6bf3c124b888f1f8,"Store POST request data as JSON in the database.

Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.
Add test for byte array POST data.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.

Fix some style inconsistencies."
2009,https://api.github.com/repos/mozilla/OpenWPM/pulls/125,125,Store POST request data as JSON in the database.,"Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.",gunesacar,5788790,2016-12-21T01:25:08Z,CONTRIBUTOR,True,626,12,12,A web privacy measurement framework,Python,ddb28215e1f0d7600883cfbfff9e457138f59f0a,"Avoid storing non-headers from POST messages in the headers column.

We were storing all the request headers from upload stream in the
headers column. We found out that in some cases,
non-header data are interpreted as headers since they have the same
key:value format.

With this change, we'll store the headers selectively.

Remove the handling of fallback to POST ""lines"" when the post body is
empty. We haven't observed this fallback on the 6000 sites we
crawled (using the record_post branch)."
2010,https://api.github.com/repos/mozilla/OpenWPM/pulls/125,125,Store POST request data as JSON in the database.,"Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.",gunesacar,5788790,2016-12-21T01:25:08Z,CONTRIBUTOR,True,626,12,12,A web privacy measurement framework,Python,08c9275d29469415a8c57b344fa7a4539682de5e,Update the .xpi
2011,https://api.github.com/repos/mozilla/OpenWPM/pulls/125,125,Store POST request data as JSON in the database.,"Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.",gunesacar,5788790,2016-12-21T01:25:08Z,CONTRIBUTOR,True,626,12,12,A web privacy measurement framework,Python,2c6b28e6b14b53c29bc75d577c0754ad5afbce33,Update README.md about POST recording.
2012,https://api.github.com/repos/mozilla/OpenWPM/pulls/125,125,Store POST request data as JSON in the database.,"Incorporated some code from: https://github.com/redline13/selenium-jmeter

Handle various content encodings for the POST data (encType).
This includes `text/plain`, `application/x-www-form-urlencoded` and
`multipart/form-data`.

Store ""request headers from upload stream"" in the database.
We add additional headers from POST body to existin headers column.

Discard OCSP (POST) requests to prevent noise.

Add tests for form submissions with different encodings by JavaScript.
Add tests for making POST requests with AJAX (jQuery) and FormData.

Handle exception when looking up the `Content-Type` response header.

Add shared/utils.js file. We can add common test functions to this file.",gunesacar,5788790,2016-12-21T01:25:08Z,CONTRIBUTOR,True,626,12,12,A web privacy measurement framework,Python,df50fb2a15afd3f6e05264134fd1cad9e50318ec,"Fix issues raised in the review.

Make timestamp the last column again.
Add debug logs for stream types.

Add more extensive comments for POST data parsing and streams.

Return original formData without modification, if the POST
data is not parseable into key=value form.

Remove missing onload handler in the post data test.
Add test for parsing file uploads.
Add test for sending base64 encoded data."
2013,https://api.github.com/repos/mozilla/OpenWPM/pulls/124,124,"Minor test refactoring: DRY get_config, improve runtime environment tests","Move boilerplate `get_config` code to the parent test class
This is to remove the frequently repeating code from the tests.

Read the python dependencies to be tested from requirements.txt

Add tests to make sure firefox-bin directory and the Firefox
binary within exist.

Fix some PEP8 warnings in the test code.

Remove unused imports.",gunesacar,5788790,2016-12-18T20:23:24Z,CONTRIBUTOR,True,161,176,13,A web privacy measurement framework,Python,16d67cd803b214227d61c3bc30ba2018fed84f3b,"Move boilerplate get_config code to the parent test class.

Read the python modules to be tested from requirements.txt

Add tests to make sure firefox-bin directory and the Firefox
binary within exist.

Fix some PEP8 warnings in the test code.

Remove unused imports."
2014,https://api.github.com/repos/mozilla/OpenWPM/pulls/124,124,"Minor test refactoring: DRY get_config, improve runtime environment tests","Move boilerplate `get_config` code to the parent test class
This is to remove the frequently repeating code from the tests.

Read the python dependencies to be tested from requirements.txt

Add tests to make sure firefox-bin directory and the Firefox
binary within exist.

Fix some PEP8 warnings in the test code.

Remove unused imports.",gunesacar,5788790,2016-12-18T20:23:24Z,CONTRIBUTOR,True,161,176,13,A web privacy measurement framework,Python,c75a7f79065ed413e456d4d24191d50a33c0f744,"Use py.test tmpdir fixture instead of mkdtemp.

py.test tmpdir directory names are more convenient.
We add a property to access the tmpdir fixture from get_test_config."
2015,https://api.github.com/repos/mozilla/OpenWPM/pulls/122,122,"Don't use system Firefox binary in the manual tests, improve terminal log colors","Switch to test directory before starting the web server.

Log table name for the database queries to terminal.
Update terminal colors for the manual_test to be more readable, will look like this:

![terminal](https://cloud.githubusercontent.com/assets/5788790/21231977/64cd5722-c2ea-11e6-8538-303df4bba51c.png)

Currently it looks like this:
![terminal_current](https://cloud.githubusercontent.com/assets/5788790/21232265/52b17ed2-c2eb-11e6-8e99-4ee78b806f8d.png)

",gunesacar,5788790,2016-12-15T16:18:31Z,CONTRIBUTOR,True,28,9,4,A web privacy measurement framework,Python,c4f33ac9f27ef29ae7880b181147674e8376df09,"Don't use the system Firefox binary in the manual tests.

Log table name for DB inserts to terminal.
Update terminal colors used in the manual test to be more readable.

Switch to test directory before starting the web server.

Regenerate openwpm.xpi."
2016,https://api.github.com/repos/mozilla/OpenWPM/pulls/121,121,Store timestamp for javascript instrumentation.,"By timestamping Javascript calls, we could correlate network events to Javascript execution.",gunesacar,5788790,2016-12-14T23:33:13Z,CONTRIBUTOR,True,20,3,5,A web privacy measurement framework,Python,50a0330d512f03701c61793223cba5967dd20357,"Store timestamp for javascript instrumentation.

We use `canvas_fingerprinting.html` test page to test both
property access and function call instrumentation (logCall and logValue)."
2017,https://api.github.com/repos/mozilla/OpenWPM/pulls/120,120,"Fixed bug in TaskManager.browse() wrapper, where it was accidentally …",…calling get(),dreisman,5740389,2016-12-13T04:09:30Z,CONTRIBUTOR,True,69,3,2,A web privacy measurement framework,Python,ec7a90e860c254c81508e518689ad3806bf1bde1,"Fixed bug in TaskManager.browse() wrapper, where it was accidentally calling get()"
2018,https://api.github.com/repos/mozilla/OpenWPM/pulls/120,120,"Fixed bug in TaskManager.browse() wrapper, where it was accidentally …",…calling get(),dreisman,5740389,2016-12-13T04:09:30Z,CONTRIBUTOR,True,69,3,2,A web privacy measurement framework,Python,e0593d14627efafde9a95077e09aa8a9044b38b5,Added test of TaskManager.browse()
2019,https://api.github.com/repos/mozilla/OpenWPM/pulls/112,112,Fix test page URL and asserts in the HTTP stacktrace test.,"The test_http_instrumentation.py test was passing without even running the asserts due to a typo on the URL.
DRY in the expected.py.
Fix tab-space mix up in the test page.",gunesacar,5788790,2016-12-05T14:36:17Z,CONTRIBUTOR,True,17,13,3,A web privacy measurement framework,Python,af03b187d981ebe847c806e0d1e56c762395b037,"Fix the problems with the test page URL and asserts in the HTTP stack trace test.

DRY in the expected.py.
Fix tab-space mix up in the test page."
2020,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,fef6c32c508236e24c86deab79b35e8eec1b02f1,"[WIP] Adding extension-based HTTP instrumentation.

Includes flattened commits by @dreisman:
53ff16c37fdf6d2a47917d32bbb9d645402c5ab2
ecd719beaae979e1292d33e1b4002801d0951eb7
2a57dd985fe977dd64509e4941cde9214c7d183b

Conflicts:
	automation/DeployBrowsers/deploy_firefox.py
	automation/Extension/firefox/index.js
	automation/default_browser_params.json"
2021,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,d659792766b940755634877cdc1e6a8267fa9eb7,"Instrument the stackstrace for the HTTP requests.

Use a stack trace format similar to the javascript instrumentation.
Add a function to parse HTTP stack trace strings.
Add a test for the HTTP callstack instrumentation.

Conflicts:
	automation/platform_utils.py"
2022,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,64a76600488224da77c67f498ab407a17b67a1ee,Fix expected import error.
2023,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,32728424821b05503d0faf94a37e56f4b2bc3b6c,Add test for a page with no script initiated calls.
2024,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,d3d59ae8393532aa21c949b4a93daf48e51502c5,"Exclude chrome callers from http stackstrace, add new tests.

Add a test for parse_http_stack_trace_str.
Add a test for http stackstrace instrumentation where we use different
 methods to inject an element to trigger a request (appendChild and
 innerHTML).
Test http stackstrace with an external script.
Combine http stackstrace tests in a single page."
2025,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,9449eb757225505678680e2b55fbaec0395a8e75,Fixing bug in extension-based HTTP instrumentation
2026,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,6d48dcfa02b0fb067a4879f3ded8a286cf632ed8,"Fixing encoding issues in extension.

I've added UTF-8 encoding to the escape function and made sure the
function is being called for any field that may contain non-ascii
characters. Thus, we should no longer have to deal with encoding issues
on the receiving end of the socket. Encoding utf-8 -> unicode can happen
elsewhere in the application. As it stands, sqlite is fine writing utf-8
encoded values for these queries."
2027,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,057ab5d3257546b425259f0a710b3221044d7cf5,Updating broken test from new encoding changes
2028,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,452ac2815b795783859eb8bbcd11fb1a6be7ee3e,"Merge branch 'master' of github.com:citp/OpenWPM into http-extension

Conflicts:
	automation/DeployBrowsers/deploy_firefox.py
	automation/Extension/firefox/index.js
	automation/default_browser_params.json"
2029,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,7e48327c72851062e6512bc644effed883aaa5f5,Cleanup and minor refactor of response handling
2030,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,4697fcdf3b837e88ad57c196a02b0fde91b5c880,Refactoring http instrument
2031,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,6c5f4474f215e7b6cfa93dc13e9d54c69dcf5e31,"Adding content hashing using MD5

I attempted to use all of the 128-bit murmurhash3 libraries available on
npm. All either have requirements that keep them from working in the
browser or failed to work correctly once in the browser."
2032,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,643eba54d6decdd0777ed14c346d9acb68efa745,[WIP] Refactor socket.js to use classes
2033,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,86e9a93485c4b8c78078ce6ad1eda777f0a87d0d,Fixing several bugs in socket.js and the extension-platform interface
2034,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,ffc64ed5a31f66bb2f265f6284d556a833d761a4,Fixing broken http tests from API change
2035,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,44e82c03d84acc560a2454176e50edaedef7c573,Adding support for logging to leveldb database from extension
2036,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,602b2c1080e7addaf6db0fdf06d5f77c70b3554a,Merge branch 'http-extension' of github.com:citp/OpenWPM into http-extension
2037,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,ddf91fd5645a8e174d11cbf7e3d6f5b23af6611c,Bugfixes and tests of javascript saving from the extension
2038,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,58e11527e5ee3a65f3ebe34e3bf53c8584ec8273,Adding test for cached requests and responses
2039,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,cd77df5e8a35d1044e5494b0248ffed3b523b5c8,Fixing encoding issues in Proxy
2040,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,0fe12cbadc6b11fe258ca7e2241f58e1f6e30245,Falling back to content-type header and file extension for non-script type javascript loads
2041,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,ce3ceaf1d3883f6cf83663f173694ab1666d6a21,Bugfix in proxy javascript encoding
2042,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,8aa9cd62187078d46674af91cd906c50ea04127b,"Merge remote-tracking branch 'origin/master' into http-extension

Conflicts:
	automation/Extension/firefox/openwpm.xpi"
2043,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,af03b187d981ebe847c806e0d1e56c762395b037,"Fix the problems with the test page URL and asserts in the HTTP stack trace test.

DRY in the expected.py.
Fix tab-space mix up in the test page."
2044,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,75cc5a97e98a2885f4eeeafc2b3f458d772d3e62,"Merge pull request #112 from gunesacar/http-extension

Fix test page URL and asserts in the HTTP stacktrace test."
2045,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,e3f434f30588fd72c223cf8b2c8476c3afa6d7de,Fixing a few style issues in support of #111.
2046,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,6a23b6ca06768008d792cc9a83ba4f5d7cd928a1,Merge branch 'http-extension' of github.com:citp/OpenWPM into http-extension
2047,https://api.github.com/repos/mozilla/OpenWPM/pulls/111,111,Add extension-based HTTP instrumentation,"Extension-based HTTP instrumentation can replace proxy-based instrumentation. The functionality implemented in this pull request fully replicates the request and response header logging, as well as the (optional) javascript response body saving supported by the proxy. Extensive manual testing was done to ensure all requests, responses, and javascript files recorded by the proxy are also recorded by the extension. 

Living inside the browser and moving away from mitmproxy has a bunch of benefits:
* Cached requests and responses are missed entirely from the proxy (See #71)
* Some HTTPS connections fail with certificate warnings (See #53)
* The mitmproxy version used (v0.13) is a few releases behind the current mitmproxy library and will likely continue to have more issues (particularly around HTTPS) unless updated.
* The extension has significantly more context available around a request/response than is available from a proxy.
* Saving content (like javascript response bodies) requires decoding responses. Not all encodings supported by Firefox are currently supported in the proxy (in particular brotli).
* Cookie parsing via HTTP headers does not faithfully replicate Firefox cookie parsing and will miss cookies set by Javascript

Main changes:
* Add HTTP instrumentation and tables to extension
* Near rewrite of `socket.js` extension module to use classes
* Refactor of `loggingdb.js` extension module
* API change for LevelDB logger and change in compression algorithm for saved database
* Minor changes in proxy logging for new LevelDB API",englehardt,3280150,2016-12-02T20:49:08Z,MEMBER,True,986,134,26,A web privacy measurement framework,Python,476d292127019c1cdcf3bd34d48737d57a17411a,Bugfix for incorrect naming after merge
2048,https://api.github.com/repos/mozilla/OpenWPM/pulls/110,110,Store function name and eval/Function details for the JS calls (#49).,"Remove regex based call script URL parsing.
Remove redundant array access and parenthesis.
Add test for the call stack parsing.

Fixes #49.",gunesacar,5788790,2016-12-02T14:52:11Z,CONTRIBUTOR,True,102,10,8,A web privacy measurement framework,Python,c7535dee0d8c7f21d861a0a2b1ee84e4218a3857,"Store function name and eval/Function details for the JS calls.

Remove regex based call script URL parsing.
Remove redundant array access and parenthesis.
Add test for the call stack parsing.

Fixes #49."
2049,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,54765c1c2cc1813ef40104cfd57d3c68483ace20,"[WIP] Adding handling to remove selenium's self identification

Also includes automated tests. It seems the order of content script
execution is non-deterministic. Sometimes selenium will run first and
sometimes openwpm's will run first. We should be able to handle this by
monitoring the DOM for changes, but need to confirm the performance
degredation isn't too high."
2050,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,d9ded62d3c3d005e3c3dacd9cb449c3ff7df36f2,"Remove document and navigator webdriver self-identification attributes.

The document attribute is removed with a DOMAttrModified eventListener
that removes itself after the first call. The navigator attribute is
prevented from being set by altering Object.defineProperty until
Selenium attempts to set the attribute (at which point the alteration is
reversed)."
2051,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,3d7443cfef5edff3925526ae8f07ff298486cc04,Moving webdriver attribute test to its own file and adding a test with option enabled and disabled
2052,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,670364e42abcbe18e992b41ec348b15a4bfe14a5,Test should be headless
2053,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,8d37a1da3cc40e3c553928a4e76c600e11712b21,Making defineProperty cleaner to address @gunesacar's comments
2054,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,6c8107f719a599a8dfd21c4eec10a5ea5b645e6f,"Refactor of current webdriver id removal tests + new test.

Added a bunch of new tests to ensure Object.defineProperty still works
as expected after our instrumentation runs and removes Selenium's
webdriver property. Other tests refactored to better handle a few
conditions."
2055,https://api.github.com/repos/mozilla/OpenWPM/pulls/108,108,Remove Selenium `webdriver` attributes from DOM,"See commit comments for more information.

@gunesacar Let me know what you think! Thanks for the work on #105.",englehardt,3280150,2016-11-23T18:16:46Z,MEMBER,True,261,31,6,A web privacy measurement framework,Python,9cc85b98f3cc5e9da87864dd705fddda5a759579,"Merge branch 'master' into selenium_bot_detection

Conflicts:
	automation/Extension/firefox/openwpm.xpi"
2056,https://api.github.com/repos/mozilla/OpenWPM/pulls/106,106,"Revert ""Remove webdriver HTML attribute from documentElement and navigator""",Reverts citp/OpenWPM#105,englehardt,3280150,2016-11-17T15:55:10Z,MEMBER,True,0,10,1,A web privacy measurement framework,Python,9c81cd1477a26466c2288cfdcb191d133cd8ca14,"Revert ""Remove webdriver HTML attribute from documentElement and navigator"""
2057,https://api.github.com/repos/mozilla/OpenWPM/pulls/105,105,Remove webdriver HTML attribute from documentElement and navigator,"Fixes #91.

The fix assumes that OpenWPM's `content.js` runs _after_  Selenium code linked below.

- https://github.com/SeleniumHQ/selenium/blob/b82512999938d41f6765ce8017284dcabe437d4c/javascript/firefox-driver/extension/content/server.js#L49
- https://github.com/SeleniumHQ/selenium/blob/b82512999938d41f6765ce8017284dcabe437d4c/javascript/firefox-driver/extension/content/dommessenger.js#L98

Manually tested on https://output.jsbin.com/webawamabu.

The console logs should read:
```
- Successfully started all instrumentation
- navigator.webdriver:  undefined
- webdriver in navigator:  false
- documentElement attribute webdriver:  null

```",gunesacar,5788790,2016-11-16T21:51:11Z,CONTRIBUTOR,True,10,0,1,A web privacy measurement framework,Python,df0328d04ba7dd887f320021b57f82a93efd798b,Remove webdriver HTML attribute from navigator and documentElement.
2058,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,d9be5ae44ef4522c3200c0a18293983f3aaa6d69,"[WIP] Support for custom, dynamic function. Still has some bugs"
2059,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,9a6308ca5da56c3a40b823a7f05fc43c8dba0133,Dill package required for function serialization
2060,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,653d0a9a81b8975d13c696f0d790f89d94b93b5f,"Adding support for both json and dill serialization in SocketInterface. Updates to platform code where necessary to specify serialization type

Conflicts:
	automation/SocketInterface.py"
2061,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,7b49ad2501bda6b99bb104731bd45b473dffaba0,Bugfix: argument spelling mistake
2062,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,5acb7d911e2296a243e98b3d001f67744af6c0d6,"Adding tests for custom command and moving `multiprocessing` -> `multiprocess`

I chose to use `dill` instead of `pickle` for additional flexibility
in inline functions. Python's built-in `multiprocessing` library uses
`pickle`, so it was still a bottleneck. In particular functions defined
within class methods (e.g. within a test method) couldn't be pickled.
`multiprocess` is a fork of `multiprocessing` which mainly differs in
replacing `pickle` with `dill`. It's maintained by the same developers
as `dill`, so it seems like a safe replacement.

Conflicts:
	test/expected.py"
2063,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,3e7eba2e09ed0c4f2237a7afca3171c25d189f7b,Cleaning up WIP comments/tests
2064,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,924ed18814355dd430742fc314455ab7db1fb838,Adding `dill` as a requirement.
2065,https://api.github.com/repos/mozilla/OpenWPM/pulls/104,104,"Add support for custom, inline commands","The `CommandSequence::run_custom_function` method allows a user to specify browser commands ""inline"", within their crawl script. It makes it possible to write tests which depend on user/webdriver interaction and is much quicker than adding a new CommandSequence command for simple, one-off tasks.",englehardt,3280150,2016-11-14T22:24:23Z,MEMBER,True,174,48,13,A web privacy measurement framework,Python,1f720c98f128bfc244696d9db28cc4819e558940,Moving run_custom_function command to its own test file
2066,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,dbe18c365d45567031ae15e138b9a1d43d2bcef0,"save screenshot done, needs tests"
2067,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,e3d397510d6171dd2be9480aa45dc1c8c6891b8a,"Improvements to save_screenshot, still need tests"
2068,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,7733912fd4d1664c502a757d4dabf53e24b20f9b,save_screenshot tests done
2069,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,93f3e20502aa41703589db4580e4e0287e54b282,Merge branch 'master' of https://github.com/citp/OpenWPM into content
2070,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,683216f7927afc760ba6195479823cd3e23d85df,Added dump_page_source and tests
2071,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,9c597818859c6ff48890961b72d956ea84a2968a,Forgot to add expected source for test
2072,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,6f8bdcc1e3f3ce4ff9553ef71d40a359635417d8,Modified test of save screenshot
2073,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,3e67d1ab63c05228f69079aa4cfa27b78424b66f,Merge branch 'master' of https://github.com/citp/OpenWPM into content
2074,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,a3734b32d5b8fa14cdce7185f9415766d9991e5a,disabling audiocontext test for travis CI
2075,https://api.github.com/repos/mozilla/OpenWPM/pulls/97,97,Added save_screenshot and dump_page_source to commands,"This branch adds two new commands: save_screenshot() and dump_page_source(). Right now, screenshots and source dumps are stored in subdirectories of the data_directory under a user-provided filename.
",dreisman,5740389,2016-10-04T19:47:38Z,CONTRIBUTOR,True,110,2,7,A web privacy measurement framework,Python,39e5dc96701ff3929160c3ddd35cfc71a4f7cb62,Added comments about new commands
2076,https://api.github.com/repos/mozilla/OpenWPM/pulls/95,95,Updated install script to work for ubuntu 16.04,"The package ""libleveldb1"" isn't available for 16.04 but ""libleveldb1v5"" is. Updating install script to install one of the two, whichever is available.
",dreisman,5740389,2016-09-29T15:51:51Z,CONTRIBUTOR,True,25,20,2,A web privacy measurement framework,Python,34d534cd47b53c91ed75027ddf5845c4e8309d27,Updated install script to work for ubuntu 16.04
2077,https://api.github.com/repos/mozilla/OpenWPM/pulls/95,95,Updated install script to work for ubuntu 16.04,"The package ""libleveldb1"" isn't available for 16.04 but ""libleveldb1v5"" is. Updating install script to install one of the two, whichever is available.
",dreisman,5740389,2016-09-29T15:51:51Z,CONTRIBUTOR,True,25,20,2,A web privacy measurement framework,Python,d105bfc24fa21a261ffcbfcebc4b4d9d925aacab,"Modified test expected values for audio fingerprinting. Prior to commit, was working locally but not on travis for some reason"
2078,https://api.github.com/repos/mozilla/OpenWPM/pulls/94,94,Upgrade from original,,albertterradas,6527860,2016-09-26T09:41:42Z,NONE,False,7,0,1,A web privacy measurement framework,Python,45fd9ad7d5d89a851e20e1ca5996ac17a769029f,Update content.js
2079,https://api.github.com/repos/mozilla/OpenWPM/pulls/94,94,Upgrade from original,,albertterradas,6527860,2016-09-26T09:41:42Z,NONE,False,7,0,1,A web privacy measurement framework,Python,4e3d6d04e10dd104a4d75d003645a7d9fa0f7e84,Update content.js
2080,https://api.github.com/repos/mozilla/OpenWPM/pulls/90,90,Detecting AudioContext ,"Code to be available to detect audio fingerprinting.

Advice: The openwpm/automation/Extension/firefox/@openwpm-0.0.1.xpi compressed directory needs to be regenerated.
",albertterradas,6527860,2016-09-12T08:49:39Z,NONE,False,7,0,1,A web privacy measurement framework,Python,45fd9ad7d5d89a851e20e1ca5996ac17a769029f,Update content.js
2081,https://api.github.com/repos/mozilla/OpenWPM/pulls/90,90,Detecting AudioContext ,"Code to be available to detect audio fingerprinting.

Advice: The openwpm/automation/Extension/firefox/@openwpm-0.0.1.xpi compressed directory needs to be regenerated.
",albertterradas,6527860,2016-09-12T08:49:39Z,NONE,False,7,0,1,A web privacy measurement framework,Python,4e3d6d04e10dd104a4d75d003645a7d9fa0f7e84,Update content.js
2082,https://api.github.com/repos/mozilla/OpenWPM/pulls/83,83,Wait for homepage to load after back before looking up links,"Without this, it's possible that the homepage isn't given enough time to load and no links are found.
",rfmcpherson,1842847,2016-06-30T19:46:46Z,CONTRIBUTOR,True,1,0,1,A web privacy measurement framework,Python,ca35ceb6af40b811512b7982e5f333343953f546,wait for homepage to load after back before looking up links
2083,https://api.github.com/repos/mozilla/OpenWPM/pulls/82,82,Added Public Suffix List for intralinks,,shivamchoudhary,8243354,2016-05-31T18:37:56Z,NONE,False,7,2,2,A web privacy measurement framework,Python,280f07882a044f4d7c1db97433730758076fb228,Adding Public Suffix list
2084,https://api.github.com/repos/mozilla/OpenWPM/pulls/82,82,Added Public Suffix List for intralinks,,shivamchoudhary,8243354,2016-05-31T18:37:56Z,NONE,False,7,2,2,A web privacy measurement framework,Python,d2d4a42dfc5e8e263c2ebe94da4384ecadcc69a6,Adding publicsuffixlist in requirements
2085,https://api.github.com/repos/mozilla/OpenWPM/pulls/81,81,[issue 78] Adding Public Suffix list,"Hi,
I have added Public Suffix List for intralinks. 
",shivamchoudhary,8243354,2016-05-31T18:27:05Z,NONE,False,7,2,2,A web privacy measurement framework,Python,280f07882a044f4d7c1db97433730758076fb228,Adding Public Suffix list
2086,https://api.github.com/repos/mozilla/OpenWPM/pulls/81,81,[issue 78] Adding Public Suffix list,"Hi,
I have added Public Suffix List for intralinks. 
",shivamchoudhary,8243354,2016-05-31T18:27:05Z,NONE,False,7,2,2,A web privacy measurement framework,Python,d2d4a42dfc5e8e263c2ebe94da4384ecadcc69a6,Adding publicsuffixlist in requirements
2087,https://api.github.com/repos/mozilla/OpenWPM/pulls/80,80,Fixed typo,,zawarudo,2955134,2016-05-31T03:40:07Z,NONE,True,1,1,1,A web privacy measurement framework,Python,67876943bb111c96155108b850973cbdf43438b3,Fixed typo
2088,https://api.github.com/repos/mozilla/OpenWPM/pulls/79,79,Cause even spellings mistakes need to be fixed.,,amoghbl1,1174084,2016-05-30T16:32:19Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,454031a11fbd836a65e8b4fa1df1d5972dc05783,Cause even spellings mistakes need to be fixed.
2089,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,150b3862c3765c9048dda23cc338aca5f8e8b501,"Added file to sequence commands in one batch for one top url site visit

Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Changed iteration for commands of command sequence

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added visit id in extension

Changes task manager to close after completing the command sequence

Fixed small changes"
2090,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,c77b5c710962148feddb4ceb2c1a9a594fb0117f,Merged old command sequences pull request to be more modern
2091,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,4b107d17c56bb0508fad5025acd31ed3b6de62e9,Fixed tests for command_sequence compatibility
2092,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,39e31ed1da890e3421dec6a487f3ea8b17576a95,Merge branch 'master' of https://github.com/citp/OpenWPM into updated_command_sequences_052016
2093,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,4cc559fd8eee53632f26cb7320ee656dbb978675,"Added test of simple commands and table integrity, bug fixes"
2094,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,ee7503e40e39d7b41df70d5f01f4cfe1c3593e0a,Adding test_simple_commands.py
2095,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,ce6f266ca36bd86d8008e8709c417156f7b5902c,Adding test pages to fix broken tests
2096,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,8aff632e595977b72e785878cb3f85fb55d8ed7d,"Added test for visit_id in firefox extension, minor style/comment changes"
2097,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,d571ba2d083f53a208783767b7887d1a508a5ee8,Replacing tabs with spaces
2098,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,2ac4bed29405c05bfbe9da807336ee7e37a90ff9,Replacing tabs with spaces
2099,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,b51e4980ff8fcdde946a62336445fc94109fe045,Replacing tabs with spaces
2100,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,f633077b68411978e5be4f5d2767402dd69a7d9a,Update create_cookies_table.sql
2101,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,6f5ca78568f72a362b7996d044329cae22095676,Replacing tabs with spaces
2102,https://api.github.com/repos/mozilla/OpenWPM/pulls/74,74,Adding up-to-date CommandSequences and adding tests,"Adds CommandSequence.py to automation/, providing a new API for creating complex command sequences

Ex:
Instead of manager.get(url)...
cs = CommandSequence(url)
cs.get(arg1, arg2...)
...set up other things to do in same page visit...
manager.execute_command_sequence(cs)

manager.get() and manager.browse() now wrap command sequences if you still want a simpler interface.

-Data in DB now keyed by 'visit_id,' which maps to a single executed CommandSequence on a particular site_url.

-Added tests
",dreisman,5740389,2016-05-04T15:57:40Z,CONTRIBUTOR,True,627,226,26,A web privacy measurement framework,Python,b2703e80023dc5027372afb56c37bc5234f2a6fa,Fixing indents
2103,https://api.github.com/repos/mozilla/OpenWPM/pulls/72,72,Run continuous integration tests using Travis,"This PR adds .travis.yml file to run continuous integration tests on Travis.

Install pytest for Travis tests.

Move python dependencies to requirements.txt to make it compatible with Travis.

Use mmh3 instead of pyhash.
pyhash cannot be installed on Travis due to an outdated check for
libboost_python.so. mmh3 has the same functionality and it's better
maintained.
",gunesacar,5788790,2016-04-23T13:24:47Z,CONTRIBUTOR,True,56,22,8,A web privacy measurement framework,Python,c20d9b548fe6ebff18c3678b50bab582397ae26e,"Add travis.yml file to run continuous integration tests.

Install pytest for Travis tests.
Move python dependencies to requirements.txt.

Use mmh3 instead of pyhash

pyhash cannot be installed on Travis due to an outdated check
for libboost_python.so. mmh3 seems to be better maintained and
more widely used."
2104,https://api.github.com/repos/mozilla/OpenWPM/pulls/72,72,Run continuous integration tests using Travis,"This PR adds .travis.yml file to run continuous integration tests on Travis.

Install pytest for Travis tests.

Move python dependencies to requirements.txt to make it compatible with Travis.

Use mmh3 instead of pyhash.
pyhash cannot be installed on Travis due to an outdated check for
libboost_python.so. mmh3 has the same functionality and it's better
maintained.
",gunesacar,5788790,2016-04-23T13:24:47Z,CONTRIBUTOR,True,56,22,8,A web privacy measurement framework,Python,4a30c6599fd6b433115344a37154888d255d860f,Add Travis badge to the README.md.
2105,https://api.github.com/repos/mozilla/OpenWPM/pulls/72,72,Run continuous integration tests using Travis,"This PR adds .travis.yml file to run continuous integration tests on Travis.

Install pytest for Travis tests.

Move python dependencies to requirements.txt to make it compatible with Travis.

Use mmh3 instead of pyhash.
pyhash cannot be installed on Travis due to an outdated check for
libboost_python.so. mmh3 has the same functionality and it's better
maintained.
",gunesacar,5788790,2016-04-23T13:24:47Z,CONTRIBUTOR,True,56,22,8,A web privacy measurement framework,Python,45f3064c6b5d18b31199bdc66a85277f595e1c90,Use git describe --always instead of git describe --tags.
2106,https://api.github.com/repos/mozilla/OpenWPM/pulls/67,67,Inject intrumentation code to page content as a script element.,"Add a manual_test module to make it easy to run interactive tests.

Add plugin and mimeType instrumentation.

Log line number, column number of the calling function and stack
entries.

Add local test files for Flash cookie and JS cookie testing.

Add test to make sure the required Python and OS packages are installed.

Mark test_crawl as ""slow"" to easily avoid calling it. Running
py.test -m ""not slow"" will exclude crawl test but will run all the
remanining tests.

Add test utility functions to DRY test code.

Add a WebRTC test.

Add a parent class and visit method for the tests.

Fix address in use errors related to local server
by using a py.test fixture with session scope.
",gunesacar,5788790,2016-04-12T01:04:53Z,CONTRIBUTOR,True,914,414,19,A web privacy measurement framework,Python,c9e1ed8ab0a80964af63082c8341cc17af38227d,"Inject intrumentation code to page content as a script element.

Add a manual_test module to make it easy to run interactive tests.

Add plugin and mimeType instrumentation.

Log line number, column number of the calling function and stack
entries.

Add local test files for Flash cookie and JS cookie testing.

Add test to make sure the required Python and OS packages are installed.

Mark test_crawl as ""slow"" to easily avoid calling it. Running
py.test -m ""not slow"" will exclude crawl test but will run all the
remanining tests.

Add test utility functions to DRY test code.

Add a WebRTC test.

Add a parent class and visit method for the tests.

Fix address in use errors related to local server
by using a py.test fixture with session scope."
2107,https://api.github.com/repos/mozilla/OpenWPM/pulls/67,67,Inject intrumentation code to page content as a script element.,"Add a manual_test module to make it easy to run interactive tests.

Add plugin and mimeType instrumentation.

Log line number, column number of the calling function and stack
entries.

Add local test files for Flash cookie and JS cookie testing.

Add test to make sure the required Python and OS packages are installed.

Mark test_crawl as ""slow"" to easily avoid calling it. Running
py.test -m ""not slow"" will exclude crawl test but will run all the
remanining tests.

Add test utility functions to DRY test code.

Add a WebRTC test.

Add a parent class and visit method for the tests.

Fix address in use errors related to local server
by using a py.test fixture with session scope.
",gunesacar,5788790,2016-04-12T01:04:53Z,CONTRIBUTOR,True,914,414,19,A web privacy measurement framework,Python,992673d82ee92526188bcdac3d085783b1235bb5,Add timeouts to some tests.
2108,https://api.github.com/repos/mozilla/OpenWPM/pulls/50,50,Update README.md,"Simple typo fix.
",CathrynStickel,8631779,2016-01-14T14:50:59Z,CONTRIBUTOR,True,1,1,1,A web privacy measurement framework,Python,21bfb314735222ff7839c0478e4686a357640d4c,"Update README.md

Simple typo fix."
2109,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,c3ff89bdf0d4d18e1749ca2c50ae4940bacf039e,updating firefox binary location and .gitignore
2110,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,9d740ee14794ca9584c2889f6dce22e1e396d1f3,Initial commit of Privacy Badger style script url detection
2111,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,cda2f868d798d5175023925138270578ad337725,Grab calling url in javascript instrumentation.
2112,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,7b22664b7fa20a87987795d04853a308ebd823d8,Reducing set of screen properties monitored
2113,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,c737f9c40bee9bff37ec8e52a23aaf5d5415db31,Adding in tests for property enumeration instrumentation
2114,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,5bb706db6759ebed8c14e5cead1f4cb208233942,Updating property enumeration extension with bugfixes
2115,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,5e36fb2f88414e4ac6ee8d8e851c397c44c78068,"Adding the ability to exclude certain js methods from instrumentation.

Included in this is the exclusion of serveral canvas render context
methods which have a very high number of calls."
2116,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,e1c98a281d9bc90dda7c9df1213d2c258e2e1fba,Fix indentation in content.js
2117,https://api.github.com/repos/mozilla/OpenWPM/pulls/43,43,Improvements to Javascript Instrumentation,"- Accurate script url determination
- Expanded set of `window.navigator` properties monitored
- Tests for `window.navigator` and `window.screen` instrumentation
- Reduced set of API calls recorded
- Limits on number of calls recorded per site to reduce database size
",englehardt,3280150,2015-12-22T15:46:20Z,MEMBER,True,355,170,12,A web privacy measurement framework,Python,09d706e91b1a602de50121bc35845676994b329e,"Limiting number of js calls recorded to 500 per (url,frame,script_url,API)"
2118,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,7bc545f11c0b879ccf1ec58d8f7970d3fda7bb36,Adding automatic profile saving via archive directory. In support of #19
2119,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,d2fda454523663d37e14131b960821822f2cc2dd,"Better Handling of Child Process Exceptions

Child processes can now raise their exceptions to the TaskManager, which
both gives the child processes the ability to stop the crawl (for
critical exceptions), and gives the TaskManager the ability to cleanup
before crashing. In doing so, I've largely standarized the
BrowserManager <--> {TaskManager, Browser} pipe. I also added in
ProfileLoadError as an example of a child --> parent exception."
2120,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,e7f940d977cf70c2ff1e92e2c6ceb0547cb52f4e,"Adding a few basic profile unit tests with pytest. This should be
expanded on!"
2121,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,544031e3aa551b54a6361bef90964bc2fce43d4d,"Use newest version of pip, instead of the outdated version from Ubuntu's repository."
2122,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,742cfc3f0bfd864aefb63e3b16ed38ad0bac95ce,"Stick with a specific (old, for now) version of mitmproxy"
2123,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,8ec110d962812ec44401699e504c01d28fa09149,Expanding the path of all input directories
2124,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,a7b744a1085311ca93674eee1310666a38f4ef9e,"Merge remote-tracking branch 'origin' into profile-fixes

Conflicts:
	install.sh"
2125,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,9b41396ed96a1223fb0a6dfe6ddcb5e8d3bec095,Adding back in tblib which I accidentally removed
2126,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,6b4302722dae75c6be8bd0ed49409ef06173e7b5,Bugfixes for profile handling + a new profile test
2127,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,a44469eda0aabb45db89097c0c6d2481daadfc59,Selenium bump to 2.48.0 and Firefox bump to 41.0.2
2128,https://api.github.com/repos/mozilla/OpenWPM/pulls/41,41,Fix several profile bugs and add tests,"These changes should make profile handling more intuitive and stable under various crawl conditions. Profile errors are now treated as critical and will stop crawls (to avoid a crawl continuing after a profile fails to load correctly). Profiles should remain persistent through crashes, and profiles should always be written on shut down (through the new `profile_archive_dir` option).

Follow up bugfixes to come in #40.
",englehardt,3280150,2015-12-15T01:40:15Z,MEMBER,True,344,108,10,A web privacy measurement framework,Python,6fab90b22b4fc92e87cc2ac156796a21fa72874a,Adding additional test for profile content
2129,https://api.github.com/repos/mozilla/OpenWPM/pulls/39,39,Added file to sequence commands in one batch for one top url site visit,"Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Changed iteration for commands of command sequence

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added visit id in extension

Changes task manager to close after completing the command sequence

Fixed small changes
",englehardt,3280150,2015-12-07T16:04:17Z,MEMBER,False,205,133,16,A web privacy measurement framework,Python,150b3862c3765c9048dda23cc338aca5f8e8b501,"Added file to sequence commands in one batch for one top url site visit

Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Changed iteration for commands of command sequence

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added file to sequence commands in one batch for one top url site visit

Added support for command sequence in task manager

Replacing top_url with visit id for http_request, http_response, flash_cookies and profile_cookies tables

Changed task manager to execute a command sequence

Task manager updated to rectify Reading single entry from the table

Add visit id in the command sequence instead of browser manager

Added visit id to proxy, command executor and browser manager

Added visit id in extension

Changes task manager to close after completing the command sequence

Fixed small changes"
2130,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,9eef47639599e6a91ed520dba1cec1b71ffec88d,Initial support for saving raw javascript files.
2131,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,407a03c72a2847a40f96843a1df2cc1e0df44f53,"Adding in a manager_params dictionary

The goal of this change is to provide a better way of passing
per-crawl parameters. Since the browser_params dictionary is meant for
per-browser settings, adding in any additional parameters (like
logger_address) would require adding the address to all copies of the
dictionary. With manager_params, a single additional dictionary is
passed around to hold the crawl-wide configuration settings. This
includes things like the location of the crawl database and the log
file."
2132,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,db97598d96b3c0ea1f2ac5c1ead59b96e94a8a26,Control saving of javascript with a browser pref
2133,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,54c39915aafb228eccacde81d115d3230ec9ec1a,"Create data_directory if it doesn't exist + drop an init file in main
directory to make it possible to use OpenWPM as a submodule"
2134,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,c80db4a203ac17a9ed4373123e36aec377944709,adding changes that should have been in previous commit
2135,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,048748d5920f1c8d316be51f0dfabf865b481fb8,New psutil API get_process_list -> process_iter
2136,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,ad0bf250f5a15445ec543cad6102fb0efeb52180,Adding gzip compression to javascript files.
2137,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,5dce2f35d6014f5afb664bf8dc92ab5da781afdc,Check if js file exists before compressing and writing
2138,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,c39e8000b80661eb5ca6acede6936e71753446ff,bugfix to properly label hashes in database
2139,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,b207c28450f5d8185547be45855bf47c86456f51,Bumping Firefox and Selenium Version
2140,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,8240733da6d0b449c8b731c7dfa12b2aaf755ae8,"Changing javascript files to use 64 bit murmur3 hash.

The 32 bit hash is likely to have at least a few collisions
over 1 million sites. To avoid this we use the fast murmur3_x64_128
hash from pyhash and mask it to 64 bits. This requires a few
additional dependencies, which are included in the install script."
2141,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,9c2473e1334c0213057a925e1d8a774058d0d22b,Add error handling for zlib decompression errors when decompressing javascript from proxy
2142,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,d56d3c095b15a8e777a75c22006fdf9f8ed21a99,"Support for Ghostery + HTTPS-Everywhere.

This also includes the start of a refactor of the code to launch
Firefox. The goal of this is to simply deploy_firefox.py and separate
the configuration options into logical pieces."
2143,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,38c895eee0ad9573253a6dbe04f3b720c268cc2b,Removing random extensions in support of #17
2144,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,d8995ce2cceef5c3ea64d624874191191d6a469c,updating configure firefox description
2145,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,40d976b2757a2f62080984dd223c9c990b14aa89,Bugfix. Browse command will not properly call get command
2146,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,6e384db5a06ecad4cf1b3aa2369b519a757026cb,Bugfix: Don't clear profile when browser exceeds memory limits
2147,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,d603979e37250ef0681a6d97ec22400a174bc014,Stopgap simiplification of browser restarts in support of #19
2148,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,ac82b209f15c0fb1ac4be8fa87fae44bfeeff96c,Adding back in check for browser freshness before restarting
2149,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,482e1ed2aee62a6b22873ab61ae7517c8d04610b,"Reworking browser restart pipline to fix crashes and deadlocks. In
support of #19

Rather than having multiple threads managing the same browser, each
thread will simply set a flag if the browser needs to be restarted.
Then, the main thread managing the browser will restart if necessary.
This fixes a bunch of race conditions caused by managing the process in
two separate threads. Also bumped the failure threshold as it was too
low for instances with a low number of browsers."
2150,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,29f4137fd524358b9afdbfaa9e14febf3a73eb5a,Have the browser command use the logger rather than print
2151,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,86e4c17f466799c43f6f3364944667e59bbba66e,"Adding logging to profile commands.

Logging via MPLogger has been added to the profile commands, including
flash loading and saving. dump_profile has also been altered to require
cookies, history, and localStorage. If these don't exist the function
will now throw an error."
2152,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,b8e4668a06452f59f3ac4912e034845bf8c546ce,"Fixing the profile commands to check if webapps and storage exist as
directories (instead of files)."
2153,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,9bfc144006fe419c6d4932ba097718986effa0d1,Including the browser ID in every call to the logger
2154,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,c0cea836f9e29c2e0717e70c0f5f1f2994cfdc23,Replacing subprocess calls with python functions in profile_commands
2155,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,f4575044d67ab81d2efd4dabb179f0740bc399fb,"Improvements to profile dumping and loading

1. Added in success logging for profile untaring
2. Made compression optional when dumping/loading profile
3. Removed ""slim profile"" option, since the full profile isn't much bigger"
2156,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,c8be9bc864d126d6318941e8b51f350d54b75c95,"Install setuptools via pip before other dependencies. Fixes failures
caused by an outdated version of setuptools."
2157,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,edce6d8803c0a78cabbf29da94ebebdd025e9559,Better javascript content detection
2158,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,3d85e812aee3e845ac32da7c5ab9881b38282cad,More flexible javascript Content-Type detection.
2159,https://api.github.com/repos/mozilla/OpenWPM/pulls/21,21,Merging Javascript + Extension Support to master branch,"Making a new release with javascript and extension support. Tested with a few test crawls. See CHANGELOG for the release notes.
",englehardt,3280150,2015-10-14T14:57:23Z,MEMBER,True,445,355,34,A web privacy measurement framework,Python,913bb11f53b39d6485fca2ecf4b3a552cd58b924,Adding Ad Block Plus support
2160,https://api.github.com/repos/mozilla/OpenWPM/pulls/9,9,Fblogin,,rezanayebi,3970507,2015-04-04T23:52:03Z,NONE,False,106,0,2,A web privacy measurement framework,Python,741f7dc444a2dcd4fb88a7594c4e4e0f44c8f020,initial commit for login
2161,https://api.github.com/repos/mozilla/OpenWPM/pulls/9,9,Fblogin,,rezanayebi,3970507,2015-04-04T23:52:03Z,NONE,False,106,0,2,A web privacy measurement framework,Python,c85036d1a910fe7adfe4627545dca8310dad236f,"""Use waits instead of time.sleep"""
2162,https://api.github.com/repos/mozilla/OpenWPM/pulls/9,9,Fblogin,,rezanayebi,3970507,2015-04-04T23:52:03Z,NONE,False,106,0,2,A web privacy measurement framework,Python,d4261863af8792b596f80eee3814fc6cf937e16b,Added automation for Airbnb and Pinterest
2163,https://api.github.com/repos/mozilla/OpenWPM/pulls/2,2,Fix compatibility issues cause by libmproxy update from 0.10 to 0.11,"This pull request only fixes the update of libmproxy.
",vtoubiana,1637842,2015-01-01T14:05:50Z,CONTRIBUTOR,True,119,9,6,A web privacy measurement framework,Python,4540aadbb1748515d1638419cb5787eaf9bf2b52,Fix compatibility issues cause by libmproxy update from 0.10 to 0.11
2164,https://api.github.com/repos/mozilla/OpenWPM/pulls/2,2,Fix compatibility issues cause by libmproxy update from 0.10 to 0.11,"This pull request only fixes the update of libmproxy.
",vtoubiana,1637842,2015-01-01T14:05:50Z,CONTRIBUTOR,True,119,9,6,A web privacy measurement framework,Python,274628fa0ec9a8e81ea8b60a227a8132b4b26773,Add feature to browse a site
2165,https://api.github.com/repos/mozilla/OpenWPM/pulls/2,2,Fix compatibility issues cause by libmproxy update from 0.10 to 0.11,"This pull request only fixes the update of libmproxy.
",vtoubiana,1637842,2015-01-01T14:05:50Z,CONTRIBUTOR,True,119,9,6,A web privacy measurement framework,Python,01d935fdace6a80f8c393b1f117aa42b0a182311,Merged master fixed conflict.
2166,https://api.github.com/repos/mozilla/OpenWPM/pulls/1,1,Update for libmproxy 0.11,"I've tried to use OpenWPM after an update of mitmproxy but it did not work. The first commite addresses some of the compatibility issue. 

Also I replaced ""webdriver.close()"" by ""webdriver.quit()"" which close the driver and frees memory instead of closing the window.

The second commit adds a new command ""browse"" to simulate browsing of a website (scrolling some pages and click on internal links)
",vtoubiana,1637842,2014-12-31T11:23:05Z,CONTRIBUTOR,False,140,20,7,A web privacy measurement framework,Python,4540aadbb1748515d1638419cb5787eaf9bf2b52,Fix compatibility issues cause by libmproxy update from 0.10 to 0.11
2167,https://api.github.com/repos/mozilla/OpenWPM/pulls/1,1,Update for libmproxy 0.11,"I've tried to use OpenWPM after an update of mitmproxy but it did not work. The first commite addresses some of the compatibility issue. 

Also I replaced ""webdriver.close()"" by ""webdriver.quit()"" which close the driver and frees memory instead of closing the window.

The second commit adds a new command ""browse"" to simulate browsing of a website (scrolling some pages and click on internal links)
",vtoubiana,1637842,2014-12-31T11:23:05Z,CONTRIBUTOR,False,140,20,7,A web privacy measurement framework,Python,2cf4122ec0e070adb00892c3568d2c46a3b7d593,"Add commands to browse a website (scrolling and clicking on 5 internal links)
Modify ""scrolling down"" function to look more human like
Fix the closing tab (instead of typing ""tw"" in the location bar"")"
2168,https://api.github.com/repos/mozilla/OpenWPM/pulls/1,1,Update for libmproxy 0.11,"I've tried to use OpenWPM after an update of mitmproxy but it did not work. The first commite addresses some of the compatibility issue. 

Also I replaced ""webdriver.close()"" by ""webdriver.quit()"" which close the driver and frees memory instead of closing the window.

The second commit adds a new command ""browse"" to simulate browsing of a website (scrolling some pages and click on internal links)
",vtoubiana,1637842,2014-12-31T11:23:05Z,CONTRIBUTOR,False,140,20,7,A web privacy measurement framework,Python,55f99b5d753aac7bdb727238a556a02ed541860e,"Changed to test the ""browse"" commande"
