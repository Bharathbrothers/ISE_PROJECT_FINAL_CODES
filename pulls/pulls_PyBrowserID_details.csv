,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/PyBrowserID/pulls/41,41,Add Mozilla Code of Conduct,"Fixes #40

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-28T03:53:42Z,CONTRIBUTOR,True,15,0,1,python client library for the BrowserID protocol ,Python,4beb8273d9ef0b748dd6db99442e73e32e2d2bbb,"Add Mozilla Code of Conduct file

Fixes #40.

_(Message COC002)_"
1,https://api.github.com/repos/mozilla/PyBrowserID/pulls/35,35,"Use LocalVerifier by default, now that the hosted verifier has shut down",,rfk,34695,2017-12-20T03:10:51Z,MEMBER,True,1,1,1,python client library for the BrowserID protocol ,Python,3b55c4b9b3d5425e83356b61035528585a1987a4,"Use LocalVerifier by default, now that the hosted verifier has shut down."
2,https://api.github.com/repos/mozilla/PyBrowserID/pulls/34,34,Add support for extra IDP claims in the LocalVerifier,This is necessary when using the LocalVerifier class with PyFxA.,rfk,34695,2017-05-29T02:20:37Z,MEMBER,True,87,5,3,python client library for the BrowserID protocol ,Python,46c9ae2c21019a10f0eb287f1272135c40145dd4,Skip remote tests when hosted verifier is down.
3,https://api.github.com/repos/mozilla/PyBrowserID/pulls/34,34,Add support for extra IDP claims in the LocalVerifier,This is necessary when using the LocalVerifier class with PyFxA.,rfk,34695,2017-05-29T02:20:37Z,MEMBER,True,87,5,3,python client library for the BrowserID protocol ,Python,319de9d183ec6d71c1293c3a6ece1ecfda9adbf0,Add support for idpClaims/userClaims in LocalVerifier
4,https://api.github.com/repos/mozilla/PyBrowserID/pulls/34,34,Add support for extra IDP claims in the LocalVerifier,This is necessary when using the LocalVerifier class with PyFxA.,rfk,34695,2017-05-29T02:20:37Z,MEMBER,True,87,5,3,python client library for the BrowserID protocol ,Python,9c705d30353481092e616f6482cf67515f63d5ad,Fix travis-ci config
5,https://api.github.com/repos/mozilla/PyBrowserID/pulls/32,32,Validate email in assertion,,rfk,34695,2016-05-11T11:15:08Z,MEMBER,True,39,2,3,python client library for the BrowserID protocol ,Python,f61f9dd4a8f9df352cb03508b94a70ad59935d20,Add python3 in travis config
6,https://api.github.com/repos/mozilla/PyBrowserID/pulls/32,32,Validate email in assertion,,rfk,34695,2016-05-11T11:15:08Z,MEMBER,True,39,2,3,python client library for the BrowserID protocol ,Python,533a796efeb580ddc31b755e5498cd59d7a0b33f,"Validate the email address parsed out of an assertion.

This is potentially attacker-provided data and should
be treated with suspicion."
7,https://api.github.com/repos/mozilla/PyBrowserID/pulls/30,30,Preliminary updates for new BrowserID formats,"In-progress work to update PyBrowserID for latest BrowserID protocol and format updates.  This should cover the data format changes, yet-to-do are updates to the discovery protocol and the notion of ""trustedIssuers"" provided by the new nodejs verifier.

I'd like to get cracking on this so that I can use PyBrowserID's testing infrastructure for tokenserver tests, which now use some new features e.g. ""idpClaims"".

@ametaireau and @callahad any f? on this would be appreciated if you've got a few moments.
",rfk,34695,2014-03-21T07:02:44Z,MEMBER,False,471,252,11,python client library for the BrowserID protocol ,Python,87e25770a4f3c73415902c4bf4d52d3a1966b8d1,"Remove support for ""old-style"" certificate bundles."
8,https://api.github.com/repos/mozilla/PyBrowserID/pulls/30,30,Preliminary updates for new BrowserID formats,"In-progress work to update PyBrowserID for latest BrowserID protocol and format updates.  This should cover the data format changes, yet-to-do are updates to the discovery protocol and the notion of ""trustedIssuers"" provided by the new nodejs verifier.

I'd like to get cracking on this so that I can use PyBrowserID's testing infrastructure for tokenserver tests, which now use some new features e.g. ""idpClaims"".

@ametaireau and @callahad any f? on this would be appreciated if you've got a few moments.
",rfk,34695,2014-03-21T07:02:44Z,MEMBER,False,471,252,11,python client library for the BrowserID protocol ,Python,a3c93b8cb996e99ab581329c0b557d2dcd4f6a91,"Rename var ""algorithm"" to ""header"" for clarity.

This also better reflects terminology from the spec."
9,https://api.github.com/repos/mozilla/PyBrowserID/pulls/30,30,Preliminary updates for new BrowserID formats,"In-progress work to update PyBrowserID for latest BrowserID protocol and format updates.  This should cover the data format changes, yet-to-do are updates to the discovery protocol and the notion of ""trustedIssuers"" provided by the new nodejs verifier.

I'd like to get cracking on this so that I can use PyBrowserID's testing infrastructure for tokenserver tests, which now use some new features e.g. ""idpClaims"".

@ametaireau and @callahad any f? on this would be appreciated if you've got a few moments.
",rfk,34695,2014-03-21T07:02:44Z,MEMBER,False,471,252,11,python client library for the BrowserID protocol ,Python,80148e3b7951463be680e442c9086be14c15af8d,"Implement support for latest assertion format.

Thanks to lloyd for the handy reference guide:

    http://lloyd.io/evolving-browserid-data-formats/"
10,https://api.github.com/repos/mozilla/PyBrowserID/pulls/30,30,Preliminary updates for new BrowserID formats,"In-progress work to update PyBrowserID for latest BrowserID protocol and format updates.  This should cover the data format changes, yet-to-do are updates to the discovery protocol and the notion of ""trustedIssuers"" provided by the new nodejs verifier.

I'd like to get cracking on this so that I can use PyBrowserID's testing infrastructure for tokenserver tests, which now use some new features e.g. ""idpClaims"".

@ametaireau and @callahad any f? on this would be appreciated if you've got a few moments.
",rfk,34695,2014-03-21T07:02:44Z,MEMBER,False,471,252,11,python client library for the BrowserID protocol ,Python,ded6deebd322adc578cab691f0e8a7435a938aba,"Extract and return ""idpClaims"" and ""userClaims"" dicts."
11,https://api.github.com/repos/mozilla/PyBrowserID/pulls/30,30,Preliminary updates for new BrowserID formats,"In-progress work to update PyBrowserID for latest BrowserID protocol and format updates.  This should cover the data format changes, yet-to-do are updates to the discovery protocol and the notion of ""trustedIssuers"" provided by the new nodejs verifier.

I'd like to get cracking on this so that I can use PyBrowserID's testing infrastructure for tokenserver tests, which now use some new features e.g. ""idpClaims"".

@ametaireau and @callahad any f? on this would be appreciated if you've got a few moments.
",rfk,34695,2014-03-21T07:02:44Z,MEMBER,False,471,252,11,python client library for the BrowserID protocol ,Python,e1b5e58c2613c7e23bd674f16226918c7d1b8491,"Support ""iat"" field in certifications and assertions."
12,https://api.github.com/repos/mozilla/PyBrowserID/pulls/27,27,Remove tuple parameter unpacking for python3,"When I install pybrowserid in python3 I get the following in my output:

```
....
byte-compiling build/bdist.linux-x86_64/egg/browserid/crypto/_m2_monkeypatch.py to _m2_monkeypatch.cpython-33.pyc
  File ""build/bdist.linux-x86_64/egg/browserid/crypto/_m2_monkeypatch.py"", line 92
    def new_key((e, n, d)):
                ^
SyntaxError: invalid syntax
....
```

Unpacking as shown above is no longer supported in python3; see [PEP3113](http://www.python.org/dev/peps/pep-3113/).
",GraylinKim,196774,2013-12-10T01:55:46Z,CONTRIBUTOR,True,2,1,1,python client library for the BrowserID protocol ,Python,658f55014da189a8dc8ecd8cdf4af726f98d1622,"Remove tuple parameter unpacking for python3.

See http://www.python.org/dev/peps/pep-3113/"
13,https://api.github.com/repos/mozilla/PyBrowserID/pulls/26,26,Added Error Descriptions,"I often find the **description** field on **HTTPException**s in the [Werkzeug](https://github.com/mitsuhiko/werkzeug) library very handy. These are simple error explanations, not phrased for the programmer as docstrings typically are, but rather for the end user. For that reason, one can just drop them into error pages, and end users get detailed explanations of their errors.

I found myself making a table of descriptions for the **Error** classes in [PyBrowserID](https://github.com/mozilla/PyBrowserID) for a project, but then I realized this sort of thing should be a pull request.

This also resolves some of the concerns expressed in #22.
",jessaustin,295056,2013-10-25T14:23:03Z,CONTRIBUTOR,True,7,7,1,python client library for the BrowserID protocol ,Python,2e6eb7feb727a18e9c608abf2a5b3bd0c545bafa,added error descriptions
14,https://api.github.com/repos/mozilla/PyBrowserID/pulls/23,23,fix typo in README.rst,,ThomasWaldmann,356103,2013-03-25T02:22:37Z,CONTRIBUTOR,True,1,1,1,python client library for the BrowserID protocol ,Python,ca82837fb96a8dc90e1c4fb7e62da6c2a0d00d0f,fix typo in README.rst
15,https://api.github.com/repos/mozilla/PyBrowserID/pulls/22,22,multipass removed,"if you have a docstring in your classes, you don't need ""pass"".
",ThomasWaldmann,356103,2013-03-25T02:09:53Z,CONTRIBUTOR,False,0,8,1,python client library for the BrowserID protocol ,Python,71d623ece90bb93b7eddd85e7769b24e2d8f306c,"multipass removed

if you have a docstring in your classes, you don't need ""pass""."
16,https://api.github.com/repos/mozilla/PyBrowserID/pulls/19,19,Support for Python3,"These commits add native support for python3.  It was surprisingly straightforward given that we are already restricting ourselves to python2.6 and above!

Key points:
- the crypto primitives always deal with bytes, never unicode
- the jwt spec dictates that it's always utf8-encoded JSON, which simplifies things
- most other changes are to work around differences between py2 and py3:
  - there is no bytes.encode(""hex"") method in py3, so use binascii.hexlify
  - there is no ""long"" type in py3

@ametaireau r?
",rfk,34695,2012-10-03T02:11:44Z,MEMBER,True,276,214,15,python client library for the BrowserID protocol ,Python,3ffefcc798ff87255fa29375f54cb136e94e6b30,"Preliminary support for Python3.

This commit sorts out some string/bytes abmiguity and does a couple of
synxtax changes to support Python3 via 2to3 translation.  Key points:

    * JWTs are always b64url-encoded utf8-encoded JSON data
    * crypto routines only ever work with bytes, not unicode strings"
17,https://api.github.com/repos/mozilla/PyBrowserID/pulls/19,19,Support for Python3,"These commits add native support for python3.  It was surprisingly straightforward given that we are already restricting ourselves to python2.6 and above!

Key points:
- the crypto primitives always deal with bytes, never unicode
- the jwt spec dictates that it's always utf8-encoded JSON, which simplifies things
- most other changes are to work around differences between py2 and py3:
  - there is no bytes.encode(""hex"") method in py3, so use binascii.hexlify
  - there is no ""long"" type in py3

@ametaireau r?
",rfk,34695,2012-10-03T02:11:44Z,MEMBER,True,276,214,15,python client library for the BrowserID protocol ,Python,ff29d954376318c2164b6a0fb5beee50ada3d657,"Native python3 support, without requiring 2to3 translation.

This commit targets the common subset of the language supported by
python26, python27 and python31."
18,https://api.github.com/repos/mozilla/PyBrowserID/pulls/19,19,Support for Python3,"These commits add native support for python3.  It was surprisingly straightforward given that we are already restricting ourselves to python2.6 and above!

Key points:
- the crypto primitives always deal with bytes, never unicode
- the jwt spec dictates that it's always utf8-encoded JSON, which simplifies things
- most other changes are to work around differences between py2 and py3:
  - there is no bytes.encode(""hex"") method in py3, so use binascii.hexlify
  - there is no ""long"" type in py3

@ametaireau r?
",rfk,34695,2012-10-03T02:11:44Z,MEMBER,True,276,214,15,python client library for the BrowserID protocol ,Python,49ab9d7b800cdb96975d7f33b85552f93d255209,Add tox.ini for testing across different python versions.
19,https://api.github.com/repos/mozilla/PyBrowserID/pulls/17,17,Rfk/netutils module,"I sometimes get socket.error raises when calling requests.get() or requests.post().  This PR factors their use out into a sub-module and adds logic to convert socket.error into an instance of our ConnectionError class.
",rfk,34695,2012-08-27T03:38:13Z,MEMBER,True,54,38,6,python client library for the BrowserID protocol ,Python,1739aa7651665e4588281b31b16f9bceaa6d5926,"Refactor request-handling code into ""netutils"" sub-module."
20,https://api.github.com/repos/mozilla/PyBrowserID/pulls/17,17,Rfk/netutils module,"I sometimes get socket.error raises when calling requests.get() or requests.post().  This PR factors their use out into a sub-module and adds logic to convert socket.error into an instance of our ConnectionError class.
",rfk,34695,2012-08-27T03:38:13Z,MEMBER,True,54,38,6,python client library for the BrowserID protocol ,Python,a5b21937b4e6899fd5b77c393f8f4f22604bd51f,"Catch socket.error during GET or POST, report it as ConnectionError."
21,https://api.github.com/repos/mozilla/PyBrowserID/pulls/17,17,Rfk/netutils module,"I sometimes get socket.error raises when calling requests.get() or requests.post().  This PR factors their use out into a sub-module and adds logic to convert socket.error into an instance of our ConnectionError class.
",rfk,34695,2012-08-27T03:38:13Z,MEMBER,True,54,38,6,python client library for the BrowserID protocol ,Python,33a3104484baa5ef6a029c2e503d7739fc051fd9,"Refactor netutils try-except logic into a common ""request"" function."
22,https://api.github.com/repos/mozilla/PyBrowserID/pulls/15,15,mock is not supposed to be a dependency,"I don't think we need the dependency to mock when installing PyBrowserID, that's only useful for developers taht want to run the tests.
",almet,67073,2012-07-31T18:50:37Z,COLLABORATOR,True,1,1,1,python client library for the BrowserID protocol ,Python,02f0c7e91bec92ac3fa134dd2d18b047b6b7ac3a,mock is not supposed to be a dependency
23,https://api.github.com/repos/mozilla/PyBrowserID/pulls/14,14,Fix pure-python RSA implementation,"The current pure-python implementation of RSA signatures is incorrect.  It uses the wrong size for padding out the message digest and is compatible with M2Crypto and with the node-js verifier.

This commit fixes the incompatibility, and introduces a bunch of tests to cross-verify the pure-python Key classes against their M2Crypto equivalents.
",rfk,34695,2012-07-31T11:05:43Z,MEMBER,False,337,124,11,python client library for the BrowserID protocol ,Python,178a3ae712f7091e938a29dc6101b8f9589fd1f7,"Remove self-signed SSL certs, they're not longer used in the tests."
24,https://api.github.com/repos/mozilla/PyBrowserID/pulls/14,14,Fix pure-python RSA implementation,"The current pure-python implementation of RSA signatures is incorrect.  It uses the wrong size for padding out the message digest and is compatible with M2Crypto and with the node-js verifier.

This commit fixes the incompatibility, and introduces a bunch of tests to cross-verify the pure-python Key classes against their M2Crypto equivalents.
",rfk,34695,2012-07-31T11:05:43Z,MEMBER,False,337,124,11,python client library for the BrowserID protocol ,Python,301dce36ac99dbcd649b3a7a89e7281ed4838048,Prevent M2Crypto segfault when trying to sign with an RSA public key.
25,https://api.github.com/repos/mozilla/PyBrowserID/pulls/14,14,Fix pure-python RSA implementation,"The current pure-python implementation of RSA signatures is incorrect.  It uses the wrong size for padding out the message digest and is compatible with M2Crypto and with the node-js verifier.

This commit fixes the incompatibility, and introduces a bunch of tests to cross-verify the pure-python Key classes against their M2Crypto equivalents.
",rfk,34695,2012-07-31T11:05:43Z,MEMBER,False,337,124,11,python client library for the BrowserID protocol ,Python,76386f6ebf0894bce50f56d7504980cde9c10c90,"Fix the pure-python RSA implementation.

This commit also adds extensive tests to cross-verify the M2Crypto
and pure-python versions against one another."
26,https://api.github.com/repos/mozilla/PyBrowserID/pulls/14,14,Fix pure-python RSA implementation,"The current pure-python implementation of RSA signatures is incorrect.  It uses the wrong size for padding out the message digest and is compatible with M2Crypto and with the node-js verifier.

This commit fixes the incompatibility, and introduces a bunch of tests to cross-verify the pure-python Key classes against their M2Crypto equivalents.
",rfk,34695,2012-07-31T11:05:43Z,MEMBER,False,337,124,11,python client library for the BrowserID protocol ,Python,7ff164d158b9550c91ee2eb8c673d57d1b85bf2f,Rename SIGSIZE to DIGESTSIZE and add some comments on Key properties.
27,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,d7a6414bb00d726f58e34301a43fa8666a3d262a,Turn the certificate manager into a manager for well-known files
28,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,28d8ddff608cb0cafd8045aa63ffcb6bf0f9709c,Support delegated primaries
29,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,c0c0b8fab0a3207bbfbda634e77bc63744272f20,Fix handling of multiple levels of delegation.
30,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,fa3d2b6a29455d4526ec9dff6af835d49c76d0f0,"Rename ""WellKnownManager"" to ""SupportDocumentManager""."
31,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,58e44c56d3307f8f16d0430874e5e3481de4af7e,Mention delegated authority support in the changelog.
32,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,f39fd7fe6a5e64a92382ff7d10dc9d65c00a02fb,Remove the now-empty TODO file.
33,https://api.github.com/repos/mozilla/PyBrowserID/pulls/13,13,Rfk/delegated,"I have rebased @kylef's changes from pull request #7 onto the latest master, and done the renamings/fixes I suggested in that discussion.  @ametaireau what do you think?
",rfk,34695,2012-07-16T07:15:04Z,MEMBER,True,215,89,7,python client library for the BrowserID protocol ,Python,330074939c1db97bef5ecd67115cfb884b8bf75c,"Change ""supportdoc_manager"" attribute to just ""supportdocs""."
34,https://api.github.com/repos/mozilla/PyBrowserID/pulls/10,10,Add a way to configure the verification of ssl certs,,almet,67073,2012-05-29T14:20:43Z,COLLABORATOR,True,11,8,2,python client library for the BrowserID protocol ,Python,b2f1ceeda91923f079cdf633a101e5b602846708,Add a way to configure the verification of ssl certs
35,https://api.github.com/repos/mozilla/PyBrowserID/pulls/8,8,Remove ability to use a custom JWT subclass for parsing.,"This functionality is not used and no longer planned to be used, removing it cleans up the API.
",rfk,34695,2012-05-15T22:04:16Z,MEMBER,True,9,9,4,python client library for the BrowserID protocol ,Python,3126a37df5fe387300e32657632e574573690277,Remove ability to use a custom JWT subclass for parsing.
36,https://api.github.com/repos/mozilla/PyBrowserID/pulls/7,7,Support delegated primaries,,kylef,44164,2012-05-09T11:30:56Z,CONTRIBUTOR,False,179,76,6,python client library for the BrowserID protocol ,Python,532517134884bb0cdf4ba55d009d01b7facc6001,Turn the certificate manager into a manager for well-known files
37,https://api.github.com/repos/mozilla/PyBrowserID/pulls/7,7,Support delegated primaries,,kylef,44164,2012-05-09T11:30:56Z,CONTRIBUTOR,False,179,76,6,python client library for the BrowserID protocol ,Python,53c54e7f9c02552c84d0596d8928692744c754ca,Support delegated primaries
38,https://api.github.com/repos/mozilla/PyBrowserID/pulls/6,6,Move jwt parse method to browserid.jwt.JWT as a classmethod,"It doesn't make sense to me why this wasn't a class method before. Is there any decent reason?
",kylef,44164,2012-05-08T19:26:03Z,CONTRIBUTOR,False,19,21,4,python client library for the BrowserID protocol ,Python,fac5a1b6d69316f3b70f6f7d8f8abf5faa66358e,Move jwt parse method to browserid.jwt.JWT as a classmethod
39,https://api.github.com/repos/mozilla/PyBrowserID/pulls/5,5,Make M2Crypto an optional dependency,"While I was trying to use PyBrowserID at Heroku which doesn't have SWIG installed, I couldn't get M2Crypto to compile. If you just want to use the remote verifier you still need M2Crypto installed. This patch makes M2Crypto an optional dependency. So you can still use the remote verifier without M2Crypto.

I think we still need to note somewhere that you need M2Crypto for dev/local verifier, not sure where/how to put it.
",kylef,44164,2012-05-08T13:16:05Z,CONTRIBUTOR,False,7,2,2,python client library for the BrowserID protocol ,Python,f77c4a52c23d0de01c500fa7aaedcfe9c3b498eb,Make M2Crypto an optional dependency
40,https://api.github.com/repos/mozilla/PyBrowserID/pulls/4,4,Provide a pure-python fallback for when M2Crypto is not available.,"M2Crypto is unpleasant as a hard dependency, since it often doesn't `pip install` cleanly.  This patch adds a pure-python fallback that can be used if M2Crypto is not available.

As a concrete example of why this is useful, see https://bugzilla.mozilla.org/show_bug.cgi?id=751485.
This bug adds the ability to run the server-syncstorage functional tests using a live tokenserver, and hence needs to generate mock browserid assertions.  Not having to depend on M2Crypto will make it easier for QA to run such tests.
",rfk,34695,2012-05-08T03:17:19Z,MEMBER,True,522,185,10,python client library for the BrowserID protocol ,Python,427924622dfcec425d1443d33d6d0de376eabb63,Provide a pure-python fallback for when M2Crypto is not available.
41,https://api.github.com/repos/mozilla/PyBrowserID/pulls/4,4,Provide a pure-python fallback for when M2Crypto is not available.,"M2Crypto is unpleasant as a hard dependency, since it often doesn't `pip install` cleanly.  This patch adds a pure-python fallback that can be used if M2Crypto is not available.

As a concrete example of why this is useful, see https://bugzilla.mozilla.org/show_bug.cgi?id=751485.
This bug adds the ability to run the server-syncstorage functional tests using a live tokenserver, and hence needs to generate mock browserid assertions.  Not having to depend on M2Crypto will make it easier for QA to run such tests.
",rfk,34695,2012-05-08T03:17:19Z,MEMBER,True,522,185,10,python client library for the BrowserID protocol ,Python,963391f1060e44cbc1e677d091c9d63df0b28960,"Add ""from_pem_data"" and ""to_pem_data"" methods to JWT Key objects."
42,https://api.github.com/repos/mozilla/PyBrowserID/pulls/4,4,Provide a pure-python fallback for when M2Crypto is not available.,"M2Crypto is unpleasant as a hard dependency, since it often doesn't `pip install` cleanly.  This patch adds a pure-python fallback that can be used if M2Crypto is not available.

As a concrete example of why this is useful, see https://bugzilla.mozilla.org/show_bug.cgi?id=751485.
This bug adds the ability to run the server-syncstorage functional tests using a live tokenserver, and hence needs to generate mock browserid assertions.  Not having to depend on M2Crypto will make it easier for QA to run such tests.
",rfk,34695,2012-05-08T03:17:19Z,MEMBER,True,522,185,10,python client library for the BrowserID protocol ,Python,f9e9701e996712075d87c8a90049444423093d4f,Update changlog.
43,https://api.github.com/repos/mozilla/PyBrowserID/pulls/1,1,Switch to Requests,"Replaces secure_urlopen with code that uses the requests library. Requests comes pre-packaged with certs derived from the Firefox cert pack, which will successfully validate browserid.org HTTPS without the need for the user to get the right certs. Also, the Requests API is just better. :D

I also modified most of the tests to use the mock library for mocking out Requests. I moved some tests around as well (remote verifier tests were testing the fetch_public_key method, which isn't very good isolation).

Note that this pull request is incomplete; one test is failing. It's a test for the local verifier. I modified the test to avoid making an external request during the test run and included a copy of browserid.org's most recent JWT. This should make the test work from what I can gather from the old code, but it fails:

```
======================================================================
ERROR: test_well_known_doc_with_public_key (browserid.tests.test_verifiers.TestLocalVerifier)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/tests/test_verifiers.py"", line 136, in test_well_known_doc_with_public_key
    self.assertTrue(self.verifier.verify(assertion))
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/verifiers/local.py"", line 94, in verify
    cert = self.verify_certificate_chain(certificates, now=now)
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/verifiers/local.py"", line 133, in verify_certificate_chain
    raise InvalidSignatureError(""bad signature in chain"")
InvalidSignatureError: bad signature in chain
```
",Osmose,193106,2012-04-03T20:17:42Z,CONTRIBUTOR,True,177,265,9,python client library for the BrowserID protocol ,Python,8f5f3d9e44fb5044fc73189ecbb89afe83c52302,Switch to using requests for external connections.
44,https://api.github.com/repos/mozilla/PyBrowserID/pulls/1,1,Switch to Requests,"Replaces secure_urlopen with code that uses the requests library. Requests comes pre-packaged with certs derived from the Firefox cert pack, which will successfully validate browserid.org HTTPS without the need for the user to get the right certs. Also, the Requests API is just better. :D

I also modified most of the tests to use the mock library for mocking out Requests. I moved some tests around as well (remote verifier tests were testing the fetch_public_key method, which isn't very good isolation).

Note that this pull request is incomplete; one test is failing. It's a test for the local verifier. I modified the test to avoid making an external request during the test run and included a copy of browserid.org's most recent JWT. This should make the test work from what I can gather from the old code, but it fails:

```
======================================================================
ERROR: test_well_known_doc_with_public_key (browserid.tests.test_verifiers.TestLocalVerifier)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/tests/test_verifiers.py"", line 136, in test_well_known_doc_with_public_key
    self.assertTrue(self.verifier.verify(assertion))
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/verifiers/local.py"", line 94, in verify
    cert = self.verify_certificate_chain(certificates, now=now)
  File ""/Users/mkelly/Projects/PyBrowserID/browserid/verifiers/local.py"", line 133, in verify_certificate_chain
    raise InvalidSignatureError(""bad signature in chain"")
InvalidSignatureError: bad signature in chain
```
",Osmose,193106,2012-04-03T20:17:42Z,CONTRIBUTOR,True,177,265,9,python client library for the BrowserID protocol ,Python,0dd4ea5c5b92cc16efdf50aafb29a678f5b8c958,Fix broken local verifier test.
