,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/configman/pulls/171,171,Add Mozilla Code of Conduct,"Fixes #170

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-28T03:49:45Z,CONTRIBUTOR,True,15,0,1,the grand unified configuration system,Python,d21010ce16da8a4f9bbfaaf5d616febfcbf1464c,"Add Mozilla Code of Conduct file

Fixes #170.

_(Message COC002)_"
1,https://api.github.com/repos/mozilla/configman/pulls/167,167,added the tracking of the source of value overlays,"when logging the current configuration, not only say what the values are, but where they came from:

```
...
resource.postgresql.host: our_pg_server
    source: environment
...
destination.storage_class: socorro.external.postgresql.PostgresCrashStorage
    source: argparse
destination.host: our_pg_server
    source: reference_value - 'resource.postgresql.host'
...
some.arbitrary.setting: 17
    source: config.ini
...
```

this ought to help a lot when something is wrong in configuration but you're not sure where configman is getting the value that it is putting in a config setting.
",twobraids,581227,2016-12-13T21:45:27Z,CONTRIBUTOR,False,124,9,12,the grand unified configuration system,Python,030509796b897fc70ad59dddcb4acc75f20c6752,added the tracking of the source of value overlays
2,https://api.github.com/repos/mozilla/configman/pulls/167,167,added the tracking of the source of value overlays,"when logging the current configuration, not only say what the values are, but where they came from:

```
...
resource.postgresql.host: our_pg_server
    source: environment
...
destination.storage_class: socorro.external.postgresql.PostgresCrashStorage
    source: argparse
destination.host: our_pg_server
    source: reference_value - 'resource.postgresql.host'
...
some.arbitrary.setting: 17
    source: config.ini
...
```

this ought to help a lot when something is wrong in configuration but you're not sure where configman is getting the value that it is putting in a config setting.
",twobraids,581227,2016-12-13T21:45:27Z,CONTRIBUTOR,False,124,9,12,the grand unified configuration system,Python,75a94807bb7cdc12576c4aea5dea0d06008221e3,version to 1.3.1
3,https://api.github.com/repos/mozilla/configman/pulls/166,166,Tweak docs regarding bool as a converter,"Fixes #165

r?
",willkg,820826,2016-08-16T14:39:27Z,MEMBER,True,2,1,1,the grand unified configuration system,Python,d2985cf5b5eb52d7a6d1037369cb7b5209e538a7,"Tweak docs regarding bool as a converter

Fixes #165"
4,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,64104006818195945eab1cdb49efee6228bad170,"get tox green for py26,py27"
5,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,7cdd996f0cf4ae0a53fa31f267131713c53d98d4,"start porting to py3. green on py27, already dropped py26 support"
6,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,86dec44c7558c666f1d1c28ee2f74ac8aedb00a1,future statement through config_manager
7,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,aabff5902ba557ddbfeb230d6515b485baae3a2c,"re-add py26 support. argparse help output will need to be regexed or
|substr in str|'ed :("
8,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,5407ff0ee462c527f50b6bba6f9bee62bc223154,"works in py27, tox seems a bit busted?"
9,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,45b4bd0962516270c97fe815201a62933faee2ba,fix tox
10,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,3f1c92d6d4084549eeb72678b020b3a315ea8ce2,move the first py3 error to dotdict
11,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,197f698d112f8c9c4d809349971c22da6dce382d,python 3 < 3.3 not supported
12,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,68dfb84ac6295dba58dd0d96e59047034ab17cbf,move py3 error to def_sources/__init__.py
13,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,8dcf054ef9abdff7a1edba2b3020b99bd28d32e7,move py3 error to value_sources/for_conf.py
14,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,817350d0c23d7172e6b1c38fb2e9bc064656608e,move py3 error to value_sources/for_modules.py
15,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,76943333444ee04b369da785e04f64af7e30c91b,first py3 error in test_val_for_modules.py!
16,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,f47ae77172940a7c78ecb9188ade467c673b6efd,port a bunch more files
17,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,120c9b33a72b497f40d0bef826ef2f139cd78d50,a lot more files
18,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,d31b3d2b76e880c55788b5377acdbb704c4c494f,"more files, still green on py2"
19,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,38da6984157d6ebb16063b8f713ae2fd80e085b7,"four more files to go, then more py3 fixes"
20,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,41a2f543293b1ab0446deb4737d737bd77582dd0,"down to 57 errors, 1 failure"
21,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,105346cf049e7112e4ecbd95bbee68b5f727b3e1,"down to 53 errors, 1 failure"
22,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,0042c66a5637e61a145df334d57f79a9e9759bf7,"47 errors, 1 failure"
23,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,5bb3e28a2c340afe2c31c88f998d35b788d6d730,"errors=40, failures=1"
24,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,3e6c864804059896b9b73ff8880a31ff9e5fdc37,"errors=13, failures=1"
25,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,5698eaac30d7a1afb783e0a6472be6aaa0560a4f,"20 errors, 4 failures now that i fixed some broken python =\"
26,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,5f72e1e1c031730711e81ad2d363a59a74325098,"all ints in py3 are long. also, 31 errors, 4 failures =\"
27,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,72f351038fd62bc5b20ae87426685a20f71d2ae0,"30 errors, 4 failures"
28,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,8b4dc5e2125109b53b5aa7ed8a6e88a2740cb3ba,"comment out ArgumentParser.version; errors-18, failures=4"
29,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,81f87f5eebde86c903c53518f23f7f12e6dec66e,the sorted()/cmp and getattr hacks are killing me
30,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,34dd7958e0e220634df2c5bac57fc7932ad6a381,"back down to errors=18, failures=4"
31,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,c9902bd15d02f86323da645f0b4b6384e5a297c7,errors=18 failures=1
32,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,3e5f909348869414e7d6d38ea988c033e84e0f92,"errors=15, failures=3"
33,https://api.github.com/repos/mozilla/configman/pulls/163,163,Python 3 support,"@twobraids @peterbe , I started working on this in 2015 and gave up.  Since then my py3 porting skills have leveled up.  I picked configman back up on a whim today and actually got everything green in py26,py27,py33,py34,py35!

However, this is a large enough change, with associated unit test changes, that I'd like someone familiar with it to really eyeball and put this version through its paces.

Let me know if you have any questions!
",escapewindow,826343,2016-07-01T05:23:08Z,CONTRIBUTOR,True,627,354,84,the grand unified configuration system,Python,aa44d1cdf13ddb56ae9ec8466b89af99080cad32,"errors=15, failures=1"
34,https://api.github.com/repos/mozilla/configman/pulls/162,162,reliable tox testing,"@twobraids r?
Now `tox` is always reliable. 
",peterbe,26739,2015-07-02T15:21:21Z,CONTRIBUTOR,False,15,14,2,the grand unified configuration system,Python,2d50fbb6080ee04ab5939caeb88327f6a8f79e71,reliable tox testing
35,https://api.github.com/repos/mozilla/configman/pulls/161,161,cannot rely on argparse help ordering - compensate,"because in certain environments, argparse may produce differing orderings of the arguments in the help output.  This means that testing for equivalence is unreliable.  

solution: sort the expected and actual help output strings and compare those.  That proves that the output contained all the same characters, but removes the dependency on their order.
",twobraids,581227,2015-07-02T14:05:02Z,CONTRIBUTOR,True,20,4,1,the grand unified configuration system,Python,af4de33c404be9e1bfb2a7749188e63f33728317,cannot rely on argparse help ordering - compensate
36,https://api.github.com/repos/mozilla/configman/pulls/160,160,TEST - no merge - cannot rely on argparse help ordering - compensate,,twobraids,581227,2015-07-02T13:48:06Z,CONTRIBUTOR,False,26,13,2,the grand unified configuration system,Python,059aacd84ffe58aa140eb7de0621b16aa685ec40,Use tox for travis tests
37,https://api.github.com/repos/mozilla/configman/pulls/160,160,TEST - no merge - cannot rely on argparse help ordering - compensate,,twobraids,581227,2015-07-02T13:48:06Z,CONTRIBUTOR,False,26,13,2,the grand unified configuration system,Python,1b9304dbfddd15ea320a1d7b6673b01517a41848,cannot rely on argparse help ordering - compensate
38,https://api.github.com/repos/mozilla/configman/pulls/160,160,TEST - no merge - cannot rely on argparse help ordering - compensate,,twobraids,581227,2015-07-02T13:48:06Z,CONTRIBUTOR,False,26,13,2,the grand unified configuration system,Python,7a4a540918f74fd6ea6947d3b3f401b63d0300b7,remove error message that hides problem
39,https://api.github.com/repos/mozilla/configman/pulls/160,160,TEST - no merge - cannot rely on argparse help ordering - compensate,,twobraids,581227,2015-07-02T13:48:06Z,CONTRIBUTOR,False,26,13,2,the grand unified configuration system,Python,1f736004efc86fd1137606674ea85ab53471a957,switched to sorting argparse help for testing
40,https://api.github.com/repos/mozilla/configman/pulls/159,159,fixed various formatting and minor problems,"just a bunch of clean ups
",twobraids,581227,2015-06-03T15:48:47Z,CONTRIBUTOR,True,120,201,24,the grand unified configuration system,Python,c2ff6df87488d0cdea0e7e3905e70dbb1618d9e0,fixed various formatting and minor problems
41,https://api.github.com/repos/mozilla/configman/pulls/158,158,Use tox for travis tests,,catlee,54458,2015-05-28T19:41:40Z,CONTRIBUTOR,False,8,10,2,the grand unified configuration system,Python,89c7fcad37d34acef5715676ae30f7e4a072f8fd,Use tox for travis tests
42,https://api.github.com/repos/mozilla/configman/pulls/158,158,Use tox for travis tests,,catlee,54458,2015-05-28T19:41:40Z,CONTRIBUTOR,False,8,10,2,the grand unified configuration system,Python,cf585c9c07402a2dd10178ac3da751dda359564f,Merge branch 'master' of https://github.com/mozilla/configman into tox
43,https://api.github.com/repos/mozilla/configman/pulls/158,158,Use tox for travis tests,,catlee,54458,2015-05-28T19:41:40Z,CONTRIBUTOR,False,8,10,2,the grand unified configuration system,Python,97d227cc948e90c50ecd8daba74fb0201831694c,Add tox to test-requirements.txt
44,https://api.github.com/repos/mozilla/configman/pulls/157,157,Add support for argparse as either a definition or overlay value source,"This is support for configman being a drop in replacement/enhancement for argparse.  It does not make argparse the default commandline processing module, it just makes argparse available.

doc changes, demo and tutorial changes will be in the next PR.
",twobraids,581227,2015-05-28T17:15:57Z,CONTRIBUTOR,True,2254,10,23,the grand unified configuration system,Python,709c90426ebc7d880b7fbfad35d8b396c3846205,add support for argparse as both value & def source
45,https://api.github.com/repos/mozilla/configman/pulls/157,157,Add support for argparse as either a definition or overlay value source,"This is support for configman being a drop in replacement/enhancement for argparse.  It does not make argparse the default commandline processing module, it just makes argparse available.

doc changes, demo and tutorial changes will be in the next PR.
",twobraids,581227,2015-05-28T17:15:57Z,CONTRIBUTOR,True,2254,10,23,the grand unified configuration system,Python,a2460d5d342e728bb3c2233f8c156a7dbd1f0d8f,fixed argparse 'count' type
46,https://api.github.com/repos/mozilla/configman/pulls/157,157,Add support for argparse as either a definition or overlay value source,"This is support for configman being a drop in replacement/enhancement for argparse.  It does not make argparse the default commandline processing module, it just makes argparse available.

doc changes, demo and tutorial changes will be in the next PR.
",twobraids,581227,2015-05-28T17:15:57Z,CONTRIBUTOR,True,2254,10,23,the grand unified configuration system,Python,b0634fa86cef42e52e904635c5dada40e3d76a16,added argparse demo apps
47,https://api.github.com/repos/mozilla/configman/pulls/156,156,fix yet another order dependent unit test,"sort the results of **builtin**.**dict** to ensure we have a consistent ordering
",twobraids,581227,2015-05-28T14:16:09Z,CONTRIBUTOR,True,2,2,1,the grand unified configuration system,Python,dfd0fd4cbd75c9a8ec314b7e7fec711d0b007832,"sort the results of __builtin__.__dict__ to ensure we have a consitent
ordering"
48,https://api.github.com/repos/mozilla/configman/pulls/155,155,small typo fix,,catlee,54458,2015-05-28T03:33:09Z,CONTRIBUTOR,True,1,1,1,the grand unified configuration system,Python,6d425059a3a2e66d878f79308f28c5c17ff8c679,small typo fix
49,https://api.github.com/repos/mozilla/configman/pulls/154,154,sorted the ignored_symbols_list,"it is unwise to depend on default sort orders of lists in tests.  This PR breaks a dependency on a sort order that causes trouble on some platforms.
",twobraids,581227,2015-05-26T19:26:31Z,CONTRIBUTOR,True,1,1,1,the grand unified configuration system,Python,eae20ea687171eac285d7f540bb69420a49ea500,sorted the ignored_symbols_list
50,https://api.github.com/repos/mozilla/configman/pulls/153,153,Refactoring in preperation for Argparse,"some more changes to facilitate future inclusion of argparse 
",twobraids,581227,2015-05-18T19:12:39Z,CONTRIBUTOR,True,71,40,2,the grand unified configuration system,Python,c92e5416b1ad3367e916a1b43f483e1fb356f714,Refactoring in preperation for Argpparse
51,https://api.github.com/repos/mozilla/configman/pulls/152,152,print doc in env output - fixes #151,"@twobraids r? (cc @rhelmer )

[Before](https://github.com/mozilla/configman/blob/19c49861118b852cc86a28647ae3aca896a6c77a/configman/tests/test_val_for_mapping.py#L131-L143) 
[After](https://github.com/mozilla/configman/blob/73a527e4b8f0e9d2f60d1ee0d42cdc1a76b2ec21/configman/tests/test_val_for_mapping.py#L132-L153)

Note how there's a single `\n` between options but a double `\n\n` between namespaces so to say. 
",peterbe,26739,2015-05-08T19:16:27Z,CONTRIBUTOR,True,62,2,2,the grand unified configuration system,Python,71e6ce08e78518dbc8e2ab0e82f57fd6bcb4f956,print doc in env output - fixes #151
52,https://api.github.com/repos/mozilla/configman/pulls/150,150,"return option, aggregation, namespace","@twobraids r?
",peterbe,26739,2015-04-29T16:10:33Z,CONTRIBUTOR,True,32,1,2,the grand unified configuration system,Python,5f8ce138ff58607f88526c35170bc9b23a66c3f9,"return option, aggregation, namespace"
53,https://api.github.com/repos/mozilla/configman/pulls/149,149,container travis,"travis r?
",peterbe,26739,2015-04-27T22:58:15Z,CONTRIBUTOR,True,27,2,1,the grand unified configuration system,Python,0bc8ef0bf909a11cd8059698089efa98d029cdee,container travis
54,https://api.github.com/repos/mozilla/configman/pulls/148,148,__str__,"@twobraids r?
",peterbe,26739,2015-04-27T22:45:24Z,CONTRIBUTOR,True,39,0,2,the grand unified configuration system,Python,6d81afc6bd966f04e5b8844e75a6716537cc8a89,__str__
55,https://api.github.com/repos/mozilla/configman/pulls/147,147,number of clean up and housekeeping tasks,"this represents a number of tasks that clean up of various issues. 

1) prepare to support multiple command_line value sources.  That means rework where we decide to do help
2) add the ability to use a ""$"" suffix on an option to signal that the option is not to be written out to a configuration file.  This will enable the future argparse support to have multiple arguments with the same name.
3) move fetching value sources out the inner most loop in the overlay/expand loops.  That is much more efficient.
4) several formatting cleanups
",twobraids,581227,2015-03-30T21:24:55Z,CONTRIBUTOR,True,177,52,11,the grand unified configuration system,Python,a788b64d3aa4be832a442c84a9410063eb07a5fa,number of clean up housekeeping tasks
56,https://api.github.com/repos/mozilla/configman/pulls/146,146,release on all commits,,peterbe,26739,2015-03-27T19:01:52Z,CONTRIBUTOR,True,3,9,2,the grand unified configuration system,Python,51ae7de1674a6e889b3e10ca355cdcaa10e7c4c7,release on all commits
57,https://api.github.com/repos/mozilla/configman/pulls/146,146,release on all commits,,peterbe,26739,2015-03-27T19:01:52Z,CONTRIBUTOR,True,3,9,2,the grand unified configuration system,Python,6e0a7deca125b145fd4a602da21a2c5db07591f1,update README regarding tags
58,https://api.github.com/repos/mozilla/configman/pulls/145,145,write env files to put options into environment,"be able to write out environment variables for use in the shell.  automatically change '.' into '__'  
",twobraids,581227,2015-03-25T20:54:04Z,CONTRIBUTOR,True,137,2,2,the grand unified configuration system,Python,e254d50aae7747238f9a6c5cb37dcf5166fff80d,added writing 'env'
59,https://api.github.com/repos/mozilla/configman/pulls/144,144,no mergy - demo only - added support for argparse,"big change, not sure how to make it smaller as the changes are comprehensive.

This makes configman a drop in replacement for argparse (including support for subparsers), but giving argparse all the ""--admin..."" stuff including config files (.conf, .ini, .json, .py), environment vars, etc.  

I would love to see this tried with some known python programs just to see how well (or badly) it works.  

``` python
from configman import ArgumentParser
parser = ArgumentParser(prog='my_app')
parser.add_argument('--foo', action='store_true', help='foo help', dest='foo')
parser.add_argument('--egg', action='store', help='eggs', type=str)
subparsers = parser.add_subparsers(help='sub-command help', dest='sub_command')
parser_a = subparsers.add_parser('a', help='a help')
parser_a.add_argument('bar', type=int, help='bar help')
parser_a.add_argument('--fff', type=int, help='a fff help')
parser_b = subparsers.add_parser('b', help='b help')
parser_b.add_argument('--baz', choices='XYZ', help='baz help')
parser_b.add_argument('--fff', choices='XYZ', help='b fff help')

c = parser.parse_args()
```
",twobraids,581227,2015-03-04T18:27:54Z,CONTRIBUTOR,False,2246,66,17,the grand unified configuration system,Python,b1296b0cc3ed8ffd6af6aa13e46e55a518149d2f,added support for argparse
60,https://api.github.com/repos/mozilla/configman/pulls/144,144,no mergy - demo only - added support for argparse,"big change, not sure how to make it smaller as the changes are comprehensive.

This makes configman a drop in replacement for argparse (including support for subparsers), but giving argparse all the ""--admin..."" stuff including config files (.conf, .ini, .json, .py), environment vars, etc.  

I would love to see this tried with some known python programs just to see how well (or badly) it works.  

``` python
from configman import ArgumentParser
parser = ArgumentParser(prog='my_app')
parser.add_argument('--foo', action='store_true', help='foo help', dest='foo')
parser.add_argument('--egg', action='store', help='eggs', type=str)
subparsers = parser.add_subparsers(help='sub-command help', dest='sub_command')
parser_a = subparsers.add_parser('a', help='a help')
parser_a.add_argument('bar', type=int, help='bar help')
parser_a.add_argument('--fff', type=int, help='a fff help')
parser_b = subparsers.add_parser('b', help='b help')
parser_b.add_argument('--baz', choices='XYZ', help='baz help')
parser_b.add_argument('--fff', choices='XYZ', help='b fff help')

c = parser.parse_args()
```
",twobraids,581227,2015-03-04T18:27:54Z,CONTRIBUTOR,False,2246,66,17,the grand unified configuration system,Python,c72e07c7ae97f555802567685f69177b669c40bc,style cleanup
61,https://api.github.com/repos/mozilla/configman/pulls/143,143,Add contribute.json file.,"Adding a contribute.json file à la http://contribute.paas.allizom.org/.
",Osmose,193106,2015-02-27T19:16:05Z,CONTRIBUTOR,True,21,0,1,the grand unified configuration system,Python,3f3b67160622827603b87f49201e1f093e28b92b,Add contribute.json file.
62,https://api.github.com/repos/mozilla/configman/pulls/142,142,fixed bug where expansion fails to use dicts,"Classes are allowed to use plane old `dict` instances to specify required configuration rather than using namespaces.  While that works fine in defining initial requirements, it wasn't working in the dynamic expansion of classes.    This PR fixes that problem by ensuring that all required config in any Mapping type coming in during expansion is properly converted to Namespace.
",twobraids,581227,2015-02-20T15:18:22Z,CONTRIBUTOR,True,44,5,2,the grand unified configuration system,Python,dab7f80504b5c542b1efc76c4e19afa74945fa88,fixed bug where expansion fails to use dicts
63,https://api.github.com/repos/mozilla/configman/pulls/141,141,Keep a piece of a paragraph from being interpreted as a header.,,erikrose,295816,2015-02-19T00:08:58Z,MEMBER,True,1,1,1,the grand unified configuration system,Python,935cfd81721bb9c4644e8b843687dfde06b3c873,Keep a piece of a paragraph from being interpreted as a header.
64,https://api.github.com/repos/mozilla/configman/pulls/140,140,added has_changed to Option to tag modifications,"when configman writes out an ini config file, it tends to comment out everything.  that means that writing a config file is a rotten method of capturing the config of a working app.  It would be great if you could tune an app to whatever config values you want and then, by writing out the config, perfectly reproduce the state of the config that will just work.  

This change monitors what config options have been changed from their defaults and ensures that when an ini file is written the changes are NOT commented out in the ini file.  
",twobraids,581227,2015-01-14T17:23:50Z,CONTRIBUTOR,True,71,6,5,the grand unified configuration system,Python,33f7f7b143eccdeaf93cc6c3bfb255ccac8d2510,added has_changed to Option to tag modifications
65,https://api.github.com/repos/mozilla/configman/pulls/139,139,"short MPL2 preamble, fixes #138","@twobraids r?
",peterbe,26739,2015-01-13T16:46:59Z,CONTRIBUTOR,True,159,1963,53,the grand unified configuration system,Python,5320de3f42c26b56d76ea5b4ce551183b5394190,"short MPL2 preamble, fixes #138"
66,https://api.github.com/repos/mozilla/configman/pulls/136,136,"clean, rationalize, fix-up, and otherwise standardize imports","The mess of mixed relative and absolute imports makes it difficult to work effectively on configman.  Unable to make relative imports work as expected, this PR converts them all to absolute imports.  Then going through the whole system, it changes import of entire modules into imports of the specific pieces of the modules.   That gets rid of all the module aliases (as in `import x.y as x_y`)

All this is preparation for the introduction of argparse as the command line module of choice.
",twobraids,581227,2015-01-09T17:41:24Z,CONTRIBUTOR,True,433,212,29,the grand unified configuration system,Python,c83e49a625890573c83540f38e1de4e8a7d2c46d,"eliminate relative imports, cleanup intra-package imports"
67,https://api.github.com/repos/mozilla/configman/pulls/135,135,added python path as config file | corrected ignore list,"this PR covers two flaws in the python-modules-as-config code:

1)  confgman should accept the command line form  --admin.conf=my.python.dotted.path.for.package.module
2) the module ignore list was missing its quotes.
",twobraids,581227,2015-01-06T20:06:48Z,CONTRIBUTOR,True,18,11,3,the grand unified configuration system,Python,a53af4263576f73cbc1bd81318294ad6dbce618c,added python path as config file | corrected ignore list
68,https://api.github.com/repos/mozilla/configman/pulls/134,134,"added opt name ""password"" to secrets protection","I noticed while working with socorro ini files that options with ""password"" in the name aren't given ""secrets"" protection.  Considering that they _are_ given ""secrets"" protection during logging and via the ""help"" option, I figure it should be all-or-nothing.

I've extended ""secrets"" protection to options with ""password"" in the name.
",twobraids,581227,2015-01-02T16:36:57Z,CONTRIBUTOR,False,104,3,2,the grand unified configuration system,Python,c3ccec4e1b36cf9831d7e125a5cc32a7b19bf82b,"added opt name ""password"" to secrets protection"
69,https://api.github.com/repos/mozilla/configman/pulls/133,133,travis CI deployment by tags,"@twobraids r?

I generated the extra to `.travis.yml` using their command line tool. 
And the notes I wrote and added to the README are basically ""from memory"" meaning I haven't tested it. I've never been particularly good at tags so the only good way to test this is to (once this is merged) make a new release that is identical to 1.2.8 except an incremented version. 
",peterbe,26739,2014-10-21T14:52:30Z,CONTRIBUTOR,True,38,0,2,the grand unified configuration system,Python,6c9ca1c98f4564c9589612d932fec2fcf3831885,travis CI deployment by tags
70,https://api.github.com/repos/mozilla/configman/pulls/132,132,fixed 'Usage' to be on one line instead of two,"a comma was left out of the code that produces the Help usage line.  That caused it to print on two lines instead of just one.  This PR adds the missing comma.

also in the same line, when a command line argument has been given a value AND the user has listed --help, we ought show the item that command line argument as an optional value.  In the context of the line provided, it is not optional, it is required. 

This is the case when a program is a launcher and the non-switch argument is a class that represents the app to run.  Git itself is a fine example:

``` bash
$ git commit --help
```

the usage line in help should list the word ""commit':

``` bash
    git commit  ...
```

earlier configman didn't get this right and would instead show:

``` bash
git [ command ]
```
",twobraids,581227,2014-10-16T16:53:24Z,CONTRIBUTOR,True,166,3,2,the grand unified configuration system,Python,80514085706c2cdfe087543fe9843bfc362af9ba,fixed 'Usage' to be on 1 line
71,https://api.github.com/repos/mozilla/configman/pulls/131,131,make get_opt truly ignore unknown options,"way early in the development of Configman, a challenge was to get the standard commandline tool module `get_opt` to ignore unknown command line switches.  It is possible (probable) that the user specified command line options that haven't been until defined deep into the iterative overlay process.  `get_opt` has to ignore them, otherwise the exception that it raises would stop Configman dead before it could complete its work.

That original implementation unwisely took unknown command line switches and put them into a the same list that was later used to store non-switch command line arguments.  The result was that if there was an optional command line argument for which the user did not specify a value and there were switches on the command line that would not be valid until later in the overlay process, then those undefined switches would get inadvertently used as values for the unspecified command line arguments.  That was bad.

say we had this situation:

```
$ my_app --help
usage: my_app [ arg1 [ arg2 ]]
...
$ # say arg1 specified a class that would bring the command line switch --alpha
$ my_app AlphaClass --alpha=27
```

At the beginning of the overlay process, we have only two options: `arg1` & `arg2`.  In the first round of the iterative overlay process, get_opt doesn't know that --alpha=27 will be valid in future, but it does know that it is invalid now.  `arg1` gets the value `AlphaClass`.  Because the `for_getopt` module was putting unknown switches into the arguments list, `arg2` was getting the value `--alpha=27`.  In the next iteration of the overlay process, `--alpha` became a legitimate switch because AlphaClass defined it in its required_config.  This time `get_opt` reinterpreted the switch and successfully set its value.  

It was too late for `arg2`, though.  It had been given a bad value in the first round.

This PR fixes that problem.
",twobraids,581227,2014-10-10T22:34:34Z,CONTRIBUTOR,True,16,10,2,the grand unified configuration system,Python,3b6bf2e143678ffeeff095104550aff8cff8c98d,make get_opt truly ignore unknown options
72,https://api.github.com/repos/mozilla/configman/pulls/130,130,my take on not exposing secrets,"the idea is the default behavior is to not expose secrets.  There are times, though, when it is a handy feature to get the app itself to write out a compete config file.  

this PR adds the `--admin.expose_secrets` command line option and adds a `secret` attribute to the Options class.  If `--admin.expose_secrets` is NOT on the command line, then `--admin.print_conf`, `--admin.dump_conf` & `--help` will always an Option's value as ""****************"" if that Option has the attribute `secret == True`.
",twobraids,581227,2014-10-06T22:23:33Z,CONTRIBUTOR,True,192,51,5,the grand unified configuration system,Python,4c3b8242bd1542144a7bc09f841b421d2f954ecb,added Option 'secret' and 'expose_secrets'
73,https://api.github.com/repos/mozilla/configman/pulls/129,129,"never_expose option, fixes #128","@twobraids r?
",peterbe,26739,2014-10-06T15:43:55Z,CONTRIBUTOR,False,122,14,10,the grand unified configuration system,Python,114189aeec081225335bb9872e9012f69774980c,"never_expose option, fixes #128"
74,https://api.github.com/repos/mozilla/configman/pulls/127,127,"generate conf without trailing whitespace, fixes #126","@twobraids r?
",peterbe,26739,2014-09-17T17:46:07Z,CONTRIBUTOR,True,10,2,3,the grand unified configuration system,Python,0a816b2808386e6d8a6b5a7f60789617c72d1c75,"generate conf without trailing whitespace, fixes #126, r=@twobraids"
75,https://api.github.com/repos/mozilla/configman/pulls/124,124,add the ability for modules to be used as value/overlay sources,"this PR enables modules (specified in qualified form:  ""package1.package2.module"", or as instances of types.TypeModule).   

This also gives configman the ability to write modules with ""--admin.print_conf=py""  
",twobraids,581227,2014-08-08T16:17:21Z,CONTRIBUTOR,True,1195,17,8,the grand unified configuration system,Python,136d5232eac3b44bf1a88ed4ca409061c2dd89de,add support for modules as value sources
76,https://api.github.com/repos/mozilla/configman/pulls/123,123,extended mapping_class for config to function & context,"the method `ConfigurationManager.get_config` accepts an object hook so that the users can specify what type of mapping container in which they want their configuration.  That method isn't the only way to get configuration out of configman.  

This PR extends the mapping object_hook to the two other ways to get configuration:  `ConfigurationManager.context` and the bare function `configuration`
",twobraids,581227,2014-08-06T13:26:32Z,CONTRIBUTOR,True,102,7,3,the grand unified configuration system,Python,8d6be83da2013795870c9a63213f8769ab810e94,extended mapping_class for config to function & context
77,https://api.github.com/repos/mozilla/configman/pulls/123,123,extended mapping_class for config to function & context,"the method `ConfigurationManager.get_config` accepts an object hook so that the users can specify what type of mapping container in which they want their configuration.  That method isn't the only way to get configuration out of configman.  

This PR extends the mapping object_hook to the two other ways to get configuration:  `ConfigurationManager.context` and the bare function `configuration`
",twobraids,581227,2014-08-06T13:26:32Z,CONTRIBUTOR,True,102,7,3,the grand unified configuration system,Python,4667b8a47ccd34c00a27ac88e4ac248d0fa5268e,clearer selection of kwargs on the configuration call
78,https://api.github.com/repos/mozilla/configman/pulls/122,122,stripping leading '.' awkwardly crept back in,"that awful while loop was back and I didnt' notice.  I got rid of it...
",twobraids,581227,2014-08-06T01:13:27Z,CONTRIBUTOR,True,7,5,1,the grand unified configuration system,Python,7adc58337c9d838bbb6476e3864494ab53f92eaf,stripping leading '.' awkwardly crept back in
79,https://api.github.com/repos/mozilla/configman/pulls/121,121,an incremental step toward better converters,"this is a step toward a better converter system for configman.  The immediate benefit to this change is that the excessive quoting done by the ini handler is gone and paths to classes are completely qualified.

Some redundancy has been eliminated (there was more than one timedelta converter), and the converter section has been arranged into three sections: utility, from string and to string
",twobraids,581227,2014-08-05T18:18:03Z,CONTRIBUTOR,True,510,191,8,the grand unified configuration system,Python,99a359953f54e0dbb454d49545296542db7d5edd,an incremental stept toward better converters
80,https://api.github.com/repos/mozilla/configman/pulls/120,120,Fix typo causing `python setup.py test` to fail.,"setuptools takes an argument `tests_require` that lists packages
required for tests to run. This was typoed in the past tense as
`tests_required`.
",bramwelt,324567,2014-08-01T18:28:28Z,CONTRIBUTOR,True,1,1,1,the grand unified configuration system,Python,71ab4dbde68f572236ec43c0acf9889ae5f12fc0,"Fix typo causing `python setup.py test` to fail.

setuptools takes an argument `tests_require` that lists packages
required for tests to run. This was typoed in the past tense as
`tests_required`."
81,https://api.github.com/repos/mozilla/configman/pulls/119,119,added object hook for post processing value sources,"don't be intimidated by the size, most of the changes are adding tests

When a value source (mappings from the commandline, config file, environment, etc) is brought into configman, they've been translated into instance of DotDict.  This change adds an `object_hook` so that the translation can be into whatever Mapping type is useful.  

The first application for this will be to support legacy keys in existing configurations for crontabber.  That app, unfortunately, used the hyphen in namespace names.  Hyphens are not allowed in environment variables.  Crontabber will be modified to not define requirements with hyphens.  However, we still want existing config files that use hyphens to still be useful.  This will be done by having crontabber use a DotDict variant that translates keys with hyphens into keys with underscores.  That mapping class will be used as `value_source_object_hook`.  For crontabber, the  hyphen and underscore will be treated as if they were underscores.  

I hesitated to bake this key translation directly into configman.  I didn't want the overhead, nor did I want to force clients of configman into restrictive key rules.  Armed with this new system using an object hook, crontabber will be able to use a translating  system and other clients of configman won't suffer the overhead of the translations.
",twobraids,581227,2014-08-01T16:37:54Z,CONTRIBUTOR,True,671,31,17,the grand unified configuration system,Python,a343768d02ff83aff2673ade53b5e810bf66a31f,added object hook for post processing value sources
82,https://api.github.com/repos/mozilla/configman/pulls/118,118,replace slow list with faster ordered set,"Within Configman, DotDict and its derivatives, DotDictWithAcquisition and Namespace, are ordered dictionaries.  Until now, the order of the keys was kept in a list.  This was slow since linear search was the only way to test if a key was present.  This PR replaces that slow list with a true OrderedSet implementation. 
",twobraids,581227,2014-07-31T13:13:55Z,CONTRIBUTOR,True,126,4,4,the grand unified configuration system,Python,55eb105eed677e5ee167440303108db3928fc998,replace slow list with faster ordered set
83,https://api.github.com/repos/mozilla/configman/pulls/116,116,altered interpretation of environ,"It's been hard to use environment variables with nested configuration because linux shells don't allow the dot character in identifiers.  This change makes configman interpret os.environ differently.  Any doubled underscores in environment variables where the key is not all uppercase, will be interpreted as the dot character. 

""resource__postgresql__database_name"" would be interpreted as ""resource.postgresql.database_name"".  this will make configman apps compatible with ""export"" as well as ""env"" methods  of setting environment variables.  
",twobraids,581227,2014-07-15T22:53:02Z,CONTRIBUTOR,True,43,1,3,the grand unified configuration system,Python,0fec96bc0eb4f7d012ac8fb780d97ef82c20c916,altered interpretation of environ
84,https://api.github.com/repos/mozilla/configman/pulls/115,115,expanded number of types eligible for automatic Option generation,"when using a simple dict as a definition source, any type ought be eligible rather than a short list of builtin types.  this patch allows anything to be wrapped automatically as an option.  
",twobraids,581227,2014-07-15T20:46:19Z,CONTRIBUTOR,True,34,3,2,the grand unified configuration system,Python,85dabde07fdaea4229f338cb180484dae537954c,expanded number of types eligble for automatic Option generation
85,https://api.github.com/repos/mozilla/configman/pulls/114,114,added simple start,"added a simple functional start for cases when the it is not required to keep the ConfigurationManager object around.  This makes configman look really simple.  
",twobraids,581227,2014-07-14T12:59:21Z,CONTRIBUTOR,True,9,0,1,the grand unified configuration system,Python,58ebf6fde9eb3f28e2ade8f9aec9ff788c224a4f,added simple start
86,https://api.github.com/repos/mozilla/configman/pulls/113,113,honoring ignoring mismatches with test,"this change allows us to wrap any mapping that is being used as a value source and have configman honor a request to ignore anything within that might be a mismatch
",twobraids,581227,2014-06-12T22:50:24Z,CONTRIBUTOR,True,84,1,2,the grand unified configuration system,Python,c4c947580f8fc7b5d87475d83aee672097d02a60,honoring ignoring mismatces with test
87,https://api.github.com/repos/mozilla/configman/pulls/112,112,added acquisition to os.environ to enable shortcuts,"versions of configman previous to 1.2.4 treated all incoming key/value value_sources as if they had acquisition.  I felt this lead to ambiguity and surprises as common names like 'password' matched unexpected in places.  For example:
- defined options:
  - a.b.password
  - a.c.password
- incoming value_source:
  - ""password"": ""foopass""

configman would assign ""foopass"" to both a.b.password and a.c.password.

It turns out that crontabber and several features of Socorro elasticsearch tests relied on this feature that I removed.

This PR puts the feature back, but only for environment variables.  If a programmer wants the behavior for other key/value mappings, I suggest explicitly stating so by wrapping the mapping in the class `DotDictWithAcquisition`.  This fixes the crontabber project.   However, for the Socorro ES tests, I've made sure that they fully qualify their option names so there can be no ambiguity.  
",twobraids,581227,2014-06-11T17:16:26Z,CONTRIBUTOR,False,2,0,1,the grand unified configuration system,Python,b510a54ce28e7c0ef4a55929c8c69c61b40193c4,added acquisition to os.environ to enable shortcuts
88,https://api.github.com/repos/mozilla/configman/pulls/111,111,bug fix with ref values not propagating to values aleady visited,"sometimes in deeply nested structures, a new value will be introduced for an option that already has been processed.  That new value needs to be propagated back to the previously processed options.  This code keeps track of the reference values and resets the older options to have them reconsidered for overlays.
",twobraids,581227,2014-06-03T14:12:34Z,CONTRIBUTOR,False,128,7,2,the grand unified configuration system,Python,af40ceeac2151507dede2adfc6514fb73b8a1f8d,bug fix with ref values not propagating to values aleady visited
89,https://api.github.com/repos/mozilla/configman/pulls/110,110,bug fix with ref values not propagating to values aleady visited,"In complicated situations where many deeply nested options are referencing resources, sometimes late expansions did not propagate there values to earlier expanded values.  This is corrected by tracking the reference value links, and making sure that older values are revisited with the new values.
",twobraids,581227,2014-05-28T14:21:27Z,CONTRIBUTOR,True,127,8,3,the grand unified configuration system,Python,0457a113415b00c7c86c8df2b8c689f329b0386a,bug fix with ref values not propagating to values aleady visited
90,https://api.github.com/repos/mozilla/configman/pulls/110,110,bug fix with ref values not propagating to values aleady visited,"In complicated situations where many deeply nested options are referencing resources, sometimes late expansions did not propagate there values to earlier expanded values.  This is corrected by tracking the reference value links, and making sure that older values are revisited with the new values.
",twobraids,581227,2014-05-28T14:21:27Z,CONTRIBUTOR,True,127,8,3,the grand unified configuration system,Python,77b53a2176e8acbf298bc37510513c28a5d24f7e,up'd the version number
91,https://api.github.com/repos/mozilla/configman/pulls/109,109,refactor converters,"In preparation for adding new definition and value sources (argparse, python modules, ...) I've refactored the converters.  They're now sorted into to types: to string and from string.  Both types now have dispatch functions that will relieve clients of this module from having to find the appropriate converter manually.
",twobraids,581227,2014-05-05T13:05:52Z,CONTRIBUTOR,False,1709,461,13,the grand unified configuration system,Python,b4c7e28030091683b01ba939666053eef4633826,created new converter system
92,https://api.github.com/repos/mozilla/configman/pulls/109,109,refactor converters,"In preparation for adding new definition and value sources (argparse, python modules, ...) I've refactored the converters.  They're now sorted into to types: to string and from string.  Both types now have dispatch functions that will relieve clients of this module from having to find the appropriate converter manually.
",twobraids,581227,2014-05-05T13:05:52Z,CONTRIBUTOR,False,1709,461,13,the grand unified configuration system,Python,9be86df00ccd8f3d65134cf5e0675a61f0dbcd78,changes based on review
93,https://api.github.com/repos/mozilla/configman/pulls/108,108,fixed second bug that would overwrite the resource section,"in the crontabber, the resource.rabbitmq.host kept getting overwritten back to 'localhost'.  This was because the expansion code in the `_overlay_expand` method would use an `update` on the namespace even if some of the keys already existed.  This has been changed to a more discriminate update that won't overwrite.   
",twobraids,581227,2014-04-17T19:56:07Z,CONTRIBUTOR,True,48,2,2,the grand unified configuration system,Python,3b09ea9dd0581ade763dbd289b4fa7cb1c999be7,fixed second bug that would overwrite the resource section
94,https://api.github.com/repos/mozilla/configman/pulls/107,107,issue 106 - require configobj,"@twobraids r?

From now on, configobj is a must. 
",peterbe,26739,2014-04-08T22:14:09Z,CONTRIBUTOR,True,33,375,11,the grand unified configuration system,Python,168b5547ce672312364fd6549dbced218efd1672,issue 106 - require configobj
95,https://api.github.com/repos/mozilla/configman/pulls/105,105,fixes issue 104 - cryptic error on missing config file,"a missing config file would give a cryptic error no matter what the value of 'config_optional' was set to.
",twobraids,581227,2014-04-08T15:39:23Z,CONTRIBUTOR,True,286,30,4,the grand unified configuration system,Python,0ec1864bbc88c62203ce92d942491729501c4a73,fixed config file required + tests
96,https://api.github.com/repos/mozilla/configman/pulls/102,102,fixed bug where ref_objects got overwritten,"When 'reference_options' are created for the use of 'reference_value_from' links, they are created without testing to see if they already exist.  That meant that sometimes when complicated class expansions happen, 'reference_options' can created earlier can get overwritten by 'reference_options' created later. 

Ensured that an existence check is made before new 'reference_options' are created.  Refactored some of the code to make it clearer.  Fixed a test that was hiding this problem.  Added another test for this problem.  
",twobraids,581227,2014-01-14T03:38:17Z,CONTRIBUTOR,True,57,16,3,the grand unified configuration system,Python,75a07014c351fc70f479bbdb88b9004cabedbe85,fixed bugs where ref_objects got overwritten
97,https://api.github.com/repos/mozilla/configman/pulls/101,101,MPL 2.0,"r?
",peterbe,26739,2013-12-12T16:15:08Z,CONTRIBUTOR,True,354,28,2,the grand unified configuration system,Python,62df403ccd261290524c081731ff16a3f7db22aa,"MPL 2.0, r=lars"
98,https://api.github.com/repos/mozilla/configman/pulls/100,100,upgrade to setup.py,"- Use setuptools instead so we can do things like `setup.py bdist_wheel`
- Change test runner so that `setup.py test` actually runs with nose
- Correct URL
- Use codecs to read the README in case it ever contains non-ascii characters
",peterbe,26739,2013-12-12T16:04:16Z,CONTRIBUTOR,False,16,5,1,the grand unified configuration system,Python,f62d4b1c8349e2557f8b18e82ac351745a32f3fc,upgrade to setuptools
99,https://api.github.com/repos/mozilla/configman/pulls/100,100,upgrade to setup.py,"- Use setuptools instead so we can do things like `setup.py bdist_wheel`
- Change test runner so that `setup.py test` actually runs with nose
- Correct URL
- Use codecs to read the README in case it ever contains non-ascii characters
",peterbe,26739,2013-12-12T16:04:16Z,CONTRIBUTOR,False,16,5,1,the grand unified configuration system,Python,fcc61c91bb428bd6a781922fa10bf2ec06901f8e,correct Lars name
100,https://api.github.com/repos/mozilla/configman/pulls/99,99,PEP8 Everywhere!,"This PR goes through the entire codebase and reapplies PEP8, PyFlake, and LCR (Lars Code Requirements™) standards.  There is room for more improvement, but this PR just focuses on just source code formatting and arrangement, nothing semantic.
",twobraids,581227,2013-11-22T13:10:26Z,CONTRIBUTOR,True,1617,1012,25,the grand unified configuration system,Python,681b113140819313b70fa8bbdd75c6396d6dd11a,PEP8 Everywhere!
101,https://api.github.com/repos/mozilla/configman/pulls/98,98,default ini to all option values commented out except those marked otherwise.,"This PR represents a change to writing out ini files.

1) opinion has been that the comments about why something is commented out, or suggestions as to the use of include files is clutter that detracts rather than helps.  This PR drastically reduces the amount of comments in the ini file.

2) all values are now by default commented out.  The apps should be able to run with defaults.  Editing the ini file is only for special cases.

3) introduction of `likely_to_be_changed` keyword in the Option constructor.  This indicates that the Option is volatile and is very likely to be edited in the ini file:  passwords, host names, etc.   Options with this tag will not be commented out by default when writing the ini file.  
",twobraids,581227,2013-11-21T16:51:30Z,CONTRIBUTOR,True,70,174,7,the grand unified configuration system,Python,5e159ee0701be309bd4cfaeaf6c79d2f181218db,ini switched to commented out as default; added likely_to_be_changed
102,https://api.github.com/repos/mozilla/configman/pulls/97,97,fixed overlay bug and added test to verify,"there's a bug in the overlay/expand process.  If an expansion of a class brings in new Options, but one of those options already exists in the namespace, that pre-existing option will be overwritten with the defaults from the expanded class.  That's true, even when that overwitten option has already been through the overlay process.  In otherwords, the expansion resets the option back to its default value, cancelling any values that might have come in from the commandline, ini file, etc.  

The solution is to look at what is brought in by an expansion of a class.  If the Option have ""already been seen"", mark that option as ""new"" so that the overlay process can restore the value.
",twobraids,581227,2013-11-20T20:23:22Z,CONTRIBUTOR,True,35,0,2,the grand unified configuration system,Python,7d5803872b6c27f71d5a727f969d037e5b5fda21,fixed overlay bug and added test to verify
103,https://api.github.com/repos/mozilla/configman/pulls/96,96,removed the migration feature,"the migration feature was a failed attempt at changing fixing the organizational problem of ini files.  The reference linking method now in configman is a much better feature.  This PR removes the ill-conceived migration feature.
",twobraids,581227,2013-11-20T18:16:04Z,CONTRIBUTOR,True,2,374,5,the grand unified configuration system,Python,b53bf751600279fdd00fed49bf05c08375601018,removed the migration feature
104,https://api.github.com/repos/mozilla/configman/pulls/95,95,fixes from review comments,"this was supposed to have been part of the previous PR.  I neglected to push the changes based on review comments before I merged the previous PR.  
",twobraids,581227,2013-11-20T15:54:04Z,CONTRIBUTOR,True,109,95,2,the grand unified configuration system,Python,0a545c3299285fa24c26fca2bc9d7b66ed22478b,fixes from review comments
105,https://api.github.com/repos/mozilla/configman/pulls/94,94,the referenced_value project,"This is the implementation of the resource branch outlined in my blog posting http://www.twobraids.com/2013/11/configuration-is-eating-my-brain.html  I would really like to see this system integrated into configman.  We may choose not to use it, just like we're not using the migration feature.   Since configman is a system that is not used outside of Socorro, except for a few personal projects, I think we can afford to be exploratory: we should try different things.  This may prove to be very useful, or, like the migration feature, may fall flat on its face.  We can always back it out later if gets in the way.  
",twobraids,581227,2013-11-08T21:09:03Z,CONTRIBUTOR,True,327,43,8,the grand unified configuration system,Python,f60aa36fac1ad29e814a5a5af45dc434e0175bad,the reference_value_from project
106,https://api.github.com/repos/mozilla/configman/pulls/93,93,fixes issue 92: command line value sources now ignore --admin.strict and are always strict,"the implementation of the --admin.strict switch had the unintended side effect of stopping the command line from checking the validity of its switches.  It is my belief that, while we may allow unknown keys in ini files, we should never allow unknown keys at the command line.   

This PR fixes that issue.
",twobraids,581227,2013-10-29T16:59:09Z,CONTRIBUTOR,True,47,4,3,the grand unified configuration system,Python,d9d3dd06ac2c9b39b3cd5ccb78a679a826cd15f5,command line value sources now ignore --admin.strict and are always strict
107,https://api.github.com/repos/mozilla/configman/pulls/91,91,issue-90 - to_string_converter in write_conf output,"@twobraids r?

The issue https://github.com/mozilla/configman/issues/90 explains it well. Hopefully. 

Note, that now, when you run `--admin.print_conf=ini` and one of the options has a specified `to_string_converter` it is included in the commented-out output. E.g.:

```
# name: a
# doc: the doc string
# converter: configman.tests.test_val_for_configobj.dict_decoder
# tostring: configman.tests.test_val_for_configobj.dict_encoder
# Inspect the automatically written value below to make sure it is valid
#   as a Python object for its intended converter function.
a='one:One' 
```

I chose the word ""tostring"" which I don't love but can't think of a better one. 
",peterbe,26739,2013-10-16T21:01:46Z,CONTRIBUTOR,False,168,93,10,the grand unified configuration system,Python,846eea763031873f18c2aa0c002f41cab70d6911,issue-90 - to_string_converter in write_conf output
108,https://api.github.com/repos/mozilla/configman/pulls/91,91,issue-90 - to_string_converter in write_conf output,"@twobraids r?

The issue https://github.com/mozilla/configman/issues/90 explains it well. Hopefully. 

Note, that now, when you run `--admin.print_conf=ini` and one of the options has a specified `to_string_converter` it is included in the commented-out output. E.g.:

```
# name: a
# doc: the doc string
# converter: configman.tests.test_val_for_configobj.dict_decoder
# tostring: configman.tests.test_val_for_configobj.dict_encoder
# Inspect the automatically written value below to make sure it is valid
#   as a Python object for its intended converter function.
a='one:One' 
```

I chose the word ""tostring"" which I don't love but can't think of a better one. 
",peterbe,26739,2013-10-16T21:01:46Z,CONTRIBUTOR,False,168,93,10,the grand unified configuration system,Python,554af32cf498fdb3af3d9497107ec16f75bba57d,less output now
109,https://api.github.com/repos/mozilla/configman/pulls/89,89,Fixes Issue 88 - relative paths for `+include file.ini`,,GabiThume,289130,2013-09-06T16:41:58Z,CONTRIBUTOR,False,189,15,3,the grand unified configuration system,Python,ae388a581de9e8dec6857085144e0f8647cb8413,fixes issue 88
110,https://api.github.com/repos/mozilla/configman/pulls/89,89,Fixes Issue 88 - relative paths for `+include file.ini`,,GabiThume,289130,2013-09-06T16:41:58Z,CONTRIBUTOR,False,189,15,3,the grand unified configuration system,Python,a23c4597055595c2fb9e199e7ab738dee51a5cc1,new demo app
111,https://api.github.com/repos/mozilla/configman/pulls/89,89,Fixes Issue 88 - relative paths for `+include file.ini`,,GabiThume,289130,2013-09-06T16:41:58Z,CONTRIBUTOR,False,189,15,3,the grand unified configuration system,Python,0204bba2e2cb1a327d4a091fa9cf8a5b348f29f6,"Merge pull request #1 from peterbe/issue_88

Issue 88"
112,https://api.github.com/repos/mozilla/configman/pulls/89,89,Fixes Issue 88 - relative paths for `+include file.ini`,,GabiThume,289130,2013-09-06T16:41:58Z,CONTRIBUTOR,False,189,15,3,the grand unified configuration system,Python,78ecf6ed77631b56c82d262d490b74b645c399c1,makes peter's app executable
113,https://api.github.com/repos/mozilla/configman/pulls/86,86,issue 90 - to_string_converter not used on write_conf,"@twobraids r?
",peterbe,26739,2013-08-28T00:36:56Z,CONTRIBUTOR,False,58,53,7,the grand unified configuration system,Python,d23fb0d9e589b925e613eb7f99ffbca7558442b5,issue 85 - ability to set a to_string_converter on Option instances
114,https://api.github.com/repos/mozilla/configman/pulls/86,86,issue 90 - to_string_converter not used on write_conf,"@twobraids r?
",peterbe,26739,2013-08-28T00:36:56Z,CONTRIBUTOR,False,58,53,7,the grand unified configuration system,Python,ee9c1c7a99cb95ba8e410016c60d9760d3746938,use __str__ on Option instead
115,https://api.github.com/repos/mozilla/configman/pulls/84,84,pep8 and cleanups,"@twobraids

I first just wanted to remove the excess print in dotdict and then noticed some files not ending correctly and then just ran a full pyflake and pep8 check. 
",peterbe,26739,2013-08-23T23:12:50Z,CONTRIBUTOR,False,25,33,7,the grand unified configuration system,Python,ca13c6224317ad85af6d775435d5204127cafc20,pep8 and cleanups
116,https://api.github.com/repos/mozilla/configman/pulls/83,83,issue-82 - excess options to just warn instead,"@twobraids r?

I feel a little bit bad about introducing a new dependency (mock) but it feels like the right thing to do now. 
It's, after all, only a dev requirement. You don't need it for configman to run. 

Also, I'm never getting any peace with this optional configobj dependency. As far as I'm concerned, ConfigParser is so inferior compared to configobj that perhaps it should be a requirement. 

Anyway, note the `x.ini` I added in the test_config_manager.py file. These tests don't work in tox where configobj is not available. When configobj is not available you get this:

```
AllHandlersFailedException: ConfigParser cannot load file: File contains no section headers.
file: x.ini, line: 1
'foo=FOO\n'
```

:(
",peterbe,26739,2013-08-23T23:00:12Z,CONTRIBUTOR,False,81,13,4,the grand unified configuration system,Python,395a55fa4b6bb3b0e07c155b9178ba1d60d99207,issue-82 - excess options to just warn instead
117,https://api.github.com/repos/mozilla/configman/pulls/83,83,issue-82 - excess options to just warn instead,"@twobraids r?

I feel a little bit bad about introducing a new dependency (mock) but it feels like the right thing to do now. 
It's, after all, only a dev requirement. You don't need it for configman to run. 

Also, I'm never getting any peace with this optional configobj dependency. As far as I'm concerned, ConfigParser is so inferior compared to configobj that perhaps it should be a requirement. 

Anyway, note the `x.ini` I added in the test_config_manager.py file. These tests don't work in tox where configobj is not available. When configobj is not available you get this:

```
AllHandlersFailedException: ConfigParser cannot load file: File contains no section headers.
file: x.ini, line: 1
'foo=FOO\n'
```

:(
",peterbe,26739,2013-08-23T23:00:12Z,CONTRIBUTOR,False,81,13,4,the grand unified configuration system,Python,5edaa19ea9132ed1107cb06fe14f3163782b46c0,added 'admin.strict' to control acceptance of unmatched options
118,https://api.github.com/repos/mozilla/configman/pulls/83,83,issue-82 - excess options to just warn instead,"@twobraids r?

I feel a little bit bad about introducing a new dependency (mock) but it feels like the right thing to do now. 
It's, after all, only a dev requirement. You don't need it for configman to run. 

Also, I'm never getting any peace with this optional configobj dependency. As far as I'm concerned, ConfigParser is so inferior compared to configobj that perhaps it should be a requirement. 

Anyway, note the `x.ini` I added in the test_config_manager.py file. These tests don't work in tox where configobj is not available. When configobj is not available you get this:

```
AllHandlersFailedException: ConfigParser cannot load file: File contains no section headers.
file: x.ini, line: 1
'foo=FOO\n'
```

:(
",peterbe,26739,2013-08-23T23:00:12Z,CONTRIBUTOR,False,81,13,4,the grand unified configuration system,Python,4053861a60cca5603548a1af98b58d6a5362b2e9,"Merge pull request #1 from twobraids/issue82

added 'admin.strict' to control acceptance of unmatched options"
119,https://api.github.com/repos/mozilla/configman/pulls/81,81,Expand includes more intuitively.,"- We change the path when we include something in a subfolder, e.g.
  if we include b/c.ini inside a.ini, then anything included in b/c.ini
  will have b/ as its base path for includes.
- Expand includes at the level of indentation the include directive is
  placed at.
",ghost,10137,2013-08-22T04:32:25Z,NONE,True,6,5,1,the grand unified configuration system,Python,f4c83bafb6550fe329f906223a793adc927c51b2,"Expand includes more intuitively.

 * We change the path when we include something in a subfolder, e.g.
   if we include b/c.ini inside a.ini, then anything included in b/c.ini
   will have b/ as its base path for includes.

 * Expand includes at the level of indentation the include directive is
   placed at."
120,https://api.github.com/repos/mozilla/configman/pulls/80,80,fix missing key in DotDict copy constructor,"When the DotDict **init** is called with a Mapping that has a key/value where the value is an empty Mapping, the key is missing from the resultant DotDict instance.  This fixes that oversight.  
",twobraids,581227,2013-08-21T19:34:13Z,CONTRIBUTOR,True,19,4,2,the grand unified configuration system,Python,dbaef76aafda709aaf04a7671d9987b96ae0c044,fix initialization missing empty dicts
121,https://api.github.com/repos/mozilla/configman/pulls/79,79,make sure required_config is a Mapping and don't try to change it.,"When a ConfigurationManger object is created, it takes a Mapping of Option objects.  Most frequently, these  Option objects come from a class' 'required_config' class variable.  An unfortunate side effect is that the ConfigManager instance takes the liberty of changing the value of the default of each Option.  This behavior simplifies writing config files and the output of 'help'.  

Unfortunately, this has the side effect of changing the default value in the definition of the class.  If that class is reused later, the original value of defaults might be lost.   This is undesirable especially when running tests: one test will effect the initial state of the next test.

The simple solution is that configman makes a copy of the required_config rather than using the original.  

A second bug closely related was also found in tests: if the default value of an Option is a Mock object and that Option uses a class_converter, configman will try to get further 'requried_config' values from that Mock.  The Mock will happily comply and return another Mock.  This just causes a mess as configman is counting on a failure happen when there is no additional 'requried_config'.   The solution here is to make sure that when configman requests a 'requred_config' from an Option, it makes sure that the result is a Mapping object.  If it is not, it ignores the result and assumes there is no further 'requried_config'
",twobraids,581227,2013-08-12T16:25:48Z,CONTRIBUTOR,True,24,15,5,the grand unified configuration system,Python,8a9bf2a7fe0d5a2942bb64bc203364972175d5ef,stop changing the defaults in required_config bug fixed
122,https://api.github.com/repos/mozilla/configman/pulls/79,79,make sure required_config is a Mapping and don't try to change it.,"When a ConfigurationManger object is created, it takes a Mapping of Option objects.  Most frequently, these  Option objects come from a class' 'required_config' class variable.  An unfortunate side effect is that the ConfigManager instance takes the liberty of changing the value of the default of each Option.  This behavior simplifies writing config files and the output of 'help'.  

Unfortunately, this has the side effect of changing the default value in the definition of the class.  If that class is reused later, the original value of defaults might be lost.   This is undesirable especially when running tests: one test will effect the initial state of the next test.

The simple solution is that configman makes a copy of the required_config rather than using the original.  

A second bug closely related was also found in tests: if the default value of an Option is a Mock object and that Option uses a class_converter, configman will try to get further 'requried_config' values from that Mock.  The Mock will happily comply and return another Mock.  This just causes a mess as configman is counting on a failure happen when there is no additional 'requried_config'.   The solution here is to make sure that when configman requests a 'requred_config' from an Option, it makes sure that the result is a Mapping object.  If it is not, it ignores the result and assumes there is no further 'requried_config'
",twobraids,581227,2013-08-12T16:25:48Z,CONTRIBUTOR,True,24,15,5,the grand unified configuration system,Python,88d9e7f559b22b6d068e7676bd3f9ed82b93993b,rev version
123,https://api.github.com/repos/mozilla/configman/pulls/78,78,version rev to 1.1.6,"just rev the version number
",twobraids,581227,2013-08-08T12:39:58Z,CONTRIBUTOR,True,1,1,1,the grand unified configuration system,Python,f54bdaf4f7f5af830c91e233f83f6c2d1aa1edc6,version rev
124,https://api.github.com/repos/mozilla/configman/pulls/77,77,stopped dupe keys when assigning new value to existing key,"a bug caused an internal structure to have duplicates if a key was changed using two different access methods.  This caused the 'keys_breadth_first' method to return duplicate keys.  This test insures that condition doesn't still trouble 'keys_breadth_first'
",twobraids,581227,2013-08-07T17:06:42Z,CONTRIBUTOR,True,15,1,2,the grand unified configuration system,Python,eb250b09a4c09c4cfbbca748bfb9117d638480a9,stopped dupe keys when assigning new value to existing key
125,https://api.github.com/repos/mozilla/configman/pulls/75,75,fix excessive quotes in generating ini files,"when writing ini files, the handler for ConfigObj writes out an ini file with too many quotes.  This patch silences the excessive quoting, adds annotations to migrated options in ini files and adds an option to turn off migration.  
",twobraids,581227,2013-04-10T18:07:12Z,CONTRIBUTOR,True,187,22,5,the grand unified configuration system,Python,50456fc1c09e3b6f4ae463afe303bef55ca38103,fix excessive quotes in generating ini files
126,https://api.github.com/repos/mozilla/configman/pulls/74,74,reigned in too eager migration algorithm,"the migration algorithm allows options that are identically defined in multiple namespaces to be 'migrated' to a lower level in the namespace hierarchy.  This means that they only have to be defined once within a configuration file rather than in every namespace.  The original algorithm was too lenient in deciding what options are candidates for migration.

This changes tightens up the decision making process. Given this scenario:

  x.y.m == 17
  a.b.m == 17
  k.l.m == 22

the old algorithm would allow the migration of 'm' to a lower level even though the values were different in different namespaces.  The new algorithm will not allow this migration - all the definitions must be identical for migration to happen.
",twobraids,581227,2013-04-09T15:18:41Z,CONTRIBUTOR,True,69,10,2,the grand unified configuration system,Python,e344b1a289e4e908d917a1be84242b39c5314867,reigned in too eager migration algorithm
127,https://api.github.com/repos/mozilla/configman/pulls/73,73,better error message for conversion errors,"this simple change makes it much easier to diagnose conversion errors in Options
",twobraids,581227,2013-04-09T13:38:40Z,CONTRIBUTOR,True,6,1,1,the grand unified configuration system,Python,7bf942c587e4ff5408f4e274d1f5038e358f72f7,better error message for conversion errors
128,https://api.github.com/repos/mozilla/configman/pulls/72,72,fixed bug in allowing aggregates in get_options_list,"the get option function was returning both options and aggregates, this was a mistake.  Now it returns only Options
",twobraids,581227,2013-03-16T19:09:16Z,CONTRIBUTOR,True,22,1,2,the grand unified configuration system,Python,174b302c15f0c33f220fe155dec1c64e61d292f6,fixed bug in allowing aggregates in get_options_list
129,https://api.github.com/repos/mozilla/configman/pulls/71,71,added named arguments,"This change to configman adds named arguments.      

```
$ some_app.py  --help
usage:
   some_app.py [OPTIONS]...  arg1 [ arg2 [ arg3 ]]
```

It's the arg1, arg2, arg3 that I'm interested in here. Normally, you'd access these with sys.args without configman or config.args with configman. They come to the programmer as an uninterpreted list of strings. I'm treating them just like switches. The end result to the programmer looks like this:

```
config = config_manager.get_config()
print config.arg1, config.arg2, config.arg3
```

In other words, from the programmers perspective, they're just values passed into the program with the same access method and priority as command line switches. In fact,  the configman Option object is used to specify both switches and arguments: 

```
n.add_option(
    name='filename',
    doc='the name of the file',
    default=None,
    is_argument=True
)
```

see http://www.twobraids.com/2013/03/named-arguments-for-configman.html for more details
",twobraids,581227,2013-03-08T14:28:33Z,CONTRIBUTOR,True,96,48,9,the grand unified configuration system,Python,21ad9964dd65fa280671dc36e399582bc4c0a921,added named arguments
130,https://api.github.com/repos/mozilla/configman/pulls/70,70,added migration feature,"This is a major change to the inner workings of configman it addresses these nagging issues:

1) unnecessary dependency loading: in previous versions of configman, the converter functions associated with Option objects would be called immediately (and repeatedly) on string values.  This was unacceptable when the string represented a class to be loaded.  If the class represented a default (such as HBase) that was to be overwritten by a config file, there is no reason to load the default module.  

The change was implemented by rewriting the recursive overlaying/expansion methods of the ConfigurationManager class.  It now only loads modules after all the overlaying is complete.  This actually simplified the process.  See `config_manager.py:473` for the new routines.

2) exploit the new DotDict breadth first traversal method: previous versions of the ConfigurationManager had several recursive methods that walked the tree of option definitions.  These functions were opaque at best.  The previous PR to this one added tree traversal to the DotDict base class resulting in significant simplifications of the methods in ConfigurationManager that needed traversals.

3) add option migration to config file writing: rather than have values repeated in nested namespaces, it is now legal to save them in lower level namespaces.  Writing `.ini` or `.conf` files supports this directly and automatically.  

These three enhancements are intimately intertwined.  They depend on each other so splitting them into separate PRs was not practical.  Do not be intimidated by the size of this PR - this is more code simplification than it looks.
",twobraids,581227,2013-03-04T17:06:18Z,CONTRIBUTOR,True,824,510,18,the grand unified configuration system,Python,27a8266a110df111c81f68128b91f4ae8530663d,added migration feature
131,https://api.github.com/repos/mozilla/configman/pulls/69,69,rewrite of the config file writing,"IGNORE THIS PR FOR NOW.  THIS IS A TEST

the next step in the evolution of configman.  This PR represents a re-write of the methods that writeout configuration files.  This is an incremental step toward the goal of being able to push common options from nested namespaces into outer scopes.  
",twobraids,581227,2013-02-28T22:10:48Z,CONTRIBUTOR,False,428,141,12,the grand unified configuration system,Python,f4aef7c0cb77ee9c93b4826f60821db7e493f389,rewrite of the config file writing
132,https://api.github.com/repos/mozilla/configman/pulls/68,68,enhance DotDict indexing mechanisms to make future easier,"I'm going to gut and restuff configman to simplify the overlay/expand mechanism.  Because it as a big change, I'm going to break it down into bite sized chunks to spread out the reviewing pain.

This is the first chunk - an enhancement to DotDict to allow for more flexible indexing using dotted strings to access nested mappings:

```
    d = DotDict()
    d.x = DotDict()
    d.x.y = DotDict()
    d.x.y.a = 'Wilma'
    assert d['x.y.a'] == 'Wilma'
    assert d['x.y'].a == 'Wilma'
    assert d['x'].y.a == 'Wilma'
    assert d.x.y.a == 'Wilma'
    assert d.x.y['a'] == 'Wilma'
    assert d.x['y.a'] == 'Wilma'
    assert d['x'].y['a'] == 'Wilma'
    assert d['x']['y']['a'] == 'Wilma'
```

This will be extraordinarily useful in changes to come. 
",twobraids,581227,2013-02-15T20:37:20Z,CONTRIBUTOR,True,346,22,4,the grand unified configuration system,Python,59497e7f686db2c32b2d2e9b6b6779e2924c882c,enhance DotDict indexing mechanisms to make future easier
133,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,6fc98bc10279aa0be16219934b9276e40eb38893,guts reworked
134,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,b9da8f18fa63877f7de303ca5741f8c13d64761f,updated version
135,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,c90b3cf113ee7330fe2d054dc3c5ab5bea109440,pyflakes issues
136,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,eacd6a5e70d916e5c2853375314dc172322026b1,removed debug and obsolete code
137,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,4c223b726d749973df42032cc55e4b8b4d78dce8,comments added and removed
138,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,2efa61d90e010ba0717f7c6d6941bcef2e2ba191,corrected test failures
139,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,a172045931f8fb8531aab35c7f36c1b28fa3279f,comments
140,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,d60424b43e0f73a206075a2f8c75eb3df479d93c,"tests, NotAnOptionChecking, tests"
141,https://api.github.com/repos/mozilla/configman/pulls/67,67,gutted and restuffed,"This PR is an experiment that went very very well, but for now is just proof of concept.

remember all those recursive overlays and expansions that happened three times during the instantiation of a ConfigurationManager?  Well, they're gone - replaced with a single  function that does iteratively does overlays and expansions on only precisely the Options that need it.  There is no more of instantiation of objects only to have them thrown away as a new overlay is added.

What prompted this change.  In my work with Raspberry Pi, I realized the burden of loading unnecessary dependencies.  For example, Raspberry Pi didn't use Postgres, but it had to still be in the code base because it was a default in Socorro.  Even if specified as a string, Configman would load it and then not use it.  

This new version doesn't apply the `from_string_converter` to any option until after the overlaying of values from value sources is done.  Only then are the Option values created by applying the `from_string_converter`.   

This makes configman startup in less than half the time of the previous codebase.  It simplifies the code to make it easier to understand.  
",twobraids,581227,2013-02-14T15:25:17Z,CONTRIBUTOR,False,618,295,15,the grand unified configuration system,Python,934138cd5062d6c47a92d8649f043029951d3092,fixed unit tests
142,https://api.github.com/repos/mozilla/configman/pulls/66,66,removed confusing error message when multiple handlers fail,"when configman tries to find a handler for an configuration value source, it iterates through all the candidate handlers.  The handlers are too chatty and raise exceptions saying, for example, that the json module can't handle an ini file.

This change makes them decline silently rather than announcing it. This makes for friendlier error messages when a given handler reports a legitimate error. 
",twobraids,581227,2013-02-13T17:57:03Z,CONTRIBUTOR,True,73,27,9,the grand unified configuration system,Python,b9c19bb4f29d8d378efadeef3d1b0f827cf53200,removed confusing error message when multiple handlers fail
143,https://api.github.com/repos/mozilla/configman/pulls/65,65,Closes #64 - Added a string to list converter.,"This makes the default list converter using commas to separate the input string and create an actual Python list. 
",adngdb,328790,2013-02-05T01:59:08Z,CONTRIBUTOR,True,30,1,4,the grand unified configuration system,Python,63c76088832f2a16698888aa38b9a06ec3503d4d,Closes #64 - Added a string to list converter.
144,https://api.github.com/repos/mozilla/configman/pulls/63,63,added support for module value sources + pyflake cleanup,"This revision adds the use of python modules as value sources.  The name of a module in a package can now be used instead of a configuration file:

```
.../config/commonconfig.py:
    HBaseHost = 'localhost'
    HBasePort = 9090

.../some/dotted/module.py:
    from config.commonconfig import HBaseHost as hbase_host
    from config.commonconfig improt HBasePort as hbase_port
    stderr_logging_level = 30

$ someconfigman_app --admin.conf=some.dotted.module --help
   someconfigman_app 1.0
      --hbase_port
         the port that HBase needs to connect to (default:9090)
      --hbase_host
        the host on which HBase is found (default:localhost)
      --stderr_logging_level
        the logging level for stderr (default: 30)
```
",twobraids,581227,2012-12-04T13:49:04Z,CONTRIBUTOR,False,105,10,5,the grand unified configuration system,Python,a6558fa6f1f2496fb97c43c814835b7bfb469690,added support for module value sources + pyflake cleanup
145,https://api.github.com/repos/mozilla/configman/pulls/62,62,fix setup to include version.txt,"r?
",peterbe,26739,2012-11-27T18:06:53Z,CONTRIBUTOR,False,1,1,1,the grand unified configuration system,Python,6d182c189c28d9874c12d6f7e98c64f2866178a7,fix setup to include version.txt
146,https://api.github.com/repos/mozilla/configman/pulls/61,61,stripped \n from version string,"the upload to pypi failed because the script tried to make a file name from the string with \n in it.  
",twobraids,581227,2012-11-27T14:09:21Z,CONTRIBUTOR,False,2,1,1,the grand unified configuration system,Python,a65beb75622dfc2bcb0d4bfa57bf8ca10f1ff113,stripped \n from version string
147,https://api.github.com/repos/mozilla/configman/pulls/60,60,brought generic_app up to date from a change from last May...,"Way back in May, I changed the way that the 'application' option was handled.  This broke the demos and I never noticed.  This PR fixes the problem introduced in commit https://github.com/mozilla/configman/tree/a428999a038510b866aa560b6ae812bc61196bce
",twobraids,581227,2012-11-21T21:17:49Z,CONTRIBUTOR,True,6,7,1,the grand unified configuration system,Python,f3fece001eda8aaf633efd0bebdafb2953ee474c,brought generic_app up to date from a change from last May...
148,https://api.github.com/repos/mozilla/configman/pulls/59,59,bug 813734 - non-existant admin.conf file should raise error,"@twobraids r?
",peterbe,26739,2012-11-21T18:34:27Z,CONTRIBUTOR,False,51,0,3,the grand unified configuration system,Python,a2ea1d1a166f92d9406d7a1829ebbceef1c1a8c1,bug 813734 - non-existant admin.conf file should raise error
149,https://api.github.com/repos/mozilla/configman/pulls/59,59,bug 813734 - non-existant admin.conf file should raise error,"@twobraids r?
",peterbe,26739,2012-11-21T18:34:27Z,CONTRIBUTOR,False,51,0,3,the grand unified configuration system,Python,661e829ce772b42797356501face9f39a0a36aa7,works with configparser by default
150,https://api.github.com/repos/mozilla/configman/pulls/57,57,no import of configman in setup.py but still available as __version__,"(DO NOT MERGE)

To quote of the Gods of packaging:

_""DO NOT import your package from your setup.py as suggested in another answer here: it will seem to work for you (because you already have your package's dependencies installed), but it will wreak havoc upon new users of your package, as they will not be able to install your package without manually installing the dependencies first.""_

http://stackoverflow.com/questions/2058802/how-can-i-get-the-version-defined-in-setup-py-setuptools-in-my-package

This felt like the most practical solution such that we...:
- can get the version number available in `setup.py`
- only have to maintain it in one place
- able to do things like `>>> import configman; configman.__version__` in run-time configman

If you can think of a better way of doing it, I'm all ears. 

BTW, without this fix, running `tox` is unreliable since that depends on using `setup.py` to install configman and then running nosetests on it. 
",peterbe,26739,2012-08-29T22:59:14Z,CONTRIBUTOR,False,7,3,4,the grand unified configuration system,Python,6018ab2164139057ace5b12c67a079a75cf7b0c9,no import of configman in setup.py but still available as configman.__version__
151,https://api.github.com/repos/mozilla/configman/pulls/57,57,no import of configman in setup.py but still available as __version__,"(DO NOT MERGE)

To quote of the Gods of packaging:

_""DO NOT import your package from your setup.py as suggested in another answer here: it will seem to work for you (because you already have your package's dependencies installed), but it will wreak havoc upon new users of your package, as they will not be able to install your package without manually installing the dependencies first.""_

http://stackoverflow.com/questions/2058802/how-can-i-get-the-version-defined-in-setup-py-setuptools-in-my-package

This felt like the most practical solution such that we...:
- can get the version number available in `setup.py`
- only have to maintain it in one place
- able to do things like `>>> import configman; configman.__version__` in run-time configman

If you can think of a better way of doing it, I'm all ears. 

BTW, without this fix, running `tox` is unreliable since that depends on using `setup.py` to install configman and then running nosetests on it. 
",peterbe,26739,2012-08-29T22:59:14Z,CONTRIBUTOR,False,7,3,4,the grand unified configuration system,Python,dbc2c885873719d69da9139dfdbfdd7c3ec9932e,version.txt included in MANIFEST.in too
152,https://api.github.com/repos/mozilla/configman/pulls/56,56,"add .travis.yaml, enable CI","the job already [exists](http://travis-ci.org/#!/mozilla/configman)

the file passes the travis linter:

```
(configman)[lonnen (travis-ci-setup) configman]$ travis-lint 
Hooray, /Users/lonnen/repos/configman/.travis.yml seems to be solid!
```

tested on my fork and it works: http://travis-ci.org/#!/Lonnen/configman/builds/2204602
",lonnen,21467,2012-08-22T20:50:49Z,MEMBER,True,20,0,2,the grand unified configuration system,Python,f5b516383e46ce10d8376a6acc4db02fa6dbaf5a,"add .travis.yaml

instructions for Travis CI"
153,https://api.github.com/repos/mozilla/configman/pulls/55,55,Ignore .pyc files in gitignore.,,bsmedberg,1914477,2012-08-21T17:55:22Z,CONTRIBUTOR,False,1,0,1,the grand unified configuration system,Python,c962c80be42f5c7d163169fbdb26d8502857b7d5,Ignore .pyc files in gitignore.
154,https://api.github.com/repos/mozilla/configman/pulls/54,54,Always pass types in value sources can_handle: use type(os.environ) instead of catching a TypeError and retrying,,bsmedberg,1914477,2012-08-21T17:51:25Z,CONTRIBUTOR,False,2,7,2,the grand unified configuration system,Python,dd521a452da7025829c5d0ace526ae8e89cac3a6,"The jython implementation sometimes throws KeyError instead of TypeError for this exception, but as far as I can tell there's no reason to support ""values or types"" in this array, they should always be types."
155,https://api.github.com/repos/mozilla/configman/pulls/54,54,Always pass types in value sources can_handle: use type(os.environ) instead of catching a TypeError and retrying,,bsmedberg,1914477,2012-08-21T17:51:25Z,CONTRIBUTOR,False,2,7,2,the grand unified configuration system,Python,da55a3865f386cb6a196adaf45844070065f8cb8,os.environ is not actually a dict. Make this change fully compatible by just using type(os.environ)
156,https://api.github.com/repos/mozilla/configman/pulls/53,53,add tox for testing multiple versions of python,"Not sure if this is desirable, but if you wanted to test across multiple versions of python at once you can use tox. I've included the basics to run the test suite on just python 2.6. The `envlist` param can be modified to run other versions, if they are present on your machine:

```
envlist = py24,py25,py26,py27,py30,py31,py32,jython,pypy
```

I tested `pypy`, `3.2`, and `2.*`.  only `2.6` and `2.7` currently pass.
",lonnen,21467,2012-08-15T23:40:31Z,MEMBER,True,18,9,3,the grand unified configuration system,Python,237f3df298d138e97bd0e50752d8ec162332f04b,added tox setup
157,https://api.github.com/repos/mozilla/configman/pulls/53,53,add tox for testing multiple versions of python,"Not sure if this is desirable, but if you wanted to test across multiple versions of python at once you can use tox. I've included the basics to run the test suite on just python 2.6. The `envlist` param can be modified to run other versions, if they are present on your machine:

```
envlist = py24,py25,py26,py27,py30,py31,py32,jython,pypy
```

I tested `pypy`, `3.2`, and `2.*`.  only `2.6` and `2.7` currently pass.
",lonnen,21467,2012-08-15T23:40:31Z,MEMBER,True,18,9,3,the grand unified configuration system,Python,989b7df1bc31002c2fdb5d35ad020f912326dec5,add python 2.7 to the tox environment list
158,https://api.github.com/repos/mozilla/configman/pulls/52,52,configman compatibility with jython,"Three independent changes that through gitfail I accidentally made depend on eachother.
",bsmedberg,1914477,2012-08-15T06:05:02Z,CONTRIBUTOR,False,6,10,4,the grand unified configuration system,Python,97b3c447fdbf20ab08b87d5cb57c4b8f91bc1599,"To satisfy jython, don't use relative imports. I don't know why; jython theoretically supports these imports, but it was ending up infinitely re-importing this __init__ file."
159,https://api.github.com/repos/mozilla/configman/pulls/52,52,configman compatibility with jython,"Three independent changes that through gitfail I accidentally made depend on eachother.
",bsmedberg,1914477,2012-08-15T06:05:02Z,CONTRIBUTOR,False,6,10,4,the grand unified configuration system,Python,a2252d6cbdd190deb71994a16f66507ac639d00a,Ignore .pyc files in gitignore.
160,https://api.github.com/repos/mozilla/configman/pulls/52,52,configman compatibility with jython,"Three independent changes that through gitfail I accidentally made depend on eachother.
",bsmedberg,1914477,2012-08-15T06:05:02Z,CONTRIBUTOR,False,6,10,4,the grand unified configuration system,Python,6a407c2267800b5d49dd43bb4da313ca9cde3aa1,"The jython implementation sometimes throws KeyError instead of TypeError for this exception, but as far as I can tell there's no reason to support ""values or types"" in this array, they should always be types."
161,https://api.github.com/repos/mozilla/configman/pulls/51,51,added proper quoting to strings in ini file writing,"configobj does implicit conversion of strings that meet certain criteria: including converting non-quoted strings that contain commas into lists. This regression was because configobj was applying python object conversion rules before configman was able to apply its own conversion rules.    Since the options were then handed to configman having unexpected types, configman was thwarted in converting them correctly.
",twobraids,581227,2012-06-13T16:12:03Z,CONTRIBUTOR,True,19,14,2,the grand unified configuration system,Python,1c2630a156139c4c0923cd5a9e9df890f72b9a50,added proper quoting to strings in ini file writing
162,https://api.github.com/repos/mozilla/configman/pulls/50,50,fixed pyobjects not being converted to strings in ini files,"when rewriting the ini file for configobj, I err'd in not converting py objects into strings before writing the output.  this one line changes fixes my badness...
",twobraids,581227,2012-06-12T23:28:15Z,CONTRIBUTOR,True,1,1,1,the grand unified configuration system,Python,2b4baafbab7348cff9b36a9a4831ef2d43422038,fixed pyobjects not being converted to strings in ini files
163,https://api.github.com/repos/mozilla/configman/pulls/49,49,write configobj ini file manually because the default is ugly,"configobj comes with a function to write its own ini files from a nested dictionary.  It does a poor job.  Of course, it doesn't know anything about the configman doc strings on options, so it doesn't write them.  

This change adds a configobj compatible ini file writer to the hander for configobj .
",twobraids,581227,2012-06-12T18:22:16Z,CONTRIBUTOR,False,98,17,2,the grand unified configuration system,Python,ee59b0c5e8e5550012af1f614ff1acab6e4e9793,write configobj ini file manually because the default is ugly
164,https://api.github.com/repos/mozilla/configman/pulls/48,48,issue45 - more legible --help output,"r?
",peterbe,26739,2012-06-12T15:31:27Z,CONTRIBUTOR,False,27,26,2,the grand unified configuration system,Python,a7489770883b285df8622ca4ac880b583bcc0583,issue45 - more legible --help output
165,https://api.github.com/repos/mozilla/configman/pulls/44,44,added missing dict type to converters,"the dict type was missing from configman conversion functions.  This conversion only handles basic types as values and assumes that keys are text.  It uses the json module to serialize and deserialize the dict to and from string.

This also includes a reordering of some code within config file writing handlers.  Formerly, if an unknown type was found, a key error would be raise and, unfortuately, caught by the code that would report that no handler existed for the requested config file type.  The rearrangement stops the masking of the true error.
",twobraids,581227,2012-05-16T20:47:06Z,CONTRIBUTOR,False,23,4,4,the grand unified configuration system,Python,42ea03ef926ccd9e0971a922db347f894d5c13c5,added missing dict type to converters
166,https://api.github.com/repos/mozilla/configman/pulls/43,43,added override default for Options,"frequently in creating class hierarchies, the 'required_config' for a base class cannot know what defaults the derived classes will need.  Until now, there has been no facility for derived classes to reach down into the requirements of the base class and manipulate the requirements.  This change implements a simple interface for that need:

```
        class A(RequiredConfig):
            required_config = Namespace()
            required_config.add_option(
              'x',
              default=23
            )

        class B(A):
            A.required_config.x.override_default(68)
```
",twobraids,581227,2012-05-15T18:08:41Z,CONTRIBUTOR,True,57,4,3,the grand unified configuration system,Python,0c0ff0d28e669676a3b43c6fc62bb45c1b4101b5,"set_default to allow redefining defaults in Options
changes to RequiredConfig to allow derived classes to
override options defined in parent classes."
167,https://api.github.com/repos/mozilla/configman/pulls/42,42,fix for short_form thing on aggregates,"This solves https://github.com/mozilla/configman/issues/41
",peterbe,26739,2012-05-11T21:08:01Z,CONTRIBUTOR,False,32,6,3,the grand unified configuration system,Python,88ce2e6d9f80e2cb5eeeaa4f8a3e08686014c46b,fix for short_form thing on aggregates
168,https://api.github.com/repos/mozilla/configman/pulls/42,42,fix for short_form thing on aggregates,"This solves https://github.com/mozilla/configman/issues/41
",peterbe,26739,2012-05-11T21:08:01Z,CONTRIBUTOR,False,32,6,3,the grand unified configuration system,Python,5e6732814c6d1448703cc85ad96d2e2583d581fa,not even bother checking if it's an aggregate
169,https://api.github.com/repos/mozilla/configman/pulls/40,40,class_converter whitespace independent,"r?
",peterbe,26739,2012-05-08T15:14:52Z,CONTRIBUTOR,False,10,2,2,the grand unified configuration system,Python,b7d0fd40a59ee0c9e3f28c3cae1c22096b02b029,class_converter whitespace independent
170,https://api.github.com/repos/mozilla/configman/pulls/38,38,eliminated special handling of 'application' config option,"Treating the application object specially was a source of complexity and seemed like a hack.  A bug was found that prevented nested namespaces from correctly expanding classes.  Eliminating the special handling, eliminated the bug.  Added a test to verify the problem was resolved.
",twobraids,581227,2012-05-02T06:25:21Z,CONTRIBUTOR,False,82,33,2,the grand unified configuration system,Python,4d73985bd009d98148046ff4c51bccd4b848b82d,eliminated special handling of 'application' config option
171,https://api.github.com/repos/mozilla/configman/pulls/37,37,enhanced configobj have an include directive,"I derived a new class from ConfigObj and added a C style include directive.  It works like this:

```
db.ini:

    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

app.ini:
    [source]
    +include ./db.ini

    [destination]
    +include ./db.ini

when the 'app.ini' file is loaded, ConfigObj will respond as if the file
had been written like this:
    [source]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

    [destination]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets
```
",twobraids,581227,2012-04-27T14:22:17Z,CONTRIBUTOR,True,249,1,2,the grand unified configuration system,Python,a87407b075fb3b1c1cd1b9b7d927a2fb97e21bbe,enhanced configobj have an include directive
172,https://api.github.com/repos/mozilla/configman/pulls/37,37,enhanced configobj have an include directive,"I derived a new class from ConfigObj and added a C style include directive.  It works like this:

```
db.ini:

    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

app.ini:
    [source]
    +include ./db.ini

    [destination]
    +include ./db.ini

when the 'app.ini' file is loaded, ConfigObj will respond as if the file
had been written like this:
    [source]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

    [destination]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets
```
",twobraids,581227,2012-04-27T14:22:17Z,CONTRIBUTOR,True,249,1,2,the grand unified configuration system,Python,b1d265502a05f1f8214175c406aec94fd8adc7cc,more tests of includes
173,https://api.github.com/repos/mozilla/configman/pulls/37,37,enhanced configobj have an include directive,"I derived a new class from ConfigObj and added a C style include directive.  It works like this:

```
db.ini:

    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

app.ini:
    [source]
    +include ./db.ini

    [destination]
    +include ./db.ini

when the 'app.ini' file is loaded, ConfigObj will respond as if the file
had been written like this:
    [source]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets

    [destination]
    dbhostname=myserver
    dbname=some_database
    dbuser=dwight
    dbpassword=secrets
```
",twobraids,581227,2012-04-27T14:22:17Z,CONTRIBUTOR,True,249,1,2,the grand unified configuration system,Python,87348ab7f6eeec8ebe398a6aa934b4a220732277,made +includes load relative to original ini file
174,https://api.github.com/repos/mozilla/configman/pulls/36,36,fixes bug where zero length file is created,"A zero length file is created when attempting a config file write with an unregistered suffix.  This patch stops the file from being created if a proper writer cannot be found for the extension.
",twobraids,581227,2012-04-25T05:12:14Z,CONTRIBUTOR,False,38,11,4,the grand unified configuration system,Python,a4d85bab2469c76bfd87b7aa78c2b1801c5402bd,"fixes bug where zero length file if created when
attempting a config file write with an unregistered suffix"
175,https://api.github.com/repos/mozilla/configman/pulls/35,35,Dotdict underscore exceptions,"r?

BTW:

(socorro)peterbe@host-2-71:~/dev/MOZILLA/SOCORRO/configman$ nosetests -s 
## ....................................................................................................

Ran 100 tests in 0.204s

OK

:)
",peterbe,26739,2012-04-05T21:08:38Z,CONTRIBUTOR,False,43,2,2,the grand unified configuration system,Python,03766d06fa6b10e6ba2da98007fdca02e6834507,progress
176,https://api.github.com/repos/mozilla/configman/pulls/35,35,Dotdict underscore exceptions,"r?

BTW:

(socorro)peterbe@host-2-71:~/dev/MOZILLA/SOCORRO/configman$ nosetests -s 
## ....................................................................................................

Ran 100 tests in 0.204s

OK

:)
",peterbe,26739,2012-04-05T21:08:38Z,CONTRIBUTOR,False,43,2,2,the grand unified configuration system,Python,2ac0ea0d7383001a1226a5b3b414cef5ecd2bc99,progress2
177,https://api.github.com/repos/mozilla/configman/pulls/35,35,Dotdict underscore exceptions,"r?

BTW:

(socorro)peterbe@host-2-71:~/dev/MOZILLA/SOCORRO/configman$ nosetests -s 
## ....................................................................................................

Ran 100 tests in 0.204s

OK

:)
",peterbe,26739,2012-04-05T21:08:38Z,CONTRIBUTOR,False,43,2,2,the grand unified configuration system,Python,fb055ddf58faad997f401feceec10f8b3376fa52,tests pass now
178,https://api.github.com/repos/mozilla/configman/pulls/35,35,Dotdict underscore exceptions,"r?

BTW:

(socorro)peterbe@host-2-71:~/dev/MOZILLA/SOCORRO/configman$ nosetests -s 
## ....................................................................................................

Ran 100 tests in 0.204s

OK

:)
",peterbe,26739,2012-04-05T21:08:38Z,CONTRIBUTOR,False,43,2,2,the grand unified configuration system,Python,f9266f546c6254b80f1cedf2e5d2596c436e1de8,changed to lower __something
179,https://api.github.com/repos/mozilla/configman/pulls/34,34,enhanced class list corverter for different formats and extra data ,"the class_list_converter had a hard coded comma delimited string format for the class list.  This enhancement replaces the hard coding with a function that allows arbitrary alternative formats.  There is also the ability to add extra data to go with each class.   

sample input:

```
""""""configman.tests.test_converters.Alpha|1|02:00:00
configman.tests.test_converters.Beta|2
configman.tests.test_converters.Gamma|3|03:00:00""""""
```

sample config output:

```
config
config.cls0
config.cls0.cls == configman.tests.test_converters.Alpha 
config.cls0.cls_instance == configman.tests.test_converters.Alpha()
config.cls0.cls.frequency == 1
config.cls0.cls.time == datetime.time(02:00:00)
config.cls1
config.cls1.cls == configman.tests.test_converters.Beta 
config.cls1.cls_instance == configman.tests.test_converters.Beta()
config.cls1.cls.frequency == 2
config.cls2
config.cls2.cls == configman.tests.test_converters.Gamma 
config.cls2.cls_instance == configman.tests.test_converters.Gamma()
config.cls2.cls.frequency == 3
config.cls2.cls.time == datetime.time(03:00:00)
```

See the demo in the test_converters.py in the `test_classes_in_namespaces_converter_5` test.
",twobraids,581227,2012-04-03T03:02:51Z,CONTRIBUTOR,False,153,2,2,the grand unified configuration system,Python,ef7de5184c5670771e11c2435a8e8ba2438557fc,enhanced class list corverter for different formats and extra data with each class
180,https://api.github.com/repos/mozilla/configman/pulls/34,34,enhanced class list corverter for different formats and extra data ,"the class_list_converter had a hard coded comma delimited string format for the class list.  This enhancement replaces the hard coding with a function that allows arbitrary alternative formats.  There is also the ability to add extra data to go with each class.   

sample input:

```
""""""configman.tests.test_converters.Alpha|1|02:00:00
configman.tests.test_converters.Beta|2
configman.tests.test_converters.Gamma|3|03:00:00""""""
```

sample config output:

```
config
config.cls0
config.cls0.cls == configman.tests.test_converters.Alpha 
config.cls0.cls_instance == configman.tests.test_converters.Alpha()
config.cls0.cls.frequency == 1
config.cls0.cls.time == datetime.time(02:00:00)
config.cls1
config.cls1.cls == configman.tests.test_converters.Beta 
config.cls1.cls_instance == configman.tests.test_converters.Beta()
config.cls1.cls.frequency == 2
config.cls2
config.cls2.cls == configman.tests.test_converters.Gamma 
config.cls2.cls_instance == configman.tests.test_converters.Gamma()
config.cls2.cls.frequency == 3
config.cls2.cls.time == datetime.time(03:00:00)
```

See the demo in the test_converters.py in the `test_classes_in_namespaces_converter_5` test.
",twobraids,581227,2012-04-03T03:02:51Z,CONTRIBUTOR,False,153,2,2,the grand unified configuration system,Python,1c97c33635a6183f4d6f32edf3bb78158b92031c,removed time_converter; added aggregates for list of classes
181,https://api.github.com/repos/mozilla/configman/pulls/34,34,enhanced class list corverter for different formats and extra data ,"the class_list_converter had a hard coded comma delimited string format for the class list.  This enhancement replaces the hard coding with a function that allows arbitrary alternative formats.  There is also the ability to add extra data to go with each class.   

sample input:

```
""""""configman.tests.test_converters.Alpha|1|02:00:00
configman.tests.test_converters.Beta|2
configman.tests.test_converters.Gamma|3|03:00:00""""""
```

sample config output:

```
config
config.cls0
config.cls0.cls == configman.tests.test_converters.Alpha 
config.cls0.cls_instance == configman.tests.test_converters.Alpha()
config.cls0.cls.frequency == 1
config.cls0.cls.time == datetime.time(02:00:00)
config.cls1
config.cls1.cls == configman.tests.test_converters.Beta 
config.cls1.cls_instance == configman.tests.test_converters.Beta()
config.cls1.cls.frequency == 2
config.cls2
config.cls2.cls == configman.tests.test_converters.Gamma 
config.cls2.cls_instance == configman.tests.test_converters.Gamma()
config.cls2.cls.frequency == 3
config.cls2.cls.time == datetime.time(03:00:00)
```

See the demo in the test_converters.py in the `test_classes_in_namespaces_converter_5` test.
",twobraids,581227,2012-04-03T03:02:51Z,CONTRIBUTOR,False,153,2,2,the grand unified configuration system,Python,6c6386e98e2797b37a3c69299b037cae4e849007,corrected splitting lines in a string
182,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,9f41973b7ad491e716242c27ff93794af55b8230,added a search algorithm to the DotDict class
183,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,88c49bdad97dd9c5c7ad72d20af86665704cdf53,clean up
184,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,ef3687b2654e2f346ca6ec7ab79f5e40f1cde275,re-enbled the deep copy test
185,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,0f5284d54057e8f032d9daec7855e0c3bb742e81,yet more cleanup
186,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,1c01b6a523deaab5d82eb37b45ac6501818eae62,added DotDict and DotDictWithAcquisition so that Namespace can had dot syntax without acquisition
187,https://api.github.com/repos/mozilla/configman/pulls/33,33,parentage2: added a search algorithm to the DotDict class,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to make the config DotDict object more intelligent.  Rather than just return a KeyError when a key is missing from a nested DotDict, a search happens automatically up through each parent until the missing key is found.  If the key is not found, even in the root DotDict, only then is the KeyError raised.
",twobraids,581227,2012-03-28T01:30:10Z,CONTRIBUTOR,False,272,45,6,the grand unified configuration system,Python,c64c28870be04af23e1c3ec65f83a5321d5eee8b,"added tests for __setitem__, __getitem__; fixed __getitem__ bug"
188,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,4989477c0c8d3b96216b0f85f45fa64ba6428044,added support for configobj
189,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,fe00c3fd8a5c9f67d200a1a44795bce1503c55e7,minor changes
190,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,1ce740859f163fc654d06c51960b441fa96b9105,minor adjustment
191,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,1c27a26a499233e6544b36daf2c89d9926810546,mid dev - configparser OR configobj
192,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,cbfa5d22e50969625ec27950d05edc475961abac,"use configobj if present, otherwise use configparse"
193,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,10468362edee007fb2c8a5990b55a5886975e24b,removed debug
194,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,2b9cbd6c70bbca40528af6603e7569f17e5a0226,clean up
195,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,595fc969ea90d11f558b881796b54974e15f0aa3,yet more cleanup
196,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,3d8c465f32b4db16fc343230a97c516e374499d7,reapplied PEP8 and Pyflakes standards
197,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,4d34d96da00c2ea248030ef708145ffa03f906e9,added new unit test to for_conf to verify nested namespace compliance
198,https://api.github.com/repos/mozilla/configman/pulls/32,32,added support for configobj,"this was tricky.  configobj and ConfigParser both lay claim to the '.ini' file extension, but they use different syntax and somewhat incompatible format within the files.

if configobj is not installed, configman will use ConfigParser to handle ini files.  if configobj is installed, ini files will be handled by configobj instead.  However, it doesn't mean that ConifgParser is knocked out of the game.  When configobj is present, ConfigParser gets switched to handling the 'inix' file extension ('inix' was a random choice, if 'inix' has a meaning, we ought to switch to something else).

In the presence of configobj, the '--help' option for 'admin.print_conf' includes the 'inix' option.  This gives the user a choice of which module they want to write out a ini file with.  
",twobraids,581227,2012-03-26T19:20:58Z,CONTRIBUTOR,False,522,96,9,the grand unified configuration system,Python,ad634b9f4f7f081396a309dca8f95e1d80529854,"can you say, ""more cleaning""?"
199,https://api.github.com/repos/mozilla/configman/pulls/31,31,added class instantiator converter function for convenience,"when you've got a class as configman option, you inevitably are going to want to instantiate it.  The regular converter function, `class_converter`, only goes halfway.  I've added a new function, `class_instantiator` that follows through with loading and instantiation.

```
required_config.add_option('my_class',
                                          default='some.class',
                                          from_string_converter=class_instantiator('my_class_instance'))
```

This will result in a config dict with the following values:

config.my_class == some.class
config.my_class_instance == some.class(config)
",twobraids,581227,2012-03-24T19:48:42Z,CONTRIBUTOR,False,73,7,2,the grand unified configuration system,Python,da319625870a0d4f5ec3323cb8199a394b376c8e,added class instantiator converter function for convenience
200,https://api.github.com/repos/mozilla/configman/pulls/29,29,Parentage,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to back thread the config hierarchy with weakref references to parents.  This change adds two private parameters to each level of the hierarchy: '_parent' is a reference to the parent dict; '_root' is a reference to the base dict of the hierarchy.

From the original hierarchy above, the 'kls' can access all it needs like this:

```
def __init__(self, config):
    self.param1 = config.param1
    self.param2 = config.param2
    config._root.logger.info(""done with instantiation"")
```
",twobraids,581227,2012-03-23T23:32:26Z,CONTRIBUTOR,False,109,11,2,the grand unified configuration system,Python,f8d0511a7895bfe58c2e6a4a9423fb9dfb155d0f,added parentage to the resultant config DotDict object
201,https://api.github.com/repos/mozilla/configman/pulls/29,29,Parentage,"One of the interesting problems that I've encountered in working with configman is that classes instantiated from options need to have configuration information about themselves as well as global configuration.  For example, let's say we have this hierarchy

config
config.logger
config.source
config.source.class1
config.source.class1.kls
config.source.class1.param1
config.source.class1.param2

where 'config', 'source' and 'class1' are all namespaces.  'logger' is an object to do logging. 'kls' is a python class.  'param1' and 'param2' are requirements of the class in 'kls'.

if we try to instantiate 'kls', we're tempted to do so  like this:

```
config.source.class1.kls(config)
```

but that would be wrong.  'kls' will end up looking for its requirements 'param1' and 'param2' directly in 'config' rather than way down the hierarchy in 'config.source.class1'.  'kls' doesn't know where it is in the hierarchy.  The correct way to instantiate 'kls' is like this:

```
config.source.class1.kls(config.source.class1)
```

that aims 'kls' at the right level of the hierarchy to find its parameters.  Unfortunately, that cuts off 'kls' from the opportunity to use parameters (like 'logger') found all the way down in 'config'. 

The solution proposed here is to back thread the config hierarchy with weakref references to parents.  This change adds two private parameters to each level of the hierarchy: '_parent' is a reference to the parent dict; '_root' is a reference to the base dict of the hierarchy.

From the original hierarchy above, the 'kls' can access all it needs like this:

```
def __init__(self, config):
    self.param1 = config.param1
    self.param2 = config.param2
    config._root.logger.info(""done with instantiation"")
```
",twobraids,581227,2012-03-23T23:32:26Z,CONTRIBUTOR,False,109,11,2,the grand unified configuration system,Python,c55c0a7c2d8e5cfa5bc9b2a2a78373b6267e1311,Merge branch 'master' of github.com:mozilla/configman into parentage
202,https://api.github.com/repos/mozilla/configman/pulls/28,28,fixed aggregation bug and enhanced class_list converter,"The class_list_converter added a couple weeks back needed some enhancements.  If the user changed the list at run time, there was no way to know how long the list was without trying to iterate over the the child namespaces that were inserted into the parent namespace.  Further, if the namespace naming template were unknown, it would be difficult to even know what child namespaces had the child classes in them.

I resolved this by adding some class level variables to the class_list class.  It can be interrogated for the list of namespaces that it used for the child classes.  

It is likely that the programmer using the class_list converter is going to want to instantiate the classes in each namespace.  Doing so is awkward because in each instantiation, the local namespace would have to passed into the class constructor.  As a convenience, the converter has a new parameter called 'instantiate_class', a boolean.  If True, configman will instantiate the each class with the proper namespace for the programmer.

In implementing this, I discovered a bug in the code that expands aggregations.  A boolean short-circuit expression was allowing only the first aggregation in a parent namespace to be aggregated.  The solution was to just reverse the order of the items in the boolean expression, thwarting the short circuit mechanism.  

These changes include tests.
",twobraids,581227,2012-03-21T20:06:00Z,CONTRIBUTOR,False,175,34,3,the grand unified configuration system,Python,7784309b4740db7327c6298ece62c057ee5c2d81,fixed aggregation bug and enhanced class_list converter
203,https://api.github.com/repos/mozilla/configman/pulls/28,28,fixed aggregation bug and enhanced class_list converter,"The class_list_converter added a couple weeks back needed some enhancements.  If the user changed the list at run time, there was no way to know how long the list was without trying to iterate over the the child namespaces that were inserted into the parent namespace.  Further, if the namespace naming template were unknown, it would be difficult to even know what child namespaces had the child classes in them.

I resolved this by adding some class level variables to the class_list class.  It can be interrogated for the list of namespaces that it used for the child classes.  

It is likely that the programmer using the class_list converter is going to want to instantiate the classes in each namespace.  Doing so is awkward because in each instantiation, the local namespace would have to passed into the class constructor.  As a convenience, the converter has a new parameter called 'instantiate_class', a boolean.  If True, configman will instantiate the each class with the proper namespace for the programmer.

In implementing this, I discovered a bug in the code that expands aggregations.  A boolean short-circuit expression was allowing only the first aggregation in a parent namespace to be aggregated.  The solution was to just reverse the order of the items in the boolean expression, thwarting the short circuit mechanism.  

These changes include tests.
",twobraids,581227,2012-03-21T20:06:00Z,CONTRIBUTOR,False,175,34,3,the grand unified configuration system,Python,e79de5dabc6dec6b0bed93a4fb71bc2b0fda8941,changes based on code review
204,https://api.github.com/repos/mozilla/configman/pulls/28,28,fixed aggregation bug and enhanced class_list converter,"The class_list_converter added a couple weeks back needed some enhancements.  If the user changed the list at run time, there was no way to know how long the list was without trying to iterate over the the child namespaces that were inserted into the parent namespace.  Further, if the namespace naming template were unknown, it would be difficult to even know what child namespaces had the child classes in them.

I resolved this by adding some class level variables to the class_list class.  It can be interrogated for the list of namespaces that it used for the child classes.  

It is likely that the programmer using the class_list converter is going to want to instantiate the classes in each namespace.  Doing so is awkward because in each instantiation, the local namespace would have to passed into the class constructor.  As a convenience, the converter has a new parameter called 'instantiate_class', a boolean.  If True, configman will instantiate the each class with the proper namespace for the programmer.

In implementing this, I discovered a bug in the code that expands aggregations.  A boolean short-circuit expression was allowing only the first aggregation in a parent namespace to be aggregated.  The solution was to just reverse the order of the items in the boolean expression, thwarting the short circuit mechanism.  

These changes include tests.
",twobraids,581227,2012-03-21T20:06:00Z,CONTRIBUTOR,False,175,34,3,the grand unified configuration system,Python,210bc7ce3f944ab7cc23aaa438e1f06472cd1ee4,fixed message about acceptable types in Exception string
205,https://api.github.com/repos/mozilla/configman/pulls/27,27,incorrect type returned by RequiredConfig.get_required_config(),"changed get_required_config to return a Namespace rather than a raw dict type.
",twobraids,581227,2012-03-15T20:29:34Z,CONTRIBUTOR,False,4,1,1,the grand unified configuration system,Python,6ae1a9bb992ed96cca9e854f5e676e946b35e2f9,changed get_required_config to return a Namespace rather than a raw dict type
206,https://api.github.com/repos/mozilla/configman/pulls/27,27,incorrect type returned by RequiredConfig.get_required_config(),"changed get_required_config to return a Namespace rather than a raw dict type.
",twobraids,581227,2012-03-15T20:29:34Z,CONTRIBUTOR,False,4,1,1,the grand unified configuration system,Python,a37cff65f265c481dd52c7d0592ac06132fe39c8,PEP8 compliance
207,https://api.github.com/repos/mozilla/configman/pulls/26,26,added class lists with namespaces,"added class lists with namespaces as a form_string_converter.  Each class in the list gets put into its own namespace.  

RequiredConfig class has been moved to its own file to avoid recursive imports
",twobraids,581227,2012-03-14T02:02:36Z,CONTRIBUTOR,False,114,20,4,the grand unified configuration system,Python,8ddbda3a01cd04c6d4772ecb413f918bf4dd873d,added class lists with namespaces.  moved required config to it own file to avoid recursive imports
208,https://api.github.com/repos/mozilla/configman/pulls/26,26,added class lists with namespaces,"added class lists with namespaces as a form_string_converter.  Each class in the list gets put into its own namespace.  

RequiredConfig class has been moved to its own file to avoid recursive imports
",twobraids,581227,2012-03-14T02:02:36Z,CONTRIBUTOR,False,114,20,4,the grand unified configuration system,Python,37f15797eca28244d6059c33c37020ba60069a9c,added unittest
209,https://api.github.com/repos/mozilla/configman/pulls/26,26,added class lists with namespaces,"added class lists with namespaces as a form_string_converter.  Each class in the list gets put into its own namespace.  

RequiredConfig class has been moved to its own file to avoid recursive imports
",twobraids,581227,2012-03-14T02:02:36Z,CONTRIBUTOR,False,114,20,4,the grand unified configuration system,Python,2f548c57f77a9fa187bf6a9e505d014301f4ed2d,now allows for spaces after the comma
210,https://api.github.com/repos/mozilla/configman/pulls/26,26,added class lists with namespaces,"added class lists with namespaces as a form_string_converter.  Each class in the list gets put into its own namespace.  

RequiredConfig class has been moved to its own file to avoid recursive imports
",twobraids,581227,2012-03-14T02:02:36Z,CONTRIBUTOR,False,114,20,4,the grand unified configuration system,Python,4ef2ae7583b121104927679512fd698b76382e22,added type checking to class_list_converter
211,https://api.github.com/repos/mozilla/configman/pulls/26,26,added class lists with namespaces,"added class lists with namespaces as a form_string_converter.  Each class in the list gets put into its own namespace.  

RequiredConfig class has been moved to its own file to avoid recursive imports
",twobraids,581227,2012-03-14T02:02:36Z,CONTRIBUTOR,False,114,20,4,the grand unified configuration system,Python,135685c96d23d21123f4feeedcfcb18bf6570db6,fixed unit tests
212,https://api.github.com/repos/mozilla/configman/pulls/25,25,adding option to pass exclude_from_print_conf and exclude_from_dump_conf...,"... to add_option()

@twobraids r?
",peterbe,26739,2012-03-13T23:21:26Z,CONTRIBUTOR,False,119,50,6,the grand unified configuration system,Python,541a36faa6f730f9d814ef89e21b95bf508c1045,adding option to pass exclude_from_print_conf and exclude_from_dump_conf to add_option()
213,https://api.github.com/repos/mozilla/configman/pulls/24,24,added deepcopy,"added deepcopy to avoid problem where duplicate class requirements appear multiple times in a namespace
",twobraids,581227,2012-03-13T23:17:23Z,CONTRIBUTOR,False,38,1,4,the grand unified configuration system,Python,f5177d4f7f53202591fc44ecd29d1953b147cd0f,added deepcopy to avoid problem where duplicate class requirements appear multiple times in a namespace
214,https://api.github.com/repos/mozilla/configman/pulls/24,24,added deepcopy,"added deepcopy to avoid problem where duplicate class requirements appear multiple times in a namespace
",twobraids,581227,2012-03-13T23:17:23Z,CONTRIBUTOR,False,38,1,4,the grand unified configuration system,Python,f910a78732b35346ec3ba51969dbd9e1d41217d2,minor adjustments for style and realized that we don't need deepcopy on Opiton and Aggregation
215,https://api.github.com/repos/mozilla/configman/pulls/23,23,values_source_list doesn't change to default values unless it's passed i...,"...n as None. 

If you use `ConfigurationManager(values_source_list=[])` it will not set up the defaults.

Relevant to prevent it from picking up weird commandline or environement variables in, for example, unit test runs. 
",peterbe,26739,2012-01-27T00:18:54Z,CONTRIBUTOR,False,2,3,1,the grand unified configuration system,Python,9eb7038771bed1cb81cc08ba85c4abd0bf7da14d,values_source_list doesn't change to default values unless it's passed in as None
216,https://api.github.com/repos/mozilla/configman/pulls/22,22,make sure exceptions aren't raised unnecessarily in the finally clause,"With this in place it'll be easier to trap exceptions that happen inside an aggregate option.
",peterbe,26739,2012-01-19T00:45:01Z,CONTRIBUTOR,False,43,3,2,the grand unified configuration system,Python,32f4f63b43f5cc20025be401fe3db3fd98b0f6df,make sure exceptions aren't raised unnecessarily in the finally clause
217,https://api.github.com/repos/mozilla/configman/pulls/22,22,make sure exceptions aren't raised unnecessarily in the finally clause,"With this in place it'll be easier to trap exceptions that happen inside an aggregate option.
",peterbe,26739,2012-01-19T00:45:01Z,CONTRIBUTOR,False,43,3,2,the grand unified configuration system,Python,dab8273a63ce2bf8c885bb3e36a223511a11ad7d,removed the excess except + raise
218,https://api.github.com/repos/mozilla/configman/pulls/20,20,Fixes issue #19 - Added a list_to_string converter for lists and tuples.,"Also fixed a bug, modules where not recognized by to_string_converters. 
",adngdb,328790,2012-01-10T21:57:46Z,CONTRIBUTOR,True,28,0,2,the grand unified configuration system,Python,0752ec33c69433d5b5d7029c00c6d64dc1850316,"Fixes issue #19 - Added a list_to_string converter, added related unit tests."
219,https://api.github.com/repos/mozilla/configman/pulls/18,18,added support for yaml value sources,"just as it says, added support for yaml files as a value source.   this automatically enables apps to do this:

   .../demo3.py --admin.dump_conf=demo3.yaml

and 

   .../demo3.py --admin.conf=demo3.yaml
",twobraids,581227,2012-01-05T18:31:10Z,CONTRIBUTOR,False,218,1,3,the grand unified configuration system,Python,d00302d43f252ea530059cf6a822ac22cbeb4aeb,added support for yaml value sources
220,https://api.github.com/repos/mozilla/configman/pulls/16,16,improved imports with demos converted to use them,"as was suggested in the integration of configman into Socorro.
",twobraids,581227,2011-12-28T17:16:21Z,CONTRIBUTOR,False,99,94,10,the grand unified configuration system,Python,3b517f8c78f950a79009bdc7349c1d7eb989b3d4,improved imports with demos converted to use them
221,https://api.github.com/repos/mozilla/configman/pulls/16,16,improved imports with demos converted to use them,"as was suggested in the integration of configman into Socorro.
",twobraids,581227,2011-12-28T17:16:21Z,CONTRIBUTOR,False,99,94,10,the grand unified configuration system,Python,3a0da386a1160c19b541baae7b1507701a509775,added date & datetime converters
222,https://api.github.com/repos/mozilla/configman/pulls/16,16,improved imports with demos converted to use them,"as was suggested in the integration of configman into Socorro.
",twobraids,581227,2011-12-28T17:16:21Z,CONTRIBUTOR,False,99,94,10,the grand unified configuration system,Python,49fe9405a340265855ab75958f1fdec36cfa73e1,some pyflakiness corrected
223,https://api.github.com/repos/mozilla/configman/pulls/16,16,improved imports with demos converted to use them,"as was suggested in the integration of configman into Socorro.
",twobraids,581227,2011-12-28T17:16:21Z,CONTRIBUTOR,False,99,94,10,the grand unified configuration system,Python,15194626eae2a337c2a43b6a39e42207ca8bb83e,corrected imports in advanced_demo2
224,https://api.github.com/repos/mozilla/configman/pulls/16,16,improved imports with demos converted to use them,"as was suggested in the integration of configman into Socorro.
",twobraids,581227,2011-12-28T17:16:21Z,CONTRIBUTOR,False,99,94,10,the grand unified configuration system,Python,7707d2eb79dfb2183aac57acb9aef2027bdca482,further enhancements
225,https://api.github.com/repos/mozilla/configman/pulls/14,14,updated tutorial from '.config' to '.get_config()',,peterbe,26739,2011-12-21T15:52:59Z,CONTRIBUTOR,True,3,3,1,the grand unified configuration system,Python,4474113c4527dd3965c2a9033af04cbe6ba34591,updated tutorial from '.config' to '.get_config()'
226,https://api.github.com/repos/mozilla/configman/pulls/13,13,proposal for database interaction,"This is a demonstration of a way of interacting with a database (or any external data store) using configman.

this is an advanced demo uses configman to allow an app to not only change
the database implementation at run time, but to change the overall behavior
of the database.  Three families of classes are used in this demo:
1) FakeDatabaseConnection - there is only one member of this family.  It is
       used to simulate a database.  Understanding this class is unimportant
       in understanding the rest of the app.  It is just a mock.
2) Postgres; PostgresPooled - This two member class hierarchy shows how to
       wrap a database module with configman to implement a transaction
       context.
       \* The base class 'Postgres' implements a system where each database
         connection is opened, used once, and then closed.  Normally, this
         would be a pretty inefficient way to implement a database intensive
         application.  However, if an external connection manager is in use,
         this is a fine model for connection management.
       \* The second class in the hierarchy implements a different connection
         management strategy.  Here connections are pooled for reuse by name.
         Defaulting to the model of one connection per thread, it uses the
         name of the current executing thread as the name of the connection.
         However the facility exists to name connections with any string.
         This class implements a more efficient way to run a database
         intensive app because connections get recycled.
3) TransactionExecutor, TransactionExecutorWithBackoff - this two member
       family implements two behaviors of transactions.
       \* The base class 'TransactionExecutor' is the simple case where a
         a transaction is submitted and it either succeeds or fails.
       \* The derived class 'TransactionExecutorWithBackoff' will try to
         execute a transaction.  If it succeeds, it does nothing more.  If it
         fails with a database operational error (connection lost, socket
         timeout), the transaction is retried over and over util it
         suceeds.  Between each subsequent retry, execution sleeps for a set
         or progressive number of seconds.  Exceptions deemed non-operational
         are passed out to the application and do not trigger retries.

The latter two class families are settable using configman at run time.  The
demo app logs its actions, so we suggest trying different combinations of the
Postgres and TransactionExecutor families to observe how they differ in
behavior.
",twobraids,581227,2011-12-20T16:19:24Z,CONTRIBUTOR,False,458,1,2,the grand unified configuration system,Python,7870dfd425f5a227c03ad408dfe9193a5dad544a,added advanced demo for backing off retry
227,https://api.github.com/repos/mozilla/configman/pulls/13,13,proposal for database interaction,"This is a demonstration of a way of interacting with a database (or any external data store) using configman.

this is an advanced demo uses configman to allow an app to not only change
the database implementation at run time, but to change the overall behavior
of the database.  Three families of classes are used in this demo:
1) FakeDatabaseConnection - there is only one member of this family.  It is
       used to simulate a database.  Understanding this class is unimportant
       in understanding the rest of the app.  It is just a mock.
2) Postgres; PostgresPooled - This two member class hierarchy shows how to
       wrap a database module with configman to implement a transaction
       context.
       \* The base class 'Postgres' implements a system where each database
         connection is opened, used once, and then closed.  Normally, this
         would be a pretty inefficient way to implement a database intensive
         application.  However, if an external connection manager is in use,
         this is a fine model for connection management.
       \* The second class in the hierarchy implements a different connection
         management strategy.  Here connections are pooled for reuse by name.
         Defaulting to the model of one connection per thread, it uses the
         name of the current executing thread as the name of the connection.
         However the facility exists to name connections with any string.
         This class implements a more efficient way to run a database
         intensive app because connections get recycled.
3) TransactionExecutor, TransactionExecutorWithBackoff - this two member
       family implements two behaviors of transactions.
       \* The base class 'TransactionExecutor' is the simple case where a
         a transaction is submitted and it either succeeds or fails.
       \* The derived class 'TransactionExecutorWithBackoff' will try to
         execute a transaction.  If it succeeds, it does nothing more.  If it
         fails with a database operational error (connection lost, socket
         timeout), the transaction is retried over and over util it
         suceeds.  Between each subsequent retry, execution sleeps for a set
         or progressive number of seconds.  Exceptions deemed non-operational
         are passed out to the application and do not trigger retries.

The latter two class families are settable using configman at run time.  The
demo app logs its actions, so we suggest trying different combinations of the
Postgres and TransactionExecutor families to observe how they differ in
behavior.
",twobraids,581227,2011-12-20T16:19:24Z,CONTRIBUTOR,False,458,1,2,the grand unified configuration system,Python,b21fec9e166db4ca040af3d07c8f6b3b747e9beb,mainly added comments
228,https://api.github.com/repos/mozilla/configman/pulls/13,13,proposal for database interaction,"This is a demonstration of a way of interacting with a database (or any external data store) using configman.

this is an advanced demo uses configman to allow an app to not only change
the database implementation at run time, but to change the overall behavior
of the database.  Three families of classes are used in this demo:
1) FakeDatabaseConnection - there is only one member of this family.  It is
       used to simulate a database.  Understanding this class is unimportant
       in understanding the rest of the app.  It is just a mock.
2) Postgres; PostgresPooled - This two member class hierarchy shows how to
       wrap a database module with configman to implement a transaction
       context.
       \* The base class 'Postgres' implements a system where each database
         connection is opened, used once, and then closed.  Normally, this
         would be a pretty inefficient way to implement a database intensive
         application.  However, if an external connection manager is in use,
         this is a fine model for connection management.
       \* The second class in the hierarchy implements a different connection
         management strategy.  Here connections are pooled for reuse by name.
         Defaulting to the model of one connection per thread, it uses the
         name of the current executing thread as the name of the connection.
         However the facility exists to name connections with any string.
         This class implements a more efficient way to run a database
         intensive app because connections get recycled.
3) TransactionExecutor, TransactionExecutorWithBackoff - this two member
       family implements two behaviors of transactions.
       \* The base class 'TransactionExecutor' is the simple case where a
         a transaction is submitted and it either succeeds or fails.
       \* The derived class 'TransactionExecutorWithBackoff' will try to
         execute a transaction.  If it succeeds, it does nothing more.  If it
         fails with a database operational error (connection lost, socket
         timeout), the transaction is retried over and over util it
         suceeds.  Between each subsequent retry, execution sleeps for a set
         or progressive number of seconds.  Exceptions deemed non-operational
         are passed out to the application and do not trigger retries.

The latter two class families are settable using configman at run time.  The
demo app logs its actions, so we suggest trying different combinations of the
Postgres and TransactionExecutor families to observe how they differ in
behavior.
",twobraids,581227,2011-12-20T16:19:24Z,CONTRIBUTOR,False,458,1,2,the grand unified configuration system,Python,3baea47514acc89f1c8d66be9b5a2e84ec958437,corrected spelling
229,https://api.github.com/repos/mozilla/configman/pulls/13,13,proposal for database interaction,"This is a demonstration of a way of interacting with a database (or any external data store) using configman.

this is an advanced demo uses configman to allow an app to not only change
the database implementation at run time, but to change the overall behavior
of the database.  Three families of classes are used in this demo:
1) FakeDatabaseConnection - there is only one member of this family.  It is
       used to simulate a database.  Understanding this class is unimportant
       in understanding the rest of the app.  It is just a mock.
2) Postgres; PostgresPooled - This two member class hierarchy shows how to
       wrap a database module with configman to implement a transaction
       context.
       \* The base class 'Postgres' implements a system where each database
         connection is opened, used once, and then closed.  Normally, this
         would be a pretty inefficient way to implement a database intensive
         application.  However, if an external connection manager is in use,
         this is a fine model for connection management.
       \* The second class in the hierarchy implements a different connection
         management strategy.  Here connections are pooled for reuse by name.
         Defaulting to the model of one connection per thread, it uses the
         name of the current executing thread as the name of the connection.
         However the facility exists to name connections with any string.
         This class implements a more efficient way to run a database
         intensive app because connections get recycled.
3) TransactionExecutor, TransactionExecutorWithBackoff - this two member
       family implements two behaviors of transactions.
       \* The base class 'TransactionExecutor' is the simple case where a
         a transaction is submitted and it either succeeds or fails.
       \* The derived class 'TransactionExecutorWithBackoff' will try to
         execute a transaction.  If it succeeds, it does nothing more.  If it
         fails with a database operational error (connection lost, socket
         timeout), the transaction is retried over and over util it
         suceeds.  Between each subsequent retry, execution sleeps for a set
         or progressive number of seconds.  Exceptions deemed non-operational
         are passed out to the application and do not trigger retries.

The latter two class families are settable using configman at run time.  The
demo app logs its actions, so we suggest trying different combinations of the
Postgres and TransactionExecutor families to observe how they differ in
behavior.
",twobraids,581227,2011-12-20T16:19:24Z,CONTRIBUTOR,False,458,1,2,the grand unified configuration system,Python,b817f9877add7b740e14b7e896e723f7d7992a77,removed useless __init__
230,https://api.github.com/repos/mozilla/configman/pulls/13,13,proposal for database interaction,"This is a demonstration of a way of interacting with a database (or any external data store) using configman.

this is an advanced demo uses configman to allow an app to not only change
the database implementation at run time, but to change the overall behavior
of the database.  Three families of classes are used in this demo:
1) FakeDatabaseConnection - there is only one member of this family.  It is
       used to simulate a database.  Understanding this class is unimportant
       in understanding the rest of the app.  It is just a mock.
2) Postgres; PostgresPooled - This two member class hierarchy shows how to
       wrap a database module with configman to implement a transaction
       context.
       \* The base class 'Postgres' implements a system where each database
         connection is opened, used once, and then closed.  Normally, this
         would be a pretty inefficient way to implement a database intensive
         application.  However, if an external connection manager is in use,
         this is a fine model for connection management.
       \* The second class in the hierarchy implements a different connection
         management strategy.  Here connections are pooled for reuse by name.
         Defaulting to the model of one connection per thread, it uses the
         name of the current executing thread as the name of the connection.
         However the facility exists to name connections with any string.
         This class implements a more efficient way to run a database
         intensive app because connections get recycled.
3) TransactionExecutor, TransactionExecutorWithBackoff - this two member
       family implements two behaviors of transactions.
       \* The base class 'TransactionExecutor' is the simple case where a
         a transaction is submitted and it either succeeds or fails.
       \* The derived class 'TransactionExecutorWithBackoff' will try to
         execute a transaction.  If it succeeds, it does nothing more.  If it
         fails with a database operational error (connection lost, socket
         timeout), the transaction is retried over and over util it
         suceeds.  Between each subsequent retry, execution sleeps for a set
         or progressive number of seconds.  Exceptions deemed non-operational
         are passed out to the application and do not trigger retries.

The latter two class families are settable using configman at run time.  The
demo app logs its actions, so we suggest trying different combinations of the
Postgres and TransactionExecutor families to observe how they differ in
behavior.
",twobraids,581227,2011-12-20T16:19:24Z,CONTRIBUTOR,False,458,1,2,the grand unified configuration system,Python,665f1f5f2568606c49e407119b56a696d58a3190,additional comments
231,https://api.github.com/repos/mozilla/configman/pulls/11,11,added config as context for auto factory closing,"My original intent was for these configuration objects to hold more than just static constants.  As I've mentioned before, I've envisioned factories as part of configuration.  For example, rather than just having a collection of constants representing the parameters needed to connect to a database, just offer an object that will hand out database connections on demand.  

Aggregations are the basis for constructing factories.  The 'trans_generator' (now renamed 'advanced-demo1') was the first of these.  While that was an interesting exercise, it was really pretty simple minded.  In playing around and implementing a more robust factory I realize that configman was missing a key component to handling factories.  We've got the initialization part with Aggregations, but we need tear down, too.  

I've implemented this experiment using 'contextlib'.  If we think of a configuration as a context that has a scope of a 'with' statement, we've got the mechanism for an orderly tear down of factory objects.  When the code block of a 'with' statement ends, we've got the opportunity to implement tear down.

Look at the 'context' function within the ConfigurationManager class.  When the context goes out of scope, the '_walk_and_close' function walks the config object trying the 'close' method on every item.  Config options that don't have a 'close' method ignore it.  However, for those that do understand, it's the opportunity to perform cleanup work.  The example 'advanced-demo2.py' demonstrates a database connection pool that is guaranteed to close all its cached connection at the appropriate time.  

There are two database classes in the example.  The first (default) implements a database connection factory with no pooling.  Connections are created, used and destroyed.  This is directly applicable to how we use database connections in Socorro when backed with PGBouncer.  

Alternatively, we could pool connections locally if we were to choose not to use PGBouncer.  I'd expect smaller deployments of Socorro to pool connections this way.

To see the two strategies in action run 'advanced-demo2' in these two ways:

  $ ./advanced_demo2.py 

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* Second query will fail
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* about to leave the config context

Notice how the connections get closed after each use.  Next try it with the pooling object:

  $ ./advanced_demo2.py --database=PGPooledTransaction

  PGPooledTransaction - setting up connection pool

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGPooledTransaction - refusing to close connection

  ***\* Second query will fail
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGPooledTransaction - refusing to close connection

  ***\* about to leave the config context
  PGPooledTransaction - shutting down connection pool
  FakeDatabaseConnection - closed connection
  PGPooledTransaction - connection MainThread closed

In this run, the opportunity to close the connection after each transaction is refused.  Only at the end, at the close of the 'with' does the pool close the connections.

Implementation of this feature required some changes to how the 'config' property works.  Since we're allowing configuration to contain factories, configuration has state.  So rather than caching and doling out a single copy of the configuration, each request will result in a new copy of the DotDict based config object.  This allows for more than one copy of configuration to be in use at the same time.  I'm thinking ahead to threaded programs where threads may have their own independent copiese.

Try it out and give me feedback.
",twobraids,581227,2011-12-14T22:38:44Z,CONTRIBUTOR,False,377,27,14,the grand unified configuration system,Python,bb13ab98345a6419f22e59aa0084b224ed977050,added config as context for auto factory closing
232,https://api.github.com/repos/mozilla/configman/pulls/11,11,added config as context for auto factory closing,"My original intent was for these configuration objects to hold more than just static constants.  As I've mentioned before, I've envisioned factories as part of configuration.  For example, rather than just having a collection of constants representing the parameters needed to connect to a database, just offer an object that will hand out database connections on demand.  

Aggregations are the basis for constructing factories.  The 'trans_generator' (now renamed 'advanced-demo1') was the first of these.  While that was an interesting exercise, it was really pretty simple minded.  In playing around and implementing a more robust factory I realize that configman was missing a key component to handling factories.  We've got the initialization part with Aggregations, but we need tear down, too.  

I've implemented this experiment using 'contextlib'.  If we think of a configuration as a context that has a scope of a 'with' statement, we've got the mechanism for an orderly tear down of factory objects.  When the code block of a 'with' statement ends, we've got the opportunity to implement tear down.

Look at the 'context' function within the ConfigurationManager class.  When the context goes out of scope, the '_walk_and_close' function walks the config object trying the 'close' method on every item.  Config options that don't have a 'close' method ignore it.  However, for those that do understand, it's the opportunity to perform cleanup work.  The example 'advanced-demo2.py' demonstrates a database connection pool that is guaranteed to close all its cached connection at the appropriate time.  

There are two database classes in the example.  The first (default) implements a database connection factory with no pooling.  Connections are created, used and destroyed.  This is directly applicable to how we use database connections in Socorro when backed with PGBouncer.  

Alternatively, we could pool connections locally if we were to choose not to use PGBouncer.  I'd expect smaller deployments of Socorro to pool connections this way.

To see the two strategies in action run 'advanced-demo2' in these two ways:

  $ ./advanced_demo2.py 

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* Second query will fail
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* about to leave the config context

Notice how the connections get closed after each use.  Next try it with the pooling object:

  $ ./advanced_demo2.py --database=PGPooledTransaction

  PGPooledTransaction - setting up connection pool

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGPooledTransaction - refusing to close connection

  ***\* Second query will fail
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGPooledTransaction - refusing to close connection

  ***\* about to leave the config context
  PGPooledTransaction - shutting down connection pool
  FakeDatabaseConnection - closed connection
  PGPooledTransaction - connection MainThread closed

In this run, the opportunity to close the connection after each transaction is refused.  Only at the end, at the close of the 'with' does the pool close the connections.

Implementation of this feature required some changes to how the 'config' property works.  Since we're allowing configuration to contain factories, configuration has state.  So rather than caching and doling out a single copy of the configuration, each request will result in a new copy of the DotDict based config object.  This allows for more than one copy of configuration to be in use at the same time.  I'm thinking ahead to threaded programs where threads may have their own independent copiese.

Try it out and give me feedback.
",twobraids,581227,2011-12-14T22:38:44Z,CONTRIBUTOR,False,377,27,14,the grand unified configuration system,Python,35d57f51b5dace41ef11eff43b57341c576e67f3,change property 'config' to method 'get_config'
233,https://api.github.com/repos/mozilla/configman/pulls/11,11,added config as context for auto factory closing,"My original intent was for these configuration objects to hold more than just static constants.  As I've mentioned before, I've envisioned factories as part of configuration.  For example, rather than just having a collection of constants representing the parameters needed to connect to a database, just offer an object that will hand out database connections on demand.  

Aggregations are the basis for constructing factories.  The 'trans_generator' (now renamed 'advanced-demo1') was the first of these.  While that was an interesting exercise, it was really pretty simple minded.  In playing around and implementing a more robust factory I realize that configman was missing a key component to handling factories.  We've got the initialization part with Aggregations, but we need tear down, too.  

I've implemented this experiment using 'contextlib'.  If we think of a configuration as a context that has a scope of a 'with' statement, we've got the mechanism for an orderly tear down of factory objects.  When the code block of a 'with' statement ends, we've got the opportunity to implement tear down.

Look at the 'context' function within the ConfigurationManager class.  When the context goes out of scope, the '_walk_and_close' function walks the config object trying the 'close' method on every item.  Config options that don't have a 'close' method ignore it.  However, for those that do understand, it's the opportunity to perform cleanup work.  The example 'advanced-demo2.py' demonstrates a database connection pool that is guaranteed to close all its cached connection at the appropriate time.  

There are two database classes in the example.  The first (default) implements a database connection factory with no pooling.  Connections are created, used and destroyed.  This is directly applicable to how we use database connections in Socorro when backed with PGBouncer.  

Alternatively, we could pool connections locally if we were to choose not to use PGBouncer.  I'd expect smaller deployments of Socorro to pool connections this way.

To see the two strategies in action run 'advanced-demo2' in these two ways:

  $ ./advanced_demo2.py 

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* Second query will fail
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGTransaction - requestng connection to close
  FakeDatabaseConnection - closed connection

  ***\* about to leave the config context

Notice how the connections get closed after each use.  Next try it with the pooling object:

  $ ./advanced_demo2.py --database=PGPooledTransaction

  PGPooledTransaction - setting up connection pool

  ***\* First query will succeed
  FakeDatabaseConnection - created
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - commit
  PGPooledTransaction - refusing to close connection

  ***\* Second query will fail
  FakeDatabaseConnection - yep, we did your query <wink>
  FakeDatabaseConnection - rollback
  PGPooledTransaction - refusing to close connection

  ***\* about to leave the config context
  PGPooledTransaction - shutting down connection pool
  FakeDatabaseConnection - closed connection
  PGPooledTransaction - connection MainThread closed

In this run, the opportunity to close the connection after each transaction is refused.  Only at the end, at the close of the 'with' does the pool close the connections.

Implementation of this feature required some changes to how the 'config' property works.  Since we're allowing configuration to contain factories, configuration has state.  So rather than caching and doling out a single copy of the configuration, each request will result in a new copy of the DotDict based config object.  This allows for more than one copy of configuration to be in use at the same time.  I'm thinking ahead to threaded programs where threads may have their own independent copiese.

Try it out and give me feedback.
",twobraids,581227,2011-12-14T22:38:44Z,CONTRIBUTOR,False,377,27,14,the grand unified configuration system,Python,149efb9072e22f6084293d3fda0b9fbd226b89ea,removed unneeded iteration key
234,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,a06a718480c18d9edb35cf33a9a8dcf1782dc41d,"(Docs only) Fixed wording, templating, spacing and coding small issues."
235,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,8a017aa5206e20a91dc9b7d8538554910f6302da,(Docs only) Fixed a few wording and command results errors.
236,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,d351448a34b78802c599f015a6deafd6747c4e25,Merge branch 'master' of github.com:mozilla/configman
237,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,ce3507c9252dd395c0cea06c1a41d80aab24ed55,Merge branch 'master' of github.com:mozilla/configman
238,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,1ba8201b6c2d01bd84991f1b542d3973e25a17e7,divided methods by public/private; doc'd public
239,https://api.github.com/repos/mozilla/configman/pulls/10,10,config as context,"look at the commits on this pull req.  there should be only one, but there are 6 old commits included, why?
",twobraids,581227,2011-12-14T19:28:36Z,CONTRIBUTOR,False,618,213,12,the grand unified configuration system,Python,52a6ab5ee0a8bbffa0038b195d1f331dedec0ba0,added config as context for auto factory closing
240,https://api.github.com/repos/mozilla/configman/pulls/9,9,divided config_manager methods by public/private,"refactored config_manager so that methods are divided into public and private.  Some methods got renames in the process.

Also rearranged code such that all public methods appear first in the source code to aid readablity.

Also documented the API for all public methods
",twobraids,581227,2011-12-13T17:30:19Z,CONTRIBUTOR,True,233,179,7,the grand unified configuration system,Python,dd908687ac4e42e2335506a0fe506f7e3c363841,divided methods by public/private; doc'd public
241,https://api.github.com/repos/mozilla/configman/pulls/8,8,fix Aggregation behavior for config files,"The values of Aggregations always depend on a function on a set of Options.  Therefore they should not appear in the ini and conf configuration files.  Since json files can be used as a definition source, Aggregations are appropriate there, but they should never be used as a value source. 

This fixes both problems by making sure that whenever the Option definition tree is walked, Aggregations are ignored at the proper time.

This patch also includes a minor bit of code rearrangement so that each of the similar code sections deal with the Options, Aggregations and Namespaces in the same order.
",twobraids,581227,2011-12-12T19:05:33Z,CONTRIBUTOR,True,20,6,3,the grand unified configuration system,Python,b266e53d5f71734fd2b40a16c3e2dbfe4e1bf966,"Aggregations fixed for ini, conf, json"
242,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,cbfaf952338b30eafc62f6f5397f17f6c2db6c84,added transaction_generator and supporting code
243,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,aed51b710e07cc1011210eebfa15c9949a9f21a1,tweaks
244,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,b9b43b1e67e736a90c56f9b034a2780983bea50e,mid dev
245,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,ef9587db78c616a8668507d535284e47a50a49b4,first working aggregations
246,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,4470b8cddefa3da5da3d3dd970c73f7e164a867d,minor changes to comments
247,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,cd4d84ead14b511471d403c1c3773289effcf2ae,corrected json round trip for aggregates
248,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,93883cf470b8f2eeb245159c6baa83e89bc7e4cb,pep8 fixes
249,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,2f6480d8cbbc6677e1b6f763a468c06eaceee2f7,various suggested changes
250,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,5e091f259d5b0ce0655c6049ceed11733edee0e1,more suggested changes about _config
251,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,cd50ccda8cae6e5db78fa0041dd783de60630a56,Merge branch 'aggregation' of github.com:twobraids/configman into aggregation
252,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,e53f7167e5d92faefd9102bc4a01706172488c5c,dropped unneeded exception clause
253,https://api.github.com/repos/mozilla/configman/pulls/6,6,Aggregation - comments requested,"This is the implementation of a proposal to add aggregations to configman.   The idea is to add meta entries to the configuration that are aggregations of other entries.  Aggregations are comprised of a name and a function that returns the aggregation value.  The function must accept three parameters and can return any type of object: 

1) a dict that represents the whole configuration (the output of config.get_config())
2) a dict that represents the local config (the namespace in which the aggregation object lives)
3) a list of command line arguments (those that are not associated with command line switches)

This concept came from a desire to create factory objects in configuration that require input from more than one configuration option.  See .../demo/trans_generator.py for an example of a really cool database transaction factory using this idea.
",twobraids,581227,2011-12-01T16:27:27Z,CONTRIBUTOR,False,325,52,19,the grand unified configuration system,Python,b43499a62ecce81d1f5f8d86bda282a9dfa77b5b,removed _config_dirty
254,https://api.github.com/repos/mozilla/configman/pulls/5,5,beginning tutorial rewritten,"I've combed through the tutorial, making major adjustments to the examples to clarify them.  I've eliminated the use of value sources until the ""intermediate level"".  I've added the tutorial examples into the configman/demos directory to ensure that they work and make them easy for users to experiment with.
",twobraids,581227,2011-11-29T19:53:53Z,CONTRIBUTOR,False,288,128,5,the grand unified configuration system,Python,6e0a14e098be5b5c44c1d5c6409f64299c324da9,doc rewrite
255,https://api.github.com/repos/mozilla/configman/pulls/5,5,beginning tutorial rewritten,"I've combed through the tutorial, making major adjustments to the examples to clarify them.  I've eliminated the use of value sources until the ""intermediate level"".  I've added the tutorial examples into the configman/demos directory to ensure that they work and make them easy for users to experiment with.
",twobraids,581227,2011-11-29T19:53:53Z,CONTRIBUTOR,False,288,128,5,the grand unified configuration system,Python,c4cbb1f16215255e0ef544317de010173e51e593,adjustments for consistency
256,https://api.github.com/repos/mozilla/configman/pulls/5,5,beginning tutorial rewritten,"I've combed through the tutorial, making major adjustments to the examples to clarify them.  I've eliminated the use of value sources until the ""intermediate level"".  I've added the tutorial examples into the configman/demos directory to ensure that they work and make them easy for users to experiment with.
",twobraids,581227,2011-11-29T19:53:53Z,CONTRIBUTOR,False,288,128,5,the grand unified configuration system,Python,3aef4cc1e7cb6cc980b9464efefafa1acd0ad9aa,made more internally consistent; minor corrections
257,https://api.github.com/repos/mozilla/configman/pulls/4,4,"(Docs only) Fixed wording, templating, spacing and coding small issues.",,adngdb,328790,2011-11-29T18:01:37Z,CONTRIBUTOR,False,26,26,1,the grand unified configuration system,Python,f6d8c6fca45225d4d370aae610e5446ad95670bd,"(Docs only) Fixed wording, templating, spacing and coding small issues."
258,https://api.github.com/repos/mozilla/configman/pulls/3,3,(Docs only) Tutorial documentation fix.,"Fixed 2 errors in example codes. Fixed commands to call backwards.py with right arguments order. Fixed 2 wording mistakes. 
",adngdb,328790,2011-11-29T17:20:10Z,CONTRIBUTOR,True,6,6,1,the grand unified configuration system,Python,35e357ca696586e541b0f39f4ff3a99b168d3b13,(Docs only) Fixed a few wording and command results errors.
