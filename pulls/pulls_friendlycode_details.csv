,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/friendlycode/pulls/201,201,Add Mozilla Code of Conduct,"
As of January 1 2019, Mozilla requires that all GitHub projects include this [CODE_OF_CONDUCT.md](https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md) file in the project root. The file has two parts:

1. Required Text - All text under the headings *Community Participation Guidelines and How to Report*, are required, and should not be altered.
2. Optional Text - The Project Specific Etiquette heading provides a space to speak more specifically about ways people can work effectively and inclusively together. Some examples of those can be found on the [Firefox Debugger](https://github.com/devtools-html/debugger.html/blob/master/CODE_OF_CONDUCT.md) project, and [Common Voice](https://github.com/mozilla/voice-web/blob/master/CODE_OF_CONDUCT.md). (The optional part is commented out in the [raw template file](https://raw.githubusercontent.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md), and will not be visible until you modify and uncomment that part.)

If you have any questions about this file, or Code of Conduct policies and procedures, please see [Mozilla-GitHub-Standards](https://wiki.mozilla.org/GitHub/Repository_Requirements) or email Mozilla-GitHub-Standards+CoC@mozilla.com.

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-29T04:47:22Z,NONE,False,15,0,1,World's friendliest HTML editor.,JavaScript,c9bfc9f66d8e1eb5137ec7778591fd69f070c994,"See PR for details

_(Message COC002)_"
1,https://api.github.com/repos/mozilla/friendlycode/pulls/197,197,Update submodule,"Update SlowParse to the latest version
",alicoding,4368149,2013-09-04T19:25:25Z,MEMBER,True,1,1,1,World's friendliest HTML editor.,JavaScript,85bd0c9138140ad5e57dfe0446d3d328c9086c6a,Update submodule
2,https://api.github.com/repos/mozilla/friendlycode/pulls/196,196,"making friendlycode load code from a different domain preview loader, if desired.",,Pomax,177243,2013-08-28T16:44:55Z,CONTRIBUTOR,True,132,55,5,World's friendliest HTML editor.,JavaScript,2dd9607e5275e70870ed45e7671cd7f74338569f,Rebasing
3,https://api.github.com/repos/mozilla/friendlycode/pulls/195,195,details form,,k88hudson,1455535,2013-08-26T18:18:19Z,MEMBER,True,449,55,6,World's friendliest HTML editor.,JavaScript,66331493ebd818c6c579c92cd102000c32f29c3a,bug 896494 - Details form
4,https://api.github.com/repos/mozilla/friendlycode/pulls/195,195,details form,,k88hudson,1455535,2013-08-26T18:18:19Z,MEMBER,True,449,55,6,World's friendliest HTML editor.,JavaScript,baaac5b9c7142e7fef789d4e69e602e698ddfc59,use codeMirror for document contents instead of reading iframe
5,https://api.github.com/repos/mozilla/friendlycode/pulls/194,194,flex-url,,jbuck,578466,2013-08-19T19:34:56Z,MEMBER,True,1,2,1,World's friendliest HTML editor.,JavaScript,cb37ca872e4e09dccd95bf38ea398e59c5070e7a,Fix bug 905249 - Use flexible height links when publishing
6,https://api.github.com/repos/mozilla/friendlycode/pulls/193,193,Localization ready for Thimble,"This is a modification of FriendlyCode which will allow us to make Thimble localizable.
",alicoding,4368149,2013-08-16T15:30:19Z,MEMBER,True,40,189,12,World's friendliest HTML editor.,JavaScript,ced9b87e4a012b16c191013420f1f8c01834df00,Localization ready for Thimble
7,https://api.github.com/repos/mozilla/friendlycode/pulls/192,192,Codemirror 3,"switched over all the code to make use of codemirror3 rather than codemirror2
",Pomax,177243,2013-07-24T23:00:18Z,CONTRIBUTOR,True,249,4269,30,World's friendliest HTML editor.,JavaScript,7fa008d84e163d352c7d85eb10f9b8de60fe45ed,Codemirror 2 -> 3
8,https://api.github.com/repos/mozilla/friendlycode/pulls/191,191,made the confirm dialog only pop up if there's an error in the HTML,"otherwise, friendlycode just publishes when told to.
",Pomax,177243,2013-07-15T20:49:23Z,CONTRIBUTOR,True,16,22,2,World's friendliest HTML editor.,JavaScript,0617291f434c43979b02e8846c2fcb6d47863664,"made the confirm dialog only pop up if there's an error in the HTML, otherwise friendlycode just publishes when told to."
9,https://api.github.com/repos/mozilla/friendlycode/pulls/190,190,"adds a ""dismiss"" link to the lower-right of the error/help dialogs","we had multiple bug reports that the error/help dialog could not be closed under certain circumstances, due to it covering the error or being otherwise inconveniently placed. This pull request adds an in-dialog  ""dismiss"" link that hides the error/help dialog again, so that people can always close it, without needing to click anywhere outside the dialog.
",Pomax,177243,2013-04-29T16:35:57Z,CONTRIBUTOR,True,57,23,5,World's friendliest HTML editor.,JavaScript,c13ff92d5b9510230b71b9cbea1a0e70b417231f,"dismiss link for getting rid of the help/error message dialog, in-dialog"
10,https://api.github.com/repos/mozilla/friendlycode/pulls/190,190,"adds a ""dismiss"" link to the lower-right of the error/help dialogs","we had multiple bug reports that the error/help dialog could not be closed under certain circumstances, due to it covering the error or being otherwise inconveniently placed. This pull request adds an in-dialog  ""dismiss"" link that hides the error/help dialog again, so that people can always close it, without needing to click anywhere outside the dialog.
",Pomax,177243,2013-04-29T16:35:57Z,CONTRIBUTOR,True,57,23,5,World's friendliest HTML editor.,JavaScript,7f6c1ca017bc48ecd009159866e6b8019ff1fa1a,"sublime wasn't set to strip trailing whitespace. Also, L10N"
11,https://api.github.com/repos/mozilla/friendlycode/pulls/190,190,"adds a ""dismiss"" link to the lower-right of the error/help dialogs","we had multiple bug reports that the error/help dialog could not be closed under certain circumstances, due to it covering the error or being otherwise inconveniently placed. This pull request adds an in-dialog  ""dismiss"" link that hides the error/help dialog again, so that people can always close it, without needing to click anywhere outside the dialog.
",Pomax,177243,2013-04-29T16:35:57Z,CONTRIBUTOR,True,57,23,5,World's friendliest HTML editor.,JavaScript,7d2da97e251366cdd69ce302c705881c5ae830cf,rogue space
12,https://api.github.com/repos/mozilla/friendlycode/pulls/180,180,attempt to fix #176 by unescaping XML in key values from transifex.,"I'm not a huge fan of this solution because if transifex ever starts unescaping key values itself, we won't really know ... and it's hard to write integration tests w/ transifex because accessing the translations of an open-source project using their API still requires username/password authentication.
",toolness,124687,2013-02-04T22:15:36Z,CONTRIBUTOR,False,25,4,2,World's friendliest HTML editor.,JavaScript,c17d2646a4423c45cb135a48fd816c5742ccd517,attempt to fix #176 by unescaping XML in key values from transifex.
13,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,08cec34f4ec29cee74cdb14148cabd2e39a36dd7,"Added 'plist' command to bin/build-i18n.js and tests.

This command outputs a plist file for the given i18n bundle module.

Transifex doesn't currently support requirejs i18n bundles, and the
Apple plist format appears to be the closest thing to it."
14,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,0557d0505c357945c6b5c021b0e718012c037cdf,"Added config.githubBranch to require config, made github URLs more DRY."
15,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,8d8197e48c9beebc47dfdbc3558d8a8c4a438a89,"Added a	very early bin/transifex.js and	test suite.

The script doesn't really do anything yet other	than display some
information about the project.

Also added request as a dependency to package.json, as we use it to
communicate with transifex's REST API."
16,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,b816f3810b73807f1b8d3e56979d6b69b13ac46c,added more functions to transifex.js with tests.
17,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,6d0bc6a53e1363eaa7bc02d30778157019b32379,wrote network-side part of importing from transifex.
18,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,046dc39f8dc0240b5e6777fce0c65e2d226525d1,finished initial implementation of transifex.js.
19,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,cec85be415d58ee5b2d5527b29d1295a90734c10,added examples/transifex.html and instructions for localization to readme.
20,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,405f4dd1bfa121db16d3d1b95becc1a696f89cb0,Added --i18n-url option to build-require.js.
21,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,a65f2ea2cc83761677ff12c78bcdf408bd2b0838,"transifex.html now optionally uses transifex-to-requirejs-i18n-server.

This makes it easy for folks to test out their localization in Friendlycode
without needing to clone the git repo."
22,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,741bec9f651933a99402b4919243d3bb397bec8c,added locale selection widget and querystring arg to examples/transifex.html.
23,https://api.github.com/repos/mozilla/friendlycode/pulls/175,175,Add support for Transifex localizations,"Check it out, yo! See the section on localization in the README for more info: https://github.com/toolness/friendlycode/tree/transifex#localization
",toolness,124687,2013-01-24T20:00:53Z,CONTRIBUTOR,True,614,38,10,World's friendliest HTML editor.,JavaScript,8e970e93fac3d7f8d1cada08fda95799020077e5,"Moved github-related keys from require-config.js to package.json.

I tried to use the ""repository"" key in package.json described here:

https://npmjs.org/doc/json.html#repository

The use of 'repository.defaultBranch' is my own invention, though,
which is hopefully acceptable."
24,https://api.github.com/repos/mozilla/friendlycode/pulls/173,173,added tab-as-spaces replacement for the codemirror textarea,"This fixes tabs at 2 spaces, and replaces tabulation codes inserted by the tab key with two spaces, as well. The replacement code is an undocumented use of replaceSelection/2 in CodeMirror, but it was suggested by Marijn in https://groups.google.com/forum/?fromgroups=#!topic/codemirror/E9ti769jBng so thats pretty much the highest authority we can rely on. It replaces the insertion from ""tab"" with the two spaces, then cancels the ""text select"" that the replaceSelection call usually effects.
",Pomax,177243,2013-01-18T20:31:05Z,CONTRIBUTOR,False,13,6,1,World's friendliest HTML editor.,JavaScript,f1b7e987288e1abb0e3f4c5804833086c1f73b53,added tab-as-spaces replacement for the codemirror textarea
25,https://api.github.com/repos/mozilla/friendlycode/pulls/172,172,Codeformatting 161,"This fixes tabs at 2 spaces, and replaces tabulation codes inserted by the tab key with two spaces, as well. The replacement code is an undocumented use of replaceSelection/2  in CodeMirror, but it was suggested by Marijn in https://groups.google.com/forum/?fromgroups=#!topic/codemirror/E9ti769jBng so thats pretty much the highest authority we can rely on. It replaces the insertion from ""tab"" with the two spaces, then cancels the ""text select"" that the replaceSelection call usually effects.
",Pomax,177243,2013-01-18T20:18:09Z,CONTRIBUTOR,False,14,7,2,World's friendliest HTML editor.,JavaScript,a540e3213bcff8578e1da64e5cc55553a201bf6d,update to latest gh-pages branch
26,https://api.github.com/repos/mozilla/friendlycode/pulls/172,172,Codeformatting 161,"This fixes tabs at 2 spaces, and replaces tabulation codes inserted by the tab key with two spaces, as well. The replacement code is an undocumented use of replaceSelection/2  in CodeMirror, but it was suggested by Marijn in https://groups.google.com/forum/?fromgroups=#!topic/codemirror/E9ti769jBng so thats pretty much the highest authority we can rely on. It replaces the insertion from ""tab"" with the two spaces, then cancels the ""text select"" that the replaceSelection call usually effects.
",Pomax,177243,2013-01-18T20:18:09Z,CONTRIBUTOR,False,14,7,2,World's friendliest HTML editor.,JavaScript,0580c856725d4cd94fd2d66d3adb906eba619742,why was that file not cleaned up.
27,https://api.github.com/repos/mozilla/friendlycode/pulls/172,172,Codeformatting 161,"This fixes tabs at 2 spaces, and replaces tabulation codes inserted by the tab key with two spaces, as well. The replacement code is an undocumented use of replaceSelection/2  in CodeMirror, but it was suggested by Marijn in https://groups.google.com/forum/?fromgroups=#!topic/codemirror/E9ti769jBng so thats pretty much the highest authority we can rely on. It replaces the insertion from ""tab"" with the two spaces, then cancels the ""text select"" that the replaceSelection call usually effects.
",Pomax,177243,2013-01-18T20:18:09Z,CONTRIBUTOR,False,14,7,2,World's friendliest HTML editor.,JavaScript,c794265da48b67a52a0c2fca24a65e4f0c1b4225,made the tab key insert as two spaces
28,https://api.github.com/repos/mozilla/friendlycode/pulls/172,172,Codeformatting 161,"This fixes tabs at 2 spaces, and replaces tabulation codes inserted by the tab key with two spaces, as well. The replacement code is an undocumented use of replaceSelection/2  in CodeMirror, but it was suggested by Marijn in https://groups.google.com/forum/?fromgroups=#!topic/codemirror/E9ti769jBng so thats pretty much the highest authority we can rely on. It replaces the insertion from ""tab"" with the two spaces, then cancels the ""text select"" that the replaceSelection call usually effects.
",Pomax,177243,2013-01-18T20:18:09Z,CONTRIBUTOR,False,14,7,2,World's friendliest HTML editor.,JavaScript,aeca67983b34cecf72feb46e169957b319ba68bc,corrected the code comment
29,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,2de271288e06b8b2f7168b3bca11f38344cbafec,"moved slowparse to vendor/slowparse. build is now broken, temporarily."
30,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,603e26b65fba194f455f741d992322c8ddbbbf2e,modified require-config.js to point to /vendor/slowparse.
31,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,9a3e790aae316b3cb0c4f089a0995dc83c90c93d,moved codemirror2 into vendor/codemirror2.
32,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,fb5f22be1620273aa9abea28fbd60946c8594a3e,fixed a bug where the first @import in friendlycode.css wasn't being inlined.
33,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,95892c9e5982f386be91f313b1eb7d47e2984d71,moved jquery and its plugins into vendor/.
34,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,f4268fa58a4742a3f6ab7d37fbcc7f5b39855006,moved backbone and backbone-events into vendor/.
35,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,2c10f9e256efb8babbac034f89b08fe0f3048905,moved underscore into vendor/.
36,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,e76c6d4db1d5492367c06bff9a0a099712939fb7,moved require into vendor/.
37,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,edb2a97932aeebc575131cc12e26526aa22d1490,moved require i18n plugin to vendor/require.i18n.js.
38,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,e95c8605c52135ac56e4a37c29e0ac1ec2f03887,moved require text plugin to vendor/require.text.js.
39,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,3496fad6130fa90880bfd0361a70922f847ed4e8,"moved our custom require template plugin to js/require.template.js.

I didn't move it into vendor because it's custom code, but I liked the
require.*.js convention rather than a separate require-plugins dir."
40,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,deb1ff105c074ee2a7a2d51c2e280b239326e468,moved lscache into vendor/.
41,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,eaf8b0d8a7c7b8af10224230cb540786a0a5614c,enclose all keys in config.paths in double quotes for consistency.
42,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,27187734b644066e4a8940841b9631c19b54488a,visually separate vendor paths from non-vendor paths in config.paths.
43,https://api.github.com/repos/mozilla/friendlycode/pulls/170,170,Move third-party code into a vendor directory,"This pull request isn't finished yet, but once it's done, it will resolve #166.
",toolness,124687,2013-01-18T14:04:32Z,CONTRIBUTOR,True,47,36,32,World's friendliest HTML editor.,JavaScript,4e164ebb328ee05380f895c4ca47e1aff2241087,moved jquery.no-conflict and backbone-events from vendor/ to js/shims/.
44,https://api.github.com/repos/mozilla/friendlycode/pulls/165,165,Highlight relevant HTML code on mouse-over of preview frame content,"This fixes #164.
",toolness,124687,2013-01-16T20:22:32Z,CONTRIBUTOR,True,20,12,1,World's friendliest HTML editor.,JavaScript,c9ade5a74f8b000d61f9a3b356b30609f0540351,Don't prevent mousedown when clicking on preview page content.
45,https://api.github.com/repos/mozilla/friendlycode/pulls/165,165,Highlight relevant HTML code on mouse-over of preview frame content,"This fixes #164.
",toolness,124687,2013-01-16T20:22:32Z,CONTRIBUTOR,True,20,12,1,World's friendliest HTML editor.,JavaScript,c40a533cc77ab082c9707ba8d5b86cb4ee85133a,"preview-to-editor-mapping highlights on hover, scrolls on mousedown."
46,https://api.github.com/repos/mozilla/friendlycode/pulls/165,165,Highlight relevant HTML code on mouse-over of preview frame content,"This fixes #164.
",toolness,124687,2013-01-16T20:22:32Z,CONTRIBUTOR,True,20,12,1,World's friendliest HTML editor.,JavaScript,eefaa1a2e26cf0e6e38b9398a129a1a21adf618c,clear marks when mouse leaves html area of preview
47,https://api.github.com/repos/mozilla/friendlycode/pulls/165,165,Highlight relevant HTML code on mouse-over of preview frame content,"This fixes #164.
",toolness,124687,2013-01-16T20:22:32Z,CONTRIBUTOR,True,20,12,1,World's friendliest HTML editor.,JavaScript,9db1210148d3432dc83c8a89f79392bceba4cb3d,preview-to-editor-mapping hover uses mouseover instead of mouseenter now.
48,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,d5336065f287dcfb59e894399760b98606440883,"Converted hacktionary-data to requirejs i18n bundles.

For more information on i18n bundles, see:

http://requirejs.org/docs/api.html#i18n"
49,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,4799d9a31907cb124451aae4a29015eaba7891c1,converted MDN_URLS to requirejs i18n bundles.
50,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,6183f651f9f5ba965f11d3b13ddcb3ee3e8178ea,"Internationalized slowparse-errors.

This is sort of weird and inefficient right now because we convert
from HTML to an i18nbundle and back again. However, in production
builds, we will be replacing the 'nls' paths with pre-built bundles
anyways, so only one direction will be computed in production.

Ideally we might want to move all this i18n stuff into slowparse,
though, and just couple slowparse to requirejs."
51,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,79c179ae8a97b858fde6c22da3356f7c09cfd467,moved content in js/fc/nls/root/ into parent dir.
52,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,b72d314273b9ffcac0b0301e9db7c97bf6eb8f9e,"added build-i18n.js, which makes a big JSON blob of all bundles."
53,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,9055eccf32c73ed88122e9f7cc7d5d11e6ef4987,added custom metadata to some i18n bundles.
54,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,15ab56026b54f813faadeb37386db4903eafa8da,"in build-i18n.js, add selective module export and allow underscore importing."
55,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,b7b997160cc08d3dd050099ce81e5b6218bbe87a,Added a very simple inline-l10n module.
56,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,a64b158a071ad24bb90ce79b7f78c8e6d3107c8a,added js/fc/nls/templates.js and modified template plugin to also localize.
57,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,80e944c0e2b145e35f87d05c450f844134947050,internationalized all templates.
58,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,539cdeaef83ef337f98055291e4fd6c560f8c0c3,added misc i18n bundle and made friendlycode.js use it.
59,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,b6d90abae1853254e4b20b1f695b68e2cce05d2f,made fc/ui/publish.js use fc/nls/misc.
60,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,134f64f0a3316de0641441a8f91ffaa3d92eaacd,internationalized social-media.js.
61,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,fc1d50a0d8ab502e898b6e3bcbb2c56ca406af68,added some metadata to i18n bundles.
62,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,045f73a39d078999b4bd9f5817344a99db2cb13a,"renamed fc/nls/templates to fc/nls/ui, and merged fc/nls/misc into it."
63,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,aa491e0291c92b1779dec950dcc9dd0aac9961c4,added descriptions to slowparse error i18n bundles.
64,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,f45beb0ef2ca2160ae5b536961648d72f6a4cbec,"for i18n bundle keys that originate in templates, show the template filename as part of the key's help metadata."
65,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,4988a386b839d69d062cea0f039a843c948332be,documented inline-l10n.js.
66,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,3e4eaeeea6b70a05a6d262c9a9e5126bb7a467d7,force requirement of requirejs 2.1.x in package.json.
67,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,625cb1b775cd34df99392463bb05b86aa15e43ed,"Add error output for requirejs optimization failure.

Also see https://github.com/jrburke/requirejs/pull/568."
68,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,45079a9b5caa3a530203c7d7afa566c746274248,build-require.js works again.
69,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,aa6ffad74258d927f29568c3c89c740185d2dcce,"slowparse errors are now stored as raw i18n json bundles in optimized builds.

previously, their raw HTML was being parsed into i18n bundle format
at runtime."
70,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,a43b0fb21aed5f9b7cd04587c7aaea651aaed813,refactorings to make l10n infrastructure easier to understand.
71,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,bb889da734af156371c089903df8447e1755b587,moved build-i18n.js and build-require.js into a 'bin' directory.
72,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,1205d4f4a2e675eea74cda289efc9a870117f4a4,"added node-tap tests for build-i18n.js, and fixed a bug in html-to-i18n.js."
73,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,dd2670b84c0437d44c6d82c889755fb0e29cfde9,"'npm test' now also tests unoptimized and optimized qunit tests, build step."
74,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,d298c314bee848bdd543efaba9435f9669a0e9c3,"removed self-test from bin/build-require.js, since node-tap tests obviate it."
75,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,a898b06538987a60edbc31798b73d44ba8d33f47,Added .travis.yml.
76,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,9a72ebccc4eacdaac4ced8a9be890d56b5d1305c,added express to package.json
77,https://api.github.com/repos/mozilla/friendlycode/pulls/163,163,Internationalize Friendlycode,"Here I have implemented a simple, quick solution to bootstrap localization for Friendlycode.

Goals of the bootstrapping:
- Allow contributors to start localizing ASAP without blocking on us to ""perfect"" localization.
- Potentially allow contributors to provide better copy for certain components, such as e.g. the overly-technical HTML/CSS help that was scraped off MDN, by contributing to the `en` localization.
- Start with an extremely simple localization infrastructure: just key-value pairs, no initial support for pluralization, gender, or RTL languages. Evolve as needed, preferably without too much churn (e.g., constantly forcing contributors to re-localize the same content).
- Allow contributors to provide feedback on the localization of an app so we can solve any problems sooner rather than later.
- Use a simple but flexible data format for the localization that can easily be converted to whatever interchange format we end up using, be it `.po` files or `.properties` files or something else entirely.
- When possible, use other abstractions that allow us to decouple each component of the localization pipeline from one another, allowing us to replace parts with more powerful alternatives as needed.

Ultimately the initial solution involved the following pieces:
- Use the [tiny](https://raw.github.com/requirejs/i18n/latest/i18n.js) requirejs [i18n plugin](http://requirejs.org/docs/api.html#i18n) and its i18n bundle convention to access localization data in the product's source code.
- Create ""stub"" root i18n bundles in the product's source code that provide default data for the localization, ""scraping"" content from existing code/data files as necessary. This allows both for friendlycode to continue to minimally operate from flat files (without requiring a special server or build step) and also for a simple [build-i18n.js](https://github.com/toolness/friendlycode/blob/i18n/build-i18n.js) script to scrape and generate initial source data for localization tools to consume.
- Create a [html-to-i18n-bundle.js](https://github.com/toolness/friendlycode/blob/i18n/js/slowparse-errors/html-to-i18n-bundle.js) module that converts slowparse's HTML error templates into the JSON format expected by requirejs-style i18n bundles. This effectively ""scrapes"" the templates, providing initial source data for localization tools to consume.
- Create and document a tiny [inline-l10n.js](http://l10n-thimble.toolness.org/docs/inline-l10n.html) module that preprocesses HTML templates in friendlycode and outputs HTML templates with localized content. It can also ""scrape"" the templates and provide initial source data for localization tools to consume.
- Create and document a simple localization editor, [ghetto-l10n](https://github.com/toolness/ghetto-l10n), which takes the output of `build-i18n.js` and allows contributors to easily localize content and quickly see the results of their work.
",toolness,124687,2012-12-07T00:23:30Z,CONTRIBUTOR,True,1136,368,36,World's friendliest HTML editor.,JavaScript,008aa653a4e9327353f25e9c730e14f99cd6600d,added travis badge to readme.
78,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,3d710e092da1da37c902b9923d13e1ecf20f3673,"Initial attempt at a sandboxed live preview frame.

This commit adds live-preview-sandbox.js, which is a drop-in replacement
for live-preview.js. It creates the preview frame in a separate origin
and communicates with friendlycode through postmessage.

This is done primarily to prevent malicious code from compromising the
embedder.

Right now this doesn't work with the preview-to-editor-mapping
component, but it can be made to.

I originally tried using the ""sandbox"" iframe attribute, which is supported
on webkit and bleeding-edge versions of firefox, but as child iframes
inherit the properties of their sandboxed parent, this proved problematic.
So I just assume that the preview iframe is in a separate origin; by default,
if no alternate origin is passed in, the code assumes it's at port+1 (i.e.,
if the friendlycode instance is at localhost:8001, the sandboxed iframe
is created at localhost:8002). This is currently inconvenient to set up
because it requires running two web servers on different ports."
79,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,d3714382ae4d3d34b77a30e531277fdb9ee7134c,allow a custom live preview implementation to be passed into Friendlycode.
80,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,9afdf406020112509c5d8238632c1ac25aeed9f2,added sandboxed-alternate-publisher example.
81,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,c7fb304f4f914c64de77a32ac0886b92e772cb98,typo fix
82,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,e8cb1cdc675cfe2145410bf87cd751ddd6170ca6,"If no sandboxURL is passed in, just use one at our origin."
83,https://api.github.com/repos/mozilla/friendlycode/pulls/162,162,Sandbox the live preview inside an iframe on a separate origin,"This isn't yet a formal pull request with productionalized code; it's more to begin a dialogue that will take place in mozilla/webpagemaker#626.

The code contained in this pull request is a proof-of-concept which houses the live preview on a separate origin that is communicated with via [postMessage](https://developer.mozilla.org/en-US/docs/DOM/window.postMessage).  A simple message-passing protocol is defined that treats the preview frame as untrusted, thereby mitigating any attacks that malicious code can inflict on the editor domain.

I've hosted a demonstration of this at [sandboxed-jsthimble.toolness.org](http://sandboxed-jsthimble.toolness.org).  There shouldn't be any way to access the editor frame from script that the preview frame executes.
",toolness,124687,2012-11-26T16:13:08Z,CONTRIBUTOR,False,909,104,11,World's friendliest HTML editor.,JavaScript,acb8608cf8017e11b04f72cb50e45e9fb5fe9cc5,made preview to editor mapping work w/ sandboxed preview.
84,https://api.github.com/repos/mozilla/friendlycode/pulls/159,159,Darker dimples,"Closes #158. Not sure it's a perfect match for webpagemaker, but uses the same color shows up dark in webpagemaker and light in the editor.
",stenington,55319,2012-11-02T22:05:40Z,CONTRIBUTOR,True,2,2,1,World's friendliest HTML editor.,JavaScript,562f6d11b29dd8f0decc1056e4ec28d57087b6af,Darker dimples
85,https://api.github.com/repos/mozilla/friendlycode/pulls/157,157,Adding dimple,"Closes #145.

Adds a dimple next to Editor. Uses similar css to webpagemaker, but namespaced to .friendlycode-base to be able to override those styles.
",stenington,55319,2012-11-02T18:59:55Z,CONTRIBUTOR,True,32,0,2,World's friendliest HTML editor.,JavaScript,0c098efe573359a141ba7ade63d8fca8b3a482e8,Added dimple after editor icon
86,https://api.github.com/repos/mozilla/friendlycode/pulls/157,157,Adding dimple,"Closes #145.

Adds a dimple next to Editor. Uses similar css to webpagemaker, but namespaced to .friendlycode-base to be able to override those styles.
",stenington,55319,2012-11-02T18:59:55Z,CONTRIBUTOR,True,32,0,2,World's friendliest HTML editor.,JavaScript,9dbc67070bcf480757cb7ed9efb047547d03b85e,namespace the breadcrumbs css to override webpagemaker breadcrumbs
87,https://api.github.com/repos/mozilla/friendlycode/pulls/156,156,Fix short button getting clobbered in webpagemaker,"Closes #155
",stenington,55319,2012-11-02T18:16:14Z,CONTRIBUTOR,True,8,3,2,World's friendliest HTML editor.,JavaScript,cbf871aba3abc675e71a5c994fb2938e93bc5e8d,"Restore button size to k88's original, add .short class to set our desired size"
88,https://api.github.com/repos/mozilla/friendlycode/pulls/154,154,Swap out Myriad Pro for Open sans,"This fixes #141.
",toolness,124687,2012-11-01T20:28:59Z,CONTRIBUTOR,True,322,15,12,World's friendliest HTML editor.,JavaScript,e7962a9b41abc11035be635d034debb21a8bd515,"Replace myriad-pro with Open Sans.

Also added open sans to the repository so we're no longer dependent
on forsaken typekit."
89,https://api.github.com/repos/mozilla/friendlycode/pulls/154,154,Swap out Myriad Pro for Open sans,"This fixes #141.
",toolness,124687,2012-11-01T20:28:59Z,CONTRIBUTOR,True,322,15,12,World's friendliest HTML editor.,JavaScript,659b9ca816518fd5ec55617369764e8fce43e068,"get rid of open sans light, as we don't use it."
90,https://api.github.com/repos/mozilla/friendlycode/pulls/153,153,Use webmaker styles for publish button,"Closes #142, maybe.

It seems like the addition of webmaker-style button CSS is temporary, but I'm not sure if we'll want to return to the old style buttons afterwards, or the publish button will be removed from friendlycode completely.
",stenington,55319,2012-10-31T21:15:44Z,CONTRIBUTOR,True,47,38,4,World's friendliest HTML editor.,JavaScript,979b0aab37661d26b32c984ab621f5593ad6a937,"Added buttons.css to temporarily house webmaker-style button styles.
Updated publish button to use webmaker-style buttons, and removed
old button styling."
91,https://api.github.com/repos/mozilla/friendlycode/pulls/152,152,Blue icons and titles,"Closes #143, #144, #146.
",stenington,55319,2012-10-29T17:01:51Z,CONTRIBUTOR,True,1,1,3,World's friendliest HTML editor.,JavaScript,768b70250ec242390724b953167198379ec730ae,Swap black editor and preview icons for blue and update css for title text
92,https://api.github.com/repos/mozilla/friendlycode/pulls/151,151,Remove borders from .thimble-url-box,"I'm not 100% sure what `modals_full_screen.css` is used for, but assumed it should be the same there?

Closes #140.
",stenington,55319,2012-10-26T22:03:22Z,CONTRIBUTOR,True,0,4,2,World's friendliest HTML editor.,JavaScript,dce75a72cb537c91bebb3dad12ee6c65f547e80d,Remove borders from .thimble-url-box
93,https://api.github.com/repos/mozilla/friendlycode/pulls/150,150,Removing publish dialog survey link and styling,"Yup.
",stenington,55319,2012-10-26T22:00:50Z,CONTRIBUTOR,True,0,15,2,World's friendliest HTML editor.,JavaScript,c4f568d3ad091581c1be427430cd985a51c5a3d4,Removing publish dialog survey link and styling
94,https://api.github.com/repos/mozilla/friendlycode/pulls/149,149,Expose editor to friendlycode embedders and provide access to page title.,"Fixes #148.
",toolness,124687,2012-10-26T12:27:32Z,CONTRIBUTOR,True,56,7,5,World's friendliest HTML editor.,JavaScript,23d2b59cf4193be23d910252741047a86ffec71a,"Expose editor to friendlycode embedders and provide access to page title.

Fixes #148."
95,https://api.github.com/repos/mozilla/friendlycode/pulls/138,138,Allow Friendlycode embedders to provide alternate publisher backends and allow JS.,"This will allow us to have an experimental JS-enabled Thimble for MozFest.
",toolness,124687,2012-10-09T21:41:27Z,CONTRIBUTOR,True,99,4,4,World's friendliest HTML editor.,JavaScript,f1a3dc814208df4a73f56c49e4e33c1104899315,allow a custom publisher implementation to be passed into the FriendlycodeEditor constructor.
96,https://api.github.com/repos/mozilla/friendlycode/pulls/138,138,Allow Friendlycode embedders to provide alternate publisher backends and allow JS.,"This will allow us to have an experimental JS-enabled Thimble for MozFest.
",toolness,124687,2012-10-09T21:41:27Z,CONTRIBUTOR,True,99,4,4,World's friendliest HTML editor.,JavaScript,b259606d45a1584d0c320fce1cb7652e370625b2,"Added an 'allowJS' option to the FriendlycodeEditor constructor.

Note that it only affects whether the user is warned when they write
JS in the editor. Only the publishing backend can truly determine
whether published HTML contains JS or not."
97,https://api.github.com/repos/mozilla/friendlycode/pulls/138,138,Allow Friendlycode embedders to provide alternate publisher backends and allow JS.,"This will allow us to have an experimental JS-enabled Thimble for MozFest.
",toolness,124687,2012-10-09T21:41:27Z,CONTRIBUTOR,True,99,4,4,World's friendliest HTML editor.,JavaScript,1f4e165a7d94a0bea685b74d3d71c03f7421a13f,"Added examples/alternate-publisher.html.

This example uses the Hackasaurus publishing endpoint for publishing
unsanitized pages (i.e., JS is allowed)."
98,https://api.github.com/repos/mozilla/friendlycode/pulls/132,132,fixed facebook like-button,,Pomax,177243,2012-08-27T19:09:05Z,CONTRIBUTOR,True,1,1,1,World's friendliest HTML editor.,JavaScript,ba13a2ce922ca3ea81c4976982a81f91220b7163,fixed facebook like-button
99,https://api.github.com/repos/mozilla/friendlycode/pulls/130,130,Restore gutter pointer,"The gutter pointer is back!

Before 1c50dcc41d0b28123e8683072c58c5eeb02aebf2 we had a pointer, but it only worked on lines that didn't wrap, so we removed it (see mozilla/webpagemaker#335). The production branch currently looks like this now:

<img src=""http://u.toolness.org/vljzt"">

But this pull request contains an SVG-based one that looks like this for lines that don't wrap:

<img src=""http://u.toolness.org/dwulk"">

And this for lines that do wrap:

<img src=""http://u.toolness.org/itqpm"">

For reference, see Jess' original [gutter pointer mockup](http://www.flickr.com/photos/jessicaklein/7221327312).
",toolness,124687,2012-08-27T18:42:45Z,CONTRIBUTOR,True,128,5,6,World's friendliest HTML editor.,JavaScript,d3a6da7bb14bf7f3dbd8335d7b846faf675ec7ee,"Initial attempt at an SVG-based gutter pointer.

This gutter pointer is based on Jess' original mockup here:

  http://www.flickr.com/photos/jessicaklein/7221327312

Currently this needs to be changed so the pointer's left side starts
at the very right side of the gutter, and extends into the margin of
the actual text area."
100,https://api.github.com/repos/mozilla/friendlycode/pulls/130,130,Restore gutter pointer,"The gutter pointer is back!

Before 1c50dcc41d0b28123e8683072c58c5eeb02aebf2 we had a pointer, but it only worked on lines that didn't wrap, so we removed it (see mozilla/webpagemaker#335). The production branch currently looks like this now:

<img src=""http://u.toolness.org/vljzt"">

But this pull request contains an SVG-based one that looks like this for lines that don't wrap:

<img src=""http://u.toolness.org/dwulk"">

And this for lines that do wrap:

<img src=""http://u.toolness.org/itqpm"">

For reference, see Jess' original [gutter pointer mockup](http://www.flickr.com/photos/jessicaklein/7221327312).
",toolness,124687,2012-08-27T18:42:45Z,CONTRIBUTOR,True,128,5,6,World's friendliest HTML editor.,JavaScript,43d855ddb74c698ec05f88c57a348209606c63dc,"The gutter pointer now starts at the right edge of the gutter.

I had to shape the SVG polygon to fill in the right side of the
gutter, because I can't seem to figure out the CSS to make the
gutter-text background extend that far. Very odd."
101,https://api.github.com/repos/mozilla/friendlycode/pulls/130,130,Restore gutter pointer,"The gutter pointer is back!

Before 1c50dcc41d0b28123e8683072c58c5eeb02aebf2 we had a pointer, but it only worked on lines that didn't wrap, so we removed it (see mozilla/webpagemaker#335). The production branch currently looks like this now:

<img src=""http://u.toolness.org/vljzt"">

But this pull request contains an SVG-based one that looks like this for lines that don't wrap:

<img src=""http://u.toolness.org/dwulk"">

And this for lines that do wrap:

<img src=""http://u.toolness.org/itqpm"">

For reference, see Jess' original [gutter pointer mockup](http://www.flickr.com/photos/jessicaklein/7221327312).
",toolness,124687,2012-08-27T18:42:45Z,CONTRIBUTOR,True,128,5,6,World's friendliest HTML editor.,JavaScript,f535129db52a7c255cf75180f93e63319981f4d7,fixed a subpixel alignment bug in gutter pointer.
102,https://api.github.com/repos/mozilla/friendlycode/pulls/130,130,Restore gutter pointer,"The gutter pointer is back!

Before 1c50dcc41d0b28123e8683072c58c5eeb02aebf2 we had a pointer, but it only worked on lines that didn't wrap, so we removed it (see mozilla/webpagemaker#335). The production branch currently looks like this now:

<img src=""http://u.toolness.org/vljzt"">

But this pull request contains an SVG-based one that looks like this for lines that don't wrap:

<img src=""http://u.toolness.org/dwulk"">

And this for lines that do wrap:

<img src=""http://u.toolness.org/itqpm"">

For reference, see Jess' original [gutter pointer mockup](http://www.flickr.com/photos/jessicaklein/7221327312).
",toolness,124687,2012-08-27T18:42:45Z,CONTRIBUTOR,True,128,5,6,World's friendliest HTML editor.,JavaScript,a61d6f6866be1557e96fa58120f667b61ff66498,"Factored out makeGutterPointer() into separate module, added smoke test."
103,https://api.github.com/repos/mozilla/friendlycode/pulls/130,130,Restore gutter pointer,"The gutter pointer is back!

Before 1c50dcc41d0b28123e8683072c58c5eeb02aebf2 we had a pointer, but it only worked on lines that didn't wrap, so we removed it (see mozilla/webpagemaker#335). The production branch currently looks like this now:

<img src=""http://u.toolness.org/vljzt"">

But this pull request contains an SVG-based one that looks like this for lines that don't wrap:

<img src=""http://u.toolness.org/dwulk"">

And this for lines that do wrap:

<img src=""http://u.toolness.org/itqpm"">

For reference, see Jess' original [gutter pointer mockup](http://www.flickr.com/photos/jessicaklein/7221327312).
",toolness,124687,2012-08-27T18:42:45Z,CONTRIBUTOR,True,128,5,6,World's friendliest HTML editor.,JavaScript,bc1d88f3255385dd8d603f037b3bf45217e5f4c7,"Added docs for gutter-pointer.js, minor refactorings.

Made the absolute positioning of the gutter-pointer an intrinsic
part of gutter-pointer.js, since it's core to its functionality
(there's no reason it should be anything else, afaik)."
104,https://api.github.com/repos/mozilla/friendlycode/pulls/129,129,Fixt linting issues on social-media.js file,"Were using this script in Popcorn Maker and lint complained about the lines I touched so I fixed them.  If your interested in the fixes, here they are!
",dseif,580086,2012-08-22T20:20:12Z,MEMBER,False,6,4,1,World's friendliest HTML editor.,JavaScript,3c4490fe5965678b1a37ed9d40b016cd19267657,Fixt linting issues on social-media.js file
105,https://api.github.com/repos/mozilla/friendlycode/pulls/128,128,Factored out EditorWithToolbar class.,"This just combines the editor with the toolbar and changes the toolbar class to not display the Publish button if no `startPublish` callback has been set.

This refactoring provides a better separation of concerns between editing and publishing, and allows the `EditorWithToolbar` widget to be embedded in a webpage if no publish functionality is needed.
",toolness,124687,2012-08-20T14:19:38Z,CONTRIBUTOR,True,107,51,7,World's friendliest HTML editor.,JavaScript,7c0f23fd85a090392f51707e76c33ad2da3ea056,"Factored out EditorWithToolbar class.

This just combines the editor with the toolbar and changes the toolbar
class to not display the Publish button if no startPublish callback
has been set. This refactoring provides a better separation of concerns
between editing and publishing, and allows the EditorWithToolbar widget
to be embedded in a webpage if no publish functionality is needed."
106,https://api.github.com/repos/mozilla/friendlycode/pulls/128,128,Factored out EditorWithToolbar class.,"This just combines the editor with the toolbar and changes the toolbar class to not display the Publish button if no `startPublish` callback has been set.

This refactoring provides a better separation of concerns between editing and publishing, and allows the `EditorWithToolbar` widget to be embedded in a webpage if no publish functionality is needed.
",toolness,124687,2012-08-20T14:19:38Z,CONTRIBUTOR,True,107,51,7,World's friendliest HTML editor.,JavaScript,2bed4783c13be597ee77b14374f4f2db8160f02a,"Renamed TwoPanedEditor to EditorPanes, EditorWithToolbar to Editor."
107,https://api.github.com/repos/mozilla/friendlycode/pulls/127,127,Backbonify preferences,"This refactoring/enhancement uses [Backbone.Model](http://documentcloud.github.com/backbone/#Model) to store preferences. The model's `sync` method uses [lscache](https://github.com/pamelafox/lscache) for local storage.

The text-size dropdown has been changed to use this new mechanism for saving (it previously used lscache directly).

The ""show hints"" checkbox now uses this mechanism to persistently store its state (previously there was no state-saving across page loads, and the checkbox would always be checked on page load).

Among other things, this also makes our architecture more decoupled and MVC-like.
",toolness,124687,2012-08-20T14:17:31Z,CONTRIBUTOR,True,125,57,7,World's friendliest HTML editor.,JavaScript,2d9d016bb073ca598fa2fc9c4cefdf52a8787322,"Added Preferences object at fc/prefs.js. An instance of Backbone.Model.

Nothing uses this yet, but I'd like the text-size and show-hints
prefs to use this."
108,https://api.github.com/repos/mozilla/friendlycode/pulls/127,127,Backbonify preferences,"This refactoring/enhancement uses [Backbone.Model](http://documentcloud.github.com/backbone/#Model) to store preferences. The model's `sync` method uses [lscache](https://github.com/pamelafox/lscache) for local storage.

The text-size dropdown has been changed to use this new mechanism for saving (it previously used lscache directly).

The ""show hints"" checkbox now uses this mechanism to persistently store its state (previously there was no state-saving across page loads, and the checkbox would always be checked on page load).

Among other things, this also makes our architecture more decoupled and MVC-like.
",toolness,124687,2012-08-20T14:17:31Z,CONTRIBUTOR,True,125,57,7,World's friendliest HTML editor.,JavaScript,11b48a41cc639cb1892febdd973a74ae49487667,fc/ui/text.js now uses Preferences and is more MVC-like.
109,https://api.github.com/repos/mozilla/friendlycode/pulls/127,127,Backbonify preferences,"This refactoring/enhancement uses [Backbone.Model](http://documentcloud.github.com/backbone/#Model) to store preferences. The model's `sync` method uses [lscache](https://github.com/pamelafox/lscache) for local storage.

The text-size dropdown has been changed to use this new mechanism for saving (it previously used lscache directly).

The ""show hints"" checkbox now uses this mechanism to persistently store its state (previously there was no state-saving across page loads, and the checkbox would always be checked on page load).

Among other things, this also makes our architecture more decoupled and MVC-like.
",toolness,124687,2012-08-20T14:17:31Z,CONTRIBUTOR,True,125,57,7,World's friendliest HTML editor.,JavaScript,960cdc6ca8309feaeeacaa940cb94a3ab630ed55,"The ""show hints"" checkbox now uses Preferences to store its state."
110,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,617ffd0445d7819d3a8a9103c5fc74bf0f4ce70a,rename help/error templates to distinguish them from dialog templates.
111,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,64233bd30cec9cca6563cba7f18aeb628df05415,"Move error dialog into a template.

The main goal here is to modularize the HTML of the app, rather than
really templatize it, so right now the integration of the template
in main.js is a bit kludgy."
112,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,3b5f40d0d1309d3bdca5f90afcc83effd7e2a085,split out confirm dialog HTML into a separate template.
113,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,19525a8f21be72ccddef01bf85c478b124ea959a,Fixed tests broken by 64233bd30cec9cca6563cba7f18aeb628df05415.
114,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,dd6d2625006fd9206bbf3d750d8fd3dbaa4ecb0b,removed obvious comments
115,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,e83578a4d65e2badd23e76370bdd78d6a25ca5c2,split publish dialog HTML into its own template.
116,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,c824585c5a3ae7f994b6b18451b1953aa63360b1,replaced #publish-pulldown span w/ CSS
117,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,da195b9918e2ae5848c1ef8a6f0bee35baa8b89b,Factored out navbar HTML into a template.
118,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,be8d2b5c48b88e53462724b859a216796e017a14,"converted #source to .source-code, #preview-holder to .preview-holder"
119,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,777e08e607b52fd61823efcabbff336e20163885,"all empty divs in #editor are now dynamically created, reducing HTML cruftiness."
120,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,7fb6caa2fb112b87887d07d575f6f9434a50a460,replaced 'section' css rule with '#editor' css rule.
121,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,bce77aa0efd6188188f328ec3ba2863fd6b3a0c2,"factored all two-paned editor code out of main.js and into a new file/class, fc/ui/two-paned-editor.js."
122,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,c033f0e309b407bb72c3fe186453336e4cb5e93f,"factored out toolbar-related code into a new EditorToolbar class, further de-bulking main.js."
123,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,fddf5e21598e962548e5ccbc9646fa2e3bde3923,removed extraneous reference to options.publishUI.
124,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,05aa70bdafe7cc952dd43d1d29c99c03fee8f556,moved codemirror/html require from main.js to two-paned-editor.js.
125,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,bfc8bcda95ef51b4556d135b1744336773626bd6,moved modal dialog template require() and creation from main.js to modals.js.
126,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,ce04c16cb0a4cae4f2174fcad7d09b039da134d5,"split all publishing-related functionality out of modals.js and into a new file, js/fc/ui/publish.js."
127,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,bb46833ef930c70a2b904f4e9ed9c61622d9268f,"A single div now contains both the toolbar and editor.

This is a major step towards stylistically decoupling friendlycode
from being Thimble-specific; a different page can now include its
own header (or none at all) and still have the friendlycode editor,
toolbar, and modals in it.

This refactoring is incomplete in a few ways, though:

* Thimble-specific CSS needs to be moved out of editor.css and
  into its own separate file.
* The publishing modals are still hard-coded to appear next to the
  publish button's expected location in Thimble, meaning that they
  assume a header with a height of about 79px.
* The 'Loading...' message had to be moved into index.html
  so it actually appears while resources are loading, not once
  they're done loading. This is very messy right now and should be
  fixed in an upcoming commit.
* It's likely that this refactoring changes the positioning of
  some toolbar elements by a pixel or two. I checked the appearance
  on all browsers and things seem to look fine, though the positioning
  of the Publish button seems visibly off IE9 and Opera--not sure
  if this is a regression or if things have always been this way."
128,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,647246bfeaf08e8859346e978a41a8ea5563c5a0,"Fixed regressions in the loading throbber.

It also now uses CSS animations instead of CSS transitions to fade-in
the loading message, which relieves us from having to dynamically add
classes during loading to trigger transitions."
129,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,a84ed3b9874bd17c12d7d1e417441f9b580334bf,"index.html and bare.html are now separate pages that embed friendlycode.

Specifically, index.html assumes embedding within the Thimble website
and features Thimble-specific branding, while bare.html is a trivial
embedding of friendlycode.

The many stylesheets used by both pages are now consolidated into
friendlycode.css, which (for now) just @imports all the stylesheets.
A production build system can compile these into a single file for
better performance."
130,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,7f76a8d8541b3dd6a77943219610ed4deb4fabd4,fixed build-require.js to work w/ thimble-main.js instead of main.js.
131,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,109e43cff33299e1c35c73acbd37731896fd93d0,allow test publishes to be made from index.html again.
132,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,1d75a1674e8780e01448d9ac8b343813f6dfcf24,"The confirm/publish dialogs now always appear under the publish button.

In order to do this, I changed the animation from a slide to a fade
because the addition of margins to the .thimble-modal-menu selector
made the slide appear wonky.

We can fix this later; Jess also seemed to want to change the publish UI
a lot, so I didn't want to spend too much time figuring out how to
retain the slide at its original quality. Also, a fade transition still
looks okay."
133,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,97dc84b536161e08e843ad01556c9776295c1d33,The template requirejs plugin now properly escapes templates on build.
134,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,2001e1f37afa3de741214ee3cf6a962b73ab66fd,"Build friendlycode-built.js instead of thimble-main-built.js.

Also added bare-optimized.html, an optimized version of bare.html,
and inlined thimble-main.js into index.html."
135,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,5d5936dd100c945edc4df2c17f3641eb101eba19,"Converted default-content.html to a template to expedite loading.

It's tiny enough that it won't add a big overhead to the optimized blob,
and it makes friendlycode easier to embed as a widget.

I had to change our template requirejs plugin to not strip newlines; not
sure why we were doing that..."
136,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,950ced39292a4b93f323b461d425699c0939f9b6,temporary symlink workaround to maintain backwards-compatibility w/ thimble django app
137,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,a57293e42c1188de52b70ce2a4398bb4f456566c,CodeMirror gutter now extends down to the bottom of the page again.
138,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,5b9b5bc456b40cbc974f6ebb348eebc852a7b979,"Test suite no longer needs a base href set to repository root.

Also, any client on the same origin as the repository can now
load the friendlycode modules (and embed friendlycode) from any
directory; they don't have to be located in the root directory
of the repository anymore."
139,https://api.github.com/repos/mozilla/friendlycode/pulls/126,126,Converted inline dialog HTML into templates,"The main goal for now is just to modularize the HTML of the app, rather than truly templatize it, so right now the integration of the templates in main.js is a bit kludgy. We can further evolve the publish/error/confirm dialogs into ""real"" templates in future commits.

Also did a tiny bit of CSS refactoring.
",toolness,124687,2012-08-13T21:36:54Z,CONTRIBUTOR,True,1006,2474,78,World's friendliest HTML editor.,JavaScript,bd3e3f19c3c1819bd19f1e36b3142c8c93237bbb,Use a custom iframe w/ a friendlycode embedding to hasten test runs.
140,https://api.github.com/repos/mozilla/friendlycode/pulls/125,125,"Redo ""set up Ubuntu Mono as code editor font""","Somehow the Ubuntu Mono font distributed with the editor didn't look as sharp as it does on the Ubuntu website. (Maybe only when the user doesn't have it on his system, which is my case? I haven't had the opportunity to test it.)

![The original font looks better than the embedded one.](http://i.imgur.com/U9YX8.png)

I partially reverted the commit that introduced the font (I removed the files) to instead make use of Google's Web Fonts service which distributes that font.

This change has the two following advantages:
- It fixes the problem shown above.
- It removes load from the server by using Google's one.
",joanrieu,761962,2012-08-13T19:22:18Z,NONE,False,1,24,8,World's friendliest HTML editor.,JavaScript,665c34ef663513e50b7322c47c5efeb23bfe02ca,"Redo ""set up Ubuntu Mono as code editor font""

This partially reverts commit 10c02db8ef907da2b2762dc436a0c0f83ef8b251.
Switching from embedded fonts to Google Web Fonts."
141,https://api.github.com/repos/mozilla/friendlycode/pulls/124,124,updated slowparse commit pointer,,Pomax,177243,2012-08-06T20:49:26Z,CONTRIBUTOR,True,1,1,1,World's friendliest HTML editor.,JavaScript,db0b8cb88934978ffc276b4b677ab945936f1cab,updated slowparse pointer
142,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,1a5a079cdc9bce13c16aff8e25d7ab0f01d1e293,first stab at flickr image selecting
143,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,4104fcec1d93169d75241a57827f99c70a133c1d,"added FF broken image icon, because we kind of need it"
144,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,032350e7643fa1d1a9f7766815a8d0e9f4adece8,intermediate commit
145,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,34b0aa6d73f86b0b4f42db36eed8b108c12e29f4,close to done
146,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,bd61a5bc8899f56eb64fc09d0837ad6dfafd185e,fixed up some more
147,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,746c26dc79becf380f8c59ecd7cae8b6aa0f4dab,typo fix
148,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,a7d8fb5351b7bff5266b0eecd16e7784d7c9f60e,updated slowparse version
149,https://api.github.com/repos/mozilla/friendlycode/pulls/123,123,Image selector,"update for the image selecting component
",Pomax,177243,2012-08-01T17:17:57Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,d8a2d6d46d6fc627327f60c6946c6a6c81d72fb9,made flickrfindr a submodule instead
150,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,c3bf3b7e32a06b5da92087bfb518c82b1d8eff2b,initial commit
151,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,f74d683bb53d585986c47031065fcc5b6a9fe40b,getting some hints when you want them. not in your face
152,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,ddc51ac1fb5130f6f1fc794f381e14ad7bee306a,"moved styling into css, made the clickables round instead of square"
153,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,49cc241a8c76540a7f5e15c75a6cff5861f42e74,accidental submodule from another branch. removed
154,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,bfaea1e00dc466edbf2b4d11b7e2cb0dcbb7de31,replaced text mark with image for better positioning
155,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,0e2961b769a229000ce2c7f6f396f112e5b59e6b,minor tweak to top alignment
156,https://api.github.com/repos/mozilla/friendlycode/pulls/121,121,Line hinting,"end-of-line markers that will toggle hint/error visibility
",Pomax,177243,2012-07-24T14:28:14Z,CONTRIBUTOR,True,61,14,7,World's friendliest HTML editor.,JavaScript,5d02e80340fe08c3a01daaff6c8ac4a5d42da0d0,fixes as per pull request
157,https://api.github.com/repos/mozilla/friendlycode/pulls/119,119,set up Ubuntu Mono as code editor font,"actually looks pretty good. Unlike normal monospace fonts.
",Pomax,177243,2012-07-23T18:06:12Z,CONTRIBUTOR,True,29,5,9,World's friendliest HTML editor.,JavaScript,10c02db8ef907da2b2762dc436a0c0f83ef8b251,set up Ubuntu Mono as code editor font
158,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,1a5a079cdc9bce13c16aff8e25d7ab0f01d1e293,first stab at flickr image selecting
159,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,4104fcec1d93169d75241a57827f99c70a133c1d,"added FF broken image icon, because we kind of need it"
160,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,032350e7643fa1d1a9f7766815a8d0e9f4adece8,intermediate commit
161,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,34b0aa6d73f86b0b4f42db36eed8b108c12e29f4,close to done
162,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,bd61a5bc8899f56eb64fc09d0837ad6dfafd185e,fixed up some more
163,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,746c26dc79becf380f8c59ecd7cae8b6aa0f4dab,typo fix
164,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,a7d8fb5351b7bff5266b0eecd16e7784d7c9f60e,updated slowparse version
165,https://api.github.com/repos/mozilla/friendlycode/pulls/118,118,Created Flickr image selector,"This adds an image picker to friendlycode that uses the Flickr API to find CC-BY-\* images for use on pages by simply clicking on an image in the preview page. In order to make this work in Firefox, too, an extra bit of stylesheet is injected into the preview so that broken image links show a broken image icon rather than an alt text (or nothing at all, if there is no alt text).

Note that the code in the preview-mapper is marked experimental. I'm not sure if this is the best place to put it, but I need some toolnessy input on that =)
",Pomax,177243,2012-07-23T15:46:37Z,CONTRIBUTOR,False,207,9,11,World's friendliest HTML editor.,JavaScript,d8a2d6d46d6fc627327f60c6946c6a6c81d72fb9,made flickrfindr a submodule instead
166,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,ea8a631602b7c17dd21ef867a5316dba11ba10bc,update requireJS v2.0.2
167,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,ee5e387d9d6df0c8647318680e310e3eedc105e6,"make jquery, underscore and backbone require dependencies"
168,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,06ddb074898ffd1c5f0e605b77f83a89f42f2e9a,update require config
169,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,0066dcf44062d7abcb6b1fa8449833eb2769af31,make template plugin optimizable
170,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,1747ab0e66dfc874f1c50f51eae9dad5af925155,fix duplicate appReady
171,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,a4967aa12411af509a054087a03af515cc96255a,add main require for optimization
172,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,7cdfe4c884ee7096b4aafe0e41ac4dfe3d6446f6,add build script
173,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,031b7235b8736c38b6f491a298789c578566d399,add main-build comment out
174,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,10ef98ef0f434e9131cffdaad9d96f62cd3c37b6,added jquery as dependency for test-app.js
175,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,77888dd327d0fa4230baefc860b2efb363e13fff,"Consolidated duplicate requirejs config into js/require-config.js.

This file can be loaded both as a browser script *BEFORE* requirejs, and
as a module from node."
176,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,21f7140380b85ce9ef078050c25579b30a6b1ee9,Added .gitignore.
177,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,0262670cb98c48821d4aa8a3ff60f21498077d35,"Callback to requirejs.optimize() is list of output modules, not err boolean."
178,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,a29b0d8195ea54cf0f375f2ca937a80cc5a29626,"Use _.noConflict() and jQuery.noConflict() in their shims.

This will help ensure that the global namespace is clean and
that no modules accidentally get away with using a global instead
of an injected dependency (which is particularly dangerous now,
since it introduces race conditions)."
179,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,f0cf80072ee9676bf8ad28ec8ecb7367f5f20544,"Merge pull request #1 from toolness/smagch-optimize

Fixed some issues w/ requirejs integration"
180,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,49a0d34278af58cadbdadb5c56fea373237c1be1,add underscore dependencies for optimization
181,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,9d1d73e755c19a875fef3f6d63d9d349f5e4a4bf,"load appReady as plugin.
As long as I see official documents, it is standard to use ""req"" inside load method
rather than direct dependencies.
http://requirejs.org/docs/plugins.html#apiload"
182,https://api.github.com/repos/mozilla/friendlycode/pulls/114,114,RequireJS optimization,"I think libraries like `jquery`, `underscore` and  `backbone` would be maintainable with `require dependencies` though it makes config relatively large.

I have no idea whether thimble do conditional loading or not.
If it don't do dynamic conditional loading, require.js would be replaced with [almond.js](https://github.com/jrburke/almond).

This pull request have some points which should be improve: duplicate config in `index.html`, `test/index.html`, `build-require.js`... :(
I'm making config a JSON file and inserting it during server-side templating in my personal backbone project.
I haven't looked into webpagemaker, so you may know better solutions.

toolness/friendlycode#112
",smagch,898660,2012-06-29T09:10:03Z,CONTRIBUTOR,True,280,119,24,World's friendliest HTML editor.,JavaScript,0ba6c7cde14d773872276266d003aae565240ee6,add jquery-slowparse dependency instead of jquery since there is $.fn.fillError call
183,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,362e1e614d8742edb13cd80265d89803b3e9850a,add require v2.0.2
184,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,8450110cdc87016864bc408e6c4feffe2543ed85,avoid nested require
185,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,4351a5b76092d0322b115feea7f7751f57501eb1,require module's dependencies inside module rather than load with main dependencies
186,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,f2d8fbe6b8da587efeb1b500a028bda37a980349,split require plugin appReady from main
187,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,002c0f7840c333f5a696adb4871f2794572eff41,remove unnecessary paths cofig
188,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,49dabcba45556d864906893ecb6ad8cbcdefcc31,update text.js
189,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,f8b9cb2448acaba9c08abaa19e2e4f2014d0e273,improve for optimize
190,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,9b7e26e08820a549c28e291566c9b301a4d4b51b,improve for optimize
191,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,9089a0b72e6a36b27ead206c6f1315c2e45677e6,use require paths for simplicity
192,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,5b0b2d913c65ff403f280d777eb0485086908fe1,add requirejs optimization  script
193,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,c51da59e1dc79362894517b5aecab5e7cac561a1,add uglify options
194,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,ce4180e00a8d8dbf6053d3013be1ba1afc8dd7d9,use optimized main
195,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,81a5e7f5dd1b3b462cf613a3bc345ef673bc79ae,fix wrong line break regexp
196,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,8d320211a8e1e050f47da0f3786fbfab7bd8d334,update main-built
197,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,238dfd60a4359dba988a25d5e5f16b33b96168cd,unlink slowparse and use requirejs config
198,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,03e3d6e1f381c406cab436966bd62652546a2944,fix givenOptions.parse option
199,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,cc3b1c32e2acd655720dfef90c39ab2084b9ddad,add debugging option comment
200,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,4c314870aa7c637ed94df975509a566a6023b072,use unoptimized main by default
201,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,921f783374dd3d1a716553f1c06ecd0ec581df4c,define main module and require it for optimization
202,https://api.github.com/repos/mozilla/friendlycode/pulls/112,112,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is
- make vendor libs require dependencies; jquery, underscore, backbone.
- use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
- make less dependencies in main.js; move to module's dependencies if possible.
- extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:32:50Z,CONTRIBUTOR,False,806,124,19,World's friendliest HTML editor.,JavaScript,d1c47021a67278a12a0226a3300e59efdef279fe,update require config
203,https://api.github.com/repos/mozilla/friendlycode/pulls/111,111,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is that
1. make vendor libs require dependencies; `jquery`, `underscore`, `backbone`.
2. use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
3. make less dependencies in `main.js`; move to module's dependencies if possible.
4. extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:06:00Z,CONTRIBUTOR,False,336,240,9,World's friendliest HTML editor.,JavaScript,362e1e614d8742edb13cd80265d89803b3e9850a,add require v2.0.2
204,https://api.github.com/repos/mozilla/friendlycode/pulls/111,111,Structured require dependency,"Related to require build optimization issue.
https://github.com/mozilla/webpagemaker/issues/430

Nested require call going to make difficult to optimize. What I've done is that
1. make vendor libs require dependencies; `jquery`, `underscore`, `backbone`.
2. use require.js version 2.x; since version 2.x can handle vendor libs without plugin.
3. make less dependencies in `main.js`; move to module's dependencies if possible.
4. extract appReady from main to own file.

I'm going to write r.js build script from now.

NOTE: I forked friendlycode repo and don't use webpagemaker, because I've got a trouble with my network connection: I can't use git protocol! Terrible! I'm asking to my landlord if I can change port settings... :(
",smagch,898660,2012-06-24T09:06:00Z,CONTRIBUTOR,False,336,240,9,World's friendliest HTML editor.,JavaScript,8450110cdc87016864bc408e6c4feffe2543ed85,avoid nested require
205,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,d4b565e83564d8baff55e189bbbbbe5ceb71b059,"Moved ""show hints"" checkbox logic from main.js to context-sensitive-help.js.

This also results in less references to global DOM elements."
206,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,210a00d9dd591948396cfd42dcaa2312881784f5,"Changed default publishing endpoint to webpagemaker-dev.allizom.org.

thimbletest.org seems to be down and wpm-dev is on much better hardware now."
207,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,7871870d7cc453677d829eb630d4fe8134f4bb0a,Moved conditional facebook code	from modals.js to social-media.js.
208,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,17d777c22e3cc3f7832081055041a9c0253de32e,"Moved social media script tag removal code from modals.js to social-media.js.

Technically this isn't a pure refactoring, but the end result is the same."
209,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,3837a294432413beea5ab94fd7456e972582994e,Decoupled social-media.js from jQuery and removed superfluous dependencies.
210,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,824abe8244d8e548569b2ccb724483bb26f37dd2,removed superfluous dlg.hide().
211,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,869c25021d8668833dac7ddb22744c76b0b4dcba,consolidated error display code in publish.js.
212,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,f74d23c14da6a3d35993d666d269940742a98b9d,"Modals now instantiates SocialMedia itself.

Also, SocialMedia no longer has a getURL() argument; the URL
is simply passed-in to hotLoad(), which makes an existing bug more
apparent (added a TODO for this)."
213,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,542dc42a0675f393611d719f519100302dc72777,"Made PublishUI an eventEmitter.

This allows us to"
214,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,75ddce759d3782de57dcbbdafe994f97522d03e6,Removed a comment made irrelevant by my last commit.
215,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,43e897ef77f908495b1d7e86322e9d584e14f147,"Got rid of publishUI and moved its code into modals.js and main.js.

There wasn't a good conceptual or code separation between publishUI
and main/modals so I'm just killing it for now. Things are a bit more
confusing now but I think this will make it easier to refactor things
to be simpler in the long-term."
216,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,6da8305a25af3f58cad7bb253bdeba430a83451d,typo fix from my last commit
217,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,9e1302010389fb08099476ff3b23a2715bbbc429,All DOM dependencies are now passed into the Modals constructor.
218,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,56d8fe26d6e98b0f1908bd8df699036da02627fe,"modularized modals.js a bit, added data-close-modal attribute to HTML."
219,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,75c8e90416a2e96642a4348f0ed45f89a7bc57a4,simplified accordion interaction logic a bit.
220,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,8ece96cbcde16df9c0b3f04b9f8b36b4ad98b25d,"added a few more comments to modals.js, rearranged some code."
221,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,fa8194dd086dd02db876248080c3a642b78ab84c,"Modularize social sharing code in modals.js and fix a bug in it.

The bug was that if the user clicked the sharing accordion tab
while the URL was still being published, the sharing widgets would
load but the user would be sharing the wrong URL. Now we don't hotload
the sharing UI until we have a URL to share."
222,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,0e10b77ec1c267c5f40fec9bc92d75d713e065a4,Show throbber in publish dialog's accordion content areas while publishing.
223,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,4723a7e51bc5b67871939e827ce007e7d713282a,Better/more readable logic to keep track of publishing errors.
224,https://api.github.com/repos/mozilla/friendlycode/pulls/110,110,"Ui refactorings, minor bugfixes and polish","Here are a bunch of UI refactorings, and a few minor bugfixes and UI polish improvements.
",toolness,124687,2012-06-22T16:49:09Z,CONTRIBUTOR,True,203,190,7,World's friendliest HTML editor.,JavaScript,9198eee0bc50dca8d283ea29a7a1322e27a59dfe,changed == to ===.
225,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,db0432629dae69322e9c776545e43a45bf087008,hotfix for social media introducing unsecure elements in https setting
226,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,396a372e0436da390e29dfccb6a6b489d35547bf,"Merge pull request #105 from Pomax/webpagemaker-issue-419-hotfix

hotfix for social media introducing unsecure elements in https setting"
227,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,4deb6f43cc2ab02008e1e68cc7427512ee9a11ad,"adding basic message passing, but need to remove the final confirmation pop up"
228,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,ef2f75ec44c0923a269fb37b90f3d7d2b5407a2f,"Fixed #100, removing unneeded code."
229,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,a2db2649bba9908002795c21c6e0af4d4ed25ab3,added app test to ensure publishing works.
230,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,afbcc6a95718c79cbf5ccc06504deb13203e302a,added window.location test to publishing test.
231,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,357b581f3acf44ea519ec4f62a53a7e5e4ed56a2,made social media links relative to whatever protocol is being used
232,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,8376194d0d76fb6328a40c7b4933e7d857dc8fc2,Added externalreporter conditional script include to test/index.html for automated CI.
233,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,a4396845c002e4b187d5a5e25a26348538b2e89c,Yet another attempt to properly set base href for test suite in IE9.
234,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,2bb39f69e7050b200f922cad097765219f4b8efa,Updated slowparse.
235,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,8be91db110e173d70a3f5966ae8cda71f214c75b,"Allow Typekit to be disabled from querystring for testing purposes.

Right now Typekit appears to take a really long time to fail if
it's loaded on either an unsupported browser (like Opera, apparently)
or from a domain that isn't authorized. While we should generally fix
this to be more responsive for users on unsupported browsers, for now
it's making some unit/integration tests take a *lot* longer to run
than they ought to, so I'm committing this as a stopgap measure.

This is also probably related to #103, ""Load Typekit asynchronously""."
236,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,86107428f0aca251a271bb60045a7a093acae994,errors are now a modal dialog
237,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,f2f3d9d451840f02318137dbcc4eb2851591412f,added showing the dialog...
238,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,5e0a6a8911ddb513ceff2838c5c51dbff03cf5e5,added error message back in
239,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,cd770e227141328b036a76f50975ec60539c6974,added publish suppression on error in main.js
240,https://api.github.com/repos/mozilla/friendlycode/pulls/108,108,429 throttle error dialog,"based on top of @cmcavoy's 429-throttle pull request, replaces the alert with an actual modal dialog
",Pomax,177243,2012-06-18T17:22:48Z,CONTRIBUTOR,True,15,10,3,World's friendliest HTML editor.,JavaScript,94a6925e0a308448d227aed486a23b1d462a42d2,forgot .length...
241,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,db0432629dae69322e9c776545e43a45bf087008,hotfix for social media introducing unsecure elements in https setting
242,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,396a372e0436da390e29dfccb6a6b489d35547bf,"Merge pull request #105 from Pomax/webpagemaker-issue-419-hotfix

hotfix for social media introducing unsecure elements in https setting"
243,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,4deb6f43cc2ab02008e1e68cc7427512ee9a11ad,"adding basic message passing, but need to remove the final confirmation pop up"
244,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,77f0ec2740b62a61f39421ebbdfccc3215055077,Updated slowparse.
245,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,a2c6caf7a0d9f5b03a28b5c5e1f05d08cf514b61,"Allow Typekit to be disabled from querystring for testing purposes.

Right now Typekit appears to take a really long time to fail if
it's loaded on either an unsupported browser (like Opera, apparently)
or from a domain that isn't authorized. While we should generally fix
this to be more responsive for users on unsupported browsers, for now
it's making some unit/integration tests take a *lot* longer to run
than they ought to, so I'm committing this as a stopgap measure.

This is also probably related to #103, ""Load Typekit asynchronously""."
246,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,f9ea405f09c7ab209f14d00f56d3670da351676d,errors are now a modal dialog
247,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,ef2f75ec44c0923a269fb37b90f3d7d2b5407a2f,"Fixed #100, removing unneeded code."
248,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,a2db2649bba9908002795c21c6e0af4d4ed25ab3,added app test to ensure publishing works.
249,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,afbcc6a95718c79cbf5ccc06504deb13203e302a,added window.location test to publishing test.
250,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,357b581f3acf44ea519ec4f62a53a7e5e4ed56a2,made social media links relative to whatever protocol is being used
251,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,8376194d0d76fb6328a40c7b4933e7d857dc8fc2,Added externalreporter conditional script include to test/index.html for automated CI.
252,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,a4396845c002e4b187d5a5e25a26348538b2e89c,Yet another attempt to properly set base href for test suite in IE9.
253,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,2bb39f69e7050b200f922cad097765219f4b8efa,Updated slowparse.
254,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,8be91db110e173d70a3f5966ae8cda71f214c75b,"Allow Typekit to be disabled from querystring for testing purposes.

Right now Typekit appears to take a really long time to fail if
it's loaded on either an unsupported browser (like Opera, apparently)
or from a domain that isn't authorized. While we should generally fix
this to be more responsive for users on unsupported browsers, for now
it's making some unit/integration tests take a *lot* longer to run
than they ought to, so I'm committing this as a stopgap measure.

This is also probably related to #103, ""Load Typekit asynchronously""."
255,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,86107428f0aca251a271bb60045a7a093acae994,errors are now a modal dialog
256,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,f2f3d9d451840f02318137dbcc4eb2851591412f,added showing the dialog...
257,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,5e0a6a8911ddb513ceff2838c5c51dbff03cf5e5,added error message back in
258,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,cd770e227141328b036a76f50975ec60539c6974,added publish suppression on error in main.js
259,https://api.github.com/repos/mozilla/friendlycode/pulls/107,107,429 throttle,"base changes for the throttle messaging. needs front end tlc.
",cmcavoy,64711,2012-06-18T13:41:18Z,CONTRIBUTOR,True,57,16,7,World's friendliest HTML editor.,JavaScript,94a6925e0a308448d227aed486a23b1d462a42d2,forgot .length...
260,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,00ed11f36b027d65303473dfd517c6f53b71e27b,"Decouple TextUI from relocator, errorHelp, and cursorHelp.

The call to codeMirror.reparse() will trigger a 'reparse' event that
causes the errorHelp and cursorHelp to disappear, so TextUI doesn't
need to do this explicitly itself."
261,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,ecf2d32d9d79b69839d74c4a3b385e7077f4f3a2,"Use lscache instead of raw localStorage for storing text size pref.

As mentioned in a TODO, this means less repeated error handling code in
TextUI itself."
262,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,e500ef0dbf339683cae241ca0c74d9d8f34cce7c,"All TextUI DOM dependencies are now passed in via constructor.

Also renamed some variables to make the code easier to read."
263,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,fa5320ccc8a721085dbc8567e4024d94d07dcf04,Specify TextUI default size in DOM rather than hard-coding it.
264,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,2e6ab5f73a5cab2338f011cd7876c67a193ca3b8,use single click handler for text size options.
265,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,2258fd312511e23efc86f3f108b925ae36b1ce70,"If text widget throws an exception on first-run, test suite will now catch it.

The initialization code is now more ""crash early, crash often"" in a way
that will be caught by the testing suite if anything is amiss. For instance,
if 'data-default-size' isn't on one of the text sizes to specify a
default text size for the app, the test suite will now fail."
266,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,7e4f8d9a37c39700a5c7765387b16065df4bfaf6,"Moved CSS out of js/fc/ui/text.js and into CSS files.

The TextUI code is now much smaller, and it's also easier to understand what the
CSS for the various text size settings are.

Note that this is just a pure refactoring--I've tried to create the static
CSS in a way that's as faithful to the dynamically-generated CSS as possible.
Glancing at the whole CSS file, it seems that some rules are now redundant,
but we can save those fixes for a later commit."
267,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,c31e3b5adc0c423a0f82cf1b1d425b7e81964aba,Merge branch 'gh-pages' into text-ui-refactorings
268,https://api.github.com/repos/mozilla/friendlycode/pulls/106,106,TextUI refactorings,"There were a number of things I thought could use a bit of refactoring in `js/fc/ui/text.js`, so I made a bunch of them as small commits on this branch.
",toolness,124687,2012-06-14T23:55:43Z,CONTRIBUTOR,True,82,94,6,World's friendliest HTML editor.,JavaScript,2035af0cccdb1305233a7cd356bcf596f74829b9,cache  in menuItems variable.
269,https://api.github.com/repos/mozilla/friendlycode/pulls/105,105,hotfix for social media introducing unsecure elements in https setting,,Pomax,177243,2012-06-14T16:42:36Z,CONTRIBUTOR,True,4,7,1,World's friendliest HTML editor.,JavaScript,db0432629dae69322e9c776545e43a45bf087008,hotfix for social media introducing unsecure elements in https setting
270,https://api.github.com/repos/mozilla/friendlycode/pulls/104,104,made social media links relative to whatever protocol is being used,,Pomax,177243,2012-06-14T16:11:18Z,CONTRIBUTOR,True,3,6,1,World's friendliest HTML editor.,JavaScript,23febc42562870b154682b9b90674dd0cb646519,made social media links relative to whatever protocol is being used
271,https://api.github.com/repos/mozilla/friendlycode/pulls/102,102,removed <link> to license css in the index file,,Pomax,177243,2012-06-13T20:45:49Z,CONTRIBUTOR,True,0,1,1,World's friendliest HTML editor.,JavaScript,7ed7b8cd5ae727d6ddb9aa7ebd9499469a67340a,removed license css inclusion. It had no reason to be there
272,https://api.github.com/repos/mozilla/friendlycode/pulls/101,101,"Fixed #100, removing unneeded code.","This should resolve #100.
",toolness,124687,2012-06-13T20:15:37Z,CONTRIBUTOR,True,0,11,1,World's friendliest HTML editor.,JavaScript,f66e8cf0f73a18b965699327e406ee18764e5c86,"Fixed #100, removing unneeded code."
273,https://api.github.com/repos/mozilla/friendlycode/pulls/99,99,updated thimble logo,"using the newly proposed logo now
",Pomax,177243,2012-06-13T17:51:29Z,CONTRIBUTOR,True,1,0,2,World's friendliest HTML editor.,JavaScript,5c793d05f56cc7a726b1de570bf036bd7ad577b9,updated Thimble logo on the editor
274,https://api.github.com/repos/mozilla/friendlycode/pulls/98,98,Loading screen,"This should resolve #97.
",toolness,124687,2012-06-13T12:58:57Z,CONTRIBUTOR,True,44,4,4,World's friendliest HTML editor.,JavaScript,81e95aee1ee51ac495a73e44c417e3302df04b99,"Initial attempt at loading ""screen"".

We're intentionally not displaying any text that might result in a FOUC
while loading. We're also showing a throbber I got from ajaxload.info
in the nav bar."
275,https://api.github.com/repos/mozilla/friendlycode/pulls/98,98,Loading screen,"This should resolve #97.
",toolness,124687,2012-06-13T12:58:57Z,CONTRIBUTOR,True,44,4,4,World's friendliest HTML editor.,JavaScript,609ac1e641400eb8210608260b97b9f42c2ed0d7,"Slowly fade-in loading message.

From the CSS comment:

  /* Slowly fade-in the loading message, so that users on really slow
   * connections will see it, but users on fast connections won't
   * see the distracting flicker of a loading message that only shows
   * itself for a split-second. */"
276,https://api.github.com/repos/mozilla/friendlycode/pulls/96,96,New default content for editor.,"[Issue #95, mozilla/webpagemaker#309]

If the learning team wants simpler content for the editor, we'll give
'em simpler content.

@pomax, check it out
",brianloveswords,166258,2012-06-12T21:13:02Z,CONTRIBUTOR,True,6,36,1,World's friendliest HTML editor.,JavaScript,825c10b97ab35098862a2a138a036b43896ce633,"New default content for editor.

[Issue #95, mozilla/webpagemaker#309]

If the learning team wants simpler content for the editor, we'll give
'em simpler content."
277,https://api.github.com/repos/mozilla/friendlycode/pulls/94,94,Temporary workaround for undo breakage.,"This is a workaround for #93.
",toolness,124687,2012-06-12T20:20:26Z,CONTRIBUTOR,True,55,0,5,World's friendliest HTML editor.,JavaScript,c0c8cce5662dc1df490b00d31f1b5394d70e7820,Temporary workaround for undo breakage.
278,https://api.github.com/repos/mozilla/friendlycode/pulls/94,94,Temporary workaround for undo breakage.,"This is a workaround for #93.
",toolness,124687,2012-06-12T20:20:26Z,CONTRIBUTOR,True,55,0,5,World's friendliest HTML editor.,JavaScript,fcb39bac0c5b55ba66b0aac6ceb1521e9527887e,added test for codemirror 577 fix/workaround
279,https://api.github.com/repos/mozilla/friendlycode/pulls/92,92,"added a reparse after changing text size, to ensure errors reappear",,Pomax,177243,2012-06-12T20:15:10Z,CONTRIBUTOR,True,2,0,1,World's friendliest HTML editor.,JavaScript,6adee128bec179c4401513894f5134bed403ce83,"added a reparse after changing text size, to ensure errors reappear"
280,https://api.github.com/repos/mozilla/friendlycode/pulls/91,91,fixed typo,"loook -> look, remove spurious spaces
",Pomax,177243,2012-06-12T16:40:12Z,CONTRIBUTOR,True,2,2,1,World's friendliest HTML editor.,JavaScript,7784ec2ed79091308cf669a8b211e462567469ab,fixed typo
281,https://api.github.com/repos/mozilla/friendlycode/pulls/90,90,cleaned up css and removed empty <footer> from index,,Pomax,177243,2012-06-12T15:27:51Z,CONTRIBUTOR,True,7,100,2,World's friendliest HTML editor.,JavaScript,b216c50216a08216eca123d561b453503171ded4,cleaned up css and removed empty <footer> from index
282,https://api.github.com/repos/mozilla/friendlycode/pulls/88,88,added hint/error removal when esc is pressed,,Pomax,177243,2012-06-11T17:11:49Z,CONTRIBUTOR,True,14,0,2,World's friendliest HTML editor.,JavaScript,0293a059f8dd70af8b38da9eb7da223483451bd8,added hint/error removal when esc is pressed
283,https://api.github.com/repos/mozilla/friendlycode/pulls/85,85,added OpenSymbol's symbol set font for the 'show hints' checkmark,,Pomax,177243,2012-06-08T22:10:11Z,CONTRIBUTOR,True,32,2,6,World's friendliest HTML editor.,JavaScript,96132ad964bff474ef901f59a184be19dc2ab927,added OpenSymbol's symbol set font for the 'show hints' checkmark
284,https://api.github.com/repos/mozilla/friendlycode/pulls/84,84,removed share.js and ShareUI mention in main.js,,Pomax,177243,2012-06-08T18:40:21Z,CONTRIBUTOR,True,0,56,2,World's friendliest HTML editor.,JavaScript,578dc114e357b12a34c63298c29c2ff626709ee4,removed share.js and ShareUI mention in main.js
285,https://api.github.com/repos/mozilla/friendlycode/pulls/83,83,"replaces all 0<unit> with 0, and deleted no longer used .css files",,Pomax,177243,2012-06-08T17:52:36Z,CONTRIBUTOR,True,48,71,5,World's friendliest HTML editor.,JavaScript,0f9d63fde045ae2a0852699c45b124e9b164283e,"replaces all 0<unit> with 0, and deleted no longer used .css files"
286,https://api.github.com/repos/mozilla/friendlycode/pulls/82,82,made hint arrow's grey shadow actual shadow with transparency,,Pomax,177243,2012-06-08T17:12:57Z,CONTRIBUTOR,True,0,0,2,World's friendliest HTML editor.,JavaScript,3562016db066c8e58e132dab82354fcaaabf6bad,made grey shadow actual shadow with transparency
287,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,58a9c6a81a9b0396fa826b51679e5e5241b1cb66,"Replaced CodeMirror styling to be extremely conservative.

Font is now monospace, line height doesn't change, the style
is never bold or italic, gutter font is same as editor font."
288,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,182fe1423ede01707f4ebb448453463139f481de,Merge branch 'gh-pages' into cursor-position-fix
289,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,09c82b9c2a865ef409c484d9efabc60f691b9306,make error/help messages non-monospaced.
290,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,c6ac939da4f4f1d32479479073ebb60430dcee3c,Use Mensch instead of monospace and reduce font size a bit.
291,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,720fccb4ebacdb6f462ed18c7c054cae250162c2,Added Mensch font (forgotten from my last commit).
292,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,a8f946eb6e7a7aaece663c0ae46ce8c85971a6c2,"Merge branch 'gh-pages' into cursor-position-fix

Conflicts:
	css/errorhelp.css"
293,https://api.github.com/repos/mozilla/friendlycode/pulls/81,81,Make cursor position always work,"This should resolve #80.

It should be noted, though, that this fix is potentially more conservative than it needs to be:
- It abandons all italic/bold styling, which we might actually be able to get away with.
- It sets the font to ""monospace"", which is whatever the browser defaults to, usually courier new. There are many much nicer free, monospaced fonts out there that we might want to use instead.
",toolness,124687,2012-06-08T16:34:39Z,CONTRIBUTOR,False,318,65,9,World's friendliest HTML editor.,JavaScript,3e41b0840d5cf0b991a03d2d6b44907ec28030d0,"Move CSS out of fc/ui/text.js. ""normal"" now default text size.

Moving the CSS out of fc/ui/text.js also simplifies it a lot, as setting
text size is now just a matter of toggling some classes on the CodeMirror
wrapper, rather than dynamically generating a stylesheet.

This fixes #86.

Also added some code to deal with edge cases if localStorage is full."
294,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,20c19f60fb8a6dfefcbe0894d3fcbb0bb69bd7b8,"Simplified relocator by using more CodeMirror methods.

Specifically, used CodeMirror's addWidget(), setLineClass(), and
setMarker() to obviate the need for lots of custom DOM/style
manipulation that will potentially break when we upgrade
CodeMirror.

Because we're now using setLineClass(), this also resolves
we set on lines.

There are still a few wonky things going on with this commit, such
as the fact that information always appears below the line that
help displays on, and sometimes this results in weird scrolling
jumps, but we can resolve this in later commits."
295,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,1a2cdda21ea8a7afe871a1d57d144be18aca647c,completely decouple Relocator from index.html.
296,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,5346aa47ae7037ba17f3cd9739fda447407772ff,display error/help messages above target line if necessary.
297,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,e989b6c6ef98595e3f6601d2ebeb2992412f1460,"Use percentage width for error/help messages so they don't get
hidden behind the right edge of the editor on narrow screens."
298,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,9215adb886028a7fa4935ca391bee97914a5bdcc,"Point error/help messages at the correct soft-wrapped line.

Because we're using soft-wrapped lines, it can be the case that an error
or help message is pointing at a line that is several physical screen
lines down from where the line of code actually starts. Until now,
the messages always pointed at the first physical screen line, which
meant that it sometimes obscured the actual character it was supposed
to be pointing at.

I also made the error/help messages overlap the gutter, in part because
this will make the errors display better on narrow screens, and in part
because this will allow us to actually have the arrow point at the
relevant character in question."
299,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,059c9f32440b54c578bb472d2642ea0293f49fac,Position error/help arrow horizontally to point at relevant character.
300,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,906c5fe09bd76f21c08bc85a25c8bcc78a49ed1e,"Fixed disembodied down-arrow on error/help messages.

This bug was introduced in 9215adb886028a7fa4935ca391bee97914a5bdcc
due to the addition of border-box box-sizing to the error/help message
containers."
301,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,1c50dcc41d0b28123e8683072c58c5eeb02aebf2,"Remove gutter line arrow, just use red background for now instead.

This fixes the following bug, ""Gutter line marker is only one line
tall and points to wrong place"":

https://github.com/mozilla/webpagemaker/issues/335"
302,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,c9ec454ff248ceb76a1f38d9090cdd0dce2c51cf,rename maybeFlipElement() to flipElementIfNeeded().
303,https://api.github.com/repos/mozilla/friendlycode/pulls/79,79,Relocator refactoring,"This should fix #8, as well as resolve #33.

Because it fixes #8, I suppose it's not strictly a refactoring, but actually a bug-fix as well.
",toolness,124687,2012-06-07T22:48:13Z,CONTRIBUTOR,True,76,107,7,World's friendliest HTML editor.,JavaScript,3607a655beb686307b1e65296baa2d6cda664648,removed extraneous border CSS (it's overridden a few lines down).
304,https://api.github.com/repos/mozilla/friendlycode/pulls/78,78,Use protocol-relative urls for external resources.,"(addresses issue #77, tracking #wpm/301)

We need to use protocol relative URLs for our external resources so
browsers don't complain that we're serving mixed content. This will
fix the problem by serving the secure resource only when needed.

@toolness: R?
",brianloveswords,166258,2012-06-07T14:39:49Z,CONTRIBUTOR,True,3,4,1,World's friendliest HTML editor.,JavaScript,82c2a069c24ad13382f64dce54747d4fa137e388,"Use protocol-relative urls for external resources.

(addresses issue #77, tracking #wpm/301)

We need to use protocol relative URLs for our external resources so
browsers don't complain that we're serving mixed content. This will
fix the problem by serving the secure resource only when needed."
305,https://api.github.com/repos/mozilla/friendlycode/pulls/76,76,Consistent toolbar ui,"Yeah! This should fix #75.
",toolness,124687,2012-06-06T22:11:09Z,CONTRIBUTOR,True,27,40,2,World's friendliest HTML editor.,JavaScript,1727d4554a66b51a61089328bf92a7e1cf5ed9a4,"Applied consistent disabled/enabled/hover styling to toolbar buttons.

As mentioned in #75, they are now as follows:

* **disabled** - don't even show the button; just make it invisible.
* **enabled** - show the button's text and icon in gray.
* **hovering** - show the button's text and icon in blue."
306,https://api.github.com/repos/mozilla/friendlycode/pulls/76,76,Consistent toolbar ui,"Yeah! This should fix #75.
",toolness,124687,2012-06-06T22:11:09Z,CONTRIBUTOR,True,27,40,2,World's friendliest HTML editor.,JavaScript,72f4ac5e9590ca020e612673fde50801c040a214,"Disabled toolbar buttons are now 33% opaque instead of invisible.

Also refactored toolbar CSS a bit and changed styles in HTML so they
are a bit more semantically accurate, which allows us to
simplify the CSS further."
307,https://api.github.com/repos/mozilla/friendlycode/pulls/74,74,Show help tooltips near closing tags when cursor is there.,"This is a potential resolution for #73.

@pomax can you review this?
",toolness,124687,2012-06-06T19:29:33Z,CONTRIBUTOR,True,8,5,1,World's friendliest HTML editor.,JavaScript,802bdf658ce7af91ce5906b134743d76c9c172aa,"Show help tooltips near closing tags when cursor is there.

This is a potential resolution for #73."
308,https://api.github.com/repos/mozilla/friendlycode/pulls/72,72,made social media refresh every time the publish dialog is used,"because the URL changes every time that happens, so all the URLs for social media need to be updated.
",Pomax,177243,2012-06-06T19:21:46Z,CONTRIBUTOR,True,21,2,3,World's friendliest HTML editor.,JavaScript,e0ee480f76ab2a6206381cc85bcac8bf03a1a94f,"made social media refresh every time the publish dialog is used, because the URL changes every time that happens"
309,https://api.github.com/repos/mozilla/friendlycode/pulls/72,72,made social media refresh every time the publish dialog is used,"because the URL changes every time that happens, so all the URLs for social media need to be updated.
",Pomax,177243,2012-06-06T19:21:46Z,CONTRIBUTOR,True,21,2,3,World's friendliest HTML editor.,JavaScript,99b509432bff2d87af0f691db2a025961be64ce2,small code tighten
310,https://api.github.com/repos/mozilla/friendlycode/pulls/71,71,Show warning message in publish dialog when code contains errors.,"This should fix #70.

@Pomax can you take a look at this?
",toolness,124687,2012-06-06T18:57:05Z,CONTRIBUTOR,True,19,0,3,World's friendliest HTML editor.,JavaScript,119fd7a802e763501c08193052aa1da31c3a6860,"Show warning message in publish dialog when code contains errors.

This should fix #70."
311,https://api.github.com/repos/mozilla/friendlycode/pulls/68,68,"made social buttons better aligned, and made facebook button text-less",,Pomax,177243,2012-06-06T18:00:06Z,CONTRIBUTOR,True,4,2,2,World's friendliest HTML editor.,JavaScript,58f25a0eb7445bd6e6633bd5afd209473b82b6de,"made social buttons better aligned, and made facebook button text-less"
312,https://api.github.com/repos/mozilla/friendlycode/pulls/67,67,added dialog closing on out-of-dialog clicks and esc key,,Pomax,177243,2012-06-06T16:56:14Z,CONTRIBUTOR,True,25,4,1,World's friendliest HTML editor.,JavaScript,ab02703b4df47c613d43b29ab91d99a7040c5339,added dialog closing on out-of-dialog clicks and esc key
313,https://api.github.com/repos/mozilla/friendlycode/pulls/67,67,added dialog closing on out-of-dialog clicks and esc key,,Pomax,177243,2012-06-06T16:56:14Z,CONTRIBUTOR,True,25,4,1,World's friendliest HTML editor.,JavaScript,4bbeca2426018ce880be955f6f5af40e29dafc36,made dialog hiding less fragile
314,https://api.github.com/repos/mozilla/friendlycode/pulls/66,66,updated text in publish dialog,,Pomax,177243,2012-06-06T16:38:04Z,CONTRIBUTOR,True,1,1,1,World's friendliest HTML editor.,JavaScript,d54a760d4eb992827df636ba65b973745efc0a5a,updated text in publish dialog
315,https://api.github.com/repos/mozilla/friendlycode/pulls/65,65,"made line number highlight marker slightly less fat, vertically, so that...","... there's a hair's width space between it and the previous/next line number
",Pomax,177243,2012-06-06T16:35:41Z,CONTRIBUTOR,True,2,3,1,World's friendliest HTML editor.,JavaScript,1a4a4c6b8038ccb02d3dd4b1f84031818ad09fae,"made line number highlight marker slightly less fat, vertically, so that there's a hair's width space between it and the previous/next line number"
316,https://api.github.com/repos/mozilla/friendlycode/pulls/64,64,fixed error styling issues missing line highlighting,"small fix, major consequences.
",Pomax,177243,2012-06-06T16:28:48Z,CONTRIBUTOR,True,4,2,1,World's friendliest HTML editor.,JavaScript,6167921560cbfcce113937c0dce703519cd4e16c,fixed error styling issues missing line highlighting
317,https://api.github.com/repos/mozilla/friendlycode/pulls/63,63,worked in all but one of the notes from issue 262,"https://github.com/mozilla/webpagemaker/issues/262
",Pomax,177243,2012-06-06T14:43:24Z,CONTRIBUTOR,True,30,17,6,World's friendliest HTML editor.,JavaScript,a38bf398896cb8eeaff1c8c82a137ec89bba293b,worked in all but one of the notes from issue 262
318,https://api.github.com/repos/mozilla/friendlycode/pulls/63,63,worked in all but one of the notes from issue 262,"https://github.com/mozilla/webpagemaker/issues/262
",Pomax,177243,2012-06-06T14:43:24Z,CONTRIBUTOR,True,30,17,6,World's friendliest HTML editor.,JavaScript,a40ee4169018e273e1af60957da56888d1a19500,small fix on main.js
319,https://api.github.com/repos/mozilla/friendlycode/pulls/62,62,modified the editor/preview arrow to be a bit smaller ,,Pomax,177243,2012-06-05T19:53:35Z,CONTRIBUTOR,True,4,3,2,World's friendliest HTML editor.,JavaScript,5b9f4684c00fd0411f5fe6c363bf94a26a678ce8,modified the editor/preview arrow to be a bit smaller
320,https://api.github.com/repos/mozilla/friendlycode/pulls/61,61,updated the undo/redo graphics to effect better blue,,Pomax,177243,2012-06-05T17:22:56Z,CONTRIBUTOR,True,0,0,4,World's friendliest HTML editor.,JavaScript,5b054f35057fef02f5232030749dea2a92233271,updated the undo/redo graphics to effect better blue
321,https://api.github.com/repos/mozilla/friendlycode/pulls/60,60,hiding hints and cleaning up relocator on resize,,Pomax,177243,2012-06-05T14:36:15Z,CONTRIBUTOR,True,14,0,1,World's friendliest HTML editor.,JavaScript,61b8af6aaa6db02ee8b8ab6fcd9fb1f6ec55096e,hiding hints and cleaning up relocator on resize
322,https://api.github.com/repos/mozilla/friendlycode/pulls/60,60,hiding hints and cleaning up relocator on resize,,Pomax,177243,2012-06-05T14:36:15Z,CONTRIBUTOR,True,14,0,1,World's friendliest HTML editor.,JavaScript,dd599f4f657358faedf149413bf15a6f6a6c0d8a,"style change from .resize(...) to .on('resize',...)"
323,https://api.github.com/repos/mozilla/friendlycode/pulls/59,59,set iframe background to white,"simplest fix yet!
",Pomax,177243,2012-06-05T14:24:04Z,CONTRIBUTOR,True,1,0,1,World's friendliest HTML editor.,JavaScript,29df9cf2782344f237518c938bf752324ca5923d,set iframe background to white
324,https://api.github.com/repos/mozilla/friendlycode/pulls/58,58,fixed up issue 251,"made default view the same as 'normal' text size. Updated text size change to only occur if localStorage has a text size entry instead of also trying to trigger 'normal' in the absence of a localStorage value
",Pomax,177243,2012-06-05T14:22:22Z,CONTRIBUTOR,True,6,8,2,World's friendliest HTML editor.,JavaScript,427227c120cea5d9f675d04bdc04724e486d3298,made default view the same as 'normal' text size. Updated text size change to only occur if localStorage has a text size entry instead of also trying to trigger 'normal' in the absence of a localStorage value
325,https://api.github.com/repos/mozilla/friendlycode/pulls/57,57,fixed the gutter text marker persisting when hints are hidden,"fairly simple fix.
",Pomax,177243,2012-06-05T14:08:21Z,CONTRIBUTOR,True,28,25,1,World's friendliest HTML editor.,JavaScript,a53df9cbdff556ecafb0969f43c3570e695b385d,fixed the gutter text marker persisting when hints are hidden
326,https://api.github.com/repos/mozilla/friendlycode/pulls/57,57,fixed the gutter text marker persisting when hints are hidden,"fairly simple fix.
",Pomax,177243,2012-06-05T14:08:21Z,CONTRIBUTOR,True,28,25,1,World's friendliest HTML editor.,JavaScript,f70cc2d1ad81ffdf15683a3b0249b24c67823d76,reduced branching and improved legibility
327,https://api.github.com/repos/mozilla/friendlycode/pulls/56,56,fixes and implementations for WPM issue 212,"see https://github.com/mozilla/webpagemaker/issues/212 for all proposed and implemented changes
",Pomax,177243,2012-06-05T13:35:42Z,CONTRIBUTOR,True,123,88,9,World's friendliest HTML editor.,JavaScript,3357b8b660f5578680b834a1f48ed74033a17f08,initial commits for publish dialog restyle
328,https://api.github.com/repos/mozilla/friendlycode/pulls/56,56,fixes and implementations for WPM issue 212,"see https://github.com/mozilla/webpagemaker/issues/212 for all proposed and implemented changes
",Pomax,177243,2012-06-05T13:35:42Z,CONTRIBUTOR,True,123,88,9,World's friendliest HTML editor.,JavaScript,96c5e2e8f561c77540b2789952ccf0818de68b52,more fixed for 212
329,https://api.github.com/repos/mozilla/friendlycode/pulls/56,56,fixes and implementations for WPM issue 212,"see https://github.com/mozilla/webpagemaker/issues/212 for all proposed and implemented changes
",Pomax,177243,2012-06-05T13:35:42Z,CONTRIBUTOR,True,123,88,9,World's friendliest HTML editor.,JavaScript,09aaaab7b9e86d3fe8779d88720f3d66949828da,changed alignment for 'show hints' a tiny bit
330,https://api.github.com/repos/mozilla/friendlycode/pulls/56,56,fixes and implementations for WPM issue 212,"see https://github.com/mozilla/webpagemaker/issues/212 for all proposed and implemented changes
",Pomax,177243,2012-06-05T13:35:42Z,CONTRIBUTOR,True,123,88,9,World's friendliest HTML editor.,JavaScript,4714e53a61e549ce98760d7bc1546bbc6fdc079a,small fixes to editor.css
331,https://api.github.com/repos/mozilla/friendlycode/pulls/56,56,fixes and implementations for WPM issue 212,"see https://github.com/mozilla/webpagemaker/issues/212 for all proposed and implemented changes
",Pomax,177243,2012-06-05T13:35:42Z,CONTRIBUTOR,True,123,88,9,World's friendliest HTML editor.,JavaScript,8737d1ef1eb1bd001097368583ea102451c75aa4,added a note on why we don't use local fallback for Myriad Pro
332,https://api.github.com/repos/mozilla/friendlycode/pulls/55,55,made hint dialogs always visible by being on top(tm),"rewired hint dialogs so that they stay on top of the source code/preview panes
",Pomax,177243,2012-06-04T14:40:24Z,CONTRIBUTOR,True,51,12,4,World's friendliest HTML editor.,JavaScript,b37e3386b60173c7e0996fc99448a4db67ffa8ff,rewired hint dialogs so that they stay on top of the source code/preview view
333,https://api.github.com/repos/mozilla/friendlycode/pulls/55,55,made hint dialogs always visible by being on top(tm),"rewired hint dialogs so that they stay on top of the source code/preview panes
",Pomax,177243,2012-06-04T14:40:24Z,CONTRIBUTOR,True,51,12,4,World's friendliest HTML editor.,JavaScript,b1d65a0c405ab4dd9b1d00c49302dc7f0fddfa77,updates according to pull request feedback
334,https://api.github.com/repos/mozilla/friendlycode/pulls/55,55,made hint dialogs always visible by being on top(tm),"rewired hint dialogs so that they stay on top of the source code/preview panes
",Pomax,177243,2012-06-04T14:40:24Z,CONTRIBUTOR,True,51,12,4,World's friendliest HTML editor.,JavaScript,17c76bae553a0cd84f5123db82dd0872415a3c79,nit resolution!
335,https://api.github.com/repos/mozilla/friendlycode/pulls/55,55,made hint dialogs always visible by being on top(tm),"rewired hint dialogs so that they stay on top of the source code/preview panes
",Pomax,177243,2012-06-04T14:40:24Z,CONTRIBUTOR,True,51,12,4,World's friendliest HTML editor.,JavaScript,b1e09cfcba026dcf6367b3123610b0386a7f98fd,removed window.console.log statement
336,https://api.github.com/repos/mozilla/friendlycode/pulls/54,54,styling for hint/error and syntax highlight choices.,"https://github.com/mozilla/webpagemaker/issues/209 and https://github.com/mozilla/webpagemaker/issues/211
",Pomax,177243,2012-06-04T13:34:48Z,CONTRIBUTOR,True,225,136,17,World's friendliest HTML editor.,JavaScript,dae349e11f982516eb876416cb056d42b80ec3b0,added changes suggested in https://github.com/mozilla/webpagemaker/issues/211
337,https://api.github.com/repos/mozilla/friendlycode/pulls/54,54,styling for hint/error and syntax highlight choices.,"https://github.com/mozilla/webpagemaker/issues/209 and https://github.com/mozilla/webpagemaker/issues/211
",Pomax,177243,2012-06-04T13:34:48Z,CONTRIBUTOR,True,225,136,17,World's friendliest HTML editor.,JavaScript,988ec7a6dedbfb652404c64bac534487032f03b8,hint restyling to match mockups
338,https://api.github.com/repos/mozilla/friendlycode/pulls/54,54,styling for hint/error and syntax highlight choices.,"https://github.com/mozilla/webpagemaker/issues/209 and https://github.com/mozilla/webpagemaker/issues/211
",Pomax,177243,2012-06-04T13:34:48Z,CONTRIBUTOR,True,225,136,17,World's friendliest HTML editor.,JavaScript,f9b67eda4aef352294003769e587ed4c7b9f972f,"fixed up hints a little more, fixed arrow orientation when the hint is below rather than above a line"
339,https://api.github.com/repos/mozilla/friendlycode/pulls/54,54,styling for hint/error and syntax highlight choices.,"https://github.com/mozilla/webpagemaker/issues/209 and https://github.com/mozilla/webpagemaker/issues/211
",Pomax,177243,2012-06-04T13:34:48Z,CONTRIBUTOR,True,225,136,17,World's friendliest HTML editor.,JavaScript,bf84558139ec99258b04337560c01a38f30be1c2,made font sizes the correct values
340,https://api.github.com/repos/mozilla/friendlycode/pulls/54,54,styling for hint/error and syntax highlight choices.,"https://github.com/mozilla/webpagemaker/issues/209 and https://github.com/mozilla/webpagemaker/issues/211
",Pomax,177243,2012-06-04T13:34:48Z,CONTRIBUTOR,True,225,136,17,World's friendliest HTML editor.,JavaScript,36a79428c78bca8f5cdafc9fa1c186e0168c78f3,image updates
341,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,3eb810c5845eac010153c3c27594d89d40dbe008,modification qui permet d'avoir des chatons mignons en page d'accueil
342,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,8c0d51497219b7949cc46ac29fb69f4eb9e26b73,ajout fichier properties
343,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,2d420876ac6cade1083d787bf8b6fe4bde2d9a5a,modif ordre des lignes resource/script pour voir
344,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,620073a2768f86db7a54dde2993de6d9f9c816d5,get a real l10n.js file instead of a silly one
345,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,92ea0083a6add680b82617d8ba255afd9b5f0ee3,adding i18n for index.html
346,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,dc666b5133c7bef17ea53312bc3a07715480676e,Add webL10n as submodule
347,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,7c2d94fb243a0ed84ae749ffbfcff8f67185db63,"Merge remote-tracking branch 'goofy/l10n' into l10n-ui

Conflicts:
	index.html"
348,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,42c398b73cbc820185da9efcdb970d8f5df0b46d,Update translations and version of webL10n
349,https://api.github.com/repos/mozilla/friendlycode/pulls/53,53,Client Side Localization,"Localize UI content with webL10n.
See https://github.com/mozilla/webpagemaker/issues/234

Provide a sample french translation and a language selector.

This is just a first prototype to see if this solution fits the l10n needs.
",clochix,384908,2012-06-01T21:57:56Z,NONE,False,97,28,4,World's friendliest HTML editor.,JavaScript,059cde83b1fe3b0f2ef21b6bbd5e055e5e4b91b7,Add language selector
350,https://api.github.com/repos/mozilla/friendlycode/pulls/51,51,Issue 210,"Resolves https://github.com/mozilla/webpagemaker/issues/210 (styling issues) -- also includes updated responsive CSS due to new placement of certain elements.
",Pomax,177243,2012-06-01T14:43:08Z,CONTRIBUTOR,True,68,37,3,World's friendliest HTML editor.,JavaScript,45f13c1da1383db66df8ff508f42d7e4fe9ae87e,partial commit
351,https://api.github.com/repos/mozilla/friendlycode/pulls/51,51,Issue 210,"Resolves https://github.com/mozilla/webpagemaker/issues/210 (styling issues) -- also includes updated responsive CSS due to new placement of certain elements.
",Pomax,177243,2012-06-01T14:43:08Z,CONTRIBUTOR,True,68,37,3,World's friendliest HTML editor.,JavaScript,93ef8cff2ebf74aa198fc3170150a7f93759ecd5,Merge branch 'gh-pages' of github.com:toolness/friendlycode into issue210
352,https://api.github.com/repos/mozilla/friendlycode/pulls/51,51,Issue 210,"Resolves https://github.com/mozilla/webpagemaker/issues/210 (styling issues) -- also includes updated responsive CSS due to new placement of certain elements.
",Pomax,177243,2012-06-01T14:43:08Z,CONTRIBUTOR,True,68,37,3,World's friendliest HTML editor.,JavaScript,6e2f574f0225df51119eae0d66f47effc986aeb1,resolution for issue 210
353,https://api.github.com/repos/mozilla/friendlycode/pulls/50,50,Localize content,"I've translated the default content into french and updated the loading code to try to get content according to navigator's language, with a default fallback.
",clochix,384908,2012-05-31T17:16:59Z,NONE,False,80,9,3,World's friendliest HTML editor.,JavaScript,77cf5fecba55b9eb96f206e3bcbe96e62d70ebec,Add french translation of default content
354,https://api.github.com/repos/mozilla/friendlycode/pulls/50,50,Localize content,"I've translated the default content into french and updated the loading code to try to get content according to navigator's language, with a default fallback.
",clochix,384908,2012-05-31T17:16:59Z,NONE,False,80,9,3,World's friendliest HTML editor.,JavaScript,3f66417a22dde0651a6e4acf5c8a9978c23b3254,Select content according to navigator's language
355,https://api.github.com/repos/mozilla/friendlycode/pulls/50,50,Localize content,"I've translated the default content into french and updated the loading code to try to get content according to navigator's language, with a default fallback.
",clochix,384908,2012-05-31T17:16:59Z,NONE,False,80,9,3,World's friendliest HTML editor.,JavaScript,e3349bf0dc61b8060a000d2c21877cc7c800e096,Update contents/default-content.fr.html
356,https://api.github.com/repos/mozilla/friendlycode/pulls/49,49,added a tweet text,,Pomax,177243,2012-05-30T20:21:52Z,CONTRIBUTOR,True,12,6,3,World's friendliest HTML editor.,JavaScript,4a81463575c4c84929a76122f2cebb36d4b34465,fixed up the text menu a little
357,https://api.github.com/repos/mozilla/friendlycode/pulls/49,49,added a tweet text,,Pomax,177243,2012-05-30T20:21:52Z,CONTRIBUTOR,True,12,6,3,World's friendliest HTML editor.,JavaScript,4f994b65155c86e17ebf7baffcf0d83d18ff4aaf,added a Tweet text to go with our URL
358,https://api.github.com/repos/mozilla/friendlycode/pulls/48,48,updated slowparse submodule pointer,,Pomax,177243,2012-05-30T17:12:58Z,CONTRIBUTOR,True,1,1,1,World's friendliest HTML editor.,JavaScript,d4fcb0d823db59b2459d7fc400963c87cc3a65ac,updated slowparse submodule
359,https://api.github.com/repos/mozilla/friendlycode/pulls/47,47,styling fixes and typos,,Pomax,177243,2012-05-30T16:59:55Z,CONTRIBUTOR,True,35,7,10,World's friendliest HTML editor.,JavaScript,6627403d9c0b04e7d958288c3824b558954cd447,fixed publish buttons hanging 'outside' the dialog
360,https://api.github.com/repos/mozilla/friendlycode/pulls/47,47,styling fixes and typos,,Pomax,177243,2012-05-30T16:59:55Z,CONTRIBUTOR,True,35,7,10,World's friendliest HTML editor.,JavaScript,706aa8a3c279297e655680411d2c6d5273766dda,removed a hard-coded text replacement that made the edit URL the word 'Here'
361,https://api.github.com/repos/mozilla/friendlycode/pulls/47,47,styling fixes and typos,,Pomax,177243,2012-05-30T16:59:55Z,CONTRIBUTOR,True,35,7,10,World's friendliest HTML editor.,JavaScript,8c68ec8fae282c723834c575e114d5b938c0e1cc,"url to URL fix, and nav highlights"
362,https://api.github.com/repos/mozilla/friendlycode/pulls/46,46,updated the thimble logo to the correct one,,Pomax,177243,2012-05-30T14:29:46Z,CONTRIBUTOR,True,1,2,4,World's friendliest HTML editor.,JavaScript,9ff329d3452dc9c9e208e1b2206941dc8326795b,updated the thimble logo to the official one
363,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,5dad6d19ffcbe4742ec99b91a0cb555fece2ffb4,"Ported pathTo() from webxray.

As of toolness/webxray@eb49e3dcd3 this was in src/utils.js."
364,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,0e704745c5b667f80a0738786283a9e78b4ccee8,"Added basic preview-to-source mapping functionality.

Implementation only, via another private LivePreview function,
nodeToCode().

Currently this is a bit difficult for some types of source HTML because
we're mapping from the preview DOM to the Slowparse-generated DOM,
and the latter doesn't contain implicit HTML elements while the former
does."
365,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,bae32fa3cc04f9f4a077a42fe3009189b7e7c83a,added mousedown handler in live preview to select code for an element when clicked on.
366,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,f1c04a84b82c181b1456fe25a37bb5a9650d44db,Merge branch 'gh-pages' into preview-to-code-mapping
367,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,1198d0d43d201a57c27e65bfb926ba2a9779e19e,"Factored preview-to-code mapping into a separate module.

The LivePreview class is now its own event emitter, which emits a
refresh event every time the preview content changes. This can be used by
other classes like the preview-to-code mapper to provide their functionality."
368,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,052cb7da6343feb500f9d8a16b78e2a73656e0c7,Merge branch 'gh-pages' into new-preview-to-code-mapping
369,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,2bdc886d69784d1cfa081d0e97b5060a5de3dc61,Fixed preview-to-editor-mapping breakages due to CodeMirror 2.24 upgrade.
370,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,e6a2fa00297c47bcac390a4b57deaaee01fd97df,"Merge branch 'gh-pages' into preview-to-code-mapping

Conflicts:
	js/fc/ui/live-preview.js
	test/test-live-preview.js"
371,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,22da3fdc5c045e7762468bdd33a667c9e8c66af7,Fix for nodeToCode() test on webkit.
372,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,75b190533cb83cebf729de86c63c00ea8796ffef,relative paths are really starting to piss the fucking shit out of me. symbolic linking to slowparse in js dir so that modules don't have to load it relatively and we don't have to mess with confusing requirejs setting crap.
373,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,a1616b2f413356f789079a6435710da437b25751,Merge branch 'gh-pages' into preview-to-code-mapping
374,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,465acfb8cee38275303fd1b34497c5edd680547f,highlight text w/ a color instead of making it the current selection.
375,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,bd7866dcd378f246d07e337f4782ea752700daa9,"on click of preview element, put cursor at content start."
376,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,562994ad02868d507b4d9398e1f9732685573cb0,nodeToCode() now works on void elements.
377,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,4c5bb9ceb61dd1366c7b94beec78332f14510216,Merge branch 'gh-pages' of github.com:toolness/friendlycode into preview-to-code-mapping
378,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,c37a992882fa49a97de9fe440b8ba5885dabe680,refined preview-to-code mapper code
379,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,256a9d06b26f90c03d60caea88542275df170f53,Merge branch 'gh-pages' of github.com:Pomax/friendlycode into preview-to-code-mapping
380,https://api.github.com/repos/mozilla/friendlycode/pulls/45,45,Preview to code mapping,"refined mapping a bit:
- no highlight for html or body
- code highlights go away if you click in the editor section
- code highlights go away if you click on a the preview's body
- clicking ""outside"" the preview's page content (when the page is less than 100% high) no longer throws an error.
",Pomax,177243,2012-05-29T20:34:29Z,CONTRIBUTOR,True,279,15,9,World's friendliest HTML editor.,JavaScript,048854b179e7541acd81a571b9c36db408f7d95e,updated the code in line with Brian's remarks
381,https://api.github.com/repos/mozilla/friendlycode/pulls/44,44,changed @import to a <link> inclusion for the opensans fonts,,Pomax,177243,2012-05-29T17:55:15Z,CONTRIBUTOR,True,1,3,2,World's friendliest HTML editor.,JavaScript,cdc5d888ecceae2ff2ecdd66c69a1bbf1190ee65,changed @import to a <link> inclusion for the opensans fonts
382,https://api.github.com/repos/mozilla/friendlycode/pulls/43,43,forgot a supports_local_storage entry,,Pomax,177243,2012-05-29T17:52:03Z,CONTRIBUTOR,True,1,1,1,World's friendliest HTML editor.,JavaScript,110805fc6b09dfd6405a1f03cc819cec32647908,forgot one supports_local_storage entry
383,https://api.github.com/repos/mozilla/friendlycode/pulls/41,41,"updated the nav bar to be properly responsive, making text size persistent too","The navigation bar should now be properly responsive, for resolutions as low as 400px, and text size settings form the nav bar should be persistent
",Pomax,177243,2012-05-28T14:36:00Z,CONTRIBUTOR,True,98,15,4,World's friendliest HTML editor.,JavaScript,e19d02c202ca125ad28d1e17891fef72dc340bec,made nav bar properly responsive
384,https://api.github.com/repos/mozilla/friendlycode/pulls/41,41,"updated the nav bar to be properly responsive, making text size persistent too","The navigation bar should now be properly responsive, for resolutions as low as 400px, and text size settings form the nav bar should be persistent
",Pomax,177243,2012-05-28T14:36:00Z,CONTRIBUTOR,True,98,15,4,World's friendliest HTML editor.,JavaScript,cfb27d678615592bdcfe9e04d12b0c6a10e0a08f,"cleaned up transform CSS, since it broke FF nightly"
385,https://api.github.com/repos/mozilla/friendlycode/pulls/41,41,"updated the nav bar to be properly responsive, making text size persistent too","The navigation bar should now be properly responsive, for resolutions as low as 400px, and text size settings form the nav bar should be persistent
",Pomax,177243,2012-05-28T14:36:00Z,CONTRIBUTOR,True,98,15,4,World's friendliest HTML editor.,JavaScript,a207519d990a906f5ae0331a78f072028c54fb80,made text size persistent via localstorage
386,https://api.github.com/repos/mozilla/friendlycode/pulls/41,41,"updated the nav bar to be properly responsive, making text size persistent too","The navigation bar should now be properly responsive, for resolutions as low as 400px, and text size settings form the nav bar should be persistent
",Pomax,177243,2012-05-28T14:36:00Z,CONTRIBUTOR,True,98,15,4,World's friendliest HTML editor.,JavaScript,7d41a7a9754019e3cf7558add37f86c9c3a59df8,style change of supports_local_storage to match the rest of our codebase
387,https://api.github.com/repos/mozilla/friendlycode/pulls/40,40,"Proposal for resolving #39, ""Pages infinitely reload on webkit"".","I'm still unsettled by the spurious popstate that occurs on page
load, though. Not sure if that happens on all pages, or just Thimble's;
we should find out.
",toolness,124687,2012-05-26T19:53:44Z,CONTRIBUTOR,True,22,19,1,World's friendliest HTML editor.,JavaScript,f3dbc7a947c9f1729bf811f698220f925db372e6,"Proposal for resolving #39, ""Pages infinitely reload on webkit"".

I'm still unsettled by the spurious popstate that occurs on page
load, though. Not sure if that happens on all pages, or just Thimble's;
we should find out."
388,https://api.github.com/repos/mozilla/friendlycode/pulls/38,38,updated html/css to allow for <1200 browser screens,"(944 is the minimum non-overlap at the moment)
",Pomax,177243,2012-05-25T22:55:16Z,CONTRIBUTOR,True,60,43,3,World's friendliest HTML editor.,JavaScript,ab420a17e9bbb4ab1be3f8af95574583dffad708,updated html/css to allow for <1200 browser screens (944 is the minimum non-overlap at the moment)
389,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,a6f2bcb0136881083585f8c0451b3a60df99bbf3,fix for https://github.com/mozilla/webpagemaker/issues/160
390,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,5ad5d1a7d9db7919838700e5746edee1eb390c00,Merge branch 'restyled' of github.com:Pomax/friendlycode into restyled
391,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,51799569999d685ee3a6b983cfba2a7ccbd6a12c,font sizing added to new page
392,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,b393509cde4f4342defeaedcf5bec9e3d189575f,merging upstream
393,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,5f41fafa902dd56ab4f9f6e4c272444c3f035ef2,"upstream merge, main.js conflict resolution"
394,https://api.github.com/repos/mozilla/friendlycode/pulls/37,37,Full restyling,"- font size selector works
- sharing is back in (loaded only after ""share this via..."" accordion's expanded)
- error/help have been repositioned
- UI has some min-widths to keep buttons from compressing
- JS refactors to their own moduls in fc/ui/
",Pomax,177243,2012-05-25T20:11:02Z,CONTRIBUTOR,True,277,42,11,World's friendliest HTML editor.,JavaScript,c4071b2660a15d482f9575a91de2e47929d285d5,added codemirror to modals.js
395,https://api.github.com/repos/mozilla/friendlycode/pulls/28,28,last fix to solve codemirror gitter/line misalignment,,Pomax,177243,2012-05-24T04:35:42Z,CONTRIBUTOR,True,2,1,1,World's friendliest HTML editor.,JavaScript,2d9da03d92fb5b7622c11ab718778a65302e7c25,last fix to solve codemirror gitter/line misalignment
396,https://api.github.com/repos/mozilla/friendlycode/pulls/27,27,"added Myriad Pro as body font, with typekit script and custom font family","diffs in editor.css and index.html
",Pomax,177243,2012-05-24T04:05:54Z,CONTRIBUTOR,True,5,2,2,World's friendliest HTML editor.,JavaScript,544d6286330046cc7210876f3734d50652224467,set up document to use Myriad Pro
397,https://api.github.com/repos/mozilla/friendlycode/pulls/27,27,"added Myriad Pro as body font, with typekit script and custom font family","diffs in editor.css and index.html
",Pomax,177243,2012-05-24T04:05:54Z,CONTRIBUTOR,True,5,2,2,World's friendliest HTML editor.,JavaScript,fca3f831425d7728d06e2037f3fdc5c913adffa9,added myriad-pro
398,https://api.github.com/repos/mozilla/friendlycode/pulls/27,27,"added Myriad Pro as body font, with typekit script and custom font family","diffs in editor.css and index.html
",Pomax,177243,2012-05-24T04:05:54Z,CONTRIBUTOR,True,5,2,2,World's friendliest HTML editor.,JavaScript,9189cd5c9fa8f477c05f8e985e85f18f9f47ec1c,added typekit loader
399,https://api.github.com/repos/mozilla/friendlycode/pulls/27,27,"added Myriad Pro as body font, with typekit script and custom font family","diffs in editor.css and index.html
",Pomax,177243,2012-05-24T04:05:54Z,CONTRIBUTOR,True,5,2,2,World's friendliest HTML editor.,JavaScript,64bb766b1614e421c08506edd30d3e50a82d99f7,changed body's debug 'red' to plain grey
400,https://api.github.com/repos/mozilla/friendlycode/pulls/26,26,mousedown hijack fix for error/help dialogs,"fixed error/help from being mouse-hijacked by codemirror. click events on it are now cut off so that codemirror can't reposition the cursor, force a update, and remove the hint based on the new cursor position
",Pomax,177243,2012-05-24T02:59:33Z,CONTRIBUTOR,True,13,1,2,World's friendliest HTML editor.,JavaScript,1a37a9a21b8bb404d9e6a6b55df6f1c319d99b95,"fixed error/help from being mouse-hijacked by codemirror. click events on it are now cut off so that codemirror can't reposition the cursor, force a update, and remove the hint based on the new cursor position"
401,https://api.github.com/repos/mozilla/friendlycode/pulls/25,25,fixed gutter text / real text misalignment in codemirror,"srsly, wth =)
",Pomax,177243,2012-05-23T23:38:08Z,CONTRIBUTOR,True,2,0,1,World's friendliest HTML editor.,JavaScript,d8d7a2693edf7b1c53952d8c993e9d9c5978565b,fixed gutter text / real text misalignment in codemirror
402,https://api.github.com/repos/mozilla/friendlycode/pulls/24,24,"Restyled to the latest mockup, some things not implemented yet","- no font-changing yet
- error/help style not final (but functional)
- no social sharing in publish yet
",Pomax,177243,2012-05-23T23:11:29Z,CONTRIBUTOR,True,693,471,43,World's friendliest HTML editor.,JavaScript,9ace8edeeaf50ce70a516d9020b2648cfae93981,restyling to match most recent mockup
403,https://api.github.com/repos/mozilla/friendlycode/pulls/24,24,"Restyled to the latest mockup, some things not implemented yet","- no font-changing yet
- error/help style not final (but functional)
- no social sharing in publish yet
",Pomax,177243,2012-05-23T23:11:29Z,CONTRIBUTOR,True,693,471,43,World's friendliest HTML editor.,JavaScript,e14139518954755af54774dfafa95a26cb9c3d97,restyle update
404,https://api.github.com/repos/mozilla/friendlycode/pulls/24,24,"Restyled to the latest mockup, some things not implemented yet","- no font-changing yet
- error/help style not final (but functional)
- no social sharing in publish yet
",Pomax,177243,2012-05-23T23:11:29Z,CONTRIBUTOR,True,693,471,43,World's friendliest HTML editor.,JavaScript,838f9d6df03512c948f0326e4f028a78043af42b,error and help 'points' to the right line now
405,https://api.github.com/repos/mozilla/friendlycode/pulls/24,24,"Restyled to the latest mockup, some things not implemented yet","- no font-changing yet
- error/help style not final (but functional)
- no social sharing in publish yet
",Pomax,177243,2012-05-23T23:11:29Z,CONTRIBUTOR,True,693,471,43,World's friendliest HTML editor.,JavaScript,1476460c12e2264ffc20ea9d69c3156549a1981a,color updates and hooked up publish button
406,https://api.github.com/repos/mozilla/friendlycode/pulls/24,24,"Restyled to the latest mockup, some things not implemented yet","- no font-changing yet
- error/help style not final (but functional)
- no social sharing in publish yet
",Pomax,177243,2012-05-23T23:11:29Z,CONTRIBUTOR,True,693,471,43,World's friendliest HTML editor.,JavaScript,8818f926cfd2531528df4fbcc0a65869a608848a,color updates and publish button is live
407,https://api.github.com/repos/mozilla/friendlycode/pulls/18,18,temporary last user wave styling changes,,Pomax,177243,2012-05-16T19:34:00Z,CONTRIBUTOR,True,41,1,3,World's friendliest HTML editor.,JavaScript,bcaedf5daf6ac2670644bf4ea9cf25afae416b54,temporary update for last user testing wave.
408,https://api.github.com/repos/mozilla/friendlycode/pulls/18,18,temporary last user wave styling changes,,Pomax,177243,2012-05-16T19:34:00Z,CONTRIBUTOR,True,41,1,3,World's friendliest HTML editor.,JavaScript,9a9c4ba135a1b6eec90749e55b05f534791d8b31,font change for codemirror
409,https://api.github.com/repos/mozilla/friendlycode/pulls/17,17,Adding comments to the first screen.,"Yeaaaah
",brianloveswords,166258,2012-05-16T19:06:03Z,CONTRIBUTOR,True,16,10,1,World's friendliest HTML editor.,JavaScript,bc7a36a570e1453628eaff6c34d14f37fa14b85b,First pass at adding comments.
410,https://api.github.com/repos/mozilla/friendlycode/pulls/16,16,changed the name of the button,"save is now publish.
",cmcavoy,64711,2012-05-16T19:01:31Z,CONTRIBUTOR,True,2,2,1,World's friendliest HTML editor.,JavaScript,7c7fce7ac83b8cf9c0176bc4a8375fe46d20fc1b,changed the name of that button
411,https://api.github.com/repos/mozilla/friendlycode/pulls/15,15,"hiding the ""share"" button for user testing purposes",,Pomax,177243,2012-05-16T16:33:38Z,CONTRIBUTOR,True,2,0,1,World's friendliest HTML editor.,JavaScript,e5b7f347092413b60c49dcdda8c4a21d8bc9be31,hiding the share button for user testing purposes
412,https://api.github.com/repos/mozilla/friendlycode/pulls/14,14,Move the style below the content.,"Do it.
",brianloveswords,166258,2012-05-16T16:05:17Z,CONTRIBUTOR,True,9,8,1,World's friendliest HTML editor.,JavaScript,7e61cce5da63a0fb20d35712426b48ba2be2182a,Move the style below the content.
413,https://api.github.com/repos/mozilla/friendlycode/pulls/13,13,made social media load-on-mouseover for their icon,"I rewrote main.js, share.js and late-socials.js so that you now load the social medium when you mouse-over its icon. 
",Pomax,177243,2012-05-14T19:22:40Z,CONTRIBUTOR,True,45,50,3,World's friendliest HTML editor.,JavaScript,5afeb39c2eb1888aba1646f0aac41f3966f1e392,made social media load on mouseover
414,https://api.github.com/repos/mozilla/friendlycode/pulls/9,9,re-enabled the share button,"social share functions are in,
share button auto-saves when selected
social media will point to saved link, not current link
",Pomax,177243,2012-05-09T19:34:34Z,CONTRIBUTOR,True,155,26,6,World's friendliest HTML editor.,JavaScript,1fd6b38ec3158ce414bc737b843cbac305495fe1,filled in the share button dialog
415,https://api.github.com/repos/mozilla/friendlycode/pulls/9,9,re-enabled the share button,"social share functions are in,
share button auto-saves when selected
social media will point to saved link, not current link
",Pomax,177243,2012-05-09T19:34:34Z,CONTRIBUTOR,True,155,26,6,World's friendliest HTML editor.,JavaScript,d65bb6953f26923f13e359f0b1a1efba726db716,"updates to lateSocials so that the social media buttons get the saved URL, not the 'current' URL"
416,https://api.github.com/repos/mozilla/friendlycode/pulls/9,9,re-enabled the share button,"social share functions are in,
share button auto-saves when selected
social media will point to saved link, not current link
",Pomax,177243,2012-05-09T19:34:34Z,CONTRIBUTOR,True,155,26,6,World's friendliest HTML editor.,JavaScript,3594360da6992cfaf5d4fe89cb8953fcfa60e83a,removed spacing before doctype
417,https://api.github.com/repos/mozilla/friendlycode/pulls/7,7,CSS cleanups,"removed double declarations and commented blocks from the lovebomb theming
",Pomax,177243,2012-05-08T18:08:32Z,CONTRIBUTOR,True,10,202,2,World's friendliest HTML editor.,JavaScript,63f41595548729e534414097451e4437e07617ff,cleaned up CSS for editor page
418,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,8b9cf919186885f8141eccad2d6f19486cbbf8f2,applied restyle to toolness's lovebomb skeleton instead
419,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,b9068c79b18b9844352ff83058429ca66ba254ca,minor tweak to set up a white line at the top of the page
420,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,0496f8f86a2abd9d098505a752dd04ce49e23163,hooked in help/errors
421,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,8f9db922dc1eb60a4c4f58c61a45884cc128ac44,removed a window.console.log
422,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,43b1c042d6bb625d50f779e943206d589874eb94,final bits of styling
423,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,7c0a9287f2167b55b9dcea1cbc639fdff321c179,linked up save button (still needs styling fixed up
424,https://api.github.com/repos/mozilla/friendlycode/pulls/6,6,restyling!,"this time based on the IE8 compatible lovebomb-template
",Pomax,177243,2012-05-08T15:27:36Z,CONTRIBUTOR,True,2473,88,94,World's friendliest HTML editor.,JavaScript,9800c0c0e53dffc9eba72482678c17a4ce10f1e0,save styling
