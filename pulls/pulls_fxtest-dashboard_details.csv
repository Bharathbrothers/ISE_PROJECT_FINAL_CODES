,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/87,87,Add MPL 2.0 license,"Not 100% sure if there are files covered by other licenses, etc., in here, but putting it up for discussion/review.",stephendonner,387249,2017-12-06T21:31:04Z,NONE,False,377,0,1,GitHub dashboard for Firefox Test Engineering,HTML,60fb395d40ae6375d7cd35d8a87bec1cc1abfe06,Add MPL 2.0 license
1,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/86,86,Remove use of GitHub read-only token,"I suspect this was added for rate-limiting, but we shouldn't expose tokens, even if they are read-only.",davehunt,122800,2017-12-04T10:28:51Z,MEMBER,True,2,3,2,GitHub dashboard for Firefox Test Engineering,HTML,186d51b4ccff4af30b17d2494c09419aea036e1f,Remove use of GitHub read-only token
2,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/85,85,Update list to active repos,@karlht / @mozilla/firefox-test-engineering r?,stephendonner,387249,2017-11-30T22:09:52Z,NONE,True,5,2,1,GitHub dashboard for Firefox Test Engineering,HTML,dd3641f6d19b74acf902126af77cf2f5d1483e5f,Update list to active repos
3,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/84,84,Remove dead Jenkins URL,@mozilla/firefox-test-engineering r?,stephendonner,387249,2017-09-13T20:44:21Z,NONE,True,0,3,1,GitHub dashboard for Firefox Test Engineering,HTML,ce4eb1aeae2ff5bd124df9c89adbf759cb174083,Remove dead Jenkins URL
4,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/83,83,Remove cruft; update others,@mozilla/firefox-test-engineering r?,stephendonner,387249,2017-09-13T20:25:37Z,NONE,True,1,10,1,GitHub dashboard for Firefox Test Engineering,HTML,eb658192f8c95d0eefb5d69a4938ea69ccb23b41,Remove cruft; update others
5,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/82,82,Fix Service Book URL,@mozilla/firefox-test-engineering r?,stephendonner,387249,2017-09-13T20:17:38Z,NONE,True,1,1,1,GitHub dashboard for Firefox Test Engineering,HTML,f9c0292ec90faa33c3b1b5da144eee8390dfe67c,Fix Service Book URL
6,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/80,80,added links to nav menu,"Addresses Issue #79 

I went ahead and added this to the current branch `gh-pages`, but I don't plan on making too many more changes to the base branch. 

The refactor is complete, and created a new branch from that, `ux-design`, to make it pretty üòâ 

I know you guys are busy this week, just a heads up ‚ò∫Ô∏è ",kimberlythegeek,18633586,2016-12-09T18:19:06Z,NONE,True,2,0,1,GitHub dashboard for Firefox Test Engineering,HTML,6f4911d54089591ddaa3980ff102012f6283b327,added links to nav menu
7,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,400e4f590b4ba5db43d52664afe948867428e46a,changed array of urls to array of object literals
8,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,361ed2ae57b162acad3435d3102ca351a00804b8,rewriting main.js to use 'the angular way'
9,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,1f95361283a0cb11458b5cbb177ac2a9cf142a74,"instatiated custom directives for repos, issues, and pull requests"
10,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,dc61569ea79f2e7e4ce4d7b50f0b369037aa9e3e,changed array of strings to array of object literals. temporary file while restructuring app
11,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,574edaea50d9893ccba69fb2edef738ce2bcd4e3,built IssueFeed service and controller; added custom directives
12,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,0e3fd4a1fefaae518c9aa6314141d11c752255b4,resolved conflict with css style
13,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,f3e778dff90fde279ca53bc248adcc8adfbc2d65,created templates for custom directives
14,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,707a3f2b6cd5bf216be6ccaf1b0e13615a5083f4,now has navigation and github-repository directive
15,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,9e831437d8ee0158b5f667d07dcf575e073c6fbc,reverted file
16,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,32b67e94b536b11c7b55f77daf92395f6f31151e,"added Feed service and controller, and custom directives"
17,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,f646e07de12b9ad929bad4e7f1d93bf187bfa33d,added files to project instead of using cdn
18,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,af9fc11678208c46678c24e66c3210b8983475e7,setting up files for restructuring app
19,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,1c3123b0863dc35b6b54aec8ac7f495e8eb28b09,removed typo
20,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,5647c10150dbef82973d22e036c053015b13a0ee,"changed Issues and Pull Requests in nav to ng-click, plan to use as filter"
21,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,0438971def35692c564c45e1dab7810920357ab8,"added toggle show function for each repo, added issues array to repo object only if issues found"
22,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,1238a3ef462a34ecd1e87c1ef7ebec9e45952482,enabled show/hide. attempting to add filter for pull requests
23,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,0b1c24973892875918b470563c5bb5d160521331,added github fork icon to Fork on Github link
24,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,3a308d1e3f509660ffb14377a17829173628bfd8,added link to repository next to repo's title
25,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,b46b76ddbeef1138c3e7457fd9f5d254b184e028,changed color of github repo link
26,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,02c7d896caac95483a61b3856d6bb23474f5d86c,added break-word to issues so text doesn't overflow
27,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,e25788672218d2665c1b58109c479774b1b70b01,refactored http calls. hasPullRequests() function
28,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,923b74f4b87b4005624c5b085aa9ca0970ce494a,changed ng-if hasPullRequests() statement
29,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,4f3633631c4f72eb513dfcde4ce5d4c503874b47,added href to issues & pull requests
30,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,0fe63b8993f0e6d51e103704a0821a8907b8644a,working on filter functionality
31,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,ff316f0a5ab889af71bb471de6fa9b7e8fad3a9d,working on filter functionality
32,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,c954484415180dbb70fa1ab60d14d730f95b369e,working on filter functionality
33,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,9aa8ef14597afe5fab7cacd4dbe81c3771c3d553,remove unused directive files
34,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,86ce0af368b8c365a29cfa98b990cf2aa278eec2,notes on refactoring app
35,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,9a01060e70418442eca2bc4d22f2752cdb50173e,notes on refactoring app
36,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/78,78,Angular ify,"_Note: There are still style changes I'd like to make, but this branch is functionally on par with the current one. Default view of issues is now set to collapsed, and repos will not show if they contain no issues meeting the filter criteria._

__Notes on current code base:__
<a href=""http://docs.google.com/gview?url=https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf&embedded=true"">View on Google Docs</a>
[Download PDF](https://github.com/mozilla/fxtest-dashboard/files/593192/fxtest-dashboard-angularify.pdf)


_I welcome your feedback._

 _/kimberlythegeek_

___

# Notes on App Refactor

###### Rewrite App to use the ""Angular way""
###### Reduce Redundant Code
###### Improve Efficiency & Data Organization
###### Make Code More Modular & Reusable

## Contents

- [config.json](#configjson)
- [main.js](#mainjs)
  - [IIFE](#iife)
  - ['use strict'](#use-strict)
  - [Instantiation](#instantiation)
  - [Dependency Injection](#dependency-injection)
  - [DOM Manipulation](#dom-manipulation)
  - [jQuery](#jquery)
  - [$routeProvider](#routeprovider)
- [aggregator.js](#aggregatorjs)
- [Issues Addressed](#issues-addressed)
    - [#52](#issue-52)
    - [#60](#issue-60)
- [Mozilla Style Guides](#mozilla-style-guides)

___

# config.json

```
{
  ""repos"": [
    ""https://github.com/mozilla/Addon-Tests"",
    ""https://github.com/mozilla/bidpom"",
    ""https://github.com/mozilla/fxapom"",
    ""https://github.com/mozilla/fxtestbot"",
    ""https://github.com/mozilla/hello-tests"",
    ""https://github.com/mozilla/moz-grid-config"",
    ""https://github.com/mozilla/mozillians-tests"",

    .....

  ],
  ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Rather than an array of URLs, I restructed the `repos` array to contain Object Literals.
Including `https://github.com/` in every entry is redundant, becuase it will always be the same.

This also adds the redundant task of extracting the `owner` and `name` of the repository from each entry.

The new structure is as follows:

```
{
  ""repos"": [
      {
          ""owner"": ""mozilla"",
          ""name"": ""Addon-Tests""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""bidpom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxapom""
      },
      {
          ""owner"": ""mozilla"",
          ""name"": ""fxtest-dashboard""
      },

      .....

      ],
      ""api_token"": ""692aadd2c9789a337c4d3544787f101ad8c35bc7""
}
```

Within the FeedController, the `""repos""` array also becomes the data structure to hold the array of issues for each repository, so each repo object also contains its own issues. The original app contatined two separate arrays.

The `issues` array  is _only_ added to each `repo` object _if open issues exist_.

___

# main.js

### IIFE
Wrapping the code in an [IIFE](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression)
`()();` prevents declared variables and functions from overflowing out of the scope.

### 'use strict'
Specifying `'use strict';` will throw errors that will otherwise have been ignored.


### ""Modularized""
I moved all module artifacts&#8212;controllers, directives, services, etc.&#8212;into separate files.
This both improves organization, and improves code reusability.

All module artifact files are found in `src/dashboard/`, following the pattern of `[name].controller.js`, `[name].filter.js`, `[name].template.html`, etc.

### Dependency Injection
The app is currently lacking dependency injection on both controllers&#8212;
`FeedController.$inject = ['$scope', 'GitHubIssueFeedService']` which protects the code from minification.

### DOM Manipulation

Throughout the app, there are several places where the code is directly manipulating the DOM, as with jQuery.
Being an [MVVM Framework](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel), this is not
recommended, as this can be done dynamically with AngularJS.

### jQuery

Much of the logic in the app is done via jQuery, not Angular. There are much simpler and more efficent
ways to implement the functionality using controllers, services, directives, etc.

### $routeProvider

Using `$routeProvider` (main.js line 15) is unnecessary for this app. Instead of
having two separate pages for Issues and Pull Requests, (since pull requests are issues),
you can use the same template and filter for pull requests when viewing the Pull Requests Page.

### Redundant Code
There are many places in the app where redundant code is used.

- IssuesController & PullRequestsController
  - These controllers are virtually the same, except the latter filters the data down to just pull requests.
  - The logic of showing only pull requests can be done using Angular filters and `ng-if` statements.
  - The controllers also set up redundant data structures, when all of the data
  can be accessed within the objects retrieved from the API


- Within the Controllers, there is a `forEach` loop (lines 65 & 165) that sets up
the display properties (should issue/repository be shown or not?). This can be done
automatically and dynamically with AngularJS.

- Line 85: `$scope.toggleRepo` is a function to show/hide repository when arrow
is clicked. Can be done using Angular's `ng-click` and `ng-show`.

- Line 89: `$scope.showHideIssues` is a function that loops through all of the data
every time something changes to determine whether or not it should be shown. All
it is unnecessary, the logic can be implemented using Angular filters and directives.

### Custom Directives

I have created several custom directives for blocks of code that are reused, i.e. `<github-repository>`
 and `<filter-list>`. Directives are comprised of a declaration file `[name].directive.js`, and a template file `[name].template.html`.

### Custom Service

I creatd the `issueFeed` service to handle JSON calls, passing the data to the `FeedController`.
___

# aggregator.js

This file handles most of the logic. All of the code in this file can be
incorporated into main.js within controllers, services, filters, etc. It makes
the API calls, and declares the data structures for the repositories and issues.

It is also guilty of using jQuery for almost all of the logic. Everything in
I have broken down into functions within GitHubIssueFeedService and FeedController.

Instead of using jQuery's getJSON method, we can utilize Angular's `$http` service.
This also eliminates the need for the paramaters in our API URL, as the $http service
can take `params: {}` and parse them appropriately.
___

# Issues Addressed

### Issue #52

While creating filter functionality, I decided to also address [Issue #52](https://github.com/mozilla/fxtest-dashboard/issues/52) to avoid rewriting the filters later.

Is Assigned filter is now a checkbox. Uncheck All links have been added.

### Issue #60

Also addressing this issue to avoid later rewrite. Labels are now pulled from the found open issues  [Issue #60](https://github.com/mozilla/fxtest-dashboard/issues/60)

___

# Mozilla Style Guides


I have begun editing all of the CSS, HTML, and JS to follow Mozilla's
[style guides](http://mozweb.readthedocs.io/en/latest/reference/index.html).

I also add comments next to closing tags in HTML, as a preference, to make it
easier on both myself and anyone else who may read the code after me.
",kimberlythegeek,18633586,2016-12-02T06:11:06Z,NONE,False,1001,866,39,GitHub dashboard for Firefox Test Engineering,HTML,436d1b620f6068f784aee0f545d700bc1c239984,notes on refactoring app
37,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/76,76,Issues 75,"Fix for Issues #75 

Ensures avatars never appear larger than 60 x 60",kimberlythegeek,18633586,2016-11-15T15:17:52Z,NONE,True,13,6,3,GitHub dashboard for Firefox Test Engineering,HTML,2c19957bac1f82f06c55973d47fa30a85803eff4,set width & max-width of avatars
38,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/76,76,Issues 75,"Fix for Issues #75 

Ensures avatars never appear larger than 60 x 60",kimberlythegeek,18633586,2016-11-15T15:17:52Z,NONE,True,13,6,3,GitHub dashboard for Firefox Test Engineering,HTML,5fcc2f6be1df3631172f7caa384ddeecd760089f,added bootstrap xs and sm grid classes for avatars
39,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,683b833bd0ae81257bca89026e67a19dd6000d25,added bootstrap font files to fix 404
40,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,351266b07f989468fdb091c41933cb90180f52bd,used new fontawesome embed code to fix 404
41,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,83ea6557c03d61d882addbc2495fef6b6d50ea94,changed src to ng-src on img to fix 404
42,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,725df227618c24da8a405b5d759e113fd016f186,"changed color of github repo link, set cursor:pointer only while hovering show/hide arrows"
43,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,9e50d3a0bff48d77d94f1029d762e575180e3b31,added github fork icon to Fork on Github link
44,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/74,74,Fixed 404 errors & Added link to repository,"Solves Issue #65 
The CDN embed code for Font Awesome was throwing a 404. Replaced it with my own, appears to be working fine.

The issues.html and pullrequests.html pages were using `img src=""{{ issue.assignee.avatar_url }}""`

Causes a 404 because the HTML is processed before the Javascript is compiled. Images display fine, but still throws an error. 

Repaced `src` with angular directive `ng-src`

Bootstrap was looking for its font files in `fonts/`, which did not exist. downloaded bootstrap's font files to fix 404

Solves Issue #58 
Update:
Also added link to Github Repo next to each repository's title
To do this, I removed the show/hide toggle from the entire title, and instead restricted it to the arrow only. Must click arrow to toggle show

Added fork icon next to ""fork on github"" link in nav


<img src=""https://cloud.githubusercontent.com/assets/18633586/20291153/9bc6fe9c-aaa1-11e6-8231-9596b8289421.png"" width=""300"" />",kimberlythegeek,18633586,2016-11-13T19:40:35Z,NONE,True,311,11,9,GitHub dashboard for Firefox Test Engineering,HTML,fb6b4597ff043c41cd8e9140816e792a6b0f7573,added link to repository next to repo's title. *must* click arrow now to show/hide
45,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/73,73,Fix GitHub repo,@stuartphilp @davehunt @rbillings @m8ttyB r?,stephendonner,387249,2016-11-03T17:38:09Z,NONE,True,1,1,1,GitHub dashboard for Firefox Test Engineering,HTML,369da1b19807ee5e17917f20aadb69ed11482408,Fix GitHub repo
46,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/72,72,Add fxtestbot to dashboard,,davehunt,122800,2016-10-24T13:55:24Z,MEMBER,True,2,1,2,GitHub dashboard for Firefox Test Engineering,HTML,f68ca1d6014b3f6c7b6baff8c0f31fe9131b8ea8,Fix link in README
47,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/72,72,Add fxtestbot to dashboard,,davehunt,122800,2016-10-24T13:55:24Z,MEMBER,True,2,1,2,GitHub dashboard for Firefox Test Engineering,HTML,ec9725f2b2b7b90246a9cc1e7bdf5a28fa954f92,Add fxtestbot to dashboard
48,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/71,71,Remove unused files,"Should address https://github.com/mozilla/mozwebqa-dashboard/issues/55

@davehunt r?
",stephendonner,387249,2016-09-14T14:54:23Z,NONE,True,0,2865,13,GitHub dashboard for Firefox Test Engineering,HTML,0167f32d67058f3b0be4bde0ad930dd23b88c44d,Remove unused files
49,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/70,70,Remove unused dumps directory,"Not sure which other files/directories are unused, but this should help address at least part of https://github.com/mozilla/mozwebqa-dashboard/issues/55
",stephendonner,387249,2016-09-13T20:15:35Z,NONE,True,0,419,16,GitHub dashboard for Firefox Test Engineering,HTML,14e3b93f8de5de299a8ab203131c0668ec2e66a3,Remove unused dumps directory
50,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/69,69,Removed One and Done references.,,rbillings,737878,2016-09-09T17:53:04Z,COLLABORATOR,True,0,2,2,GitHub dashboard for Firefox Test Engineering,HTML,93ca91af394025e96b386ca0944f6a9d5d14d47e,Removed One and Done references.
51,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/68,68,Removing One and Done,,rbillings,737878,2016-09-09T16:07:23Z,COLLABORATOR,False,79,52,2,GitHub dashboard for Firefox Test Engineering,HTML,ba619ccd3b3e19cb318d660c1e406427c9c158d3,Removing One and Done
52,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/67,67,Removed One and Done as site is being retired.,,rbillings,737878,2016-09-09T15:55:08Z,COLLABORATOR,False,42,5,2,GitHub dashboard for Firefox Test Engineering,HTML,58fa4c7c61495876e238a182f3c6153fb49fe5b2,Removed One and Done as site is being retired.
53,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/66,66,rename and update some variables for the test-eng team rename,"a quick once over, probably missed some things :P

@davehunt @m8ttyB anyone else :) r?
",stuartphilp,2964961,2016-08-26T20:33:15Z,NONE,True,12,11,4,GitHub dashboard for Firefox Test Engineering,HTML,57aeb23d9c51db26c176211b38ef0448164569c9,rename and update some variables for the test-eng team rename
54,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/63,63,Update hard-coded labels to reflect recent changes,"Ideally these would be dynamic, but until they are this matches the most useful core labels.
",davehunt,122800,2016-07-06T16:58:27Z,MEMBER,True,2,3,1,GitHub dashboard for Firefox Test Engineering,HTML,ae30cfe0bfc34cad3a7b49ccd4c521811406a889,"Update hard-coded labels to reflect recent changes
Ideally these would be dynamic, but until they are this matches the most useful core labels."
55,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/56,56,Remove pytest-mozwebqa due to the project being retired,,davehunt,122800,2016-06-27T12:57:40Z,MEMBER,True,0,1,1,GitHub dashboard for Firefox Test Engineering,HTML,3a2069592d7427a74aad94cc16f3fe039170d1db,Remove pytest-mozwebqa due to the project being retired
56,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/54,54,Fixes issue #49 - Link to assignee page on GitHub,,justinpotts,2042849,2016-06-16T16:12:13Z,COLLABORATOR,True,9,37,3,GitHub dashboard for Firefox Test Engineering,HTML,30050adb7ad9c0c563060e472788fc13bb337a73,Fixes issue #49 - Link to assignee page on GitHub
57,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/53,53,Update README,"Fixes issue #48 
",justinpotts,2042849,2016-06-16T11:31:01Z,COLLABORATOR,True,2,60,1,GitHub dashboard for Firefox Test Engineering,HTML,bd5295bac9ffb25de9146174a905db9ce00f7113,Update README
58,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/47,47,Add relative timestamps to issues and pull requests,"Fixes issue #42 
",justinpotts,2042849,2016-06-15T09:30:48Z,COLLABORATOR,True,4,4,2,GitHub dashboard for Firefox Test Engineering,HTML,31ac0ca26828820a9a01eb51ef4a45b095552b76,Add relative timestamps to issues and pull requests
59,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/47,47,Add relative timestamps to issues and pull requests,"Fixes issue #42 
",justinpotts,2042849,2016-06-15T09:30:48Z,COLLABORATOR,True,4,4,2,GitHub dashboard for Firefox Test Engineering,HTML,bf5d1a151013a27aa2cd60e4811e51fd5278e79c,Resolve merge conflicts
60,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/46,46,Add Fork on GitHub link to repo to sidebar,"Fixes issue #44 
",justinpotts,2042849,2016-06-15T09:09:02Z,COLLABORATOR,True,3,0,1,GitHub dashboard for Firefox Test Engineering,HTML,1666c783d4b94153dcd5a9fb585b96f76229764b,Add Fork on GitHub link to repo to sidebar
61,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/46,46,Add Fork on GitHub link to repo to sidebar,"Fixes issue #44 
",justinpotts,2042849,2016-06-15T09:09:02Z,COLLABORATOR,True,3,0,1,GitHub dashboard for Firefox Test Engineering,HTML,92c3b4ce543929b63343126f17217ea7e2d65fdf,Resolve merge conflicts
62,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/45,45,Fix indentations and style for HTML files templates,,justinpotts,2042849,2016-06-15T09:03:50Z,COLLABORATOR,True,246,242,3,GitHub dashboard for Firefox Test Engineering,HTML,a543da91b4efc320a39ecb6d9ad55bac11c26e94,Fix indentations and style for HTML files templates
63,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/41,41,Add relative timestamps to PR and Issue refresh info,,justinpotts,2042849,2016-06-10T23:23:55Z,COLLABORATOR,True,6,4,4,GitHub dashboard for Firefox Test Engineering,HTML,b502038b4eb62119fc888f5d895e8aed7ed0bf15,Add relative timestamps to PR and Issue refresh info
64,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/41,41,Add relative timestamps to PR and Issue refresh info,,justinpotts,2042849,2016-06-10T23:23:55Z,COLLABORATOR,True,6,4,4,GitHub dashboard for Firefox Test Engineering,HTML,eef0bbdacc04995c9fea2a5d80c41adf62ac2d17,Add HTTPS to Moment CDN
65,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/40,40,Hide repos if they have no PRs or Issues,,justinpotts,2042849,2016-06-10T20:38:22Z,COLLABORATOR,True,73,69,2,GitHub dashboard for Firefox Test Engineering,HTML,2c7505d7fb1f92fbac3fc024e3078e77caa23244,Hide repos if they have no PRs or Issues
66,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/35,35,Redesigned Dashboard!,"Live preview: http://justinpotts.github.io/mozwebqa-dashboard/#/issues
",justinpotts,2042849,2016-06-07T20:58:22Z,COLLABORATOR,True,620,7669,20,GitHub dashboard for Firefox Test Engineering,HTML,59d32d47d7745e24acf9d77cf097790decbbabe0,"Redesign updates, including profile pictures, labels, issue counts, and collapsing."
67,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/35,35,Redesigned Dashboard!,"Live preview: http://justinpotts.github.io/mozwebqa-dashboard/#/issues
",justinpotts,2042849,2016-06-07T20:58:22Z,COLLABORATOR,True,620,7669,20,GitHub dashboard for Firefox Test Engineering,HTML,186578cf9b4c0fa2b354239eb55bb94dad8dc60a,Fix merge conflicts
68,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/35,35,Redesigned Dashboard!,"Live preview: http://justinpotts.github.io/mozwebqa-dashboard/#/issues
",justinpotts,2042849,2016-06-07T20:58:22Z,COLLABORATOR,True,620,7669,20,GitHub dashboard for Firefox Test Engineering,HTML,e23e5b561e01556cbd2b1455f7473e298a6ad316,Minor UI tweaks from code review
69,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/35,35,Redesigned Dashboard!,"Live preview: http://justinpotts.github.io/mozwebqa-dashboard/#/issues
",justinpotts,2042849,2016-06-07T20:58:22Z,COLLABORATOR,True,620,7669,20,GitHub dashboard for Firefox Test Engineering,HTML,8a91406acd2ad4eb9fe9fd83763cb30a676e729b,Add pointer cursor to PR repo titles too
70,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/35,35,Redesigned Dashboard!,"Live preview: http://justinpotts.github.io/mozwebqa-dashboard/#/issues
",justinpotts,2042849,2016-06-07T20:58:22Z,COLLABORATOR,True,620,7669,20,GitHub dashboard for Firefox Test Engineering,HTML,7669b8d27c373b46ce4e23190ce807a6c20e7cf0,Update label borders and coloring
71,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/34,34,Remove Bouncer and SUMO,"Both have now moved to their dev repos.

@rbillings @justinpotts r?
",stephendonner,387249,2016-05-12T20:07:43Z,NONE,True,0,2,1,GitHub dashboard for Firefox Test Engineering,HTML,cce2972b1ad087baf19df1b3f454ff47b38e3d9d,"Remove Bouncer and SUMO

Both have now moved to their dev repos."
72,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/33,33,Fix GitHub string case,,stephendonner,387249,2016-05-12T17:27:13Z,NONE,True,2,2,2,GitHub dashboard for Firefox Test Engineering,HTML,ee8c4639c5b12cb3791c91a15b9099c8b6f2fb1e,OMG OCD
73,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/33,33,Fix GitHub string case,,stephendonner,387249,2016-05-12T17:27:13Z,NONE,True,2,2,2,GitHub dashboard for Firefox Test Engineering,HTML,2143d06d8118213383afc9d5c7d26b1eb44a5d4e,Fix GitHub case
74,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/31,31,"Updated to remove affiliates, marketplace, mktplc gaia, mcom",,rbillings,737878,2016-05-06T21:28:33Z,COLLABORATOR,True,0,4,1,GitHub dashboard for Firefox Test Engineering,HTML,e620105bbed2bdd646751a9ad4de3b3c15562e63,"Updated to remove affiliates, marketplace, mktplc gaia, mcom"
75,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/30,30,Updated One and Done test repo,"The tests moved into the main repo.
",rbillings,737878,2016-05-05T16:54:39Z,COLLABORATOR,True,1,1,1,GitHub dashboard for Firefox Test Engineering,HTML,8123820d9ec60db57b5f8398b83fe90269d768ae,Updated One and Done test repo
76,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/28,28,remove projects,"Per our discussion we're pairing down projects that we actively support/monitor. Removing these projects from our dashboard.
",m8ttyB,63193,2014-12-09T23:10:16Z,NONE,True,2,9,1,GitHub dashboard for Firefox Test Engineering,HTML,37c7019e648fd5221be7d086c79852a22cf5caf3,remove projects
77,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/27,27,Fix bug that label filters and issues don't initially load.,"A continuation from #26 and #19.
This also fixed that pull request labels weren't showing as well as some logic with the 'All' filter for 'Assignees'.
Some of the initialization that didn't require the ajax data was moved outside of the callback.
",dchunwong,2454917,2014-05-30T21:17:48Z,COLLABORATOR,True,27,21,3,GitHub dashboard for Firefox Test Engineering,HTML,45d2179032dd13db14dd18178743b0124a9bc787,"-Fixed bug that issues and label filters wouldn't show up on initial load.
-Fixed Pull request label not appearing on pull requests.
-Fixed logic on some filters"
78,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/26,26,Basic Javascript Github Issues Aggregator + small fixes,"This is based off of #19 though it uses Javascript instead to fetch the data client-side without the need of a cron job to update the data. 

-Currently doesn't work on the initial load likely due to a scope issue, but works fine after selecting a non-default dropdown item.
-Added read-only API token to config.json

-Fixed some logic on what issues to display in main.js.
-Added missing </img> tag in issues template.
",dchunwong,2454917,2014-05-30T00:15:48Z,COLLABORATOR,True,91,7,5,GitHub dashboard for Firefox Test Engineering,HTML,ed87c6e928adf8bee76a3829a7ae6823af528020,"Basic aggregator

-Fixed some logic on what issues to display.
-Added missing </img> tag in issues template.
-Created a js version of the generator file for issues so that it's updated on load client-side. Currently doesn't do the initial load likely due to a scope issue, but works after selecting a dropdown.
-added read-only api token to config.json

*added new line at end of file"
79,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/25,25,Upgrade from Hyphenator 3.3.0 to Hyphenator 4.2.0,"Change Log
https://code.google.com/p/hyphenator/
Hyphenator Version 4.2.0:

This minor release brings the following changes:

added support for Romanian (thanks to irragal)
hiding and unhiding of elements is now done by adding classes
patterns stored in DOMStorage are now versioned (fixed  issue169 )
Hyphenator.js now uses a modalDialog to ask for languages if o language is defined (issue171)
there are two new functions that can be defined: onbeforewordhyphenation and onafterwordhyphenation
And some bugfixes:
fixed issue when accessing external style sheets (fixed issue164)
togglebox works when elements are hyphenated by CSS (fixed  issue168 )
hyphenation now works for elements with a supported language on pages that have a unsupported main language (fixed  issue177 )
elements now hide during hyphenation when using a selector function (fixed  issue172 )
some general refactoring and code changes
",vivekkiran,5557539,2014-04-09T12:49:37Z,NONE,False,2973,185,3,GitHub dashboard for Firefox Test Engineering,HTML,9fbcd944a82423da19a027bb6b7b8ab942f2c4c5,"Upgrade from Hyphenator 3.3.0 to Hyphenator 4.2.0

Change Log
https://code.google.com/p/hyphenator/
Hyphenator Version 4.2.0:

This minor release brings the following changes:

added support for Romanian (thanks to irragal)
hiding and unhiding of elements is now done by adding classes
patterns stored in DOMStorage are now versioned (fixed  issue169 )
Hyphenator.js now uses a modalDialog to ask for languages if o language is defined (issue171)
there are two new functions that can be defined: onbeforewordhyphenation and onafterwordhyphenation
And some bugfixes:
fixed issue when accessing external style sheets (fixed issue164)
togglebox works when elements are hyphenated by CSS (fixed  issue168 )
hyphenation now works for elements with a supported language on pages that have a unsupported main language (fixed  issue177 )
elements now hide during hyphenation when using a selector function (fixed  issue172 )
some general refactoring and code changes"
80,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/25,25,Upgrade from Hyphenator 3.3.0 to Hyphenator 4.2.0,"Change Log
https://code.google.com/p/hyphenator/
Hyphenator Version 4.2.0:

This minor release brings the following changes:

added support for Romanian (thanks to irragal)
hiding and unhiding of elements is now done by adding classes
patterns stored in DOMStorage are now versioned (fixed  issue169 )
Hyphenator.js now uses a modalDialog to ask for languages if o language is defined (issue171)
there are two new functions that can be defined: onbeforewordhyphenation and onafterwordhyphenation
And some bugfixes:
fixed issue when accessing external style sheets (fixed issue164)
togglebox works when elements are hyphenated by CSS (fixed  issue168 )
hyphenation now works for elements with a supported language on pages that have a unsupported main language (fixed  issue177 )
elements now hide during hyphenation when using a selector function (fixed  issue172 )
some general refactoring and code changes
",vivekkiran,5557539,2014-04-09T12:49:37Z,NONE,False,2973,185,3,GitHub dashboard for Firefox Test Engineering,HTML,13a74ce8bb15528a359776bf19088903a69f2c47,Upgraded AngularJS 1.1.5 to 1.3.0
81,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/25,25,Upgrade from Hyphenator 3.3.0 to Hyphenator 4.2.0,"Change Log
https://code.google.com/p/hyphenator/
Hyphenator Version 4.2.0:

This minor release brings the following changes:

added support for Romanian (thanks to irragal)
hiding and unhiding of elements is now done by adding classes
patterns stored in DOMStorage are now versioned (fixed  issue169 )
Hyphenator.js now uses a modalDialog to ask for languages if o language is defined (issue171)
there are two new functions that can be defined: onbeforewordhyphenation and onafterwordhyphenation
And some bugfixes:
fixed issue when accessing external style sheets (fixed issue164)
togglebox works when elements are hyphenated by CSS (fixed  issue168 )
hyphenation now works for elements with a supported language on pages that have a unsupported main language (fixed  issue177 )
elements now hide during hyphenation when using a selector function (fixed  issue172 )
some general refactoring and code changes
",vivekkiran,5557539,2014-04-09T12:49:37Z,NONE,False,2973,185,3,GitHub dashboard for Firefox Test Engineering,HTML,d66ad4025ca49225bfb739989f74303dead72d15,"Upgraded Modernizer 2.6.2 to 2.7.1 Respond.js v1.1.0 to 1.4.2

Respond.js
https://github.com/scottjehl/Respond"
82,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/24,24,Upgrade from jquery-1.10.1.min.js to jquery-2.1.0.min.js,"CHANGE LOG

jQuery 2.1

Ajax
#14207: Ajax error defaults to status 404

Build
#13119: Make jQuery releases available via npm
#13768: Error trying to load jQuery from node.js
#14340: Remove oldIE code from support tests on master

Core
#14313: Optimize jQuery.merge for size

Event
#14544: Remove elem reference from event handler

jQuery 2.0.0 Changelog
Ajax
#12838: domManip script evaluation implementations with alternate signatures
#13276: In IE 9/10 $.parseXML() returning document object instead of XMLDOMDocument
#13292: $.ajax with 1.9.0 doesn‚Äôt call anymore success function in case of 204
#13306: File input added to serialized forms caused a change in behavior and only halfway follows spec
#13388: Ajax request not returning responseXML

Attributes
#12072: Remove Firefox deprecated nodeValue, getAttributeNode, specified

Build
#12656: Make event shorthands an excludable module
#13316: Check against jquery.min.js with TestSwarm
#13335: ‚Äúuse strict‚Äù; break asp.net ajax postacks in FF
#13741: Make wrap*/unwrap methods an optional module
#13744: Move jQuery.fn.size() to deprecated
#13755: Update .jshintrc to match style guide
#13759: Better undefined gzip compression
#13760: getComputedStyle no longer works in node with jsdom
#13776: License comment is breaking the SourceMap

Core
#13356: Consistently clean up after .ready() handler

Css
#13310: hide() and fadein() corrupt the css display value

Deferred
#13150: Be able to determine if $.Callback() has functions

Effects
#12846: overflow:hidden is not removed when .stop() is called
#13183: Wrong animation initial value calculation (1.9.0rc1)
#13483: Issue with stop(true).slideDown() during slideUp()

Event
#13360: Creating String.prototype.namespace can cause an exception in jQuery.Event
#11570: Move element cache to the element[expando] to avoid cleanup and reduce code.
#13143: e.target can be a text node on mousewheel
#13554: Move [un]bind & [un]delegate to event-alias

Manipulation
#13232: In 2.0beta1, using html() function on a tbody selector yields insertion of new tbody
#13233: Unexpected behavior when iterating over and manipulating detached nodes in jquery 1.9
#13282: QtWebKit ‚Äî TypeError: ‚Äò[object Object]‚Äò is not a valid argument for ‚ÄòFunction.prototype.apply‚Äô (evaluating ‚Äòelem.nodeType‚Äô)
#13596: .replaceWith should always remove the context set
#13721: remove(‚Äú:nth-child(1)‚Äù) works differently than filter(‚Äú:nth-child(1)‚Äù).remove()
#13722: .replaceWith argument handling is inconsistent with other manipulation methods
#13779: .remove() changed in beta3 ‚Äì now remove nodes in reverse doc order

Selector
#13434: Create querySelectorAll/matchesSelector selector option
#13331: jQuery.fn.add returns incorrect order in Chrome and Safari
#13378: ie8 & ie9 iframe ‚Äì .filter(‚Äú:focus‚Äù) ‚Äì document.activeElement returns unspecified error.
#13420: jQuery 1.9.1 fails to filter SVG parent nodes by class name when using .parent() and .closest()
#13499: Descendant selector fails when searched ID doesn‚Äôt exists but NAME does (IE7 only)
#13505: jquery#add: seems to get items in collection out of order on larger lists

Support
#10814: make support as lazy as possible with closure in mind
#12040: Test against Content Security Policy (CSP)
#13089: support adds zoom style to body in Chrome/Safari
#13743: Remove jQuery.support.boxModel

Traversing
#13265: parent method fails with text nodes in IE10
#13332: .closest(‚Äú*‚Äù) yields input even for non-element nodes
#13349: find function slower since 1.9.0, especially in chrome
",vivekkiran,5557539,2014-04-08T12:49:01Z,NONE,False,4,6,2,GitHub dashboard for Firefox Test Engineering,HTML,1a1f4b9bee3d0ed06b81954c06008e149dacad6a,"Upgrade from jquery-1.10.1.min.js to jquery-2.1.0.min.js

CHANGE LOG

jQuery 2.1

Ajax

#14207: Ajax error defaults to status 404
Build

#13119: Make jQuery releases available via npm
#13768: Error trying to load jQuery from node.js
#14340: Remove oldIE code from support tests on master
Core

#14313: Optimize jQuery.merge for size
Event

#14544: Remove elem reference from event handler
jQuery 2.0.0 Changelog
Ajax
#12838: domManip script evaluation implementations with alternate signatures
#13276: In IE 9/10 $.parseXML() returning document object instead of XMLDOMDocument
#13292: $.ajax with 1.9.0 doesn‚Äôt call anymore success function in case of 204
#13306: File input added to serialized forms caused a change in behavior and only halfway follows spec
#13388: Ajax request not returning responseXML
Attributes
#12072: Remove Firefox deprecated nodeValue, getAttributeNode, specified
Build
#12656: Make event shorthands an excludable module
#13316: Check against jquery.min.js with TestSwarm
#13335: ‚Äúuse strict‚Äù; break asp.net ajax postacks in FF
#13741: Make wrap*/unwrap methods an optional module
#13744: Move jQuery.fn.size() to deprecated
#13755: Update .jshintrc to match style guide
#13759: Better undefined gzip compression
#13760: getComputedStyle no longer works in node with jsdom
#13776: License comment is breaking the SourceMap
Core
#13356: Consistently clean up after .ready() handler
Css
#13310: hide() and fadein() corrupt the css display value
Deferred
#13150: Be able to determine if $.Callback() has functions
Effects
#12846: overflow:hidden is not removed when .stop() is called
#13183: Wrong animation initial value calculation (1.9.0rc1)
#13483: Issue with stop(true).slideDown() during slideUp()
Event
#13360: Creating String.prototype.namespace can cause an exception in jQuery.Event
#11570: Move element cache to the element[expando] to avoid cleanup and reduce code.
#13143: e.target can be a text node on mousewheel
#13554: Move [un]bind & [un]delegate to event-alias
Manipulation
#13232: In 2.0beta1, using html() function on a tbody selector yields insertion of new tbody
#13233: Unexpected behavior when iterating over and manipulating detached nodes in jquery 1.9
#13282: QtWebKit ‚Äî TypeError: ‚Äò[object Object]‚Äò is not a valid argument for ‚ÄòFunction.prototype.apply‚Äô (evaluating ‚Äòelem.nodeType‚Äô)
#13596: .replaceWith should always remove the context set
#13721: remove(‚Äú:nth-child(1)‚Äù) works differently than filter(‚Äú:nth-child(1)‚Äù).remove()
#13722: .replaceWith argument handling is inconsistent with other manipulation methods
#13779: .remove() changed in beta3 ‚Äì now remove nodes in reverse doc order
Selector
#13434: Create querySelectorAll/matchesSelector selector option
#13331: jQuery.fn.add returns incorrect order in Chrome and Safari
#13378: ie8 & ie9 iframe ‚Äì .filter(‚Äú:focus‚Äù) ‚Äì document.activeElement returns unspecified error.
#13420: jQuery 1.9.1 fails to filter SVG parent nodes by class name when using .parent() and .closest()
#13499: Descendant selector fails when searched ID doesn‚Äôt exists but NAME does (IE7 only)
#13505: jquery#add: seems to get items in collection out of order on larger lists
Support
#10814: make support as lazy as possible with closure in mind
#12040: Test against Content Security Policy (CSP)
#13089: support adds zoom style to body in Chrome/Safari
#13743: Remove jQuery.support.boxModel
Traversing
#13265: parent method fails with text nodes in IE10
#13332: .closest(‚Äú*‚Äù) yields input even for non-element nodes
#13349: find function slower since 1.9.0, especially in chrome"
83,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,a4d91b8cab2c1dee64d7bfeee270d7a0f33adf82,"upgrade from AngularJS v1.1.5 to AngularJS 1.3.0

https://github.com/angular/angular.js/blob/master/CHANGELOG.md
CHANGE LOG

1.3.0-beta.5 chimeric-glitterfication (2014-04-03)
Bug Fixes

$animate:
insert elements at the start of the parent container instead of at the end (1cb8584e, #4934, #6275)
ensure the CSS driver properly works with SVG elements (c67bd69c, #6030)
$parse: mark constant unary minus expressions as constant (7914d346, #6932)
Scope:
revert the __proto__ cleanup as that could cause regressions (71c11e96)
more scope clean up on $destroy to minimize leaks (d64d41ed, #6794, #6856, #6968)
ngClass: handle ngClassOdd/Even affecting the same classes (c9677920, #5271)
Breaking Changes

$animate: due to 1cb8584e, $animate will no longer default the after parameter to the last element of the parent container. Instead, when after is not specified, the new element will be inserted as the first child of the parent container.
To update existing code, change all instances of $animate.enter() or $animate.move() from:

$animate.enter(element, parent);

to:

$animate.enter(element, parent, angular.element(parent[0].lastChild));


1.2.16 badger-enumeration (2014-04-03)
Bug Fixes

$animate:
ensure the CSS driver properly works with SVG elements (38ea5426, #6030)
prevent cancellation timestamp from being too far in the future (35d635cb, #6748)
run CSS animations before JS animations to avoid style inheritance (0e5106ec, #6675)
$parse: mark constant unary minus expressions as constant (6e420ff2, #6932)
Scope:
revert the proto cleanup as that could cause regressions (2db66f5b)
more scope clean up on $destroy to minimize leaks (7e4e696e, #6794, #6856, #6968)
aggressively clean up scope on $destroy to minimize leaks (8d4d437e, #6794, #6856)
filter.ngdoc: Check if ""input"" variable is defined (a275d539, #6819)
input: don't perform HTML5 validation on updated model-value (b2363e31, #6796, #6806)
ngClass: handle ngClassOdd/Even affecting the same classes (55fe6d63, #5271)
Features

$http: add xhr statusText to completeRequest callback (32c09c1d, #2335, #2665, #6713)

1.3.0-beta.4 inconspicuous-deception (2014-03-28)
Bug Fixes

$animate:
prevent cancellation timestamp from being too far in the future (ff5cf736, #6748)
make CSS blocking optional for class-based animations (1bebe36a, #6674, #6739)
run CSS animations before JS animations to avoid style inheritance (2317af68, #6675)
Scope: aggressively clean up scope on $destroy to minimize leaks (f552f251, #6794, #6856)
doc-gen: Run Gulp on Windows too (47ba6014, #6346)
filter.ngdoc: Check if ""input"" variable is defined (4a6d4de5, #6819)
input: don't perform HTML5 validation on updated model-value (b472d027, #6796, #6806)
Features

$http: add xhr statusText to completeRequest callback (1d2414ca, #2335, #2665, #6713)
Breaking Changes

$animate: due to 1bebe36a,

Any class-based animation code that makes use of transitions and uses the setup CSS classes (such as class-add and class-remove) must now provide a empty transition value to ensure that its styling is applied right away. In other words if your animation code is expecting any styling to be applied that is defined in the setup class then it will not be applied ""instantly"" unless a transition:0s none value is present in the styling for that CSS class. This situation is only the case if a transition is already present on the base CSS class once the animation kicks off.

Before:

.animated.my-class-add {
  opacity:0;
  transition:0.5s linear all;
}
.animated.my-class-add.my-class-add-active {
  opacity:1;
}
After:

.animated.my-class-add {
  transition:0s linear all;
  opacity:0;
}
.animated.my-class-add.my-class-add-active {
  transition:0.5s linear all;
  opacity:1;
}
Please view the documentation for ngAnimate for more info.


1.3.0-beta.3 emotional-waffles (2014-03-21)
Bug Fixes

ngAnimate: support webkitCancelRequestAnimationFrame in addition to webkitCancelAnimationFrame (c839f78b, #6526)
$http: allow sending Blob data using $http (b8cc71d4, #5012)
$httpBackend: don't error when JSONP callback is called with no parameter (6680b7b9, #4987, #6735)
$rootScope: ng-repeat can't handle NaN values. #4605 (fb6062fb, #4605)
$rootScope: $watchCollection should call listener with old value (78057a94, #2621, #5661, #5688, #6736)
angular.bootstrap: allow angular to load only once (748a6c8d, #5863, #5587)
jqLite: inheritedData() now traverses Shadow DOM boundaries via the host property of DocumentFragment (8a96f317, #6637)
ngCookie: convert non-string values to string (36528310, #6151, #6220)
ngTouch: update workaround for Webkit quirk (bc42950b, #6302)
orderBy: support string predicates containing non-ident characters (37bc5ef4, #6143, #6144)
select: avoid checking option element's selected property in render (f40f54c6, #2448, #5994)
Features

$compile: add support for $observer deregistration (299b220f, #5609)
ngMock.$httpBackend: added support for function as URL matcher (d6cfcace, #4580)
Breaking Changes

$compile: due to 299b220f, calling attr.$observe no longer returns the observer function, but a deregistration function instead. To migrate the code follow the example below:
Before:

directive('directiveName', function() {
  return {
    link: function(scope, elm, attr) {
      var observer = attr.$observe('someAttr', function(value) {
        console.log(value);
      });
    }
  };
});
After:

directive('directiveName', function() {
  return {
    link: function(scope, elm, attr) {
      var observer = function(value) {
        console.log(value);
      };

      attr.$observe('someAttr', observer);
    }
  };
});
$httpBackend: due to 6680b7b9, the JSONP behavior for erroneous and empty responses changed: Previously, a JSONP response was regarded as erroneous if it was empty. Now Angular is listening to the correct events to detect errors, i.e. even empty responses can be successful.

v1.2.15 beer-underestimating (2014-03-21)
Bug Fixes

$$RAFProvider: check for webkitCancelRequestAnimationFrame (e84da228, #6526)
$$rAF: always fallback to a $timeout incase native rAF isn't supported (ee8e4a94, #6654)
$compile: support templates with thead and tfoot root elements (ca0ac649, #6289)
$http:
allow sending Blob data using $http (fbb125a3, #5012)
don't covert 0 status codes to 404 for non-file protocols (f108a2a9, #6074, #6155)
$rootScope:
ng-repeat can't handle NaN values. #4605 (e48c28fe, #4605)
$watchCollection should call listener with oldValue (3dd95727, #2621, #5661, #5688, #6736)
angular.bootstrap: only allow angular to load once (0d60f8d3, #5863, #5587)
jqLite: traverse host property for DocumentFragment in inheritedData() (98d825e1, #6637)
ngAnimate: setting classNameFilter disables animation inside ng-if (a41a2a1d, #6539)
ngCookie: convert non-string values to string (93d1c95c, #6151, #6220)
ngTouch: update workaround for desktop Webkit quirk (01a34f51, #6302)
orderBy: support string predicates containing non-ident characters (10d3e1e4, #6143, #6144)
select: avoid checking option element selected properties in render (dc149de9, #2448, #5994, #6769)

1.3.0-beta.2 silent-ventriloquism (2014-03-14)
Bug Fixes

$$rAF: always fallback to a $timeout in case native rAF isn't supported (7b5e0199, #6654)
$http: don't convert 0 status codes to 404 for non-file protocols (56e73ea3, #6074, #6155)
ngAnimate: setting classNameFilter disables animation inside ng-if (129e2e02, #6539)
Features

whitelist blob urls for sanitization of data-bound image urls (47ab8df4, #4623)

1.3.0-beta.1 retractable-eyebrow (2014-03-07)
Bug Fixes

$compile: support templates with thead and tfoot root elements (53ec5e13, #6289)
style: expressions in style tags (0609453e, #2387, #6492)
Features

input: support types date, time, datetime-local, month, week (46bd6dc8, #5864)
Breaking Changes

build: due to eaa1d00b, As communicated before, IE8 is no longer supported.
input: types date, time, datetime-local, month, week now always require a Date object as model (46bd6dc8, #5864)
For more info: http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html


1.2.14 feisty-cryokinesis (2014-03-01)
Bug Fixes

$animate:
delegate down to addClass/removeClass if setClass is not found (18c41af0, #6463)
ensure all comment nodes are removed during a leave animation (f4f1f43d, #6403)
only block keyframes if a stagger is set to occur (e71e7b6c, #4225)
ensure that animateable directives cancel expired leave animations (e9881991, #5886)
ensure all animated elements are taken care of during the closing timeout (99720fb5, #6395)
fix for TypeError Cannot call method 'querySelectorAll' in cancelChildAnimations (c914cd99, #6205)
$http:
do not add trailing question (c8e03e34, #6342)
send GET requests by default (267b2173, #5985, #6401)
$parse: reduce false-positives in isElement tests (5fe1f39f, #4805, #5675)
input: use ValidityState to determine validity (c2d447e3, #4293, #2144, #4857, #5120, #4945, #5500, #5944)
isElement: reduce false-positives in isElement tests (75515852)
jqLite:
properly toggle multiple classes (4e73c80b, #4467, #6448)
make jqLite('').contents() return iframe document, as in jQuery (05fbed57, #6320, #6323)
numberFilter: convert all non-finite/non-numbers/non-numeric strings to the empty string (cceb455f, #6188, #6261)
$parse: support trailing commas in object & array literals (6b049c74)
ngHref: bind ng-href to xlink:href for SVGAElement (2bce71e9, #5904)
Features

$animate: animate dirty, pristine, valid, invalid for form/fields (33443966, #5378)
Performance Improvements

$animate: use rAF instead of timeouts to issue animation callbacks (4c4537e6)
$cacheFactory: skip LRU bookkeeping for caches with unbound capacity (a4078fca, #6193, #6226)

1.2.13 romantic-transclusion (2014-02-14)
Bug Fixes

$animate: ensure $animate doesn't break natural CSS transitions (4f84f6b3, #6019)
$compile:
ensure element transclusion directives are linked with comment element (e7338d3f, #6006, #6101)
support templates with table content root nodes (e7338d3f, #2848, #1459, #3647, #3241)
input:
don't apply textInput to <input type=""file""> (a9fcb0d0, #6247, #6231)
setViewValue on compositionend (2b730271, #6058, #5433)
Features

filterFilter: support deeply nested predicate objects (b4eed8ad, #6215)
Breaking Changes

$animate:

due to 4f84f6b3, ngClass and {{ class }} will now call the setClass animation callback instead of addClass / removeClass when both a addClass/removeClass operation is being executed on the element during the animation.

Please include the setClass animation callback as well as addClass and removeClass within your JS animations to work with ngClass and {{ class }} directives.

due to cf5e463a, Both the $animate:before and $animate:after DOM events must be now registered prior to the $animate operation taking place. The $animate:close event can be registered anytime afterwards.

DOM callbacks used to fired for each and every animation operation that occurs within the $animate service provided in the ngAnimate module. This may end up slowing down an application if 100s of elements are being inserted into the page. Therefore after this change callbacks are only fired if registered on the element being animated.


1.2.12 cauliflower-eradication (2014-02-07)
Bug Fixes

$compile: retain CSS classes added in cloneAttachFn on asynchronous directives (5ed721b9, #5439, #5617)
$http:
ignore xhr.responseType setter exception if value is ""json"" (24699ee8, #6115, #6122)
update httpBackend to use ActiveXObject on IE8 if necessary (ef210e5e, #5677, #5679)
$locale: minor grammar amends for the locale locale_lt (95be253f, #6164)
$q: make $q.reject support finally and catch (074b0675, #6048, #6076)
docs: clarify doc for ""args"" in $broadcast and $emit (caed2dfe, #6047)
filterFilter: don't interpret dots in predicate object fields as paths (339a1658, #6005, #6009)
http: make jshint happy (6609e3da)
jqLite: trim HTML string in jqLite constructor (36d37c0e, #6053)
mocks:
rename mock.animate to ngAnimateMock and ensure it contains all test helper code for ngAnimate (4224cd51, #5822, #5917)
remove usage of $animate.flushNext in favour of queing (906fdad0)
always call functions injected with inject with this set to the current spec (3bf43903, #6102)
refactor currentSpec to work w/ Jasmine 2 (95f0bf9b, #5662)
ngMock: return false from mock $interval.cancel() when no argument is supplied (dd24c783, #6103)
ngResource:
don't filter ""$""-prefixed properties from ngResource requests/responses (d2e4e499, #5666, #6080, #6033)
don't append number to '$' in url param value when encoding URI (ce1f1f97, #6003, #6004)
Breaking Changes

The animation mock module has been renamed from mock.animate to ngAnimateMock. In addition to the rename, animations will not block within test code even when ngAnimateMock is used. However, all function calls to $animate will be recorded into $animate.queue and are available within test code to assert animation calls. In addition, $animate.triggerReflow() is now only available when ngAnimateMock is used.


1.2.11 cryptocurrency-hyperdeflation (2014-02-03)
Bug Fixes

$compile: retain CSS classes added in cloneAttachFn on asynchronous directives (5ed721b9, #5439, #5617)
$http: update httpBackend to use ActiveXObject on IE8 if necessary (ef210e5e, #5677, #5679)
$q: make $q.reject support finally and catch (074b0675, #6048, #6076)
filterFilter: don't interpret dots in predicate object fields as paths (339a1658, #6005, #6009)
mocks: refactor currentSpec to work w/ Jasmine 2 (95f0bf9b, #5662)
ngResource: don't append number to '$' in url param value when encoding URI (ce1f1f97, #6003, #6004)

1.2.10 augmented-serendipity (2014-01-24)
Bug Fixes

$parse: do not use locals to resolve object properties (f09b6aa5, #5838, #5862)
a: don't call preventDefault on click when a SVGAElement has an xlink:href attribute (e0209169, #5896, #5897)
input: use Chromium's email validation regexp (79e519fe, #5899, #5924)
ngRoute: pipe preceding route param no longer masks ? or * operator (fd6bac7d, #5920)
Features

$animate: provide support for a close callback (ca6b7d0f, #5685, #5053, #4993)

1.2.9 enchanted-articulacy (2014-01-15)
Bug Fixes

$animate:
ensure the final closing timeout respects staggering animations (ed53100a)
prevent race conditions for class-based animations when animating on the same CSS class (4aa9df7a, #5588)
correctly detect and handle CSS transition changes during class addition and removal (7d5d62da)
avoid accidentally matching substrings when resolving the presence of className tokens (524650a4)
$http: ensure default headers PUT and POST are different objects (e1cfb195, #5742, #5747, #5764)
$rootScope: prevent infinite $digest by checking if asyncQueue is empty when decrementing ttl (2cd09c9f, #2622)
Features

$animate:
provide support for DOM callbacks (dde1b294)
use requestAnimationFrame instead of a timeout to issue a reflow (4ae3184c, #4278, #4225)
Breaking Changes

$http: due to e1cfb195, it is now necessary to separately specify default HTTP headers for PUT, POST and PATCH requests, as these no longer share a single object.

To migrate your code, follow the example below:

Before:

// Will apply to POST, PUT and PATCH methods
$httpProvider.defaults.headers.post = {
    ""X-MY-CSRF-HEADER"": ""...""
};
After:

// POST, PUT and PATCH default headers must be specified separately,
// as they do not share data.
$httpProvider.defaults.headers.post =
    $httpProvider.defaults.headers.put =
    $httpProviders.defaults.headers.patch = {
        ""X-MY-CSRF-HEADER"": ""...""
    };

1.2.8 interdimensional-cartography (2014-01-10)
Bug Fixes

$http:
return responseText on IE8 for requests with responseType set (a9cccbe1, #4464, #4738, #5636)
Allow status code 0 from any protocol (28fc80bb, #1356, #5547)
cancelled JSONP requests will not print error in the console (95e1b2d6, #5615, #5616)
$location: return '/' for root path in hashbang mode (63cd873f, #5650, #5712)
$parse: fix CSP nested property evaluation, and issue that prevented its tests from failing (3b1a4fe0, #5591, #5592)
closure: add Closure externs for angular.$q.Promise.finally (caeb7402, #4757)
ngMock window.inject: Remove Error 'stack' property changes (7e916455)
Features

select: allow multiline ng-options (43a2f3d0, #5602)

1.2.7 emoji-clairvoyance (2014-01-03)
Bug Fixes

$animate:
ensue class-based animations are always skipped before structural post-digest tasks are run (bc492c0f, #5582)
remove trailing s from computed transition duration styles (50bf0296)
$http: (3d38fff8)
use ActiveX XHR when making PATCH requests on IE8 (6c17d02b, #2518, #5043)
fix 'type mismatch' error on IE8 after each request (fd9a03e1)
Ignore multiple calls to onreadystatechange with readyState=4 (4f572366, #5426)
$injector: remove the INSTANTIATING flag properly when done (186a5912, #4361, #5577)
$location:
remove base href domain if the URL begins with '//' (760f2fb7, #5606)
fix $location.path() behaviour when $locationChangeStart is triggered by the browser (cf686285, #4989, #5089, #5118, #5580)
re-assign history after BFCache back on Android browser (bddd46c8, #5425)
$resource: prevent URL template from collapsing into an empty string (131e4014, #5455, #5493)
$sanitize: consider the size attribute as a valid/allowed attribute (056c8493, #5522)
Scope: don't let watch deregistration mess up the dirty-checking digest loop (884ef0db, #5525)
input:
use apply on the change event only when one isn't already in progress (a80049fd, #5293)
prevent double $digest when using jQuery trigger. (1147f219, #5293)
ngRepeat: allow for more flexible coding style in ngRepeat expression (c9705b75, #5537, #5598)
ngRoute: instantiate controller when template is empty (498365f2, #5550)
ngShow/ngHide, ngIf: functions with zero args should be truthy (01c5be46, #5414)
Performance Improvements

Scope: limit propagation of $broadcast to scopes that have listeners for the event (80e7a455, #5341, #5371)

1.2.6 taco-salsafication (2013-12-19)
Bug Fixes

$animate: use a scheduled timeout in favor of a fallback property to close transitions (54637a33, #5255, #5241, #5405)
$compile: remove invalid IE exceptional case for href (c7a1d1ab, #5479)
$location: parse xlink:href for SVGAElements (bc3ff2ce, #5472, #5198, #5199, #4098, #1420)
$log: should work in IE8 (4f5758e6, #5400)
$parse: return undefined if an intermetiate property's value is null (26d43cac, #5480)
closure: add type definition for Scope#$watchCollection (8f329ffb, #5475)
forEach: allow looping over result of querySelectorAll in IE8 (274a6734)
input: do not hold input for composition on Android (3dc18037, #5308)
jqLite: support unbind self within handler (2f91cfd0)
ngRepeat: allow multiline expressions (cbb3ce2c, #5000)
select: invalidate when multiple, required, and model is [] (5c97731a, #5337)
Features

jqLite: provide support for element.one() (937caab6)
ngAnimate: provide configuration support to match specific className values to trigger animations (cef084ad, #5357, #5283)
Performance Improvements

compile: add class 'ng-scope' before cloning and other micro-optimizations (f3a796e5, #5471)
$parse: use a faster path when the number of path parts is low (f4462319)
use faster check for $$ prefix (06c5cfc7)

1.2.5 singularity-expansion (2013-12-13)
Bug Fixes

$compile: allow literals in isolate scope references (43072e38, #5296)
angular-mocks: use copy of mock data in $httpBackend (f69dc162)
closure: add missing FormController extern definitions (1d5e18b0, #5303)
ngInclude: add template to DOM before linking other directives (30a8b7d0, #5247)
ngView: add template to DOM before linking other directives (f8944efe)
Performance Improvements

$injector: remove invoke optimization that doesn't work (05e4fd34, #5388)
$resource: use shallow copy instead of angular.copy (fcd2a813, #5300)
a: do not link when href or name exists in template (f3de5b6e, #5362)
jqLite: implement and use the empty method in place of html(‚Äò‚Äô) (3410f65e, #4457)
Breaking Changes

angular-mocks: due to f69dc162, some tests that rely on identity comparison rather than equality comparison in checking mock http responses will be broken, since now each mock response is a copy of the original response. This is usually fixable by changing a .toBe() comparison to toEqual() inside of tests.

1.2.4 wormhole-blaster (2013-12-06)
Bug Fixes

$animate:
ensure animations work with directives that share a transclusion (958d3d56, #4716, #4871, #5021, #5278)
ensure ms durations are properly rounded (93901bdd, #5113, #5162)
$compile:
update cloned elements if the template arrives after the cloning (b0972a2e)
ensure the isolated local watch lastValue is always in sync (2d0f6ccb, #5182)
$rootScope:
ensure that when the $destroy event is broadcast on $rootScope that it does something (d802ed1b, #5169)
ensure the phase is cleared within a digest if an exception is raised by a watcher (d3c486dd)
$sanitize: don't rely on YARR regex engine executing immediately in order to prevent object mutation (81b81856, #5193, #5192)
closure: closure compiler shouldn't rename .defaults.transformRequest (f01087f8)
input: ensure ngModelWatch() triggers second digest pass when appropriate (b6d54393, #5258, #5282)
isElement: return boolean value rather than truthy value. (2dbb6f9a, #4519, #4534)
jqLite: ignore incompatible nodes on find() (1169b544, #4120)
ngInit: evaluate ngInit before ngInclude (0e50810c, #5167, #5208)
ngSanitize: prefer textContent to innerText to avoid layout trashing (bf1972dc)
Performance Improvements

$parse: micro-optimization for ensureSafeObject function (689dfb16, #5246)
Scope: short-circuit after dirty-checking last dirty watcher (d070450c, #5272, #5287)

1.2.3 unicorn-zapper (2013-11-27)
Bug Fixes

$animate:
ensure blocked keyframe animations are unblocked before the DOM operation (2efe8230, #5106)
ensure animations are disabled during bootstrap to prevent unwanted structural animations (eed23332, #5130)
$sanitize: use the same whitelist mechanism as $compile does (33352348, #3748)
input: react to form auto completion, through the change event, on modern browsers (a090400f, #1460)
$attrs: add $attrs.$attr to externs so that it isn't renamed on js minification (bcca8054)
Features

No new features in this release

Breaking Changes

There are no breaking changes in this release (promise!)


1.2.2 consciousness-inertia (2013-11-22)
Bug Fixes

$animate:
ensure keyframe animations are blocked around the reflow (6760d7a3, #5018)
ensure transition animations are unblocked before the dom operation occurs (062fbed8, #5014, #4265)
ensure addClass/removeClass animations do not snap during reflow (76e4db6f, #4892)
ensure the DOM operation isn't run twice (7067a8fb, #4949)
$compile:
secure form[action] & iframesrcdoc
ensure CSS classes are added and removed only when necessary (0cd7e8f2)
$httpBackend: only IE8 and below can't use script.onload for JSONP (a3172a28, #4523, #4527, #4922)
$parse: allow for new lines in expr when promise unwrapping is on (40647b17, #4718)
$resource: Always return a resource instance when calling class methods on resources. (f6ecf9a3, #4545, #5061)
httpBackend: should not read response data when request is aborted (6f1050df, #4913, #4940)
loader: expose $$minErr to modules such asngResource (9e89a31b, #5050)
ngAnimate:
correctly retain and restore existing styles during and after animation (c42d0a04, #4869)
use a fallback CSS property that doesn't break existing styles (1d50663b, #4902, #5030)
ngClass: ensure that ngClass only adds/removes the changed classes (6b8bbe4d, #4960, #4944)
ngController: fix issue with ngInclude on the same element (6288cf5c, #4431)
ngInclude:
Don't throw when the ngInclude element contains content with directives. (0a7cbb33)
allow ngInclude to load scripts when jQuery is included (c47abd0d, #3756)
ngMock: fixes httpBackend expectation with body object (4d16472b, #4956)
ngView: Don't throw when the ngView element contains content with directives. (e6521e74, #5069)
tests: Correct tests for IE11 (57924234, #5046)
input: hold listener during text composition (a4e6d962, #4684)

1.2.1 underscore-empathy (2013-11-14)
Bug Fixes

$compile:
accessing controllers of transcluded directives from children (90f87072, #4935)
correctly handle interpolated style in replace templates (e1254b26, #4882)
$resource: don't use $parse for @dotted.member (9577702e)
bootstrap: make IE8 happy (a61b65d0)
loader: don't rely on internal APIs (8425e9fe, #4437, #4874)
minErr: remove references to internal APIs (94764ee0)
ngIf: don't create multiple elements when changing from a truthy value to another thruthy value (4612705e, #4852)
urlUtils:
make removal of windows drive from path safer (89f435de, #4939)
return right path for file:// on windows (f925e8ca, #4680)
Features

$parse: revert hiding ""private"" properties (4ab16aaa, #4926, #4842, #4865, #4859, #4849)

1.2.0 timely-delivery (2013-11-08)
Features

animations:
ensure CSS transitions can work with inherited CSS class definitions (9d69a0a7)
provide support for staggering animations with CSS (74848307)
$parse: secure expressions by hiding ""private"" properties (3d6a89e8)
docs:
provide index pages for each angular module (a7e12b79)
add forward slash shortcut key for search bar (74912802)
jqLite: expose isolateScope() getter similar to scope() (27e9340b)
misc: add externs file for Closure Compiler (9d0a6977)
Bug Fixes

$animate:
don't force animations to be enabled (98adc9e0)
only apply the fallback property if any transition animations are detected (94700807)
avoid hanging animations if the active CSS transition class is missing (b89584db, #4732, #4490)
ensure staggering animations understand multiple delay values (41a2d5b3)
ensure the active class is not applied if cancelled during reflow (e53ff431, #4699)
use direct DOM comparison when checking for $rootElement (d434eabe, #4679)
ensure former nodes are fully cleaned up when a follow-up structural animation takes place (7f0767ac, #4435)
ensure enable/disable animations work when the document node is used (6818542c, #4669)
skip unnecessary addClass/removeClass animations (76b628bc, #4401, #2332)
ensure animations work properly when the $rootElement is being animated (2623de14, #4397, #4231)
only cancel class-based animations if the follow-up class contains CSS transition/keyframe animation code (f5289fe8, #4463, #3784)
$compile:
don't leak isolate scope state when replaced directive is used multiple times (b5af198f)
correct isolate scope distribution to controllers (3fe4491a)
replaced element has isolate scope (97c7a4e3)
only pass isolate scope to children that belong to the isolate directive (d0efd5ee)
make isolate scope truly isolate (909cabd3, #1924, #2500)
don't instantiate controllers twice for element transclude directives (18ae985c, #4654)
attribute bindings should not break due to terminal directives (79223eae, #4525, #4528, #4649)
instantiate controlers when re-entering compilation (faf5b980, #4434, #4616)
$injector: allow a constructor function to return a function (c22adbf1)
$parse: check function call context to be safe (6d324c76, #4417)
angular-mocks: add inline dependency annotation (6d23591c, #4448)
animateSpec: run digest to enable animations before tests (aea76f0d)
bootstrap-prettify: share $animate and $$postDigestQueue with demo apps (1df3da36)
csp:
fix csp auto-detection and stylesheet injection (08f376f2, #917, #2963, #4394, #4444)
don't inline css in csp mode (a86cf20e
docModuleComponents: implement anchor scroll when content added (eb51b024, #4703)
input: keep track of min/max attars on-the-fly (4b653aea)
ngAnimate: fix cancelChildAnimations throwing exception (b9557b0a, #4548)
ngClassSpec: clear animation enable fn from postDigestQueue (ffa9d0a6)
ngEventDirectives: parse expression only once during compile phase. (9a828738)
ngIf:
destroy child scope when destroying DOM (9483373c)
ngIf removes elements dynamically added to it (e19067c9)
ngInclude: only run anchorScroll after animation is done (d378f550, #4723)
ngMock: throw more descriptive errors for $animate.flushNext() (6fb19157)
ngModel: deregister from the form on scope not DOM destruction (8f989d65, #4226, #4779)
ngScenario: correctly disable animations for end 2 end tests (9d004585)
ngView:
only run anchorScroll after animation is done (da344daa)
ensure the new view element is placed after the old view element (3f568b22, #4362)
ngdocs:
create mock Doc objects correctly (d4493fda)
shortDescription() should not error if no description (4c8fa353)
remove the side search bar (6c20ec19)
Breaking Changes

$compile:

due to d0efd5ee, Child elements that are defined either in the application template or in some other directives template do not get the isolate scope. In theory, nobody should rely on this behavior, as it is very rare - in most cases the isolate directive has a template.

due to 909cabd3, Directives without isolate scope do not get the isolate scope from an isolate directive on the same element. If your code depends on this behavior (non-isolate directive needs to access state from within the isolate scope), change the isolate directive to use scope locals to pass these explicitly.

Before

<input ng-model=""$parent.value"" ng-isolate>

.directive('ngIsolate', function() {
  return {
    scope: {},
    template: '{{value}}'
  };
});
After

<input ng-model=""value"" ng-isolate>

.directive('ngIsolate', function() {
  return {
    scope: {value: '=ngModel'},
    template: '{{value}}
  };
});
Closes #1924 and #2500

due to 79223eae,
Previously, the interpolation priority was -100 in 1.2.0-rc.2, and 100 before 1.2.0-rc.2. Before this change the binding was setup in the post-linking phase.

Now the attribute interpolation (binding) executes as a directive with priority 100 and the binding is set up in the pre-linking phase.

Closes #4525, #4528, and #4649

$parse: due to 3d6a89e8,

This commit introduces the notion of ""private"" properties (properties whose names begin and/or end with an underscore) on the scope chain. These properties will not be available to Angular expressions (i.e. {{ }} interpolation in templates and strings passed to $parse) They are freely available to JavaScript code (as before).

Motivation

Angular expressions execute in a limited context. They do not have direct access to the global scope, window, document or the Function constructor. However, they have direct access to names/properties on the scope chain. It has been a long standing best practice to keep sensitive APIs outside of the scope chain (in a closure or your controller.) That's easier said that done for two reasons:

JavaScript does not have a notion of private properties so if you need someone on the scope chain for JavaScript use, you also expose it to Angular expressions
the new ""controller as"" syntax that's now in increased usage exposes the entire controller on the scope chain greatly increaing the exposed surface.
Though Angular expressions are written and controlled by the developer, they:

Typically deal with user input
Don't get the kind of test coverage that JavaScript code would
This commit provides a way, via a naming convention, to allow publishing/restricting properties from controllers/scopes to Angular expressions enabling one to only expose those properties that are actually needed by the expressions.

csp: due to 08f376f2, triggering ngCsp directive via ng:csp attribute is not supported any more. Please use data-ng-csp instead.

jqLite: due to 27e9340b, jqLite.scope() (connonly used through angular.element(node).scope()) does not return the isolate scope on the element that triggered directive with isolate scope. Use jqLite.isolateScope() instead.


1.2.0-rc.3 ferocious-twitch (2013-10-14)
Features

$interval: add a service wrapping setInterval (2b5ce84f)
$sce: simpler patterns for $sceDelegateProviders white/blacklists (93ce5923, #4006)
$filter: allow map of filters to be registered (4033cf28, #4036, #4091)
$compile: support tel: links in a[href] (e7730297)

Directives:

ngRepeat: support repeating over ngInclude and other directives that replace repeated nodes (9efa46ae, #3104)
event directives: add ngCopy, ngCut, and ngPaste (147c6929, #4172)
Misc:

jQuery 1.10.x support (e0c134b8, #3764)
minErr: linkify error messages on minErr docs pages (6aaae062)
tutorial: add step 12 on animations to the phonecat tutorial (ad525645)
Bug Fixes

$compile:
abort compilation when duplicate element transclusion (63c5334c, #3893, #4217, #3307)
make order directives w/ same priority deterministic (4357da85)
fix (reverse) directive postLink fn execution order (31f190d4, #3558)
don't terminate compilation for regular transclusion directives (fe214501)
ng-attr to support dash separated attribute names (8e6e3eba)
allow interpolations for non-event handlers attrs (8e1276c0)
link parents before traversing (742271ff, #3792, #3923, #3935, #3927)
collect ranges on multiple directives on one element (6a8edc1d, #4002)
$parse:
deprecate promise unwrapping and make it an opt-in (5dc35b52, #4158, #4270)
disallow access to window and dom in expressions (be0b4856)
$httpBackend:
set headers with falsy values (e9a22241, #2984)
don't send empty string bodies (0d0330ad, #2149)
$location:
prevent infinite digest error in IE7 (d7071148, #2802)
re-assign location after BFCache back (2ebf9316, #4044)
$log: prevent logging undefined for $log in IE (4ff1a650, #1705)
Scope:

$evalAsync executes on the right scope (10cc1a42)
make stopPropagation only stop its own event (47f7bd70, #4204)
Filters:

date: allow negative millisecond value strings (025c9219)
Directives:

correct priority of structural directives (ngRepeat, ngSwitchWhen, ngIf, ngInclude, ngView) (b7af76b4)
input: false is no longer an empty value by default (b56b21a8, #3490)
ngBindHtml: watch string value instead of wrapper (e2068ad4, #3932)
ngOptions: ignore object properties which start with $ (aa3c54c7)
ngRepeat: correctly track elements even when the collection is initially undefined (31c56f54, #4145, #3964)
ngTransclude: detect ngTranslude usage without a transclusion directive (5a1a6b86, #3759)
jqLite:

ignore class methods on comment elements (64fd2c42)
use get/setAttribute so that jqLite works on SVG nodes (c785267e, #3858)
Misc:

isArrayLike: correctly handle string primitives (5b8c7884, #3356)
protect calls to hasOwnProperty in public API (7a586e5c, #3331)
ngRoute:

ngView: IE8 regression due to expando on non-element nodes (255e8c13, #3971)
$route: parametrized routes do not match against locations that would not valorize each parameters. (0ff86c32)
ngResource:

pass transformed value to both callbacks and promises (e36e28eb, #3817)
remove request body from $delete (8336b3a2, #4280)
ngSanitize:

sanitize DOCTYPE declarations correctly (e66c23fe, #3931)
sanitizer should not accept <!--> as a valid comment (21e9e8cf)
ngTouch:

ngClick does not pass touchend event when jQuery is loaded (9fd92cc3)
add $event to ng-swipe (507d8021, #4071, #4321)
ngAnimate:

ensure that a timeStamp is created if not provided by the browser event (cd216c4c, #3053)
perform internal caching on getComputedStyle to boost the performance of CSS3 transitions/animations (b1e604e3, #4011, #4124)
ensure structural animations skip all child animations even if no animation is present during compile (cc584607, #3215)
cancel any ongoing child animations during move and leave animations (3f31a7c7)
ensure elapsedTime always considers delay values (079dd939)
ensure transition-property is not changed when only keyframe animations are in use (2df3c9f5, #3933)
avoid completing the animation asynchronously unless CSS transtiions/animations are present (2a63dfa6, #4023, #3940)
ensure that delays are always considered before an animation closes (0a63adce, #4028)
check elapsedTime on current event (d50ed6bf)
support addClass/removeClass animations on SVG nodes (c785267e, #3858)
ngScenario:

remove redundant assignment (a80e96ce, #4315)
fix error message description (f8f8f754)
provide event parameters as object (28f56a38)
include ""not "" in error messages if test is inverted (3589f178, #3840)
Breaking Changes

$compile: due to 31f190d4, the order of postLink fn is now mirror opposite of the order in which corresponding preLinking and compile functions execute.

Previously the compile/link fns executed in this order controlled via priority:

CompilePriorityHigh, CompilePriorityMedium, CompilePriorityLow
compile child nodes
PreLinkPriorityHigh, PreLinkPriorityMedium, PreLinkPriorityLow
link child nodes
PostLinkPriorityHigh, PostLinkPriorityMedium, PostLinkPriorityLow
This was changed to:

CompilePriorityHigh, CompilePriorityMedium, CompilePriorityLow
compile child nodes
PreLinkPriorityHigh, PreLinkPriorityMedium, PreLinkPriorityLow
link child nodes
PostLinkPriorityLow, PostLinkPriorityMedium , PostLinkPriorityHigh
Very few directives in practice rely on order of postLinking function (unlike on the order of compile functions), so in the rare case of this change affecting an existing directive, it might be necessary to convert it to a preLinking function or give it negative priority (look at the diff of this commit to see how an internal attribute interpolation directive was adjusted).

$parse:

due to 5dc35b52, $parse and templates in general will no longer automatically unwrap promises. This feature has been deprecated and if absolutely needed, it can be reenabled during transitional period via $parseProvider.unwrapPromises(true) api.
due to b6a37d11, feature added in rc.2 that unwraps return values from functions if the values are promises (if promise unwrapping is enabled - see previous point), was reverted due to breaking a popular usage pattern.
directives: due to b7af76b4, the priority of ngRepeat, ngSwitchWhen, ngIf, ngInclude and ngView has changed. This could affect directives that explicitly specify their priority.

In order to make ngRepeat, ngSwitchWhen, ngIf, ngInclude and ngView work together in all common scenarios their directives are being adjusted to achieve the following precendence:

Directive        | Old Priority | New Priority
=============================================
ngRepeat         | 1000         | 1000
---------------------------------------------
ngSwitchWhen     | 500          | 800
---------------------------------------------
ngIf             | 1000         | 600
---------------------------------------------
ngInclude/ngView | 1000         | 400
form/ngForm due to 7a586e5c, Inputs with name equal to ""hasOwnProperty"" are not allowed inside form or ngForm directives.

Before, inputs whose name was ""hasOwnProperty"" were quietly ignored and not added to the scope. Now a badname exception is thrown.

Using ""hasOwnProperty"" for an input name would be very unusual and bad practice.

Either do not include such an input in a form or ngForm directive or change the name of the input.

ngScenario: due to 28f56a38, browserTrigger now uses an eventData object instead of direct parameters for mouse events. To migrate, place the keys,x and y parameters inside of an object and place that as the third parameter for the browserTrigger function.


1.2.0-rc.2 barehand-atomsplitting (2013-09-04)
Features

Scope: asynchronously auto-flush $evalAsync queue when outside of $digest cycle (6b91aa0a, #3539, #2438)
minErr: log minerr doc url in development builds (37123cd2, #3566)
ngMock:
allow passing an object literal as shorthand to module (f737c97d)
add support for creating dynamic style sheets within test code (fb3a7db0)
Bug Fixes

$http: allow empty responses to be cached (8e48c4ff, #3809)
$injector: don't parse fns with no args (44b6b72e)
$parse: handle promises returned from parsed function calls (3a658220, #3503)
$q:
reject should catch & forward exceptions thrown in error callbacks (5d9f4205)
fix forwarding resolution when callbacks aren't functions (7d188d63, #3535)
$location: fix history problems on Boxee box (eefcdad0)
$timeout: clean deferreds immediately after callback exec/cancel (920a3804)

Directives:

ngTransclude:
clear the translusion point before transcluding (eed299a3)
make the transclusion available to parent post-link function (bf79bd41)
ngView: ensure ngClass works with together with ngView's transclusion behavior (40c0220c)
Filters:

filter: filter on false properties (3bc4e7fd, #2797)
orderBy: remove redundant if statement (5e45fd4a)
Misc:

parse IE11 UA string correctly (427ee93f, #3682)
i18n: remove obsolete locale files (6382e21f)

ngAnimate:

ensure that ngClass is always compiled before enter, leave and move animations are applied (36ad40b1, #3727, #3603)
cut down on extra $timeout calls (4382df03)
skip ngAnimate animations if the provided element already has transitions applied to it (7c605ddf, #3587)
only apply a timeout when transitions or keyframe animations are used (ee2f3d21, #3613)
ensure older versions of webkit work for animations (b1a43cd0)
ngMocks: $logProvider should not use internal APIs (baaa73ee, #3612)

Breaking Changes

i18n: due to 6382e21f, some uncommon region-specific local files were removed.

1.0.8 bubble-burst (2013-08-22)
Contains only these fixes cherry-picked from v1.2.0rc1.

Bug Fixes

$compile:
don't check attr.specified on non-ie7 (78efa0e3, #3231, #2160)
empty normalized href should pass sanitation check (3b2c6f09, #2219)
$http: ensure case-insensitive header overriding (25d9f5a8)
$location:
default to / for the url base if no base[href] (cbe31d8d, #2762)
prevent infinite digest error due to IE bug (97abb124, #2802)
don't crash on invalid query parameters (b9dcb35e)
$parse: move global getter out of parse.js (099138fb)
$q: call reject() even if $exceptionHandler rethrows (d59027c4)
$timeout: clean deferreds immediately after callback exec/cancel (ac69392c)
$sanitize: match URI schemes case-insensitively (fcd761b9, #3210)
Scope: watches can be safely unregistered inside watch handlers (a4ec2979, #2915)

ngMock

$timeout should forward delay argument (a5fb372e)
jqLite:

return array from multi select in val() (01cd3495)
forgive unregistration of a non-registered handler (ac5b9055)
prepend array in correct order (63414b96)
correctly monkey-patch core jQuery methods (815053e4)
Directives:

form: pick the right attribute name for ngForm (dc1e55ce, #2997)
input: fix the email regex to accept TLDs up to 6 characters long (ad76e77f)
ngCloak: hide element even when CSS 'display' is set (06b0930b)
ngSubmit: expose $event to ngSubmit callback (b0d5f062)
ngValue: made ngValue to write value attribute to element (3b898664)
Filters:

number: always convert scientific notation to decimal (408e8682)
orderBy: remove redundant if statement (ec1cece2)
i18n: Do not transform arrays into objects (751c77f8)

jqLite:

return array from multi select in val() (01cd3495)
forgive unregistration of a non-registered handler (ac5b9055)
prepend array in correct order (63414b96)
correctly monkey-patch core jQuery methods (815053e4)
Misc:

angular.copy: change angular.copy to correctly clone RegExp (5cca077e, #3473, #3474)
angular.equals:
add support for regular expressions (a357649d, #2685)
{} and [] should not be considered equivalent (da1f7c76)
angular.toJson: skip JSON.stringify for undefined (332a3c79)

1.2.0rc1 spooky-giraffe (2013-08-13)
Full Commit Log

Features

ngAnimate: complete rewrite of animations (81923f1e)

$sce: new $sce service for Strict Contextual Escaping and lots of other security enhancements (bea9422e)

minErr: add error message minification and better error messages (c8fcf3b3, 09fa0656, b8ea7f6a)

$compile:

support animation hooks bindings to class attributes (f2dfa891)
support multi-element directive (e46100f7)
support ""Controller as"" instance syntax for directives (b3777f27)
$http: accept function as headers value (a7150f12)

$q:

add .catch() as shorthand for defining promise error handlers (a207665d, #2048, #3476)
added support for promise notification (2a5c3555)
$resource:

support an unescaped URL port in the url template (b94ca12f, #2778)
expose promise as $promise instead of only $then (05772e15)
$route: express style route matching (support for optional params and new wildcard syntax) (04cebcc1)

jqLite: switch bind/unbind to more recent jQuery on/off (f1b94b4b)

Misc:

add source maps to all min files (908071af, #1714)
Directives:

add ngFocus and ngBlur directives (2bb27d49, #1277)

ngRepeat: add $even and $odd props to iterator (52b8211f)

ngForm: supports namespaces in form names (8ea802a1)

ngBindHtml: combine ng-bind-html and ng-bind-html-unsafe (dae69473)

ngPluralize: add alternative mapping using attributes (a170fc1a, #2454)

ngMobile/ngTouch:

emit swipeleft and swiperight events (ab189142)
refactor swipe logic from ngSwipe directive to $swipe service. (f4c6b2c7)
ngMock:

$timeout.flushNext can expect specific timeout delays (462ed033)
support delay limit for $timeout.flush (b7fdabc4)
support a matching function for data param (08daa779)
scenario: expose jQuery for usage outside of angular scenario (3fdbe81a)

ngDocs:

provide support for user to jump between different versions of the angularjs doc (46dfb92a)
add links to source for API (52d6a599)
support popover, foldouts and foldover annotations (ef229688)
provide documentation for the new ngRepeat repeater syntax (b3650457)
provide support for inline variable hinting (21c70729)
Bug Fixes

$compile:

correct controller instantiation for async directives (c173ca41, #3493, #3482, #3537, #3540)
always instantiate controllers before pre-link fns run (5c560117, #3493, #3482, #3514)
always instantiate controllers in parent->child order (45f9f623, #2738)
don't check attr.specified on non-ie7 (f9ea69f6, #3231, #2160)
allow data: image URIs in img[src] bindings (3e39ac7e)
empty normalized href url should pass sanitation check (fc8c9baa, #2219)
prevent infinite loop w/ replace+transclude directives (69f42b76, #2155)
reject multi-expression interpolations for src attribute (38deedd6)
disallow interpolations for DOM event handlers (39841f2e)
sanitize values bound to img[src] (1adf29af)
support multi-element group over text nodes (b28f9694)
correct component transclusion on compilation root. (15e1a29c)
$http:

allow interceptors to completely override headers (514dc0eb, #2770)
treat headers as case-insensitive when overriding defaults (53359d54)
$location:

don't initialize url hash in hashbang mode unnecessarily (d4d34aba)
prevent infinite digest error due to IE bug (dca23173, #2802)
in html5 mode, default to / for the url base if no base[href] (aef09800, #2762)
fix parameter handling on search() (705c9d95)
$parse:

unwrap promise when setting a field (61906d35, #1827)
disallow access to Function constructor (5349b200)
$q: call reject() even if $exceptionHandler rethrows (664526d6)

$resource: check whether response matches action.isArray (a644ca7b, #2255)

$sanitize: match URI schemes case-insensitively (7fef06fe, #3210)

Scope:

ensure that isolate scopes use the main evalAsync queue (3967f5f7)
watches can now be safely unregistered inside watch handlers (8bd6619b, #2915)
jqLite:

properly detect unsupported calls for on()/off() (3824e400, 4f5dfbc3, #3501)
return array from multi select in val() (306a6134)
forgive unregistration of a non-registered handler (ab59cc6c)
support space-separated events in off (bdd4e982, #3256)
prepend array in correct order (fd87eb0c)
allow override of jqLite.triggerHandler event object (0cac8729)
added optional name arg in removeData (e1a050e6)
correctly monkey-patch core jQuery methods (da5f537c)
i18n: Do not transform arrays into objects (b3d7a038)

ngMobile/ngTouch:

emit click event for touchy clicks (fb7d891d, #3219, #3218, #3137)
prevent ngClick when item disabled (e0340243, #3124, #3132)
ngClick should prevent unwanted opening of the soft keyboard (0bbd20f2)
ngMock:

keep withCredentials on passThrough (3079a6f4)
keep mock.$log the api in sync with $log (f274c0a6, #2343)
ngScenario: select().option(val) should prefer exact value match (22a9b1ac, #2856)

Directives:

ngRepeat:

handle iteration over identical obj values (47a2a982, #2787, #2806)
support growing over multi-element groups (4953b497)
ngShowHide: change the .ng-hide CSS class to use an !important flag (246c1439)

ngSubmit: expose $event to ngSubmit callback (3371fc25)

ngValue: made ngValue to write value attribute to element (09a1e7af)

ngView: ensure ngView is terminal and uses its own manual transclusion system (87405e25)

ngCloak: hide ngCloak-ed element even when CSS 'display' is set (3ffddad1)

input[email]: fix the email regex to accept TLDs up to 6 characters long (af731354)

form: pick the right attribute name for ngForm (0fcd1e3b, #2997)

select: don't support binding to select[multiple] (d87fa004, #3230)

Filters:

numberFilter: always convert scientific notation to decimal (a13c01a8)
Misc:

detect transition/animation on older Android browsers (ef5bc6c7)
handle duplicate params in parseKeyValue/toKeyValue (80739409)
don't crash on invalid query parameters (8264d080)
change angular.copy to correctly clone RegExp (f80730f4, #3473, #3474)
angular.equals now supports for regular expressions (724819e3, #2685)
angular.equals should not match keys defined in the prototype chain (7829c50f)
angular.equals should not consider {} and [] to be equivalent (1dcafd18)
angular.bootstrap should throw an error when bootstrapping a bootstrapped element (3ee744cc)
angular.toJson should skip JSON.stringify for undefined (5a294c86)
change css wrapping in grunt to prepend styles to the top of the head tag (fbad068a)
Breaking Changes

ngAnimate: due to 81923f1e, too many things changed, we'll write up a separate doc with migration instructions and will publish it at http://yearofmoo.com. Please check out the ngAnimate module docs and $animate api docs in the meantime.

$compile:

due to 1adf29af and 3e39ac7e, img[src] URLs are now being sanitized and a whitelist configured via $compileProvider can be used to configure what safe urls look like.

By default all common protocol prefixes are whitelisted including data: URIs with mime types image/*. Therefore this change is expected to have no impact on apps that don't contain malicious image links.

due to 38deedd6, binding more than a single expression to *[src] or *[ng-src] with the exception of <a> and <img> elements is not supported.

Concatenating expressions makes it hard to understand whether some combination of concatenated values are unsafe to use and potentially subject to XSS vulnerabilities. To simplify the task of auditing for XSS issues, we now require that a single expression be used for *[src/ng-src] bindings such as bindings for iframe[src], object[src], etc. (but not img[src/ng-src] since that value is sanitized).

This change ensures that the possible pool of values that are used for data-binding is easier to trace down.

To migrate your code, follow the example below:

Before:
    JS:
        scope.baseUrl = 'page';
        scope.a = 1;
        scope.b = 2;
    HTML:
        <!-- Are a and b properly escaped here? Is baseUrl
             controlled by user? -->
        <iframe src=""{{baseUrl}}?a={{a}&b={{b}}"">

After:
    JS:
        var baseUrl = ""page"";
        scope.getIframeSrc = function() {
          // There are obviously better ways to do this.  The
          // key point is that one will think about this and do
          // it the right way.
          var qs = [""a"", ""b""].map(function(value, name) {
              return encodeURIComponent(name) + ""="" +
                     encodeURIComponent(value);
            }).join(""&"");
          // baseUrl isn't on scope so it isn't bound to a user
          // controlled value.
          return baseUrl + ""?"" + qs;
        }
    HTML: <iframe src=""{{getIframeSrc()}}"">
due to 39841f2e, Interpolations inside DOM event handlers are disallowed.

DOM event handlers execute arbitrary Javascript code. Using an interpolation for such handlers means that the interpolated value is a JS string that is evaluated. Storing or generating such strings is error prone and leads to XSS vulnerabilities. On the other hand, ngClick and other Angular specific event handlers evaluate Angular expressions in non-window (Scope) context which makes them much safer.

To migrate the code follow the example below:

Before:

JS:   scope.foo = 'alert(1)';
HTML: <div onclick=""{{foo}}"">
After:

JS:   scope.foo = function() { alert(1); }
HTML: <div ng-click=""foo()"">
due to e46100f7, existing directives with name ending with ""-start"" or ""-end"" will stop working.

This change was necessary to enable multi-element directives. The best fix is to rename existing directives, so that they don't end with these suffixes.

$q: due to f078762d, the always method is now exposed as finally.

The reason for this change is to align $q with the Q promise library, despite the fact that this makes it a bit more difficult to use with non-ES5 browsers, like IE8.

finally also goes well together with catch api that was added to $q recently and is part of the DOM promises standard.

To migrate the code follow the example below:

Before:

  $http.get('/foo').always(doSomething);
After:

  $http.get('/foo').finally(doSomething);
or for IE8 compatible code:

  $http.get('/foo')['finally'](doSomething);
$resource:

due to 05772e15, resource instance does not have a $then function anymore. Use the $promise.then instead.

Before:

Resource.query().$then(callback);
After:

Resource.query().$promise.then(callback);
due to 05772e15, instance methods return the promise rather than the instance itself.

Before:

resource.$save().chaining = true;
After:

resource.$save();
resource.chaining = true;
due to 05772e15, on success, the resource promise is resolved with the resource instance rather than http response object.

Use interceptor api to access the http response object.

Before:

Resource.query().$then(function(response) {...});
After:

var Resource = $resource('/url', {}, {
  get: {
    method: 'get',
    interceptor: {
      response: function(response) {
        // expose response
        return response;
      }
    }
  }
});
$route:

due to 04cebcc1, the syntax for named wildcard parameters in routes has changed from *wildcard to :wildcard*

To migrate the code, follow the example below. Here, *highlight becomes :highlight*:

Before:

$routeProvider.when('/Book1/:book/Chapter/:chapter/*highlight/edit',
          {controller: noop, templateUrl: 'Chapter.html'});
After:

$routeProvider.when('/Book1/:book/Chapter/:chapter/:highlight*/edit',
        {controller: noop, templateUrl: 'Chapter.html'});
due to 5599b55b, applications that use $route will now need to load an angular-route.js file and define a dependency on the ngRoute module.

Before:

...
<script src=""angular.js""></script>
...
var myApp = angular.module('myApp', ['someOtherModule']);
...
After:

...
<script src=""angular.js""></script>
<script src=""angular-route.js""></script>
...
var myApp = angular.module('myApp', ['ngRoute', 'someOtherModule']);
...
$location: due to 80739409, $location.search now supports multiple keys with the same value provided that the values are stored in an array in $location.search.

Before this change:

parseKeyValue only took the last key overwriting all the previous keys;
toKeyValue joined the keys together in a comma delimited string.

This was deemed buggy behavior. If your server relied on this behavior then either the server should be fixed, or a simple serialization of the array should be done on the client before passing it to $location.

ngBindHtml, sce: due to dae69473,

ngHtmlBindUnsafe has been removed and replaced by ngHtmlBind (which has been moved from ngSanitize module to the core ng module). ngBindHtml provides ngHtmlBindUnsafe like behavior (evaluate an expression and innerHTML the result into the DOM) when bound to the result of $sce.trustAsHtml(string). When bound to a plain string, the string is sanitized via $sanitize before being innerHTML'd. If the $sanitize service isn't available (ngSanitize module is not loaded) and the bound expression evaluates to a value that is not trusted an exception is thrown.

ngForm: due to 8ea802a1,

If you have form names that will evaluate as an expression:

<form name=""ctrl.form"">
And if you are accessing the form from your controller:

Before:

function($scope) {
  $scope['ctrl.form'] // form controller instance
}
After:

function($scope) {
  $scope.ctrl.form // form controller instance
}
This makes it possible to access a form from a controller using the new ""controller as"" syntax. Supporting the previous behavior offers no benefit.

ngView: due to 7d69d52a, previously ngView only updated its content, after this change ngView will recreate itself every time a new content is included. This ensures that a single rootElement for all the included contents always exists, which makes definition of css styles for animations much easier.

ngInclude: due to aa2133ad, previously ngInclude only updated its content, after this change ngInclude will recreate itself every time a new content is included. This ensures that a single rootElement for all the included contents always exists, which makes definition of css styles for animations much easier.

select: due to d87fa004, binding to select[multiple] directly or via ngMultiple (ng-multiple) directive is not supported. This feature never worked with two-way data-binding, so it's not expected that anybody actually depends on it.

ngMobile: due to 94ec84e7, since all the code in the ngMobile module is touch related, we are renaming the module to ngTouch.

To migrate, please replace all references to ""ngMobile"" with ""ngTouch"" and ""angular-mobile.js"" to ""angular-touch.js""."
84,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,a606a45938c3ad77c2216075f30c671dd0b86c89,Upgraded  Hyphenator 3.3.0 to Hyphenator 4.2.0
85,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,7ce0c84961b3a89c24dc79980f405b1db3127673,Update index.html
86,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,ff668cf98b00213645c2aa3fdd7199cd6c8e1672,Update and rename modernizr-2.6.2-respond-1.1.0.min.js to modernizr-2.7.1-respond-1.4.2.min.js
87,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,4acbb03ecc2e639194930319c883354ba0aaaac6,Update custom-hyphenator.js
88,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,4ecfb512042e2cc1658be42a23b13f0f0904a2c2,Update jquery-1.10.1.min.js
89,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,5b82340768d0a739947749704584e979bc87eefc,Update and rename jquery-1.10.1.min.js to jquery-2.1.0.min.js
90,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,3ab580f833413485a5a31da21a9d2324eba3bbd1,Update index.html
91,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/23,23,Combined Upgrades,,vivekkiran,5557539,2014-04-08T12:16:46Z,NONE,False,5547,203,8,GitHub dashboard for Firefox Test Engineering,HTML,a37012d4dc7704107d90a310b8fff66c01f07df7,"Update requirements.txt

Change Log
http://fabric.readthedocs.org/en/1.8/changelog.html"
92,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/22,22,Fix the other two links to CI as well,"Oops, the last PR was rushed and I missed two links. This should fix the whole thing.
",bobsilverberg,142755,2014-04-04T16:20:23Z,COLLABORATOR,True,2,2,1,GitHub dashboard for Firefox Test Engineering,HTML,38a0bbdea8ad362444ec11416e01f94390a53b51,Fix the other two links to CI as well
93,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/21,21,Fix the link to Jenkins in the marketplace dashboard,"@retornam: r?
",bobsilverberg,142755,2014-04-03T19:02:52Z,COLLABORATOR,True,1,1,1,GitHub dashboard for Firefox Test Engineering,HTML,fcc92deedee162e3059674ecc9cccfe7deecb611,Fix the link to Jenkins in the marketplace dashboard
94,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/20,20,Add datestamp to marketplace tests dashboard,"This adds a line to the top of the Marketplace tests dashboard which shows when the data file was last updated.
",bobsilverberg,142755,2014-03-27T14:03:16Z,COLLABORATOR,True,7,582,4,GitHub dashboard for Firefox Test Engineering,HTML,d902407d99e92d45db99141d03a81d815bea6375,Add datestamp to marketplace tests dashboard
95,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/19,19,Generator for data file for Github Issues dashboard,"@retornam: After merging this, please set up a cron job to run this and then push the data file back to Gihub in a similar manner to what was done with the marketplace tests data. This one doesn't need to be run on Jenkins, but it does need an API token. You can use the one that I provided you with some time ago.
",bobsilverberg,142755,2014-03-27T12:56:09Z,COLLABORATOR,False,61,0,2,GitHub dashboard for Firefox Test Engineering,HTML,8f6a47ee20140d38eea6b3902f14a569e078b81a,"Create aggregator for Github issues

Conflicts:
	repos.txt"
96,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/19,19,Generator for data file for Github Issues dashboard,"@retornam: After merging this, please set up a cron job to run this and then push the data file back to Gihub in a similar manner to what was done with the marketplace tests data. This one doesn't need to be run on Jenkins, but it does need an API token. You can use the one that I provided you with some time ago.
",bobsilverberg,142755,2014-03-27T12:56:09Z,COLLABORATOR,False,61,0,2,GitHub dashboard for Firefox Test Engineering,HTML,e385a07c808c66b9b44a6c196d75b83d76881d83,Collect detailed assignee data
97,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/19,19,Generator for data file for Github Issues dashboard,"@retornam: After merging this, please set up a cron job to run this and then push the data file back to Gihub in a similar manner to what was done with the marketplace tests data. This one doesn't need to be run on Jenkins, but it does need an API token. You can use the one that I provided you with some time ago.
",bobsilverberg,142755,2014-03-27T12:56:09Z,COLLABORATOR,False,61,0,2,GitHub dashboard for Firefox Test Engineering,HTML,1b729c4139567ec9679f5fbd166c42955d5a7b25,"Change the repo to use a single json file for config rather than multiple text files

This change fixes the marketplace dashboard populator, but not the xfails dashboard populator

Conflicts:
	repos.txt"
98,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/18,18,Change XfailsController to use json file instead of text file,,bobsilverberg,142755,2014-03-26T17:53:13Z,COLLABORATOR,True,3,3,1,GitHub dashboard for Firefox Test Engineering,HTML,533551a8e954b6c92552216d33671f921bc3ec99,Change XfailsController to use json file instead of text file
99,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/18,18,Change XfailsController to use json file instead of text file,,bobsilverberg,142755,2014-03-26T17:53:13Z,COLLABORATOR,True,3,3,1,GitHub dashboard for Firefox Test Engineering,HTML,a1669ba34fab6299d9366cc30777713a8526158c,Fix data file name for MarketplaceController
100,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/17,17,Changing update.sh to use jq for json parsing,,retornam,179895,2014-03-21T22:29:20Z,MEMBER,True,2,1,1,GitHub dashboard for Firefox Test Engineering,HTML,13b11a4f271958e00806a32ca285f66556053b81,Changing update.sh to use jq for json parsing
101,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/16,16,Change the repo to use a single json file for config rather than multiple text files,"This change fixes the marketplace dashboard populator, but not the xfails dashboard populator
",bobsilverberg,142755,2014-03-21T18:04:07Z,COLLABORATOR,True,622,38,5,GitHub dashboard for Firefox Test Engineering,HTML,723727602111954d3f1dd34e6bfb07e4826a686f,"Change the repo to use a single json file for config rather than multiple text files

This change fixes the marketplace dashboard populator, but not the xfails dashboard populator"
102,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/15,15,Linkify each test file name to point to the file on Github,"Sorry, @retornam, this one got removed and then wasn't added in the last batch. I think this is the last one for now.
",bobsilverberg,142755,2014-03-04T19:14:36Z,COLLABORATOR,True,5,1,1,GitHub dashboard for Firefox Test Engineering,HTML,4f39781ef4b75d448d3fb52a37bf3aa10b0393a4,Linkify each test file name to point to the file on Github
103,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,8a6eae3796d01782f8704ea8663983a1ce029521,"First iteration of Marketplace tests dashboard

Conflicts:
	js/main.js"
104,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,47f649099b2065c2d2a271f0b3d42953e9886fc1,Change link to point to test details
105,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,e2a7ab1b51c8568c80dd7ada10a85295684fbc54,"Combine both dashboards into a single angular js app

Conflicts:
	index.html
	js/main.js"
106,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,140ea87a1c2a1eda5b2ce80a54b059c4c368b0a8,Move marketplace tests data file to a subfolder
107,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,c3285ad83c1b9f8f02fd4a5ac7fbbda67c9534e8,"Add Github issues dashboard

Conflicts:
	index.html
	js/main.js

Conflicts:
	index.html
	js/main.js"
108,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,cfdd894b6bfe1cc91027984ac764b62c1e22cca6,Bring over last changes to issues dashboard
109,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/14,14,Bring all necessary files from gh-pages into master,,bobsilverberg,142755,2014-03-04T17:53:40Z,COLLABORATOR,True,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,7509295676f12e937503c01aa4dc86e2334319e2,Remove the data files from master
110,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/13,13,Adding update with github origin to update.sh script,,retornam,179895,2014-03-04T17:33:42Z,MEMBER,True,3,0,1,GitHub dashboard for Firefox Test Engineering,HTML,7cc1f8a48db6bf6c9fd4509adaf2a9939118c8c1,Adding update with github origin to update.sh script
111,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,bce33cb31045fb8c2eb59b31e66706990410b8f6,add filter for bug status
112,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,953b06d103aecf74b6f767f0cc006ff4ec18feb3,"dump on August 13, 2013 at 16:55:01"
113,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,c339e12f95e0988e095f57313753c50af17e74cb,"dump on August 14, 2013 at 11:18:22"
114,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,4b32c5884034bc415265649bfbe89cd6eeba2899,"dump on August 14, 2013 at 12:41:46"
115,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,4278f614a24017615a9a7423276d63adc680e362,"dump on August 14, 2013 at 12:46:14"
116,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,c9e7c37544cfaa6db7a357e4e3e9b95fadcbc7d1,"dump on August 15, 2013 at 15:40:25"
117,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,2cd3e96dc9eca7be557ad03d0c03e8eba180868f,"dump on August 15, 2013 at 17:05:02"
118,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,3508acd3eea9330209300afd9d95a9cd160d83e1,"dump on August 15, 2013 at 23:40:37"
119,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,b3003104fb9ffff0186be7781428474f6a39f620,"dump on August 19, 2013 at 12:33:10"
120,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,72b7c6f99219003d92ff67bab5597ae83303bc55,"dump on August 19, 2013 at 12:55:14"
121,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,52ad70414abea8bff2e6451f26358cf0094bf630,"dump on August 20, 2013 at 22:09:35"
122,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,7d485d67d93123e9903732aae584106a48a820f0,"dump on August 21, 2013 at 11:35:11"
123,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,493443172d596c9d319e6f5f97867439872d1ac0,"dump on August 27, 2013 at 15:02:58"
124,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,ee8ab46844bd04fb42e4977ad1709678f06c69ac,"dump on August 30, 2013 at 13:11:04"
125,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,d33ed898b756d8f3076afc24941baf91266ad893,"dump on September 12, 2013 at 10:17:38"
126,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,43bdb3e939042e300a6f5b7efff1515fedd35634,dump on Sat Sep 14 14:42:57 IST 2013
127,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,fd39866d0fb1c1542f29176365c9714867d0064b,"dump on September 14, 2013 at 14:45:28"
128,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,9e7a1c1f0d5d1e144b035c6cf14c4944b6514b8e,dump on Sat Sep 14 16:46:14 IST 2013
129,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,57b994eb0c98a662cd125950945354520a433c63,dump on Sat Sep 14 16:56:12 IST 2013
130,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,ae9f6e8d9548daaa727c937359227a4157c72e5e,dump on Sat Sep 14 17:08:11 IST 2013
131,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,8f397100695af12f652b8e11206afa426cfa1b4e,dump on Thu Sep 19 09:13:06 IST 2013
132,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,712409366983779986ec315a85c67588f5a57557,dump on Thu Sep 19 10:44:28 IST 2013
133,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,8f681d00e4b0b11b07358f9cb91363cf5f1ab886,dump on Wed Jan 15 01:00:27 UTC 2014
134,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,725bca4259c43d7bc843d9645a16b0334fba3ed7,dump on Thu Jan 16 20:06:54 UTC 2014
135,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,bff27057603b1a2db9f3f215eb5b6838769c1aec,dump on Fri Jan 17 06:45:30 UTC 2014
136,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,7187ccc044159cde6c9cac57ed4faa5d1bb03d7e,dump on Fri Jan 17 12:30:08 UTC 2014
137,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,8144ba3a2f273e5142f50c9dab611d98687af283,dump on Tue Jan 21 16:30:08 UTC 2014
138,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,69dfeb807840c87bf8f09abee790f839fde97251,dump on Tue Jan 21 19:45:08 UTC 2014
139,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,6b89292b3475ea18a8a8222bbf2d7b02de68e7d5,First iteration of Marketplace tests dashboard
140,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/12,12,Bring all necessary files from gh-pages into master,"There are a lot of superflous commits here, but the resulting file changes are correct. Rather than have to take everything apart (as there were numerous commits to gh-pages that needed to come over) I suggest we just take the hit and bring in the extra commits for now. There shouldn't be a need to ever have any more of them going forward.
",bobsilverberg,142755,2014-03-04T17:33:40Z,COLLABORATOR,False,580,145,7,GitHub dashboard for Firefox Test Engineering,HTML,11099b6ed2e9595637866767c758905e6a70d3b1,dump on Thu Jan 23 12:30:08 UTC 2014
141,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/11,11,Linkify each test file name to point to the file on Github,,bobsilverberg,142755,2014-03-04T16:58:22Z,COLLABORATOR,False,5,1,1,GitHub dashboard for Firefox Test Engineering,HTML,12ee4b80d681acc046f9afae9693131f5282fed2,Linkify each test file name to point to the file on Github
142,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/10,10,Linkify each test file name to point to the file on Github,"This will make the xfails dashboard more useful for investigating xfails.
",bobsilverberg,142755,2014-03-04T15:04:17Z,COLLABORATOR,True,5,1,1,GitHub dashboard for Firefox Test Engineering,HTML,12ee4b80d681acc046f9afae9693131f5282fed2,Linkify each test file name to point to the file on Github
143,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/8,8,Add Github issues dashboard,,bobsilverberg,142755,2014-02-12T17:10:25Z,COLLABORATOR,True,1402,0,5,GitHub dashboard for Firefox Test Engineering,HTML,c1415f1571a193dbc939ecf4e66f530d12148fe7,Add Github issues dashboard
144,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/8,8,Add Github issues dashboard,,bobsilverberg,142755,2014-02-12T17:10:25Z,COLLABORATOR,True,1402,0,5,GitHub dashboard for Firefox Test Engineering,HTML,551c63a3114c94fa1e99eb15618ec2b48cd9ed0a,Add the ability to filter by issue label
145,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/8,8,Add Github issues dashboard,,bobsilverberg,142755,2014-02-12T17:10:25Z,COLLABORATOR,True,1402,0,5,GitHub dashboard for Firefox Test Engineering,HTML,82c6604738cdec4cc5244660893d8739930045df,"Display the assignee for an issue

Allow filtering by whether an issue is assigned or not"
146,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/7,7,Create aggregator for Github issues,"In order to run this you need to pass in the name of the repos file (this uses the same one as Vaidik's xfails job) and a Github API Token. I have created an anonymous api token that gives is read-only access. There is no reason that this api token cannot be made public. The value of the token is [redacted ] by @retornam .

A sample command line would be:

`generate_github_issues_dashboard_data.py repos`

Once merged this can be set up with a job on Jenkins similar to the one we will have for the Marketplace tests dashboard, or it could be set up as a cron job anywhere that has access to the internet.
",bobsilverberg,142755,2014-02-12T13:50:45Z,COLLABORATOR,False,683,38,7,GitHub dashboard for Firefox Test Engineering,HTML,b329d360dbaa145d8130d1e1982e82bb38012ab3,Create aggregator for Github issues
147,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/7,7,Create aggregator for Github issues,"In order to run this you need to pass in the name of the repos file (this uses the same one as Vaidik's xfails job) and a Github API Token. I have created an anonymous api token that gives is read-only access. There is no reason that this api token cannot be made public. The value of the token is [redacted ] by @retornam .

A sample command line would be:

`generate_github_issues_dashboard_data.py repos`

Once merged this can be set up with a job on Jenkins similar to the one we will have for the Marketplace tests dashboard, or it could be set up as a cron job anywhere that has access to the internet.
",bobsilverberg,142755,2014-02-12T13:50:45Z,COLLABORATOR,False,683,38,7,GitHub dashboard for Firefox Test Engineering,HTML,bcff5547ad3887e1a18cbd6b6b298c5b091b84df,Collect detailed assignee data
148,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/7,7,Create aggregator for Github issues,"In order to run this you need to pass in the name of the repos file (this uses the same one as Vaidik's xfails job) and a Github API Token. I have created an anonymous api token that gives is read-only access. There is no reason that this api token cannot be made public. The value of the token is [redacted ] by @retornam .

A sample command line would be:

`generate_github_issues_dashboard_data.py repos`

Once merged this can be set up with a job on Jenkins similar to the one we will have for the Marketplace tests dashboard, or it could be set up as a cron job anywhere that has access to the internet.
",bobsilverberg,142755,2014-02-12T13:50:45Z,COLLABORATOR,False,683,38,7,GitHub dashboard for Firefox Test Engineering,HTML,f6ca5984ebec794b84d314362e25599596be4aeb,"Change the repo to use a single json file for config rather than multiple text files

This change fixes the marketplace dashboard populator, but not the xfails dashboard populator

Conflicts:
	repos.txt"
149,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/6,6,Change name of marketplace data file,,bobsilverberg,142755,2014-02-10T21:30:10Z,COLLABORATOR,True,2,557,3,GitHub dashboard for Firefox Test Engineering,HTML,63210a69157b9fea3582ebb73f366ee73292953b,Change name of marketplace data file
150,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/5,5,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"This replaces PR #3.

Note that the marketplace_tests_results.json file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-02-03T03:45:25Z,COLLABORATOR,True,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,6b89292b3475ea18a8a8222bbf2d7b02de68e7d5,First iteration of Marketplace tests dashboard
151,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/5,5,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"This replaces PR #3.

Note that the marketplace_tests_results.json file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-02-03T03:45:25Z,COLLABORATOR,True,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,9e6bf11bf52b08f1a6e3d4f307f9a8603932b5e5,Change link to point to test details
152,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/5,5,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"This replaces PR #3.

Note that the marketplace_tests_results.json file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-02-03T03:45:25Z,COLLABORATOR,True,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,d556ab5c10ce766c7a56a135546b6e48689574f4,Combine both dashboards into a single angular js app
153,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/5,5,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"This replaces PR #3.

Note that the marketplace_tests_results.json file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-02-03T03:45:25Z,COLLABORATOR,True,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,5be13f92d66952b53dfeb0dc1347e55e225b28b2,Move marketplace tests data file to a subfolder
154,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/4,4,Add marketplace test results parser,"This PR introduces the parser which reads the results.xml files from each job and aggregates the results into a json file that the marketplace tests dashboard can consume.

This is all working locally for me, and should work when run on Jenkins as well. My idea is to set it up so that this will be run automatically after every marketplace job, which will keep the file always up to date.

Right now this just generates the file locally. We'll also need to get it to the gh-pages branch so it can be used. I was thinking I'd use a similar approach to what is being done with the xfails dashboard, where we simply use Git to push the new file to the repo. I have a couple of questions about this, which I want to discuss with @retornam.

Requesting review from @retornam and any other interested parties.
",bobsilverberg,142755,2014-02-01T14:04:20Z,COLLABORATOR,True,156,0,4,GitHub dashboard for Firefox Test Engineering,HTML,a21c471dffba61ac4f70d1be79ca0dde75d6cd77,Add marketplace test results parser
155,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/3,3,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"Note that the `marketplace_tests_results.json` file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-01-29T02:37:17Z,COLLABORATOR,False,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,6b89292b3475ea18a8a8222bbf2d7b02de68e7d5,First iteration of Marketplace tests dashboard
156,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/3,3,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"Note that the `marketplace_tests_results.json` file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-01-29T02:37:17Z,COLLABORATOR,False,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,9e6bf11bf52b08f1a6e3d4f307f9a8603932b5e5,Change link to point to test details
157,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/3,3,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"Note that the `marketplace_tests_results.json` file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-01-29T02:37:17Z,COLLABORATOR,False,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,d556ab5c10ce766c7a56a135546b6e48689574f4,Combine both dashboards into a single angular js app
158,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/3,3,Creation of Marketplace-tests dashboard and integration of xfails/skips dashboard with it,"Note that the `marketplace_tests_results.json` file is the source of the marketplace dashboard and is being added for demonstration purposes. A separate job will populate that file.
",bobsilverberg,142755,2014-01-29T02:37:17Z,COLLABORATOR,False,932,181,6,GitHub dashboard for Firefox Test Engineering,HTML,5be13f92d66952b53dfeb0dc1347e55e225b28b2,Move marketplace tests data file to a subfolder
159,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/2,2,Arranging repos alphabetically,,retornam,179895,2014-01-15T18:25:12Z,MEMBER,True,13,13,1,GitHub dashboard for Firefox Test Engineering,HTML,f4e14e202a0803eea4637d24e05587364b5441b5,Arranging repos alphabetically
160,https://api.github.com/repos/mozilla/fxtest-dashboard/pulls/1,1,changed url for proper updation of repo,"For proper update of content here http://mozilla.github.io/mozwebqa-dashboard/  I think the URL of the repo where code is pushed via crontab needs to be changed in both the bash and fabric files.
",bitgeeky,4486964,2014-01-15T09:29:05Z,MEMBER,True,3,3,2,GitHub dashboard for Firefox Test Engineering,HTML,a821e5f4774bc3d4eba3b4c89f393be0e9857922,changed url for proper updation of repo
