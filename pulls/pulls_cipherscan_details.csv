,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/cipherscan/pulls/184,184,analyze.py: Fix intermediate configuration detection,"Use the openssl_ciphers key instead of openssl_ciphersuites since we compare against ciphers being used. Remove hardcoded assumptions about TLSv1 and AES being required. Use the server_preferred_order key instead of assuming server order for ciphers.

This is a follow-up to the comment I left in #180. I set up an Apache web server using the [configuration generator](https://ssl-config.mozilla.org/#server=apache&server-version=2.4.29&config=intermediate&openssl-version=1.0.2o&hsts=false&ocsp=false) set to the intermediate configuration and verified that analyze.py with my changes now report intermediate TLS instead of bad:

```
$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

$ ./analyze.py -t ws-simplify
Warning: target is not a FQDN. SNI was disabled. Use a FQDN or '-servername <fqdn>'
ws-simplify:443 has bad ssl/tls

Things that are bad:
* remove cipher ECDHE-RSA-AES256-GCM-SHA384
* remove cipher DHE-RSA-AES256-GCM-SHA384
* remove cipher ECDHE-RSA-AES128-GCM-SHA256
* remove cipher DHE-RSA-AES128-GCM-SHA256

Changes needed to match the old level:
* remove cipher ECDHE-RSA-AES256-GCM-SHA384
* remove cipher DHE-RSA-AES256-GCM-SHA384
* remove cipher ECDHE-RSA-AES128-GCM-SHA256
* remove cipher DHE-RSA-AES128-GCM-SHA256
* enable TLSv1.1
* enable TLSv1
* enable TLSv1.3
* add cipher DES-CBC3-SHA
* use a certificate with sha1WithRSAEncryption signature
* use DHE of 1024bits and ECC of 256bits
* consider enabling OCSP Stapling
* enforce server side ordering

Changes needed to match the intermediate level:
* remove cipher ECDHE-RSA-AES256-GCM-SHA384
* remove cipher DHE-RSA-AES256-GCM-SHA384
* remove cipher ECDHE-RSA-AES128-GCM-SHA256
* remove cipher DHE-RSA-AES128-GCM-SHA256
* consider enabling TLSv1.3
* add cipher AES128-SHA
* consider using DHE of at least 2048bits and ECC 256bit and greater
* consider enabling OCSP Stapling
* enforce server side ordering

Changes needed to match the modern level:
* remove cipher ECDHE-RSA-AES256-GCM-SHA384
* remove cipher DHE-RSA-AES256-GCM-SHA384
* remove cipher ECDHE-RSA-AES128-GCM-SHA256
* remove cipher DHE-RSA-AES128-GCM-SHA256
* disable TLSv1.2
* consider enabling TLSv1.3
* use a certificate signed with ecdsa-with-SHA256 or ecdsa-with-SHA384 or ecdsa-with-SHA512
* use DHE of at least 2048bits and ECC 256bit and greater
* consider enabling OCSP Stapling
* enforce server side ordering

$ git checkout analyze-inter
Switched to branch 'analyze-inter'
Your branch is up-to-date with 'origin/analyze-inter'.

$ ./analyze.py -t ws-simplify
Warning: target is not a FQDN. SNI was disabled. Use a FQDN or '-servername <fqdn>'
ws-simplify:443 has intermediate ssl/tls

Changes needed to match the old level:
* enable TLSv1.1
* enable TLSv1
* enable TLSv1.3
* add cipher DES-CBC3-SHA
* use a certificate with sha1WithRSAEncryption signature
* use DHE of 1024bits and ECC of 256bits
* consider enabling OCSP Stapling
* enforce server side ordering

Changes needed to match the intermediate level:
* consider enabling TLSv1.3
* consider enabling OCSP Stapling

Changes needed to match the modern level:
* remove cipher ECDHE-RSA-AES256-GCM-SHA384
* remove cipher DHE-RSA-AES256-GCM-SHA384
* remove cipher ECDHE-RSA-AES128-GCM-SHA256
* remove cipher DHE-RSA-AES128-GCM-SHA256
* disable TLSv1.2
* consider enabling TLSv1.3
* use a certificate signed with ecdsa-with-SHA256 or ecdsa-with-SHA384 or ecdsa-with-SHA512
* use DHE of at least 2048bits and ECC 256bit and greater
* consider enabling OCSP Stapling
```",spanglerco,7519484,2019-10-29T15:49:31Z,CONTRIBUTOR,True,17,24,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0c6f41ddc6063ceb457de2046dca19cbf6673c5a,"analyze.py: Fix intermediate configuration detection

Use the openssl_ciphers key instead of openssl_ciphersuites
since we compare against ciphers being used. Remove hardcoded
assumptions about TLS 1.1 and AES being required. Use the
server_preferred_order key instead of assuming server order
for ciphers."
1,https://api.github.com/repos/mozilla/cipherscan/pulls/181,181,Fixes #180,Updates key to match change in data from https://statics.tls.security.mozilla.org/server-side-tls-conf.json.,dchandekstark,137925,2019-07-08T19:35:39Z,CONTRIBUTOR,True,7,7,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ea341f0aec1b74834c177def3bb581d309ee2c73,Fixes #180
2,https://api.github.com/repos/mozilla/cipherscan/pulls/177,177,Add Mozilla Code of Conduct,"Fixes #176

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-28T04:17:23Z,CONTRIBUTOR,True,15,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3ff37c500aff3c23ed327ea04294cfbe924f5418,"Add Mozilla Code of Conduct file

Fixes #176.

_(Message COC002)_"
3,https://api.github.com/repos/mozilla/cipherscan/pulls/170,170,de-engrishify error message,,tomato42,618246,2018-12-12T15:09:37Z,MEMBER,True,2,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3186212159fb18af683bd0416088a43daa2527c7,de-engrishify error message
4,https://api.github.com/repos/mozilla/cipherscan/pulls/169,169,Add TLS1.3 support,"I finally decided to take the easiest possible route and create a new openssl binary based off 1.1.1, and rename the previous binary as legacy. This will allow us to keep support for old ciphers/protocols and track the latest features at the same time.

Since TLS1.3 is fairly different from previous versions, I created a separate function to scan for it. We can't use the usual ""discard previous used cipher"" algorithm with it, as OpenSSL doesn't support the `!` flag in the `-ciphersuites` parameter, but the logic isn't that different otherwise.

The refactoring caused a few issues that I think are now all fixed, but we should still test heavily before merging this patch.",jvehent,415617,2018-12-12T11:20:34Z,CONTRIBUTOR,False,259,136,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e79ce277f7249eea7018445906c2d83344a4700a,Add TLS1.3 support
5,https://api.github.com/repos/mozilla/cipherscan/pulls/169,169,Add TLS1.3 support,"I finally decided to take the easiest possible route and create a new openssl binary based off 1.1.1, and rename the previous binary as legacy. This will allow us to keep support for old ciphers/protocols and track the latest features at the same time.

Since TLS1.3 is fairly different from previous versions, I created a separate function to scan for it. We can't use the usual ""discard previous used cipher"" algorithm with it, as OpenSSL doesn't support the `!` flag in the `-ciphersuites` parameter, but the logic isn't that different otherwise.

The refactoring caused a few issues that I think are now all fixed, but we should still test heavily before merging this patch.",jvehent,415617,2018-12-12T11:20:34Z,CONTRIBUTOR,False,259,136,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,39f2ad7b093e3b57ccdac4f52903322856cce641,Add tls1.3 test to travisci
6,https://api.github.com/repos/mozilla/cipherscan/pulls/166,166,Changes analyze.py to be compatible with python3,This is to fix the #146 ,pancho-villa,1134214,2018-08-28T21:20:54Z,NONE,True,9,3,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,acfae638a32c6fa0ff1df4d4992e9d6e4359af08,Changes analyze.py to be compatible with python3
7,https://api.github.com/repos/mozilla/cipherscan/pulls/161,161,tweak phrasing for analyze.py report,"for intermediate and modern, we expect the server to support exact
set of curves, reflect that in the error message

fixes #133 ",tomato42,618246,2018-05-20T12:31:51Z,MEMBER,True,2,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,981ac390d665227129031d29c59beeff0be728e3,"tweak phrasing for analyze.py report

for intermediate and modern, we expect the server to support exact
set of curves, reflect that in the error message"
8,https://api.github.com/repos/mozilla/cipherscan/pulls/160,160,add travis badge,"we have a CI* so let's advertise it!

 \* - terms and conditions may apply ;)",tomato42,618246,2018-05-20T12:25:30Z,MEMBER,True,2,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32fb9a63c3de7086cf3423de00b910e251798287,"add travis badge

we have a CI* so let's advertise it!

 * - terms and conditions may apply ;)"
9,https://api.github.com/repos/mozilla/cipherscan/pulls/159,159,Add sha512WithRSAEncryption,Fixes #158 ,amaccuish,9434795,2018-05-20T00:19:23Z,NONE,False,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3f0e27b0faf5588384482f973b45caf76556bc0c,Add sha512WithRSAEncryption
10,https://api.github.com/repos/mozilla/cipherscan/pulls/157,157,Create .travis.yml,,jvehent,415617,2018-05-19T23:54:24Z,CONTRIBUTOR,True,4,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9681b2f61536e24c55051b8bdd12a8fa02f114fb,Create .travis.yml
11,https://api.github.com/repos/mozilla/cipherscan/pulls/156,156,support spaces in openssl path,fixes #78,tomato42,618246,2018-05-19T18:26:06Z,MEMBER,True,150,141,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4890e26910b3e390dae0ff5cb73e76df6caa4dd3,"support spaces in openssl path

fixes #78"
12,https://api.github.com/repos/mozilla/cipherscan/pulls/149,149,make shell scripts respect PATH,"use the bash from PATH, not from /bin

fixes #141",tomato42,618246,2018-05-13T17:33:27Z,MEMBER,True,4,4,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,31761fa7b2344509ee5938875f06a0189fe02860,"make shell scripts respect PATH

use the bash from PATH, not from /bin

fixes #141"
13,https://api.github.com/repos/mozilla/cipherscan/pulls/143,143,README.md typo,,luigiJsonar,26639149,2017-11-16T20:02:48Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fda447a5a8d4aabeb0c16ec71f34ebcd4d3fb844,README.md typo
14,https://api.github.com/repos/mozilla/cipherscan/pulls/142,142,Redirect dependency download output to stderr,"If running `analyze.py` for the first time the dependency downloading
output would be part of the json, and the command would fail due to
invalid json data.

Sample invalid json:
```
DEBUG:root:processing results on {""target"":""google.com:443"",""utctimestamp"":""2017-11-07T18:11:05.0Z"",""serverside"":""True"",""ciphersuite"": [{""cipher"":""ECDHE-RSA-AES128-GCM-SHA256"",""protocols"":[""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""ECDH,P-256,256bits"",""curves"":[""prime256v1""],""curves_ordering"":""server""},{""cipher"":""ECDHE-RSA-AES256-GCM-SHA384"",""protocols"":[""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""ECDH,P-256,256bits"",""curves"":[""prime256v1""],""curves_ordering"":""server""},{""cipher"":""ECDHE-RSA-AES128-SHA"",""protocols"":[""TLSv1"",""TLSv1.1"",""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""ECDH,P-256,256bits"",""curves"":[""prime256v1""],""curves_ordering"":""server""},{""cipher"":""ECDHE-RSA-AES256-SHA"",""protocols"":[""TLSv1"",""TLSv1.1"",""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""ECDH,P-256,256bits"",""curves"":[""prime256v1""],""curves_ordering"":""server""},{""cipher"":""AES128-GCM-SHA256"",""protocols"":[""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""None""},{""cipher"":""AES256-GCM-SHA384"",""protocols"":[""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""None""},{""cipher"":""AES128-SHA"",""protocols"":[""TLSv1"",""TLSv1.1"",""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""None""},{""cipher"":""AES256-SHA"",""protocols"":[""TLSv1"",""TLSv1.1"",""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""None""},{""cipher"":""DES-CBC3-SHA"",""protocols"":[""TLSv1"",""TLSv1.1"",""TLSv1.2""],""pubkey"":[""2048""],""sigalg"":[""sha256WithRSAEncryption""],""trusted"":""True"",""ticket_hint"":""100800"",""ocsp_stapling"":""False"",""npn"":[""grpc-exp"",""h2"",""http/1.1""],""pfs"":""None""}],""curves_fallback"":""False"",""renegotiation"":""secure"",""compression"":""NONE"",""configs"":{""big-TLSv1.2"":{""tolerant"":""True"",""proto"":""TLSv1.2"",""cipher"":""ECDHE-RSA-AES128-GCM-SHA256"",""trusted"":""True""},""big-TLSv1.1"":{""tolerant"":""True"",""proto"":""TLSv1.1"",""cipher"":""ECDHE-RSA-AES128-SHA"",""trusted"":""True""},""big-TLSv1.0"":{""tolerant"":""True"",""proto"":""TLSv1"",""cipher"":""ECDHE-RSA-AES128-SHA"",""trusted"":""True""},""big-SSLv3"":{""tolerant"":""False""}},""intolerancies"":
/Users/erginbabani/workspace/cipherscan/cipherscan/cscan.sh: tlslite-ng not found, downloading...

/Users/erginbabani/workspace/cipherscan/cipherscan/cscan.sh: python-ecdsa not found, downloading...}
```
",ebabani,2236882,2017-11-07T18:22:54Z,CONTRIBUTOR,True,4,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3ecd5c589547419abc69f730d0e842fd8834a7c9,"Redirect dependency download output to stderr

If running `analyze.py` for the first time the dependency downloading
output would be part of the json, and the command would fail due to
invalid json data."
15,https://api.github.com/repos/mozilla/cipherscan/pulls/138,138,Update cipherscan,Simple add `continue` in the `read line` loop.,sunshuzhou,2659011,2017-05-02T13:39:19Z,CONTRIBUTOR,True,3,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c23d1ba64a5080420d61d566b6390f3516d4d6fb,Update cipherscan
16,https://api.github.com/repos/mozilla/cipherscan/pulls/138,138,Update cipherscan,Simple add `continue` in the `read line` loop.,sunshuzhou,2659011,2017-05-02T13:39:19Z,CONTRIBUTOR,True,3,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2204ec21e9e3193b8d34b545c8bdff6f04c5ba02,Update cipherscan
17,https://api.github.com/repos/mozilla/cipherscan/pulls/136,136,Better output on first start,"Hi, I know we've already discussed about this earlier but when I tested again, I've found that the text was not properly displayed (I mean not as I wanted it to be) and I think this PR is better than the previous one.",Jiab77,9881407,2017-01-23T18:01:33Z,CONTRIBUTOR,False,5,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1f7858cd6f613b9454ecf3f07b6daa2f3488cdfd,"Merge pull request #1 from mozilla/master

Adding last changes"
18,https://api.github.com/repos/mozilla/cipherscan/pulls/136,136,Better output on first start,"Hi, I know we've already discussed about this earlier but when I tested again, I've found that the text was not properly displayed (I mean not as I wanted it to be) and I think this PR is better than the previous one.",Jiab77,9881407,2017-01-23T18:01:33Z,CONTRIBUTOR,False,5,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,db2000c5f7980dcb758747821ce979bd28c5ae9f,Changed text as all echo output are buffered
19,https://api.github.com/repos/mozilla/cipherscan/pulls/136,136,Better output on first start,"Hi, I know we've already discussed about this earlier but when I tested again, I've found that the text was not properly displayed (I mean not as I wanted it to be) and I think this PR is better than the previous one.",Jiab77,9881407,2017-01-23T18:01:33Z,CONTRIBUTOR,False,5,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,94316df50c40e1006041ec9aa5d54c0485f9679e,"Added empty line

Just to mark a proper separation before the execution of the main process"
20,https://api.github.com/repos/mozilla/cipherscan/pulls/135,135,Fixed symbolic link creation error and git output supression,"Added `&>/dev/null` on git commands to suppress their output
Fixed the symbolic link creation that pointed to non existent path. `ecdsa` folder moved to `src/ecdsa`",Jiab77,9881407,2017-01-23T06:36:57Z,CONTRIBUTOR,True,3,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5fd2e95c4d8415e07b0d822ef404c861b87daf85,"Few fixes

Added `&>/dev/null` on git commands to suppress their output
Fixed the symbolic link creation that pointed to non existent path. `ecdsa` folder moved to `src/ecdsa`"
21,https://api.github.com/repos/mozilla/cipherscan/pulls/135,135,Fixed symbolic link creation error and git output supression,"Added `&>/dev/null` on git commands to suppress their output
Fixed the symbolic link creation that pointed to non existent path. `ecdsa` folder moved to `src/ecdsa`",Jiab77,9881407,2017-01-23T06:36:57Z,CONTRIBUTOR,True,3,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,717b9c0a1302b4f33ad2e6a5e24d1f95512e9dc1,"Adapted changes as requested

Added some detail when required libraries are not present on the host and needs downloading"
22,https://api.github.com/repos/mozilla/cipherscan/pulls/135,135,Fixed symbolic link creation error and git output supression,"Added `&>/dev/null` on git commands to suppress their output
Fixed the symbolic link creation that pointed to non existent path. `ecdsa` folder moved to `src/ecdsa`",Jiab77,9881407,2017-01-23T06:36:57Z,CONTRIBUTOR,True,3,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0b1d5331d691ff96f59526747a425208a7f8c32a,"Added requested changes

I may change `${BASH_SOURCE[0]}` by ` `basename $BASH_SOURCE` ` if you prefer"
23,https://api.github.com/repos/mozilla/cipherscan/pulls/134,134,fix -b (benchmark) output,"The benchmark column wasn't being rendered in the output, and just adding the field index to the `awk` invocation wouldn't be enough: the field index would change depending on whether `--curves` was enabled (because the `curve_ordering` column gets a value when it's turned on, but is blank when turned off).

The first patch ensures the curves_ordering column has a dummy value of `unknown` if `$TEST_CURVES` isn't `True`.
The second patch adds the benchmark microsecond data to the output.",tycho,29616,2017-01-01T22:19:37Z,CONTRIBUTOR,True,6,7,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,532ff712aaceaae29a02f82e05529f0dd29c9f6b,"cipherscan: always define a curves_ordering column value

Signed-off-by: Steven Noonan <steven@uplinklabs.net>"
24,https://api.github.com/repos/mozilla/cipherscan/pulls/134,134,fix -b (benchmark) output,"The benchmark column wasn't being rendered in the output, and just adding the field index to the `awk` invocation wouldn't be enough: the field index would change depending on whether `--curves` was enabled (because the `curve_ordering` column gets a value when it's turned on, but is blank when turned off).

The first patch ensures the curves_ordering column has a dummy value of `unknown` if `$TEST_CURVES` isn't `True`.
The second patch adds the benchmark microsecond data to the output.",tycho,29616,2017-01-01T22:19:37Z,CONTRIBUTOR,True,6,7,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,981cf0744e11c5825f907ba5a5003f423a03d01c,"cipherscan: fix benchmark mode output

The microsecond measurement column wasn't being rendered.

Signed-off-by: Steven Noonan <steven@uplinklabs.net>"
25,https://api.github.com/repos/mozilla/cipherscan/pulls/131,131,Added info about OpenSSL proxy option to cipherscan script.,Per issue https://github.com/mozilla/cipherscan/issues/129.,castillar,1791326,2016-12-02T17:33:20Z,NONE,True,4,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3fc28b001c27e97af8b0a59f4069953d8adb05e0,Added info about OpenSSL proxy option to cipherscan script.
26,https://api.github.com/repos/mozilla/cipherscan/pulls/131,131,Added info about OpenSSL proxy option to cipherscan script.,Per issue https://github.com/mozilla/cipherscan/issues/129.,castillar,1791326,2016-12-02T17:33:20Z,NONE,True,4,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c6934569bddefaf31edf798c855f008ebe4ca543,Update to fix OpenSSL version in info message
27,https://api.github.com/repos/mozilla/cipherscan/pulls/128,128,TLS version (in)tolerance scanner,"Since it is impossible to make openssl command line tool send
TLSv1.3 or TLSv1.4 Client Hello message, add a python based tool to perform
TLS version intolerance scan
",tomato42,618246,2016-10-04T23:04:39Z,MEMBER,True,1450,1,15,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,45bb7d0c28852bd429275da0ff245f1702e4a335,"TLS version (in)tolerance scanner

Since it is impossible to make openssl command line tool send
TLSv1.3 Client Hello message, add a python based tool to perform
TLS version intolerance scan"
28,https://api.github.com/repos/mozilla/cipherscan/pulls/128,128,TLS version (in)tolerance scanner,"Since it is impossible to make openssl command line tool send
TLSv1.3 or TLSv1.4 Client Hello message, add a python based tool to perform
TLS version intolerance scan
",tomato42,618246,2016-10-04T23:04:39Z,MEMBER,True,1450,1,15,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fb8b4d73bffdce464a7bac1a59fe58ec7c66cd94,interpreting the intolerance data
29,https://api.github.com/repos/mozilla/cipherscan/pulls/126,126,Add support for collecting supported NPN protocols,"since in NPN it's the server that advertises the supported protocols and the client just picks one, it's trivial to collected the list of protocols supported by server

so do it
",tomato42,618246,2016-09-16T21:08:50Z,MEMBER,True,47,13,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,6a906a626728da97e4568d2df958c62d04804c37,add support for collecting supported NPN protocols
30,https://api.github.com/repos/mozilla/cipherscan/pulls/125,125,"sort CA's by count, not name","since generally the interesting CAs are used by a large amount or a small amount of servers, sort them by count, not by name
",tomato42,618246,2016-09-12T21:59:05Z,MEMBER,True,7,6,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0120fff9bcbaf3ca8e6472f32d1ba84f2bcb7c7a,"sort CA's by count, not name"
31,https://api.github.com/repos/mozilla/cipherscan/pulls/124,124,Allow EC keys to have a smaller bitsize,"Should prevent EC keys from showing up as fubar'd.
",firesock,2768982,2016-08-21T22:24:22Z,CONTRIBUTOR,True,14,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f5ad5806c35ee389d08f5c1aade6672f93e8c211,Allow EC keys to have a smaller bitsize
32,https://api.github.com/repos/mozilla/cipherscan/pulls/124,124,Allow EC keys to have a smaller bitsize,"Should prevent EC keys from showing up as fubar'd.
",firesock,2768982,2016-08-21T22:24:22Z,CONTRIBUTOR,True,14,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,955d55a6bae0236d0045937ed5babf0a8175c391,Update EC check to use regexp and match all OpenSSL EC cipher suite variants
33,https://api.github.com/repos/mozilla/cipherscan/pulls/124,124,Allow EC keys to have a smaller bitsize,"Should prevent EC keys from showing up as fubar'd.
",firesock,2768982,2016-08-21T22:24:22Z,CONTRIBUTOR,True,14,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3a2a43f91da1d73f987b60f56b8bd29f01279e0d,Hardcode minimum EC key size
34,https://api.github.com/repos/mozilla/cipherscan/pulls/124,124,Allow EC keys to have a smaller bitsize,"Should prevent EC keys from showing up as fubar'd.
",firesock,2768982,2016-08-21T22:24:22Z,CONTRIBUTOR,True,14,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bb3e89ec09020fe1e4d78056e2f4d0f45739ddc5,Update fubar EC parameter size to 256
35,https://api.github.com/repos/mozilla/cipherscan/pulls/123,123,changing time of verification for certificate chains,"allow to run the analysis of certificate chains later after the
data was collected, allows also for re-analysis of archival data
",tomato42,618246,2016-07-20T19:19:29Z,MEMBER,True,28,5,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a5ec04500013e2e9b46c143fe4bf99e389d686a9,"changing time of verification for certificate chains

allow to run the analysis of certificate chains later after the
data was collected, allows also for re-analysis of archival data"
36,https://api.github.com/repos/mozilla/cipherscan/pulls/122,122,Result parser update,"world moves on, update the results parser to accommodate it
",tomato42,618246,2016-07-20T18:55:17Z,MEMBER,True,41,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bbeac6107a3be34243b7704c38cfb5acff77cd87,"add FF 44 ciphers

since FF 44 has a different cipher set than FF 35, especially the
drop of DSS and RC4, it will be useful to have connection
statistics for it"
37,https://api.github.com/repos/mozilla/cipherscan/pulls/122,122,Result parser update,"world moves on, update the results parser to accommodate it
",tomato42,618246,2016-07-20T18:55:17Z,MEMBER,True,41,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7bb272e353de9621eba4ec8322fc6164d49ce4ef,"single-out 3DES ciphers

3DES is the weakest cipher from the ones that are still officially
standing, so report more detailed statistics about it"
38,https://api.github.com/repos/mozilla/cipherscan/pulls/121,121,Better CA certificate handling,"few scripts to sort through your certificates and more robust trust path building for scanning
",tomato42,618246,2016-07-20T18:48:05Z,MEMBER,True,225,12,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e9808a1bcbde4edb708929da35c3374dea1b9594,"report errors in cert file searching

since the certificates are separate from results file, they can get
missing (or an incorrect set can be used)

provide a clear message about what file is missing"
39,https://api.github.com/repos/mozilla/cipherscan/pulls/121,121,Better CA certificate handling,"few scripts to sort through your certificates and more robust trust path building for scanning
",tomato42,618246,2016-07-20T18:48:05Z,MEMBER,True,225,12,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9f3407bb4c7e00109bf7052f95938e2fcd914f5,"scripts to create CApath directories with roots or intermediaries

In case the user has a set of certificates *and* intermediaries,
it is necessary to prime both the `ca_trusted` directory and the
`ca_files` directories with respectively all root CA's and
all CA's (root or intermediate)"
40,https://api.github.com/repos/mozilla/cipherscan/pulls/121,121,Better CA certificate handling,"few scripts to sort through your certificates and more robust trust path building for scanning
",tomato42,618246,2016-07-20T18:48:05Z,MEMBER,True,225,12,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,94efc235d0fc7fb010d456258d6995cb342f108b,"use more robust trust path building by default

use the -trusted_first flag to openssl, so that it tries alternative
trust paths to verify validity of server presented certificate"
41,https://api.github.com/repos/mozilla/cipherscan/pulls/121,121,Better CA certificate handling,"few scripts to sort through your certificates and more robust trust path building for scanning
",tomato42,618246,2016-07-20T18:48:05Z,MEMBER,True,225,12,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7834cd07484b086da015a5cfd6ba3675f184eb8a,"fold some long lines

long lines hard to read, make Hulk sad"
42,https://api.github.com/repos/mozilla/cipherscan/pulls/120,120,add README for the top1m folder,"since the top-1m.csv.zip is not static, tell the users where it
can be found

also add a generic explanation about files in the folder
",tomato42,618246,2016-07-20T18:17:08Z,MEMBER,True,5,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,985e26c71aa464e96e38b015e9b08b98a205dda1,"add README for the top1m folder

since the top-1m.csv.zip is not static, tell the users where it
can be found

also add a generic explanation about files in the folder"
43,https://api.github.com/repos/mozilla/cipherscan/pulls/117,117,Fallback to local JSON if urllib fails to retrieve updated list,"Allows for both 'offline' usage as well as usage with python <2.7.9 that doesn't support SNI, and therefore can't retrieve the JSON file from it's current hosting URL.  Added debug line to indicate fallback occuring. Fixes issue #116. 
",adamcrosby,84214,2016-02-29T13:29:53Z,CONTRIBUTOR,True,152,0,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,55cdb74ff7f5dea0f806243f50d6496e265155ba,"Added fallback to use local json recommendations file if urllib fails to connect (including SNI errors), fixes issue #116"
44,https://api.github.com/repos/mozilla/cipherscan/pulls/117,117,Fallback to local JSON if urllib fails to retrieve updated list,"Allows for both 'offline' usage as well as usage with python <2.7.9 that doesn't support SNI, and therefore can't retrieve the JSON file from it's current hosting URL.  Added debug line to indicate fallback occuring. Fixes issue #116. 
",adamcrosby,84214,2016-02-29T13:29:53Z,CONTRIBUTOR,True,152,0,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,34f92a68381ddcd3d683eee620b16de2b21ffa23,Added adamcrobsy to contributors list
45,https://api.github.com/repos/mozilla/cipherscan/pulls/109,109,TLS intolerance scanning,"just a quick and dirty example to show how we can test for TLS version tolerance for any version

the script is run as

```
./cscan.sh hostname port
```

part of work towards #108 
",tomato42,618246,2015-11-23T22:46:35Z,MEMBER,False,2700,1,18,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,22ed23f071266cd68b8eff8ca2862e1bc2c043b2,"TLS version (in)tolerance scanner

Since it is impossible to make openssl command line tool send
TLSv1.3 Client Hello message, add a python based tool to perform
TLS version intolerance scan"
46,https://api.github.com/repos/mozilla/cipherscan/pulls/109,109,TLS intolerance scanning,"just a quick and dirty example to show how we can test for TLS version tolerance for any version

the script is run as

```
./cscan.sh hostname port
```

part of work towards #108 
",tomato42,618246,2015-11-23T22:46:35Z,MEMBER,False,2700,1,18,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,88ae052f8ed852fc30dcb179a30502d7e29686db,"add more probes

since not all servers support the ciphers supported by Firefox 42,
add other configurations to make sure we can find a way to connect
to server, if anything could

also includes much more elaborate and realistic TLSv1.3 Client Hello
(the Xmas tree)"
47,https://api.github.com/repos/mozilla/cipherscan/pulls/109,109,TLS intolerance scanning,"just a quick and dirty example to show how we can test for TLS version tolerance for any version

the script is run as

```
./cscan.sh hostname port
```

part of work towards #108 
",tomato42,618246,2015-11-23T22:46:35Z,MEMBER,False,2700,1,18,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1f26852b2928536624d1115133ca3182e620b177,"size intolerance checks

since TLSv1.3 client hello's will include initial client key share,
verify that the server is able to accept and process big client hello
messages"
48,https://api.github.com/repos/mozilla/cipherscan/pulls/107,107,properly detect ECDSA certs for size compare,"since ECDSA certificates during the transition are likely to be
signed using RSA keys, we need to check the cipher rather than the
signature in the certificate to tell if the cert is ECDSA and as such
can have small key sizes
",tomato42,618246,2015-11-17T14:30:28Z,MEMBER,True,2,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4d77c8749451f256a29e0cefb9147648a8b48fbd,"properly detect ECDSA certs for keysize compare

since ECDSA certificates during the transition are likely to be
signed using RSA keys, we need to check the cipher rather than the
signature in the certificate to tell if the cert is ECDSA and as such
can have small key sizes"
49,https://api.github.com/repos/mozilla/cipherscan/pulls/105,105,Update analyze.py,"Per https://mozilla.github.io/server-side-tls/ssl-config-generator/
The intermediate config supports 'ECDHE-RSA-DES-CBC3-SHA', add it to analyze.py.
",Emantor,934284,2015-11-17T08:08:25Z,CONTRIBUTOR,True,4,3,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e8ba5ab8feb6e4331819916a3d1bd4de46c4a4b9,"Update analyze.py

Per https://mozilla.github.io/server-side-tls/ssl-config-generator/
The intermediate config supports 'ECDHE-RSA-DES-CBC3-SHA', add it to analyze.py"
50,https://api.github.com/repos/mozilla/cipherscan/pulls/105,105,Update analyze.py,"Per https://mozilla.github.io/server-side-tls/ssl-config-generator/
The intermediate config supports 'ECDHE-RSA-DES-CBC3-SHA', add it to analyze.py.
",Emantor,934284,2015-11-17T08:08:25Z,CONTRIBUTOR,True,4,3,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,536ff90b864274af2420ad1787f584fdb3d377c3,"ECDHE-ECDSA-DES-CBC3-SHA was missing too

Fix `ECDHE-ECDSA-DES-CBC3-SHA` as well."
51,https://api.github.com/repos/mozilla/cipherscan/pulls/104,104,Untrusted certificate alert should be red,"Untrusted certificate alert is green when should be red. Fixed here.

![screenshot from 2015-09-23 15-59-56](https://cloud.githubusercontent.com/assets/862690/10055360/2dddf400-620c-11e5-9030-7e56d6b1df3b.png)
",injcristianrojas,862690,2015-09-23T19:01:14Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f717a556e595617bded9c726d203f1d817594f4a,Untrusted certificate alert should be red
52,https://api.github.com/repos/mozilla/cipherscan/pulls/103,103,Fallback to default openssl when supplied openssl can't be executed,"Pullrequest :arrow_forward:  :100: :smile:
The merge in 3f3e22b caused issues for MSYS2 on Windows 8.1

I added a small check to make sure that the supplied openssl is actually executable
With this check, cipherscan works again on...

```
% bash --version
GNU bash, version 4.3.42(2)-release (x86_64-pc-msys)
% uname -s
MINGW64_NT-6.3
```
",PeterMosmans,1465302,2015-09-22T09:30:16Z,CONTRIBUTOR,True,5,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c00474805d6545d93fe8b73726b9cd8428e5789a,Fallback to default openssl when supplied openssl can't be executed
53,https://api.github.com/repos/mozilla/cipherscan/pulls/102,102,workaround bash 4.2- not having unset A[-1] support,"Fixes #101.
",floatingatoll,92684,2015-09-21T19:51:34Z,CONTRIBUTOR,True,3,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c9412e395de0b34456fc6bf78146575f66c02976,workaround bash 4.2- not having unset A[-1] support
54,https://api.github.com/repos/mozilla/cipherscan/pulls/100,100,Add testing for renegotiation and compression,"since using compression is bad (CRIME) and no secure renegotiation is bad (duh), check for those two

also adds few tips for useful openssl options to help message
",tomato42,618246,2015-09-21T14:56:53Z,MEMBER,True,107,5,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,99a0b6be0700e1885af55b0d7878566f18fa4ccc,"collect stats about compression and renegotiation

since no support for compression and support for renegotiation are
necessary for the server to have a secure configuration, collect
and report those two too"
55,https://api.github.com/repos/mozilla/cipherscan/pulls/100,100,Add testing for renegotiation and compression,"since using compression is bad (CRIME) and no secure renegotiation is bad (duh), check for those two

also adds few tips for useful openssl options to help message
",tomato42,618246,2015-09-21T14:56:53Z,MEMBER,True,107,5,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,aa093bc86db5300eedb1934c91b2244eea39735d,"add openssl options to help message

add examples of useful openssl options"
56,https://api.github.com/repos/mozilla/cipherscan/pulls/99,99,fix printing of test data for intolerant servers,"tls_tolerance is an array, so we need to use array syntax...

since if the server is tls version intolerant we will be printing
a lot of info, space it out from the certificate-related summary

ephemeral sigalgs are also printing a lot of information, so space
them from the TLS Tolerance test results
",tomato42,618246,2015-09-21T14:19:29Z,MEMBER,True,3,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,dbce87cb1af453bb57e51d84c358f6be2aef9f97,"fix printing of test data for intolerant servers

tls_tolerance is an array, so we need to use array syntax...

since if the server is tls version intolerant we will be printing
a lot of info, space it out from the certificate-related summary

ephemeral sigalgs are also printing a lot of information, so space
them from the TLS Tolerance test results"
57,https://api.github.com/repos/mozilla/cipherscan/pulls/98,98,fix custom openssl with GOST config incompatibility,"fixes two issues
 1). -help message is used from the openssl set with the -o option
 2). doesn't use GOST config unconditionally - verifies that it works
     first

based partially off of Greg Owen gowen@swynwyr.com work in #67

fixes #86
",tomato42,618246,2015-09-19T18:03:24Z,MEMBER,True,28,24,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2ba7dc6dbfe3d3fb623ded93e275e815ac90520b,"fix custom openssl with GOST config incompatibility

fixes two issues
 1). -help message is used from the openssl set with the -o option
 2). doesn't use GOST config unconditionally - verifies that it works
     first

based partially off of Greg Owen <gowen@swynwyr.com> work in #67

fixes #86"
58,https://api.github.com/repos/mozilla/cipherscan/pulls/97,97,handle hostnames that are URIs,"fixes #83
",tomato42,618246,2015-09-19T17:44:37Z,MEMBER,True,9,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9cea1cdc67a2f3439321768427abcf2214c54c1b,"handle hostnames that are URIs

fixes #83"
59,https://api.github.com/repos/mozilla/cipherscan/pulls/96,96,fix coloring of cert key sizes,"a 2047 bit RSA certificate is just as secure as 2048 bit one (and
known good algorithms can very infrequently provide them when asked for
2048) so accept them too

DSA keys are bad in every case, so always red color them

ECDSA keys are OK above 256 bits
",tomato42,618246,2015-09-19T17:27:44Z,MEMBER,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8337fb7308aa865f2cd733bc27b76fa9c8c6bc1c,"fix coloring of cert key sizes

a 2047 bit RSA certificate is just as secure as 2048 bit one (and
known good algorithms can very infrequently provide them when asked for
2048) so accept them too

DSA keys are bad in every case, so always red color them

ECDSA keys are OK above 256 bits"
60,https://api.github.com/repos/mozilla/cipherscan/pulls/95,95,autodetect if the colors should be used,"check if the terminal output doesn't go to a pipe (less, file, etc.)
don't output colors by default then

fixes #94 
",tomato42,618246,2015-09-19T14:17:54Z,MEMBER,True,14,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bb2d3223f87f9bb7dd768c3a6a3c06426eda8ba2,"autodetect if the colors should be used

check if the terminal output doesn't go to a pipe (less, file, etc.)
don't output colors by default then"
61,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3107661b7c4ef3a7f4935320033b38191982becb,"Unroll the if-return/elif-return/else-return chain in test_cipher_on_target.

Rather than doing if-return, elif-return, else-return, just do
if-return, if-return, if-return. This provides no immediate benefit to
the code itself, but permits the introduction of code that alters the
$sigalg variable in between the first if-return and the latter two in an
upcoming commit."
62,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1828183e3f396a2d7ec276e90b1648907a5837a5,Extract the list of TLS versions to test into an array.
63,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32bf52a452d36f069c6aef63e23747d68770b6ef,"Store the found protocols in an array, rather than a CSV-joined string."
64,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0be95b821a8721061a64470b0b938a3e0fa71b9e,"Emit an array of certificate signature algorithms, where applicable.

Certain SSL servers may emit a different certificate for each TLS
protocol version. Previously, we simply emitted one of their signature
algorithms. Now, we emit an array where each element corresponds to the
array of TLS versions.

This will be extended to the other certificate-dependent attributes in
future commits."
65,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,638e0cbd10d1633a5c2f2dce62bbf3a9c464248d,"Add handling for TLS-variant results for the PFS value.

As before with signature algorithms, we need to handle the case where
the PFS value varies based on SSL protocol version."
66,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,eb752c541c7e5836401150ea367bb3f96e35a887,"Add handling for TLS-variant ticket hint value.

This, as previous commits, adds support for reporting the TLS ticket
hint value per-protocol, which results in a lot of 'None' for SSLv3 (as
expected)."
67,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8757bbd039c34693ea6c65cf47c8196c8ce73435,"Add handling for TLS-dependent trusted values.

As per previous commits, this adds TLS-dependent support for the
'Trusted' value in the output."
68,https://api.github.com/repos/mozilla/cipherscan/pulls/93,93,Add support for reporting connection and certificate properties on a per-protocol basis,"Review requested, DO NOT MERGE.

Closes #84.

Alters the JSON output format: the `pfs`, `tickethint`, `trusted`, `pubkey`, `sigalg` values are now arrays rather than strings. The arrays are each ordered the same as the TLS versions arrays.
",floatingatoll,92684,2015-09-18T23:43:42Z,CONTRIBUTOR,False,198,42,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d7a745866771ec6dd8035a238657e74e57330e4c,"Add handling of TLS-dependent pubkey sizes.

As with previous commits, this adds reporting for TLS-dependent pubkey
sizes."
69,https://api.github.com/repos/mozilla/cipherscan/pulls/92,92,stop reading the SSL certificate after we get the sigalg from it,"While working on handling of tls-dependent sigalg, I came across a place where we waste time reading tens of lines of SSL certificate data unnecessarily.
",floatingatoll,92684,2015-09-18T21:35:14Z,CONTRIBUTOR,False,19,18,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,87ecf60212f129f2bcafc6c0ccb46fb28fff2708,"Unroll the if-return/elif-return/else-return chain in test_cipher_on_target.

Rather than doing if-return, elif-return, else-return, just do
if-return, if-return, if-return. This provides no immediate benefit to
the code itself, but permits the introduction of code that alters the
$sigalg variable in between the first if-return and the latter two in an
upcoming commit."
70,https://api.github.com/repos/mozilla/cipherscan/pulls/92,92,stop reading the SSL certificate after we get the sigalg from it,"While working on handling of tls-dependent sigalg, I came across a place where we waste time reading tens of lines of SSL certificate data unnecessarily.
",floatingatoll,92684,2015-09-18T21:35:14Z,CONTRIBUTOR,False,19,18,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f618e9a12eb9a22c56e6bea0bd8bcb93b248be78,stop reading the SSL certificate after we get the sigalg from it
71,https://api.github.com/repos/mozilla/cipherscan/pulls/91,91,revert unintended inclusion of sigalg skipping from 9ea1749f,,floatingatoll,92684,2015-09-18T20:40:32Z,CONTRIBUTOR,True,2,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e27f614f083a37dc801b80d7f4c0b6a72a371fa2,revert unintended inclusion of sigalg skipping from 9ea1749f
72,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,249b3be23d35d7fb4b321e87a8b99337a2636b78,Rephrase TLS tolerance output in terminal
73,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,55918f3afb2a094298f2a78a4c89feea03db89a2,Add OK/KO flags in terminal output
74,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3dd0f58f4c2cb69ec8ff935c043cc195f3748e1f,"When in JSON mode, run curve and tolerance tests"
75,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9952d90cf42165b4d6c1a68a6554b0812919c8ad,Enable Server Name Indication by default
76,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7a697e28bc30db662847344b280ea07ea43e7623,Enable SNI by default only if target is a fqdn and -servername not supplied
77,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8a03b8d4e71d43892cf334f71e5ba4246db0d212,fix pubkey quality test
78,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5d5568f03aa6d03a0b7af447d90efc22b796434d,use colors instead of ok/ko
79,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f11a0e3594b6542c9aafdb86228f133ebbf30f98,"Revert ""When in JSON mode, run curve and tolerance tests""

This reverts commit 3dd0f58f4c2cb69ec8ff935c043cc195f3748e1f."
80,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5526c58ffbb190fae26c9f9655e2c5b41a79f848,"Merge pull request #82 from floatingatoll/various_fixes

Various fixes"
81,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,901e3cbdfc9972975733ad370af72abba9d11b6a,"Merge pull request #89 from jvehent/output20150918

A few fixes to the terminal output"
82,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,72e2b4f6e9ae2760a4e16bb010a573cdbf00df56,Enable Server Name Indication by default
83,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5284dda0fbc43017d3537b57e3d00b9b931e37d3,Enable SNI by default only if target is a fqdn and -servername not supplied
84,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3131abb3331f005660c9ba814e08eba8e216f3e9,Add warning if target is not fqdn and SNI needs to be disabled
85,https://api.github.com/repos/mozilla/cipherscan/pulls/90,90,Enable Server Name Indication by default,"@tomato42: r?
",jvehent,415617,2015-09-18T17:14:42Z,CONTRIBUTOR,True,103,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8618d44371975ea8de30737398f1fc64138185cb,Merge branch 'snidefault' of github.com:jvehent/cipherscan into snidefault
86,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,249b3be23d35d7fb4b321e87a8b99337a2636b78,Rephrase TLS tolerance output in terminal
87,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,55918f3afb2a094298f2a78a4c89feea03db89a2,Add OK/KO flags in terminal output
88,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3dd0f58f4c2cb69ec8ff935c043cc195f3748e1f,"When in JSON mode, run curve and tolerance tests"
89,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8a03b8d4e71d43892cf334f71e5ba4246db0d212,fix pubkey quality test
90,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5d5568f03aa6d03a0b7af447d90efc22b796434d,use colors instead of ok/ko
91,https://api.github.com/repos/mozilla/cipherscan/pulls/89,89,A few fixes to the terminal output,,jvehent,415617,2015-09-18T17:05:20Z,CONTRIBUTOR,True,81,20,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f11a0e3594b6542c9aafdb86228f133ebbf30f98,"Revert ""When in JSON mode, run curve and tolerance tests""

This reverts commit 3dd0f58f4c2cb69ec8ff935c043cc195f3748e1f."
92,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,644c1aa83aebbd7663d21eb67a3dcecb69261022,Replace numeric ALLCIPHERS comparison with simpler -n test.
93,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fc71ed72048d328f85b883e2e0096fe019728a12,Replace |sort|uniq with more efficient |sort -u.
94,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9e3154389e3dc1d56a56eda2a69d04019dd546d6,Replace unnecessary test of command; if $? with if command.
95,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a342ff7579857837cf319f8cbbbdbb60d4354af9,"Assign r=pass/fail once only, rather than twice for fail->pass."
96,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,487f7cb6a47fbf7620e561a1151177d1c0edcd17,Replace an echo | awk printf with builtin printf.
97,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2764a16693e887c5f0a4a39abdb945249464c0bc,"Replace OLDIFS/IFS joins with join_array_by_char(), avoiding $(...) subshell slowdown."
98,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,871ad92ae2c68af33d8df538b9eb62441b963084,Simplify signature algorithm extraction to use a capturing regex and string substitution.
99,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,90ac19cfe807697656bb1cae076e3754c8ad7c09,"Replace an instance of string-ish [[ $? -gt 0 ]] with arithmetic (( $? != 0 )).

This more accurately reflects that ""non-zero exit status indicates
failure""; while > 0 will no doubt work as well, != 0 avoids the question
of whether $? is signed or unsigned in bash and more accurately
represents the documentation (""non-zero"", != 0)."
100,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9c63841e4614f25d82d4a49592563adfcd011aae,Replace instances of string-ish [[ -eq ]] with arithmetic (( == )).
101,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3d3789828b0c1caf1d50ca5b2cf32cabe7bfb5b4,Replace instances of string-ish [[ -gt ]] with arithmetic (( > )).
102,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,34ae0ccab9dd831a043d23767870ce484c17b29b,Replace instances of string-ish [[ -ne ]] with arithmetic (( != )).
103,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b91b153bbdf11e9aa06cfc23862e32a9be6dded7,Replace instances of string-ish [[ -lt ]] with arithmetic (( < )).
104,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d2e1784eb8ec0370e8cd5dcb01d870cc5a0e6d1a,Simplify test_serverside_ordering() to use half as many assignments.
105,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9ea1749f6cd0a46939994724fc3b62f003e95ef8,Pre-cache the cipher array-to-string result to do one less join.
106,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5c09af67fd0012e70ffbff9e6e48e466f5d1faff,Remove one unnecessary string-to-array-to-string from get_curve_name().
107,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c103805a384e83dbc611bd1233e7dda8897e941a,"Replace instances of [[ $ != """" ]] with [[ -n """" ]]."
108,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bc79c510654b7fb3c22d0a31686dc6be23acc149,"Fixes instances of SC2086, SC2046 errors regarding unquoted variables.

In cipherscan line 294:
    echo $identifier
         ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 587:
                current_curves=""$(get_curve_name $(echo $pfs|cut -d ',' -f2))""
                                                 ^-- SC2046: Quote this to prevent word splitting.

In cipherscan line 603:
        debug Connection $i
                         ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 715:
            echo $header
                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 719:
            echo $result|grep -v '(NONE)'
                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 897:
        local tmp=$(echo Q | $sslcommand -curves $test_curves 2>/dev/null)
                                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 910:
                cname=""$(get_curve_name ${ephem_data[1]})""
                                        ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 953:
        local tmp=$(echo Q | $sslcommand -curves $test_curves 2>/dev/null)
                                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 967:
                local cname=""$(get_curve_name ${ephem_data[1]})""
                                              ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 1017:
        local tmp=$(echo Q | $sslcommand -curves $test_curves 2>/dev/null)
                                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 1030:
                local cname=""$(get_curve_name ${ephem_data[1]})""
                                              ^-- SC2086: Double quote to prevent globbing and word splitting."
109,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,24268e063e7642f3e5a2bb2cfa08b72aa7083ff5,"Fixes one instance of ""SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.""

In cipherscan line 427:
    local sslcommand=$@
                     ^-- SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate."
110,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b2521c8e42a5d8c2242d0ca11fdd865a3a09991e,"Fixes instances of ""SC2053: Quote the rhs of == in [[ ]] to prevent glob matching.""

In cipherscan line 469:
            if [[ ${known_certs[$cksum]} == $cert ]]; then
                                            ^-- SC2053: Quote the rhs of == in [[ ]] to prevent glob matching.

In cipherscan line 852:
        if [[ $selected == $prefered ]]; then
                           ^-- SC2053: Quote the rhs of == in [[ ]] to prevent glob matching.

In cipherscan line 915:
                if [[ ""$cname"" == ${curves[$id]} ]]; then
                                  ^-- SC2053: Quote the rhs of == in [[ ]] to prevent glob matching."
111,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,236b0b8cfe4a9f3b8d3ca394b0d7bef29639a3ca,"Fixes instances of ""SC2128: Expanding an array without an index only gives the first element."".

In cipherscan line 851:
        local selected=($result)
                        ^-- SC2128: Expanding an array without an index only gives the first element.

In cipherscan line 852:
        if [[ $selected == ""$prefered"" ]]; then
              ^-- SC2128: Expanding an array without an index only gives the first element."
112,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ce2f97f05c7b75ba057579ef17db870e0581bc09,"Replace instances of [[ $ == """" ]] with [[ -z """" ]]."
113,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8f3341a165d18c07793805e28792ac490ef1760a,openssl fallback and version warnings should go to STDERR
114,https://api.github.com/repos/mozilla/cipherscan/pulls/82,82,Various fixes,"I went looking for more things that seemed inefficient, out of place for Bash scripts, or varied from best practices.

This set of commits is the result.

I tested after each commit to make sure that cipherscan worked on a couple of sites. There don't seem to be any test scripts. I managed to find a client-order site to test against, which was very helpful.

top1m-relevant performance improvements are possible in 4bf6f65, 7efcd0d, 4683916, 95b8c13, a2674c6, 4683916, and especially b1ba6db.

I request special review of b1ba6db ""Stop processing certificates"". It is a logic change (algorithm in final output is taken from the first connection's certificate, rather than the last connection's certificate) and I want to be sure I understood the situation correctly here.

`a=""b c d e""; echo ${a%% *};` emits `b`, in case that question comes up. No need to allocate an array to get field 1 when there's a non-assignment way.
",floatingatoll,92684,2015-09-05T12:23:37Z,CONTRIBUTOR,True,102,109,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,179cbe8db1c6cfa9c40b6d597200c14c83f86a68,refuse to permit --allciphers and --json together
115,https://api.github.com/repos/mozilla/cipherscan/pulls/81,81,Argparse fixes,"These commits rewrite some of the argument parsing logic, focusing mostly on the HOST[:PORT] code, to be more efficient and resilient.
",floatingatoll,92684,2015-09-05T09:14:11Z,CONTRIBUTOR,True,18,11,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,28555b03f0f6c5438c83d1cd3f6cbb8361c778e3,"Refuse to proceed if the final argument starts with a hyphen.

This detects and prevents a specific category of user error, where an
incomplete cipherscan command line ending in an OpenSSL -option results
in cipherscan attempting to scan the target '-option:443'."
116,https://api.github.com/repos/mozilla/cipherscan/pulls/81,81,Argparse fixes,"These commits rewrite some of the argument parsing logic, focusing mostly on the HOST[:PORT] code, to be more efficient and resilient.
",floatingatoll,92684,2015-09-05T09:14:11Z,CONTRIBUTOR,True,18,11,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d81ee1c801bd70bdb6c6e515a45a6bb589a0a4a5,"Refuse to proceed if no HOST[:PORT] is provided after the options.

Prior to this patch, if the user fails to provide a host:port after
specifying cipherscan options, the script runs sed on an empty variable
(failing with a syntax error) and then asttempts to cipherscan the
target ':443'.

This adds a simple test to ensure that a target was actually provided."
117,https://api.github.com/repos/mozilla/cipherscan/pulls/81,81,Argparse fixes,"These commits rewrite some of the argument parsing logic, focusing mostly on the HOST[:PORT] code, to be more efficient and resilient.
",floatingatoll,92684,2015-09-05T09:14:11Z,CONTRIBUTOR,True,18,11,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,097bd0c43bbf16f101f0ee4201cc6fb223f81328,"Rewrite HOST[:PORT] extraction routine (less sed, more validation).

The HOST[:PORT] extraction routine was written using several calls to
sed and a bunch of regex post-processing of the bash $@ array.

This replaces that with bash-native array commands, copying $@ into
a $PARAMS array, removing the last element into $TARGET, and then
passing the remainder to openssl s_client.

This adds validation of the TARGET to ensure that it matches what we
expect for a HOST[:PORT]; if a ':' is present, it must be preceded by a
hostname and followed by a port number, otherwise :443 is appended.

The check to ensure that HOST is not an -option is merged into this as
well, since we already test for : at the beginning of the HOST
(indicating that only a port was provided).

Additionally, this now defends against an empty string """" being passed
as the final option, which could occur if a script calling cipherscan
goes awry and starts passing empty values as the target.

top1m may see a slight speed improvement from this commit, as 4 calls to
sed are replaced with native bash functions.

Fixes one ""SC2086: Double quote to prevent globbing and word splitting."":

In cipherscan line 1402:
SCLIENTARGS=$(sed -e s,${TEMPTARGET},,<<<""${@}"")
                       ^-- SC2086: Double quote to prevent globbing and
                       word splitting."
118,https://api.github.com/repos/mozilla/cipherscan/pulls/80,80,Replace CACERTS env logic with --cafile parameter.,"This improves the CACERTS logic to speed performance for top1m, while also replacing the previously-undocumented `CACERTS=filename.crt` override with `--cafile <filename.crt>`, now visible in the help output.

When `--cafile` is provided, all autodetection logic is bypassed. Where previously it would replace the provided `CACERTS` value with `ca-bundle.crt` when the value doesn't exist, it now simply aborts to prevent unexpected ""automatic"" behaviors when an override is clearly intended.
",floatingatoll,92684,2015-09-05T07:51:31Z,CONTRIBUTOR,True,33,14,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e35a6155bc6913793d4e5a6ac168d5ab2c952471,"Add --cafile <filename.crt>, alongside --capath <dirpath/>.

For unknown reasons, while we previously supported --capath we did not
support --cafile. This forces the --cafile autodetection logic to run
every time, unnecessarily, when we have a specific file in mind to use.

This patch relocates the -CAfile autodetection logic to run *only if*
the --cafile parameter is not provided. If it is not provided, the
autodetection logic occurs precisely as before.

This patch declines to address what happens if both --capath and
--cafile are passed. The previous logic already ensured that the CA file
was *always* set, and then only sometimes was the CA path set. The new
logic maintains that behavior precisely, reserving logic flow changes
for a separate commit."
119,https://api.github.com/repos/mozilla/cipherscan/pulls/80,80,Replace CACERTS env logic with --cafile parameter.,"This improves the CACERTS logic to speed performance for top1m, while also replacing the previously-undocumented `CACERTS=filename.crt` override with `--cafile <filename.crt>`, now visible in the help output.

When `--cafile` is provided, all autodetection logic is bypassed. Where previously it would replace the provided `CACERTS` value with `ca-bundle.crt` when the value doesn't exist, it now simply aborts to prevent unexpected ""automatic"" behaviors when an override is clearly intended.
",floatingatoll,92684,2015-09-05T07:51:31Z,CONTRIBUTOR,True,33,14,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5dc692566a9e67cb51c0173b1ac40f1770278a6c,"Refuse to accept both --cafile and --capath.

Prior to this commit, the code accepts both the --cafile and the
--capath options, as that's how it's always behaved. This patch corrects
that, refusing to proceed if the options are provided.

Technically, openssl permits the use of both the -CAfile and -CApath
options. However, cipherscan itself can only make use of one of the two
options, and does not currently support ""one or both"" scenarios.

So this patch ensures that users are not caught unaware when they
specify --capath and --cafile and the script refuses to honor the
latter."
120,https://api.github.com/repos/mozilla/cipherscan/pulls/80,80,Replace CACERTS env logic with --cafile parameter.,"This improves the CACERTS logic to speed performance for top1m, while also replacing the previously-undocumented `CACERTS=filename.crt` override with `--cafile <filename.crt>`, now visible in the help output.

When `--cafile` is provided, all autodetection logic is bypassed. Where previously it would replace the provided `CACERTS` value with `ca-bundle.crt` when the value doesn't exist, it now simply aborts to prevent unexpected ""automatic"" behaviors when an override is clearly intended.
",floatingatoll,92684,2015-09-05T07:51:31Z,CONTRIBUTOR,True,33,14,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,6adda69af5b406ecc1041d0dd9433e5bd0851b36,"Revise CACERTS autodetection logic, ensure that CACERTS/CAPATH is readable/directory, add undocumented CAPATH env override.

This takes advantage of the new --cafile logic to avoid running CACERTS
autodetection when a file is provided on the command line.

It then ensures the readability of that file, whether provided or
autodetected.

This also adds an undocumented CAPATH environment variable alternative
to --capath, to go along with the existing undocumented CACERTS
environment variable alternative to --cafile, to provide legacy support
for preexisting users."
121,https://api.github.com/repos/mozilla/cipherscan/pulls/79,79,"separate darwin and non-darwin OS autodetection, add NOAUTODETECT support for top1m performance","This patch implements two structural changes.

First, OS-level detection routines are broken out into a case statement.

Darwin doesn't need to test for readlink/timeout nor Busybox, so this
noticeably improves performance over multiple runs on Darwin.

Linux suffers no additional penalty, since we already ran if $(uname)
every time anyways, and continues to use the more complex
timeout/gtimeout/busybox logic at the (preexisting, unaffected) cost to
performance over multiple runs.

Second, if NOAUTODETECT is set, then the script assumes (and verifies)
that you're providing TIMEOUTBIN and OPENSSLBIN values. If both of those
values are executable files, then the script will proceed, else it will
abort. In this scenario, readlink is unnecessary and is thus unused.

The combination of these two changes will improve performance over
multiple runs both on Darwin and when NOAUTODETECT is set for top1m.
",floatingatoll,92684,2015-09-04T06:59:52Z,CONTRIBUTOR,True,77,27,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0728751208b9eaddd1734fe44046ee7c48705db3,move bash4 detection as early as possible in the script to permit logic later on
122,https://api.github.com/repos/mozilla/cipherscan/pulls/79,79,"separate darwin and non-darwin OS autodetection, add NOAUTODETECT support for top1m performance","This patch implements two structural changes.

First, OS-level detection routines are broken out into a case statement.

Darwin doesn't need to test for readlink/timeout nor Busybox, so this
noticeably improves performance over multiple runs on Darwin.

Linux suffers no additional penalty, since we already ran if $(uname)
every time anyways, and continues to use the more complex
timeout/gtimeout/busybox logic at the (preexisting, unaffected) cost to
performance over multiple runs.

Second, if NOAUTODETECT is set, then the script assumes (and verifies)
that you're providing TIMEOUTBIN and OPENSSLBIN values. If both of those
values are executable files, then the script will proceed, else it will
abort. In this scenario, readlink is unnecessary and is thus unused.

The combination of these two changes will improve performance over
multiple runs both on Darwin and when NOAUTODETECT is set for top1m.
",floatingatoll,92684,2015-09-04T06:59:52Z,CONTRIBUTOR,True,77,27,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,12ede6488266485ba3e7dc9e3e5c6079ae324119,bash4 version check failure should go to STDERR.
123,https://api.github.com/repos/mozilla/cipherscan/pulls/79,79,"separate darwin and non-darwin OS autodetection, add NOAUTODETECT support for top1m performance","This patch implements two structural changes.

First, OS-level detection routines are broken out into a case statement.

Darwin doesn't need to test for readlink/timeout nor Busybox, so this
noticeably improves performance over multiple runs on Darwin.

Linux suffers no additional penalty, since we already ran if $(uname)
every time anyways, and continues to use the more complex
timeout/gtimeout/busybox logic at the (preexisting, unaffected) cost to
performance over multiple runs.

Second, if NOAUTODETECT is set, then the script assumes (and verifies)
that you're providing TIMEOUTBIN and OPENSSLBIN values. If both of those
values are executable files, then the script will proceed, else it will
abort. In this scenario, readlink is unnecessary and is thus unused.

The combination of these two changes will improve performance over
multiple runs both on Darwin and when NOAUTODETECT is set for top1m.
",floatingatoll,92684,2015-09-04T06:59:52Z,CONTRIBUTOR,True,77,27,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4b87301eb46a349d47e6eda4e21f65e7283cbc60,"separate darwin and non-darwin OS autodetection, add NOAUTODETECT support for top1m performance

This patch implements two structural changes.

First, OS-level detection routines are broken out into a case statement.

Darwin doesn't need to test for readlink/timeout nor Busybox, so this
noticeably improves performance over multiple runs on Darwin.

Linux suffers no additional penalty, since we already ran if $(uname)
every time anyways, and continues to use the more complex
timeout/gtimeout/busybox logic at the (preexisting, unaffected) cost to
performance over multiple runs.

Second, if NOAUTODETECT is set, then the script assumes (and verifies)
that you're providing TIMEOUTBIN and OPENSSLBIN values. If both of those
values are executable files, then the script will proceed, else it will
abort. In this scenario, readlink is unnecessary and is thus unused.

The combination of these two changes will improve performance over
multiple runs both on Darwin and when NOAUTODETECT is set for top1m."
124,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,6efb1a4afbabe2264bcaa0bcc8e0bb75924f457f,"replace if [ ... ] with if [[ ... ]]

Bash implements a backwards-compatible sh syntax for [ .. ], which
handles undef variables poorly. Use [[ .. ]] instead, to take full
advantage of the Bash improvements to the comparison brackets."
125,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9e563782e220056c2a878044860187bff0796a22,"fix syntax error in busybox check - $(( is not the same as $( (, and a subshell is unnecessary here in any case"
126,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,10057f93dccc0a3d2a8f8e308e78e15a5c0a578d,"revise whitespace layout of cipher, curve arrays to improve future diffs"
127,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,81481cd016d7c1ad8f077d3565f3993f806dd37d,"requote, reindent ciphers and curves to the same format"
128,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1c15af1ce32aaad7fb4d7a5cb842f421483f72cc,verify the results of pushd rather than trusting it
129,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bbb349662794a4482380849dd07a20c0585d2f66,trim dead trailing ;
130,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3664b1a1991103337f4eb9b253f9955f5afcfbbc,"fixes for ""SC2145: Argument mixes string and array. Use * or separate argument.""

In cipherscan line 941:
    verbose ""Server supported curves: ${tmp_curves[@]}""
                                      ^-- SC2145: Argument mixes string and array. Use * or separate argument.

In cipherscan line 968:
            verbose ""ephem_data: ${ephem_data[@]}""
                                 ^-- SC2145: Argument mixes string and array. Use * or separate argument."
131,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4405d3fdce3d70bd3f029482ed465edc5219ec17,"remove unused variable ""fallback_available"""
132,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,21871b5bd7293cb3aa81dafb8c876ee78e315725,"fixes for ""SC2046: Quote this to prevent word splitting."" and ""SC2086: Double quote to prevent globbing and word splitting.""

In cipherscan line 13:
REALPATH=$(dirname $0)
                   ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 15:
readlink -f $0 &>/dev/null && REALPATH=$(dirname $(readlink -f $0))
            ^-- SC2086: Double quote to prevent globbing and word splitting.
                                                 ^-- SC2046: Quote this to prevent word splitting.
                                                               ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 46:
if [[ -e $(dirname $0)/openssl.cnf ]]; then
                   ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 47:
    export OPENSSL_CONF=""$(dirname $0)/openssl.cnf""
           ^-- SC2155: Declare and assign separately to avoid masking return values.
                                   ^-- SC2086: Double quote to prevent globbing and word splitting.

In cipherscan line 60:
    CACERTS=""$(dirname $0)/ca-bundle.crt""
                       ^-- SC2086: Double quote to prevent globbing and word splitting."
133,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f002b3573afcd25c0bc19b4b2c8d22fda87af517,"fixes for ""SC2004: $/${} is unnecessary on arithmetic variables.""

In cipherscan line 451:
        for ((i=0; i<$certificate_count; i=i+1 )); do
                     ^-- SC2004: $/${} is unnecessary on arithmetic variables.

In cipherscan line 603:
    cipherbenchms=""$((t/1000/$BENCHMARKITER))""
                             ^-- SC2004: $/${} is unnecessary on arithmetic variables."
134,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5ec3184a375b93c3e05fa1a60c01347709798089,call dirname $0 three fewer times by caching the unmodified value prior to readlink modifications
135,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f0142c323aa93462a66d451e8d89193dec6df60b,remove one unnecessary assignment when on Darwin.
136,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9a0e055628f66dad6fe99916267c3006ed9ad464,"remove crude_grep in favor of a simple =~ substring match.

The crude_grep function served only to perform a simple substring check
against the output of openssl -help. So, instead of running the command
each time, iterating its output line by line, and checking for the
substring within it, this simply caches the -help output at startup and
uses $help =~ substring to produce the same result in a single pass."
137,https://api.github.com/repos/mozilla/cipherscan/pulls/77,77,Various bash cleanups and one bugfix,"The busybox test used the form `$(( ... ) ...)` which triggers mathematical evaluation and breaks syntax highlighting, rather than the intended `$( (...) ... )` form. Rewrote it to use a simple if ! timeout | grep form to remove the error.

Various other bash cleanups (`if [ ]` to `if [[ ]]`), replaced all non-regex uses of `=~ substring` with `== *substring*` instead, restructured the cipher and curves lists to format cleanly and similarly, etc.

Script still runs fine after all this.
",floatingatoll,92684,2015-09-03T05:01:33Z,CONTRIBUTOR,True,209,207,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,22adaf188a51d99fcaaf77b0e07424ef99e8eb02,"verify that the openssl binary is emitting a valid s_client -help.

This catches instances where the wrong openssl binary is selected (for
instance, if uname -s is neither Darwin nor Linux) and serves as a
simple up-front test to make sure that openssl is working before we
proceed further into the script."
138,https://api.github.com/repos/mozilla/cipherscan/pulls/76,76,enable curves by default,"Curves scanning should be on by default, since most users of cipherscan ought to use an openssl that supports it (including all OS X users via the included binary). Enabling it by default makes the information available when present, at the cost of a warning for those using an older openssl (which is a warning they should receive in any case, in my opinion.)
",floatingatoll,92684,2015-09-03T04:14:06Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5fa972c534e5898bd0dcd152b061b46c697bae5c,enable curves by default
139,https://api.github.com/repos/mozilla/cipherscan/pulls/75,75,add handling of no ciphers found,"If no ciphers are found, everything else collapses at this point, so simply stop instead of emitting blank/damaged output.
",floatingatoll,92684,2015-08-31T22:08:07Z,CONTRIBUTOR,False,4,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a7999aa8669f4a8f6f5eb48774093b1f7c5ff8dc,add handling of no ciphers found
140,https://api.github.com/repos/mozilla/cipherscan/pulls/74,74,refuse to process invalid arguments to cipherscan itself,"Fixes issue 73.
",floatingatoll,92684,2015-08-31T22:06:59Z,CONTRIBUTOR,False,5,5,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fc4927be5b8db5a83e5f9f357449e21fd8ae2d44,refuse to process invalid arguments to cipherscan itself
141,https://api.github.com/repos/mozilla/cipherscan/pulls/70,70,fix analyze.py Python3 compatibility,"because subprocess.check_output returns `bytes` in Python 3
we need to interpret them to characters, which are needed by json
input

fixes #69
fixes #71 
",tomato42,618246,2015-08-23T10:27:13Z,MEMBER,True,10,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a3e04d3d011697ff4a5f7da9a4538ecc4402612b,"fix analyze.py Python3 compat

because subprocess returns `bytes` in Python 3
we need to interpret them to characters, which are needed by json
input and string parsing

fixes #69, #71"
142,https://api.github.com/repos/mozilla/cipherscan/pulls/68,68,Fix: incorrect list + string concatenation (issue #64),,kenoh,1448182,2015-08-14T14:58:24Z,NONE,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c9529b5977ae2237478e1973855be36cff672126,Fix: incorrect list + string concatenation (issue #64)
143,https://api.github.com/repos/mozilla/cipherscan/pulls/67,67,Updated cipherscan to handle environmental error conditions better:,"Running on a RHEL6 box two problems became apparent; this patch fixes them:
1. If bundled openssl is a bad binary (e.g. wrong glibc), use system openssl
2. Skip bundled openssl.cnf if it causes failures (e.g. openssl w/o GOST)

So, for 1:

If the bundled 'openssl' binary has the executable permission bit set but is not a valid executable
file for the system it's on, then currently it will fail.  In my example, the bundled openssl was compiled
against GLIBC 2.14, but RHEL 6 ships with GLIBC 2.12:

```
$ ./openssl
./openssl: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by ./openssl)
$
```

Other issues, such as running on a 32-bit platform, should cause equivalent errors.  The patch 
runs the bundled openssl with stdin ""quit"" and reverts to the system openssl if it doesn't exit
cleanly.

Before this patch, running cipherscan on RHEL6 resulted in an empty cipher report and 
`config not supported, connection failed` for all Fallbacks.

For 2:

If cipherscan falls back to the system openssl, and the system openssl does not support GOST,
then the use of the bundled openssl.cnf file will cause cipherscan to fail because s_client calls
error out:

```
$ OPENSSL_CONF=./openssl.cnf openssl s_client -help
Error configuring OpenSSL
140737353987912:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:187:filename(/usr/lib64/openssl/engines/libgost.so): /usr/lib64/openssl/engines/libgost.so: cannot open shared object file: No such file or directory
140737353987912:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
140737353987912:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:eng_dyn.c:450:
140737353987912:error:2606A074:engine routines:ENGINE_by_id:no such engine:eng_list.c:417:id=gost
140737353987912:error:260BC066:engine routines:INT_ENGINE_CONFIGURE:engine configuration error:eng_cnf.c:204:section=gost_section, name=default_algorithms, value=ALL
140737353987912:error:0E07606D:configuration file routines:MODULE_RUN:module initialization error:conf_mod.c:235:module=engines, value=engine_section, retcode=-1
$
```

To address this issue, the patch runs openssl using the bundled openssl.cnf and if any "":error:"" is
found in the output, it will not use the bundled openssl.cnf.
",gowenfawr,6210340,2015-07-30T16:25:59Z,NONE,False,26,5,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b3eb0ac67b3abd1dd5d55bc6d4d1e85b85789754,"Updated cipherscan to handle environmental error conditions better:
 1. If bundled openssl is a bad binary (e.g. wrong glibc), use system openssl
 2. Skip bundled openssl.cnf if it causes failures (e.g. openssl w/o GOST)"
144,https://api.github.com/repos/mozilla/cipherscan/pulls/65,65,Tests for TLS1.2 PFS key exchanges,"Add tests for supported signature algorithms for TLS1.2 key exchanges, check if ordering used is forced by server, or if the server prefers algorithms preferred by client.
",tomato42,618246,2015-07-16T15:27:02Z,MEMBER,True,493,4,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,434b383f016df5457a78c34428c2925dbe72f955,"add test for TLSv1.2 PFS key exchange

since the signature and hash algorithm in TLSv1.2 is selectable by server
and negotiated using TLS extensions, we can check what sig algs is
the server willing to perform and whatever it does honour client
selection

it also tests what happens if the client doesn't offer any sigalgs that
are necessary to use the ciphers selected by server"
145,https://api.github.com/repos/mozilla/cipherscan/pulls/65,65,Tests for TLS1.2 PFS key exchanges,"Add tests for supported signature algorithms for TLS1.2 key exchanges, check if ordering used is forced by server, or if the server prefers algorithms preferred by client.
",tomato42,618246,2015-07-16T15:27:02Z,MEMBER,True,493,4,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8f5b1eedc9cb007e8ce9ffad83b4aff67f6543e3,tests for ordering of sig algs in TLS 1.2 PFS kex
146,https://api.github.com/repos/mozilla/cipherscan/pulls/62,62,Python 3 compatibility,"Make scripts Python 3 and Python 2.6+ compatible at the same time

Fixes #51 
",tomato42,618246,2015-05-30T13:48:05Z,MEMBER,True,26,19,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a53a91695e7983f625816de77789621567d110e9,make scripts python 3 compatible
147,https://api.github.com/repos/mozilla/cipherscan/pulls/62,62,Python 3 compatibility,"Make scripts Python 3 and Python 2.6+ compatible at the same time

Fixes #51 
",tomato42,618246,2015-05-30T13:48:05Z,MEMBER,True,26,19,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,86bc8e8574a21686bf7fed5c8131da013fc81a5d,fix is_fubar key size check
148,https://api.github.com/repos/mozilla/cipherscan/pulls/61,61,GOST support,"To enable support for GOST (Russian) ciphers, we need to use a custom `openssl.cnf` file.

To interpret the results we also need to extend the result parser and make sure that the scanner captures the full signature algorithm name.
",tomato42,618246,2015-05-30T13:01:07Z,MEMBER,True,39,1,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,596692a18ed058ef57fa359678e11966c1c21e48,add support for GOST cipher scanning
149,https://api.github.com/repos/mozilla/cipherscan/pulls/61,61,GOST support,"To enable support for GOST (Russian) ciphers, we need to use a custom `openssl.cnf` file.

To interpret the results we also need to extend the result parser and make sure that the scanner captures the full signature algorithm name.
",tomato42,618246,2015-05-30T13:01:07Z,MEMBER,True,39,1,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d151705218735d6bda38b2b92053f5d21645b957,parse_results.py - GOST support
150,https://api.github.com/repos/mozilla/cipherscan/pulls/61,61,GOST support,"To enable support for GOST (Russian) ciphers, we need to use a custom `openssl.cnf` file.

To interpret the results we also need to extend the result parser and make sure that the scanner captures the full signature algorithm name.
",tomato42,618246,2015-05-30T13:01:07Z,MEMBER,True,39,1,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8ea6b57f9de88e12f22860c6d85a15e72b994625,"cipherscan - capture whole Signature Algorithm line

the GOST certificates have a signature algorithm name with spaces"
151,https://api.github.com/repos/mozilla/cipherscan/pulls/60,60,TLS intolerancies,"As some servers are TLS intolerant, it would be nice to be able to detect at least intolerancies for TLS 1.2 Client Hello.
",tomato42,618246,2015-05-29T22:14:18Z,MEMBER,True,426,1,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a71bfe5ebdb637bc8bfea73ce5a16dacd5e6f3c9,"detect some TLS intolerancies

buggy servers may choke on large ClientHello's, TLSv1.2 ClientHello's,
etc. try to detect such failures and report them

among tried connections are TLS1.2, TLS1.1, TLS1.0 and SSLv3 with
ability to downgrade to lower protocol versions as well as a size
limited client hello, both TLS1.2 and TLS1.0 version"
152,https://api.github.com/repos/mozilla/cipherscan/pulls/60,60,TLS intolerancies,"As some servers are TLS intolerant, it would be nice to be able to detect at least intolerancies for TLS 1.2 Client Hello.
",tomato42,618246,2015-05-29T22:14:18Z,MEMBER,True,426,1,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5c98fe2107627ae6db6796614fadc60f3515871a,do a scan with -no_tlsext openssl if possible
153,https://api.github.com/repos/mozilla/cipherscan/pulls/60,60,TLS intolerancies,"As some servers are TLS intolerant, it would be nice to be able to detect at least intolerancies for TLS 1.2 Client Hello.
",tomato42,618246,2015-05-29T22:14:18Z,MEMBER,True,426,1,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5f5487307dce4be5fc65c6d5a03efdb61015f982,Interpret some intolerance test results
154,https://api.github.com/repos/mozilla/cipherscan/pulls/60,60,TLS intolerancies,"As some servers are TLS intolerant, it would be nice to be able to detect at least intolerancies for TLS 1.2 Client Hello.
",tomato42,618246,2015-05-29T22:14:18Z,MEMBER,True,426,1,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,abe8d329a99b3d27a9b7807fcd1a3089a7e9c8f5,Big handshake intolerance report
155,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,341f657e832780da3647df451669f865b26046f4,"better detection for EXP and low grade ciphers in stats

EXP is self explanatory - export grade
DES-CBC3-MD5 is available only in SSLv2 - not secure
RC4-64-MD5 is also a weakened version (though not marked as export grade)"
156,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1b360153a0a7b02e841699b4920c8c097a06d750,sum servers that support SSL3 or TLS1 as the highest protocol
157,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,82f643244e72998e4d1d6d6582c69eaff5c69f0e,don't count export grade ciphers towards PFS
158,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b9b3a221cef18dc75004b2781d581a82fbfef059,add Firefox 35 cipher settings
159,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d773b73e451321b35a8d8577bb711da587f3fed6,don't divide by zero on empty results folder
160,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b673fb976ab58efb92e59c5dd8ee866cad19e0eb,separate AES-CBC from AES-GCM
161,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,37f1d15af12ad1037cb6831e73e4f467e20b5d29,count SSLv2 IDEA as insecure
162,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c55d8166c5a70c54900a53f1ed36879e608d113e,don't limit client specific RC4 Only to servers with multiple ciphers
163,https://api.github.com/repos/mozilla/cipherscan/pulls/59,59,Fixes for results parsing,"There are few issues in the way the statistics are calculated for collected results.
",tomato42,618246,2015-05-29T22:04:48Z,MEMBER,True,46,15,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d8ebaf2d9f7cde86274d1b4982af7d8bf130327b,report summary for clients for RC4 Preferred too
164,https://api.github.com/repos/mozilla/cipherscan/pulls/58,58,Fallback scan,"In case the regular ciphersuite settings resulted in no results what so ever, retry with a shorter list of ciphers
",tomato42,618246,2015-05-29T22:03:21Z,MEMBER,True,54,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8bde9c4d03f7559631a16609a38a2c69689eb90a,"do fallback scan in case of problems

It's unlikely that there are SSLv2 only servers on the 'net, all
that were detected as such and I've checked actually are intolerant
to low placement of RC4 in cipher order or intolerant to large client
hello in general. In case we detect issues with the server, switch to
reduced cipher set and run the test again that should give better results
for about 3% of hosts"
165,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c52e008347d84526444718732440887c716b91f9,"add support for testing supported curves

since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all."
166,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,224227cc5e36c3d303f1c5898220fbdc8d839cbe,"force at least TLSv1.0 in curves tolerance test

because to advertise curves to server we need extensions and
extensions are only available in TLSv1.0 or later, we need to force
OpenSSL not to send SSLv2 compatible hello if it thinks it's ok to
do (when there are SSLv2 ciphers present in cipherstring it will try to)"
167,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,cc014f085d918b617aaa13238906f1ac3b49f980,"test curve for each ECDH cipher, change PFS output to use curve name"
168,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c90e5c59d7bc9dc9ad5e019be40649676c6ed455,Improve output of curves
169,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,04314bffdc7dd8e5ada701435107b49e9e660b4b,Updated openssl linux amd64 binary
170,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4d7e1cb05a07649d6472aee1e84146ba74723449,Re-add curve fallback detection
171,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b2a399617f3ecefc239a467861895c2464ef2c41,Use new JSON format in parse_results
172,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a966574edc1feef8733422d72d8c9013def0ade5,Fix curve fallback detection
173,https://api.github.com/repos/mozilla/cipherscan/pulls/54,54,Jvehent rework tomato42 curves tolerance 5,"Implements #46 with a number of changes.
",jvehent,415617,2015-04-02T08:41:34Z,CONTRIBUTOR,True,407,21,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4a6ff56b8155877d17127e1f24f7fe43729a6bea,Add back support for old curve json format in parse results
174,https://api.github.com/repos/mozilla/cipherscan/pulls/53,53,How to compile OpenSSL with all testing features,"add information to README how to compile openssl with all features useful/necessary for testing
",tomato42,618246,2015-03-19T16:26:46Z,MEMBER,True,13,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2f0f906dbfd7cd85761286d4938b472b0d6a4f53,how to compile the openssl with all features
175,https://api.github.com/repos/mozilla/cipherscan/pulls/50,50,Fix for busybox timeout binary,"This PR allows cipherscan to run unmodified using busybox binaries. The only change needed is to slightly modify the arguments of the timeout binary if we're on busybox
",cultureulterior,378799,2015-03-13T12:06:43Z,CONTRIBUTOR,True,7,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,6db82374b4ff62a25df7d7b0246d4c81b2aa37bf,Fix for busybox timeout binary
176,https://api.github.com/repos/mozilla/cipherscan/pulls/48,48,Spanish support for bash version check,"Modified the grep to also match for the bash's version output in Spanish.
",monje,7488000,2015-01-19T12:46:03Z,NONE,False,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3abdf1130e09b139ad8183dd00ec7fd96129db22,"Spanish support for bash version check

Modified the grep to also match for the bash's version output in Spanish."
177,https://api.github.com/repos/mozilla/cipherscan/pulls/47,47,fix silent TypeError on sigalg md5WithRSAEncryption,"conn['sigalg'] is an array, logging.debug(conn['sigalg']) caused silent failure

Test case:
{""target"":""redacted:443"",""utctimestamp"":""2015-01-10T02:07:53.0Z"",""serverside"":""False"",""ciphersuite"": [{""cipher"":""DHE-RSA-AES256-SHA"",""protocols"":[""SSLv3"",""TLSv1""],""pubkey"":[""1024""],""sigalg"":[""md5WithRSAEncryption""],""trusted"":""False"",""ticket_hint"":""None"",""ocsp_stapling"":""False"",""pfs"":""DH,1024bits""},{""cipher"":""AES256-SHA"",""protocols"":[""SSLv3"",""TLSv1""],""pubkey"":[""1024""],""sigalg"":[""md5WithRSAEncryption""],""trusted"":""False"",""ticket_hint"":""None"",""ocsp_stapling"":""False"",""pfs"":""None""},{""cipher"":""EDH-RSA-DES-CBC3-SHA"",""protocols"":[""SSLv3"",""TLSv1""],""pubkey"":[""1024""],""sigalg"":[""md5WithRSAEncryption""],""trusted"":""False"",""ticket_hint"":""None"",""ocsp_stapling"":""False"",""pfs"":""DH,1024bits""},{""cipher"":""DES-CBC3-SHA"",""protocols"":[""SSLv3"",""TLSv1""],""pubkey"":[""1024""],""sigalg"":[""md5WithRSAEncryption""],""trusted"":""False"",""ticket_hint"":""None"",""ocsp_stapling"":""False"",""pfs"":""None""}]}
",ghost,10137,2015-01-10T03:12:55Z,NONE,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d1a8604a2a32e3d4c88d7318eac486c8be04b506,"fix silent TypeError on sigalg md5WithRSAEncryption

conn['sigalg'] is an array, logging.debug(conn['sigalg']) caused silent failure"
178,https://api.github.com/repos/mozilla/cipherscan/pulls/46,46,Add support for testing supported curves - v2,"since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all.

v2 changes:
- rebase over current master

obsoletes pull #34 
",tomato42,618246,2015-01-05T13:40:29Z,MEMBER,False,324,3,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b5ce264ea393c337d3dc255f354b7bfc0a62031f,"add support for testing supported curves

since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all."
179,https://api.github.com/repos/mozilla/cipherscan/pulls/46,46,Add support for testing supported curves - v2,"since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all.

v2 changes:
- rebase over current master

obsoletes pull #34 
",tomato42,618246,2015-01-05T13:40:29Z,MEMBER,False,324,3,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,65ad1a7385863a4522b3f9c50b6557f6eba0bf17,"force at least TLSv1.0 in curves tolerance test

because to advertise curves to server we need extensions and
extensions are only available in TLSv1.0 or later, we need to force
OpenSSL not to send SSLv2 compatible hello if it thinks it's ok to
do (when there are SSLv2 ciphers present in cipherstring it will try to)"
180,https://api.github.com/repos/mozilla/cipherscan/pulls/45,45,move shebang to python2,"otherwise the script won't work on newer systems with python3 as default
",bastelfreak,341866,2015-01-02T22:51:08Z,NONE,False,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c36a4e290512a4628970ea91e5bfd086f67fc931,move shebang to python2
181,https://api.github.com/repos/mozilla/cipherscan/pulls/44,44,fix: ignore case in bash version string,"Currently on some systems `bash --version` reports `GNU bash, Version 4[…]` which will fail the test.
",genodeftest,934401,2015-01-02T21:47:33Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,54ec2aca9927f4db9425a5f8f77e11e2b40f646a,"fix: ignore case in bash version string

Currently on some systems `bash --version` reports `GNU bash, Version 4[…]` which will fail the test."
182,https://api.github.com/repos/mozilla/cipherscan/pulls/44,44,fix: ignore case in bash version string,"Currently on some systems `bash --version` reports `GNU bash, Version 4[…]` which will fail the test.
",genodeftest,934401,2015-01-02T21:47:33Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9ecc3f7164ad77d62c469b8c509ad33ff263d1fa,New bash version info test using $BASH_VERSINFO
183,https://api.github.com/repos/mozilla/cipherscan/pulls/43,43,don't expect openssl to be in cwd,"Also use ""mypath"" when calling OpenSSL. Thus allowing the nagios test to run with provided binary.
",ghost,10137,2014-12-26T08:59:19Z,NONE,True,2,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b457951f5f7184532b3817a2f3625abc160f430e,don't expect openssl to be in cwd
184,https://api.github.com/repos/mozilla/cipherscan/pulls/42,42,--nagios: run as a nagios plugin,"With --nagios, analyze.py returns 2 (critical) for bad tls, 1 (warning) if it doesn't match the desired level, 0 (ok) if it matches.

(This is my first shot at python, it may not be the most elegant solution.)
",ghost,10137,2014-12-23T15:29:51Z,NONE,True,27,7,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,983f85d2d4f1edb9a0bb2146fe4ed087b43c474c,--nagios: run as a nagios plugin
185,https://api.github.com/repos/mozilla/cipherscan/pulls/42,42,--nagios: run as a nagios plugin,"With --nagios, analyze.py returns 2 (critical) for bad tls, 1 (warning) if it doesn't match the desired level, 0 (ok) if it matches.

(This is my first shot at python, it may not be the most elegant solution.)
",ghost,10137,2014-12-23T15:29:51Z,NONE,True,27,7,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0e7996181ab0c46d05ec2bb564ee60815338d978,Don't expect scripts to be in working directory
186,https://api.github.com/repos/mozilla/cipherscan/pulls/41,41,Added usage print and exit if no options are given,"I noticed that if no options are given to cipherscan, then it will attempt to run a scan on <blank>:443 . I figured that if no flags are given, the program should execute the help screen (-h), and exit.
",MikeDawg,1027610,2014-12-17T20:12:11Z,CONTRIBUTOR,True,6,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c019ecd4931d7f889c94883491bbbf533ea70a39,Added usage print and exit if no options are given
187,https://api.github.com/repos/mozilla/cipherscan/pulls/40,40,Changed cipher ordering for 'sensitive' servers,"Prevents certain servers on choking

I understand if this is somewhat controversial - I have seen servers that choke on 'ALL:+aRSA'  but work perfectly on ' ALL:aRSA', but from what I understood from the comments this ordering has a reason as well...
",PeterMosmans,1465302,2014-11-25T08:17:29Z,CONTRIBUTOR,False,4,3,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,17755378cd33dad2d287601f189623c0d195e595,"Changed cipher ordering for 'sensitive' servers

Prevents certain servers on choking"
188,https://api.github.com/repos/mozilla/cipherscan/pulls/39,39,Addition: show which TLS protocols can't be used for testing,"Check which protocols (actually options) are supported by ${OPENSSLBIN}
Always show a message which protocol isn't supported (this could be verbose, but it's crucial to know what will not be tested)
",PeterMosmans,1465302,2014-11-22T08:47:12Z,CONTRIBUTOR,False,18,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,561df82a4a7db67e0fd0b762d64ed5a5f26219e7,"show which TLS protocols can't be used for testing

The warning message will always be shown (echo'ed instead of verbose)"
189,https://api.github.com/repos/mozilla/cipherscan/pulls/38,38,Bugfix: correct flow when number of ciphers are loaded,"First make sure that ${OPENSSLBIN} is correctly set, then show how many ciphers are loaded from the correct version of ${OPENSSLBIN}
",PeterMosmans,1465302,2014-11-22T08:42:45Z,CONTRIBUTOR,True,7,7,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,81c1809463d21414ccb07821f9c497c39af85d71,"corrected flow when number of ciphers was shown

First make sure that ${OPENSSLBIN} is correctly set"
190,https://api.github.com/repos/mozilla/cipherscan/pulls/37,37,Show message when no connection could be made,"No need to show results in that case
The progress dot only shows for each succesful connection
",PeterMosmans,1465302,2014-11-14T00:27:40Z,CONTRIBUTOR,False,10,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d7bddb7cc9dc233067e8cf474104415daa114f5f,"Show message when no connection could be made

No need to show results in that case
The progress dot only shows for each succesful connection"
191,https://api.github.com/repos/mozilla/cipherscan/pulls/36,36,Make sure that custom openssl gets selected,"Symlinks are now resolved
This was an issue when a symlink was created for the cipherscan script
Please note that symlinks are only resolved when readlink -f is available
",PeterMosmans,1465302,2014-11-13T23:54:03Z,CONTRIBUTOR,True,4,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,558bf7c9e210c2d33b2383170bfbf6b6446a2e28,"Make sure that custom openssl gets selected

Symlinks are now resolved (when readlink -f is available)"
192,https://api.github.com/repos/mozilla/cipherscan/pulls/35,35,Updated 64-bit OpenSSL binary (1.0.2 beta 4),"Compiled for 64-bit-linux from the following source:
https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha

Commands used:
./Configure linux-x86_64 no-shared zlib enable-gost enable-ec_nistp_64_gcc_128 enable-idea \
enable-md2 enable-rc5 enable-rfc3779 enable-ssl2 experimental-jpake
make depend
make
make report
",PeterMosmans,1465302,2014-11-11T06:48:25Z,CONTRIBUTOR,True,0,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c71828dc098b63ca365009d9384befd8090bd632,"Updated 64-bit OpenSSL binary (1.0.2 beta 4)

Compiled for 64-bit-linux from the following source:
https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha

Commands used:
./Configure linux-x86_64 no-shared zlib enable-gost enable-ec_nistp_64_gcc_128 enable-idea \
enable-md2 enable-rc5 enable-rfc3779 enable-ssl2 experimental-jpake
make depend
make
make report"
193,https://api.github.com/repos/mozilla/cipherscan/pulls/34,34,Add support for testing supported curves,"since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all.
",tomato42,618246,2014-11-06T00:44:57Z,MEMBER,False,324,3,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,cc3c1842acca7d7d6fb1b4650a1aee7a4a72e261,"add support for testing supported curves

since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all."
194,https://api.github.com/repos/mozilla/cipherscan/pulls/34,34,Add support for testing supported curves,"since early versions of 1.0.2 openssl supports -curves command line
option, it allows us to set the curves advertised as supported

use the same approach to testing: advertise all, check what server
accepts, remove the accepted from list, repeat. When server aborts
connection or selects non ECC cipher, we know that we've tested all.
",tomato42,618246,2014-11-06T00:44:57Z,MEMBER,False,324,3,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,311034b69bd6b7ae027d41317e33881f8826efb4,"force at least TLSv1.0 in curves tolerance test

because to advertise curves to server we need extensions and
extensions are only available in TLSv1.0 or later, we need to force
OpenSSL not to send SSLv2 compatible hello if it thinks it's ok to
do (when there are SSLv2 ciphers present in cipherstring it will try to)"
195,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3b14cd914f3b2acf93a686ab089ea60fe8a0c82c,"no need to grep the input when we're using awk (v2)

awk has an inbuilt version of grep, also truncate processing as soon
as we find what we're looking for

This version uses slightly different syntax that is compatible with old
awk"
196,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,826f7b55413d8da6f6fdfb5bec907aded51669a2,add caching of intermediate CA certificates
197,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3e37517c966396103c25fe584bff589364e92cef,add ability to also save leaf certificates and untrusted ones
198,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d9b718be129b4c37f2df2151d73bc78e542e66b1,"clean up the extracted certificate

the certificate extracted in the above way will contain some junk
from openssl s_client output we don't want like verification status
we can remove it ro reduce disk usage for saved certificates"
199,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1eae0cc71ba459525ccf9564c5d092daf1e2b9a9,"use CApath for certificates and store certificates (v2)

CApath is about 20% faster than CAfile so use it, also
save the received certificates from the servers for later analysis
(proper hostname checking, looking for certificates sharing private key,
etc.)

Use the mechanism from cipherscan to find location of ca cert bundle"
200,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0f576c1fbcd7d16f881bc251c329c9ec7899c8c7,"don't calculate sha sums for the certificates over and over

we can use cksum to calculate simple checksum much faster than
with using openssl, so we can compute sums only once"
201,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4c22d50f0c523d35d013cd2a2633139f93e65648,"few less forks in the script

again, we can use arrays and a bit advanced awk syntax to reduce
the number of forks necessary to run the script"
202,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9f06829486e9fd5c58d01591c6a818c1038993f2,"make handling of self signed certs more robust

openssl sometimes will print the filename, then the error, and finish
with OK, matching the colon and space prevents from considering such
certs to be valid"
203,https://api.github.com/repos/mozilla/cipherscan/pulls/33,33,"Cipherscan fixes, speedups and saving of certificates (v3)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 and pull #31 (drops ""don't retry protocols we know don't work "")
",tomato42,618246,2014-11-05T17:18:49Z,MEMBER,True,295,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c4a8495a54c1fe03bde6e3484ff7f401068e9dda,"limit number of forks needed to speed up execution

bash has a built in regular expression processor, we can match
lines using =~

moreover, stuff that will match while being inside parentheses is
later available in the BASH_REMATCH array

the IFS (Internal Field Separator) by default includes space, tab and
new line, as such we can use it to split longer lines to separate
words, just as awk '{print $1}' can, just need to put the value to
an array for that

we also don't have to use $(echo $var) when assigning variables, $var
is enough

bash has also built in substitution engine, so we can do ${var/,/ & }
to switch all commas to ampersands when using the variable"
204,https://api.github.com/repos/mozilla/cipherscan/pulls/32,32,dos2unix ./cipherscan ?,"I had to convert line endings... just saying ... or make your preferred edit and refuse this pull.. whatevs
",ccjon,37644,2014-11-02T02:57:57Z,NONE,False,2,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1dfece2bf865f4250d61f9a7ecdbff6233df2870,"dos2unix ./cipherscan ?

I had to convert line endings... just saying ( I did not actually edit the README.md with that: just sending this proposal)"
205,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,81a8ac0253eb23732f388f498ae1cdfcb0774223,"no need to grep the input when we're using awk (v2)

awk has an inbuilt version of grep, also truncate processing as soon
as we find what we're looking for

This version uses slightly different syntax that is compatible with old
awk"
206,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,605a1b85fedacfac3bde7242f8d8b64e3b581a2b,add caching of intermediate CA certificates
207,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7087bdb5a03299520512d2e3180b9ece906ca25d,add ability to also save leaf certificates and untrusted ones
208,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,62808a33c8ae4779bbca7f51ad83d8cbab074f45,"clean up the extracted certificate

the certificate extracted in the above way will contain some junk
from openssl s_client output we don't want like verification status
we can remove it ro reduce disk usage for saved certificates"
209,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,68da6f00b6b502550aacaa6815d5fe9427460a33,"use CApath for certificates and store certificates (v2)

CApath is about 20% faster than CAfile so use it, also
save the received certificates from the servers for later analysis
(proper hostname checking, looking for certificates sharing private key,
etc.)

Use the mechanism from cipherscan to find location of ca cert bundle"
210,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,413a43ecbfb5caf21777603d6e5e4c79aa36e32f,"don't calculate sha sums for the certificates over and over

we can use cksum to calculate simple checksum much faster than
with using openssl, so we can compute sums only once"
211,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,911b3e2515868b616db5a9790d0767a86e9ca940,"few less forks in the script

again, we can use arrays and a bit advanced awk syntax to reduce
the number of forks necessary to run the script"
212,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,94a1c6fc0d8af62aef1f7604beda5b06851eaefa,"make handling of self signed certs more robust

openssl sometimes will print the filename, then the error, and finish
with OK, matching the colon and space prevents from considering such
certs to be valid"
213,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,26204115bf5382ac6304fea3f1785caf21abf317,"don't retry protocols we know don't work

When connection is unsuccessful with a given protocol, don't try it again
since we probably exhausted the ciphers supported by the protocol

makes scanning about 10% faster"
214,https://api.github.com/repos/mozilla/cipherscan/pulls/31,31,"Cipherscan fixes, speedups and saving of certificates (v2)","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)

obsoletes pull #27 
",tomato42,618246,2014-10-30T00:30:53Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f1faa28a8c164888d9477f7e69225c01c9ede1a7,"limit number of forks needed to speed up execution

bash has a built in regular expression processor, we can match
lines using =~

moreover, stuff that will match while being inside parentheses is
later available in the BASH_REMATCH array

the IFS (Internal Field Separator) by default includes space, tab and
new line, as such we can use it to split longer lines to separate
words, just as awk '{print $1}' can, just need to put the value to
an array for that

we also don't have to use $(echo $var) when assigning variables, $var
is enough

bash has also built in substitution engine, so we can do ${var/,/ & }
to switch all commas to ampersands when using the variable"
215,https://api.github.com/repos/mozilla/cipherscan/pulls/30,30,Fix delay option,"Because test_cipher_on_target() runs one connection for every protocol, the delays are between testing separate ciphers, not connections.

Fix it to not run sleep at all when the delay is set to 0 (saves forks) and do rate limiting before every connection, not a set of connections.

Increase the timeout for connections (some servers are slow others put us in tarpit when they see many connections in short succession).

Related change to the scanning script.
",tomato42,618246,2014-10-28T18:21:39Z,MEMBER,True,13,7,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,71ba3c88b010b916ec92854e25a22a3ed94853ff,"increase timeout

when some servers notice a scan (because of frequent connections) they
delay further connections, increase the timeout to properly scan them"
216,https://api.github.com/repos/mozilla/cipherscan/pulls/30,30,Fix delay option,"Because test_cipher_on_target() runs one connection for every protocol, the delays are between testing separate ciphers, not connections.

Fix it to not run sleep at all when the delay is set to 0 (saves forks) and do rate limiting before every connection, not a set of connections.

Increase the timeout for connections (some servers are slow others put us in tarpit when they see many connections in short succession).

Related change to the scanning script.
",tomato42,618246,2014-10-28T18:21:39Z,MEMBER,True,13,7,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,11ce6187dec1803c4bc8d9bba6f22c410fbaa610,"small fixes for delay

firstly, test_cipher_on_target() will try at least 4 connections before
incurring the sleep, for aggressive rate limiter on server side it may be
too much, so sleep before every connection

secondly, because running external commands like sleep incurs a fork
penalty, we first check if it is necessary"
217,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,142726c4fdf40e7d8e397eb920ee3c936f2c1024,"count ECDH-RSA ciphers as ECDSA

the ECDH parameters come from server certificate - the point
on elliptic curve. The RSA comes from the signature on the certificate
which comes from CA"
218,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1b4dcc4393b7306f3fb0ff98ed1d5ffb7466a971,"report ciphers causing incompatibility for Firefox

It turns out that the situation is even more bleak for Firefox
with regards to RC4, add it to report"
219,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,42fa7d9ecbb2f10b02bc9968b8990a7f703eaefb,report what ciphers Firefox would select while connecting to server
220,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c82bc44558b963ac6aadf10ee313710d4e91adab,"report cipher ordering in scanning stats, use it to simulate handshakes

since now we know if server honours client order or not, we can use it
to properly simulate handshakes for a given client, also report
the general stats of this server configuration variable"
221,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,76d791fcbe8edd80b894d67ad04d7f3c72b6bc6a,"make cipher selection simulation generic

it's relatively easy to make the cipher selection generic,
so that adding different clients is as easy as converting their
client hello cipher ordering to openssl cipher names"
222,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,af2e25ec897584014678abf9c9efe6915178d81c,"fix EDH checking

old ciphers have names that use EDH instead of DHE so we need check
for both names"
223,https://api.github.com/repos/mozilla/cipherscan/pulls/29,29,Client handshake simulation,"simulate client handshakes, report which ciphers are causing incompatibility with servers, which ciphers cause RC4 preference and which cause the server to be effectively RC4 only

for now just Firefox supported, but adding different clients is easy
",tomato42,618246,2014-10-12T19:13:04Z,MEMBER,True,169,2,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,29c739faa98fe7688c3f97a663e0cb57ec5e7e37,count EDH-DES as PFS too in general stats
224,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3699acfc2d7cacd04208cfc6e77fef159b180982,"helper application for finding cert chains

because neither M2crypto nor OpenSSL packages provide extensive
enough API to do certificate chain building, verification
and outputting of details, we have to pre-parse the data
with a C app that can access the full OpenSSL API.

I've also tried monkey patching the packages, but unfortunately
the result wasn't working reliably

The actual statistic collection (both about the chains and
specific certificates) will be done in a python script"
225,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3cfd7b76cc82ce28d9a02265c8e9de6fcb9d821e,collect statistics about found certificates
226,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac18195b215c4cc1b877f089bcbfe357761411b1,process-certificate-statistics.sh - the script HOWTO to turn results to CA stats
227,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,edab545f3e7aaa8b49b3a2bce910c1adca1e24b3,add Makefile for the C utility
228,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,aac3e9a9db1fb56b6263d4fe054d5643e4e49750,parse_CAs.py - add few comments
229,https://api.github.com/repos/mozilla/cipherscan/pulls/28,28,Certificate stats,"one application and two scripts for collecting data about intermediate CA certificates, root CAs and certificate chains used by servers
",tomato42,618246,2014-10-12T19:10:32Z,MEMBER,True,933,0,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5a6eaaac4193a7e6738fcdd6635ddcdc8464c04c,"parse_CAs.c - implement error checking, remove magic numbers, compile fix"
230,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,512819a33f386b00a1f35d743ddc701b993883e7,"no need to grep the input when we're using awk (v2)

awk has an inbuilt version of grep, also truncate processing as soon
as we find what we're looking for

This version uses slightly different syntax that is compatible with old
awk"
231,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,38f428b476f62ae0a2815dcc1a2c20137974f090,add caching of intermediate CA certificates
232,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,eaa64e48a3f1b11065e39cce5d758d406a7bf895,add ability to also save leaf certificates and untrusted ones
233,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ea9f0056eb30c7ca9c67563b782102d84c8078da,"clean up the extracted certificate

the certificate extracted in the above way will contain some junk
from openssl s_client output we don't want like verification status
we can remove it ro reduce disk usage for saved certificates"
234,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c2b3b6d7aa5fcfff7abc52a1ec2b02abb6d97c28,"use CApath for certificates and store certificates (v2)

CApath is about 20% faster than CAfile so use it, also
save the received certificates from the servers for later analysis
(proper hostname checking, looking for certificates sharing private key,
etc.)

Use the mechanism from cipherscan to find location of ca cert bundle"
235,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9f9af9c71df24782498515c475955aaa78f366f5,"don't calculate sha sums for the certificates over and over

we can use cksum to calculate simple checksum much faster than
with using openssl, so we can compute sums only once"
236,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0071870c7c69bb15541002ded2fb458e74b4c00b,"few less forks in the script

again, we can use arrays and a bit advanced awk syntax to reduce
the number of forks necessary to run the script"
237,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0e6c40ad83db05fd78cb99dc27492cbdc55f41c1,"make handling of self signed certs more robust

openssl sometimes will print the filename, then the error, and finish
with OK, matching the colon and space prevents from considering such
certs to be valid"
238,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2e9c3fcc90f0d008a6c5cf7429c7649a9d96c987,"don't retry protocols we know don't work

When connection is unsuccessful with a given protocol, don't try it again
since we probably exhausted the ciphers supported by the protocol

makes scanning about 10% faster"
239,https://api.github.com/repos/mozilla/cipherscan/pulls/27,27,"Cipherscan fixes, speedups and saving of certificates","- reduce forks to make the script faster
- implement caching of ca certificates, saving of end entity certificates
- don't retry connections to server with given protocol version if it refused it previously

Example speedup (scanning Alexa top 900 sites on 8 core machine):
old code:
real    17m36.456s
user    39m44.715s
sys     42m31.756s

new code:
real    11m35.938s (34.2% faster)
user    38m16.861s (3.7% faster)
sys     13m44.998s (67.7% faster)
",tomato42,618246,2014-10-11T13:25:38Z,MEMBER,False,303,66,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5b96f8fb4726827f2e937a5c72cd516ec757a75a,"limit number of forks needed to speed up execution

bash has a built in regular expression processor, we can match
lines using =~

moreover, stuff that will match while being inside parentheses is
later available in the BASH_REMATCH array

the IFS (Internal Field Separator) by default includes space, tab and
new line, as such we can use it to split longer lines to separate
words, just as awk '{print $1}' can, just need to put the value to
an array for that

we also don't have to use $(echo $var) when assigning variables, $var
is enough

bash has also built in substitution engine, so we can do ${var/,/ & }
to switch all commas to ampersands when using the variable"
240,https://api.github.com/repos/mozilla/cipherscan/pulls/26,26,analyze.py more portable,"- openssl_bin defaults to `which openssl`, instead of hardcoded ./openssl
- new option -o /path/to/openssl_bin
",rogerthat,1444833,2014-10-10T12:44:46Z,NONE,False,33,11,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,eedb26b9585edf7c0c40f27633e41437d4fa15e3,"analyze.py more portable
- openssl_bin defaults to `which openssl`, instead of hardcoded ./openssl
- new option -o /path/to/openssl_bin"
241,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3bab7150127b55049ccbc5d18fb5a1645100d004,"count ECDH-RSA ciphers as ECDSA

the ECDH parameters come from server certificate - the point
on elliptic curve. The RSA comes from the signature on the certificate
which comes from CA"
242,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,144e6ea2f7ea6d10c8787e3f0b81c7882986fcdc,sort reported TLS session ticket hint using natural sort
243,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,17bc04f71d808dc467f36e3cb4db42d2e6b529ea,add missing ocsp_staple header
244,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4ffa061977a1be5c9d93257931da2ba547f465ee,make the output shorter in case the server supports all protocol types
245,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8bcc9d3cf653c59896743baaac604005a3be1fe7,"report ciphers causing incompatibility for Firefox

It turns out that the situation is even more bleak for Firefox
with regards to RC4, add it to report"
246,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5c4a8e8fd68fbca3ba8f3c476c2c75a2e6e14c84,report what ciphers Firefox would select while connecting to server
247,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0ae9d767713ec5613f80db0114e58c08f03ea9b9,"openssl in -ssl2 mode doesn't tolerate -servername option

when openssl is run in -ssl2 mode, it doesn't accept -servername
option and just aborts operation, it doesn't consider -status
to be special though.

Remove this option when running the SSLv2 portion of the test."
248,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ab66f04e53d4e6ede0234e054d8f708fadedf749,report if server uses client side or server side cipher ordering
249,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,30d0839df63f23d9ecba07dd832cedeae494f355,"report cipher ordering in scanning stats, use it to simulate handshakes

since now we know if server honours client order or not, we can use it
to properly simulate handshakes for a given client, also report
the general stats of this server configuration variable"
250,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7f5743620b0af2e43b356a019d01a8e88602c076,"add support for CApath

capath for relatively small cert sets (~300) makes scanning about 5%
faster

also do a little clean up of the command-to-run generation code"
251,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,aeffc87e05a365c1d41771d72d3f8eb0745d2a0e,"add some comments, group related code"
252,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,56893f7b2fadb082b2382f52a038853d2f10529c,add caching of intermediate CA certificates
253,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,431b453e438098fe71f4e5da555b8383950b5852,add ability to also save leaf certificates and untrusted ones
254,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2b959f601d53538c92432ac6b933b143f7bb1ac9,"use CApath for certificates and store certificates

CApath is about 20% faster than CAfile so use it, also
save the recived certificates from the servers for later analysis
(proper hostname checking, looking for certificates sharing private key,
etc.)"
255,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d2f112033dbcd1e885ca5aee58fe791ec75c5647,"clean up the extracted certificate

the certificate extracted in the above way will contain some junk
from openssl s_client output we don't want like verification status
we can remove it ro reduce disk usage for saved certificates"
256,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,caa534bfd7fc729fd287253ce9df5ff2493ee429,"don't retry protocols we know don't work

When connection is unsuccessful with a given protocol, don't try it again
since we probably exhausted the ciphers supported by the protocol

makes scanning about 10% faster"
257,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ef4786f1d7e2066f7d87dad54b6ee8148531fc25,"no need to grep the input when we're using awk

awk has an inbuilt version of grep, also truncate processing as soon
as we find what we're looking for"
258,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bcfe0dbae11a5eda6fd0e69c35925ec2672c5fad,"don't calculate sha sums for the certificates over and over

we can use cksum to calculate simple checksum much faster than
with using openssl, so we can compute sums only once"
259,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ab8b7945573920721118214dfbf2fd616efdd0ca,"few less forks in the script

again, we can use arrays and a bit advanced awk syntax to reduce
the number of forks necessary to run the script"
260,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,68577f791830b44cd4fb2d446e7aa7a8a1ba120e,collect statistics about found certificates
261,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b4291236bbcebeb4d12159ae2a658ed6754c70fb,add collection of LoS for the cert paths found
262,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0591829ed125720ed201fe7a094d5d90cb59cba2,"application for finding the correct certificate chain

process the result files and output if the cert chain inside is
complete or not (that means it requires further processing)"
263,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9a956dc5a51c6991af25a8ec448d68a1ed958e52,use pre-parsed data outputted by the C application
264,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3c93cbd6c234fe15f81ebc0243a252953c60aeb1,"make handling of self signed certs more robust

openssl sometimes will print the filename, then the error, and finish
with OK, matching the colon and space prevents from considering such
certs to be valid"
265,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1aeff568ee072be2427228218e0a7096d53a77ee,"update SEED and IDEA classification, do a total of broken ciphers

SEED and IDEA are not good ciphers, but not broken, so count them
separately, do a total count of servers that support broken and insecure
ciphers"
266,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0adf721643ad8eac02f0de18b889db654056b896,parse_CAs.py - add support for MD5 sigs
267,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8911827be146646cee6297f558c572564c4a7f77,process-certificate-statistics.sh - the script HOWTO to turn results to CA stats
268,https://api.github.com/repos/mozilla/cipherscan/pulls/25,25,certificate collection + few extras,"This patch set fixes the few issues with the pull #18 as well as adds new features:
- fix for counting ECDH-RSA cipher as RSA
- few fixes to the human readable output (missing headers, sorting)
- make human readable output smaller when server supports cipher with all protocols (SSLv3-TLSv1.2)
- report statistics about compatibility of servers with Firefox 29 (and other clients with same cipher ordering) cipher selection
- fix for the incorrect options for SSLv2 scan
- detecting server vs client cipher ordering
- using CApath ~~instead~~ in addition to  CAfile (speedup)
- collection of intermediate and end entity certificates
- performance improvements to the scanner (skip protocols detected as unsupported, limit forking)
- collection of statistics about certificate chains used by servers (length, key sizes, names of intermediates and root CAs, etc.)
- counting Insecure servers (ones that use anonymous DH or insecure ciphers like DES, RC2, export grade), moving SEED and IDEA to their own category (they are iffy, not outright broken, like RC4)
",tomato42,618246,2014-10-04T12:56:54Z,MEMBER,False,1303,32,6,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,77f326522e253ba0b3c0cc8ac7cb4f43d884f3be,"fixes for the pull request #18

there were few small issues with the pull #18 even though jvehent merged
it, this fixes them"
269,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0662fa61d8f04c94a2631bf144fb65d7a9e33f32,"FreeBSD compatible

Detect the OS and use gtimeout from sysutils/coreutils"
270,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d3b2c48e13408654f7264bbee973c2294f5360b0,"FreeBSD + extra chacha20 repo

I've found another repository which offers 1.0.2 with chacha20
I've added some extra instructions for FreeBSD users"
271,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9438d647622be4663a74bf4a5e051dc27cb5590f,"OpenSSL 1.0.2 is not a requirement

Back when egrep wasn't working, I tried to fix various things and 1.0.2 was allowing the script to go further without breaking. After having installed a more recent version of GNU grep, things were back to normal and 1.0.1 works fine"
272,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3cc5001ebf254a2c8a1580b0fc2efba49345fd71,"SNI fix

Without this fix you always get the first cert attached to an IP and not necessarily the cert attached to the domain you're trying to scan.

Could be made modular in order to simulate a client which doesn't support SNI..."
273,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8f5eb93fd9fd638642af8b6e702f841a38af0183,"Merge pull request #1 from oparoz/patch-1

Patch 1"
274,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2d75e7dc4a4a0ec210f5f8e32aa43f59f02f8216,removed Mozilla handle
275,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,54a54aa4281ec251681856f8e40d7ea188ac50d8,"New option to enable SNI

Simulates a SNI capable client"
276,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a76774f2608131be3c0084c45d9ef1ab72a31e57,"Merge pull request #2 from oparoz/patch-1

removed Mozilla handle"
277,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4bc2539f441d329aa72620e248db19e54520aa87,Local branch was out of sync...
278,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ad88f047e675223a9d7944623ef998a9d989c56f,Style fix
279,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c92c1f70ce7d0a2a77c1b90558977edfe1106187,Added a common location for the cert bundle on FreeBSD
280,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,e97e57ae1f40471e3d3029dd22fbef2292683a06,"Common name detector

Let's extract the Common Name and all the Subject Alternative Names

This has not been widely tested"
281,https://api.github.com/repos/mozilla/cipherscan/pulls/24,24,"SNI switch, CN detector and FreeBSD compatibility","With the new -s or --sni switch, you can scan a hostname as if you were a client which supports SNI
The script now extract Common Names and Alternative Subject Names and compares them to the request

It's also now compatible with FreeBSD
",oparoz,323220,2014-09-16T00:05:27Z,NONE,False,85,16,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ed34c0e04675baa51c428d55f48492349f390ff7,"Merge pull request #3 from oparoz/common-name-discovery

Common name detector"
282,https://api.github.com/repos/mozilla/cipherscan/pulls/23,23,FreeBSD compatible,"Detect the OS and use gtimeout from sysutils/coreutils
",oparoz,323220,2014-09-15T15:08:02Z,NONE,False,27,9,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0662fa61d8f04c94a2631bf144fb65d7a9e33f32,"FreeBSD compatible

Detect the OS and use gtimeout from sysutils/coreutils"
283,https://api.github.com/repos/mozilla/cipherscan/pulls/23,23,FreeBSD compatible,"Detect the OS and use gtimeout from sysutils/coreutils
",oparoz,323220,2014-09-15T15:08:02Z,NONE,False,27,9,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d3b2c48e13408654f7264bbee973c2294f5360b0,"FreeBSD + extra chacha20 repo

I've found another repository which offers 1.0.2 with chacha20
I've added some extra instructions for FreeBSD users"
284,https://api.github.com/repos/mozilla/cipherscan/pulls/23,23,FreeBSD compatible,"Detect the OS and use gtimeout from sysutils/coreutils
",oparoz,323220,2014-09-15T15:08:02Z,NONE,False,27,9,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9438d647622be4663a74bf4a5e051dc27cb5590f,"OpenSSL 1.0.2 is not a requirement

Back when egrep wasn't working, I tried to fix various things and 1.0.2 was allowing the script to go further without breaking. After having installed a more recent version of GNU grep, things were back to normal and 1.0.1 works fine"
285,https://api.github.com/repos/mozilla/cipherscan/pulls/23,23,FreeBSD compatible,"Detect the OS and use gtimeout from sysutils/coreutils
",oparoz,323220,2014-09-15T15:08:02Z,NONE,False,27,9,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2d75e7dc4a4a0ec210f5f8e32aa43f59f02f8216,removed Mozilla handle
286,https://api.github.com/repos/mozilla/cipherscan/pulls/22,22,Use Debian's system-wide trust anchors when possible,"Attempt to use /etc/ssl/certs/ca-certificates.crt if no CACERTS
are available. On Debian, this is the default location for
system-wide trust anchors.
",simondeziel,545509,2014-07-25T14:24:50Z,CONTRIBUTOR,True,9,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7dee967dd72fd824e6042031551e37701229d6d6,"Attempt to use /etc/ssl/certs/ca-certificates.crt if no CACERTS
are available. On Debian, this is the default location for
system-wide trust anchors."
287,https://api.github.com/repos/mozilla/cipherscan/pulls/21,21,add real execution tracing to debug,"This helped a bit to track down bugs on OS X. 

Not sure if we'd want debug levels for that, i.e.: `-D` only outputs the debug output that has been there until now, `-DD` outputs bashs verbose, execution and environment content as I added in this commit.
",azet,855369,2014-07-17T16:08:57Z,CONTRIBUTOR,True,1,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,efd84cdb2422b4f6416a60cf52760c71b20d80d5,add real execution tracing to debug
288,https://api.github.com/repos/mozilla/cipherscan/pulls/20,20,Updated binary with latest 1.0.2-chacha build,"Compiled for 64-bit linux from the following source:
https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha
",PeterMosmans,1465302,2014-07-12T00:17:55Z,CONTRIBUTOR,True,0,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,26a24d0429a59b7e207910ef1332a494c409ac7a,"Updated binary with latest 1.0.2-chacha build

Compiled for 64-bit linux from the following source:
https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha"
289,https://api.github.com/repos/mozilla/cipherscan/pulls/20,20,Updated binary with latest 1.0.2-chacha build,"Compiled for 64-bit linux from the following source:
https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha
",PeterMosmans,1465302,2014-07-12T00:17:55Z,CONTRIBUTOR,True,0,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b65c13c7b9cdf9029a71003cf0aa9584ae3877d4,"Compiled for 64-bit-linux from the following source:

https://github.com/PeterMosmans/openssl/tree/1.0.2-chacha
Added CAMELLIA 256SHA ciphers"
290,https://api.github.com/repos/mozilla/cipherscan/pulls/19,19,minor typo fix,,phlipper,984,2014-06-25T23:28:51Z,CONTRIBUTOR,True,1,1,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5ae2132f23e94f92e93875880636cc3fba1723d3,minor typo fix
291,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8817a7b1c855a1cf4e12aad2b5235d200313c992,"testtop1m.sh: correct counting of background jobs

`jobs` command returns multiple lines for a jobs with `if` so counting
number of background jobs was off"
292,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a0cb76638121684c4bb8e474316f71ac3ebe7040,"add support for archlinux

archlinux has ca certificates in different place than Fedora"
293,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5dfa3c444ea9b4040e947a28f69bc883c2938d6c,"put ECDSA ciphers before RSA ciphers

Google servers (like youtube) negotiate ECDSA variant
of ciphersuite only if the RSA variant is also present,
so to return more comple cipher listing, we need to move
ECDSA ciphers before RSA ciphers"
294,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c48c0127711203156c44d775179148ac4d9028c8,use the same openssl for all tasks
295,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,00b20a20edb9a40fa98b8bbd9996f3b12bbacf69,"perform SNI enabled scan

for example, youtube requires SNI extension to be present to return
ECDSA certificates, use it for scanning"
296,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,a213fc45d0b4dfca853d725e0c38d0a335836727,"remove the folder/file part from url

some hostnames in the top-1m.csv file have folder or site specified
in them, cut it off before using"
297,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5ef53dda9cb6bfdec34040bff85ec8eda4ccf59b,"increase paralelism of jobs

because sometimes tcping takes a long time to timeout for a lot
of hosts in batch use also load average to keep the cpu busy"
298,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,cdbf5964660bd29ad7eaed6699f1f6918c079d29,"properly handle pure IP adressess

(it's illegal to use IP in SNI)"
299,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1a7817293638822dd97a81395a53a669e06345f9,scan just one host per hostname
300,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0777682aa60901569fa7fbccd53eef353a89d85a,collect TLS ticket lifetime hints
301,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4e94d95bd8c50c28fd0e6fd5195591cfae891158,"ask for OCSP stapling by default

for now, no option to disable"
302,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f1d3b51749f34b9bb7123e0e1973ccdb99c8cc57,update the top 1M list to the version from 2014-05-16
303,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2f56f0515ea668d8128c8178151307dac3d38554,don't scan the same host twice
304,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ee8192720001648cf342151d2d4c5a7c02ff2efa,fix cipherscan human-readable output - pfs_keysize option
305,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,86ff1122cc9b05bb19427dea2ea6e54ffb6308f4,parse_results.py: don't count anonymous cipher suites toward correct config stats
306,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3667b04ad7dff410ece639730e8b3d4381c1dcf9,"correctly count broken cipher suites with ""no reporting of untrusted"""
307,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,be0439ef99f976c8ae3e6fdaba7b3b33f0e23a8c,"provide statistics for all key exchange methods, not DHE and ECDHE only"
308,https://api.github.com/repos/mozilla/cipherscan/pulls/18,18,Hodgepodge of fixes,"Julien, as the name indicates, the patches are more of a collection of fixes than anything consistent or polished. If you want me to remove or rework some patches or put them in sane patch sets (like I've done before), just say so.

This is more of a query of what do you want to see included in your version than a real push request (not that I will mind if you do pull it :) ).

As for the fixes included:
- updated Alexa top 1m list
- improvements to scanning, including: SNI support, handling of google ECDSA configuration, IP addresses, etc.
- collecting OCSP stapling support info
- collecting TLS Session Ticket hints
- fixes to result parsing
",tomato42,618246,2014-06-04T17:17:29Z,MEMBER,True,1000165,1000003,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7591062bbc699e20f1d59f2746244ded6bb6dc65,parse_results.py: compatibility with old results files
309,https://api.github.com/repos/mozilla/cipherscan/pulls/17,17,use proper quit semantic for openssl s_client,"openssl s_client expects ""Q"" as the first character on a line,
with case being significant. Also, the \n marker is unnecessary:
the echo command prints a newline automatically, additionally,
for the \n to be actually interpreted, the -e option must be used
",tomato42,618246,2014-05-09T12:47:16Z,MEMBER,True,3,3,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,dca614d2180259fc1edd91f9c6f0752768247ca8,"use proper quit semantic for openssl s_client

openssl s_client expect ""Q"" as the first character on a line,
with case being significant. Also, the \n marker is unnecessary
the echo command prints a newline automatically, additionally,
for the \n to be actually interpreted, the -e option must be used"
310,https://api.github.com/repos/mozilla/cipherscan/pulls/16,16,restore timeout,"some servers have port 443 open but won't reply to ClientHello
requests, this hangs openssl s_client, as such we need to kill it
after some timeout.
",tomato42,618246,2014-05-09T10:02:04Z,MEMBER,True,5,4,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d7b99f125e3b91e9b0370992acba8709c975354d,"restore `timeout`

some servers have port 443 open but won't reply to ClientHello
requests, this hangs openssl s_client, as such we need to kill it
after some timeout"
311,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b6b9a1a3645d6d23faaa4b3b667ab740961318de,"Improve scanning performance and reduce false negatives

scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix"
312,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,863441a1794e395cf3a0ab747129f3fe1fb64510,"parsing of signature algorithm and key size

add parsing of signature algorithm and key size from the individual
results, report summary"
313,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ff620f5b266b9dd1c3459e1c886d6cd8fd963829,"report number of servers that use ECDSA and RSA certificates

Since use of both ECDSA and RSA certificates is easy, it is
relatively simple to support both. Report the total number of
such servers"
314,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,45dc1da3f6f80aecd3bdaf5e78e76fdc33f70a29,add ability to ignore results from untrusted servers
315,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,faef8d692fef30d9841128d1540dd1211c58c088,"in ""no-untrusted mode"": filter out ADH and AECDH suites

If server negotiates ADH or AECDH suite, openssl returns ""ok"" in
cert checking. Don't mark server as trusted because of that.

Don't collect statistics on servers that provide only untrusted
connections."
316,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fd6fcdd359352103f0244917d4fd4b6d4f610f1e,fix spelling in TLS stats (TLS1_1 vs TLS1.1)
317,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,2b794ebfe01eea08fa7dfc73aab45087487fae08,"fix and extend reporting of AES-GCM ciphers

AES-GCM ciphers don't have ""AES-GCM"" substring in the openssl name

extend reporting of AES ciphers, split to AES-CBC, AES-GCM and
AES in general"
318,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,c8abfb53e8a3d0a0934d7aaeb6a100c852683bfd,"add support for Chacha20 based ciphers

Basically all Google servers support Chacha20 now and it is
not a bad choice, so report it as a regular cipher"
319,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d3b6f9b50731bb692f4d5c561de2cf3767efe673,"fix reporting of the TLS1.2 but not TLS1.1

Some servers may be configured to support only TLS1.2, it would
count them towards the number of servers affected by the OpenSSL bug"
320,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,349d4ebc3c50b603f70d97414cc21de8883e2eba,"more detailed PFS report

Just because server supports some bad DH params, doesn't mean
it will force them on users. Report number of servers
that prefer specific DH params."
321,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,21bba67df043ac1e89e54d7c3d58f0898e741dec,"extend SSL stats

Two interesting server configurations are ones that support
only SSL3 or TLS1 only (old, but otherwise correctly configured servers)
and ones that support only TLS1.1 or up (brave admins that support
only new clients)"
322,https://api.github.com/repos/mozilla/cipherscan/pulls/15,15,Reporting improvements 03,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

```
SSL/TLS survey of 78 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)


Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      71        91.0256
AES                       78        100.0
AES Only                  1         1.2821
AES-CBC Only              1         1.2821
AES-GCM                   35        44.8718
CAMELLIA                  10        12.8205
CHACHA20                  20        25.641
RC4                       69        88.4615
RC4 Preferred             18        23.0769
RC4 forced in TLS1.1+     6         7.6923
z:DES-CBC-SHA             11        14.1026
z:DHE-RSA-SEED-SHA        4         5.1282
z:EDH-RSA-DES-CBC-SHA     2         2.5641
z:EXP-DES-CBC-SHA         8         10.2564
z:EXP-RC2-CBC-MD5         8         10.2564
z:IDEA-CBC-SHA            8         10.2564
z:SEED-SHA                3         3.8462

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       24        30.7692
ECDHE                     42        53.8462

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               24        30.7692  100.0
ECDH,P-256,256bits        40        51.2821  95.2381
ECDH,P-384,384bits        2         2.5641   4.7619
Prefer DH,1024bits        7         8.9744   29.1667
Prefer ECDH,P-256,256bits 33        42.3077  78.5714
Prefer PFS                40        51.2821  0
Support PFS               55        70.5128  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
sha1WithRSAEncryption     78        100.0    

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 2048                  78        100.0    
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL3                      77        98.7179
SSL3 or TLS1 Only         25        32.0513
TLS1                      78        100.0
TLS1.1                    51        65.3846
TLS1.2                    49        62.8205
TLS1.2, 1.0 but not 1.1   2         2.5641
```
",tomato42,618246,2014-04-19T21:21:07Z,MEMBER,True,129,11,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,686d7c958b4bd6aeb2b74cc8b53667cb7d2b13f1,"extend reporting of RC4-related stats

While preferring RC4 in TLS1.0 or SSL3 was recommended before,
it was always known that TLS1.1 and TLS1.2 were not vulnerable against
BEAST, so forcing RC4 there is a mistake. Report number of such servers."
323,https://api.github.com/repos/mozilla/cipherscan/pulls/14,14,Improve scanning performance and reduce false negatives,"scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix
",tomato42,618246,2014-04-19T21:17:52Z,MEMBER,True,28,5,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b6b9a1a3645d6d23faaa4b3b667ab740961318de,"Improve scanning performance and reduce false negatives

scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix"
324,https://api.github.com/repos/mozilla/cipherscan/pulls/13,13,Better error handling,"Now featuring a little better error handling when openssl parameters are missing as suggested by Markus Manzke.

Also added a simple error_exit function that allows to echo helpful error messages when running verbose or in debug mode.
",MacLemon,90635,2014-04-09T20:38:47Z,CONTRIBUTOR,False,43,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,6a394b6c878e13c8a5e3fb77dd7d4a7bf7a27871,Added check for missing OpenSSL arguments as suggested by Markus Manzke.
325,https://api.github.com/repos/mozilla/cipherscan/pulls/13,13,Better error handling,"Now featuring a little better error handling when openssl parameters are missing as suggested by Markus Manzke.

Also added a simple error_exit function that allows to echo helpful error messages when running verbose or in debug mode.
",MacLemon,90635,2014-04-09T20:38:47Z,CONTRIBUTOR,False,43,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,16f4c5db74249c65e680f49a614fa635d6be6860,Added some error handling for -o /path/to/openssl and a simple error reporting function.
326,https://api.github.com/repos/mozilla/cipherscan/pulls/13,13,Better error handling,"Now featuring a little better error handling when openssl parameters are missing as suggested by Markus Manzke.

Also added a simple error_exit function that allows to echo helpful error messages when running verbose or in debug mode.
",MacLemon,90635,2014-04-09T20:38:47Z,CONTRIBUTOR,False,43,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,d434f68772b8d390a6e719427841d51185a3d770,Changed error return codes to be in line with the advanced bash scripting recommendations of 64-113
327,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
328,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
329,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9fdd62a59b5968650b916175a08811d1d9e24e6,"report key size used in server's certificate

Extend the report to show also server certificate key size:
prio  ciphersuite              protocols                    pubkey_size  pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
4     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
5     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         RSA,512bits"
330,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,946cc6a9acfff2ca1937cf7cf7842466b635dff4,"Report the signature type used on server certificate

Parse the certificate used by server and report the signature used:

prio  ciphersuite              protocols                    pubkey_size  signature_algorithm    pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         sha1WithRSAEncryption  ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ecdsa-with-SHA512      ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
4     AECDH-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  0            None                   ECDH,P-256,256bits
5     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
6     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption  RSA,512bits"
331,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f04567d40edf65007aefacb18432d99eaa88a530,"check if certificate used by server is trused

Use system trust anchors to check if certificate chain used by server
is actually valid."
332,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9931ca2a2d7d022ad48efcf8a40cf74826e76bf0,"update README with new examples

New features = new examples"
333,https://api.github.com/repos/mozilla/cipherscan/pulls/12,12,Certificate scanning 02 (alternative version),"Add information about the certificate used by server to the cipherscan report.

Alternative version to certificate-scanning-01, this version has narrower output if the server has
only one certificate.
",tomato42,618246,2014-04-06T16:06:15Z,MEMBER,True,111,35,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,4e0e03b61ea82a283e15f83cabc4d78da7f364dc,"make default output more narrow

If server uses the same certificate for all connections, it's
useless to print the same information over and over.

In such case, omit those columns and print a summary at the end"
334,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
335,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
336,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9fdd62a59b5968650b916175a08811d1d9e24e6,"report key size used in server's certificate

Extend the report to show also server certificate key size:
prio  ciphersuite              protocols                    pubkey_size  pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
4     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
5     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         RSA,512bits"
337,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,946cc6a9acfff2ca1937cf7cf7842466b635dff4,"Report the signature type used on server certificate

Parse the certificate used by server and report the signature used:

prio  ciphersuite              protocols                    pubkey_size  signature_algorithm    pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         sha1WithRSAEncryption  ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ecdsa-with-SHA512      ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
4     AECDH-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  0            None                   ECDH,P-256,256bits
5     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
6     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption  RSA,512bits"
338,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f04567d40edf65007aefacb18432d99eaa88a530,"check if certificate used by server is trused

Use system trust anchors to check if certificate chain used by server
is actually valid."
339,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9931ca2a2d7d022ad48efcf8a40cf74826e76bf0,"update README with new examples

New features = new examples"
340,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7a92186122e83f556487331d384a5811dc7cd45a,"Improve scanning performance and reduce false negatives

scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix"
341,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8b2b6f591698d8e6984d29aee96a73fb272f1f43,"parsing of signature algorithm and key size

add parsing of signature algorithm and key size from the individual
results, report summary"
342,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,167ef8b50277f2b33a813d36e4d366bef1d7509a,"report number of servers that use ECDSA and RSA certificates

Since use of both ECDSA and RSA certificates is easy, it is
relatively simple to support both. Report the total number of
such servers"
343,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5d7ec3a714a8c3ade2c9a85046d4d85c55a6addb,add ability to ignore results from untrusted servers
344,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bc0409ca735164340fdd0f563729d32e8b00c9d9,"in ""no-untrusted mode"": filter out ADH and AECDH suites

If server negotiates ADH or AECDH suite, openssl returns ""ok"" in
cert checking. Don't mark server as trusted because of that.

Don't collect statistics on servers that provide only untrusted
connections."
345,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,fedf12dd5a3e04f76b7a2e3794f629483a2c4f1a,fix spelling in TLS stats (TLS1_1 vs TLS1.1)
346,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1536064528787ff145df512e2a953d1ad7951023,"fix and extend reporting of AES-GCM ciphers

AES-GCM ciphers don't have ""AES-GCM"" substring in the openssl name

extend reporting of AES ciphers, split to AES-CBC, AES-GCM and
AES in general"
347,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,b2edb0e36141c5d7770678e2fc098b52696ca47c,"add support for Chacha20 based ciphers

Basically all Google servers support Chacha20 now and it is
not a bad choice, so report it as a regular cipher"
348,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,15d77628526c9199a889182c5669cad64b50e186,"fix reporting of the TLS1.2 but not TLS1.1

Some servers may be configured to support only TLS1.2, it would
count them towards the number of servers affected by the OpenSSL bug"
349,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,39c3e1978a65f69348e714a5cec15c8717b54bfc,"more detailed PFS report

Just because server supports some bad DH params, doesn't mean
it will force them on users. Report number of servers
that prefer specific DH params."
350,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,010ebccd806675eeb4d24a8f3ebaf9192048f9de,"extend SSL stats

Two interesting server configurations are ones that support
only SSL3 or TLS1 only (old, but otherwise correctly configured servers)
and ones that support only TLS1.1 or up (brave admins that support
only new clients)"
351,https://api.github.com/repos/mozilla/cipherscan/pulls/11,11,Reporting improvements 02,"Extend and fix reporting of Protocols, ciphers and PFS suites.

New report:

SSL/TLS survey of 79846 websites from Alexa's top 1 million
Stats only from connections that did provide valid certificates
(or anonymous DH from servers that do also have valid certificate installed)

Supported Ciphers         Count     Percent
-------------------------+---------+-------
3DES                      73668     92.2626
3DES Only                 2253      2.8217
AES                       74197     92.9251
AES Only                  119       0.149
AES-CBC Only              91        0.114
AES-GCM                   22569     28.2657
AES-GCM Only              2         0.0025
CAMELLIA                  26764     33.5195
CHACHA20                  1984      2.4848
RC4                       69010     86.4289
RC4 Only                  1330      1.6657
RC4 Preferred             17462     21.8696
RC4 forced in TLS1.1+     9218      11.5447
z:ADH-DES-CBC-SHA         264       0.3306
z:ADH-SEED-SHA            173       0.2167
z:AECDH-NULL-SHA          3         0.0038
z:DES-CBC-MD5             41        0.0513
z:DES-CBC-SHA             17311     21.6805
z:DHE-RSA-SEED-SHA        11320     14.1773
z:ECDHE-RSA-NULL-SHA      3         0.0038
z:EDH-RSA-DES-CBC-SHA     12167     15.2381
z:EXP-ADH-DES-CBC-SHA     196       0.2455
z:EXP-DES-CBC-SHA         13819     17.3071
z:EXP-EDH-RSA-DES-CBC-SHA 8195      10.2635
z:EXP-RC2-CBC-MD5         12963     16.235
z:IDEA-CBC-MD5            15        0.0188
z:IDEA-CBC-SHA            11268     14.1122
z:NULL-MD5                138       0.1728
z:NULL-SHA                137       0.1716
z:NULL-SHA256             1         0.0013
z:RC2-CBC-MD5             56        0.0701
z:SEED-SHA                13787     17.267

Supported Handshakes      Count     Percent
-------------------------+---------+-------
DHE                       36730     46.0011
ECDHE                     25769     32.2734

Supported PFS             Count     Percent  PFS Percent
-------------------------+---------+--------+-----------
DH,1024bits               35488     44.4456  96.6186
DH,2048bits               953       1.1935   2.5946
DH,3072bits               1         0.0013   0.0027
DH,3248bits               1         0.0013   0.0027
DH,4096bits               64        0.0802   0.1742
DH,512bits                26        0.0326   0.0708
DH,768bits                200       0.2505   0.5445
ECDH,B-571,570bits        89        0.1115   0.3454
ECDH,P-224,224bits        2         0.0025   0.0078
ECDH,P-256,256bits        25583     32.0404  99.2782
ECDH,P-384,384bits        39        0.0488   0.1513
ECDH,P-521,521bits        71        0.0889   0.2755
Prefer DH,1024bits        25481     31.9127  69.3738
Prefer DH,2048bits        408       0.511    1.1108
Prefer DH,4096bits        5         0.0063   0.0136
Prefer DH,512bits         1         0.0013   0.0027
Prefer DH,768bits         22        0.0276   0.0599
Prefer ECDH,B-571,570bits 62        0.0776   0.2406
Prefer ECDH,P-256,256bits 16862     21.1182  65.4352
Prefer ECDH,P-384,384bits 19        0.0238   0.0737
Prefer ECDH,P-521,521bits 65        0.0814   0.2522
Prefer PFS                42925     53.7597  0
Support PFS               54997     68.8788  0

Certificate sig alg     Count     Percent 
-------------------------+---------+--------
None                      2506      3.1385  
sha1WithRSAEncryption     77201     96.6874  
sha256WithRSAEncryption   2659      3.3302   

Certificate key size    Count     Percent 
-------------------------+---------+--------
RSA 1024                  418       0.5235  
RSA 2047                  3         0.0038  
RSA 2048                  77506     97.0694  
RSA 2049                  1         0.0013  
RSA 2056                  1         0.0013  
RSA 2058                  1         0.0013  
RSA 2080                  2         0.0025  
RSA 2084                  2         0.0025  
RSA 2432                  50        0.0626  
RSA 3072                  9         0.0113  
RSA 3248                  1         0.0013  
RSA 4048                  1         0.0013  
RSA 4086                  1         0.0013  
RSA 4096                  1853      2.3207  
RSA 4192                  1         0.0013  
RSA/ECDSA Dual Stack      0         0.0

Supported Protocols       Count     Percent
-------------------------+---------+-------
SSL2                      176       0.2204
SSL2 Only                 5         0.0063
SSL3                      79157     99.1371
SSL3 Only                 1488      1.8636
SSL3 or TLS1 Only         42282     52.9544
TLS1                      78184     97.9185
TLS1 Only                 198       0.248
TLS1.1                    33701     42.2075
TLS1.1 Only               1         0.0013
TLS1.1 or up Only         9         0.0113
TLS1.2                    35960     45.0367
TLS1.2 Only               6         0.0075
TLS1.2, 1.0 but not 1.1   3663      4.5876
",tomato42,618246,2014-04-06T12:38:15Z,MEMBER,False,200,45,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0acd31af53780aadcd8b0f87bfd67c36c02dfad7,"extend reporting of RC4-related stats

While preferring RC4 in TLS1.0 or SSL3 was recommended before,
it was always known that TLS1.1 and TLS1.2 were not vulnerable against
BEAST, so forcing RC4 there is a mistake. Report number of such servers."
352,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
353,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
354,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9fdd62a59b5968650b916175a08811d1d9e24e6,"report key size used in server's certificate

Extend the report to show also server certificate key size:
prio  ciphersuite              protocols                    pubkey_size  pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
4     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
5     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         RSA,512bits"
355,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,946cc6a9acfff2ca1937cf7cf7842466b635dff4,"Report the signature type used on server certificate

Parse the certificate used by server and report the signature used:

prio  ciphersuite              protocols                    pubkey_size  signature_algorithm    pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         sha1WithRSAEncryption  ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ecdsa-with-SHA512      ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
4     AECDH-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  0            None                   ECDH,P-256,256bits
5     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
6     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption  RSA,512bits"
356,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f04567d40edf65007aefacb18432d99eaa88a530,"check if certificate used by server is trused

Use system trust anchors to check if certificate chain used by server
is actually valid."
357,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9931ca2a2d7d022ad48efcf8a40cf74826e76bf0,"update README with new examples

New features = new examples"
358,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7a92186122e83f556487331d384a5811dc7cd45a,"Improve scanning performance and reduce false negatives

scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix"
359,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8b2b6f591698d8e6984d29aee96a73fb272f1f43,"parsing of signature algorithm and key size

add parsing of signature algorithm and key size from the individual
results, report summary"
360,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,167ef8b50277f2b33a813d36e4d366bef1d7509a,"report number of servers that use ECDSA and RSA certificates

Since use of both ECDSA and RSA certificates is easy, it is
relatively simple to support both. Report the total number of
such servers"
361,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9f43f3df2d8c774ca6be7867a1f134777f627764,add ability to ignore results from untrusted servers
362,https://api.github.com/repos/mozilla/cipherscan/pulls/10,10,Reporting improvements 01,"make the reporting of top1m support all the new features added to base cipherscan, also the ability
to ignore results from unmaintained/unused/internal servers (which don't provide certificate that links to any public CA)
",tomato42,618246,2014-04-05T18:31:54Z,MEMBER,False,171,39,4,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ba1031367f45079c7d1a818e791e33de7e304220,"in ""no-untrusted mode"": filter out ADH and AECDH suites

If server negotiates ADH or AECDH suite, openssl returns ""ok"" in
cert checking. Don't mark server as trusted because of that.

Don't collect statistics on servers that provide only untrusted
connections."
363,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
364,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
365,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9fdd62a59b5968650b916175a08811d1d9e24e6,"report key size used in server's certificate

Extend the report to show also server certificate key size:
prio  ciphersuite              protocols                    pubkey_size  pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
4     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
5     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         RSA,512bits"
366,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,946cc6a9acfff2ca1937cf7cf7842466b635dff4,"Report the signature type used on server certificate

Parse the certificate used by server and report the signature used:

prio  ciphersuite              protocols                    pubkey_size  signature_algorithm    pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         sha1WithRSAEncryption  ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ecdsa-with-SHA512      ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
4     AECDH-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  0            None                   ECDH,P-256,256bits
5     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
6     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption  RSA,512bits"
367,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f04567d40edf65007aefacb18432d99eaa88a530,"check if certificate used by server is trused

Use system trust anchors to check if certificate chain used by server
is actually valid."
368,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9931ca2a2d7d022ad48efcf8a40cf74826e76bf0,"update README with new examples

New features = new examples"
369,https://api.github.com/repos/mozilla/cipherscan/pulls/9,9,Scan improvements 01,"speed up scanning of the top 1M sites without overwhelming the machine and few other fixes
",tomato42,618246,2014-04-05T18:29:31Z,MEMBER,False,99,39,3,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,7a92186122e83f556487331d384a5811dc7cd45a,"Improve scanning performance and reduce false negatives

scan all the machines from top-1m.csv file, wait for completion
of all jobs

i=1 is an off-by-one-error

support top-1m.csv files with arbitrary number of sites

run scans for many hosts at a time, but don't run more than
specified amount

in case where default domain name doesn't resolve or doesn't have
port 443 open, retry with www. prefix"
370,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
371,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
372,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f9fdd62a59b5968650b916175a08811d1d9e24e6,"report key size used in server's certificate

Extend the report to show also server certificate key size:
prio  ciphersuite              protocols                    pubkey_size  pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
4     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048
5     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         RSA,512bits"
373,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,946cc6a9acfff2ca1937cf7cf7842466b635dff4,"Report the signature type used on server certificate

Parse the certificate used by server and report the signature used:

prio  ciphersuite              protocols                    pubkey_size  signature_algorithm    pfs_keysize
1     ECDHE-RSA-AES128-SHA256  TLSv1.2                      2048         sha1WithRSAEncryption  ECDH,P-256,256bits
2     ECDHE-ECDSA-AES128-SHA   SSLv3,TLSv1,TLSv1.1,TLSv1.2  256          ecdsa-with-SHA512      ECDH,P-256,256bits
3     AES128-SHA               SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
4     AECDH-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  0            None                   ECDH,P-256,256bits
5     RC4-MD5                  SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption
6     EXP-RC4-MD5              SSLv3,TLSv1,TLSv1.1,TLSv1.2  2048         sha1WithRSAEncryption  RSA,512bits"
374,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,f04567d40edf65007aefacb18432d99eaa88a530,"check if certificate used by server is trused

Use system trust anchors to check if certificate chain used by server
is actually valid."
375,https://api.github.com/repos/mozilla/cipherscan/pulls/8,8,Certificate scanning 01,"Add information about the certificate used by server to the cipherscan report
",tomato42,618246,2014-04-05T18:27:19Z,MEMBER,True,71,34,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9931ca2a2d7d022ad48efcf8a40cf74826e76bf0,"update README with new examples

New features = new examples"
376,https://api.github.com/repos/mozilla/cipherscan/pulls/7,7,Protocols reporting fix 02,"Don't report TLS1.2 only ciphers as negotiable in TLS1.1 or lower.

This version also puts SSLv2 ciphers after all the other ciphers and doesn't remove SSLv3 from reported protocols on servers which support SSLv2
",tomato42,618246,2014-04-05T18:25:51Z,MEMBER,True,27,18,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,ac3e5f4d6200c3c8fe2e8396f6f86fdeadf32ab1,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
377,https://api.github.com/repos/mozilla/cipherscan/pulls/7,7,Protocols reporting fix 02,"Don't report TLS1.2 only ciphers as negotiable in TLS1.1 or lower.

This version also puts SSLv2 ciphers after all the other ciphers and doesn't remove SSLv3 from reported protocols on servers which support SSLv2
",tomato42,618246,2014-04-05T18:25:51Z,MEMBER,True,27,18,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,32eba4e64435d8091caa1418db63011463d17273,"update examples from README

since now the scan reports protocols correctly, update the example
to illustrate that"
378,https://api.github.com/repos/mozilla/cipherscan/pulls/6,6,Fix how protocols are reported for TLSv1.2 ciphers,"Correctly report at which protocol versions the ciphersuite is negotiable.
",tomato42,618246,2014-04-03T21:53:12Z,MEMBER,False,34,18,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,1388e2ac2b739e1a1f15cfcb2136689ae582683f,"Correctly report TLSv1.2 only ciphers as negotiable with TLSv1.2

Previously scan would report:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits

Now it correctly reports:
prio  ciphersuite                  protocols                    pfs_keysize
1     ECDHE-RSA-AES128-GCM-SHA256  TLSv1.2                      ECDH,P-256,256bits
2     ECDHE-RSA-RC4-SHA            SSLv3,TLSv1,TLSv1.1,TLSv1.2  ECDH,P-256,256bits"
379,https://api.github.com/repos/mozilla/cipherscan/pulls/6,6,Fix how protocols are reported for TLSv1.2 ciphers,"Correctly report at which protocol versions the ciphersuite is negotiable.
",tomato42,618246,2014-04-03T21:53:12Z,MEMBER,False,34,18,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5f670deb10e6751fde76d14c31598485fa09be24,"update examples from README

since now the scan reports protocols correctly, update the example
to ilustrate that"
380,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,9e5ce9cca3a091beeda6c4263c9b4b16d770123c,"Removed neccessity for timeout, thanks to mzeltner. Better parameter parsing with short- and longoptions. Can now pass a path to use any openssl. Now works on OS X."
381,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,57f41d73767005d421523359c714707413234c8c,Fixed variable renaming.
382,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,26b52d4e17fbda8352ceb3ab5fb4b5ef5119cc52,"Make mktemp obsolete

We have pipes, we shall use them!"
383,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,490c86c43eacb6d7676b55276c4d6b8a290ebb9b,Changed grep invocation to prevent strange grep versions to balk on -E
384,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0d93b5d37eb6cfd56463159250bfb348b6fe1f87,Updated README to reflect the changes in cipherscan.
385,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,0282ae9209c9dab9bebbf4431cc41ccaa09b1ee8,Added simple debug function
386,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,3282c2c3a5df20911dc7650479abf23120fa81d3,Improved reference of switches documentation formatting.
387,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,8480e63ff7b2d2762a90b2aed9cba11469e8e25d,Fixing a typo
388,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,49214fc5084a052b7faf2938add09a62b1afa444,Verbose and Debug output go to stderr now. Added simple --delay function.
389,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,45f0f3305d9e0fa2b55ffd9cee4b0b2c40d03b79,Merge branch 'master' of https://github.com/MacLemon/cipherscan
390,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,bf48cd2a3ca94ad133e6390aac95e13e192617fc,"Documenting how to build OpenSSL with ChaCha20-Poly1305

Also updating README.md with new options by MacLemon"
391,https://api.github.com/repos/mozilla/cipherscan/pulls/5,5,Cleaned up options and documented custom OpenSSL build,"This one was reworked quite a bit thanks to @MacLemon

The only thing that kept him from doing a pull request is the info on the custom OpenSSL build. So here you go!
",eaon,201369,2014-04-01T18:38:05Z,CONTRIBUTOR,True,145,67,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,05bd24b4056525e0ee4e4f7a50ad46428bb07368,"Cleaning up old style, fixing --allciphers"
392,https://api.github.com/repos/mozilla/cipherscan/pulls/4,4,"Support s_client args, give -starttls example","Hi Julien, thanks for cipherscan. So far it seems to be the most compatible cipherscan tool I tried, also supporting GnuTLS targets. For bettercrypto.org I wanted to have a tool that enables us to test as many configurations as possible, also for services that aren't https - hence this change.

The argument order changed, and everything that isn't recognised as a valid $1 for cipherscan is passed on to OpenSSL.

Thanks!
",eaon,201369,2014-02-02T14:47:15Z,CONTRIBUTOR,True,34,13,2,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,5c07a6e552821e6f70a8b1403b28cfbe9477db49,"Support s_client args, give -starttls example"
393,https://api.github.com/repos/mozilla/cipherscan/pulls/3,3,Cleanup old temp files when a connection failed,,simondeziel,545509,2014-01-07T23:33:06Z,CONTRIBUTOR,True,1,0,1,A very simple way to find out which SSL ciphersuites are supported by a target.,Python,93ee5e3f337f6150096edb6447f08df64b76b0c5,Cleanup old temp files when a connection failed
