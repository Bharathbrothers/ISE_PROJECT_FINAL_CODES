,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/mozanalysis/pulls/128,128,Add support for Firefox for iOS experiments,Required for https://github.com/mozilla/jetstream/issues/616,scholtzan,1239705,2021-04-09T20:20:45Z,CONTRIBUTOR,False,163,39,4,A library for Mozilla experiments analysis,Python,c275b61c23ee791bc45f5bd287bd15eeb5b58d3b,Add support for Firefox for iOS experiments
1,https://api.github.com/repos/mozilla/mozanalysis/pulls/128,128,Add support for Firefox for iOS experiments,Required for https://github.com/mozilla/jetstream/issues/616,scholtzan,1239705,2021-04-09T20:20:45Z,CONTRIBUTOR,False,163,39,4,A library for Mozilla experiments analysis,Python,a70560d6c1cb921b5fd1dde40451bc81b4ca87e8,Use glean events tables for determining enrollments
2,https://api.github.com/repos/mozilla/mozanalysis/pulls/127,127,Use concrete table for main data source,"Uses the `telemetry_stable.main_v4` table instead of the `telemetry.main` compatibility view for the `main` data source.

This is intended to reduce the complexity of the analysis query in order to stay within Google's complexity budget.

We expect that this is compatible with all existing metrics because the view doesn't make very many changes, although the changes it does make are fairly complex.",tdsmith,173889,2021-04-09T18:32:10Z,MEMBER,True,5,2,1,A library for Mozilla experiments analysis,Python,4c6c7c5d0446b4d34439b5b5e668387fd9f384d6,"Use concrete table for main data source

Uses the `telemetry_stable.main_v4` table instead of the `telemetry.main` compatibility view for the `main` data source.

This is intended to reduce the complexity of the analysis query in order to stay within Google's complexity budget.

We expect that this is compatible with all existing metrics because the view doesn't make very many changes, although the changes it does make are fairly complex."
3,https://api.github.com/repos/mozilla/mozanalysis/pulls/127,127,Use concrete table for main data source,"Uses the `telemetry_stable.main_v4` table instead of the `telemetry.main` compatibility view for the `main` data source.

This is intended to reduce the complexity of the analysis query in order to stay within Google's complexity budget.

We expect that this is compatible with all existing metrics because the view doesn't make very many changes, although the changes it does make are fairly complex.",tdsmith,173889,2021-04-09T18:32:10Z,MEMBER,True,5,2,1,A library for Mozilla experiments analysis,Python,5c929fa9a2ebbc2a52baa66d06d946e643a4322c,Buff comment
4,https://api.github.com/repos/mozilla/mozanalysis/pulls/126,126,Add monthly time series period,Required for https://github.com/mozilla/jetstream/issues/561,scholtzan,1239705,2021-03-26T18:46:42Z,CONTRIBUTOR,True,26,3,3,A library for Mozilla experiments analysis,Python,e6362432dcf69591944c536407f030386286efd9,Add monthly time series period
5,https://api.github.com/repos/mozilla/mozanalysis/pulls/125,125,Make enrollments tables independent of analysis windows,"Related to https://github.com/mozilla/jetstream/issues/455

This moves joining enrollments with the analysis windows ends and starts to `build_metrics_query`. This will allow to cache and re-use enrollments tables in jetstream.",scholtzan,1239705,2021-02-22T21:53:30Z,CONTRIBUTOR,True,16,16,1,A library for Mozilla experiments analysis,Python,4689795507337ed37ebb0692c5f0b2214cd7b46d,Make enrollments tables independent of analysis windows
6,https://api.github.com/repos/mozilla/mozanalysis/pulls/124,124,Add descriptions to Sphinx docstrings,This allows us to emit the description field of our metrics and datasources to Sphinx documentation using a trivial Sphinx plugin.,tdsmith,173889,2021-02-06T01:51:43Z,MEMBER,True,64,35,2,A library for Mozilla experiments analysis,Python,ec488db4d9949174b5a15b992bcb3fed2ab8cbed,"Add descriptions to Sphinx docstrings

This allows us to emit the description field of our metrics and datasources to Sphinx documentation using a trivial Sphinx plugin."
7,https://api.github.com/repos/mozilla/mozanalysis/pulls/124,124,Add descriptions to Sphinx docstrings,This allows us to emit the description field of our metrics and datasources to Sphinx documentation using a trivial Sphinx plugin.,tdsmith,173889,2021-02-06T01:51:43Z,MEMBER,True,64,35,2,A library for Mozilla experiments analysis,Python,7cbec5ff975540db8ab515666b96596498007a4c,Mark parallel safe
8,https://api.github.com/repos/mozilla/mozanalysis/pulls/123,123,Rename master -> main,"Fixes https://github.com/mozilla/mozanalysis/issues/121

The repo branch has already been set to `main`, but `master` is referenced in a couple of places",scholtzan,1239705,2021-02-03T20:18:51Z,CONTRIBUTOR,True,3,3,3,A library for Mozilla experiments analysis,Python,23bc8acd69a6f6394c895832ac7680b57815245a,Rename master -> main
9,https://api.github.com/repos/mozilla/mozanalysis/pulls/122,122,Add metrics for disabling Pocket in New Tab.,The telemetry to properly calculate the number of users un-ticking the options to show Pocket and/or Pocket sponsored stories in New Tab was added to FX86 ðŸŽ‰ ,kirill-demtchouk,13353912,2021-01-25T23:27:06Z,CONTRIBUTOR,True,35,0,1,A library for Mozilla experiments analysis,Python,acfff0f818b68073d83e748e1cbf83a2671e6543,Add metrics for disabling Pocket in New Tab.
10,https://api.github.com/repos/mozilla/mozanalysis/pulls/122,122,Add metrics for disabling Pocket in New Tab.,The telemetry to properly calculate the number of users un-ticking the options to show Pocket and/or Pocket sponsored stories in New Tab was added to FX86 ðŸŽ‰ ,kirill-demtchouk,13353912,2021-01-25T23:27:06Z,CONTRIBUTOR,True,35,0,1,A library for Mozilla experiments analysis,Python,4a43ecf605c51b7ada1ba69eca643bbb58c1c0da,Bug fixes
11,https://api.github.com/repos/mozilla/mozanalysis/pulls/122,122,Add metrics for disabling Pocket in New Tab.,The telemetry to properly calculate the number of users un-ticking the options to show Pocket and/or Pocket sponsored stories in New Tab was added to FX86 ðŸŽ‰ ,kirill-demtchouk,13353912,2021-01-25T23:27:06Z,CONTRIBUTOR,True,35,0,1,A library for Mozilla experiments analysis,Python,c0db4861ddb5c85ec0030fa1bfdf49a6bf8f9d05,Fix type cast
12,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,80602a29723e8274d013ca9f6b577f6ee209d5c5,"Fixes #117. Handle duplicate client_ids more correctly.

Metric DataSources were not specific-enough when joining to the `enrollments` view: when there are multiple rows for one client_id, with different branches, rows for all branches are used for all the enrollment rows. So a cloned profile in a three-branch experiment could have up to 3*7=21 days of use in a 7 day analysis window.

Really we want to `GROUP BY e.*` when aggregating over the data source, but being SQL we need to manually list the full set of columns that uniquely identify a row.

Then, when joining this result to the others in the relevant `Experiment` method, we need to use all these join keys again."
13,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,56d97bd04d834a8361371eded4d5ee43b96ec49c,"Handle duplicate client_ids more correctly.

Segment DataSources were not specific-enough when joining to the `enrollments` view: when there are multiple enrollments for one client_id (with different branches), the join won't be a one-to-many join from one enrollment to potentially many data source rows, it will be a many-to-many join, yielding potentially incorrect results due to the extra/duplicated datasource rows. If the enrollments have different enrollment_dates then there's further potential for error.

Really, we want to `GROUP BY e.*` when aggregating over the data source, but being SQL we need to manually list the full set of columns that uniquely identify a row.

Then, when using this in the relevant `Experiment` method, we need to list all these join keys again."
14,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,8a0e4089f110cf59787bf3a1c2f89fac51b311bd,"Fix `Experiment.get_single_window_data()`

It appears that #116 / edc44eb2 broke `Experiment.get_single_window_data()` when replacing `run_query()` with `run_query_and_fetch()`. This was not caught by our tests because we can't mock BQ, so we can't test that method in a meaningful way (i.e. if we had a mock for run_query() we may well have forgotten to delete the mock, leaving the test still to pass).

I'm updating the logic to match `Experiment.get_time_series_data()`, without a deeper understanding of what's going on."
15,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,5b0b98c2a83e665d65ac3f27cbb55f986e835866,"Fix get_single_window_data() and get_time_series_data().

It appears that the method argument `enrollments_table` was misinterpreted as requiring a BigQuery results object rather than the name of the enrollments table, as a string."
16,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,3bb267480ece453130678123d6a60f36d4ff436f,"Fix BigQueryContext.run_query_and_fetch().

In some contexts, we need to provide unqualified table names. In others, it must be fully qualified."
17,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,3c87969fe4a9816c1b2e31a691986331f57b3404,"Don't enquote the fully qualified table name, and hope for the best.

bigquery.Client().list_rows() is unhappy when passed a fully qualified table name enquoted with backticks. So we'll pass it a nude one. Hopefully this doesn't break all our other queries...?"
18,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,82d3e99c17f621f6a3d3a4c13481bbe99a3cb04c,"Fix build_metrics_query().

The `metrics_joins` rely on access to a table named `enrollments`. Provide it!

Also be more honest in the docs for build_enrollments_query().

I changed the alias for segmented_enrollments from `e` to `se` to make it clearer that segment information is in there too."
19,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,6d1448525406b9eddc354c15c9e94ea55ed37317,Address review comments
20,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,484c9652b01cddf0d9ef05b3818f6862b5f2831f,Rename run_query
21,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,81378b8ec5d5e67c4126a1d4bd7faf02e87ee8c6,Document requirement for custom_enrollments_query
22,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,8e4ed2a36c1a382e2b5215ab3f1ddeeba143c5cc,"Go back to a trivial CTE

since table aliases apparently aren't respected inside join subqueries."
23,https://api.github.com/repos/mozilla/mozanalysis/pulls/120,120,Join enrollments more rigorously... and fix what was broken,"When I went to test in [a notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) the original change that fixes #117 and an equivalent bug with segments (commit 56d97bd), I found a bunch of apparently-broken functionality that led me on a merry end-of-year yak shave. Thanks @tdsmith for coming along for the ride!

In [the notebook](https://colab.research.google.com/drive/1x9wBQc7h80zpmymH-gs7seoP2Opxd-QG) I tested both `Experiment.get_time_series_data()` and `Experiment.get_single_window_data()`, and the results indicate that the bug is fixed (max 7 days of use in a week) and the methods both work and yield consistent results.

We should consider making the result _formats_ more consistent (hiding client_id and analysis window details from get_single_window_data), but that's an issue for another day.",felixlawrence,5019234,2020-12-24T00:36:04Z,CONTRIBUTOR,True,65,26,4,A library for Mozilla experiments analysis,Python,56feef4f355dd4f298d3fae047dfaea49321dc82,"Make a print statement more ambiguous

It could be printed for the enrollments table, not just the results."
24,https://api.github.com/repos/mozilla/mozanalysis/pulls/116,116,Rewrite metrics and enrollments query,"This is an exploration for fixing https://github.com/mozilla/jetstream/issues/357

I shouldn't have run black on the files I changed...

I haven't tested this yet, just wanted to check if this approach is acceptable.",scholtzan,1239705,2020-12-10T17:51:30Z,CONTRIBUTOR,True,164,94,4,A library for Mozilla experiments analysis,Python,fbd77df544eac495825e60ce0f941015b7015b5d,Use simple queries for enrollments and metrics SQL
25,https://api.github.com/repos/mozilla/mozanalysis/pulls/116,116,Rewrite metrics and enrollments query,"This is an exploration for fixing https://github.com/mozilla/jetstream/issues/357

I shouldn't have run black on the files I changed...

I haven't tested this yet, just wanted to check if this approach is acceptable.",scholtzan,1239705,2020-12-10T17:51:30Z,CONTRIBUTOR,True,164,94,4,A library for Mozilla experiments analysis,Python,f8e60fc2bd29580f970d0f1e5f42fee59a70f1d9,Fix Experiment
26,https://api.github.com/repos/mozilla/mozanalysis/pulls/116,116,Rewrite metrics and enrollments query,"This is an exploration for fixing https://github.com/mozilla/jetstream/issues/357

I shouldn't have run black on the files I changed...

I haven't tested this yet, just wanted to check if this approach is acceptable.",scholtzan,1239705,2020-12-10T17:51:30Z,CONTRIBUTOR,True,164,94,4,A library for Mozilla experiments analysis,Python,f3f64e931de38c8003f1ee6a020e29dabd9b0b81,Explicitly provide enrollments destination table
27,https://api.github.com/repos/mozilla/mozanalysis/pulls/115,115,Blacken,"Downsides:
* Big annoying diff
* Some decisions look a little silly
* A boot stamping on a human face - forever

Upsides:
* Set your editor to auto-blacken on save and never think about formatting again

It's made hacking on jetstream more pleasant; would you mind if we adopted it here?",tdsmith,173889,2020-12-08T06:03:55Z,MEMBER,True,1025,866,29,A library for Mozilla experiments analysis,Python,794ecf69a52686e3d97f28739db8e86b86a7833f,Blacken
28,https://api.github.com/repos/mozilla/mozanalysis/pulls/115,115,Blacken,"Downsides:
* Big annoying diff
* Some decisions look a little silly
* A boot stamping on a human face - forever

Upsides:
* Set your editor to auto-blacken on save and never think about formatting again

It's made hacking on jetstream more pleasant; would you mind if we adopted it here?",tdsmith,173889,2020-12-08T06:03:55Z,MEMBER,True,1025,866,29,A library for Mozilla experiments analysis,Python,855eaec3ae30818d7aa6a9ea84e0cf23aaeb05a6,isort
29,https://api.github.com/repos/mozilla/mozanalysis/pulls/115,115,Blacken,"Downsides:
* Big annoying diff
* Some decisions look a little silly
* A boot stamping on a human face - forever

Upsides:
* Set your editor to auto-blacken on save and never think about formatting again

It's made hacking on jetstream more pleasant; would you mind if we adopted it here?",tdsmith,173889,2020-12-08T06:03:55Z,MEMBER,True,1025,866,29,A library for Mozilla experiments analysis,Python,a66c6cc41731740f1ad3a9b3cf9586e0c416223b,Ignore long lines
30,https://api.github.com/repos/mozilla/mozanalysis/pulls/115,115,Blacken,"Downsides:
* Big annoying diff
* Some decisions look a little silly
* A boot stamping on a human face - forever

Upsides:
* Set your editor to auto-blacken on save and never think about formatting again

It's made hacking on jetstream more pleasant; would you mind if we adopted it here?",tdsmith,173889,2020-12-08T06:03:55Z,MEMBER,True,1025,866,29,A library for Mozilla experiments analysis,Python,35877058975b51ebf7ea1e385593e018ca3d1320,Enforce black style in tests
31,https://api.github.com/repos/mozilla/mozanalysis/pulls/114,114,Make metric datasets configurable at runtime,"Different release channels of Glean apps have their data stored in different BigQuery datasets. This departs from the legacy telemetry practice on desktop, where data from all release channels end up in a single table.
This means that, although it's reasonable to talk about a set of metrics that are valid across the different Fenix release channels, the underlying DataSources need to be customized for each release channel.
I had once expected that this would be easy to do just by defining an alternate set of DataSources and rebasing the Metrics onto the new DataSources -- but the `events` data source is a good example of why this isn't as easy as I'd like. Data sources can be complex and it would be annoying to redefine them.

Instead, allow DataSources to be templated over dataset, and have the Experiment class forward some information from the client about which dataset the metrics should be based on.",tdsmith,173889,2020-12-07T23:57:16Z,MEMBER,True,162,24,8,A library for Mozilla experiments analysis,Python,c25e9f87a2e6f51ec8ced96fc90bbc12b085558c,"Make metric datasets configurable at runtime

Different release channels of Glean apps have their data stored in different BigQuery datasets. This departs from the legacy telemetry practice on desktop, where data from all release channels end up in a single table.
This means that, although it's reasonable to talk about a set of metrics that are valid across the different Fenix release channels, the underlying DataSources need to be customized for each release channel.
I had once expected that this would be easy to do just by defining an alternate set of DataSources and rebasing the Metrics onto the new DataSources -- but the `events` data source is a good example of why this isn't as easy as I'd like. Datasets can be complex and it would be annoying to redefine them.

Instead, allow DataSources to be templated over dataset, and have the Experiment class forward some information from the client about which dataset the metrics should be based on."
32,https://api.github.com/repos/mozilla/mozanalysis/pulls/114,114,Make metric datasets configurable at runtime,"Different release channels of Glean apps have their data stored in different BigQuery datasets. This departs from the legacy telemetry practice on desktop, where data from all release channels end up in a single table.
This means that, although it's reasonable to talk about a set of metrics that are valid across the different Fenix release channels, the underlying DataSources need to be customized for each release channel.
I had once expected that this would be easy to do just by defining an alternate set of DataSources and rebasing the Metrics onto the new DataSources -- but the `events` data source is a good example of why this isn't as easy as I'd like. Data sources can be complex and it would be annoying to redefine them.

Instead, allow DataSources to be templated over dataset, and have the Experiment class forward some information from the client about which dataset the metrics should be based on.",tdsmith,173889,2020-12-07T23:57:16Z,MEMBER,True,162,24,8,A library for Mozilla experiments analysis,Python,b8bda951f7a9cc37b6858675fb0e5428b3fd003c,Use new-hotness Fenix release app_id
33,https://api.github.com/repos/mozilla/mozanalysis/pulls/114,114,Make metric datasets configurable at runtime,"Different release channels of Glean apps have their data stored in different BigQuery datasets. This departs from the legacy telemetry practice on desktop, where data from all release channels end up in a single table.
This means that, although it's reasonable to talk about a set of metrics that are valid across the different Fenix release channels, the underlying DataSources need to be customized for each release channel.
I had once expected that this would be easy to do just by defining an alternate set of DataSources and rebasing the Metrics onto the new DataSources -- but the `events` data source is a good example of why this isn't as easy as I'd like. Data sources can be complex and it would be annoying to redefine them.

Instead, allow DataSources to be templated over dataset, and have the Experiment class forward some information from the client about which dataset the metrics should be based on.",tdsmith,173889,2020-12-07T23:57:16Z,MEMBER,True,162,24,8,A library for Mozilla experiments analysis,Python,38e5ca70e1862ef3df6aea19641e53feefa64650,"Hide from_expr

from_expr might be a template, so hide it from consumers except via from_expr_for()."
34,https://api.github.com/repos/mozilla/mozanalysis/pulls/114,114,Make metric datasets configurable at runtime,"Different release channels of Glean apps have their data stored in different BigQuery datasets. This departs from the legacy telemetry practice on desktop, where data from all release channels end up in a single table.
This means that, although it's reasonable to talk about a set of metrics that are valid across the different Fenix release channels, the underlying DataSources need to be customized for each release channel.
I had once expected that this would be easy to do just by defining an alternate set of DataSources and rebasing the Metrics onto the new DataSources -- but the `events` data source is a good example of why this isn't as easy as I'd like. Data sources can be complex and it would be annoying to redefine them.

Instead, allow DataSources to be templated over dataset, and have the Experiment class forward some information from the client about which dataset the metrics should be based on.",tdsmith,173889,2020-12-07T23:57:16Z,MEMBER,True,162,24,8,A library for Mozilla experiments analysis,Python,e8236365a6e2195cdc20e3a9cc87b68723e60e94,Reasonable whitespace
35,https://api.github.com/repos/mozilla/mozanalysis/pulls/113,113,Fix ping count metrics,"Addresses the issue described in #107, where the join changes the meaning of COUNT(*).",tdsmith,173889,2020-12-07T16:56:07Z,MEMBER,True,2,2,1,A library for Mozilla experiments analysis,Python,0fbbfd5d7cbc820d70ee7217b39f57cb5218c1d5,"Fix ping count metrics

Addresses the issue described in #107, where the join changes the meaning of COUNT(*)."
36,https://api.github.com/repos/mozilla/mozanalysis/pulls/112,112,Fix query,,tdsmith,173889,2020-12-01T23:44:09Z,MEMBER,True,7,8,1,A library for Mozilla experiments analysis,Python,9d79cf4d5f565c8fbb21fdf7a5e4ad0100ac95d1,Fix query
37,https://api.github.com/repos/mozilla/mozanalysis/pulls/111,111,Revise metrics for Pocket tile clicks.,"Revise the Pocket tile clicks metrics added in an earlier PR:
https://github.com/mozilla/mozanalysis/pull/102

In particular, make two changes:
-drop the metric for whether a user clicked a Pocket tile at all in favor of only count metrics
-split ""Pocket tile clicks"" into two buckets: Pocket organic recommendation clicks and Pocket sponsored content clicks",kirill-demtchouk,13353912,2020-12-01T22:52:01Z,CONTRIBUTOR,True,14,14,1,A library for Mozilla experiments analysis,Python,f7ce2fee84c46b4c3e696809be93961c98616134,Revise metrics for Pocket tile clicks.
38,https://api.github.com/repos/mozilla/mozanalysis/pulls/110,110,Build hacks,"- Declare pyarrow and google-cloud-bigquery-storage as dependencies so people get fast .to_dataframe() without extra work
- Build on interesting Python environments: Colab is 3.6 and Jetstream uses 3.8, so test those",tdsmith,173889,2020-11-28T01:42:31Z,MEMBER,True,17,8,3,A library for Mozilla experiments analysis,Python,863256ecfe74ac1758a458ae44a0a1f400ee78e0,"Use interesting build environments

Colab is Python 3.6.9 and Jetstream uses Python 3.7. We should keep testing on 3.6."
39,https://api.github.com/repos/mozilla/mozanalysis/pulls/110,110,Build hacks,"- Declare pyarrow and google-cloud-bigquery-storage as dependencies so people get fast .to_dataframe() without extra work
- Build on interesting Python environments: Colab is 3.6 and Jetstream uses 3.8, so test those",tdsmith,173889,2020-11-28T01:42:31Z,MEMBER,True,17,8,3,A library for Mozilla experiments analysis,Python,cb66887b46220dc2dddbb010009cba7eff12f7ad,"Make sure fast fetches happen

google-cloud-bigquery will automatically instantiate and use a BigQuery storage interface if that API package and pyarrow are installed. Let's assume people want those, even though we don't ever import them directly."
40,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,8bdbc49fe96171a035082967ee893b3647684301,"Materialize enrollments table

Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner."
41,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,a95535461c175f6e4ebe9cb0cabd0fefe3ae0935,"Write destination table in the script

It's illegal to specify a destination table name (or a create/write disposition) if a query is a script, so we need to direct the output to a named table without passing those parameters into the API.

This breaks the public API for build_query by adding a new mandatory parameter. Requiring all arguments to be passed as keyword-only will make this breakage safe, i.e. it won't accidentally and silently consume one of the existing optional arguments into the destination_table argument.

Finally, we can't rely on taking a hash of the final query to use in the name of the destination table anymore, because the query contains the name of the destination table! Get around this by building the query twice: once with an empty name, which we hash, and then use to define the name for the real query."
42,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,2e3fa361cc227a61e886c1422b5d884af8cdfc22,s/destination_table/results_table/
43,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,68124e4897fd9f105b968934f629c7475e342e94,Use list_rows instead of a trivial query
44,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,9a69977d85644cbb44fb656c99305eabc49cc0ca,Replace build_query with build_query_template
45,https://api.github.com/repos/mozilla/mozanalysis/pulls/109,109,Materialize enrollments table,"Repeated references to the enrollments CTE seem to stress BigQuery out, giving rise to ""Resources exceeded during query execution: Not enough resources for query planning - too many subqueries or query is too complex."" errors.

If we use CREATE TEMPORARY TABLE to materialize the enrollments table before joining it everywhere, we get a scripting query with similar semantics and a calmer query planner.

~Caveat: I just realize this doesn't quite work yet, so leaving this as a draft for now; we can't set a destination-table name at execution time for a scripting query, so we have to replace the SELECT down there with another `CREATE TABLE {destination_table} AS` instead.~

cc @felixlawrence, @scholtzan ",tdsmith,173889,2020-11-20T23:31:02Z,MEMBER,True,83,65,3,A library for Mozilla experiments analysis,Python,05b749756870dd9b4518584fe9357b8c93024122,Remove old query method
46,https://api.github.com/repos/mozilla/mozanalysis/pulls/107,107,Fix the `days_of_use` metric.,"@SuYoungHong noticed that the results of the `days_of_use` metric introduced in PR #105 were very suspicious.

The `COUNT(*)` was counting enrollments even when they had no row in `clients_daily`. Oops.

Instead, we need to `COUNT()` a non-null column from `clients_daily`; `COUNT(ds.submission_date)` seems to be the best for communicating what this metric does? And it's not worth adding a `DISTINCT` because it's implied by `clients_daily` and the lack of other joins?

I haven't tried this code yet but I've asked Su to do so in [this notebook](https://colab.research.google.com/drive/1E-f35o3DE6FIdnmNjs7eEA413lkNjtLh).",felixlawrence,5019234,2020-11-19T19:22:30Z,CONTRIBUTOR,True,1,1,1,A library for Mozilla experiments analysis,Python,be63852c96d74c35298abd52246b6ae3bbd6e731,"Fix the `days_of_use` metric.

@SuYoungHong noticed that the results of the `days_of_use` metric introduced in PR #105 were very suspicious.

The `COUNT(*)` was counting enrollments even when they had no row in `clients_daily`. Oops.

Instead, we need to `COUNT()` a non-null column from `clients_daily`; `COUNT(ds.submission_date)` seems to be the best for communicating what this metric does? And it's not worth adding a `DISTINCT` because it's implied by `clients_daily` and the lack of other joins?

I haven't tried this code yet but I've asked Su to do so in [this notebook](https://colab.research.google.com/drive/1E-f35o3DE6FIdnmNjs7eEA413lkNjtLh)."
47,https://api.github.com/repos/mozilla/mozanalysis/pulls/106,106,Add a lower-is-better flag,"Dashboards shouldn't look excited when we get more of a bad thing, or when performance timings increase.

Sometimes this will depend on the context of the experiment; if the wrong assertion is made here, folks can make a copy of the metric with the bit flipped.

cf https://github.com/mozilla/jetstream/issues/252",tdsmith,173889,2020-11-18T00:49:03Z,MEMBER,True,3,0,3,A library for Mozilla experiments analysis,Python,eb20daf9b14e832d1e936fd72264ed8cb369081c,"Add a lower-is-better flag

Dashboards shouldn't look excited when we get more of a bad thing, or when performance timings increase.

Sometimes this will depend on the context of the experiment; if the wrong assertion is made here, folks can make a copy of the metric with the bit flipped."
48,https://api.github.com/repos/mozilla/mozanalysis/pulls/106,106,Add a lower-is-better flag,"Dashboards shouldn't look excited when we get more of a bad thing, or when performance timings increase.

Sometimes this will depend on the context of the experiment; if the wrong assertion is made here, folks can make a copy of the metric with the bit flipped.

cf https://github.com/mozilla/jetstream/issues/252",tdsmith,173889,2020-11-18T00:49:03Z,MEMBER,True,3,0,3,A library for Mozilla experiments analysis,Python,ec5d808deae46cc92c73f4c0adad718c38a6e086,"let me work it, flip it and reverse it"
49,https://api.github.com/repos/mozilla/mozanalysis/pulls/105,105,Add a days of use metric for desktop,,tdsmith,173889,2020-11-18T00:25:58Z,MEMBER,True,10,0,1,A library for Mozilla experiments analysis,Python,c7d75036187630c7103d40c218a96fad670fd50b,Add a days of use metric for desktop
50,https://api.github.com/repos/mozilla/mozanalysis/pulls/105,105,Add a days of use metric for desktop,,tdsmith,173889,2020-11-18T00:25:58Z,MEMBER,True,10,0,1,A library for Mozilla experiments analysis,Python,20844a8a296b5fc338ff80e639d735d4288eb0e9,duh
51,https://api.github.com/repos/mozilla/mozanalysis/pulls/104,104,Add a new-profile segment,Use clients_first_seen to identify profiles that enroll on their first date of use.,tdsmith,173889,2020-11-12T17:46:15Z,MEMBER,True,11,1,1,A library for Mozilla experiments analysis,Python,9a450ddfa549518f6797517795aa04425d6230bf,"Add a new-profile segment

Use clients_first_seen to identify profiles that enroll on their first date of use."
52,https://api.github.com/repos/mozilla/mozanalysis/pulls/104,104,Add a new-profile segment,Use clients_first_seen to identify profiles that enroll on their first date of use.,tdsmith,173889,2020-11-12T17:46:15Z,MEMBER,True,11,1,1,A library for Mozilla experiments analysis,Python,e0dcef241fd2b4d18397de2ee704d1f5029e76ed,Use clients_last_seen backfill
53,https://api.github.com/repos/mozilla/mozanalysis/pulls/104,104,Add a new-profile segment,Use clients_first_seen to identify profiles that enroll on their first date of use.,tdsmith,173889,2020-11-12T17:46:15Z,MEMBER,True,11,1,1,A library for Mozilla experiments analysis,Python,9333a47f377f976ae46ad2ecc2e9ed4c9d21753a,Count nulls as members
54,https://api.github.com/repos/mozilla/mozanalysis/pulls/103,103,Add/fix internal doc links to TimeSeriesResult.,,felixlawrence,5019234,2020-11-04T21:10:20Z,CONTRIBUTOR,True,3,2,2,A library for Mozilla experiments analysis,Python,ba2df53c2ac4d3d246869ab5e85e96f08b130c43,Add/fix internal doc links to TimeSeriesResult.
55,https://api.github.com/repos/mozilla/mozanalysis/pulls/102,102,Add metrics for pocket tile clicks,@kirill-demtchouk has applied these to an experiment; I wrote them but haven't personally vetted them.,felixlawrence,5019234,2020-10-20T22:21:19Z,CONTRIBUTOR,True,42,0,1,A library for Mozilla experiments analysis,Python,a33f78418f382dbc3a511e442a58bc028c1e34f6,Add metrics for pocket tile clicks
56,https://api.github.com/repos/mozilla/mozanalysis/pulls/101,101,Emit Sphinx docs for desktop metrics,"It turns out Sphinx refuses to emit anything for undocumented module constants. But we can add trivial documentation.

If anyone gets bored enough, I think the proper thing to do here is to write a Sphinx extension that hooks the autodoc [process-docstring](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#docstring-preprocessing) event and replaces ""..."" with the `description` field, though I'm not sure how to reason about the description containing Markdown and the Sphinx docs being more or less in RST -- eh!",tdsmith,173889,2020-10-06T23:42:58Z,MEMBER,True,30,4,2,A library for Mozilla experiments analysis,Python,fcd7a3b9e3e09c69e43406c133bd38044027b051,Emit Sphinx docs for desktop metrics
57,https://api.github.com/repos/mozilla/mozanalysis/pulls/101,101,Emit Sphinx docs for desktop metrics,"It turns out Sphinx refuses to emit anything for undocumented module constants. But we can add trivial documentation.

If anyone gets bored enough, I think the proper thing to do here is to write a Sphinx extension that hooks the autodoc [process-docstring](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#docstring-preprocessing) event and replaces ""..."" with the `description` field, though I'm not sure how to reason about the description containing Markdown and the Sphinx docs being more or less in RST -- eh!",tdsmith,173889,2020-10-06T23:42:58Z,MEMBER,True,30,4,2,A library for Mozilla experiments analysis,Python,23667701e2aa30af637bc99ae8ae4fc5f7087371,Pass linting
58,https://api.github.com/repos/mozilla/mozanalysis/pulls/100,100,Add friendly names and descriptions for segments,"Is there a good place to link people for more context on the segments? I was working from DTMO, which seemed kinda sparse.",tdsmith,173889,2020-09-24T17:30:44Z,MEMBER,True,65,23,5,A library for Mozilla experiments analysis,Python,f367bc635f2a1e6ffd136a78514cc5e61740717d,Add friendly names and descriptions for segments
59,https://api.github.com/repos/mozilla/mozanalysis/pulls/99,99,Add friendly names and docs to metrics definitions,"Follow up to https://github.com/mozilla/jetstream/issues/109.

@emtwo, this will be part of our solution for exposing documentation about metrics to the dashboarding layer eventually; is Markdown an okay format for the extended documentation strings?",tdsmith,173889,2020-09-23T22:01:27Z,MEMBER,True,150,38,4,A library for Mozilla experiments analysis,Python,c600637033d011e55f8f9779300f312a9e3a38e5,Add friendly names to metrics
60,https://api.github.com/repos/mozilla/mozanalysis/pulls/99,99,Add friendly names and docs to metrics definitions,"Follow up to https://github.com/mozilla/jetstream/issues/109.

@emtwo, this will be part of our solution for exposing documentation about metrics to the dashboarding layer eventually; is Markdown an okay format for the extended documentation strings?",tdsmith,173889,2020-09-23T22:01:27Z,MEMBER,True,150,38,4,A library for Mozilla experiments analysis,Python,f73bc085d51b2fcc9f11b363f2d476458630d98f,Enforce friendly names on included metrics
61,https://api.github.com/repos/mozilla/mozanalysis/pulls/99,99,Add friendly names and docs to metrics definitions,"Follow up to https://github.com/mozilla/jetstream/issues/109.

@emtwo, this will be part of our solution for exposing documentation about metrics to the dashboarding layer eventually; is Markdown an okay format for the extended documentation strings?",tdsmith,173889,2020-09-23T22:01:27Z,MEMBER,True,150,38,4,A library for Mozilla experiments analysis,Python,bed6cce358f75a16417fae36390f5c764dca920c,Document included metrics
62,https://api.github.com/repos/mozilla/mozanalysis/pulls/99,99,Add friendly names and docs to metrics definitions,"Follow up to https://github.com/mozilla/jetstream/issues/109.

@emtwo, this will be part of our solution for exposing documentation about metrics to the dashboarding layer eventually; is Markdown an okay format for the extended documentation strings?",tdsmith,173889,2020-09-23T22:01:27Z,MEMBER,True,150,38,4,A library for Mozilla experiments analysis,Python,3c7e10891ea66531906d5a72d0f4e90bd50b4f95,"Default to None, not """""
63,https://api.github.com/repos/mozilla/mozanalysis/pulls/97,97,Declare a dtype at Series creation,,tdsmith,173889,2020-09-02T04:24:59Z,MEMBER,True,1,1,1,A library for Mozilla experiments analysis,Python,fc104f9f1f7e23796f6e11b26298be428c73b3b7,Declare a dtype at Series creation
64,https://api.github.com/repos/mozilla/mozanalysis/pulls/96,96,Include documentation for the BQ module,,felixlawrence,5019234,2020-08-27T19:18:13Z,CONTRIBUTOR,True,9,2,2,A library for Mozilla experiments analysis,Python,e6e5d39217c77f858942c9dffe452813f4b2dc10,Include documentation for the BQ module
65,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,a0e6d87d2eaaff40a2a3bac1f26336fb7f45106d,"Add support for Fenix.

Based on the pyspark work by @godelstheory for PR53."
66,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,9dc8a1678520a84145026b80ed236b833334cb33,Fix missing parentheses
67,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,5a37eab395ffcac5971f12aaa3af6a24689b711d,Fix missing comma
68,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,2bb671002571689c117f8b137f405f9c4ee6d2d3,Fix incorrect DATE_SUB
69,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,a0a87c3c585bbef2bb2590c4c314d3ee9b64039b,Use some preparations previously made
70,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,53e5570959302fab46ebbc25a6849a51107e0fc5,It's becoming clear to you that github is now inside my REPL
71,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,19d9156a8228e8a419833a68ebc9627159b03625,I'm gonna squash these messages later anyway
72,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,a175342b5c56331f137af9a8e5dc2ca798c589b1,Tracking down rogue client_ids...
73,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,4341b140f6ae60af5f8c72ebaca954ec2785fdd3,"Oops, it's client_info. Also indent more prettily"
74,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,13e1580bf9234f47a2dabc6ba7ec770d11e6faf4,Fix a column name (first of many?)
75,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,702fdc5839ef434cc181be872bb9813bfa1ab593,Fix a column name and add get_key()
76,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,10ef5ea3ffc77c2587b602c17c4394a79fd086c5,Quote the key
77,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,a24e9330c47057971bcaa2113598d86cfaa0ebd3,That's not the type safety I wanted
78,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,7cd77959bbf4dd30aa383ac2bd30cf4a219eeb0c,client_info again
79,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,f5e0de808bdf6c8add7d809347e2b0b25e02f303,"client_info AGAIN, but different this time"
80,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,26a2c68a00affb3cf6cc93fca6eb4342f8123da7,Merge branch 'master' into add-fenix-metrics
81,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,6ade61455df41fb4078d153fc4006a51e35146b9,Use mozfun
82,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,f88342760379139b72abf555d8465e875de7e51d,"Re-add agg_gistogram_mean

I don't know why `agg_histogram_mean` was deleted in this branch, but it doesn't make sense to me today. If we want to nuke this function then let's do so with a separate branch and separate PR?"
83,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,6985447cccbfd17707c7d6ea90cd105f85d3fd85,Fix missing function after merge
84,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,7d2040c6bbddc58a68fc810954b2dcc62be5d176,Fix missing function after merge
85,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,2a2c5e9eefafd92832df33c889baad710c84462f,"Make `experiments_column_type` more general.

The `experiments_column_type` for Fenix, specified per-`DataSource`, is not unique to Fenix: it's generic for Glean (it seems). So let's keep the switch statement as general as possible.

At this point, the automated tests now pass."
86,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,034744478eaa20166ede559894e1f704214bd772,"More like ""TODON'T"""
87,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,914bab1a3280281dee7b187f554d81937997bce3,"Address only the suggestions @tdsmith didn't care about.

(because the other one requires further discussion)"
88,https://api.github.com/repos/mozilla/mozanalysis/pulls/95,95,Add support for Fenix experiments,"Adapts @godelstheory 's work from #53 to the BQ-based mozanalysis. @mmccorks used this branch in [an analysis](https://colab.research.google.com/drive/1Hj5LBX0Kk04aYumgG4Ec2ciUa4uZ7d98), and once this PR is merged she'll follow up with a PR containing the new metrics she wrote.",felixlawrence,5019234,2020-08-20T17:10:27Z,CONTRIBUTOR,True,194,14,5,A library for Mozilla experiments analysis,Python,3906c41f3a6c983231ec84058e1b238133cb101a,"Prepare for a brighter Fenix future

(i.e. one where we do have enrollment events for some experiments).

Update docs and add a test."
89,https://api.github.com/repos/mozilla/mozanalysis/pulls/92,92,Declare experiments_column_type for normandy_events,,tdsmith,173889,2020-06-19T03:44:16Z,MEMBER,True,1,0,1,A library for Mozilla experiments analysis,Python,f7a145c0abaf80d5b8632868c740e542c46132c4,Declare experiments_column_type for normandy_events
90,https://api.github.com/repos/mozilla/mozanalysis/pulls/91,91,normandy_events datasource for unenroll metric,"In pensieve, calculating the unenroll metric on a daily basis is quite expensive since currently `telemetry.events` is queried directly without any filtering. If we make use of  the `event_category` partitioning running the query only costs us a fraction.

I'm not sure if unenroll results are still correct with these changes though...",scholtzan,1239705,2020-06-18T20:40:33Z,CONTRIBUTOR,True,14,1,1,A library for Mozilla experiments analysis,Python,6cc8406c5c9496a5a010db452b54c3ea184ec8cb,normandy_events datasource for unenroll metric
91,https://api.github.com/repos/mozilla/mozanalysis/pulls/91,91,normandy_events datasource for unenroll metric,"In pensieve, calculating the unenroll metric on a daily basis is quite expensive since currently `telemetry.events` is queried directly without any filtering. If we make use of  the `event_category` partitioning running the query only costs us a fraction.

I'm not sure if unenroll results are still correct with these changes though...",scholtzan,1239705,2020-06-18T20:40:33Z,CONTRIBUTOR,True,14,1,1,A library for Mozilla experiments analysis,Python,33f95e54faa30340e186cbbf0cb87c45abe7585c,Add comment to normandy_events datasource
92,https://api.github.com/repos/mozilla/mozanalysis/pulls/90,90,num_dates_enrollment must be positive,So give a nicer error message. Fixes #74.,tdsmith,173889,2020-06-16T00:54:09Z,MEMBER,True,3,0,1,A library for Mozilla experiments analysis,Python,cdbd5a6776fbaf7c7c0f74488779c4f5f3dab38f,"num_dates_enrollment must be positive

So give a nicer error message. Fixes #74."
93,https://api.github.com/repos/mozilla/mozanalysis/pulls/89,89,Use mozfun UDFs,"Closes https://github.com/mozilla/mozanalysis/issues/88

There is also `udf.json_extract_histogram` in use, but it'll need to be added to `mozfun` first. ",scholtzan,1239705,2020-06-15T19:10:15Z,CONTRIBUTOR,True,7,7,2,A library for Mozilla experiments analysis,Python,5ad436b8c1eb2c247e8f89093ce1153da84f4687,Use mozfun UDFs
94,https://api.github.com/repos/mozilla/mozanalysis/pulls/87,87,Add and update segments,"Add new segments:
* `weekday_regular_v1`
* `allweek_regular_v1`

Update `regular_users_v3` and `new_or_resurrected_v3` to use the ETL segment definitions, now that they exist.

[Here is a notebook](https://colab.research.google.com/drive/1QTfvgdrseFTC-E4iKnUUNd2tvGsazoB5) that applies the code added/edited here to produce sensible-seeming numbers.",felixlawrence,5019234,2020-06-09T20:36:26Z,CONTRIBUTOR,True,16,6,1,A library for Mozilla experiments analysis,Python,48f5eed593eaa88ab3ee1a919d029b12057a5f2e,"Regular users v3 is in the ETL now; use it.

Now that regular users v3 and new or resurrected v3 are in bigquery-etl, we don't need to roll our own. We just need to handle the case where there's an absent row in `clients_last_seen`, because the enrollment event arrived before the user's first main ping."
95,https://api.github.com/repos/mozilla/mozanalysis/pulls/87,87,Add and update segments,"Add new segments:
* `weekday_regular_v1`
* `allweek_regular_v1`

Update `regular_users_v3` and `new_or_resurrected_v3` to use the ETL segment definitions, now that they exist.

[Here is a notebook](https://colab.research.google.com/drive/1QTfvgdrseFTC-E4iKnUUNd2tvGsazoB5) that applies the code added/edited here to produce sensible-seeming numbers.",felixlawrence,5019234,2020-06-09T20:36:26Z,CONTRIBUTOR,True,16,6,1,A library for Mozilla experiments analysis,Python,e08a2ddec43f9d5e61c997297c130844490d8e00,Add the new weekday_regular_v1 segment.
96,https://api.github.com/repos/mozilla/mozanalysis/pulls/87,87,Add and update segments,"Add new segments:
* `weekday_regular_v1`
* `allweek_regular_v1`

Update `regular_users_v3` and `new_or_resurrected_v3` to use the ETL segment definitions, now that they exist.

[Here is a notebook](https://colab.research.google.com/drive/1QTfvgdrseFTC-E4iKnUUNd2tvGsazoB5) that applies the code added/edited here to produce sensible-seeming numbers.",felixlawrence,5019234,2020-06-09T20:36:26Z,CONTRIBUTOR,True,16,6,1,A library for Mozilla experiments analysis,Python,29470223db0b015c86dfd159526695543d660160,Import from the original source
97,https://api.github.com/repos/mozilla/mozanalysis/pulls/86,86,Fix typo in docs,,felixlawrence,5019234,2020-06-09T16:15:20Z,CONTRIBUTOR,True,1,1,1,A library for Mozilla experiments analysis,Python,423f4f83893d614cfb7eaa2c6718871e7aeafe67,Fix typo in docs
98,https://api.github.com/repos/mozilla/mozanalysis/pulls/85,85,Respond to linter changes,Render the codebase flake8 3.8.1 compatible.,tdsmith,173889,2020-05-12T13:04:03Z,MEMBER,True,14,2,2,A library for Mozilla experiments analysis,Python,cdb273086d28aad8a0fcef2d9eef8049445779b7,Ignore ambiguous variable names
99,https://api.github.com/repos/mozilla/mozanalysis/pulls/85,85,Respond to linter changes,Render the codebase flake8 3.8.1 compatible.,tdsmith,173889,2020-05-12T13:04:03Z,MEMBER,True,14,2,2,A library for Mozilla experiments analysis,Python,0cee87198996f02d8b2e7b1de917fc313744d095,Remove old f-string modifiers
100,https://api.github.com/repos/mozilla/mozanalysis/pulls/85,85,Respond to linter changes,Render the codebase flake8 3.8.1 compatible.,tdsmith,173889,2020-05-12T13:04:03Z,MEMBER,True,14,2,2,A library for Mozilla experiments analysis,Python,2fbbee6ffbc9d23ea2405ba333653abfdf0ce2ce,Include the default ignores
101,https://api.github.com/repos/mozilla/mozanalysis/pulls/85,85,Respond to linter changes,Render the codebase flake8 3.8.1 compatible.,tdsmith,173889,2020-05-12T13:04:03Z,MEMBER,True,14,2,2,A library for Mozilla experiments analysis,Python,4dac640cc4eb1387c39648bad5ec295c059188a6,Put the quotes back
102,https://api.github.com/repos/mozilla/mozanalysis/pulls/84,84,Initialize Series with explicit dtype,Silences a DeprecationWarning that the default dtype will change.,tdsmith,173889,2020-05-12T12:55:47Z,MEMBER,True,2,2,1,A library for Mozilla experiments analysis,Python,4579cff3593cf06edbf657a720c8bcdc6acea410,"Initialize Series with explicit dtype

Silences a DeprecationWarning that the default dtype will change."
103,https://api.github.com/repos/mozilla/mozanalysis/pulls/84,84,Initialize Series with explicit dtype,Silences a DeprecationWarning that the default dtype will change.,tdsmith,173889,2020-05-12T12:55:47Z,MEMBER,True,2,2,1,A library for Mozilla experiments analysis,Python,479e7502a50081f5423b6aa9c8f421daa2776c36,Undo the formatting changes
104,https://api.github.com/repos/mozilla/mozanalysis/pulls/83,83,Update usage regularity segments to v3.,"Docs for these segments are [on DTMO](https://docs.telemetry.mozilla.org/concepts/segments.html#regular-users-v3).

Here's a [colab notebook](https://colab.research.google.com/drive/1C1y3DbZ4vN1-gIh5JrIcQL8c8kZv8WoK) that demonstrates that this generates valid SQL that executes against our DB!",felixlawrence,5019234,2020-05-07T21:37:03Z,CONTRIBUTOR,True,10,56,2,A library for Mozilla experiments analysis,Python,c47dc0c420d453a4dd9739e516237e28cb8c366c,"Update usage regularity segments to v3.

Docs for these segments are [on DTMO](https://docs.telemetry.mozilla.org/concepts/segments.html#regular-users-v3)."
105,https://api.github.com/repos/mozilla/mozanalysis/pulls/83,83,Update usage regularity segments to v3.,"Docs for these segments are [on DTMO](https://docs.telemetry.mozilla.org/concepts/segments.html#regular-users-v3).

Here's a [colab notebook](https://colab.research.google.com/drive/1C1y3DbZ4vN1-gIh5JrIcQL8c8kZv8WoK) that demonstrates that this generates valid SQL that executes against our DB!",felixlawrence,5019234,2020-05-07T21:37:03Z,CONTRIBUTOR,True,10,56,2,A library for Mozilla experiments analysis,Python,4fc572254f4d8239546d08e8cddbaafe06ca69e1,"Oops, these segments haven't used lag since v1"
106,https://api.github.com/repos/mozilla/mozanalysis/pulls/82,82,Hyphenate spark-style date in cookbook.,,felixlawrence,5019234,2020-05-06T16:28:47Z,CONTRIBUTOR,True,1,1,1,A library for Mozilla experiments analysis,Python,f89468d140b19b8bf92521ac91b9bea96882a4ca,Hyphenate spark-style date in cookbook.
107,https://api.github.com/repos/mozilla/mozanalysis/pulls/81,81,add cfr DataSource,"Adds a datasource pointing to the `messaging_system.cfr` which contains the CFR metrics events.

A couple notes: the `experiments` column on this table was recently fixed, I believe it is of type `simple` (the default for the DataSource class).

I am not adding metrics here, because there are additional variable(s) `bucket_id` and `message_id` that are required to filter down to the CFR campaign of interest (in a CFR experiment, an enrolled user may see multiple CFR campaigns, so its not possible to just pull all rows from the CFR table matching an enrolled client_id).

For example, for a recent experiment my metric definition looked like this:
```python
cfr_impression = Metric(
    name='cfr_impression',
    data_source=cfr,
    select_expr=agg_any(""""""event = 'IMPRESSION' 
    AND bucket_id = {}
    AND message_id = {}"""""".format(CFR_BUCKET_ID, CFR_MESSAGE_ID))
)
```

bucket_id and message_id will vary with experiment, making it difficult to codify them in the Metrics definition file. 

We could consider extending the `Metric` class to a `CfrMetric` class that takes bucket_id and message_id as additional properties, but IMO for now that would add a bunch more boilerplate without too much of a gain in convenience. I will be adding a template notebook for CFR analysis to dscontrib so people can copypasta example metrics from there, if they want. 
",irrationalagent,5625313,2020-05-04T15:51:32Z,CONTRIBUTOR,True,11,0,1,A library for Mozilla experiments analysis,Python,2350817d53a581681bdf30dcb0fb985e2104ade4,add cfr DataSource
108,https://api.github.com/repos/mozilla/mozanalysis/pulls/81,81,add cfr DataSource,"Adds a datasource pointing to the `messaging_system.cfr` which contains the CFR metrics events.

A couple notes: the `experiments` column on this table was recently fixed, I believe it is of type `simple` (the default for the DataSource class).

I am not adding metrics here, because there are additional variable(s) `bucket_id` and `message_id` that are required to filter down to the CFR campaign of interest (in a CFR experiment, an enrolled user may see multiple CFR campaigns, so its not possible to just pull all rows from the CFR table matching an enrolled client_id).

For example, for a recent experiment my metric definition looked like this:
```python
cfr_impression = Metric(
    name='cfr_impression',
    data_source=cfr,
    select_expr=agg_any(""""""event = 'IMPRESSION' 
    AND bucket_id = {}
    AND message_id = {}"""""".format(CFR_BUCKET_ID, CFR_MESSAGE_ID))
)
```

bucket_id and message_id will vary with experiment, making it difficult to codify them in the Metrics definition file. 

We could consider extending the `Metric` class to a `CfrMetric` class that takes bucket_id and message_id as additional properties, but IMO for now that would add a bunch more boilerplate without too much of a gain in convenience. I will be adding a template notebook for CFR analysis to dscontrib so people can copypasta example metrics from there, if they want. 
",irrationalagent,5625313,2020-05-04T15:51:32Z,CONTRIBUTOR,True,11,0,1,A library for Mozilla experiments analysis,Python,6a66ad5280683dd09165fb89ef1cee88f5d5d034,fix trailing whitespace
109,https://api.github.com/repos/mozilla/mozanalysis/pulls/81,81,add cfr DataSource,"Adds a datasource pointing to the `messaging_system.cfr` which contains the CFR metrics events.

A couple notes: the `experiments` column on this table was recently fixed, I believe it is of type `simple` (the default for the DataSource class).

I am not adding metrics here, because there are additional variable(s) `bucket_id` and `message_id` that are required to filter down to the CFR campaign of interest (in a CFR experiment, an enrolled user may see multiple CFR campaigns, so its not possible to just pull all rows from the CFR table matching an enrolled client_id).

For example, for a recent experiment my metric definition looked like this:
```python
cfr_impression = Metric(
    name='cfr_impression',
    data_source=cfr,
    select_expr=agg_any(""""""event = 'IMPRESSION' 
    AND bucket_id = {}
    AND message_id = {}"""""".format(CFR_BUCKET_ID, CFR_MESSAGE_ID))
)
```

bucket_id and message_id will vary with experiment, making it difficult to codify them in the Metrics definition file. 

We could consider extending the `Metric` class to a `CfrMetric` class that takes bucket_id and message_id as additional properties, but IMO for now that would add a bunch more boilerplate without too much of a gain in convenience. I will be adding a template notebook for CFR analysis to dscontrib so people can copypasta example metrics from there, if they want. 
",irrationalagent,5625313,2020-05-04T15:51:32Z,CONTRIBUTOR,True,11,0,1,A library for Mozilla experiments analysis,Python,4b03c7a6223742101f797cc36a8edc4e4e79e377,fix experiments column type
110,https://api.github.com/repos/mozilla/mozanalysis/pulls/81,81,add cfr DataSource,"Adds a datasource pointing to the `messaging_system.cfr` which contains the CFR metrics events.

A couple notes: the `experiments` column on this table was recently fixed, I believe it is of type `simple` (the default for the DataSource class).

I am not adding metrics here, because there are additional variable(s) `bucket_id` and `message_id` that are required to filter down to the CFR campaign of interest (in a CFR experiment, an enrolled user may see multiple CFR campaigns, so its not possible to just pull all rows from the CFR table matching an enrolled client_id).

For example, for a recent experiment my metric definition looked like this:
```python
cfr_impression = Metric(
    name='cfr_impression',
    data_source=cfr,
    select_expr=agg_any(""""""event = 'IMPRESSION' 
    AND bucket_id = {}
    AND message_id = {}"""""".format(CFR_BUCKET_ID, CFR_MESSAGE_ID))
)
```

bucket_id and message_id will vary with experiment, making it difficult to codify them in the Metrics definition file. 

We could consider extending the `Metric` class to a `CfrMetric` class that takes bucket_id and message_id as additional properties, but IMO for now that would add a bunch more boilerplate without too much of a gain in convenience. I will be adding a template notebook for CFR analysis to dscontrib so people can copypasta example metrics from there, if they want. 
",irrationalagent,5625313,2020-05-04T15:51:32Z,CONTRIBUTOR,True,11,0,1,A library for Mozilla experiments analysis,Python,c7cedde5cf30d11ed32be7bc4b2844bbc1c44070,indentation
111,https://api.github.com/repos/mozilla/mozanalysis/pulls/80,80,Docs: Fix mangled rst; link to where to find the current version.,,felixlawrence,5019234,2020-04-17T18:12:23Z,CONTRIBUTOR,True,2,2,1,A library for Mozilla experiments analysis,Python,766340297d29da5dc5507cdd4ea93c4135a6bcd3,Fix mangled rst; link to where to find the current version.
112,https://api.github.com/repos/mozilla/mozanalysis/pulls/79,79,COALESCE segments to remove NULL values,"Because `clients_last_seen` is constructed from the `main` ping, and our enrollments are obtained from the `events` ping,there are enrollments without a `clients_last_seen` row that matches the submission date.

This only happens for users without any (main ping) activity in the past 28 days. Therefore these users belong in `new_irregular_users_v2`.

This problem will persist even once the segments are in the ETL.

There are terser solutions (e.g. `MAX(...=...) IS TRUE` for two segments to map `NULL` to `FALSE`), but I figured that this verbose form was the most readily understandable.",felixlawrence,5019234,2020-04-03T23:01:45Z,CONTRIBUTOR,True,24,6,1,A library for Mozilla experiments analysis,Python,8ba6d6c249bb856caa20c42859fe7639a4809688,"COALESCE segments to remove NULL values

Because `clients_last_seen` is constructed from the `main` ping, and our enrollments are obtained from the `events` ping,there are enrollments without a `clients_last_seen` row that matches the submission date.

This only happens for users without any (main ping) activity in the past 28 days. Therefore these users belong in `new_irregular_users_v2`.

This problem will persist even once the segments are in the ETL.

There are terser solutions (e.g. `MAX(...=...) IS TRUE` for two segments to map `NULL` to `FALSE`), but I figured that this verbose form was the most readily understandable."
113,https://api.github.com/repos/mozilla/mozanalysis/pulls/78,78,Add missing search metrics,"Added the following fields to the desktop metrics file:

* `tagged_sap`
* `tagged_follow_on`
* `search_with_ads`",benmiroglio,8593945,2020-04-02T20:25:29Z,CONTRIBUTOR,True,18,0,1,A library for Mozilla experiments analysis,Python,d0d775bf9c003325ef18432707d06237e7c9c54e,Add missing search metrics
114,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,f3c1babad53763a2d057b86e6407f68cacae23a3,Refactor code so we can reuse it for segments
115,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,6e66b96c3dca5904430d1f8e8e217560fbc62e07,"Add `Experiment._build_segments_query()` and `_build_segments_query_bits()

This code is largely copypasta from `_build_metrics_query_bits()`.

The main difference is that this builds up a largely-self-contained query (it needs `raw_enrollments` to be defined), and this query will (in a later commit) be dropped into the master query in `Experiment.build_query()` between `raw_enrollments` and `enrollments`.

The strategy is the same: `SegmentDataSource.build_query()` (coming soon!) returns a SQL query that adds one column per segment from the data source while leaving the other columns untouched and not changing the number of rows. Then in `_build_segments_query()` we combine the new columns from each data source by LEFT JOINing repeatedly and SELECTing the new columns."
116,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,887d97549838ed0c0515d72d7c51a135b5c5144a,"Add segment modules, tests, and docs.

Again we borrow ideas and code from the metrics library, making enough changes/simplifications that copypasta is better than DRY here.

`SegmentDataSource.build_query()` is the method that builds the segment queries that plug into `Experiment._build_segment_query()` as `LEFT JOIN`s.

Also adds three segments and their data source. These segments are documented in [this pull request to DTMO](https://github.com/mozilla/firefox-data-docs/pull/428). There is also a [related PR for bigquery-etl](https://github.com/mozilla/bigquery-etl/pull/825/); once that is merged it will be easier to query these segments: we would be able to replace the `select_expr` with the currently-commented-out versions, and replace the data source with a non-lagging window."
117,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,414c15d11ae4dddbe237ce2b36906041034f02b1,"Hook up segments functionality and expose it.

Let users specify a list of segments, and use the segments query in `Experiment.build_query()`."
118,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,a20fd57efb265b0b01baa3399a1021f2a11ebf30,Trailing commas in SELECT are no longer considered malformed \o/
119,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,40f0bffd7fb4acfc4caf5cee2322a12e4a0ec973,"Correct the `SegmentDataSource.build_query()` docstring.

And augment the `Experiment._build_segments_query()` docstring."
120,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,a75b824d0d1a6441f98a87862440b12c6b763c16,Put `segment_list` as the final argument to avoid a breaking API change
121,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,830cc525724d9011d8bfc15c57d634d09344577b,Move `sql_lint()` into a helpers module to avoid duplication
122,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,ab6f34131937882818b6dd7c69bc3a03bd299103,"Update segments to latest proposed definitions

Hopefully bigquery-etl will be updated before we need to merge this, so we'll be able to remove `tmp_segment_regular_users_v1` before merging."
123,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,f8db20d9ff27730512b6e09635aace5760f23ee0,I miss fixtures and real tests :(
124,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,8227e54a5ad524e658c9b10b3de225268c5f955f,Update usage regluarity segment to latest definition (v2)
125,https://api.github.com/repos/mozilla/mozanalysis/pulls/76,76,Add segments functionality,Fixes #75.,felixlawrence,5019234,2020-03-23T23:00:08Z,CONTRIBUTOR,True,372,59,11,A library for Mozilla experiments analysis,Python,069b913557e70136d215c9b60fd75bb146064fb8,Update test for new variable name
126,https://api.github.com/repos/mozilla/mozanalysis/pulls/70,70,Fix an error message,Fix the date referenced in the TimeLimits single_analysis_window constructor if we aren't collecting data long enough.,tdsmith,173889,2020-03-07T00:29:33Z,MEMBER,True,29,20,2,A library for Mozilla experiments analysis,Python,5f5546b4548ff0c48168ef2d5c8eec15491f6c95,Add test for failing case
127,https://api.github.com/repos/mozilla/mozanalysis/pulls/70,70,Fix an error message,Fix the date referenced in the TimeLimits single_analysis_window constructor if we aren't collecting data long enough.,tdsmith,173889,2020-03-07T00:29:33Z,MEMBER,True,29,20,2,A library for Mozilla experiments analysis,Python,20d7e9ef057b3d8fe53f497eabd10166907f476a,"Include the right date in the error message

Avoid a little bit of repetition and branching by doing a check even if we know it can't fail."
128,https://api.github.com/repos/mozilla/mozanalysis/pulls/70,70,Fix an error message,Fix the date referenced in the TimeLimits single_analysis_window constructor if we aren't collecting data long enough.,tdsmith,173889,2020-03-07T00:29:33Z,MEMBER,True,29,20,2,A library for Mozilla experiments analysis,Python,c19431687108cff1b59a3fc3797991ea4a7fa45f,Use new date format in docstrings
129,https://api.github.com/repos/mozilla/mozanalysis/pulls/67,67,Allow Metrics to be rebased on other DataSources,"Sometimes you have tables with identical schemas and need to prefer one or the other in different contexts. These could be using `telemetry_live` tables, or using a Fenix Nightly table vs a Fenix release table. This helper facilitates that.",tdsmith,173889,2020-02-28T18:57:14Z,MEMBER,True,8,0,1,A library for Mozilla experiments analysis,Python,3ddecff7f3fbad12b3c18f0bec4fc013dcbb164c,"Allow Metrics to be rebased on other DataSources

Sometimes you have tables with identical schemas and need to prefer one or the other in different contexts. These could be using `telemetry_live` tables, or using a Fenix Nightly table vs a Fenix release table. This helper facilitates that."
130,https://api.github.com/repos/mozilla/mozanalysis/pulls/66,66,Promote build_query to public API,"Rationale: pensieve wants to be opinionated about how it runs queries (e.g. specifying destination table names, maybe not materializing results immediately) in ways that we don't need to expose to interactive users. `get_time_series_data` and `get_single_window_data` are thin wrappers around this function; instantiating a TimeLimits object is something that pensieve can do. Generating this query is how mozanalysis adds value, so let's expose the query directly.

Moots #60.",tdsmith,173889,2020-02-28T18:48:11Z,MEMBER,True,33,12,2,A library for Mozilla experiments analysis,Python,8f19607c7f21db8605a32b7d2d1766747f1625cf,"Promote build_query to public API

Moots #60."
131,https://api.github.com/repos/mozilla/mozanalysis/pulls/66,66,Promote build_query to public API,"Rationale: pensieve wants to be opinionated about how it runs queries (e.g. specifying destination table names, maybe not materializing results immediately) in ways that we don't need to expose to interactive users. `get_time_series_data` and `get_single_window_data` are thin wrappers around this function; instantiating a TimeLimits object is something that pensieve can do. Generating this query is how mozanalysis adds value, so let's expose the query directly.

Moots #60.",tdsmith,173889,2020-02-28T18:48:11Z,MEMBER,True,33,12,2,A library for Mozilla experiments analysis,Python,aa79c782679f4c4925871e54ffe3887d718d642a,Buff docs
132,https://api.github.com/repos/mozilla/mozanalysis/pulls/65,65,Validate experiments_column_type parameter,,tdsmith,173889,2020-02-28T18:33:25Z,MEMBER,True,42,0,2,A library for Mozilla experiments analysis,Python,0a75c62d777b3817c28f96b397cea92b4b71ae0f,Validate experiments_column_type parameter
133,https://api.github.com/repos/mozilla/mozanalysis/pulls/65,65,Validate experiments_column_type parameter,,tdsmith,173889,2020-02-28T18:33:25Z,MEMBER,True,42,0,2,A library for Mozilla experiments analysis,Python,40e9d39fcf156c1780ed05bc6c36129553d206fe,Single-source the experiment column type list
134,https://api.github.com/repos/mozilla/mozanalysis/pulls/64,64,Remove explicit object inheritance,"All classes inherit from object in Python 3. It's a brave new world!

https://twitter.com/electrolemon/status/1043183150216765440",tdsmith,173889,2020-02-28T17:27:36Z,MEMBER,True,7,7,3,A library for Mozilla experiments analysis,Python,347b4ccd40377b78fdf5020796530692079674f5,"Remove explicit object inheritance

All classes inherit from object in Python 3. It's a brave new world\!

https://twitter.com/electrolemon/status/1043183150216765440"
135,https://api.github.com/repos/mozilla/mozanalysis/pulls/63,63,Don't install mozanalysis into linting environment,,tdsmith,173889,2020-02-27T23:40:27Z,MEMBER,True,1,0,1,A library for Mozilla experiments analysis,Python,f6344099a59c357274938eabec40e0d2379915c8,Don't install mozanalysis into linting environment
136,https://api.github.com/repos/mozilla/mozanalysis/pulls/62,62,Add main and crash ping data sources,... and a histogram-mean aggregation helper.,tdsmith,173889,2020-02-27T23:19:10Z,MEMBER,True,32,0,2,A library for Mozilla experiments analysis,Python,b03f7a341257223693de5bb96c3a83611ec2d829,Add main and crash ping data sources
137,https://api.github.com/repos/mozilla/mozanalysis/pulls/62,62,Add main and crash ping data sources,... and a histogram-mean aggregation helper.,tdsmith,173889,2020-02-27T23:19:10Z,MEMBER,True,32,0,2,A library for Mozilla experiments analysis,Python,8caf1e1ac6fa3a01299a6adec5bfe3299c46d247,Add a histogram-mean aggregation function
138,https://api.github.com/repos/mozilla/mozanalysis/pulls/62,62,Add main and crash ping data sources,... and a histogram-mean aggregation helper.,tdsmith,173889,2020-02-27T23:19:10Z,MEMBER,True,32,0,2,A library for Mozilla experiments analysis,Python,dde3e1d878f2f0a52bb5247d72508d93cd238fab,"Whoops, forgot an import"
139,https://api.github.com/repos/mozilla/mozanalysis/pulls/62,62,Add main and crash ping data sources,... and a histogram-mean aggregation helper.,tdsmith,173889,2020-02-27T23:19:10Z,MEMBER,True,32,0,2,A library for Mozilla experiments analysis,Python,83e41df5701324f83904d4900dc22b44f3480d4d,Ignore line length lint
140,https://api.github.com/repos/mozilla/mozanalysis/pulls/62,62,Add main and crash ping data sources,... and a histogram-mean aggregation helper.,tdsmith,173889,2020-02-27T23:19:10Z,MEMBER,True,32,0,2,A library for Mozilla experiments analysis,Python,3cc093e7332901c0a279d517d1d606d5175647cf,"Indent for the query, not for the code"
141,https://api.github.com/repos/mozilla/mozanalysis/pulls/61,61,Add documentation for DataSource,,felixlawrence,5019234,2020-02-25T21:32:41Z,CONTRIBUTOR,True,27,0,1,A library for Mozilla experiments analysis,Python,7766c62d1130d9e010adde473dd26c45c4c6da49,Add documentation for DataSource
142,https://api.github.com/repos/mozilla/mozanalysis/pulls/61,61,Add documentation for DataSource,,felixlawrence,5019234,2020-02-25T21:32:41Z,CONTRIBUTOR,True,27,0,1,A library for Mozilla experiments analysis,Python,db1cc9a8cde8b77e51b504eb4b8607669b62b2cf,Wrangle ReST
143,https://api.github.com/repos/mozilla/mozanalysis/pulls/61,61,Add documentation for DataSource,,felixlawrence,5019234,2020-02-25T21:32:41Z,CONTRIBUTOR,True,27,0,1,A library for Mozilla experiments analysis,Python,bbff13876b1d9546ca303fb5c7605cc75ee214de,Document what happens when experiments_column_type=None
144,https://api.github.com/repos/mozilla/mozanalysis/pulls/59,59,Add info to guide about creating datasets.,,felixlawrence,5019234,2020-02-21T23:26:41Z,CONTRIBUTOR,True,2,0,1,A library for Mozilla experiments analysis,Python,735cfacae49e05d47cff8f82bd5c33e24946cc18,Add info to guide about creating datasets.
145,https://api.github.com/repos/mozilla/mozanalysis/pulls/59,59,Add info to guide about creating datasets.,,felixlawrence,5019234,2020-02-21T23:26:41Z,CONTRIBUTOR,True,2,0,1,A library for Mozilla experiments analysis,Python,7282a183a375c69061660843d2ea74db5c5c9bf4,Add more details about datasets
146,https://api.github.com/repos/mozilla/mozanalysis/pulls/58,58,Remove UDFs and pyarrow dependency,I expect nobody will miss these.,tdsmith,173889,2020-02-19T01:13:54Z,MEMBER,True,0,317,4,A library for Mozilla experiments analysis,Python,5498b908c0562b183a850b100e8febd688c295a3,"Remove UDFs and pyarrow dependency

I expect nobody will miss these."
147,https://api.github.com/repos/mozilla/mozanalysis/pulls/58,58,Remove UDFs and pyarrow dependency,I expect nobody will miss these.,tdsmith,173889,2020-02-19T01:13:54Z,MEMBER,True,0,317,4,A library for Mozilla experiments analysis,Python,83836be4f9b0d35c1c471a826564253c31e750c5,"Oh, right, the tests as well."
148,https://api.github.com/repos/mozilla/mozanalysis/pulls/58,58,Remove UDFs and pyarrow dependency,I expect nobody will miss these.,tdsmith,173889,2020-02-19T01:13:54Z,MEMBER,True,0,317,4,A library for Mozilla experiments analysis,Python,b6664b43ab3d7e8d22155265868a47976ffb961c,Okay fine also the docs.
149,https://api.github.com/repos/mozilla/mozanalysis/pulls/57,57,Remove py27 support - abandon ship.,"Tests started failing on py27, in areas untouched by recent commits. The ship is sinking, let's get off it.

I have little idea what I'm doing w.r.t. packaging, but after making these changes `tox` ran successfully from scratch and I could find no further references to 'py2' or 'python2' in the project, so this seems to have worked?",felixlawrence,5019234,2020-02-12T00:51:30Z,CONTRIBUTOR,True,4,10,3,A library for Mozilla experiments analysis,Python,80a3aa4acfc3dbf8507eb12f27d9e639abcb5f00,Remove py27 support - abandon ship.
150,https://api.github.com/repos/mozilla/mozanalysis/pulls/56,56,Add metric for connecting a firefox account,"In order to add 'connect_fxa' as a metric, I had to un-break the join to the `events` table (the changes in `metrics/__init__.py`).

I applied this quickly to [an existing onboarding experiment](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) and the metric result was nonzero and plausible (to me).

@tdsmith: can you please review the changes to `__init__.py` - it would be particularly appreciated if you can think of a better name than 'map_struct'.

@irrationalagent: could you please check that the metric is defined correctly and named sensibly? My [application notebook](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) has the full generated query, if you want to see how the `Metric` object is used to form a concrete SQL query.",felixlawrence,5019234,2020-02-11T23:54:40Z,CONTRIBUTOR,True,50,14,2,A library for Mozilla experiments analysis,Python,16482888752c8696b01a0e690629f0565daa23da,Add metric for connecting FxA
151,https://api.github.com/repos/mozilla/mozanalysis/pulls/56,56,Add metric for connecting a firefox account,"In order to add 'connect_fxa' as a metric, I had to un-break the join to the `events` table (the changes in `metrics/__init__.py`).

I applied this quickly to [an existing onboarding experiment](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) and the metric result was nonzero and plausible (to me).

@tdsmith: can you please review the changes to `__init__.py` - it would be particularly appreciated if you can think of a better name than 'map_struct'.

@irrationalagent: could you please check that the metric is defined correctly and named sensibly? My [application notebook](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) has the full generated query, if you want to see how the `Metric` object is used to form a concrete SQL query.",felixlawrence,5019234,2020-02-11T23:54:40Z,CONTRIBUTOR,True,50,14,2,A library for Mozilla experiments analysis,Python,3efc9bc44ebe6408a41f08c995ddfcc6aab26ddd,Fix join to events table
152,https://api.github.com/repos/mozilla/mozanalysis/pulls/56,56,Add metric for connecting a firefox account,"In order to add 'connect_fxa' as a metric, I had to un-break the join to the `events` table (the changes in `metrics/__init__.py`).

I applied this quickly to [an existing onboarding experiment](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) and the metric result was nonzero and plausible (to me).

@tdsmith: can you please review the changes to `__init__.py` - it would be particularly appreciated if you can think of a better name than 'map_struct'.

@irrationalagent: could you please check that the metric is defined correctly and named sensibly? My [application notebook](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) has the full generated query, if you want to see how the `Metric` object is used to form a concrete SQL query.",felixlawrence,5019234,2020-02-11T23:54:40Z,CONTRIBUTOR,True,50,14,2,A library for Mozilla experiments analysis,Python,256e7e9161b2a108eb7800c44b1baedb5020737a,Fix sanity metrics for events table
153,https://api.github.com/repos/mozilla/mozanalysis/pulls/56,56,Add metric for connecting a firefox account,"In order to add 'connect_fxa' as a metric, I had to un-break the join to the `events` table (the changes in `metrics/__init__.py`).

I applied this quickly to [an existing onboarding experiment](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) and the metric result was nonzero and plausible (to me).

@tdsmith: can you please review the changes to `__init__.py` - it would be particularly appreciated if you can think of a better name than 'map_struct'.

@irrationalagent: could you please check that the metric is defined correctly and named sensibly? My [application notebook](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) has the full generated query, if you want to see how the `Metric` object is used to form a concrete SQL query.",felixlawrence,5019234,2020-02-11T23:54:40Z,CONTRIBUTOR,True,50,14,2,A library for Mozilla experiments analysis,Python,65e654e585c40a401ca1f9612863bed34a51b6cc,'Improve' indentation (optimising for the full generated query)
154,https://api.github.com/repos/mozilla/mozanalysis/pulls/56,56,Add metric for connecting a firefox account,"In order to add 'connect_fxa' as a metric, I had to un-break the join to the `events` table (the changes in `metrics/__init__.py`).

I applied this quickly to [an existing onboarding experiment](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) and the metric result was nonzero and plausible (to me).

@tdsmith: can you please review the changes to `__init__.py` - it would be particularly appreciated if you can think of a better name than 'map_struct'.

@irrationalagent: could you please check that the metric is defined correctly and named sensibly? My [application notebook](https://colab.research.google.com/drive/1fQQVj7yB3x9NHIRxI371_Pk0VEGxXV9W) has the full generated query, if you want to see how the `Metric` object is used to form a concrete SQL query.",felixlawrence,5019234,2020-02-11T23:54:40Z,CONTRIBUTOR,True,50,14,2,A library for Mozilla experiments analysis,Python,01d9dc28da36791042090dd073e9bbecd3c73c95,Rename experiments_column_type values
155,https://api.github.com/repos/mozilla/mozanalysis/pulls/55,55, Make bootstrapping work without Spark.,"This makes a breaking change to the bootstrap function signatures: arguments are re-ordered so that `sc` becomes optional.

Mozanalysis will now be frequently run without a Spark context. We'll still need to bootstrap.

Now if no Spark context is supplied, non-parallel implementations of the bootstrap will be run.

",felixlawrence,5019234,2019-12-30T22:45:19Z,CONTRIBUTOR,True,156,101,6,A library for Mozilla experiments analysis,Python,f21149defa46003c5e890b898c10bfdd238f6374,"Make bootstrapping work without Spark.

This makes a breaking change to the bootstrap function signatures: arguments are re-ordered so that `sc` becomes optional.

Mozanalysis will now be frequently run without a Spark context. We'll still need to bootstrap.

Now if no Spark context is supplied, non-parallel implementations of the bootstrap will be run."
156,https://api.github.com/repos/mozilla/mozanalysis/pulls/55,55, Make bootstrapping work without Spark.,"This makes a breaking change to the bootstrap function signatures: arguments are re-ordered so that `sc` becomes optional.

Mozanalysis will now be frequently run without a Spark context. We'll still need to bootstrap.

Now if no Spark context is supplied, non-parallel implementations of the bootstrap will be run.

",felixlawrence,5019234,2019-12-30T22:45:19Z,CONTRIBUTOR,True,156,101,6,A library for Mozilla experiments analysis,Python,1e58f213bd35131b99b9bc5c71c8376d86c60cbd,Parametrise the spark fixture to neaten the tests
157,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,bac8b9607d9ef7d6bd0c3d3dfeac41e748801457,Fix minor docs copypasta mistake
158,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,1f67f8a9895e8342f8de38187d0dbd58e8138a47,Port the query code to SQL for BigQuery.
159,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,7a2d9b088d1e60535d0abcd9d217d5336ee089c8,Delete firetv docs. Other docs need updating
160,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,292147d92d4d2b1bab5d3b54bc21488d097b569d,Nit: make a variable name more accurate/specific
161,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,b1410e84f2d28fe3ddbf5f43c9ab8f2cfa6e75bd,Move BigqueryStuff into a separate module and refactor it
162,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,fa87c2781d8383ee8ba80e5943dd9267e731bb42,Add crude unit tests; fix discovered bug
163,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,4d8b6e882ac05146d2a8e33d32b44b9a898dba63,Fix docstring example
164,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,4fff6d38302a44a4393df9119c7c886e9e2a8e2a,"Update guide.

When working through my example notebook, I noticed that you can't call `.to_dataframe()` twice on the same object. This is inconvenient and I wonder if we should change our return types to just return dicts of dataframes - or possibly an iterator over `(int, DataFrame)` tuples for time series."
165,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,35123d9d9c2b07c36503331c1d5cc3cf288f4c4f,"Don't return RowIterators.

`Experiment.get_single_window_data()` now returns a pandas DataFrame directly. `Experiment.get_time_series_data()` now returns a new `TimeSeriesResult` object, which ideally gets turned into a `dict` but also supports loading only one value into RAM at a time."
166,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,36acc686e09dac602c5e014ac8f947055733802a,"Appear more professional

Rename ``BigqueryStuff`` to ``BigQueryContext``, because the latter seems less hacky. Whether this class warrants a less hacky name is not implied."
167,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,d4be0fd3804c4525af4f529e8ed95b2c38856dde,Add docs for BigQueryContext
168,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,9b1c369cbaecbe720c587335a476a04dc0eb5f94,`add_any` now deals exclusively with bools.
169,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,49f22f4321ad2526f3174a49f41f8b92c21532b7,Fix bug; update docs
170,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,78ecc5901eca51054250a517f305fd720dc2b855,"Make query hashes consistent across runtimes.

In Python 3, it turns out that the `hash()` of a string is consistent within an interpreter session, but inconsistent between sessions. Great. Use a few bytes of a sha256 instead."
171,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,ff20b5f461e8f77987a116b489d8915d28f8b739,Don't suggest people install mozanalysis from my personal fork
172,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,8a358bb39f9163cf9b6f88f9862f8dd57cb4abb5,Don't encourage people to use my dataset_id
173,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,8bc90a7e9d87656dd918e35c795d59bd3db49afe,Obvious placeholder is obvious
174,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,99a95dcc3d6f2bd3eca285bd4caa9440ac92271d,Apparently project namespaces are for billing?
175,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,10a54ca443e3de9135c9feaefe56e3c860ab5a09,Add return type
176,https://api.github.com/repos/mozilla/mozanalysis/pulls/54,54,Move to bigquery,,felixlawrence,5019234,2019-12-07T00:44:29Z,CONTRIBUTOR,True,736,1946,13,A library for Mozilla experiments analysis,Python,005925b06b38ef23efa78752ce0a30446dbba269,"Fully qualify result table names for TimeSeriesResult.

The data to be extracted from a TimeSeriesResult is identified by `(project_id, dataset_id, table_name)`. Previously, `project_id` and `dataset_id` were stored in a `BigQueryContext`, separate to the `table_name`. If someone was using multiple BigQueryContext instances, with different `project_id`s or `dataset_id`s (which is a terrible idea!) then they would need to correctly match each TimeSeriesResult to the right BigQueryContext.

To remove the chance for such mismatches, TimeSeriesResult now stores a fully qualified table name: `project_id.dataset_id.table_name`.

It would be nice to deal with fully qualified table names everywhere, but when specifying a destination table (when saving results into a table), the BigQuery API seems not to allow the destination table to be specified as a fully qualified table name - instead the project_id, dataset_id and table_name must be submitted separately in three separate places (respectively: when instantiating the bigquery client, when instantiating a dataset object, and when calling the `table()` method on that dataset object. Ergh."
177,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,6e1cf8c46d215224f425e1f325f1e611d28ed0d2,Initial take on fenix metrics.
178,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,a2e1cf35dc13cf10244a0634344eaae2c321b004,Fixing reference bugs.
179,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,04b4b8e8d531608717e89c63bf7f5588b152ea6f,"Adding in desktop metrics, relevant to remote blocklist experiment."
180,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,974b8cb2ccf43ce0a8cde712919ad2536c2c6e70,Fixing reference bug.
181,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,9746da4eece3a50f774a217fd921f59b93b559f5,Standardizing a few metrics. Fixing bug in incorrect table ref. Adding in a new udf for taking a mean with the possibility of NULL elements.
182,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,b7f4006725704098a490c19e3b7ec8b13ff7faa5,Amending previous
183,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,13ba38305b61eba98a17e9e3cf9f1cc3498c908e,Merge remote-tracking branch 'origin/master'
184,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,50e128a139da81b5c30b99b6a1b7b69ffafd3706,Adding additional fenix metrics.
185,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,14f7be2a8810436dad6b16c3b4d25aa5d8f5cbaa,Missing adding `first_run_date` field.
186,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,a3a0f261f71908e1dd5033cdcf6d0678e4ca76a2,Adding simple import test for `metrics.fenix`.
187,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,730454e1bb82e668ea144f761e685da9c0ae52e4,Adding in missing spark context (`sc`) for bootstrap example.
188,https://api.github.com/repos/mozilla/mozanalysis/pulls/53,53,Additional experiment metrics,"Added additional performance metrics to `metrics.desktop`:
* `fx_page_load_ms_2_mean`
* `fx_tab_switch_total_e10s_ms_mean`
* `about_home_topsites_first_paint`
* `first_paint`

The first two required the addition of a UDF in `utils.udf` to aggregate the histograms. 

In addition, created a `metrics.fenix` package. ",godelstheory,9003820,2019-12-02T21:56:40Z,NONE,False,200,16,6,A library for Mozilla experiments analysis,Python,29c29cce1a9c509631f2c2d91296492ec33cc41a,Fixing args in documentation example for `Metric.from_func`
189,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,cdd42e9045cb6090b562c2c908ba1225373a88fd,"Add DataSource and Metric classes.

`DataSource` wraps a Spark DataFrame or table lazily, so that you can define DataSources without needing a Spark context.

`Metric` wraps a Spark Column, plus a `DataSource` for the necessary table - again so that you can define `Metric`s lazily, without issuing Spark commands.

Also add some convenience functions `agg_sum()` and `agg_any()`, representing common aggregations over Columns used when defining experiment metrics."
190,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,b3b8aea508ac13e58ffb7f305423fe89c68bdcc8,Add some metrics and data sources for desktop and fire tv
191,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,d1d228348fbd8dbc6019399b61c9d4db24cc1f70,"Refactor `Experiment._get_per_client_data()`, ready for batches.

We want users to be able to supply an arbitrary list of `Metric`s to `Experiment.get_per_client_data()` and `Experiment.get_time_series_data()`, without requiring that all metrics share a common `DataSource`. Therefore we need to handle joins with arbitrary numbers of `DataSource`s and associated `Metric`s.

This lays the groundwork for that: `Experiment._get_per_client_data()` now builds a `dict` of a list of metrics (expressed as Columns) associated with each data source (expressed as a DataFrame). At present this `dict` is specified manually and only has one key - but the downstream code is capable of handling `dict`s with arbitrary numbers of elements.

As such, this diff offers no new functionality; it merely lays the groundwork for the next steps."
192,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,f5608e67769b3df2919b4cf0727f4f2941fa4e82,"Make ``Metrics.from_col`` less prone to duplicate ``DataSource``s.

Duplicate ``DataSource``s are bad, because they appear not to be equal but point to identical ``DataFrame``s, leading to additional work for Spark and the increased potential for mozanalysis to get confused."
193,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,c4efff5cc35737364fd85fd2cfe3b7c57181e21b,Trivial test docstring fix
194,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,517e726a6e6dff59055f5f9e122d54a28c8302c0,"Add `Experiment._process_metrics()`.

Add a method that takes a list of `Metric`s and converts them to a `dict` of a list of metrics per data source DataFrame - the same format as the `dict` constructed manually in `Experiment._get_per_client_data()`."
195,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,72212697cbde24ea84347cc8155a5a34367ca299,"The breaking change! Use `Metric`s not raw Columns and DataFrames.

From here on, `metric_list` refers to a list of `Metric`s rather than a list of Columns.

The user accessible `Experiment` methods (`get_per_client_data`, `get_time_series_data`, `get_time_series_data_lazy`) now take a list of `Metric`s, rather than needing to supply a DataFrame and a list of Columns. At this point, the main functionality of the metrics library is complete."
196,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,8dcd5b082b8bbcd6169c453a5077bf85ca6a78f1,"Do some gardening.

Trim some unused variables, remove some TODOs as WONTFIX."
197,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,a9e81fd0ad5e7cb5a99f87753827a7608f10fbb2,Oops - update tests to match last commit
198,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,313e9dd935ecc0b1c7728c6bafd38436ba9fd4a7,"Move sanity check metric generation into the `DataSource` class.

This will allow `DataSource`s to implement additional custom sanity checks in the future. It also provides better column names for sanity check metrics, now that we have multiple data sources in one results DataFrame."
199,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,b1c230dbb075b93e2eae1bdcb2f3bfd00d8086c3,Update docstrings
200,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,baae27482ae5bf7b3bf32a09321a0f8e1d3f891e,Fix py2 inconsistency in unit test
201,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,da034403fae643544beab8c3f078ae5963fbb1e2,Check that the metric libraries at least import
202,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,0db6141e2f8b902a4f1f34acfbeb3ef53bd2730d,Trigger generation of docs; fix broken docstrings
203,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,fd6309e915df883b76100e4944bb7ac23d69222c,"Add documentation, including a tutorial/cookbook.

If this documentation helps to review this PR, then fantastic. If not, then I'd be happy to put this into a different PR to be reviewed separately."
204,https://api.github.com/repos/mozilla/mozanalysis/pulls/52,52,Start a metrics library,"Warning: this makes a breaking change to the main user-facing functions, and redefines `metric_list`.

Rather than supplying both `data_source: DataFrame` and `metric_list: iterable[Column]` to `Experiment.get_per_client_data()`, `Experiment.get_time_series_data()` and `Experiment.get_time_series_data_lazy()`, now you supply `metric_list: iterable[Metric]` - where `Metric` is a new type that represents a... metric.

In the medium-long term, on most experiments, most `Metric`s will be imported from the metrics library (e.g. `mozanalysis.metrics.desktop` for desktop experiments). The metrics library will be the canonical definition of the various metrics.

It's also fairly easy to define one-off `Metric`s for an experiment. If there's any likelihood of reuse, people should be encouraged to add their metrics to the metrics library.",felixlawrence,5019234,2019-10-17T23:29:37Z,CONTRIBUTOR,True,1375,201,13,A library for Mozilla experiments analysis,Python,e7b33fa986da46f9006999da6358310a5f6f172d,"Directly address review comments:

* Add optional `description` attribute to `DataSource`
* Refactor `get_sanity_metric_cols()` to simplify `if` statements
* Documentation tweaks/fixes

Indirectly address comments/changes inspired by review:
* Validate `Metric._col_getter` attribute
* Tweak `_has_glean_style_experiments_field` logic: fix bug changing `not in dataframe.schema` to `not in dataframe.columns`. Oops. And switch default for `'fields'` from `{}` to `[]`, not that it matters in practice."
205,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,7277e168c145a663e737c5877ee73a98a6dfad5b,Add `date_sub()` utility method
206,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,b54c329b17d400c6bb358584210fa3f9bcf11dd2,"Change mind about analysis windows.

Previously, `TimeSeries.analysis_window_start` and
`analysis_window_end` were going to be:
* `int`s when querying non-time-series, or
* `Column`s when querying time series.

This was kind of a tortured overloading, and required using
global-style column construction in the `TimeSeries` constructor -
i.e. it had to reference a `Column` that gets constructed by
`_get_join_conditions()`. Ugh.

Instead, we set it to `None` and ignore it and in a future commit
we'll handle this logic in `_get_join_conditions()`."
207,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,d4b6a1c087d31c89deb5a4a73e1677bf0ab31d2a,"Add `for_ts` constructor for `TimeLimits`.

Allow creating `TimeLimits` objects that specify time series.

It is worth debating whether ""one class, two constructors"" or
""one base class, two subclasses"" is the better pattern here.

I chose ""one class, two constructors"" because:
* The class has no instance methods (it just holds attributes)
* There's a lot of overlap between would-be-subclass instances
  (i.e. most attributes are present for time series and non-time
  series)
* Most of the difference in would-be-subclasses lies in their
  constructors
* The ""one class, two constructors"" avoids spaghetti code - all
  attributes are defined in one place rather than being spread
  across a base class and a subclass.

The advantages of ""one base class, two subclasses"" that I considered
are:
* A more conventional (less surprising) approach
* Other code can more explicitly test which version of `TimeLimits`
  is present (with ""one class, two constructors"", we'll have to
  test for the presence of attributes directly rather than
  inspecting the type).
* Cleaner to implement validators that apply to one subclass only.

Did I miss anything? What do others think about the relative merits
of the two approaches?"
208,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,82d5515ee558a990df3d4d3eb8e934fc39c22d19,"Reorder args in private `TimeSeries.__init__()`

to make `analysis_window_start` and `analysis_window_end` optional
args."
209,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,251eab8d92bcfc37f58055d9c9a9b23dadf17e94,"Add `Experiment.add_time_series_to_enrollments()`

When querying time series, we need to query an extra dimension of
data (time!).

In order to obtain this extra dimension of data, there is a design
decision to be made with three choices:
1. Make more queries (e.g. one per time period/analysis window),
2. Switch from one row per client to one row per `(client, time)`, or
3. Switch from one column per metric to one column per `(metric, time)`

It would be good to avoid (1) because repeated querying is expensive
and the repeated queries would involve a bunch of overlapping data.

(2) seems more natural than (3): we can add an extra column to identify
the row's analysis window, then pivot in pandas later. If we were to
do (3) we would probably have to do some munging of column names.

In defence of (3): if we philosophically believe that a metric's
definition must involve its analysis window (e.g. ""'retention' is a
sensible metric if defined as 'used the browser at all in week 3 after
enrolling'"") then `time` in the `(metric, time)` tuple is redundant.

After briefly talking to @tdsmith some months ago I've gone with (2);
happy to revisit this if necessary."
210,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,64086626e850c11e20f099a1102d8cbd9342c232,Reorder tests to test dependencies before dependers
211,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,4ef589209956d2b40aa2c8fe323a38d4b40893cc,Call `add_time_series_to_enrollments()` in `_process_enrollments()`
212,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,26a32751e477919abaaf6634088012e748725038,Support time series in the join and aggregation
213,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,dd7d5f6b9fb009fcf7e90f35445866f073e2595b,Spin off the meat from `get_per_client_data` to `_get_per_client_data`.
214,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,71fa0ccb63795d661f0c133fdfbef0580fda077f,"Add `Experiment.get_time_series_data()`.

Finally enough pieces are in place to define `get_time_series_data()`."
215,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,cc740f8870d65d71cd979c9e10f50a7bd8f2da68,We don't really need an 'analysis_window_end' column.
216,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,94fd423d3630a48bb8e656c221676bae70f399bb,"Update some variable names in tests.

The `Experiment.filter_*` methods were renamed to `_process*`.
Update the related terse variable names so that they're not _total_
nonsense."
217,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,f141b0ef23d27dfdc0164a02658707fadb022880,`analysis_window_start` does not need to be a bigint.
218,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,67ed314046566d86506eb9e7653c3e7fed70746b,Implement the simplest review changes
219,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,f7d9044c6d4c4c8d2f5eee7f92e6debed78eb510,Add AnalysisWindow type
220,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,0d7b37a6ac473c6cc9264b9642d4f84ebd3844a7,"Unify the TimeLimits.

A TimeLimits object for a time series now looks like a TimeLimits
object for a single analysis window for `get_per_client_data().
And in both cases we filter dates by adding extra columns to the
enrollments DataFrame.

Now, `get_per_client_data()` and `get_time_series_data()` have
become thin wrappers around `_get_per_client_data()`: they construct
the appropriate TimeLimits object from the arguments appropriate
to the analysis type, then they pass it to `_get_per_client_data()`,
which no longer has separate code paths for time series. Finally,
they package the results into a form as close to ""the standard
format"" as the analysis type will allow, which makes it more
convenient for a human using this code directly.

And mozreport will be able to call `_get_per_client_data()` directly,
giving @tdsmith raw access to his preferred data types.

N.B. I haven't updated the documentation yet."
221,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,b3a914649b5ef1901bf7c010fc09ff66284c7d19,"Grab bag of changes:

* Call `_add_analysis_windows_to_enrollments()` in
  `_get_per_client_data()` not `_process_enrollments()`. Maybe we should
  call its results something other than `enrollments` too, because it's
  more than an enrollments dataframe once it (potentially) has many rows
  per enrollment. This seemed like a significant enough action that it
  shouldn't be buried in `_process_enrollments()`.
* Rename `analysis_window_*` columns to `mozanalysis_window_*` to avoid
  potential name clashes.
* Create/update docstrings.
* Create/update unit tests."
222,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,4e3b8c2820cbb82cc5302fd8c05389b69615f863,Implement `get_time_series_data_lazy()` and tests.
223,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,b09b37991620e493bcc8f23eb7382be71db40bbe,Add docstring for
224,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,febca81f3f1bb1a4f6e99a6e41dcb81a338a6b7c,"Use `slots` classes; re-trigger CI

CI failed due to a 503 getting the docker images. I'll use that as an excuse to enable slots-style classes, because it's a practically meaningless change that will re-trigger CI to run again and I don't have permission to do that manually."
225,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,5f030fb6ea6aa2d6a2e90a5bc312887cc96417bc,Fix quote mark in docstring
226,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,0fd71775e343dfb84b70ed6f03d9030654d72918,Adjust another quote mark. Is CI fixed yet?
227,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,0d9068225e98332d00cc7c9d884ce1b0d3b054fe,"Downgrade pyarrow due to breaking change in 0.15.0.

Once Spark supports the new version, and Databricks supports the new Spark and pyarrow, _then_ we can re-upgrade.

Or there's an environment variable if we end up really needing >=0.15"
228,https://api.github.com/repos/mozilla/mozanalysis/pulls/51,51,Add time series,"This is a meaty one. I called out a few key design questions in commit messages along the way. Have a ponder and it's probably worth setting up a meeting for any major discussions. I'd be happy if this went through multiple stages of review (e.g. are we happy with the overall design, then are we happy with the types and type signatures, then are we happy with the code and documentation) but maybe I should leave that up to the reviewer(s)?",felixlawrence,5019234,2019-08-20T23:57:03Z,CONTRIBUTOR,True,637,136,5,A library for Mozilla experiments analysis,Python,4762b208e585337a458f2df64e16cf0a9b001534,More detailed type documentation
229,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,bff30427caf3c942885635e452ce97dfec8012b3,Move join condition construction to separate method.
230,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,f5ea357d032fe78ce8381157202e31c1cb191ca0,Trivial gardening
231,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,6b4ff39db1b3c44d2262a277e474175fab7b91a4,"Move data_source checking into data_source specific method.

In the future (with the metrics library) we will have multiple data_sources in one query, so that users can just list all the metrics they want to analyse without partitioning them by data_source. So all data_source functionality should eventually live inside a reduce loop - this makes that more possible."
232,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,7e999bf44310a5c9a52c00834527112a4a50cc95,"Rename `filter_*_for_analysis_window()` to `_process_*()`

In the future we are going to do significantly more than filtering in these methods. For now let's be less verbose, and make them private."
233,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,a25560cd7913e3f402df1383671ce4d49a07c1ad,Staticify static methods
234,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,9cc3b0ad68bf8021c432ec9271f0d0b0a82aaf95,Push ugly aliases out of the way
235,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,921380bf0676d59ff65398ece9f4cffcc5591627,Lower the demanded precision from a random unit test
236,https://api.github.com/repos/mozilla/mozanalysis/pulls/50,50,Further refactoring of Experiment class,"Do more groundwork in preparation for supporting querying of time series and a metrics library.

Specifically, spin off the construction of the join conditions into a separate method so that `get_per_client_data()` fits on one screen and is easier to reason about.",felixlawrence,5019234,2019-08-07T00:04:49Z,CONTRIBUTOR,True,77,47,3,A library for Mozilla experiments analysis,Python,ec03f056ffac7d8f3e380022c2eaa139d04aa9a5,Address review comments.
237,https://api.github.com/repos/mozilla/mozanalysis/pulls/49,49,Refactor time limits code in Experiment.,"Our next priorities are to introduce a metrics library and support for querying time series of metrics data. Both of these things add complexity to the queries that get sent to Spark, and the code that builds them. Here we lay some groundwork for those features by disentangling some logic from the `Experiment` class.

Here we introduce the `TimeLimits` class: an instance of TimeLimits holds all the temporal information used when querying data for an `Experiment`. It contains the start and end of the enrollment period, the details about the analysis window, and the relevant date range for the data source.

Previously, we tried to hold minimal state and compute quantities on the fly. Instead, `TimeLimits` precomputes and stores all these variables, which is conceptually easier (particularly when we start specifying a different set of variables when working with time series). We ensure self-consistency by providing a constructor with a near-minimal set of arguments, and by using validators.",felixlawrence,5019234,2019-08-06T20:06:33Z,CONTRIBUTOR,True,351,170,2,A library for Mozilla experiments analysis,Python,23f8035e32abc28ca9d4dcf90978a962da516f9f,"Refactor time limits code in Experiment.

Our next priorities are to introduce a metrics library and support for querying time series of metrics data. Both of these things add complexity to the queries that get sent to Spark, and the code that builds them. Here we lay some groundwork for those features by disentangling some logic from the `Experiment` class.

Here we introduce the `TimeLimits` class: an instance of TimeLimits holds all the temporal information used when querying data for an `Experiment`. It contains the start and end of the enrollment period, the details about the analysis window, and the relevant date range for the data source.

Previously, we tried to hold minimal state and compute quantities on the fly. Instead, `TimeLimits` precomputes and stores all these variables, which is conceptually easier (particularly when we start specifying a different set of variables when working with time series). We ensure self-consistency by providing a constructor with a near-minimal set of arguments, and by using validators."
238,https://api.github.com/repos/mozilla/mozanalysis/pulls/49,49,Refactor time limits code in Experiment.,"Our next priorities are to introduce a metrics library and support for querying time series of metrics data. Both of these things add complexity to the queries that get sent to Spark, and the code that builds them. Here we lay some groundwork for those features by disentangling some logic from the `Experiment` class.

Here we introduce the `TimeLimits` class: an instance of TimeLimits holds all the temporal information used when querying data for an `Experiment`. It contains the start and end of the enrollment period, the details about the analysis window, and the relevant date range for the data source.

Previously, we tried to hold minimal state and compute quantities on the fly. Instead, `TimeLimits` precomputes and stores all these variables, which is conceptually easier (particularly when we start specifying a different set of variables when working with time series). We ensure self-consistency by providing a constructor with a near-minimal set of arguments, and by using validators.",felixlawrence,5019234,2019-08-06T20:06:33Z,CONTRIBUTOR,True,351,170,2,A library for Mozilla experiments analysis,Python,5269b7ad5a4b418fcfbd8c2c6c1a51a6c3114bd5,Fix whitespace nit
239,https://api.github.com/repos/mozilla/mozanalysis/pulls/48,48,Refactor time limits code.,"Our next priorities are to introduce a metrics library and support for querying time series of metrics data. Both of these things add complexity to the queries that get sent to Spark, and the code that builds them. Here we lay some groundwork for those features by disentangling some logic from the `Experiment` class.

The main change here is the introduction of the `TimeLimits` class: an instance of TimeLimits holds all the temporal information used when querying data for an `Experiment`. It contains the start and end of the enrollment period, the details about the analysis window, and the relevant date range for the data source.

Previously, we tried to hold minimal state and compute quantities on the fly. Instead, `TimeLimits` precomputes and stores all these variables, which is conceptually easier (particularly when we start specifying a different set of variables when working with time series). We ensure self-consistency by providing a constructor with a near-minimal set of arguments, and by using validators.

This commit is not intended to be merged to master in its current state: it offers no new features or bug fixes. It is intended to form a base for future work on time series and metrics.

This commit includes a little cruft too: there is a bunch of commented-out WIP/prototype code to handle time series and a metrics library. I figured it was easier to include it here, commented out, than to maintain a complicated tree of feature branches that need to be rebased against one another. It also provides the reviewer some hints of my future intentions.",felixlawrence,5019234,2019-07-29T21:14:42Z,CONTRIBUTOR,False,534,196,2,A library for Mozilla experiments analysis,Python,3a3616ec7af62eb2e9f42b84f9c41c698ccd4146,"Refactor time limits code.

Our next priorities are to introduce a metrics library and support for querying time series of metrics data. Both of these things add complexity to the queries that get sent to Spark, and the code that builds them. Here we lay some groundwork for those features by disentangling some logic from the `Experiment` class.

The main change here is the introduction of the `TimeLimits` class: an instance of TimeLimits holds all the temporal information used when querying data for an `Experiment`. It contains the start and end of the enrollment period, the details about the analysis window, and the relevant date range for the data source.

Previously, we tried to hold minimal state and compute quantities on the fly. Instead, `TimeLimits` precomputes and stores all these variables, which is conceptually easier (particularly when we start specifying a different set of variables when working with time series). We ensure self-consistency by providing a constructor with a near-minimal set of arguments, and by using validators.

This commit is not intended to be merged to master in its current state: it offers no new features or bug fixes. It is intended to form a base for future work on time series and metrics.

This commit includes a little cruft too: there is a bunch of commented-out WIP/prototype code to handle time series and a metrics library. I figured it was easier to include it here, commented out, than to maintain a complicated tree of feature branches that need to be rebased against one another. It also provides the reviewer some hints of my future intentions."
240,https://api.github.com/repos/mozilla/mozanalysis/pulls/47,47,Keep using debian stretch (oldstable).,"If you stand in one place long enough, the sands shift around you.

The package openjdk-8-jre-headless has been removed from the new debian (buster) and so the easiest short term fix for this is to stay on the old version.",felixlawrence,5019234,2019-07-17T18:20:27Z,CONTRIBUTOR,True,5,5,1,A library for Mozilla experiments analysis,Python,f77b20f0f8fbc7ec4a2a8fc3a5096694e2cd2854,"Keep using debian stretch (oldstable).

If you stand in one place long enough, the sands shift around you.

The package openjdk-8-jre-headless has been removed from the new debian (buster) and so the easiest short term fix for this is to stay on the old version."
241,https://api.github.com/repos/mozilla/mozanalysis/pulls/45,45,Use attrs for Experiment,"Use attrs for the experiment class.
This gives us more robust immutability, a free repr, and avoids some
boilerplate.",tdsmith,173889,2019-06-24T21:23:52Z,MEMBER,True,69,80,3,A library for Mozilla experiments analysis,Python,18e2a6a666f576f10a94107343b21fc13314bbee,"Use attrs for Experiment

Use attrs for the experiment class.
This gives us more robust immutability, a free repr, and avoids some
boilerplate."
242,https://api.github.com/repos/mozilla/mozanalysis/pulls/45,45,Use attrs for Experiment,"Use attrs for the experiment class.
This gives us more robust immutability, a free repr, and avoids some
boilerplate.",tdsmith,173889,2019-06-24T21:23:52Z,MEMBER,True,69,80,3,A library for Mozilla experiments analysis,Python,d3a67a6108e69d600d07147ae338c709bbb11fd8,"Allow dependency injection for get_enrollments

`get_enrollments` needs to be able to reference a table of all
enrollment events. We need to be able to shortcut this in the tests, and
we'd like Experiment to be immutable, which means no monkeypatching.

Instead, allow the function that fetches the view to be passed in,
and call any callables that we receive as `study_type` arguments.

Further, align the APIs for the view-fetchers, and perform addon-version
filtering in the body of `get_enrollments` if it's required."
243,https://api.github.com/repos/mozilla/mozanalysis/pulls/45,45,Use attrs for Experiment,"Use attrs for the experiment class.
This gives us more robust immutability, a free repr, and avoids some
boilerplate.",tdsmith,173889,2019-06-24T21:23:52Z,MEMBER,True,69,80,3,A library for Mozilla experiments analysis,Python,d5e5540968865f9196ca0ac2ecfbb7dad82489ef,Use injection instead of mocking
244,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,f0bdae66f2b016d0625c1842bb810a36f3fc94d1,"Add (probably broken) stats fns as a strawman.

In order to discuss what APIs mozanalysis's stats functions should have, it will be useful to have some semi-functional examples to work with, even if the code sucks and there are no tests yet."
245,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,9c50d2cb4fcb43d173705511480bf4450f737ccf,"WIP: refactor, document, and test stats fns.

By popular demand, support bootstrapping over other stats fns like quantiles. (Though I haven't written a neat way to do that for `compare` and `bootstrap_one` yet).

Start implementing some tests with basic sanity checks."
246,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,2f1b55cd04f86d82f2b0a68fa6cd16cda3de6ada,"Support bootstrapping over multiple stats functions (e.g. quantiles).

Have written tests but not documentation for the bootstrap module."
247,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,3565dd9d6d60d120c7306a40471b902cf1172343,"Refactor code; add documentation and tests.

Split the summarize_samples functions into batch and individual functions.

Deleted the ""best of the rest"" functions from bayesian_binary (for now)

Renamed some bootstrap and bayesian binary functions to have clearer names (hopefully).

Finished first draft of bootstrap documentation and bayesian_binary documentation."
248,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,8b5fe0184712ee6ce16c3ece0f74f83f1bc23aa5,"Return mean not mode of beta distribution.

If there's 3 enrollments in a branch and they all convert, people might be surprised that the expected conversion rate is 80%, but it's the correct answer given the model and prior and is more compatible with the other quantities we give.

Also add tests for bayesian_binary.py."
249,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,acb4fb02a682677b562367f9de20b367bbb6251c,"Transpose the result DataFrame for batch stats.

Also add documentation and tests for survival func code, and make a few other tweaks.

The result DataFrame was transposed so that for the survival func code, and for the future time series code, plotting should be easier. E.g. if we want to plot the expected uplift vs the threshold (or time) then it's one column in the resulting dataframe, and each error bar is another column."
250,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,d8cddc6c16ca80cf804b5c9347c267500a6197dd,Resolve/reprioritise some FIXME/TODOs
251,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,af80b1ce1476f54ddfa5197cd38dae78860e64f8,It's 2019. Why is Python 2 still a thing? :'(
252,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,1ce7f687cd1a62e581c045cf9a81971b0a4cce06,No rst for the wicked
253,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,70541ba4ecfe6547463806a16bdb3e4d24d7825d,Fix overzealous find & replace
254,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,c9df436e7da0b2cfb76c5a01dd23a76534e49afb,"Address review comments; use empirical bootstrap.

The biggest change here is that when bootstrapping for a single branch, we use the empirical/basic bootstrap rather than the percentile bootstrap, which is reputedly less biased for asymmetric distributions (see #5).

Interestingly, on our test suite's example asymmetric distribution, it agrees with the `bayesian_binary` method _less_ than the percentile bootstrap and I had to relax the error tolerance.

When comparing branches (i.e. computing uplifts), we still make the percentile-bootstrap-like approximation that the bootstrap samples act as samples from an appropriate posterior distribution."
255,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,ff31382d75c9e7b6cf7ccad011d75aeeb4410be2,Further relax consistency tolerance :(
256,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,24ff8834f40bc6cb9f093862d617d2dfa26d0e05,"For some stochastic tests, give 'em a few chances to pass."
257,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,30cae6b7ff153a77db071c0b96a605527b6fe854,WIP: Add Bayesian Bootstrap.
258,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,8d203a1938faf064ca653d71cf071e760de0422d,Refactor a schism
259,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,d58f24ce4d9e26c63907c89b933b54ca8ec47ed1,Add docs and refactor
260,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,2225ebb320191e1a957fe8d892dfb561af0ecbc0,"Several changes to stats code:

* Switch default confidence/credible intervals from 90% and 99% to 95% and 99%
* Switch back from basic bootstrap to percentile bootstrap, because Efron says it's no worse
* Reinstate the percentile bootstrap over uplifts, because Efron says it's OK
* Refactor samples processing into `bayesian_stats/__init__.py`
* Add unit tests for bayesian bootstrap stats fns
* Coincidentally, fix a major bug with a bayesian bootstrap stats fn (oops)"
261,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,b267f4f24e8f7a2caf3522872b0a829e03bb806d,"Write tests for Bayesian Bootstrapping quantiles.

Then fix bugs associated with bayesian bootstrapping quantiles ;)"
262,https://api.github.com/repos/mozilla/mozanalysis/pulls/44,44,Add stats functions,"Steps to merge:
- [ ] @tdsmith review of API shape: is appropriate for `mozreport` (give or take a munging function)
- [ ] @tdsmith review
- [ ] Circulation to DS team and review by interested DSes

Particular areas with room for improvement:
* I'm not especially confident about the precision of my language in the documentation when discussing uncertainties etc
* Re: bootstrapping, it would be good if someone could suggest clear, consistent language to distinguish between statistics applied to a resampled population, and the statistics applied to those statistics that express our uncertainty.",felixlawrence,5019234,2019-05-27T22:28:13Z,CONTRIBUTOR,True,2134,27,23,A library for Mozilla experiments analysis,Python,f5991328d9c876e53cb6856efaf29af2c7fd791c,Comparative results now have MultiIndexes
263,https://api.github.com/repos/mozilla/mozanalysis/pulls/43,43,Build docs for the experiment module,,tdsmith,173889,2019-05-25T00:15:43Z,MEMBER,True,68,54,2,A library for Mozilla experiments analysis,Python,244c43a86bc04eb8a5766ff01430345c18743a77,Build docs for the experiment module
264,https://api.github.com/repos/mozilla/mozanalysis/pulls/43,43,Build docs for the experiment module,,tdsmith,173889,2019-05-25T00:15:43Z,MEMBER,True,68,54,2,A library for Mozilla experiments analysis,Python,dd81d3958e9c62f395ba2d1dc25895b7747d284a,more backticks
265,https://api.github.com/repos/mozilla/mozanalysis/pulls/42,42,Build/test cleanups,"Clean up some build and test config.

Importantly, this makes docs warnings errors again, so this should fail until we patch that up.",tdsmith,173889,2019-05-24T23:27:16Z,MEMBER,True,29,331,12,A library for Mozilla experiments analysis,Python,0dac2ec9c0c165f29c515f8025df512e0b11e2f4,"Remove support for testing in Docker

I think these were useful for developing on Windows but I worry they're
a little distracting since tox should work. We can revert this change if
we want them back."
266,https://api.github.com/repos/mozilla/mozanalysis/pulls/42,42,Build/test cleanups,"Clean up some build and test config.

Importantly, this makes docs warnings errors again, so this should fail until we patch that up.",tdsmith,173889,2019-05-24T23:27:16Z,MEMBER,True,29,331,12,A library for Mozilla experiments analysis,Python,d2270868fdd3c23501ded23ed26f1dae268315d2,"Simplify docs build

Keep all our extra requirements in the same place and avoid `make`."
267,https://api.github.com/repos/mozilla/mozanalysis/pulls/42,42,Build/test cleanups,"Clean up some build and test config.

Importantly, this makes docs warnings errors again, so this should fail until we patch that up.",tdsmith,173889,2019-05-24T23:27:16Z,MEMBER,True,29,331,12,A library for Mozilla experiments analysis,Python,972b82a9e4fec715d67a457b1ae4a5d37ad07dca,Remove stats docs stub
268,https://api.github.com/repos/mozilla/mozanalysis/pulls/42,42,Build/test cleanups,"Clean up some build and test config.

Importantly, this makes docs warnings errors again, so this should fail until we patch that up.",tdsmith,173889,2019-05-24T23:27:16Z,MEMBER,True,29,331,12,A library for Mozilla experiments analysis,Python,929a4e4361f4fbfce5df05e0deda06017aafa354,Fix Sphinx warning about missing path
269,https://api.github.com/repos/mozilla/mozanalysis/pulls/42,42,Build/test cleanups,"Clean up some build and test config.

Importantly, this makes docs warnings errors again, so this should fail until we patch that up.",tdsmith,173889,2019-05-24T23:27:16Z,MEMBER,True,29,331,12,A library for Mozilla experiments analysis,Python,c49b415a999af0097739d0fd2b43d9d6cdc055b3,Add tox usage note
270,https://api.github.com/repos/mozilla/mozanalysis/pulls/41,41,Work around unsafe fork in pyspark,"Touching core Objective C classes from a child process (in the case of
fork() without exec()) causes a defensive crash in recent versions of
macOS.

Pyspark forks unsafely, which triggers the defensive crash, which causes
tests to fail.

This doesn't fix anything -- it just disables the airbag -- but a proper
fix would have to land in pyspark.

Closes #40.",tdsmith,173889,2019-05-24T22:55:37Z,MEMBER,True,1,0,1,A library for Mozilla experiments analysis,Python,4a07b0bb14262ceeb6d7cc647a757ed02ad3992c,"Work around unsafe fork in pyspark

Touching core Objective C classes from a child process (in the case of
fork() without exec()) causes a defensive crash in recent versions of
macOS.

Pyspark forks unsafely, which triggers the defensive crash, which causes
tests to fail.

This doesn't fix anything -- it just disables the airbag -- but a proper
fix would have to land in pyspark.

Closes #40."
271,https://api.github.com/repos/mozilla/mozanalysis/pulls/39,39,Work around bug in Spark joining.,"If you start with a DataFrame, aggregate over it, then join from the aggregation to the original DataFrame, then Spark can raise an AnalysisException, complaining about duplicated names even if you've been careful to rename them. Specifically, this happened with 'submission_date_s3'.

Since it _actually is a unique name_, we can use `F.col('submission_date_s3')` instead of `data_source.submission_date_s3` to work around this problem. If someone supplies an `enrollments` table that _does_ have a `submission_date_s3` column then Spark justifiably raises a meaningful error.

Added the fix, a short comment explaining it with a reference to the bug[1], and a test that failed before the bug was fixed.

[1] https://issues.apache.org/jira/browse/SPARK-10925",felixlawrence,5019234,2019-05-24T17:45:48Z,CONTRIBUTOR,True,40,3,2,A library for Mozilla experiments analysis,Python,0836aed621c01f94cd5da5d57d61d603369fa8d3,"Work around bug in Spark joining.

If you start with a DataFrame, aggregate over it, then join from the aggregation to the original DataFrame, then Spark can raise an AnalysisException, complaining about duplicated names even if you've been careful to rename them. Specifically, this happened with 'submission_date_s3'.

Since it _actually is a unique name_, we can use `F.col('submission_date_s3')` instead of `data_source.submission_date_s3` to work around this problem. If someone supplies an `enrollments` table that _does_ have a `submission_date_s3` column then Spark justifiably raises a meaningful error.

Added the fix, a short comment explaining it with a reference to the bug[1], and a test that failed before the bug was fixed.

[1] https://issues.apache.org/jira/browse/SPARK-10925"
272,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,0264505555eb3c8c0ac139314fb14985c9e01a0c,"First step in a new direction.

This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions"
273,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,dc731f161049e8cbf75ba2444bc3f5fa9177a844,Clarify docs
274,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,51f3d68f1df5bf0303f096729b20f3c683215e92,There is space for this concern under the rug
275,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,9f79049305a165e367ad2bea912d31533bf89b8e,Support querying from dfs without an experiments map.
276,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,953092591799ff46c1b64ce693eed74e07ec79bf,Do some of tdsmith's suggestions
277,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,f5e0398271526b697e51b198dff3e3c3796f4337,Do more of tdsmith's suggestions
278,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,010fa5bb5a6095a3700796086f27c94cb0752669,Do some of teonbrooks' suggestions and more of tdsmith's
279,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,4ac4bd7aa4490baaf6a951624043e38a16889049,Repeat the fix for repeated docs
280,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,86150724e64380084f075099e1195d0e0afd1708,Clarify docs following teonbrooks' review
281,https://api.github.com/repos/mozilla/mozanalysis/pulls/38,38,First step in a new direction.,"This commit removes a lot of the existing code, and takes the first step on a new roadmap that takes mozanalysis beyond the `experiments` table, and aims to make safe and rigorous analyses easier than the alternative, while maintaining 'enough' flexibility.

This commit introduces the basic query infrastructure - most of the code that builds Spark queries.

Still to come in mozanalysis or mozreport (out of scope for this PR):
- A variety of stats functions to analyze the data output by `Experiment.get_per_client_data()`
- A library of pre-defined and blessed metrics
- Convenience functions for querying and analyzing time series (time since enrollment)
- Functions to visualize/present the output of stats functions

The plan is to leave this PR open until at least May 1, so that the DS team has time to review `experiment.py` against their needs, and request any major changes. Smaller suggestions are of course welcome at any time.",felixlawrence,5019234,2019-04-25T20:29:13Z,CONTRIBUTOR,True,892,612,11,A library for Mozilla experiments analysis,Python,b58e482fd6aec9a9a29e5037761a9e6e1b15316e,Change nomenclature per teonbrooks' review and jmccrosky's suggestion
282,https://api.github.com/repos/mozilla/mozanalysis/pulls/37,37,Add retention metrics,"This involves a major refactor to support both engagement and retention
metrics.

Fixes #27",robhudson,1106,2019-04-03T00:27:53Z,MEMBER,False,310,342,4,A library for Mozilla experiments analysis,Python,1a746a3b6ca1b47612dffdf736f9474c11346f68,"Add retention metrics

This involves a major refactor to support both engagement and retention
metrics.

Fixes #27"
283,https://api.github.com/repos/mozilla/mozanalysis/pulls/36,36,Add Mozilla Code of Conduct,"Fixes #35


As of January 1 2019, Mozilla requires that all GitHub projects include this [CODE_OF_CONDUCT.md](https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md) file in the project root. The file has two parts:

1. Required Text - All text under the headings *Community Participation Guidelines and How to Report*, are required, and should not be altered.
2. Optional Text - The Project Specific Etiquette heading provides a space to speak more specifically about ways people can work effectively and inclusively together. Some examples of those can be found on the [Firefox Debugger](https://github.com/devtools-html/debugger.html/blob/master/CODE_OF_CONDUCT.md) project, and [Common Voice](https://github.com/mozilla/voice-web/blob/master/CODE_OF_CONDUCT.md). (The optional part is commented out in the [raw template file](https://raw.githubusercontent.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md), and will not be visible until you modify and uncomment that part.)

If you have any questions about this file, or Code of Conduct policies and procedures, please see [Mozilla-GitHub-Standards](https://wiki.mozilla.org/GitHub/Repository_Requirements) or email Mozilla-GitHub-Standards+CoC@mozilla.com.

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-30T07:01:35Z,CONTRIBUTOR,True,15,0,1,A library for Mozilla experiments analysis,Python,0c2a278cd52bc12beb25f7c52c45c91af35ec8c2,"Add Mozilla Code of Conduct file

Fixes #35.

_(Message COC002)_"
284,https://api.github.com/repos/mozilla/mozanalysis/pulls/31,31,Add search ads metric,This creates a contributor directory for my personal use (`contrib/bmiroglio`) containing a single function that calculates ad aggregates (sums and click through rates).,benmiroglio,8593945,2019-03-12T22:36:41Z,CONTRIBUTOR,True,45,0,2,A library for Mozilla experiments analysis,Python,4da5c25c7bed32087d3b692a2338f0dc8ee02ca8,Add search ads metric
285,https://api.github.com/repos/mozilla/mozanalysis/pulls/31,31,Add search ads metric,This creates a contributor directory for my personal use (`contrib/bmiroglio`) containing a single function that calculates ad aggregates (sums and click through rates).,benmiroglio,8593945,2019-03-12T22:36:41Z,CONTRIBUTOR,True,45,0,2,A library for Mozilla experiments analysis,Python,21fd5eb1af183c6cf62efab9cd6714d2f1095edb,Add newline to end of file
286,https://api.github.com/repos/mozilla/mozanalysis/pulls/31,31,Add search ads metric,This creates a contributor directory for my personal use (`contrib/bmiroglio`) containing a single function that calculates ad aggregates (sums and click through rates).,benmiroglio,8593945,2019-03-12T22:36:41Z,CONTRIBUTOR,True,45,0,2,A library for Mozilla experiments analysis,Python,498d3418879504487ae952ac56e416bfc1ee15fb,Fix flake8 errors
287,https://api.github.com/repos/mozilla/mozanalysis/pulls/30,30,Add code to run Bayesian analyses on A/B test uplifts,,felixlawrence,5019234,2019-02-26T22:40:18Z,CONTRIBUTOR,False,323,0,3,A library for Mozilla experiments analysis,Python,0321971f185683cceecf2b557514efb652a7b3d4,Add code to run Bayesian analyses on A/B test uplifts
288,https://api.github.com/repos/mozilla/mozanalysis/pulls/30,30,Add code to run Bayesian analyses on A/B test uplifts,,felixlawrence,5019234,2019-02-26T22:40:18Z,CONTRIBUTOR,False,323,0,3,A library for Mozilla experiments analysis,Python,f51bdf02f196e5fdbf47948927928513d283709c,Add a function illustrating what _resample_parallel does
289,https://api.github.com/repos/mozilla/mozanalysis/pulls/29,29,Proposed changes to support retention metrics,,robhudson,1106,2019-02-07T21:00:34Z,MEMBER,False,59,12,3,A library for Mozilla experiments analysis,Python,d8a19e3b3b55a82ee29367da5f3addd64244b76d,Proposed changes to support retention metrics
290,https://api.github.com/repos/mozilla/mozanalysis/pulls/28,28,Tests refactor,,robhudson,1106,2019-02-06T23:21:43Z,MEMBER,True,52,50,4,A library for Mozilla experiments analysis,Python,f17703f81f384d342ee3afe328aa0f5ea307723d,python black reformatting
291,https://api.github.com/repos/mozilla/mozanalysis/pulls/28,28,Tests refactor,,robhudson,1106,2019-02-06T23:21:43Z,MEMBER,True,52,50,4,A library for Mozilla experiments analysis,Python,55e2fd5fa41652f2d82775370e240069d5df870e,Made spark context global
292,https://api.github.com/repos/mozilla/mozanalysis/pulls/26,26,"Add the `contrib` namespace, and two util fns.","The contrib namespace is a place for code that is being re-used
across multiple reports/investigations, and may or may not be ready
for others to start using it yet. One day this code dreams of being
promoted out of contrib and into the main package. Until then,
others are welcome to look at and even use your code, but should
not be surprised when breaking changes are silently made. If they
want reliability, then they should ask for/help with its promotion
out of contrib.",felixlawrence,5019234,2019-01-29T23:36:05Z,CONTRIBUTOR,True,216,1,6,A library for Mozilla experiments analysis,Python,a13e18c20d7021daf6e35a90ca9e19240472d641,"Add the `contrib` namespace, and two util fns.

The contrib namespace is a place for code that is being re-used
across multiple reports/investigations, and may or may not be ready
for others to start using it yet. One day this code dreams of being
promoted out of contrib and into the main package. Until then,
others are welcome to look at and even use your code, but should
not be surprised when breaking changes are silently made. If they
want reliability, then they should ask for/help with its promotion
out of contrib."
293,https://api.github.com/repos/mozilla/mozanalysis/pulls/26,26,"Add the `contrib` namespace, and two util fns.","The contrib namespace is a place for code that is being re-used
across multiple reports/investigations, and may or may not be ready
for others to start using it yet. One day this code dreams of being
promoted out of contrib and into the main package. Until then,
others are welcome to look at and even use your code, but should
not be surprised when breaking changes are silently made. If they
want reliability, then they should ask for/help with its promotion
out of contrib.",felixlawrence,5019234,2019-01-29T23:36:05Z,CONTRIBUTOR,True,216,1,6,A library for Mozilla experiments analysis,Python,db1d121bde9f8092564e5c964618bd9cdca2b2cb,Tweaks per review
294,https://api.github.com/repos/mozilla/mozanalysis/pulls/25,25,Add `mozanalysis.stats` to docs ,,robhudson,1106,2019-01-22T21:07:32Z,MEMBER,True,16,10,3,A library for Mozilla experiments analysis,Python,884a5ec60f47f91c220ccd2c57fba55b75bfdf88,Add `mozanalysis.stats` docs
295,https://api.github.com/repos/mozilla/mozanalysis/pulls/24,24,Add docs,,robhudson,1106,2019-01-17T19:11:19Z,MEMBER,True,579,71,11,A library for Mozilla experiments analysis,Python,a7623f51cec87227835eec46eb72324130515f29,"Start adding documentation

Run sphinx-quickstart and add sphinx to tox."
296,https://api.github.com/repos/mozilla/mozanalysis/pulls/24,24,Add docs,,robhudson,1106,2019-01-17T19:11:19Z,MEMBER,True,579,71,11,A library for Mozilla experiments analysis,Python,c3840253d1ecf31d8962d13efbb296a7cf790821,Continue adding skeleton documentation
297,https://api.github.com/repos/mozilla/mozanalysis/pulls/24,24,Add docs,,robhudson,1106,2019-01-17T19:11:19Z,MEMBER,True,579,71,11,A library for Mozilla experiments analysis,Python,9534f4cd3e06c17d7bba5b10a8eaf04ee20ea2bc,Fix up formatting of UDF docstrings
298,https://api.github.com/repos/mozilla/mozanalysis/pulls/24,24,Add docs,,robhudson,1106,2019-01-17T19:11:19Z,MEMBER,True,579,71,11,A library for Mozilla experiments analysis,Python,682f78f71e8ce9d7279053024bf259c1fd89ca74,"Build UDF API docs

pyspark needs to be importable, so add the testing extra.
We'll also use the napoleon extension, to be able to write Google-style
docstrings."
299,https://api.github.com/repos/mozilla/mozanalysis/pulls/24,24,Add docs,,robhudson,1106,2019-01-17T19:11:19Z,MEMBER,True,579,71,11,A library for Mozilla experiments analysis,Python,4538813ec466e5b0883ae7558b3d4d76b424d3b1,Add docs deploy via CircleCI config
300,https://api.github.com/repos/mozilla/mozanalysis/pulls/23,23,Don't unpersist the dataset,"Spark is smart about unpersisting on its own, and we may want to perform
additional computations on the cached data if we're working
interactively.",tdsmith,173889,2019-01-09T00:51:12Z,MEMBER,True,21,1,2,A library for Mozilla experiments analysis,Python,0e6322676ccb76ae5afd4ff73ebde744b1c089f5,"Don't unpersist the dataset

Spark is smart about unpersisting on its own, and we may want to perform
additional computations on the cached data if we're working
interactively."
301,https://api.github.com/repos/mozilla/mozanalysis/pulls/23,23,Don't unpersist the dataset,"Spark is smart about unpersisting on its own, and we may want to perform
additional computations on the cached data if we're working
interactively.",tdsmith,173889,2019-01-09T00:51:12Z,MEMBER,True,21,1,2,A library for Mozilla experiments analysis,Python,a823f9be1f40762cae67390783ca2e25c5670724,"Leave the cache state as we found it

In order to avoid persisting DataFrames unnecessarily or unpersisting
DataFrames that users wanted to touch interactively after calling
analyze(), try to leave the cache state of DataFrames the way we found
it when analyze() was invoked.

`is_cached` is an undocumented DataFrame property, so be defensive about
accessing it in case a future Spark version removes it."
302,https://api.github.com/repos/mozilla/mozanalysis/pulls/19,19,Fix intensity definition,"Per e.g.
https://metrics.mozilla.com/protected/sguha/shield_bootstrap.html,
intensity should be active_hours / total_hours, so that it ends up
generally being a fraction on [0, 1].",tdsmith,173889,2018-12-05T04:52:05Z,MEMBER,True,4,4,2,A library for Mozilla experiments analysis,Python,268b2852ef1dde738bea6a476726abcd299d8710,"Fix intensity definition

Per e.g.
https://metrics.mozilla.com/protected/sguha/shield_bootstrap.html,
intensity should be active_hours / total_hours, so that it ends up
generally being a fraction on [0, 1]."
303,https://api.github.com/repos/mozilla/mozanalysis/pulls/19,19,Fix intensity definition,"Per e.g.
https://metrics.mozilla.com/protected/sguha/shield_bootstrap.html,
intensity should be active_hours / total_hours, so that it ends up
generally being a fraction on [0, 1].",tdsmith,173889,2018-12-05T04:52:05Z,MEMBER,True,4,4,2,A library for Mozilla experiments analysis,Python,fd9c19452862cf9b5fd72b60f0e37e8d1027e585,Update tests
304,https://api.github.com/repos/mozilla/mozanalysis/pulls/18,18,Add some UDFs,Closes #10.,tdsmith,173889,2018-11-22T00:36:45Z,MEMBER,True,311,1,3,A library for Mozilla experiments analysis,Python,d8bb69a290e16a8933822e01ad6e263461b787d5,Add some UDFs
305,https://api.github.com/repos/mozilla/mozanalysis/pulls/18,18,Add some UDFs,Closes #10.,tdsmith,173889,2018-11-22T00:36:45Z,MEMBER,True,311,1,3,A library for Mozilla experiments analysis,Python,f425515c5cf8719c4c0407e9b508482e82676da6,Test the histogram UDFs together
306,https://api.github.com/repos/mozilla/mozanalysis/pulls/18,18,Add some UDFs,Closes #10.,tdsmith,173889,2018-11-22T00:36:45Z,MEMBER,True,311,1,3,A library for Mozilla experiments analysis,Python,072b4b693c275784ef57e3c9ef5a9f7a3dac49c8,"Add UDF for thresholding histograms

Computes the fraction of values in a histogram equal to or exceeding a particular value."
307,https://api.github.com/repos/mozilla/mozanalysis/pulls/18,18,Add some UDFs,Closes #10.,tdsmith,173889,2018-11-22T00:36:45Z,MEMBER,True,311,1,3,A library for Mozilla experiments analysis,Python,65f72358f868e0b125efca22b980be94e5d1fdf6,Add tests for histogram threshold UDF
308,https://api.github.com/repos/mozilla/mozanalysis/pulls/18,18,Add some UDFs,Closes #10.,tdsmith,173889,2018-11-22T00:36:45Z,MEMBER,True,311,1,3,A library for Mozilla experiments analysis,Python,05ca0f6c6be9623ba49563f2ece893366cdc3302,Empty commit
309,https://api.github.com/repos/mozilla/mozanalysis/pulls/17,17,Make the tests a little more concise?,"I did this to help me understand the tests -- originally I thought I was going to address #16 in part by adding rows to _generate_data, but then decided against. I don't have strong feelings about whether this is a better way to write the tests or not. I thought it might be a little clearer but maybe that's just because rewriting them forced me to understand them. If you don't prefer this then let's not bother changing it.",tdsmith,173889,2018-11-21T23:31:31Z,MEMBER,True,23,27,1,A library for Mozilla experiments analysis,Python,12100233d6990feb8c8816422044973c2a4b47b4,Make the tests a little more concise
310,https://api.github.com/repos/mozilla/mozanalysis/pulls/17,17,Make the tests a little more concise?,"I did this to help me understand the tests -- originally I thought I was going to address #16 in part by adding rows to _generate_data, but then decided against. I don't have strong feelings about whether this is a better way to write the tests or not. I thought it might be a little clearer but maybe that's just because rewriting them forced me to understand them. If you don't prefer this then let's not bother changing it.",tdsmith,173889,2018-11-21T23:31:31Z,MEMBER,True,23,27,1,A library for Mozilla experiments analysis,Python,f21dadda7172fbd9c8ca2028fc7acafd604a51a6,Restore explanatory comments
311,https://api.github.com/repos/mozilla/mozanalysis/pulls/16,16,Handle null values,"When I tried running this on data from an in-the-wild experiment I got some failures about missing values.
This adds a test and then handles the case where clients don't report values.
For all of these values, the true value should be zero when the observation is missing.",tdsmith,173889,2018-11-21T23:27:06Z,MEMBER,True,51,3,2,A library for Mozilla experiments analysis,Python,03095cbad21fd1e5c4bd61de8f1ae7627a751e69,Test data including nulls
312,https://api.github.com/repos/mozilla/mozanalysis/pulls/16,16,Handle null values,"When I tried running this on data from an in-the-wild experiment I got some failures about missing values.
This adds a test and then handles the case where clients don't report values.
For all of these values, the true value should be zero when the observation is missing.",tdsmith,173889,2018-11-21T23:27:06Z,MEMBER,True,51,3,2,A library for Mozilla experiments analysis,Python,3a880be8a40774d1cbf3d824bfe579f875bb1770,"Fill missing zeros

Some telemetry fields are NULL when they are not reported from the client,
which for these metrics means the actual value of the metric was zero.
Fill these missing zeros so that the bootstrap metrics don't complain."
313,https://api.github.com/repos/mozilla/mozanalysis/pulls/13,13,Fix #5: Switch to basic bootstrap for confidence intervals,,robhudson,1106,2018-11-15T01:03:45Z,MEMBER,True,29,30,3,A library for Mozilla experiments analysis,Python,a052cbcbfe3978d93337fe7afad228bc9f32fe48,Fix #5: Switch to basic bootstrap for confidence intervals
314,https://api.github.com/repos/mozilla/mozanalysis/pulls/9,9,Add ExperimentAnalysis and engagement metrics,,robhudson,1106,2018-10-25T23:46:09Z,MEMBER,True,530,20,11,A library for Mozilla experiments analysis,Python,eb0f6a3a20ce88c022a315ec1adf1df2a2cb1461,Set up Python formatting with black
315,https://api.github.com/repos/mozilla/mozanalysis/pulls/9,9,Add ExperimentAnalysis and engagement metrics,,robhudson,1106,2018-10-25T23:46:09Z,MEMBER,True,530,20,11,A library for Mozilla experiments analysis,Python,9d13bf110e6b91c0c8a822096a6af43a39c26233,Add ExperimentAnalysis and engagement metrics
316,https://api.github.com/repos/mozilla/mozanalysis/pulls/8,8,Add license headers,,robhudson,1106,2018-10-02T23:11:43Z,MEMBER,True,21,1,7,A library for Mozilla experiments analysis,Python,7c2ad4489cb2ff559092f7eb38ed0cf4b9cc134c,Add license headers
317,https://api.github.com/repos/mozilla/mozanalysis/pulls/6,6,Pass expected argument to --cov,,robhudson,1106,2018-09-20T20:43:44Z,MEMBER,True,2,1,1,A library for Mozilla experiments analysis,Python,6918d23365d2f7c59810e5afd9d8adad92ddf0a7,Pass expected argument to --cov
318,https://api.github.com/repos/mozilla/mozanalysis/pulls/4,4,Move bootstrap import path to `mozanalysis.stats`,,robhudson,1106,2018-09-18T23:29:14Z,MEMBER,True,2,2,2,A library for Mozilla experiments analysis,Python,979031903ca8441920ba4b22e8532366fde9d3f5,Move bootstrap import path to `mozanalysis.stats`
319,https://api.github.com/repos/mozilla/mozanalysis/pulls/3,3,Pass boostrapped data to percentile,,robhudson,1106,2018-09-18T19:10:13Z,MEMBER,True,12,2,3,A library for Mozilla experiments analysis,Python,0fcea15d4828bfd68dce19a8f09396ffd1406e38,Pass boostrapped data to percentile
320,https://api.github.com/repos/mozilla/mozanalysis/pulls/2,2,Updates to prep for tagging releases,,robhudson,1106,2018-09-18T17:49:35Z,MEMBER,True,29,10,4,A library for Mozilla experiments analysis,Python,a9055e6578c65e1f97c09e61514ccfabaec0e5fd,Updates to prep for tagging releases
321,https://api.github.com/repos/mozilla/mozanalysis/pulls/1,1,Implement distributed bootstrap (bug 1485811),,robhudson,1106,2018-09-13T20:34:33Z,MEMBER,True,404,2,14,A library for Mozilla experiments analysis,Python,27ded4a05291671894cbdf238f8e4386c15695e0,"Add docker and testing set up

Borrowed heavily from mozilla/python_moztelemetry"
322,https://api.github.com/repos/mozilla/mozanalysis/pulls/1,1,Implement distributed bootstrap (bug 1485811),,robhudson,1106,2018-09-13T20:34:33Z,MEMBER,True,404,2,14,A library for Mozilla experiments analysis,Python,45046d9110bcd787666f81e334a4226872f6ee0f,Implement distributed bootstrap (bug 1485811)
