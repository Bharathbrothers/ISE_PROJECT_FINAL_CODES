,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/chromeless/pulls/175,175,docs: fix typo,,Jason-Cooke,5185660,2019-10-15T20:34:13Z,NONE,False,1,1,1,Build desktop applications with web technologies.,JavaScript,f88d9572b62fbba26b1de1c1a510c9ae78e85a0e,docs: fix typo
1,https://api.github.com/repos/mozilla/chromeless/pulls/174,174,Add Mozilla Code of Conduct,"Fixes #173


As of January 1 2019, Mozilla requires that all GitHub projects include this [CODE_OF_CONDUCT.md](https://github.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md) file in the project root. The file has two parts:

1. Required Text - All text under the headings *Community Participation Guidelines and How to Report*, are required, and should not be altered.
2. Optional Text - The Project Specific Etiquette heading provides a space to speak more specifically about ways people can work effectively and inclusively together. Some examples of those can be found on the [Firefox Debugger](https://github.com/devtools-html/debugger.html/blob/master/CODE_OF_CONDUCT.md) project, and [Common Voice](https://github.com/mozilla/voice-web/blob/master/CODE_OF_CONDUCT.md). (The optional part is commented out in the [raw template file](https://raw.githubusercontent.com/mozilla/repo-templates/blob/master/templates/CODE_OF_CONDUCT.md), and will not be visible until you modify and uncomment that part.)

If you have any questions about this file, or Code of Conduct policies and procedures, please see [Mozilla-GitHub-Standards](https://wiki.mozilla.org/GitHub/Repository_Requirements) or email Mozilla-GitHub-Standards+CoC@mozilla.com.

_(Message COC002)_",Mozilla-GitHub-Standards,48073334,2019-03-29T04:41:50Z,NONE,False,15,0,1,Build desktop applications with web technologies.,JavaScript,5a18de3fc6cd424339bb390866bee5b089112ffb,"Add Mozilla Code of Conduct file

Fixes #173.

_(Message COC002)_"
2,https://api.github.com/repos/mozilla/chromeless/pulls/169,169,Update URL for xulrunner 6.0.2 on windows to make it work.,"The xulrunner release for windows is at http://ftp.mozilla.org/pub/mozilla.org/xulrunner/releases/6.0.2/runtimes/xulrunner-6.0.2.en-US.win32.zip

I couldn't get through the example in the documentation because chromeless kept trying to get the xulrunner from a location where it does not exist. After changing the URL, the xulrunner package could be fetched and the example ran.
",matthewkastor,1127586,2013-01-31T21:36:53Z,NONE,False,1,1,1,Build desktop applications with web technologies.,JavaScript,59c0518e1c39d59afaa76c28bc19337e568c0130,"Update impl/mozfetcher/_config.py

The xulrunner release for windows is at http://ftp.mozilla.org/pub/mozilla.org/xulrunner/releases/6.0.2/runtimes/xulrunner-6.0.2.en-US.win32.zip

I couldn't get through the example in the documentation because chromeless kept trying to get the xulrunner from a location where it does not exist. After changing the URL, the xulrunner package could be fetched and the example ran."
3,https://api.github.com/repos/mozilla/chromeless/pulls/168,168,Updated links for xulrunner SDK,,cprecioso,511681,2012-04-28T19:43:41Z,NONE,False,4,4,1,Build desktop applications with web technologies.,JavaScript,bed97a0967b2edcd39408ade37af9287a3346e0d,Updated urls for xulrunner 6.0.2
4,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,64c2f4e3227f855a4e0d9eac5f93d60107811e22,Changed XULRunner SDK locations from releases.mozilla.org to ftp.mozilla.org
5,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,25806375349307ff76d6d67e13db68f889342c03,Changed XUL Runner to 8.0 and separated out i386 and x86_64 Darwin archs for XUL Runner.
6,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,66a08057de69f8a0c40856ecbcbd28e3baca973b,Updating XULRunner urls and md5s for 9.0.1
7,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,7d617127e38f3a9646000869dab696e2ad0ec1b3,Updating XULRunner urls and md5s for 10.0.2
8,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,e52d365638616443e0a8f53972b468bef1d4196b,Updating XULRunner urls and md5s for 11.0
9,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,137db0609c79678365736b8db0d4e838ce0ee68a,"Fix gkmedias.dll path, move out of xulrunner to app root directory."
10,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,17f76de6d517eeaa40fb5a95fef57776c120921f,"Merge pull request #1 from noomz/master

Update appifier script"
11,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,9714f472079e73daf22d2890a2ced268612a74d4,Updating XULRunner urls and md5s for 12.0
12,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,0a1d4af3f692afed0dadeb5fbb5eb5c6fb540153,Updating XULRunner urls and md5s for 13.0
13,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,df0de54a0585b8bf1efdcb00244b0dce1006cd2c,Updating XULRunner urls and md5s for 13.0.1
14,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,e5f8d66ed6c69af5f76a9110643ea865fab36e49,Updating XULRunner urls and md5s for 14.0.1
15,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,b2b54d115c94a4d2fce7a21453dd7050066b8b3d,Updating XULRunner urls and md5s for 15.0.1
16,https://api.github.com/repos/mozilla/chromeless/pulls/167,167,Update XULRunner to latest version and fix url,"Updated the download to XULRunner 11, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-04-26T03:24:55Z,NONE,False,31,27,7,Build desktop applications with web technologies.,JavaScript,83203133e292d164cd53e420c1a7b747fc848ef2,UPdating XULRunnerurls and md5s for 16.0.2
17,https://api.github.com/repos/mozilla/chromeless/pulls/166,166,fix download links: releases.mozilla.org -> ftp.mozilla.org,"The download links in chromeless have been broken for a while, as releases.mozilla.org does not host xulrunner any more. This commit changes the download urls to ftp.mozilla.org.
",fbreuer,104177,2012-03-25T15:23:23Z,NONE,False,4,4,1,Build desktop applications with web technologies.,JavaScript,e00e3dfceb9dddaeed50eae17091f325f6cfbad6,fix download links (releases.mozilla.org does not host xulrunner any more)
18,https://api.github.com/repos/mozilla/chromeless/pulls/165,165,Fixing xulrunner urls,"fixes #164 - https://github.com/mozilla/chromeless/issues/164
",jkmaxwell,342903,2012-02-29T03:01:00Z,NONE,False,4,4,1,Build desktop applications with web technologies.,JavaScript,526d42da245d86a7bf90b1dce891a27f5a2d754a,"Changed ""...//releases.mozilla"" to ""...ftp.mozilla"""
19,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,64c2f4e3227f855a4e0d9eac5f93d60107811e22,Changed XULRunner SDK locations from releases.mozilla.org to ftp.mozilla.org
20,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,25806375349307ff76d6d67e13db68f889342c03,Changed XUL Runner to 8.0 and separated out i386 and x86_64 Darwin archs for XUL Runner.
21,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,66a08057de69f8a0c40856ecbcbd28e3baca973b,Updating XULRunner urls and md5s for 9.0.1
22,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,9000c07a344cd7860ff30734631d6c9915e1ba33,importing initial xulupdate script
23,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,86c06e5eebabf8a5482537d3f3be5388472a7077,Adding wip md5 checking
24,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,383747104a327b115acc43018134f959bc8f11ba,finishing basic generation
25,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,d9c68b581bd9f99859b285b8327eaf7619f5f6a5,"Finishing up script

Polishing output
Fixing last few bugs"
26,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,10a7c0698e18127489f125f9c66c4619e935ec89,fixing typos to make sure 8.0 generates the same for the real
27,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,7d617127e38f3a9646000869dab696e2ad0ec1b3,Updating XULRunner urls and md5s for 10.0.2
28,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,82f48711f8ddb5506ab51de81a3a938dadbf0867,Merge branch 'master'
29,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,e52d365638616443e0a8f53972b468bef1d4196b,Updating XULRunner urls and md5s for 11.0
30,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,137db0609c79678365736b8db0d4e838ce0ee68a,"Fix gkmedias.dll path, move out of xulrunner to app root directory."
31,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,17f76de6d517eeaa40fb5a95fef57776c120921f,"Merge pull request #1 from noomz/master

Update appifier script"
32,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,38ed48cac2f6b07d05cdba027107169a94811673,Add options for width and height
33,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,c61310b7b87b1f2a8d8c73956cb4ccec26dc5cfb,Adding default width and height
34,https://api.github.com/repos/mozilla/chromeless/pulls/162,162,Update XULRunner to 9.0.1,"Updated the download to XULRunner 9.0.1, at the correct (ftp.mozilla.org) location
Also separated mac builds into i386 and x64
Tested on Linux
",byteit101,577344,2012-01-05T20:23:14Z,NONE,False,240,28,10,Build desktop applications with web technologies.,JavaScript,27c949a4732bb2850de560e533a1dd285337b36f,Merge
35,https://api.github.com/repos/mozilla/chromeless/pulls/161,161,Change where xulrunner is fetched from,"Use the ftp instead of the (apparently removed) http address
",tmpvar,46673,2011-12-07T22:38:24Z,NONE,False,4,4,1,Build desktop applications with web technologies.,JavaScript,676cb16d755223833cb239bf59fed70f61ae4603,"Fix: looks like the url to xulrunner was invalid, lets use ftp instead"
36,https://api.github.com/repos/mozilla/chromeless/pulls/160,160,Change xulrunner URLs host from releases.mozilla.org to ftp.mozilla.org,"xulrunner seems not to be available on releases.mozilla.org (anymore). Fixes #159
",philippbosch,57509,2011-12-06T11:25:53Z,NONE,False,4,4,1,Build desktop applications with web technologies.,JavaScript,9da0aea92341d7d9e584c255cda36266c231dfef,Change xulrunner URLs host from releases.mozilla.org (doesn't have xulrunner) to ftp.mozilla.org.
37,https://api.github.com/repos/mozilla/chromeless/pulls/156,156,#42 Desktop notifications fix,"Now desktop notifications works!
Tested in Linux.
",3demax,128981,2011-11-21T15:52:57Z,NONE,False,46,32,1,Build desktop applications with web technologies.,JavaScript,9f3f126f478c241c495d4cba7f01c98597a79202,[#42] Desktop notifications implementation
38,https://api.github.com/repos/mozilla/chromeless/pulls/138,138,Adding support for non-printed characters to keyboard shortcuts,"A small change to give support to more keyboard shortcuts.  Just a special case to let XULRunner do more.
",mzlee,682724,2011-07-17T16:27:17Z,NONE,False,5,1,1,Build desktop applications with web technologies.,JavaScript,cfd6ba3b916a1ed30658275bc20e1940234290db,Small modification to allow for more expressive hotkeys
39,https://api.github.com/repos/mozilla/chromeless/pulls/136,136,Add fetcher for 64-bit Mac OS X,"Separated the darwin section into 32- and 64-bit pieces, similar to Linux.  Tried this with examples/jsctypes (after building libmylib.dylib as -m64).  Didn't go much further, though.
",linuxwolf,757401,2011-07-15T16:42:08Z,NONE,False,0,0,0,Build desktop applications with web technologies.,JavaScript,363fc2a05757ee1b1461fde7bd1f153deaf96207,add support for 64-bit darwin
40,https://api.github.com/repos/mozilla/chromeless/pulls/136,136,Add fetcher for 64-bit Mac OS X,"Separated the darwin section into 32- and 64-bit pieces, similar to Linux.  Tried this with examples/jsctypes (after building libmylib.dylib as -m64).  Didn't go much further, though.
",linuxwolf,757401,2011-07-15T16:42:08Z,NONE,False,0,0,0,Build desktop applications with web technologies.,JavaScript,fea8beb66eac211bd9e858ffe9c3793471e40a9f,working around upstream updates
41,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,c185e2603d5ac6b727960b9e9f55f8c785d6117e,"Add support for a default xulrunner configuration

When no match for the platform is found in the software configuration
dictionary in impl/mozfetcher/_config.py then the ""default"" entry is
used if exists. In order to run an independently upgraded system-wide
xulrunner version the use of unsigned versions is made possible."
42,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,5d786ea10988b5f6a5e785055518a3d7b8e43852,"Require xulrunner v2.0.1 or higher

The minimal xulrunner version that seems to work with the framework
is 2.0.1. The maximal version is leaved open to avoid conflicts with
distribution updates."
43,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,60c836cac5de36e7bd4ad80b6d383ae4ebf75265,"Modify on-demand copies of application files

The attempt is made to modify some of the linked files in the root
directory of a runnung application (i.e. build/name). However, the
original file a link is pointed to may not be write-accessible for
the running process (in the case the application path is passed from
one user to another, or it is a system-wide installation of an example
application). When that is the case, the symlink is substituted with
the write-accessible copy."
44,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,d2ffc74c040be4adaffbd3dd3ac1aebceb049bf4,Merge branch 'sys-layout'
45,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,2d8ad1a62c1d80474260af2ccf588601c7a12ad4,"Place the 'build' directory under the user home directory

Introduce the 'home' directory with the path ""~/.chromeless"". Place
the 'build' under that 'home' directory (i.e. ""~/.chromeless/build"")."
46,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,e52d2dfde0d17b25b5c3a9199d1f40e63980a84b,Merge branch 'sys-layout'
47,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,5517dece4dee33bbb22e06b01a985097cc534df3,"Write the test output to the home directory

Symlink (fallback to copy) the 'test_harness' module to the home
modules directory (""~/.chromeless/modules/internal) and write the
test output script to that module copy. Thus, the contents of
the original module directory are not modified."
48,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,239527dade9f32098faabfa85859337d666121aa,"Add the chromeless system-wide startup script

The 'chromeless' startup script to be placed in the default path
sets the CUDDLEFISH_ROOT environment variable and then runs the
main Chromeless Python script."
49,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,87d0d0c1e899122ba277d1079ff314b7783e2f80,Merge branch 'sys-layout'
50,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,e355734bbed00585d5801478f9729bee3523d242,Search for the 'first browser' example from the cuddlefish root
51,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,10469e72d888990aced10ae8aaca14a0035e0d94,Merge branch 'sys-layout'
52,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,369c0bb768809279a4d7c4784ad9247280092dc1,Add the `run-mozilla.sh' script
53,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,1da87c57c52c6286a03e013f3c8c997d37bd1766,Merge branch 'sys-layout'
54,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,0942436472576c7f0dc591b6cad1ef975e8a1ca8,Merge branch 'use-sys-xulrunner' into sys-layout
55,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,e8f00e7c0ad4853d82ae1d5e9e486c95832a1adf,"Configure to use only the default xulrunner

Configure to use only the default xulrunner for a system-wide
installation."
56,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,c7ab32e1fd5ca5ae0763536904d2caa29bdfc73f,Configure the xulrunner path relatively to the cuddlefish root
57,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,8dda94c253d6aed5a966182b241853662cf4f302,Merge branch 'sys-layout'
58,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,84cd9299387265b9778de01a2bf12ab0f2c0185c,"Enable the xulrunner downloads in the master sources version

This reverts commit e8f00e7c0ad4853d82ae1d5e9e486c95832a1adf."
59,https://api.github.com/repos/mozilla/chromeless/pulls/135,135,System-wide Chromeless installation,"  Hi!

  I'm working on the system-wide installation of Chromeless and it's RPM package for ALT Linux distributions.

  One direction of activity is to use the system-wide available xulrunner (branch 'use-sys-xulrunner'). In accordance with the policy, the users of a distribution should not download and install non-packaged software. However, the desired version of the xulrunner can be required via the package dependency mechanism. I found that the xulrunner 2.0.1 is the minimal version that runs chromeless properly and modify the application.ini.template accordingly.

  Now, if the mozfetcher fails to find a suitable xulrunner configuration for the current platform, it tries to use the special ""default"" entry of the 'software' dictionary. That entry, if exists, should point to the system xulrunner installation and thus is not required to have a signature: the security and version issues are handled by the package subsystem. In fact, I decided not to require signatures for all of the dictionary entries, meaning that all users who would edit the _config.py know what they are doing. The ""path"" value of the ""default"" entry is a subject to be configured for a particular distribution. However, later I realized that it is more naturally to have the path to be calculated relatively to the cuddlefish root (see below).

  The other, larger direction of activity is to develop an effective and portable system layout for the chromeless files (branch 'sys-layout'). More details follow.

  The first thing I encountered was that chromeless is unable to run applications supplied in RO mode: some of the files in the application runtime directory (i.e. build/appname) are linked to the original files, yet attempts are made to modify them. If the original file is accessible in RO mode only, then an I/O error occurs. I added the code converting links to copies on the fly if the attempt to open the file in RW mode fails.

  Then I modified _dirs.py in order to place the 'build' directory in the user's home directory under the ~/.chromeless. With a system-wide available 'chromeless' command it seems strange to make a 'build' subdirectory in every current directory that come, doesn't it?

  The test outputs are now written under the ~/.chromeless too.

  In order to run the chromeless script with the CUDDLEFISH_ROOT environment variable set to a proper value I've added the wrapper shell script. The variable is set to the default value if it doesn't have a value yet. That default value is the neutral '/usr/local/lib/chromeless' and is subject to be substituted for a particular distribution.

  Taken the cuddlefish root as the only reference point, I then tended to adapt the chromeless code to search for all of the files from that root. First, I modifyed the chromless Python script itself to look for the default example ('first_browser' application) in the cuddlefish root directory. Then I added the 'run-mozilla.sh' to be installed in the cuddlefish root and modified mozfetcher, configuring the default xulrunner to be located in that directory too. Now, it is enough to place the links to the proper 'xulrunner' and 'xulrunner-bin' files in the cuddlefish root directory to make the chromeless be run by any user of the system.

  The resulting file layout can be found in the chromeless-*.rpm packages in the Sisyphus repository: http://packages.altlinux.org/en/Sisyphus/srpms/chromeless/get . The layout is tested and seems to work.

  I've merged the branches into the master trying to keep the original behavior of a locally run ./chromeless. It seems to run in that manner too.

```
See you in the `git log`!

  Paul.
```
",wolneykien,426829,2011-07-14T22:56:37Z,NONE,False,468,12,11,Build desktop applications with web technologies.,JavaScript,d44a85aa93ae8121d9bccd040dc3dca62c980b74,Update the chromeless version var
60,https://api.github.com/repos/mozilla/chromeless/pulls/129,129,Alleviate an annoyance caused by bug #91 by defaulting to use error pages,"Alleviate an annoyance caused by bug #91 by defaulting to use error pages instead of alerts.
",davidmurdoch,187813,2011-06-10T17:23:28Z,CONTRIBUTOR,True,1,0,1,Build desktop applications with web technologies.,JavaScript,1cf81d953aa6f1e8c2dcd9ade2f26817c84562b4,Alleviate an annoyance caused by bug #91 by defaulting to use error pages instead of alerts.
61,https://api.github.com/repos/mozilla/chromeless/pulls/121,121,"Fix #120. Check if resource is native (chrome scheme) and if so, let it be.","Check if resource is native (chrome scheme) and if so, let it be. Also, try to fix some whitespace issues and make the navigation blocked message more verbose.
",davidmurdoch,187813,2011-06-06T18:36:57Z,CONTRIBUTOR,False,37,13,2,Build desktop applications with web technologies.,JavaScript,a93cf749fb3588da74a6c521204aec764d72d9e0,"Check if resource is native (chrome scheme) and if so, let it be. Also, try to fix some whitespace issues and make the navigation blocked message more verbose."
62,https://api.github.com/repos/mozilla/chromeless/pulls/121,121,"Fix #120. Check if resource is native (chrome scheme) and if so, let it be.","Check if resource is native (chrome scheme) and if so, let it be. Also, try to fix some whitespace issues and make the navigation blocked message more verbose.
",davidmurdoch,187813,2011-06-06T18:36:57Z,CONTRIBUTOR,False,37,13,2,Build desktop applications with web technologies.,JavaScript,08c25a7f888a8e454da278a332ef7ec499ce6f7b,Adding a test case for dialogs
63,https://api.github.com/repos/mozilla/chromeless/pulls/115,115,Monkey Patching anchor elements with `target='_top'`. Possible partial fix for #83.,"I don't really like this method. But it kinda works.

Problems:
    - Might slow down heavy pages since we are now monitoring the crap out of our frames's DOM.
    - `target='_top'` in a nested iframe (e.g., `<iframe>Page with an iframe:<iframe>Nested Iframe</iframe></iframe>`) will NOT target its parent iframe, but itself instead.
    - Doesn't fix `_blank` or other `_` targets.
    - Its a hack; it sucks. This should be done at a higher level.

:-)
",davidmurdoch,187813,2011-05-27T19:05:03Z,CONTRIBUTOR,False,19,0,1,Build desktop applications with web technologies.,JavaScript,6dff76745cb3d19302ff1361a1aad5030679d322,Monkey Patching anchor elements with `target='_top'`. Possible partial fix for #83.
64,https://api.github.com/repos/mozilla/chromeless/pulls/114,114,Prevent main browser DOCUMENT from being 'frame busted' fixes #83,"There are still some issues that should be worked out with target_top. So this is more like a partial fix.

This fix:
- Detects when a URI is being loaded in a TYPE_DOCUMENT (like our main HTML) that matches the http or https protocols. This probably isn't sufficient; we should have a whitelist of allowed protocols instead of blacklisting http and https.
- Does not redirect the request to its originating context's DOMWindow/Document. It is probably pretty easy to do this since `shouldLoad()` provides us with the `requestOrigin`, which I just assume would be the iframe that made the request (or a node within that iframe), but I haven't tested it (yet).
- Does not cure cancer.
",davidmurdoch,187813,2011-05-27T18:36:48Z,CONTRIBUTOR,True,69,0,2,Build desktop applications with web technologies.,JavaScript,449c8ec49bc0cc6ec9ee1c767154d01bda4ede6d,Prevent main browser DOCUMENT from being 'frame busted' fixes #83
65,https://api.github.com/repos/mozilla/chromeless/pulls/111,111,Async write/read of file,"This patch adds file.writeAsync/file.readAsync functions. The code is taken mostly from [1](https://developer.mozilla.org/en/Code_snippets/File_I%2F%2FO).

Note, that the the writeAsync takes an 'overwrite' argument, which is different from the current write function, although I think it would be good to add such an argument to that function as well.

There's also a problem in the naming of the functions. Node.js uses readFile for reading an entire file async where in chromeless read reads an entire file and is sync. This might confuse people coming from node.js.

I've updated the Ace gallery-example to use these new async methods - this might serve as an example (see [2](https://github.com/jviereck/Chromeless-Standalone-Text-Editor-with-Ace/commit/c5140789f9016729beb3a9aea19733ba32fe3033)).

Julian
",jviereck,191719,2011-05-14T10:22:31Z,NONE,False,92,1,1,Build desktop applications with web technologies.,JavaScript,403d10b7de9395edff2137a1509cc21dfb5617f8,Add file.writeAsync/readAsync
66,https://api.github.com/repos/mozilla/chromeless/pulls/108,108,Allow new version of canvas-proxy.js to hack in the XUL parts. ,"A XUL stack element will support multiple XUL browsers behind the scene. 
",taboca,8658,2011-05-11T21:34:32Z,CONTRIBUTOR,False,7,1,1,Build desktop applications with web technologies.,JavaScript,25fa64ab267bcaa8df11eeac1e799d57507f8117,A XUL stack element will support multiple XUL browsers behind the scenes.
67,https://api.github.com/repos/mozilla/chromeless/pulls/99,99,doc command will fail if there is not doc dir,"My python is rusty. I created a new var doc_dir which i based it off the build_dir. If the doc command is invoked I use os.path.exists to see if its not there. then i run makedirs. which i think can also be make dir. 

(cherry picked from commit 2c4f8b29a55df3085e1deb9470cc9b782572879d)
",sbeckeriv,12170,2011-05-03T15:10:14Z,NONE,False,3,0,1,Build desktop applications with web technologies.,JavaScript,04ea920ae7e14768718e7715a3e7e21b468afc4c,"check and create the docs dir before running doc commad
(cherry picked from commit 2c4f8b29a55df3085e1deb9470cc9b782572879d)"
68,https://api.github.com/repos/mozilla/chromeless/pulls/99,99,doc command will fail if there is not doc dir,"My python is rusty. I created a new var doc_dir which i based it off the build_dir. If the doc command is invoked I use os.path.exists to see if its not there. then i run makedirs. which i think can also be make dir. 

(cherry picked from commit 2c4f8b29a55df3085e1deb9470cc9b782572879d)
",sbeckeriv,12170,2011-05-03T15:10:14Z,NONE,False,3,0,1,Build desktop applications with web technologies.,JavaScript,f3be0d1bf0c5fe5a58434065d2b048d5fd527f8d,Merge remote branch 'upstream/master'
69,https://api.github.com/repos/mozilla/chromeless/pulls/99,99,doc command will fail if there is not doc dir,"My python is rusty. I created a new var doc_dir which i based it off the build_dir. If the doc command is invoked I use os.path.exists to see if its not there. then i run makedirs. which i think can also be make dir. 

(cherry picked from commit 2c4f8b29a55df3085e1deb9470cc9b782572879d)
",sbeckeriv,12170,2011-05-03T15:10:14Z,NONE,False,3,0,1,Build desktop applications with web technologies.,JavaScript,dd67611a7b7f32cba2af88f722516358f816bef8,Merge branch 'master' of git://github.com/mozilla/chromeless
70,https://api.github.com/repos/mozilla/chromeless/pulls/97,97,mozfetched config fix,"Fixed the mozfetched config that was missing a comma before the md5 definition.
",davidcoallier,58398,2011-05-02T00:24:05Z,NONE,False,1,1,1,Build desktop applications with web technologies.,JavaScript,fd8dc63c6dcf4c310ac1445557a05cc09f37eebe,Fixed the mozfetched config that was missing a comma before the md5 definition.
71,https://api.github.com/repos/mozilla/chromeless/pulls/95,95,A couple minor fixes for child_process,"Minor fix for typo, and take out extra param that was already removed from options.
",deadprogram,5520,2011-04-30T22:09:13Z,CONTRIBUTOR,True,2,2,1,Build desktop applications with web technologies.,JavaScript,644cd0a9b8d1fd09ea2b28e957c7ce68cb0b280f,"Correct typo, and remove param no longer in use"
72,https://api.github.com/repos/mozilla/chromeless/pulls/93,93,Fixed the mozfetched config that was missing a comma before the md5 definition. ,"I've fixed the mozfetched config that was missing a comma before the md5 definition on line 29 of **impl/mozfetcher/_config.py**

davids-macbook:chromeless david$ ./chromeless 
Traceback (most recent call last):
  File ""./chromeless"", line 80, in <module>
    import mozfetcher
  File ""/users/david/dev/c/chromeless/impl/mozfetcher/**init**.py"", line 1, in <module>
    from _fetcher import Fetcher
  File ""/users/david/dev/c/chromeless/impl/mozfetcher/_fetcher.py"", line 14, in <module>
    from . import _config
  File ""/users/david/dev/c/chromeless/impl/mozfetcher/_config.py"", line 29
    ""md5"": ""5acef7cc816691f5c8726731ee0d8bdf"",
",davidcoallier,58398,2011-04-30T14:18:01Z,NONE,False,1,1,1,Build desktop applications with web technologies.,JavaScript,fd8dc63c6dcf4c310ac1445557a05cc09f37eebe,Fixed the mozfetched config that was missing a comma before the md5 definition.
73,https://api.github.com/repos/mozilla/chromeless/pulls/88,88,Window update,,CoderPuppy,714198,2011-04-29T01:21:15Z,NONE,False,186,8,2,Build desktop applications with web technologies.,JavaScript,d457a3c8f8bacc6b010068e6ffeb0a01b6dc69b7,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me)."
74,https://api.github.com/repos/mozilla/chromeless/pulls/88,88,Window update,,CoderPuppy,714198,2011-04-29T01:21:15Z,NONE,False,186,8,2,Build desktop applications with web technologies.,JavaScript,a2f0c6adaea760939ace715d6f3e5cc46d5fa99e,Changed Branch
75,https://api.github.com/repos/mozilla/chromeless/pulls/88,88,Window update,,CoderPuppy,714198,2011-04-29T01:21:15Z,NONE,False,186,8,2,Build desktop applications with web technologies.,JavaScript,3b95036e097e1b250e0d4fe5ac7953f11a743b00,Updated event preventing default.
76,https://api.github.com/repos/mozilla/chromeless/pulls/87,87,Window Update,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me).
",CoderPuppy,714198,2011-04-28T22:07:31Z,NONE,False,185,8,2,Build desktop applications with web technologies.,JavaScript,d457a3c8f8bacc6b010068e6ffeb0a01b6dc69b7,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me)."
77,https://api.github.com/repos/mozilla/chromeless/pulls/87,87,Window Update,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me).
",CoderPuppy,714198,2011-04-28T22:07:31Z,NONE,False,185,8,2,Build desktop applications with web technologies.,JavaScript,a8fa2c58e887b4b071aa9427c6f56cd18566988e,Edited packages/chromeless-kit/lib/windows.js via GitHub
78,https://api.github.com/repos/mozilla/chromeless/pulls/86,86,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me).","Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me).
",CoderPuppy,714198,2011-04-28T19:31:22Z,NONE,False,193,8,2,Build desktop applications with web technologies.,JavaScript,d457a3c8f8bacc6b010068e6ffeb0a01b6dc69b7,"Added a[target=""_top""] clicked go in top frame (The top iframe). Added new window support (not exactly built by me)."
79,https://api.github.com/repos/mozilla/chromeless/pulls/85,85,Add Cookies,"Here is a little script for handling cookies. getAllCookies could use some love as I really had no idea what to do with the generator/enumerator in javascript.
",davidmurdoch,187813,2011-04-28T16:11:36Z,CONTRIBUTOR,False,23,0,1,Build desktop applications with web technologies.,JavaScript,68bdb83d8b91c358d65caaa2dead47501fbb3c0c,Add Cookies
80,https://api.github.com/repos/mozilla/chromeless/pulls/67,67,Enable mode selection for the file-picker,,past,49118,2011-02-23T20:28:03Z,CONTRIBUTOR,False,38,3,1,Build desktop applications with web technologies.,JavaScript,e4b2fc61a7e2943a67d249fa8a6728c6e5c94574,Allow mode selection for the file-picker.
81,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,d739f361e5a156cb52abe5491eb49ac81bc47ce9,Merge branch 'master' of https://github.com/mozilla/chromeless
82,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,6be3be080cef8ec2a7827f9481e908d28cb71e6a,Merge branch 'master' of https://github.com/mozilla/chromeless
83,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,b27671ba52d7584b68bc07d3e7e9a8b80c9373a6,"added an 'fs' module, which extends the Jetpack 'file' module with functions and a wrapper for nsiFile instances to be transferable between sandboxes"
84,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,e1c23a78949f1c59bb5c14f399ada7e7d51455f2,"added a 'path' lib, which implements platform independent path manipulation, written by ochameau at https://github.com/ochameau/moz-js/blob/master/lib/path.js, direct mapping of this NodeJS API: http://nodejs.org/api.html#path-304

put the tests for path in place"
85,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,114400ff13a09c334cf8e11445b7b48fc1e3d020,Mimetype sniffing library by file extensions
86,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,6d8c5e7af409e3d0eb0fc382178a5d3d192810b6,"Added a 'child_process' and 'net' API, which both depend on the 'events' lib. child_process is a port of the NodeJS API defined here: http://nodejs.org/api.html#child-processes-91 (just the 'spawn' function), but doesn't provide proper stdout/stdin/stderr streams, because of a limitation in XPCOM. The net, which can be used to write TCP clients and servers, API is written by Irakli (https://github.com/Gozala/jetpack-net) and defined here: http://nodejs.org/api.html#net-server-211"
87,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,a25d5b13ba14e5e8dccc5713a55dbfbca0e54c6a,upgraded to a version 1.0b2 of addon-kit
88,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,3b494059fe6524bfa1cf57399f5b58e08db53062,implemented a mapping of the uri resource://app/ to the browser_code/ directory inside the packaged chromeless app
89,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,b569a1bbf30aa6a1e3955b77b259c729d9e55528,"Merge branch 'master' of https://github.com/mozilla/chromeless

Conflicts:
	packages/api-utils/lib/file.js
	packages/chromeless/lib/main.js"
90,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,3cbad49a1965b7e85c8b5f3cc5d42e52f65606d4,Merge branch 'master' of https://github.com/mozilla/chromeless
91,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,7f8f9447e5a1df063677553ff394679585ae4f00,"Fixed child_process API, added stack trace logging to main.js and made window resizable by default"
92,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,3fa693ff1cca0a1377690e5036a7edbf90b4081d,"Merge remote branch 'origin/menu_api'

Conflicts:
	packages/chromeless-kit/lib/chromeless-sandbox-window.js"
93,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,9cec11d88ddd6c94ab4aac14a8b036826437a303,"added menu class, improved process class and added variable inspection to console.log()"
94,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,d6921cc20919fa2832120a496316d61dce076564,Merge branch 'master' of https://github.com/mozilla/chromeless
95,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,3511dc6d8683da41a21e5b561b1a10e5789b671b,first complete implementation of my Menu API proposal
96,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,66514450820af616172ea25be46dd7bdd752c2c4,Merge branch 'master' of https://github.com/mozilla/chromeless
97,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,5d7c4ca53f65b321fa87061110a5e9ba7a9fd80f,added hotkey support to register application-wide hotkeys
98,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,8a9d7bbf3dd96a276c80605a77dfe317c899ef8c,added UUID generator function to the ui class and it is used by menu now.
99,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,4072577dbabc9db409dfb35927b9e1670627be60,implemented hotkey.unregister and added docs
100,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,5db74f5814c6e63c3603dc7551063dfdd9645f86,fixed api-utils::inspect() to properly display and inspect Moz objects
101,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,bc4ab8c03ade2975c5c51c44d87a421891a6da3c,"added redraw function to menu-items, so that they can switch mode during runtime to support submenus"
102,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,8e88d69c83ea235ad43975126f76d1fac5eb4529,added some more inline docs
103,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,5e3daf28c84a7a7baf012f86bf0dc2b2e8eb1740,"Merge branch 'master' of https://github.com/mozilla/chromeless

Conflicts:
	packages/api-utils/lib/api-utils.js
	packages/api-utils/lib/file.js
	packages/chromeless-kit/lib/fs.js
	packages/chromeless-kit/lib/hotkey.js
	packages/chromeless-kit/lib/mime.js
	packages/chromeless-kit/lib/path.js
	packages/chromeless-kit/lib/ui.js
	packages/chromeless-kit/lib/ui/menu.js
	packages/chromeless/lib/main.js
	tests/dragdrop/dragdrop.js
	tests/menu/index.html"
104,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,35bf95654ec9d06d104a7d501346e9471a7bc071,Merge branch 'master' of https://github.com/mozilla/chromeless
105,https://api.github.com/repos/mozilla/chromeless/pulls/62,62,Updated documentation and two issue fixes for menu,"The rest of the commits is about the merge from mozilla:master to ajaxorg:master, which may be irrelevant to pull in as well. I leave that up to you guys ;)
",mikedeboer,141571,2011-02-15T09:09:25Z,CONTRIBUTOR,False,1068,219,240,Build desktop applications with web technologies.,JavaScript,2e80da17d0555427011e3161d80168b0b6fe164c,added more docs and fixed two issues (checkbox item icw hotkey activation and SubMenu redrawing)
106,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,d739f361e5a156cb52abe5491eb49ac81bc47ce9,Merge branch 'master' of https://github.com/mozilla/chromeless
107,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,6be3be080cef8ec2a7827f9481e908d28cb71e6a,Merge branch 'master' of https://github.com/mozilla/chromeless
108,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,f6ec4b721ebeec048a1b21acffa15fa082339ac4,"rework chromeless-sandbox-window, go back to using a browser so that we might embed a toolbox and menu tag"
109,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,71fbff57f7a52024acbce5ef48e3ca642e2eb2bc,fix regression with move back to <browser> -- experimental-dom-load now carries .url property again
110,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,76db1ff45fcc15e1c6fa8b61c7c7d8db6d7f6907,a proof of concept of the menu impl tactic
111,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,b27671ba52d7584b68bc07d3e7e9a8b80c9373a6,"added an 'fs' module, which extends the Jetpack 'file' module with functions and a wrapper for nsiFile instances to be transferable between sandboxes"
112,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,e1c23a78949f1c59bb5c14f399ada7e7d51455f2,"added a 'path' lib, which implements platform independent path manipulation, written by ochameau at https://github.com/ochameau/moz-js/blob/master/lib/path.js, direct mapping of this NodeJS API: http://nodejs.org/api.html#path-304

put the tests for path in place"
113,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,114400ff13a09c334cf8e11445b7b48fc1e3d020,Mimetype sniffing library by file extensions
114,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,6d8c5e7af409e3d0eb0fc382178a5d3d192810b6,"Added a 'child_process' and 'net' API, which both depend on the 'events' lib. child_process is a port of the NodeJS API defined here: http://nodejs.org/api.html#child-processes-91 (just the 'spawn' function), but doesn't provide proper stdout/stdin/stderr streams, because of a limitation in XPCOM. The net, which can be used to write TCP clients and servers, API is written by Irakli (https://github.com/Gozala/jetpack-net) and defined here: http://nodejs.org/api.html#net-server-211"
115,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,a25d5b13ba14e5e8dccc5713a55dbfbca0e54c6a,upgraded to a version 1.0b2 of addon-kit
116,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,3b494059fe6524bfa1cf57399f5b58e08db53062,implemented a mapping of the uri resource://app/ to the browser_code/ directory inside the packaged chromeless app
117,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,b569a1bbf30aa6a1e3955b77b259c729d9e55528,"Merge branch 'master' of https://github.com/mozilla/chromeless

Conflicts:
	packages/api-utils/lib/file.js
	packages/chromeless/lib/main.js"
118,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,a7b83ce7463d3f5b49e535030b0050b91d74d092,complete first draft (feature bare) of a declarative API and impl for menu interaction
119,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,3cbad49a1965b7e85c8b5f3cc5d42e52f65606d4,Merge branch 'master' of https://github.com/mozilla/chromeless
120,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,7f8f9447e5a1df063677553ff394679585ae4f00,"Fixed child_process API, added stack trace logging to main.js and made window resizable by default"
121,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,3fa693ff1cca0a1377690e5036a7edbf90b4081d,"Merge remote branch 'origin/menu_api'

Conflicts:
	packages/chromeless-kit/lib/chromeless-sandbox-window.js"
122,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,9cec11d88ddd6c94ab4aac14a8b036826437a303,"added menu class, improved process class and added variable inspection to console.log()"
123,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,d6921cc20919fa2832120a496316d61dce076564,Merge branch 'master' of https://github.com/mozilla/chromeless
124,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,3511dc6d8683da41a21e5b561b1a10e5789b671b,first complete implementation of my Menu API proposal
125,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,66514450820af616172ea25be46dd7bdd752c2c4,Merge branch 'master' of https://github.com/mozilla/chromeless
126,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,5d7c4ca53f65b321fa87061110a5e9ba7a9fd80f,added hotkey support to register application-wide hotkeys
127,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,8a9d7bbf3dd96a276c80605a77dfe317c899ef8c,added UUID generator function to the ui class and it is used by menu now.
128,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,4072577dbabc9db409dfb35927b9e1670627be60,implemented hotkey.unregister and added docs
129,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,5db74f5814c6e63c3603dc7551063dfdd9645f86,fixed api-utils::inspect() to properly display and inspect Moz objects
130,https://api.github.com/repos/mozilla/chromeless/pulls/53,53,"My changes up until now, including contribution of apis and mapping of 'resource' protocol","Changes included in this pull request are:
- upgrade of addon-kit (jetpack) to 1.0b2
- 'path' module, modeled after NodeJS API
- 'fs' module, which extends the addon-sdk's 'file' module
- 'child_process' module, modeled after NodeJS API - when binary additions arrive in Chromeless, we should adopt https://github.com/ochameau/jetpack-subprocess, because right now it doesn't support stdin/stdout/stderr streams
- 'net' module, modeled after NodeJS API 
- mapping of the file://.../browser_code/\* to resource://app/\* (compatible with RequireJS and LABJS module loaders)
",mikedeboer,141571,2011-01-27T09:53:16Z,CONTRIBUTOR,False,3679,383,259,Build desktop applications with web technologies.,JavaScript,bc4ab8c03ade2975c5c51c44d87a421891a6da3c,"added redraw function to menu-items, so that they can switch mode during runtime to support submenus"
131,https://api.github.com/repos/mozilla/chromeless/pulls/50,50,Untitled,,mikedeboer,141571,2011-01-14T15:30:13Z,CONTRIBUTOR,False,892,2,15,Build desktop applications with web technologies.,JavaScript,fd26e820d7d028991d6ff983c5d0870797dfdd14,remove trailing slashes first
132,https://api.github.com/repos/mozilla/chromeless/pulls/50,50,Untitled,,mikedeboer,141571,2011-01-14T15:30:13Z,CONTRIBUTOR,False,892,2,15,Build desktop applications with web technologies.,JavaScript,ac31d70d0a35df557754ee80a40df4de786b01ca,added a dragdrop sample project
133,https://api.github.com/repos/mozilla/chromeless/pulls/50,50,Untitled,,mikedeboer,141571,2011-01-14T15:30:13Z,CONTRIBUTOR,False,892,2,15,Build desktop applications with web technologies.,JavaScript,8d39f14bfd6875e20cab0d3528958fce8582b49c,added the first setup for the UI API
134,https://api.github.com/repos/mozilla/chromeless/pulls/50,50,Untitled,,mikedeboer,141571,2011-01-14T15:30:13Z,CONTRIBUTOR,False,892,2,15,Build desktop applications with web technologies.,JavaScript,511af13516ec8a6b009c88f00c5ebd520d4cd8c4,added a demo app that shows off the UI API
135,https://api.github.com/repos/mozilla/chromeless/pulls/50,50,Untitled,,mikedeboer,141571,2011-01-14T15:30:13Z,CONTRIBUTOR,False,892,2,15,Build desktop applications with web technologies.,JavaScript,d739f361e5a156cb52abe5491eb49ac81bc47ce9,Merge branch 'master' of https://github.com/mozilla/chromeless
136,https://api.github.com/repos/mozilla/chromeless/pulls/46,46,bugfix for securable modules,,mikedeboer,141571,2011-01-13T15:31:24Z,CONTRIBUTOR,True,1,1,1,Build desktop applications with web technologies.,JavaScript,330317023d240f453a99fe34a8f973756ac5bafe,fixed bug in securable modules (var reference)
137,https://api.github.com/repos/mozilla/chromeless/pulls/45,45,logging errors to the console (app-wide),"the location of this script prolly needs to be somewhere else, but it works.
",mikedeboer,141571,2011-01-13T14:45:29Z,CONTRIBUTOR,True,28,0,1,Build desktop applications with web technologies.,JavaScript,844ea3b9257c8c1e8222c871ac5338c50d5cf39b,"added error logging to chromeless (prolly has to move to another file, but works)"
138,https://api.github.com/repos/mozilla/chromeless/pulls/31,31,Fixed the download paths.,,jimpick,20886,2010-11-23T21:34:11Z,NONE,False,3,3,1,Build desktop applications with web technologies.,JavaScript,523b467b5f0c082fe11af6df0ec237a58d4766e2,"Fix download paths.

Luckily, the md5sums match."
139,https://api.github.com/repos/mozilla/chromeless/pulls/11,11,Fix PYTHONPATH update when one's already set,"Hi,

I tried to test chromeless on my computer, but running './run' as described in the doc didn't work, since it tries to update the PYTHONPATH to add the path of the project into, but the code couldn't work as it and it just crashed with the following exception:

```
$ ./run 
Will open the browser html =first_browser/index.html
You can also try other scripts such as ./run ui/thumbnails/index.html
Traceback (most recent call last):
  File ""impl/bin/cfx"", line 22, in <module>
    os.environ['PYTHONPATH'] = os.environ['PYTHONPATH'].split(os.pathsep).append(python_lib_dir).join(os.pathsep)
AttributeError: 'NoneType' object has no attribute 'join'
```

Thanks
",multani,65311,2010-10-25T10:20:38Z,CONTRIBUTOR,False,3,1,1,Build desktop applications with web technologies.,JavaScript,9e091fca67d0d43d1594f1ddb46bbead18f449d7,Fix PYTHONPATH update at startup when there's already one set
140,https://api.github.com/repos/mozilla/chromeless/pulls/11,11,Fix PYTHONPATH update when one's already set,"Hi,

I tried to test chromeless on my computer, but running './run' as described in the doc didn't work, since it tries to update the PYTHONPATH to add the path of the project into, but the code couldn't work as it and it just crashed with the following exception:

```
$ ./run 
Will open the browser html =first_browser/index.html
You can also try other scripts such as ./run ui/thumbnails/index.html
Traceback (most recent call last):
  File ""impl/bin/cfx"", line 22, in <module>
    os.environ['PYTHONPATH'] = os.environ['PYTHONPATH'].split(os.pathsep).append(python_lib_dir).join(os.pathsep)
AttributeError: 'NoneType' object has no attribute 'join'
```

Thanks
",multani,65311,2010-10-25T10:20:38Z,CONTRIBUTOR,False,3,1,1,Build desktop applications with web technologies.,JavaScript,edf13e57b9ba18b2db6025c85fa7c87541ca44b7,"Put the local directory as the first directory to lookup in the PYTHONPATH

Now, we are sure that the local directory will be used  before any other
directory containing the same code."
