,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,b454507172cbf0e3423c5e9f90a822b024ad5979,Update django from 1.11.12 to 1.11.13
1,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,6fc65c688e10e277a0755aa7315b487cd1ec2447,Update pyopenssl from 17.5.0 to 18.0.0
2,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,ab043307fcbe71901a2bd13f1cc347aeb93438ea,Update google-api-python-client from 1.6.6 to 1.7.3
3,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,2636ca58d3a7cbd72be327c65e6e19171cfeea0e,Update gunicorn from 19.7.1 to 19.8.1
4,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,4470bf24e3a0f747ae56d0709ceda2a94cdb3f7e,Update psycopg2 from 2.7.4 to 2.7.5
5,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,ab1b7f07aa7d8a82b092c6d5e7f8754396fc97aa,Update pyasn1 from 0.4.2 to 0.4.3
6,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,60560c196d950795d7bf12648661c294bc362fc4,Update raven from 6.6.0 to 6.9.0
7,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,cfb02b6e955fa29d48516ba7f0e174d19d684d56,Update requests from 2.18.4 to 2.19.1
8,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,3876d7a5a86bccaf44ecc410eb13681a2fbf6255,Update simplejson from 3.13.2 to 3.15.0
9,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,8b50b4f626b512f702c2efb2531d682f401fa395,Update pycodestyle from 2.3.1 to 2.4.0
10,https://api.github.com/repos/mozilla/distribution-viewer/pulls/412,412,Scheduled weekly dependency update for week 25,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-25T16:06:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,6c30d12b138dfe39c85383767dd176d05f2e29c0,Update pyflakes from 1.6.0 to 2.0.0
11,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,9a9eb5b972130721581b15e23de445ed52228285,Update django from 1.11.12 to 1.11.13
12,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,07e17a11322bb7c85eafe8427a05133893bc58e6,Update pyopenssl from 17.5.0 to 18.0.0
13,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,a080b96906c7cf941c6e827802c9283940e9acc5,Update google-api-python-client from 1.6.6 to 1.7.3
14,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,74d5f7767fe22bee18c8229691cf742d5a9f513f,Update gunicorn from 19.7.1 to 19.8.1
15,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,15300aac7b2beee46858174e392daeef4ac679d4,Update psycopg2 from 2.7.4 to 2.7.5
16,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,cc181d3327d9a61e1dd81a9dec5c1eba18ddf277,Update pyasn1 from 0.4.2 to 0.4.3
17,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,af739dbc84262fe943365cd3f3306d3f5c59199a,Update raven from 6.6.0 to 6.9.0
18,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,d40592eeb65c6c64a167b346b71a1f3cb6a23c2c,Update requests from 2.18.4 to 2.19.1
19,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,370c0cc00d862f9dcc5a6f7a620f9026ec607a19,Update simplejson from 3.13.2 to 3.15.0
20,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,13007048f3c7c14170e7b0518e02d4db57fd964d,Update pycodestyle from 2.3.1 to 2.4.0
21,https://api.github.com/repos/mozilla/distribution-viewer/pulls/411,411,Scheduled weekly dependency update for week 24,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [psycopg2](https://pypi.org/project/psycopg2) from **2.7.4** to **2.7.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.7.5
   ```
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Allow non-ascii chars in namedtuple fields (regression introduced fixing
  :ticket:`211`).
- Fixed adaptation of arrays of arrays of nulls (:ticket:`325`).
- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos
  (:ticket:`677`).
- Maybe fixed building on MSYS2 (as reported in :ticket:`658`).
- Allow string subclasses in connection and other places (:ticket:`679`).
- Don&#39;t raise an exception closing an unused named cursor (:ticket:`716`).
- Wheel package compiled against PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/psycopg2
  - Changelog: https://pyup.io/changelogs/psycopg2/
  - Homepage: http://initd.org/psycopg/
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [requests](https://pypi.org/project/requests) from **2.18.4** to **2.19.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.19.1
   ```
   +++++++++++++++++++

**Bugfixes**

- Fixed issue where status_codes.py&#39;s ``init`` function failed trying to append to
  a ``__doc__`` value of ``None``.
   ```
   
  
  
   ### 2.19.0
   ```
   +++++++++++++++++++

**Improvements**

- Warn user about possible slowdown when using cryptography version &lt; 1.3.4
- Check for invalid host in proxy URL, before forwarding request to adapter.
- Fragments are now properly maintained across redirects. (RFC7231 7.1.2)
- Removed use of cgi module to expedite library load time.
- Added support for SHA-256 and SHA-512 digest auth algorithms.
- Minor performance improvement to ``Request.content``.
- Migrate to using collections.abc for 3.7 compatibility.

**Bugfixes**

- Parsing empty ``Link`` headers with ``parse_header_links()`` no longer return one bogus entry.
- Fixed issue where loading the default certificate bundle from a zip archive
  would raise an ``IOError``.
- Fixed issue with unexpected ``ImportError`` on windows system which do not support ``winreg`` module.
- DNS resolution in proxy bypass no longer includes the username and password in
  the request. This also fixes the issue of DNS queries failing on macOS.
- Properly normalize adapter prefixes for url comparison.
- Passing ``None`` as a file pointer to the ``files`` param no longer raises an exception.
- Calling ``copy`` on a ``RequestsCookieJar`` will now preserve the cookie policy correctly.

**Dependencies**

- We now support idna v2.7.
- We now support urllib3 v1.23.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/requests
  - Changelog: https://pyup.io/changelogs/requests/
  - Homepage: http://python-requests.org
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-18T16:03:23Z,CONTRIBUTOR,False,11,11,1,,JavaScript,5f96a777e69db11c96e25bc71a16c876763f8526,Update pyflakes from 1.6.0 to 2.0.0
22,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,b478d56faddf83d35e4747f76d938de4fae58192,Update django from 1.11.12 to 1.11.13
23,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,cca143273df9fb2d60976fa032a88dd203231a0c,Update pyopenssl from 17.5.0 to 18.0.0
24,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,0c067ed14c716b936b6ad1cb0fe90235717fe332,Update google-api-python-client from 1.6.6 to 1.7.3
25,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,69b85a4d78a9743a203fa3bdc6e4f2a34081ffc3,Update gunicorn from 19.7.1 to 19.8.1
26,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,60fe4a591f79e68b170a9fe4aafe2f27820f5222,Update pyasn1 from 0.4.2 to 0.4.3
27,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,74b2c738af3aa5bb5b211ba6b69ca1bf90db42c7,Update raven from 6.6.0 to 6.9.0
28,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,51d40934543c8d58c303fcc42ecf9e2a5bd74156,Update simplejson from 3.13.2 to 3.15.0
29,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,49c9c265f0649a12ba0179b4de13ececcfe321c2,Update pycodestyle from 2.3.1 to 2.4.0
30,https://api.github.com/repos/mozilla/distribution-viewer/pulls/410,410,Scheduled weekly dependency update for week 23,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.3
   ```
   Version 1.7.3

  Bugfix release

  - Make apiclient.sample_tools gracefully fail to import (525).
   ```
   
  
  
   ### 1.7.2
   ```
   Version 1.7.2

  Bugfix release

  - Remove unnecessary check in apiclient/__ini__.py (522).
   ```
   
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-11T15:59:40Z,CONTRIBUTOR,False,9,9,1,,JavaScript,45502032d6ee784d6b047ca6b98d1744f5f8b84a,Update pyflakes from 1.6.0 to 2.0.0
31,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,1db27d56e72f3e169f4e97bd3e3118cdd040f3d2,Update django from 1.11.12 to 1.11.13
32,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,3cd5bd4f7946bfc927acd3fc9fc2f3a4d708fb90,Update pyopenssl from 17.5.0 to 18.0.0
33,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,1fe6d250fa7e869dbf41a96e1523c51d86eee4af,Update google-api-python-client from 1.6.6 to 1.7.1
34,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,02bce4893996a79d6cc80322510847497682d600,Update gunicorn from 19.7.1 to 19.8.1
35,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,1c9d3298141d516234390ee31261f7d35298def7,Update pyasn1 from 0.4.2 to 0.4.3
36,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,f811883677c17a0a8245e3f2f125105a18811f04,Update raven from 6.6.0 to 6.9.0
37,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,851358789276a6acc8e8edcffcb436fe5adc6dfa,Update simplejson from 3.13.2 to 3.15.0
38,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,dbe5e76724600b8e98a66dffc9c0c7383e9e5c1e,Update pycodestyle from 2.3.1 to 2.4.0
39,https://api.github.com/repos/mozilla/distribution-viewer/pulls/409,409,Scheduled weekly dependency update for week 22,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.7.1**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.7.1
   ```
   Version 1.7.1

  Bugfix release

  - Remove unnecessary check in setup.py (518).
   ```
   
  
  
   ### 1.7.0
   ```
   Version 1.7.0

  This release drops the hard requirement on oauth2client and installs
  google-auth by default instead. oauth2client is still supported but will
  need to be explicitly installed.

  - Drop oauth2client dependency (499)
  - Include tests in source distribution (514)
   ```
   
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.9.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.9.0
   ```
   ------------------
* [Core] Switched from culprit to transaction for automatic transaction reporting.
* [CI] Removed py3.3 from build
* [Django] resolved an issue where the log integration would override the user.
   ```
   
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-06-04T15:55:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,4f507b4647ddeb724513cb6fed094a34b8e873bc,Update pyflakes from 1.6.0 to 2.0.0
40,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,ff4ad2d43486cfbab7105ae14a46c612226f2eea,Update django from 1.11.12 to 1.11.13
41,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,68124c0634791d4d227e57a8c8478a1d038c17ef,Update pyopenssl from 17.5.0 to 18.0.0
42,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,a1f027e52022e767c34042bdb58bbad779fd7b21,Update google-api-python-client from 1.6.6 to 1.6.7
43,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,a12f0107ced290e506d64490f33ae818053bac2e,Update gunicorn from 19.7.1 to 19.8.1
44,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,e72a2182c8bfe8b69057eec7dfadc85baf0c0933,Update pyasn1 from 0.4.2 to 0.4.3
45,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,3390e0a06bccdf612bda27453936ede57f22858b,Update raven from 6.6.0 to 6.8.0
46,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,54c861df6a6c66ea0c683eda5a93acfde74c97c8,Update simplejson from 3.13.2 to 3.15.0
47,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,479d81d708ab046a83946f2858f1362212a6c790,Update pycodestyle from 2.3.1 to 2.4.0
48,https://api.github.com/repos/mozilla/distribution-viewer/pulls/408,408,Scheduled weekly dependency update for week 21,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [pyasn1](https://pypi.org/project/pyasn1) from **0.4.2** to **0.4.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyasn1
  - Changelog: https://pyup.io/changelogs/pyasn1/
  - Repo: https://github.com/etingof/pyasn1
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-28T15:54:20Z,CONTRIBUTOR,False,9,9,1,,JavaScript,ffe66a48431bab3759b0b6cbeb3a1a10338babfb,Update pyflakes from 1.6.0 to 2.0.0
49,https://api.github.com/repos/mozilla/distribution-viewer/pulls/407,407,Update jest monorepo to v23,"This Pull Request renovates the package group ""jest monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [jest-cli](https://github.com/facebook/jest) (`dependencies`): from `22.4.4` to `23.1.0`
-   [babel-jest](https://github.com/facebook/jest) (`dependencies`): from `22.4.4` to `23.0.1`

# Release Notes
<details>
<summary>facebook/jest</summary>

### [`v23.1.0`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2310)
[Compare Source](https://github.com/facebook/jest/compare/v23.0.1...v23.1.0)
##### Features

- `[jest-cli]` shouldRunTestSuite watch hook now receives an object with `config`, `testPath` and `duration` ([#&#8203;6350](`https://github.com/facebook/jest/pull/6350`))
- `[jest-each]` Support one dimensional array of data ([#&#8203;6351](`https://github.com/facebook/jest/pull/6351`))
- `[jest-watch]` create new package `jest-watch` to ease custom watch plugin development ([#&#8203;6318](`https://github.com/facebook/jest/pull/6318`))
- `[jest-circus]` Make hooks in empty describe blocks error ([#&#8203;6320](`https://github.com/facebook/jest/pull/6320`))
- Add a config/CLI option `errorOnDeprecated` which makes calling deprecated APIs throw hepful error messages.
##### Fixes

- `[jest-each]` Stop test title concatenating extra args ([##&#8203;6346](https://github.com/facebook/jest/pull/#&#8203;6346))
- `[expect]` toHaveBeenNthCalledWith/nthCalledWith gives wrong call messages if not matched ([#&#8203;6340](`https://github.com/facebook/jest/pull/6340`))
- `[jest-each]` Make sure invalid arguments to `each` points back to the user's code ([#&#8203;6347](`https://github.com/facebook/jest/pull/6347`))
- `[expect]` toMatchObject throws TypeError when a source property is null ([#&#8203;6313](`https://github.com/facebook/jest/pull/6313`))
- `[jest-cli]` Normalize slashes in paths in CLI output on Windows ([#&#8203;6310](`https://github.com/facebook/jest/pull/6310`))
- `[jest-cli]` Fix run beforeAll in excluded suites tests"" mode. ([#&#8203;6234](`https://github.com/facebook/jest/pull/6234`))
- `[jest-haste-map`] Compute SHA-1s for non-tracked files when using Node crawler ([#&#8203;6264](`https://github.com/facebook/jest/pull/6264`))
##### Chore & Maintenance

- `[docs]` Improve documentation of `mockClear`, `mockReset`, and `mockRestore` ([#&#8203;6227](`https://github.com/facebook/jest/pull/6227`/files))
- `[jest-circus]` Add dependency on jest-each ([#&#8203;6309](https://github.com/facebook/jest/pull/#&#8203;6309))
- `[jest-each]` Refactor each to use shared implementation with core ([#&#8203;6345](`https://github.com/facebook/jest/pull/6345`))
- `[jest-each]` Update jest-each docs for serialising values into titles ([#&#8203;6337](`https://github.com/facebook/jest/pull/6337`))
- `[jest-circus]` Add dependency on jest-each ([#&#8203;6309](`https://github.com/facebook/jest/pull/6309`))
- `[filenames]` Rename ""integration-tests"" to ""e2e"" ([#&#8203;6315](`https://github.com/facebook/jest/pull/6315`))
- `[docs]` Mention the use of commit hash with `--changedSince` flag ([#&#8203;6330](`https://github.com/facebook/jest/pull/6330`))

---

### [`v23.0.1`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2301)
[Compare Source](https://github.com/facebook/jest/compare/v23.0.0...v23.0.1)
##### Chore & Maintenance

- `[jest-jasemine2]` Add dependency on jest-each ([#&#8203;6308](`https://github.com/facebook/jest/pull/6308`))
- `[jest-each]` Move jest-each into core Jest ([#&#8203;6278](`https://github.com/facebook/jest/pull/6278`))
- `[examples]` Update typescript example to using ts-jest ([#&#8203;6260](`https://github.com/facebook/jest/pull/6260`))
##### Fixes

- `[pretty-format]` Serialize inverse asymmetric matchers correctly ([#&#8203;6272](`https://github.com/facebook/jest/pull/6272`))

---

### [`v23.0.0`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2300)
[Compare Source](https://github.com/facebook/jest/compare/2745e3e6cc196f191bfb8f33625e45ec4b4a1ded...v23.0.0)
##### Features

- `[expect]` Expose `getObjectSubset`, `iterableEquality`, and `subsetEquality` ([#&#8203;6210](`https://github.com/facebook/jest/pull/6210`))
- `[jest-snapshot]` Add snapshot property matchers ([#&#8203;6210](`https://github.com/facebook/jest/pull/6210`))
- `[jest-config]` Support jest-preset.js files within Node modules ([#&#8203;6185](`https://github.com/facebook/jest/pull/6185`))
- `[jest-cli]` Add `--detectOpenHandles` flag which enables Jest to potentially track down handles keeping it open after tests are complete. ([#&#8203;6130](`https://github.com/facebook/jest/pull/6130`))
- `[jest-jasmine2]` Add data driven testing based on `jest-each` ([#&#8203;6102](`https://github.com/facebook/jest/pull/6102`))
- `[jest-matcher-utils]` Change ""suggest to equal"" message to be more advisory ([#&#8203;6103](`https://github.com/facebook/jest/issues/6103`))
- `[jest-message-util]` Don't ignore messages with `vendor` anymore ([#&#8203;6117](`https://github.com/facebook/jest/pull/6117`))
- `[jest-validate]` Get rid of `jest-config` dependency ([#&#8203;6067](`https://github.com/facebook/jest/pull/6067`))
- `[jest-validate]` Adds option to inject `deprecationEntries` ([#&#8203;6067](`https://github.com/facebook/jest/pull/6067`))
- `[jest-snapshot]` [**BREAKING**] Concatenate name of test, optional snapshot name and count ([#&#8203;6015](`https://github.com/facebook/jest/pull/6015`))
- `[jest-runtime]` Allow for transform plugins to skip the definition process method if createTransformer method was defined. ([#&#8203;5999](`https://github.com/facebook/jest/pull/5999`))
- `[expect]` Add stack trace for async errors ([#&#8203;6008](`https://github.com/facebook/jest/pull/6008`))
- `[jest-jasmine2]` Add stack trace for timeouts ([#&#8203;6008](`https://github.com/facebook/jest/pull/6008`))
- `[jest-jasmine2]` Add stack trace for thrown non-`Error`s ([#&#8203;6008](`https://github.com/facebook/jest/pull/6008`))
- `[jest-runtime]` Prevent modules from marking themselves as their own parent ([#&#8203;5235](`https://github.com/facebook/jest/issues/5235`))
- `[jest-mock]` Add support for auto-mocking generator functions ([#&#8203;5983](`https://github.com/facebook/jest/pull/5983`))
- `[expect]` Add support for async matchers  ([#&#8203;5919](`https://github.com/facebook/jest/pull/5919`))
- `[expect]` Suggest toContainEqual ([#&#8203;5948](`https://github.com/facebook/jest/pull/5953`))
- `[jest-config]` Export Jest's default options ([#&#8203;5948](`https://github.com/facebook/jest/pull/5948`))
- `[jest-editor-support]` Move `coverage` to `ProjectWorkspace.collectCoverage` ([#&#8203;5929](`https://github.com/facebook/jest/pull/5929`))
- `[jest-editor-support]` Add `coverage` option to runner ([#&#8203;5836](`https://github.com/facebook/jest/pull/5836`))
- `[jest-haste-map]` Support extracting dynamic `import`s ([#&#8203;5883](`https://github.com/facebook/jest/pull/5883`))
- `[expect]` Improve output format for mismatchedArgs in mock/spy calls. ([#&#8203;5846](`https://github.com/facebook/jest/pull/5846`))
- `[jest-cli]` Add support for using `--coverage` in combination with watch mode, `--onlyChanged`, `--findRelatedTests` and more ([#&#8203;5601](`https://github.com/facebook/jest/pull/5601`))
- `[jest-jasmine2]` [**BREAKING**] Adds error throwing and descriptive errors to `it`/ `test` for invalid arguments. `[jest-circus]` Adds error throwing and descriptive errors to `it`/ `test` for invalid arguments ([#&#8203;5558](`https://github.com/facebook/jest/pull/5558`))
- `[jest-matcher-utils]` Add `isNot` option to `matcherHint` function ([#&#8203;5512](`https://github.com/facebook/jest/pull/5512`))
- `[jest-config]` Add `<rootDir>` to runtime files not found error report ([#&#8203;5693](`https://github.com/facebook/jest/pull/5693`))
- `[expect]` Make toThrow matcher pass only if Error object is returned from promises ([#&#8203;5670](`https://github.com/facebook/jest/pull/5670`))
- `[expect]` Add isError to utils ([#&#8203;5670](`https://github.com/facebook/jest/pull/5670`))
- `[expect]` Add inverse matchers (`expect.not.arrayContaining`, etc., [#&#8203;5517](`https://github.com/facebook/jest/pull/5517`))
- `[expect]` `expect.extend` now also extends asymmetric matchers ([#&#8203;5503](`https://github.com/facebook/jest/pull/5503`))
- `[jest-mock]` Update `spyOnProperty` to support spying on the prototype chain ([#&#8203;5753](`https://github.com/facebook/jest/pull/5753`))
- `[jest-mock]` Add tracking of return values in the `mock` property ([#&#8203;5752](`https://github.com/facebook/jest/pull/5752`))
- `[jest-mock]` Add tracking of thrown errors in the `mock` property ([#&#8203;5764](`https://github.com/facebook/jest/pull/5764`))
- `[expect]`Add nthCalledWith spy matcher ([#&#8203;5605](`https://github.com/facebook/jest/pull/5605`))
- `[jest-cli]` Add `isSerial` property that runners can expose to specify that they can not run in parallel ([#&#8203;5706](`https://github.com/facebook/jest/pull/5706`))
- `[expect]` Add `.toBeCalledTimes` and `toHaveBeenNthCalledWith` aliases ([#&#8203;5826](`https://github.com/facebook/jest/pull/5826`))
- `[jest-cli]` Interactive Snapshot Mode improvements ([#&#8203;5864](`https://github.com/facebook/jest/pull/5864`))
- `[jest-editor-support]` Add `no-color` option to runner ([#&#8203;5909](`https://github.com/facebook/jest/pull/5909`))
- `[jest-jasmine2]` Pretty-print non-Error object errors ([#&#8203;5980](`https://github.com/facebook/jest/pull/5980`))
- `[jest-message-util]` Include column in stack frames ([#&#8203;5889](`https://github.com/facebook/jest/pull/5889`))
- `[expect]` Introduce toStrictEqual ([#&#8203;6032](`https://github.com/facebook/jest/pull/6032`))
- `[expect]` Add return matchers ([#&#8203;5879](`https://github.com/facebook/jest/pull/5879`))
- `[jest-cli]` Improve snapshot summaries ([#&#8203;6181](`https://github.com/facebook/jest/pull/6181`))
- `[expect]` Include custom mock names in error messages ([#&#8203;6199](`https://github.com/facebook/jest/pull/6199`))
- `[jest-diff]` Support returning diff from oneline strings ([#&#8203;6221](`https://github.com/facebook/jest/pull/6221`))
- `[expect]` Improve return matchers ([#&#8203;6172](`https://github.com/facebook/jest/pull/6172`))
- `[jest-cli]` Overhaul watch plugin hooks names ([#&#8203;6249](`https://github.com/facebook/jest/pull/6249`))
- `[jest-mock]` Include tracked call results in serialized mock ([#&#8203;6244](`https://github.com/facebook/jest/pull/6244`))
##### Fixes

- `[jest-cli]` Fix stdin encoding to utf8 for watch plugins. ([#&#8203;6253](`https://github.com/facebook/jest/issues/6253`))
- `[expect]` Better detection of DOM Nodes for equality ([#&#8203;6246](`https://github.com/facebook/jest/pull/6246`))
- `[jest-cli]` Fix misleading action description for F key when in ""only failed tests"" mode. ([#&#8203;6167](`https://github.com/facebook/jest/issues/6167`))
- `[jest-worker]` Stick calls to workers before processing them ([#&#8203;6073](`https://github.com/facebook/jest/pull/6073`))
- `[babel-plugin-jest-hoist]` Allow using `console` global variable ([#&#8203;6075](`https://github.com/facebook/jest/pull/6075`))
- `[jest-jasmine2]` Always remove node core message from assert stack traces ([#&#8203;6055](`https://github.com/facebook/jest/pull/6055`))
- `[expect]` Add stack trace when `expect.assertions` and `expect.hasAssertions` causes test failures. ([#&#8203;5997](`https://github.com/facebook/jest/pull/5997`))
- `[jest-runtime]` Throw a more useful error when trying to require modules after the test environment is torn down ([#&#8203;5888](`https://github.com/facebook/jest/pull/5888`))
- `[jest-mock]` [**BREAKING**] Replace timestamps with `invocationCallOrder` ([#&#8203;5867](`https://github.com/facebook/jest/pull/5867`))
- `[jest-jasmine2]` Install `sourcemap-support` into normal runtime to catch runtime errors ([#&#8203;5945](`https://github.com/facebook/jest/pull/5945`))
- `[jest-jasmine2]` Added assertion error handling inside `afterAll hook` ([#&#8203;5884](`https://github.com/facebook/jest/pull/5884`))
- `[jest-cli]` Remove the notifier actions in case of failure when not in watch mode. ([#&#8203;5861](`https://github.com/facebook/jest/pull/5861`))
- `[jest-mock]` Extend .toHaveBeenCalled return message with outcome ([#&#8203;5951](`https://github.com/facebook/jest/pull/5951`))
- `[jest-runner]` Assign `process.env.JEST_WORKER_ID=""1""` when in runInBand mode ([#&#8203;5860](`https://github.com/facebook/jest/pull/5860`))
- `[jest-cli]` Add descriptive error message when trying to use `globalSetup`/`globalTeardown` file that doesn't export a function. ([#&#8203;5835](`https://github.com/facebook/jest/pull/5835`))
- `[expect]` Do not rely on `instanceof RegExp`, since it will not work for RegExps created inside of a different VM ([#&#8203;5729](`https://github.com/facebook/jest/pull/5729`))
- `[jest-resolve]` Update node module resolution algorithm to correctly handle symlinked paths ([#&#8203;5085](`https://github.com/facebook/jest/pull/5085`))
- `[jest-editor-support]` Update `Settings` to use spawn in shell option ([#&#8203;5658](`https://github.com/facebook/jest/pull/5658`))
- `[jest-cli]` Improve the error message when 2 projects resolve to the same config ([#&#8203;5674](`https://github.com/facebook/jest/pull/5674`))
- `[jest-runtime]` remove retainLines from coverage instrumentation ([#&#8203;5692](`https://github.com/facebook/jest/pull/5692`))
- `[jest-cli]` Fix update snapshot issue when using watchAll ([#&#8203;5696](`https://github.com/facebook/jest/pull/5696`))
- `[expect]` Fix rejects.not matcher ([#&#8203;5670](`https://github.com/facebook/jest/pull/5670`))
- `[jest-runtime]` Prevent Babel warnings on large files ([#&#8203;5702](`https://github.com/facebook/jest/pull/5702`))
- `[jest-mock]` Prevent `mockRejectedValue` from causing unhandled rejection ([#&#8203;5720](`https://github.com/facebook/jest/pull/5720`))
- `[pretty-format]` Handle React fragments better ([#&#8203;5816](`https://github.com/facebook/jest/pull/5816`))
- `[pretty-format]` Handle formatting of `React.forwardRef` and `Context` components ([#&#8203;6093](`https://github.com/facebook/jest/pull/6093`))
- `[jest-cli]` Switch collectCoverageFrom back to a string ([#&#8203;5914](`https://github.com/facebook/jest/pull/5914`))
- `[jest-regex-util]` Fix handling regex symbols in tests path on Windows ([#&#8203;5941](`https://github.com/facebook/jest/pull/5941`))
- `[jest-util]` Fix handling of NaN/Infinity in mock timer delay ([#&#8203;5966](`https://github.com/facebook/jest/pull/5966`))
- `[jest-resolve]` Generalise test for package main entries equivalent to ""."". ([#&#8203;5968](`https://github.com/facebook/jest/pull/5968`))
- `[jest-config]` Ensure that custom resolvers are used when resolving the configuration ([#&#8203;5976](`https://github.com/facebook/jest/pull/5976`))
- `[website]` Fix website docs ([#&#8203;5853](`https://github.com/facebook/jest/pull/5853`))
- `[expect]` Fix isEqual Set and Map to compare object values and keys regardless of order ([#&#8203;6150](`https://github.com/facebook/jest/pull/6150`))
- `[pretty-format]` [**BREAKING**] Remove undefined props from React elements ([#&#8203;6162](`https://github.com/facebook/jest/pull/6162`))
- `[jest-haste-map]` Properly resolve mocked node modules without package.json defined ([#&#8203;6232](`https://github.com/facebook/jest/pull/6232`))
##### Chore & Maintenance

- `[jest-runner]` Move sourcemap installation from `jest-jasmine2` to `jest-runner` ([#&#8203;6176](`https://github.com/facebook/jest/pull/6176`))
- `[jest-cli]` Use yargs's built-in `version` instead of rolling our own ([#&#8203;6215](`https://github.com/facebook/jest/pull/6215`))
- `[docs]` Add explanation on how to mock methods not implemented in JSDOM
- `[jest-jasmine2]` Simplify `Env.execute` and TreeProcessor to setup and clean resources for the top suite the same way as for all of the children suites ([#&#8203;5885](`https://github.com/facebook/jest/pull/5885`))
- `[babel-jest]` [**BREAKING**] Always return object from transformer ([#&#8203;5991](`https://github.com/facebook/jest/pull/5991`))
- `[*]` Run Prettier on compiled output ([#&#8203;5858](`https://github.com/facebook/jest/pull/3497`))
- `[jest-cli]` Add fileChange hook for plugins ([#&#8203;5708](`https://github.com/facebook/jest/pull/5708`))
- `[docs]` Add docs on using `jest.mock(...)` ([#&#8203;5648](`https://github.com/facebook/jest/pull/5648`))
- `[docs]` Mention Jest Puppeteer Preset ([#&#8203;5722](`https://github.com/facebook/jest/pull/5722`))
- `[docs]` Add jest-community section to website ([#&#8203;5675](`https://github.com/facebook/jest/pull/5675`))
- `[docs]` Add versioned docs for v22.4 ([#&#8203;5733](`https://github.com/facebook/jest/pull/5733`))
- `[docs]` Improve Snapshot Testing Guide ([#&#8203;5812](`https://github.com/facebook/jest/issues/5812`))
- `[jest-runtime]` [**BREAKING**] Remove `jest.genMockFn` and `jest.genMockFunction` ([#&#8203;6173](`https://github.com/facebook/jest/pull/6173`))
- `[jest-message-util]` Avoid adding unnecessary indent to blank lines in stack traces ([#&#8203;6211](`https://github.com/facebook/jest/pull/6211`))

---


</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-28T02:21:02Z,NONE,False,335,299,2,,JavaScript,af6ea74cb48e7374ec46bbe679504eb2bdc53c5e,Update jest monorepo to v23
50,https://api.github.com/repos/mozilla/distribution-viewer/pulls/406,406,Update react monorepo to v16.4.0,"This Pull Request renovates the package group ""react monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [react-test-renderer](https://github.com/facebook/react) (`dependencies`): from `16.3.2` to `16.4.0`
-   [react-dom](https://github.com/facebook/react) (`dependencies`): from `16.3.2` to `16.4.0`
-   [react](https://github.com/facebook/react) (`dependencies`): from `16.3.2` to `16.4.0`

# Release Notes
<details>
<summary>facebook/react</summary>

### [`v16.4.0`](https://github.com/facebook/react/blob/master/CHANGELOG.md#&#8203;1640-May-23-2018)
[Compare Source](https://github.com/facebook/react/compare/8e5f12ca6c18fb48ea71cba6bfa9bd7cf499ccb6...v16.4.0)
##### React

* Add a new [experimental](`https://github.com/reactjs/rfcs/pull/51`) `React.unstable_Profiler` component for measuring performance. ([@&#8203;bvaughn] in [#&#8203;12745](`https://github.com/facebook/react/pull/12745`))
##### React DOM

* Add support for the Pointer Events specification. ([@&#8203;philipp-spiess] in [#&#8203;12507](`https://github.com/facebook/react/pull/12507`))
* Properly call `getDerivedStateFromProps()` regardless of the reason for re-rendering. ([@&#8203;acdlite] in [#&#8203;12600](`https://github.com/facebook/react/pull/12600`) and [#&#8203;12802](`https://github.com/facebook/react/pull/12802`))
* Fix a bug that prevented context propagation in some cases. ([@&#8203;gaearon] in [#&#8203;12708](`https://github.com/facebook/react/pull/12708`))
* Fix re-rendering of components using `forwardRef()` on a deeper `setState()`. ([@&#8203;gaearon] in [#&#8203;12690](`https://github.com/facebook/react/pull/12690`))
* Fix some attributes incorrectly getting removed from custom element nodes. ([@&#8203;airamrguez] in [#&#8203;12702](`https://github.com/facebook/react/pull/12702`))
* Fix context providers to not bail out on children if there's a legacy context provider above. ([@&#8203;gaearon] in [#&#8203;12586](`https://github.com/facebook/react/pull/12586`))
* Add the ability to specify `propTypes` on a context provider component. ([@&#8203;nicolevy] in [#&#8203;12658](`https://github.com/facebook/react/pull/12658`))
* Fix a false positive warning when using `react-lifecycles-compat` in `<StrictMode>`. ([@&#8203;bvaughn] in [#&#8203;12644](`https://github.com/facebook/react/pull/12644`))
* Warn when the `forwardRef()` render function has `propTypes` or `defaultProps`. ([@&#8203;bvaughn] in [#&#8203;12644](`https://github.com/facebook/react/pull/12644`))
* Improve how `forwardRef()` and context consumers are displayed in the component stack. ([@&#8203;sophiebits] in [#&#8203;12777](`https://github.com/facebook/react/pull/12777`))
* Change internal event names. This can break third-party packages that rely on React internals in unsupported ways. ([@&#8203;philipp-spiess] in [#&#8203;12629](`https://github.com/facebook/react/pull/12629`))
##### React Test Renderer

* Fix the `getDerivedStateFromProps()` support to match the new React DOM behavior. ([@&#8203;koba04] in [#&#8203;12676](`https://github.com/facebook/react/pull/12676`))
* Fix a `testInstance.parent` crash when the parent is a fragment or another special node. ([@&#8203;gaearon] in [#&#8203;12813](`https://github.com/facebook/react/pull/12813`))
* `forwardRef()` components are now discoverable by the test renderer traversal methods. ([@&#8203;gaearon] in [#&#8203;12725](`https://github.com/facebook/react/pull/12725`))
* Shallow renderer now ignores `setState()` updaters that return `null` or `undefined`. ([@&#8203;koba04] in [#&#8203;12756](`https://github.com/facebook/react/pull/12756`))
##### React ART

* Fix reading context provided from the tree managed by React DOM. ([@&#8203;acdlite] in [#&#8203;12779](`https://github.com/facebook/react/pull/12779`))
##### React Call Return (Experimental)

* This experiment was deleted because it was affecting the bundle size and the API wasn't good enough. It's likely to come back in the future in some other form. ([@&#8203;gaearon] in [#&#8203;12820](`https://github.com/facebook/react/pull/12820`))
##### React Reconciler (Experimental)

* The [new host config shape](https://github.com/facebook/react/blob/c601f7a64640290af85c9f0e33c78480656b46bc/packages/react-noop-renderer/src/createReactNoop.js#L82-L285) is flat and doesn't use nested objects. ([@&#8203;gaearon] in [#&#8203;12792](`https://github.com/facebook/react/pull/12792`))

---


</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-28T02:19:46Z,NONE,False,37,23,2,,JavaScript,51641b483d25b1db9d950876e09ea45d873008d3,Update react monorepo to v16.4.0
51,https://api.github.com/repos/mozilla/distribution-viewer/pulls/405,405,Update dependency sinon to v5.0.10,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v5.0.7` to `v5.0.10`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v5.0.10`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;5010--2018-05-24)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.9...v5.0.10)
==================

  * Remove functions shadowing time related sandbox methods (#&#8203;1802)

---

### [`v5.0.9`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;509--2018-05-24)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.8...v5.0.9)
==================

  * Upgrade `@std/esm` to `esm`.

---

### [`v5.0.8`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;508--2018-05-24)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.7...v5.0.8)
==================

  * Add isSealed check to is-es-module to make certain ESM mocks possible

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-28T00:26:42Z,NONE,False,33,19,2,,JavaScript,258d83636aa613463e6d965c1261dcc5378675a8,Update dependency sinon to v5.0.10
52,https://api.github.com/repos/mozilla/distribution-viewer/pulls/404,404,Update dependency react-ga to v2.5.3,"This Pull Request updates dependency [react-ga](https://github.com/react-ga/react-ga) from `v2.5.2` to `v2.5.3`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.5.3`](https://github.com/react-ga/react-ga/releases/2.5.3)
[Compare Source](https://github.com/react-ga/react-ga/compare/2.5.2...2.5.3)
Undo accidentally removed Typescript Definitions.

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-28T00:26:15Z,NONE,False,25,11,2,,JavaScript,165cb4401007521064c708006dfab6aeafe5b257,Update dependency react-ga to v2.5.3
53,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,3193a8c9a5188f2bd631bc1d32273d909abed9be,Update django from 1.11.12 to 1.11.13
54,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,8123a348f26c7b3736f49dd660127aa833586072,Update pyopenssl from 17.5.0 to 18.0.0
55,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,4136af36d2054392d3f507eb0341240670f79eeb,Update google-api-python-client from 1.6.6 to 1.6.7
56,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,dc2bf9de6147d8c8534109e2aa67aed02e348d72,Update gunicorn from 19.7.1 to 19.8.1
57,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,9112e1ce38c3bc4ba6b87fcfe2aabfa25c11387e,Update raven from 6.6.0 to 6.8.0
58,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,dc14207d8f50aa6b0eb1ec7e288368476980ab78,Update simplejson from 3.13.2 to 3.15.0
59,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,e9523b3441a225e2c34267ced0e165e1feea4823,Update pycodestyle from 2.3.1 to 2.4.0
60,https://api.github.com/repos/mozilla/distribution-viewer/pulls/403,403,Scheduled weekly dependency update for week 20,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [PyOpenSSL](https://pypi.org/project/PyOpenSSL) from **17.5.0** to **18.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 18.0.0
   ```
   -------------------


Backward-incompatible changes:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- The minimum ``cryptography`` version is now 2.2.1.
- Support for Python 2.6 has been dropped.


Deprecations:
^^^^^^^^^^^^^

*none*


Changes:
^^^^^^^^

- Added ``Connection.get_certificate`` to retrieve the local certificate.
  `733 &lt;https://github.com/pyca/pyopenssl/pull/733&gt;`_
- ``OpenSSL.SSL.Connection`` now sets ``SSL_MODE_AUTO_RETRY`` by default.
  `753 &lt;https://github.com/pyca/pyopenssl/pull/753&gt;`_
- Added ``Context.set_tlsext_use_srtp`` to enable negotiation of SRTP keying material.
  `734 &lt;https://github.com/pyca/pyopenssl/pull/734&gt;`_


----
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyopenssl
  - Changelog: https://pyup.io/changelogs/pyopenssl/
  - Homepage: https://pyopenssl.org/
  - Docs: https://pythonhosted.org/pyOpenSSL/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





### Update [pyflakes](https://pypi.org/project/pyflakes) from **1.6.0** to **2.0.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0.0
   ```
   - Drop support for EOL Python &lt;2.7 and 3.2-3.3
  - Check for unused exception binding in `except:` block
  - Handle string literal type annotations
  - Ignore redefinitions of `_`, unless originally defined by import
  - Support `__class__` without `self` in Python 3
  - Issue an error for `raise NotImplemented(...)`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pyflakes
  - Changelog: https://pyup.io/changelogs/pyflakes/
  - Repo: https://github.com/PyCQA/pyflakes
</details>





",pyup-bot,16239342,2018-05-21T15:54:19Z,CONTRIBUTOR,False,8,8,1,,JavaScript,bd69b00135a0d31b072aecda47258edf41544980,Update pyflakes from 1.6.0 to 2.0.0
61,https://api.github.com/repos/mozilla/distribution-viewer/pulls/402,402,Update jest monorepo to v22.4.4,"This Pull Request renovates the package group ""jest monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [jest-cli](https://github.com/facebook/jest) (`dependencies`): from `22.4.3` to `22.4.4`
-   [babel-jest](https://github.com/facebook/jest) (`dependencies`): from `22.4.3` to `22.4.4`

# Release Notes
<details>
<summary>facebook/jest</summary>

### [`v22.4.4`](https://github.com/facebook/jest/compare/6851d8bc9d67e83fb1bb0199d28ef84565938225...v22.4.4)
[Compare Source](https://github.com/facebook/jest/compare/6851d8bc9d67e83fb1bb0199d28ef84565938225...v22.4.4)


---


</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-21T00:36:51Z,NONE,True,92,93,2,,JavaScript,439f6f6423a4939d4d1bc774c0d0888bca86e342,Update jest monorepo to v22.4.4
62,https://api.github.com/repos/mozilla/distribution-viewer/pulls/401,401,Update dependency react-ga to v2.5.2,"This Pull Request updates dependency [react-ga](https://github.com/react-ga/react-ga) from `v2.5.0` to `v2.5.2`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.5.2`](https://github.com/react-ga/react-ga/releases/2.5.2)
[Compare Source](https://github.com/react-ga/react-ga/compare/2.5.0...2.5.2)
Add more typescript definitions.

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-21T00:35:44Z,NONE,True,4,4,2,,JavaScript,4433063922a9a069bdaa9959268b435601a0eaa3,Update dependency react-ga to v2.5.2
63,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,3a5db08c013be0e8e4dc7d4f2c1c7fbbdc32b9a1,Update django from 1.11.12 to 1.11.13
64,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,daec11022810741f0c651cbaec9304594f0c931a,Update google-api-python-client from 1.6.6 to 1.6.7
65,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,3afd2d0e76aa660e1986070bf9aec8d22b09441c,Update gunicorn from 19.7.1 to 19.8.1
66,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,d175375e032fd52008cf3618819309d50e365588,Update raven from 6.6.0 to 6.8.0
67,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,658a9cd0b82c1d672d72ff669763198e1f8d9cff,Update simplejson from 3.13.2 to 3.15.0
68,https://api.github.com/repos/mozilla/distribution-viewer/pulls/399,399,Scheduled weekly dependency update for week 19,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.8.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.8.0
   ```
   ------------------
* [Core] Fixed DSNs without secrets not sending events.
* [Core] Added lazy import for pkg_resources
* [Core] Added NamedTuple Serializer
* [Sanic] Fixed sanic integration dependencies
* [Django] Fixed sql hook bug
   ```
   
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.15.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.15.0
   ```
   * Clean up the C code
  https://github.com/simplejson/simplejson/pull/220
* Bypass the decode() method in bytes subclasses
  https://github.com/simplejson/simplejson/pull/219
* Support builds without cStringIO
  https://github.com/simplejson/simplejson/pull/217
* Allow to disable serializing bytes by default in Python 3
  https://github.com/simplejson/simplejson/pull/216
* Simplify the compatibility code
  https://github.com/simplejson/simplejson/pull/215
* Fix tests in Python 2.5
  https://github.com/simplejson/simplejson/pull/214
   ```
   
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-14T15:50:15Z,CONTRIBUTOR,False,6,6,1,,JavaScript,59a566e2e33c975ea1d7adff06ade017b87c6d1c,Update pycodestyle from 2.3.1 to 2.4.0
69,https://api.github.com/repos/mozilla/distribution-viewer/pulls/398,398,Update dependency eslint-plugin-react to v7.8.2 - autoclosed,"This Pull Request updates dependency [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) from `v7.7.0` to `v7.8.2`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v7.8.2`](https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#&#8203;782---2018-05-13)
[Compare Source](https://github.com/yannickcr/eslint-plugin-react/compare/v7.8.1...v7.8.2)
##### Fixed
* Fix crash in [`boolean-prop-naming`][] when encountering a required shape prop type ([#&#8203;1791][] @&#8203;pcorpet)

[7.8.2]: https://github.com/yannickcr/eslint-plugin-react/compare/v7.8.1...v7.8.2
[#&#8203;1791]: `https://github.com/yannickcr/eslint-plugin-react/issues/1791`

---

### [`v7.8.1`](https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#&#8203;781---2018-05-12)
[Compare Source](https://github.com/yannickcr/eslint-plugin-react/compare/v7.8.0...v7.8.1)
##### Fixed
* Fix crash in [`no-deprecated`][] when encountering a class constructor ([#&#8203;1785][] @&#8203;taddei)

[7.8.1]: https://github.com/yannickcr/eslint-plugin-react/compare/v7.8.0...v7.8.1
[#&#8203;1785]: `https://github.com/yannickcr/eslint-plugin-react/issues/1785`

---

### [`v7.8.0`](https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#&#8203;780---2018-05-11)
[Compare Source](https://github.com/yannickcr/eslint-plugin-react/compare/v7.8.0-rc.0...v7.8.0)
##### Added
* Add support for fragments to [`react-in-jsx-scope`][] ([#&#8203;1758][])
* Add support for Flow generic PropType to [`require-default-props`][] ([#&#8203;1724][] @&#8203;Miziak)
* Add component whitelist option to [`forbid-component-props`][] ([#&#8203;1732][] @&#8203;ThiefMaster)
* Add support for React 16.3 lifecycle methods to [`no-unused-prop-types`][] ([#&#8203;1681][] @&#8203;bvaughn)
* Add support for React 16.3 lifecycle methods to [`sort-comp`][] ([#&#8203;1767][] @&#8203;joe-denea)
* Add support for React 16.3 lifecycle methods to [`no-typos`][]
* Add support for `prevState` and `nextState` to [`no-unused-state`][] ([#&#8203;1759][])
* Add warnings for `componentWillMount`, `componentWillReceiveProps` and `componentWillUpdate` lifecycle methods in [`no-deprecated`][] ([#&#8203;1750][] @&#8203;sergei-startsev)
##### Fixed
* Fix [`no-typos`][] false positive on custom `PropType` classes ([#&#8203;1389][] @&#8203;brettdh)
* Fix [`boolean-prop-naming`][] to handle required props ([#&#8203;1389][] @&#8203;louisscruz)
* Fix [`jsx-curly-brace-presence`][] to allow whitespace JSX container ([#&#8203;1717][] @&#8203;sharmilajesupaul)
* Fix [`jsx-no-bind`][] to handle ternary conditions ([#&#8203;1722][] @&#8203;gwenaellarmet)
##### Changed
* Documentation improvements ([#&#8203;1699][] @&#8203;ronanmathew, [#&#8203;1743][] @&#8203;ybiquitous, [#&#8203;1753][] @&#8203;awthwathje, [#&#8203;1783][] @&#8203;chentsulin, [#&#8203;1703][] @&#8203;ferhatelmas)

[7.8.0]: https://github.com/yannickcr/eslint-plugin-react/compare/v7.7.0...v7.8.0
[#&#8203;1758]: `https://github.com/yannickcr/eslint-plugin-react/issues/1758`
[#&#8203;1724]: `https://github.com/yannickcr/eslint-plugin-react/issues/1724`
[#&#8203;1732]: `https://github.com/yannickcr/eslint-plugin-react/issues/1732`
[#&#8203;1681]: `https://github.com/yannickcr/eslint-plugin-react/pull/1681`
[#&#8203;1767]: `https://github.com/yannickcr/eslint-plugin-react/issues/1767`
[#&#8203;1759]: `https://github.com/yannickcr/eslint-plugin-react/issues/1759`
[#&#8203;1750]: `https://github.com/yannickcr/eslint-plugin-react/pull/1750`
[#&#8203;1389]: `https://github.com/yannickcr/eslint-plugin-react/issues/1389`
[#&#8203;1717]: `https://github.com/yannickcr/eslint-plugin-react/issues/1717`
[#&#8203;1722]: `https://github.com/yannickcr/eslint-plugin-react/issues/1722`
[#&#8203;1699]: `https://github.com/yannickcr/eslint-plugin-react/pull/1699`
[#&#8203;1743]: `https://github.com/yannickcr/eslint-plugin-react/pull/1743`
[#&#8203;1753]: `https://github.com/yannickcr/eslint-plugin-react/issues/1753`
[#&#8203;1783]: `https://github.com/yannickcr/eslint-plugin-react/pull/1783`
[#&#8203;1703]: `https://github.com/yannickcr/eslint-plugin-react/pull/1703`

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-14T01:23:11Z,NONE,False,3683,5064,2,,JavaScript,916eaf2850037ab83f3ff91148ece98793ed96be,Update dependency eslint-plugin-react to v7.8.2
70,https://api.github.com/repos/mozilla/distribution-viewer/pulls/397,397,Update dependency d3-format to v1.3.0,"This Pull Request updates dependency [d3-format](https://github.com/d3/d3-format) from `v1.2.2` to `v1.3.0`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v1.3.0`](https://github.com/d3/d3-format/releases/v1.3.0)
[Compare Source](https://github.com/d3/d3-format/compare/v1.2.2...v1.3.0)
* Add `~` option to trim insignificant zeros. Thanks, @&#8203;vasturiano! (#&#8203;54)
* Fix [d3.formatSpecifier](https://github.com/d3/d3-format/blob/master/README.md#formatSpecifier) to not bake shorthand aliases.

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-14T00:08:09Z,NONE,True,15,4,2,,JavaScript,364b2b173e77d7b6c9a8443cc59e2249430af6f3,Update dependency d3-format to v1.3.0
71,https://api.github.com/repos/mozilla/distribution-viewer/pulls/396,396,Update dependency babel-preset-env to v1.7.0,"This Pull Request updates dependency [babel-preset-env](https://github.com/babel/babel-preset-env) from `v1.6.1` to `v1.7.0`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v1.7.0`](https://github.com/babel/babel-preset-env/compare/v1.6.1...v1.7.0)
[Compare Source](https://github.com/babel/babel-preset-env/compare/v1.6.1...v1.7.0)


---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-14T00:06:49Z,NONE,True,3690,5082,2,,JavaScript,719711f8c160b30c42bc08e712bd8cefab965587,Update dependency babel-preset-env to v1.7.0
72,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,bf3917e28e56a87bdc61ba200d8249d2a729b7b3,Update django from 1.11.12 to 1.11.13
73,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,09f8ed0556b5b7d726399f5bc986f12f85ecdbc3,Update google-api-python-client from 1.6.6 to 1.6.7
74,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,3baf8650741a848f96135b094b6fb56fa4d4c50a,Update gunicorn from 19.7.1 to 19.8.1
75,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,5808a3c1b2bf987faf84772c512dc9dd03264525,Update raven from 6.6.0 to 6.7.0
76,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,ce204ffeb7ff2b6bb6d13eeb5f6fb7bc162ec769,Update simplejson from 3.13.2 to 3.14.0
77,https://api.github.com/repos/mozilla/distribution-viewer/pulls/395,395,Scheduled weekly dependency update for week 18,"




### Update [Django](https://pypi.org/project/Django) from **1.11.12** to **1.11.13**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.13
   ```
   ============================

*May 1, 2018*

Django 1.11.13 fixes several bugs in 1.11.12.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where altering a field with a unique
  constraint may drop and rebuild more foreign keys than necessary
  (:ticket:`29193`).

* Fixed crashes in ``django.contrib.admindocs`` when a view is a callable
  object, such as ``django.contrib.syndication.views.Feed`` (:ticket:`29296`).

* Fixed a regression in Django 1.11.12 where ``QuerySet.values()`` or
  ``values_list()`` after combining an annotated and unannotated queryset with
  ``union()``, ``difference()``, or ``intersection()`` crashed due to mismatching
  columns (:ticket:`29286`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.1**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-05-07T15:41:14Z,CONTRIBUTOR,False,6,6,1,,JavaScript,3ce2993abb0e51ae1a705f875842053377ad9f66,Update pycodestyle from 2.3.1 to 2.4.0
78,https://api.github.com/repos/mozilla/distribution-viewer/pulls/394,394,Update dependency sinon to v5,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.5.0` to `v5.0.7`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v5.0.7`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;507--2018-05-07)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.6...v5.0.7)
==================

  * Fix stub id prefix (#&#8203;1786)

---

### [`v5.0.6`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;506--2018-05-07)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.5...v5.0.6)
==================

  * Remove support-sinon.js as postinstall banner

---

### [`v5.0.5`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;505--2018-05-07)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.4...v5.0.5)
==================

  * Refuse to replace already replaced values (#&#8203;1779)

---

### [`v5.0.4`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;504--2018-05-05)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.3...v5.0.4)
==================

  * Fix #&#8203;1781: Reject non-function values a f argument to fake

---

### [`v5.0.3`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;503--2018-05-02)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.2...v5.0.3)
==================

  * Fix #&#8203;1775: Default sandbox does not restore stubs, spies, mocks

---

### [`v5.0.2`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;502--2018-05-01)
[Compare Source](https://github.com/sinonjs/sinon/compare/v5.0.1...v5.0.2)
==================

  * Reset history on sandbox reset (#&#8203;1770)

---

### [`v5.0.1`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;501--2018-04-27)
[Compare Source](https://github.com/sinonjs/sinon/compare/2e4f28ef1261bb761ce751e806aabbeb17ef5662...v5.0.1)
==================

  * Remove deprecated spy.reset method
  * Add sinon.replace, sinon.replaceGetter and sinon.replaceSetter
  * Add `fake`
  * Use `sinon` as a default sandbox

---

### [`v5.0.0`](https://github.com/sinonjs/sinon/compare/c742969fdb770ee19212140d3969890b092a52af...1ea27492addfcc2390dcb9087dae906f97987aa2)
[Compare Source](https://github.com/sinonjs/sinon/compare/c742969fdb770ee19212140d3969890b092a52af...1ea27492addfcc2390dcb9087dae906f97987aa2)


---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-07T01:10:42Z,NONE,True,24,24,2,,JavaScript,c8d93d33fb7fa61405b64732716d3b25b978daee,Update dependency sinon to v5
79,https://api.github.com/repos/mozilla/distribution-viewer/pulls/393,393,Update dependency gulp-clean-css to v3.9.4,"This Pull Request updates dependency [gulp-clean-css](https://github.com/scniro/gulp-clean-css) from `v3.9.3` to `v3.9.4`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v3.9.4`](https://github.com/scniro/gulp-clean-css/releases/3.9.4)
[Compare Source](https://github.com/scniro/gulp-clean-css/compare/3.9.3...3.9.4)
- update deps (mitigate known vulnerabilities)

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-07T00:08:14Z,NONE,True,12,12,2,,JavaScript,c6f15a53d75ddcfbe8f472dea200428c876ba942,Update dependency gulp-clean-css to v3.9.4
80,https://api.github.com/repos/mozilla/distribution-viewer/pulls/392,392,Update dependency browser-sync to v2.24.4,"This Pull Request updates dependency [browser-sync](https://github.com/BrowserSync/browser-sync) from `v2.23.7` to `v2.24.4`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.24.4`](https://github.com/BrowserSync/browser-sync/releases/v2.24.4)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/v2.24.3...v2.24.4)
**fix**
- Remote Debug tools do not work - fixes #&#8203;1556 a6d39e6e89f6a12e9a16e08b3bc71d76cc30f344

---

### [`v2.24.3`](https://github.com/BrowserSync/browser-sync/releases/v2.24.3)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/af7922620bec5ecb9936a7aecd5685375eae4c21...v2.24.3)
2.24.0 was a very large release - and with that, a handful of patch releases inevitably follow. Please move straight to 2.24.3 :)

**fixes**
- Don’t always add ""defaultIgnorePatterns"" - fixes #&#8203;1543 cc5118cf5382761f85bb34e3b40563046a3fdeb9
- handle windows-style paths on the client - fixes #&#8203;1553 11538454ff545fe8e540ddedc020c818736a828b
- remove source-maps from client - fixes #&#8203;1551 9cef9c11d008bee60b54f7219f53fa54d49a5eb1
- support bs.reload('*.css') - fixes #&#8203;1550 568e64e3f936c66ebee63a1f45832c42d742d232
- (client) use correct npm lifecycle hook for prepublish - fixes #&#8203;1549 b37e11ce6b60a05ef8c6064d69df069f56e9ebec

---

### [`v2.24.2`](https://github.com/BrowserSync/browser-sync/compare/b37e11ce6b60a05ef8c6064d69df069f56e9ebec...v2.24.2)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/b37e11ce6b60a05ef8c6064d69df069f56e9ebec...v2.24.2)


---

### [`v2.24.1`](https://github.com/BrowserSync/browser-sync/compare/df47babe99f4ab7bed2855f471d923c2f4907071...v2.24.1)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/df47babe99f4ab7bed2855f471d923c2f4907071...v2.24.1)


---

### [`v2.24.0`](https://github.com/BrowserSync/browser-sync/releases/v2.24.0)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/b5d25f41d33c0b95b11a176412ea82c28f2ea59f...v2.24.0)
**Features**
- (client) rewrite to Typescript + RxJS 99a69ce9303ebf7a8077f18872705f2150e3353d
- (client) make initial options available in initial payload 9d9dfb143e235b2d06af3a38d9097b8d98c9dbaf
- (client) added `injectNotification` option & defaulted to false 06608fbe8d7e01fba19987f7de745af62535b57b
- (client-js) allow functions in client:js hook 480378649db2b87b4c627ddc6ef772d0307115e5
- (http-protocol) support POST requests over HTTP Protocol e4754c94a922263bf7f8c7e498a8214c3a33d66a

**Fixes**
- (client, rxjs) fix imports to avoid the entire library being bundled b8685bcf5bcd4add21208eee4e6a6492437667b5
- (cli) remove `watch` boolean when false b41f602bdae17db9ed4f5418719c4003646c0335

**Dependencies**
- upgrade ua-parser-js@&#8203;0.7.17 0ad5f3a5738dc59182691d2e5212184fa452eea9
- upgrade serve-static@&#8203;1.13.2 f6ac69f2792fbd3e30e48fa6475a6e2f14e0a788
- upgrade qs@&#8203;6.2.3 - fixes #&#8203;1512 0e1dd37d0c524df92adc920e3a9da39ffecc0e54
- typescript@&#8203;2.8 679fbbce686f036c81951113656c7b85578ef6d1

**Tests**
- add cypress for integration tests 31bace2977a6489580d45e16dd0fe5a3ffa3ec87

**misc**
- Resolved warning in tsconfig. 1c9ae4302debcfb63c9e93999c6c1ad60aff8972
- Merge pull request #&#8203;1547 from jgravois/patchbump localtunnel to resolve security vuln nag 8a957e9d954e500ffa35b2f3c2757cd449a12f86
- bump localtunnel to resolve security vuln nag 31956ab67f919fa2c2787305ccce1d3e6cc9d1dd
- Merge pull request #&#8203;1544 from SergiuNegara/fix/steam-docs-spellingFix stream docs spelling 78c3854330a4cf58a97fee6cd0f41b81c476b531
- Fix stream docs spellingChange `teh` to `the` 4ce533cec469c8ca45c9c6bca3bcfa8e52041369

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-05-07T00:07:54Z,NONE,False,232,346,2,,JavaScript,5d7cea3eeb80f80c737499b704a964067c20dfce,Update dependency browser-sync to v2.24.4
81,https://api.github.com/repos/mozilla/distribution-viewer/pulls/391,391,Scheduled weekly dependency update for week 17,"




### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-30T15:32:14Z,CONTRIBUTOR,False,5,5,1,,JavaScript,54d0991b49677a69c3a5e53f9a989cd4f924e236,Update google-api-python-client from 1.6.6 to 1.6.7
82,https://api.github.com/repos/mozilla/distribution-viewer/pulls/391,391,Scheduled weekly dependency update for week 17,"




### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-30T15:32:14Z,CONTRIBUTOR,False,5,5,1,,JavaScript,2e19846c9037ea0ad1cc72939424bebe57bbcb8e,Update gunicorn from 19.7.1 to 19.8.0
83,https://api.github.com/repos/mozilla/distribution-viewer/pulls/391,391,Scheduled weekly dependency update for week 17,"




### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-30T15:32:14Z,CONTRIBUTOR,False,5,5,1,,JavaScript,73f192412d34b0cd5283634e422f69f7d7f227d0,Update raven from 6.6.0 to 6.7.0
84,https://api.github.com/repos/mozilla/distribution-viewer/pulls/391,391,Scheduled weekly dependency update for week 17,"




### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-30T15:32:14Z,CONTRIBUTOR,False,5,5,1,,JavaScript,63cc65e2e828070e5b562c62a1e9c82def2a7785,Update simplejson from 3.13.2 to 3.14.0
85,https://api.github.com/repos/mozilla/distribution-viewer/pulls/391,391,Scheduled weekly dependency update for week 17,"




### Update [google-api-python-client](https://pypi.org/project/google-api-python-client) from **1.6.6** to **1.6.7**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.7
   ```
   Version 1.6.7

  Bugfix release

  **Note**: The next release of this library will no longer directly depend on
    oauth2client. If you need to use oauth2client, you&#39;ll need to explicitly
    install it.

  - Make body optional for requests with no parameters. (446)
  - Fix retying on socket.timeout. (495)
  - Match travis matrix with tox testenv. (498)
  - Remove oauth2client._helpers dependency. (493)
  - Remove unused keyring test dependency. (496)
  - discovery.py: remove unused oauth2client import. (492)
  - Update README to reference GCP API client libraries. (490)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [gunicorn](https://pypi.org/project/gunicorn) from **19.7.1** to **19.8.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/gunicorn
  - Changelog: https://pyup.io/changelogs/gunicorn/
  - Homepage: http://gunicorn.org
</details>





### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-30T15:32:14Z,CONTRIBUTOR,False,5,5,1,,JavaScript,0302b544374a632eac1a89ef1cd31d842d49714e,Update pycodestyle from 2.3.1 to 2.4.0
86,https://api.github.com/repos/mozilla/distribution-viewer/pulls/390,390,Update dependency browser-sync to v2.24.1,"This Pull Request updates dependency [browser-sync](https://github.com/BrowserSync/browser-sync) from `v2.23.7` to `v2.24.1`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.24.1`](https://github.com/BrowserSync/browser-sync/compare/df47babe99f4ab7bed2855f471d923c2f4907071...v2.24.1)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/df47babe99f4ab7bed2855f471d923c2f4907071...v2.24.1)


---

### [`v2.24.0`](https://github.com/BrowserSync/browser-sync/releases/v2.24.0)
[Compare Source](https://github.com/BrowserSync/browser-sync/compare/b5d25f41d33c0b95b11a176412ea82c28f2ea59f...v2.24.0)
**Features**
- (client) rewrite to Typescript + RxJS 99a69ce9303ebf7a8077f18872705f2150e3353d
- (client) make initial options available in initial payload 9d9dfb143e235b2d06af3a38d9097b8d98c9dbaf
- (client) added `injectNotification` option & defaulted to false 06608fbe8d7e01fba19987f7de745af62535b57b
- (client-js) allow functions in client:js hook 480378649db2b87b4c627ddc6ef772d0307115e5
- (http-protocol) support POST requests over HTTP Protocol e4754c94a922263bf7f8c7e498a8214c3a33d66a

**Fixes**
- (client, rxjs) fix imports to avoid the entire library being bundled b8685bcf5bcd4add21208eee4e6a6492437667b5
- (cli) remove `watch` boolean when false b41f602bdae17db9ed4f5418719c4003646c0335

**Dependencies**
- upgrade ua-parser-js@&#8203;0.7.17 0ad5f3a5738dc59182691d2e5212184fa452eea9
- upgrade serve-static@&#8203;1.13.2 f6ac69f2792fbd3e30e48fa6475a6e2f14e0a788
- upgrade qs@&#8203;6.2.3 - fixes #&#8203;1512 0e1dd37d0c524df92adc920e3a9da39ffecc0e54
- typescript@&#8203;2.8 679fbbce686f036c81951113656c7b85578ef6d1

**Tests**
- add cypress for integration tests 31bace2977a6489580d45e16dd0fe5a3ffa3ec87

**misc**
- Resolved warning in tsconfig. 1c9ae4302debcfb63c9e93999c6c1ad60aff8972
- Merge pull request #&#8203;1547 from jgravois/patchbump localtunnel to resolve security vuln nag 8a957e9d954e500ffa35b2f3c2757cd449a12f86
- bump localtunnel to resolve security vuln nag 31956ab67f919fa2c2787305ccce1d3e6cc9d1dd
- Merge pull request #&#8203;1544 from SergiuNegara/fix/steam-docs-spellingFix stream docs spelling 78c3854330a4cf58a97fee6cd0f41b81c476b531
- Fix stream docs spellingChange `teh` to `the` 4ce533cec469c8ca45c9c6bca3bcfa8e52041369

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-30T00:06:41Z,NONE,False,232,346,2,,JavaScript,0ae4c0daf38a16634699e3fd4206d99f5cbf1366,Update dependency browser-sync to v2.24.1
87,https://api.github.com/repos/mozilla/distribution-viewer/pulls/389,389,Update dependency babel-core to v6.26.3,"This Pull Request updates dependency [babel-core](https://babeljs.io/) from `v6.26.0` to `v6.26.3`



---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-30T00:06:06Z,NONE,True,36,36,2,,JavaScript,d6e41245b618e0cf8b00f9d424a8db7f6f1355bd,Update dependency babel-core to v6.26.3
88,https://api.github.com/repos/mozilla/distribution-viewer/pulls/388,388,Update react monorepo to v16.3.2,"This Pull Request renovates the package group ""react monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [react-test-renderer](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`
-   [react-dom](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`
-   [react](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`

# Release Notes
<details>
<summary>facebook/react</summary>

### [`v16.3.2`](https://github.com/facebook/react/blob/master/CHANGELOG.md#&#8203;1632-April-16-2018)

##### React

* Improve the error message when passing `null` or `undefined` to `React.cloneElement`. ([@&#8203;nicolevy] in [#&#8203;12534](`https://github.com/facebook/react/pull/12534`))
##### React DOM

* Fix an IE crash in development when using `<StrictMode>`. ([@&#8203;bvaughn] in [#&#8203;12546](`https://github.com/facebook/react/pull/12546`))
* Fix labels in User Timing measurements for new component types. ([@&#8203;bvaughn] in [#&#8203;12609](`https://github.com/facebook/react/pull/12609`))
* Improve the warning about wrong component type casing. ([@&#8203;nicolevy] in [#&#8203;12533](`https://github.com/facebook/react/pull/12533`))
* Improve general performance in development mode. ([@&#8203;gaearon] in [#&#8203;12537](`https://github.com/facebook/react/pull/12537`))
* Improve performance of the experimental `unstable_observedBits` API with nesting. ([@&#8203;gaearon] in [#&#8203;12543](`https://github.com/facebook/react/pull/12543`))
##### React Test Renderer

* Add a UMD build. ([@&#8203;bvaughn] in [#&#8203;12594](`https://github.com/facebook/react/pull/12594`))

---


</details>

# Commits

<details>
<summary>facebook/react</summary>

#### v16.3.2
-   [`1c2876d`](https://github.com/facebook/react/commit/1c2876d5b558b8591feb335d8d7204bc46f7da8a)Add a build step to hoist warning conditions (#&#8203;12537)
-   [`5e3706c`](https://github.com/facebook/react/commit/5e3706cca0fe0da462c771d14a271cd2961e5718)Don&#x27;t render bitmask-bailing consumers even if there&#x27;s a deeper matching child (#&#8203;12543)
-   [`e932e32`](https://github.com/facebook/react/commit/e932e321a88e07935224701bc4580e3dc9889afe)facebook.github.io/react -&gt; reactjs.org (#&#8203;12545)
-   [`d328e36`](https://github.com/facebook/react/commit/d328e362e86a6af4a0664e004b8f97f18ce972c8)Removed duplicate typeof check (#&#8203;12541)
-   [`8ec0e4a`](https://github.com/facebook/react/commit/8ec0e4a99df76c0ff1779cac4f2eaaaf35a6b5bb)Removed Array.from() usage (#&#8203;12546)
-   [`27535e7`](https://github.com/facebook/react/commit/27535e7bfcb63e8a4d65f273311e380b4ca12eff)Clarify ReactDOM&#x27;s case warning for html tags (#&#8203;12533)
-   [`7a3416f`](https://github.com/facebook/react/commit/7a3416f27532ac25849dfbc505300d469b43bbcc)Expose component stack from reactTag to React Native renderer (#&#8203;12549)
-   [`cf649b4`](https://github.com/facebook/react/commit/cf649b40a56dc5c0ffe2595b963847f0ff8de245)Move TouchHistoryMath to React Native repo (#&#8203;12557)
-   [`5b16b39`](https://github.com/facebook/react/commit/5b16b39508ec33f2f374a5a12aa71647e1728d08)Bug fix
-   [`6bf2797`](https://github.com/facebook/react/commit/6bf2797d6cf76676791424afc93b76dd60d7074c)Remove flushSync from React Native (#&#8203;12565)
-   [`bc753a7`](https://github.com/facebook/react/commit/bc753a716e185c31d8eb7404ab5dd6ee7467b7cb)Support findNodeHandle in Fabric (#&#8203;12573)
-   [`181747a`](https://github.com/facebook/react/commit/181747a6cc25f3020b8561f475eca4ad2824256b)[RN] Move takeSnapshot to RN (#&#8203;12574)
-   [`20c5d97`](https://github.com/facebook/react/commit/20c5d97bb6c6a4af76d66a7e5134952989f9a9b2)Keep consistency in the comment (#&#8203;12579)
-   [`ea37545`](https://github.com/facebook/react/commit/ea3754503742afc3d5c5de2140717817794870ec)Must be *a* before PlacementAndUpdate (#&#8203;12580)
-   [`76b4ba0`](https://github.com/facebook/react/commit/76b4ba01290f446f4313adf3846954412c6051b8)Preserve error codes for invariants on www (#&#8203;12539)
-   [`8dfb057`](https://github.com/facebook/react/commit/8dfb0578816435a1a72f04506ee20d3c55d0f9bc)Unfork invariant and instead use it from reactProdInvariant (#&#8203;12585)
-   [`f88deda`](https://github.com/facebook/react/commit/f88deda83bab316385f39e8479850527cda90607)Throw more specific error if passed undefined in React.cloneElement (#&#8203;12534)
-   [`2f7bca0`](https://github.com/facebook/react/commit/2f7bca0eb2487955e71a45e288e5847b5af522a5)Allocate unique reactTags for RN and Fabric (#&#8203;12587)
-   [`933f882`](https://github.com/facebook/react/commit/933f882a9df728662befe558005f2ea3fe827a1d)Remove ReactNativePropRegistry (#&#8203;12559)
-   [`40d0772`](https://github.com/facebook/react/commit/40d07724fcc801ad69e17b295b68ebea753d5977)[RN] Remove unstable_batchedUpdates and unmountComponentAtNodeAndRemoveContainer from Fabric (#&#8203;12571)
-   [`b6e0512`](https://github.com/facebook/react/commit/b6e0512a81524d397ff4fbfb892372ecc84c6b02)Consolidate eventTypes registry with view configs (#&#8203;12556)
-   [`b99d0b1`](https://github.com/facebook/react/commit/b99d0b14160150c566e091bd10b634beec9a58c3)[RN] Move view config registry to shims (#&#8203;12569)
-   [`725c054`](https://github.com/facebook/react/commit/725c054d4d5d07c5c553a1ca724b01f2e6a43c5d)Refactor findHostInstance and findNodeHandle (#&#8203;12575)
-   [`52afbe0`](https://github.com/facebook/react/commit/52afbe0ebb6fca0fe480e77c6fa8482870ddb2c9)createReactNativeComponentClass needs to be CommonJS
-   [`3eae866`](https://github.com/facebook/react/commit/3eae866e03a96c4f46e257cba73ca158b049ab05)Fixes language in error message. (#&#8203;12590)
-   [`b846152`](https://github.com/facebook/react/commit/b8461524db6d3e016fabf001ad8fa086b4918ef9)Added UMD build to test renderer package (#&#8203;12594)
-   [`3e9515e`](https://github.com/facebook/react/commit/3e9515eedebe0c19f047391605c5b3c71d13fbc2)Remove @&#8203;providesModule in www shims
-   [`915bb53`](https://github.com/facebook/react/commit/915bb5321a8db3435eb36ef1cf9414c15333b447)Bump expiration for interactive updates to 150ms in production (#&#8203;12599)
-   [`c27a998`](https://github.com/facebook/react/commit/c27a99812e75e73d9fad88c97ac8b8db452012c1)[Danger] Minor fixes (#&#8203;12606)
-   [`5dfbfe9`](https://github.com/facebook/react/commit/5dfbfe9da740398c0a2cf4d897a0085000d06b7b)Fixed debug performance labels for new component types (#&#8203;12609)
-   [`1591c8e`](https://github.com/facebook/react/commit/1591c8ebab6151f3cae59ad42e3c15acc52cd67b)Update GCC (#&#8203;12618)
-   [`a4cef29`](https://github.com/facebook/react/commit/a4cef2970341c08e5c16a2406fbf532fc8053d12)tests: add regression test for reading ReactCurrentOwner stateNode (#&#8203;12412)
-   [`2e1cc28`](https://github.com/facebook/react/commit/2e1cc2802709877fb2454163ba30e52a91feac8e)Fix small typos in create-subscription readme (#&#8203;12399)
-   [`1e97a71`](https://github.com/facebook/react/commit/1e97a71a829e698ddac0a5e15fbdec97d35ed2bc)Fix documentation of the release process (#&#8203;12337)
-   [`66c44a7`](https://github.com/facebook/react/commit/66c44a7bc34cb3fcb3c788dcce3f3345a5bd9f58)Updating yarn.lock file for 16.3.2 release
-   [`82f67d6`](https://github.com/facebook/react/commit/82f67d65fd4584c4528352e6b9166ca4da282382)Updating package versions for release 16.3.2
-   [`6494f6b`](https://github.com/facebook/react/commit/6494f6b6b8e1cfa5df9f72b4d94cf9ed582805cd)Update error codes for 16.3.2 release
-   [`3232616`](https://github.com/facebook/react/commit/32326163480b5028ee16f6b4e4ea4426f3c5e95c)Update bundle sizes for 16.3.2 release
-   [`01402f4`](https://github.com/facebook/react/commit/01402f4ad922b5467812586567519e9e5bbd595f)Add 16.3.2 changelog (#&#8203;12621)

</details>





---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-24T23:06:16Z,NONE,True,16,16,2,,JavaScript,d295d8766d9981a4dca313f170163f9e81bbfdf5,Update react monorepo to v16.3.2
89,https://api.github.com/repos/mozilla/distribution-viewer/pulls/387,387,Scheduled weekly dependency update for week 16,"




### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-23T15:30:11Z,CONTRIBUTOR,False,3,3,1,,JavaScript,f8315e0f4c27a62a084b49c3d740f94a72fb7c82,Update raven from 6.6.0 to 6.7.0
90,https://api.github.com/repos/mozilla/distribution-viewer/pulls/387,387,Scheduled weekly dependency update for week 16,"




### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-23T15:30:11Z,CONTRIBUTOR,False,3,3,1,,JavaScript,5b3737fdaa31aeccb60c04f46cd4c03c62fd7fdf,Update simplejson from 3.13.2 to 3.14.0
91,https://api.github.com/repos/mozilla/distribution-viewer/pulls/387,387,Scheduled weekly dependency update for week 16,"




### Update [raven](https://pypi.org/project/raven) from **6.6.0** to **6.7.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.7.0
   ```
   ------------------
* [Sanic] Added support for sanic.
* [Core] Disabled dill logger by default
* [Core] Added `SENTRY_NAME`, `SENTRY_ENVIRONMENT` and `SENTRY_RELEASE` 
         environment variables
* [Core] DSN secret is now optional
* [Core] Added fix for cases with exceptions in repr
* [core] Fixed bug with mutating `record.data`
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





### Update [simplejson](https://pypi.org/project/simplejson) from **3.13.2** to **3.14.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.14.0
   ```
   * Defer is_raw_json test (performance improvement)
  https://github.com/simplejson/simplejson/pull/212
* Avoid escaping U+2028 and U+2029 without ensure_ascii
  https://github.com/simplejson/simplejson/pull/211
* Fix an incorrect type test in Python 2, avoiding an unnecessary unicode copy.
  https://github.com/simplejson/simplejson/pull/210
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/simplejson
  - Changelog: https://pyup.io/changelogs/simplejson/
  - Repo: http://github.com/simplejson/simplejson
</details>





### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-23T15:30:11Z,CONTRIBUTOR,False,3,3,1,,JavaScript,726859ae0678882a89d40fde79d0472beb27dc34,Update pycodestyle from 2.3.1 to 2.4.0
92,https://api.github.com/repos/mozilla/distribution-viewer/pulls/386,386,Update dependency redux to v4,"This Pull Request updates dependency [redux](https://github.com/reactjs/redux) from `v3.7.2` to `v4.0.0`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v4.0.0`](https://github.com/reactjs/redux/releases/v4.0.0)
[Compare Source](https://github.com/reactjs/redux/compare/v4.0.0-rc.1...v4.0.0)
Redux 4 is here! 🎉

If you're a React user, this is going to be a lot like going from 15 to 16. Not a lot of user-facing changes, but some interesting improvements under the hood. 

The major changes (#&#8203;1342) are around our TypeScript definitions, bundled CommonJS and ES builds, throwing if you subscribe or getState from a reducer, and a bunch of other smaller things. The full changes are listed below.

Enjoy!
#### [Changes](https://github.com/reactjs/redux/compare/v3.7.2...v4.0.0)

- Tons of docs updates. Thanks @&#8203;markerikson and the Redux community for all your PRs!
- Make middleware API dispatch pass through all call arguments (#&#8203;2560 by @&#8203;Asvarox)
- Refactor applyMiddleware to reduce confusion around createStore args (#&#8203;2201 by @&#8203;jimbolla)
- Make bindActionCreators transparently pass `this` (#&#8203;2641 by @&#8203;Parakleta)
- Remove @&#8203;private flag on AnyAction type definition (#&#8203;2510 by @&#8203;alexmngn)
- Fixed quote types inconsistency in a warning message (#&#8203;2297 by @&#8203;Andarist)
- Move ActionTypes to a private export (b62248b by @&#8203;timdorr)
- Throw if getState, subscribe, or unsubscribe called while dispatching (#&#8203;1569 by @&#8203;mjw56)
- Warn when dispatching during Middleware setup (#&#8203;1485 by @&#8203;timdorr)
- Mapped type for combineReducers in index.d.ts (#&#8203;2182 by @&#8203;mkusher)
- Remove legacy jsnext entry (#&#8203;2284 by @&#8203;TrySound)
- Revamp TypeScript typing with more type safety (#&#8203;2563 by @&#8203;pelotom)
- Fix TS definitions test for new Dispatch typing (#&#8203;2674 by @&#8203;pelotom)
- Add DeepPartial type for preloaded state (#&#8203;2679 by @&#8203;aikoven)
- Bundle cjs and es formats (#&#8203;2358 by @&#8203;TrySound)
- REPLACE action for replaceReducers (#&#8203;2673 by @&#8203;timdorr)
- Update build to use babel-preset-env (#&#8203;2696 by @&#8203;hmillison)
- Optimize dispatch plain object check (#&#8203;2599 by @&#8203;timdorr)
- Update TypeScript typings (#&#8203;2773 by @&#8203;aikoven)
- Added prettier formatting (#&#8203;2676 by @&#8203;adityavohra7)
- Add a sideEffects: false flag for Webpack 4 (#&#8203;2865 by @&#8203;timdorr)
- Fix missed case in ""observe"" type check (#&#8203;2919 by @&#8203;zerobias)

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-23T02:08:50Z,NONE,False,15,28,2,,JavaScript,2de5806b1cbd3d64dd8cfc7353086366ca1668b6,Update dependency redux to v4
93,https://api.github.com/repos/mozilla/distribution-viewer/pulls/385,385,[needs-reopening] Update react monorepo to v16.3.2,"This Pull Request renovates the package group ""react monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [react-test-renderer](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`
-   [react-dom](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`
-   [react](https://github.com/facebook/react) (`dependencies`): from `16.3.1` to `16.3.2`

# Release Notes
<details>
<summary>facebook/react</summary>

### [`v16.3.2`](https://github.com/facebook/react/blob/master/CHANGELOG.md#&#8203;1632-April-16-2018)

##### React

* Improve the error message when passing `null` or `undefined` to `React.cloneElement`. ([@&#8203;nicolevy] in [#&#8203;12534](`https://github.com/facebook/react/pull/12534`))
##### React DOM

* Fix an IE crash in development when using `<StrictMode>`. ([@&#8203;bvaughn] in [#&#8203;12546](`https://github.com/facebook/react/pull/12546`))
* Fix labels in User Timing measurements for new component types. ([@&#8203;bvaughn] in [#&#8203;12609](`https://github.com/facebook/react/pull/12609`))
* Improve the warning about wrong component type casing. ([@&#8203;nicolevy] in [#&#8203;12533](`https://github.com/facebook/react/pull/12533`))
* Improve general performance in development mode. ([@&#8203;gaearon] in [#&#8203;12537](`https://github.com/facebook/react/pull/12537`))
* Improve performance of the experimental `unstable_observedBits` API with nesting. ([@&#8203;gaearon] in [#&#8203;12543](`https://github.com/facebook/react/pull/12543`))
##### React Test Renderer

* Add a UMD build. ([@&#8203;bvaughn] in [#&#8203;12594](`https://github.com/facebook/react/pull/12594`))

---


</details>

# Commits

<details>
<summary>facebook/react</summary>

#### v16.3.2
-   [`1c2876d`](https://github.com/facebook/react/commit/1c2876d5b558b8591feb335d8d7204bc46f7da8a)Add a build step to hoist warning conditions (#&#8203;12537)
-   [`5e3706c`](https://github.com/facebook/react/commit/5e3706cca0fe0da462c771d14a271cd2961e5718)Don&#x27;t render bitmask-bailing consumers even if there&#x27;s a deeper matching child (#&#8203;12543)
-   [`e932e32`](https://github.com/facebook/react/commit/e932e321a88e07935224701bc4580e3dc9889afe)facebook.github.io/react -&gt; reactjs.org (#&#8203;12545)
-   [`d328e36`](https://github.com/facebook/react/commit/d328e362e86a6af4a0664e004b8f97f18ce972c8)Removed duplicate typeof check (#&#8203;12541)
-   [`8ec0e4a`](https://github.com/facebook/react/commit/8ec0e4a99df76c0ff1779cac4f2eaaaf35a6b5bb)Removed Array.from() usage (#&#8203;12546)
-   [`27535e7`](https://github.com/facebook/react/commit/27535e7bfcb63e8a4d65f273311e380b4ca12eff)Clarify ReactDOM&#x27;s case warning for html tags (#&#8203;12533)
-   [`7a3416f`](https://github.com/facebook/react/commit/7a3416f27532ac25849dfbc505300d469b43bbcc)Expose component stack from reactTag to React Native renderer (#&#8203;12549)
-   [`cf649b4`](https://github.com/facebook/react/commit/cf649b40a56dc5c0ffe2595b963847f0ff8de245)Move TouchHistoryMath to React Native repo (#&#8203;12557)
-   [`5b16b39`](https://github.com/facebook/react/commit/5b16b39508ec33f2f374a5a12aa71647e1728d08)Bug fix
-   [`6bf2797`](https://github.com/facebook/react/commit/6bf2797d6cf76676791424afc93b76dd60d7074c)Remove flushSync from React Native (#&#8203;12565)
-   [`bc753a7`](https://github.com/facebook/react/commit/bc753a716e185c31d8eb7404ab5dd6ee7467b7cb)Support findNodeHandle in Fabric (#&#8203;12573)
-   [`181747a`](https://github.com/facebook/react/commit/181747a6cc25f3020b8561f475eca4ad2824256b)[RN] Move takeSnapshot to RN (#&#8203;12574)
-   [`20c5d97`](https://github.com/facebook/react/commit/20c5d97bb6c6a4af76d66a7e5134952989f9a9b2)Keep consistency in the comment (#&#8203;12579)
-   [`ea37545`](https://github.com/facebook/react/commit/ea3754503742afc3d5c5de2140717817794870ec)Must be *a* before PlacementAndUpdate (#&#8203;12580)
-   [`76b4ba0`](https://github.com/facebook/react/commit/76b4ba01290f446f4313adf3846954412c6051b8)Preserve error codes for invariants on www (#&#8203;12539)
-   [`8dfb057`](https://github.com/facebook/react/commit/8dfb0578816435a1a72f04506ee20d3c55d0f9bc)Unfork invariant and instead use it from reactProdInvariant (#&#8203;12585)
-   [`f88deda`](https://github.com/facebook/react/commit/f88deda83bab316385f39e8479850527cda90607)Throw more specific error if passed undefined in React.cloneElement (#&#8203;12534)
-   [`2f7bca0`](https://github.com/facebook/react/commit/2f7bca0eb2487955e71a45e288e5847b5af522a5)Allocate unique reactTags for RN and Fabric (#&#8203;12587)
-   [`933f882`](https://github.com/facebook/react/commit/933f882a9df728662befe558005f2ea3fe827a1d)Remove ReactNativePropRegistry (#&#8203;12559)
-   [`40d0772`](https://github.com/facebook/react/commit/40d07724fcc801ad69e17b295b68ebea753d5977)[RN] Remove unstable_batchedUpdates and unmountComponentAtNodeAndRemoveContainer from Fabric (#&#8203;12571)
-   [`b6e0512`](https://github.com/facebook/react/commit/b6e0512a81524d397ff4fbfb892372ecc84c6b02)Consolidate eventTypes registry with view configs (#&#8203;12556)
-   [`b99d0b1`](https://github.com/facebook/react/commit/b99d0b14160150c566e091bd10b634beec9a58c3)[RN] Move view config registry to shims (#&#8203;12569)
-   [`725c054`](https://github.com/facebook/react/commit/725c054d4d5d07c5c553a1ca724b01f2e6a43c5d)Refactor findHostInstance and findNodeHandle (#&#8203;12575)
-   [`52afbe0`](https://github.com/facebook/react/commit/52afbe0ebb6fca0fe480e77c6fa8482870ddb2c9)createReactNativeComponentClass needs to be CommonJS
-   [`3eae866`](https://github.com/facebook/react/commit/3eae866e03a96c4f46e257cba73ca158b049ab05)Fixes language in error message. (#&#8203;12590)
-   [`b846152`](https://github.com/facebook/react/commit/b8461524db6d3e016fabf001ad8fa086b4918ef9)Added UMD build to test renderer package (#&#8203;12594)
-   [`3e9515e`](https://github.com/facebook/react/commit/3e9515eedebe0c19f047391605c5b3c71d13fbc2)Remove @&#8203;providesModule in www shims
-   [`915bb53`](https://github.com/facebook/react/commit/915bb5321a8db3435eb36ef1cf9414c15333b447)Bump expiration for interactive updates to 150ms in production (#&#8203;12599)
-   [`c27a998`](https://github.com/facebook/react/commit/c27a99812e75e73d9fad88c97ac8b8db452012c1)[Danger] Minor fixes (#&#8203;12606)
-   [`5dfbfe9`](https://github.com/facebook/react/commit/5dfbfe9da740398c0a2cf4d897a0085000d06b7b)Fixed debug performance labels for new component types (#&#8203;12609)
-   [`1591c8e`](https://github.com/facebook/react/commit/1591c8ebab6151f3cae59ad42e3c15acc52cd67b)Update GCC (#&#8203;12618)
-   [`a4cef29`](https://github.com/facebook/react/commit/a4cef2970341c08e5c16a2406fbf532fc8053d12)tests: add regression test for reading ReactCurrentOwner stateNode (#&#8203;12412)
-   [`2e1cc28`](https://github.com/facebook/react/commit/2e1cc2802709877fb2454163ba30e52a91feac8e)Fix small typos in create-subscription readme (#&#8203;12399)
-   [`1e97a71`](https://github.com/facebook/react/commit/1e97a71a829e698ddac0a5e15fbdec97d35ed2bc)Fix documentation of the release process (#&#8203;12337)
-   [`66c44a7`](https://github.com/facebook/react/commit/66c44a7bc34cb3fcb3c788dcce3f3345a5bd9f58)Updating yarn.lock file for 16.3.2 release
-   [`82f67d6`](https://github.com/facebook/react/commit/82f67d65fd4584c4528352e6b9166ca4da282382)Updating package versions for release 16.3.2
-   [`6494f6b`](https://github.com/facebook/react/commit/6494f6b6b8e1cfa5df9f72b4d94cf9ed582805cd)Update error codes for 16.3.2 release
-   [`3232616`](https://github.com/facebook/react/commit/32326163480b5028ee16f6b4e4ea4426f3c5e95c)Update bundle sizes for 16.3.2 release
-   [`01402f4`](https://github.com/facebook/react/commit/01402f4ad922b5467812586567519e9e5bbd595f)Add 16.3.2 changelog (#&#8203;12621)

</details>





---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-23T01:06:49Z,NONE,False,16,16,2,,JavaScript,4e6ab79199100d74c6eb4fd8036a5dc4d7c64b9e,Update react monorepo to v16.3.2
94,https://api.github.com/repos/mozilla/distribution-viewer/pulls/384,384,Update dependency uglifyjs-webpack-plugin to v1.2.5,"This Pull Request updates dependency [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) from `v1.2.4` to `v1.2.5`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v1.2.5`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/blob/master/CHANGELOG.md#&#8203;125httpsgithubcomwebpack-contribuglifyjs-webpack-plugincomparev124v125-2018-04-18)

##### Bug Fixes

* don't handle invalid source map ([#&#8203;268](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/268`)) ([693e45e](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/693e45e))
##### Performance Improvements

* **sourcemaps:** reduce memory usage ([#&#8203;276](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/276`)) ([0b11134](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/0b11134))

---

</details>


<details>
<summary>Commits</summary>

#### v1.2.5
-   [`ee0142a`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/ee0142a3ad5f5b843caf2828466b85685d32e647) ci(circle): Update to defaults 2 CI config
-   [`1f48558`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/1f485581554ee18345b4c6d7b11ac244020107d3) refactor: update `jest` and tests (#&#8203;275)
-   [`5ee35be`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/5ee35beb26fd095a4790b1b56f83f08cd890d93c) docs: use `&lt;` for `webpack` version (#&#8203;271)
-   [`693e45e`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/693e45ea74cad073072b8b226bf314b6546e6738) fix: don&#x27;t handle invalid source map (#&#8203;268)
-   [`e94a401`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/e94a4011d639c6a189bdecb85c99a44bf275735d) refactor: push each `warning` separately (#&#8203;277)
-   [`0b11134`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/0b11134fea8e92e92ec1b4b9bfe3cdcc9d8e640b) perf(sourcemaps): reduce memory usage (#&#8203;276)
-   [`39ed7c7`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/39ed7c75f499956890be9347e1983070da5cedea) chore(release): 1.2.5

</details>



---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-23T01:06:29Z,NONE,True,18,17,2,,JavaScript,57f66d7f867d0191f86c851a45392cd13705eb0d,Update dependency uglifyjs-webpack-plugin to v1.2.5
95,https://api.github.com/repos/mozilla/distribution-viewer/pulls/383,383,Update dependency react-ga to v2.5.0,"This Pull Request updates dependency [react-ga](https://github.com/react-ga/react-ga) from `v2.4.1` to `v2.5.0`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.5.0`](https://github.com/react-ga/react-ga/releases/v2.5.0)

* Add `trackerNames` arg to pageview documentation
* Update typescript definitions.

---

</details>


<details>
<summary>Commits</summary>

#### v2.5.0
-   [`3457962`](https://github.com/react-ga/react-ga/commit/345796244bca74a1ea021e52eee1072d4387b63f) Add API doc for self-hosted analytics.js
-   [`28f6470`](https://github.com/react-ga/react-ga/commit/28f64702541472f9bbf63ffc0284ea11473262fc) Made options argument optional in Typescript definition
-   [`3081795`](https://github.com/react-ga/react-ga/commit/30817956dacb4efa31790abbb8bf74505c679662) Merge pull request #&#8203;218 from erikoc/master
-   [`3d08ae2`](https://github.com/react-ga/react-ga/commit/3d08ae2fbccf0209ae827a7f0128843301a3eff8) Merge pull request #&#8203;216 from dmitrizzle/patch-1
-   [`2eb5c8d`](https://github.com/react-ga/react-ga/commit/2eb5c8d425cd21ea8276b6e359fa238e030bb55b) Add test mode and ga address related declarations to type definitions
-   [`ab6250a`](https://github.com/react-ga/react-ga/commit/ab6250ae847aa27ddc5e299ce58aa0bf86fbd002) Merge pull request #&#8203;222 from dsole/master
-   [`0880fae`](https://github.com/react-ga/react-ga/commit/0880fae2fb469717ec9253a72cbf24ca629cb63c) Update types with missing params, comments and explicity
-   [`2cb596a`](https://github.com/react-ga/react-ga/commit/2cb596acf658eb93be5dbe4ed0e0fad0ee8516be) Merge pull request #&#8203;227 from ESWAT/update-types
-   [`2b2416b`](https://github.com/react-ga/react-ga/commit/2b2416b33d39d4742659e2489107ea1a246b1054) Add `trackerNames` arg to pageview documentation
-   [`d751e25`](https://github.com/react-ga/react-ga/commit/d751e25f0660442e72f9aef5358f298a52c3bf33) Update Typescript to support Trackers
-   [`f86ef4c`](https://github.com/react-ga/react-ga/commit/f86ef4c39f63f4a3ad605ce12e1ce82c90e6290e) Merge pull request #&#8203;238 from JetFault/ts-trackers
-   [`c9027a2`](https://github.com/react-ga/react-ga/commit/c9027a2a40ab57d24c826d4a98480feb7473111b) Merge pull request #&#8203;234 from rafaelsales/patch-1
-   [`2fa2d97`](https://github.com/react-ga/react-ga/commit/2fa2d9762b7948e92b279d75dba1ac57e260e3dc) 2.5.0
-   [`7be498f`](https://github.com/react-ga/react-ga/commit/7be498fba67684674e5d29e0e5c82b4d5aef5a3c) Merge pull request #&#8203;243 from SimeonC/master

</details>



---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-23T00:07:22Z,NONE,True,5,5,2,,JavaScript,abc108332019726cab51addcab7943dfb994a2af,Update dependency react-ga to v2.5.0
96,https://api.github.com/repos/mozilla/distribution-viewer/pulls/382,382,Update dependency browser-sync to v2.23.7,"This Pull Request updates dependency [browser-sync](https://github.com/BrowserSync/browser-sync) from `v2.23.6` to `v2.23.7`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v2.23.7`](https://github.com/BrowserSync/browser-sync/releases/v2.23.7)

- fix(client): CSS injection broken in older browsers due to use of Array.from - fixes #&#8203;1539 66dd19cd4f75a54d42e8c36711a06b9f7066052c

---

</details>


<details>
<summary>Commits</summary>

#### v2.23.7
-   [`d580018`](https://github.com/BrowserSync/browser-sync/commit/d58001823fcd65ab4a8d06ec2620b10b025c580f) https links
-   [`61faee1`](https://github.com/BrowserSync/browser-sync/commit/61faee190a65a6215057c96516d9a134cc68623b) Merge pull request #&#8203;1537 from coliff/patch-1
-   [`66dd19c`](https://github.com/BrowserSync/browser-sync/commit/66dd19cd4f75a54d42e8c36711a06b9f7066052c) fix(client): CSS injection broken in older browsers due to use of Array.from - fixes #&#8203;1539
-   [`2cced79`](https://github.com/BrowserSync/browser-sync/commit/2cced794628ba33981879d1e29805fbf7b57b4b2) 2.23.7

</details>



---

This PR has been generated by [Renovate Bot](https://renovatebot.com).",renovate[bot],29139614,2018-04-23T00:07:08Z,NONE,True,63,85,2,,JavaScript,69b286b02cb11432b4e6e00e9cdbb85f0b2dbe97,Update dependency browser-sync to v2.23.7
97,https://api.github.com/repos/mozilla/distribution-viewer/pulls/381,381,Scheduled weekly dependency update for week 15,"




### Update [pycodestyle](https://pypi.org/project/pycodestyle) from **2.3.1** to **2.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.4.0
   ```
   ------------------

New checks:

* Add W504 warning for checking that a break doesn&#39;t happen after a binary
  operator. This check is ignored by default. PR 502.
* Add W605 warning for invalid escape sequences in string literals. PR 676.
* Add W606 warning for &#39;async&#39; and &#39;await&#39; reserved keywords being introduced
  in Python 3.7. PR 684.
* Add E252 error for missing whitespace around equal sign in type annotated
  function arguments with defaults values. PR 717.

Changes:

* An internal bisect search has replaced a linear search in order to improve
  efficiency. PR 648.
* pycodestyle now uses PyPI trove classifiers in order to document supported
  python versions on PyPI. PR 654.
* &#39;setup.cfg&#39; &#39;[wheel]&#39; section has been renamed to &#39;[bdist_wheel]&#39;, as
  the former is legacy. PR 653.
* pycodestyle now handles very long lines much more efficiently for python
  3.2+. Fixes 643. PR 644.
* You can now write &#39;pycodestyle.StyleGuide(verbose=True)&#39; instead of
  &#39;pycodestyle.StyleGuide(verbose=True, paths=[&#39;-v&#39;])&#39; in order to achieve
  verbosity. PR 663.
* The distribution of pycodestyle now includes the license text in order to
  comply with open source licenses which require this. PR 694.
* &#39;maximum_line_length&#39; now ignores shebang (&#39;!&#39;) lines. PR 736.
* Add configuration option for the allowed number of blank lines. It is
  implemented as a top level dictionary which can be easily overwritten. Fixes
  732. PR 733.

Bugs:

* Prevent a &#39;DeprecationWarning&#39;, and a &#39;SyntaxError&#39; in future python, caused
  by an invalid escape sequence. PR 625.
* Correctly report E501 when the first line of a docstring is too long.
  Resolves 622. PR 630.
* Support variable annotation when variable start by a keyword, such as class
  variable type annotations in python 3.6. PR 640.
* pycodestyle internals have been changed in order to allow &#39;python3 -m
  cProfile&#39; to report correct metrics. PR 647.
* Fix a spelling mistake in the description of E722. PR 697.
* &#39;pycodestyle --diff&#39; now does not break if your &#39;gitconfig&#39; enables
  &#39;mnemonicprefix&#39;. PR 706.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/pycodestyle
  - Changelog: https://pyup.io/changelogs/pycodestyle/
  - Docs: https://pycodestyle.readthedocs.io/
</details>





",pyup-bot,16239342,2018-04-16T15:28:08Z,CONTRIBUTOR,False,1,1,1,,JavaScript,f4560020787b56d30d410570335eff440af2668a,Update pycodestyle from 2.3.1 to 2.4.0
98,https://api.github.com/repos/mozilla/distribution-viewer/pulls/380,380,Scheduled weekly dependency update for week 14,"




### Update [Django](https://pypi.org/project/Django) from **1.11.11** to **1.11.12**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.12
   ```
   ============================

*April 2, 2018*

Django 1.11.12 fixes two bugs in 1.11.11.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where combining two annotated
  ``values_list()`` querysets with ``union()``, ``difference()``, or
  ``intersection()`` crashed due to mismatching columns (:ticket:`29229`).

* Fixed a regression in Django 1.11 where an empty choice could be initially
  selected for the ``SelectMultiple`` and ``CheckboxSelectMultiple`` widgets
  (:ticket:`29273`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [djangorestframework](https://pypi.org/project/djangorestframework) from **3.7.7** to **3.8.2**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.8.2
   ```
   **Date**: [6th April 2018][3.8.2-milestone]

* Fix `read_only` + `default` `unique_together` validation. [5922][gh5922]
* authtoken.views import coreapi from rest_framework.compat, not directly. [5921][gh5921]
* Docs: Add missing argument &#39;detail&#39; to Route [5920][gh5920]
   ```
   
  
  
   ### 3.8.1
   ```
   **Date**: [4th April 2018][3.8.1-milestone]

* Use old `url_name` behavior in route decorators [5915][gh5915]

    For `list_route` and `detail_route` maintain the old behavior of `url_name`,
    basing it on the `url_path` instead of the function name.
   ```
   
  
  
   ### 3.8.0
   ```
   **Date**: [3rd April 2018][3.8.0-milestone]


* **Breaking Change**: Alter `read_only` plus `default` behaviour. [5886][gh5886]

    `read_only` fields will now **always** be excluded from writable fields.

    Previously `read_only` fields with a `default` value would use the `default` for create and update operations.

    In order to maintain the old behaviour you may need to pass the value of `read_only` fields when calling `save()` in
    the view:

        def perform_create(self, serializer):
            serializer.save(owner=self.request.user)

    Alternatively you may override `save()` or `create()` or `update()` on the serialiser as appropriate.

* Correct allow_null behaviour when required=False [5888][gh5888]

    Without an explicit `default`, `allow_null` implies a default of `null` for outgoing serialisation. Previously such
    fields were being skipped when read-only or otherwise not required.

    **Possible backwards compatibility break** if you were relying on such fields being excluded from the outgoing
    representation. In order to restore the old behaviour you can override `data` to exclude the field when `None`.

    For example:

        property
        def data(self):
            &quot;&quot;&quot;
            Drop `maybe_none` field if None.
            &quot;&quot;&quot;
            data = super().data
            if &#39;maybe_none&#39; in data and data[&#39;maybe_none&#39;] is None:
                del data[&#39;maybe_none&#39;]
            return data

* Refactor dynamic route generation and improve viewset action introspectibility. [5705][gh5705]

    `ViewSet`s have been provided with new attributes and methods that allow
    it to introspect its set of actions and the details of the current action.

    * Merged `list_route` and `detail_route` into a single `action` decorator.
    * Get all extra actions on a `ViewSet` with `.get_extra_actions()`.
    * Extra actions now set the `url_name` and `url_path` on the decorated method.
    * `url_name` is now based on the function name, instead of the `url_path`,
      as the path is not always suitable (e.g., capturing arguments in the path).
    * Enable action url reversing through `.reverse_action()` method (added in 3.7.4)
    * Example reverse call: `self.reverse_action(self.custom_action.url_name)`
    * Add `detail` initkwarg to indicate if the current action is operating on a
      collection or a single instance.

    Additional changes:

    * Deprecated `list_route` &amp; `detail_route` in favor of `action` decorator with `detail` boolean.
    * Deprecated dynamic list/detail route variants in favor of `DynamicRoute` with `detail` boolean.
    * Refactored the router&#39;s dynamic route generation.
    * `list_route` and `detail_route` maintain the old behavior of `url_name`,
      basing it on the `url_path` instead of the function name.

* Fix formatting of the 3.7.4 release note [5704][gh5704]
* Docs: Update DRF Writable Nested Serializers references [5711][gh5711]
* Docs: Fixed typo in auth URLs example. [5713][gh5713]
* Improve composite field child errors [5655][gh5655]
* Disable HTML inputs for dict/list fields [5702][gh5702]
* Fix typo in HostNameVersioning doc [5709][gh5709]
* Use rsplit to get module and classname for imports [5712][gh5712]
* Formalize URLPatternsTestCase [5703][gh5703]
* Add exception translation test [5700][gh5700]
* Test staticfiles [5701][gh5701]
* Add drf-yasg to documentation and schema 3rd party packages [5720][gh5720]
* Remove unused `compat._resolve_model()` [5733][gh5733]
* Drop compat workaround for unsupported Python 3.2 [5734][gh5734]
* Prefer `iter(dict)` over `iter(dict.keys())` [5736][gh5736]
* Pass `python_requires` argument to setuptools [5739][gh5739]
* Remove unused links from docs [5735][gh5735]
* Prefer https protocol for links in docs when available [5729][gh5729]
* Add HStoreField, postgres fields tests [5654][gh5654]
* Always fully qualify ValidationError in docs [5751][gh5751]
* Remove unreachable code from ManualSchema [5766][gh5766]
* Allowed customising API documentation code samples [5752][gh5752]
* Updated docs to use `pip show` [5757][gh5757]
* Load &#39;static&#39; instead of &#39;staticfiles&#39; in templates [5773][gh5773]
* Fixed a typo in `fields` docs [5783][gh5783]
* Refer to &quot;NamespaceVersioning&quot; instead of &quot;NamespacedVersioning&quot; in the documentation [5754][gh5754]
* ErrorDetail: add `__eq__`/`__ne__` and `__repr__` [5787][gh5787]
* Replace `background-attachment: fixed` in docs [5777][gh5777]
* Make 404 &amp; 403 responses consistent with `exceptions.APIException` output [5763][gh5763]
* Small fix to API documentation: schemas [5796][gh5796]
* Fix schema generation for PrimaryKeyRelatedField [5764][gh5764]
* Represent serializer DictField as an Object in schema [5765][gh5765]
* Added docs example reimplementing ObtainAuthToken [5802][gh5802]
* Add schema to the ObtainAuthToken view [5676][gh5676]
* Fix request formdata handling [5800][gh5800]
* Fix authtoken views imports [5818][gh5818]
* Update pytest, isort [5815][gh5815] [5817][gh5817] [5894][gh5894]
* Fixed active timezone handling for non ISO8601 datetimes. [5833][gh5833]
* Made TemplateHTMLRenderer render IntegerField inputs when value is `0`. [5834][gh5834]
* Corrected endpoint in tutorial instructions [5835][gh5835]
* Add Django Rest Framework Role Filters to Third party packages [5809][gh5809]
* Use single copy of static assets. Update jQuery [5823][gh5823]
* Changes ternary conditionals to be PEP308 compliant [5827][gh5827]
* Added links to &#39;A Todo List API with React&#39; and &#39;Blog API&#39; tutorials [5837][gh5837]
* Fix comment typo in ModelSerializer [5844][gh5844]
* Add admin to installed apps to avoid test failures. [5870][gh5870]
* Fixed schema for UUIDField in SimpleMetadata. [5872][gh5872]
* Corrected docs on router include with namespaces. [5843][gh5843]
* Test using model objects for dotted source default [5880][gh5880]
* Allow traversing nullable related fields [5849][gh5849]
* Added: Tutorial: Django REST with React (Django 2.0) [5891][gh5891]
* Add `LimitOffsetPagination.get_count` to allow method override [5846][gh5846]
* Don&#39;t show hidden fields in metadata [5854][gh5854]
* Enable OrderingFilter to handle an empty tuple (or list) for the &#39;ordering&#39; field. [5899][gh5899]
* Added generic 500 and 400 JSON error handlers. [5904][gh5904]


 3.7.x series
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/djangorestframework
  - Changelog: https://pyup.io/changelogs/djangorestframework/
  - Homepage: http://www.django-rest-framework.org
</details>





### Update [dockerflow](https://pypi.org/project/dockerflow) from **2018.2.1** to **2018.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2018.4.0
   ```
   ^^^^^^^^^^^^^^^^^^^^^

- Fix backward-compatibility in the ``check_migrations_applied`` Flask check
  when an older version of Flask-Migrate is used.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/dockerflow
  - Changelog: https://pyup.io/changelogs/dockerflow/
  - Repo: https://github.com/mozilla-services/python-dockerflow
</details>





",pyup-bot,16239342,2018-04-09T15:22:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,37ce210f9f580e31c9761f472f9e533fba6dda3b,Update django from 1.11.11 to 1.11.12
99,https://api.github.com/repos/mozilla/distribution-viewer/pulls/380,380,Scheduled weekly dependency update for week 14,"




### Update [Django](https://pypi.org/project/Django) from **1.11.11** to **1.11.12**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.12
   ```
   ============================

*April 2, 2018*

Django 1.11.12 fixes two bugs in 1.11.11.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where combining two annotated
  ``values_list()`` querysets with ``union()``, ``difference()``, or
  ``intersection()`` crashed due to mismatching columns (:ticket:`29229`).

* Fixed a regression in Django 1.11 where an empty choice could be initially
  selected for the ``SelectMultiple`` and ``CheckboxSelectMultiple`` widgets
  (:ticket:`29273`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [djangorestframework](https://pypi.org/project/djangorestframework) from **3.7.7** to **3.8.2**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.8.2
   ```
   **Date**: [6th April 2018][3.8.2-milestone]

* Fix `read_only` + `default` `unique_together` validation. [5922][gh5922]
* authtoken.views import coreapi from rest_framework.compat, not directly. [5921][gh5921]
* Docs: Add missing argument &#39;detail&#39; to Route [5920][gh5920]
   ```
   
  
  
   ### 3.8.1
   ```
   **Date**: [4th April 2018][3.8.1-milestone]

* Use old `url_name` behavior in route decorators [5915][gh5915]

    For `list_route` and `detail_route` maintain the old behavior of `url_name`,
    basing it on the `url_path` instead of the function name.
   ```
   
  
  
   ### 3.8.0
   ```
   **Date**: [3rd April 2018][3.8.0-milestone]


* **Breaking Change**: Alter `read_only` plus `default` behaviour. [5886][gh5886]

    `read_only` fields will now **always** be excluded from writable fields.

    Previously `read_only` fields with a `default` value would use the `default` for create and update operations.

    In order to maintain the old behaviour you may need to pass the value of `read_only` fields when calling `save()` in
    the view:

        def perform_create(self, serializer):
            serializer.save(owner=self.request.user)

    Alternatively you may override `save()` or `create()` or `update()` on the serialiser as appropriate.

* Correct allow_null behaviour when required=False [5888][gh5888]

    Without an explicit `default`, `allow_null` implies a default of `null` for outgoing serialisation. Previously such
    fields were being skipped when read-only or otherwise not required.

    **Possible backwards compatibility break** if you were relying on such fields being excluded from the outgoing
    representation. In order to restore the old behaviour you can override `data` to exclude the field when `None`.

    For example:

        property
        def data(self):
            &quot;&quot;&quot;
            Drop `maybe_none` field if None.
            &quot;&quot;&quot;
            data = super().data
            if &#39;maybe_none&#39; in data and data[&#39;maybe_none&#39;] is None:
                del data[&#39;maybe_none&#39;]
            return data

* Refactor dynamic route generation and improve viewset action introspectibility. [5705][gh5705]

    `ViewSet`s have been provided with new attributes and methods that allow
    it to introspect its set of actions and the details of the current action.

    * Merged `list_route` and `detail_route` into a single `action` decorator.
    * Get all extra actions on a `ViewSet` with `.get_extra_actions()`.
    * Extra actions now set the `url_name` and `url_path` on the decorated method.
    * `url_name` is now based on the function name, instead of the `url_path`,
      as the path is not always suitable (e.g., capturing arguments in the path).
    * Enable action url reversing through `.reverse_action()` method (added in 3.7.4)
    * Example reverse call: `self.reverse_action(self.custom_action.url_name)`
    * Add `detail` initkwarg to indicate if the current action is operating on a
      collection or a single instance.

    Additional changes:

    * Deprecated `list_route` &amp; `detail_route` in favor of `action` decorator with `detail` boolean.
    * Deprecated dynamic list/detail route variants in favor of `DynamicRoute` with `detail` boolean.
    * Refactored the router&#39;s dynamic route generation.
    * `list_route` and `detail_route` maintain the old behavior of `url_name`,
      basing it on the `url_path` instead of the function name.

* Fix formatting of the 3.7.4 release note [5704][gh5704]
* Docs: Update DRF Writable Nested Serializers references [5711][gh5711]
* Docs: Fixed typo in auth URLs example. [5713][gh5713]
* Improve composite field child errors [5655][gh5655]
* Disable HTML inputs for dict/list fields [5702][gh5702]
* Fix typo in HostNameVersioning doc [5709][gh5709]
* Use rsplit to get module and classname for imports [5712][gh5712]
* Formalize URLPatternsTestCase [5703][gh5703]
* Add exception translation test [5700][gh5700]
* Test staticfiles [5701][gh5701]
* Add drf-yasg to documentation and schema 3rd party packages [5720][gh5720]
* Remove unused `compat._resolve_model()` [5733][gh5733]
* Drop compat workaround for unsupported Python 3.2 [5734][gh5734]
* Prefer `iter(dict)` over `iter(dict.keys())` [5736][gh5736]
* Pass `python_requires` argument to setuptools [5739][gh5739]
* Remove unused links from docs [5735][gh5735]
* Prefer https protocol for links in docs when available [5729][gh5729]
* Add HStoreField, postgres fields tests [5654][gh5654]
* Always fully qualify ValidationError in docs [5751][gh5751]
* Remove unreachable code from ManualSchema [5766][gh5766]
* Allowed customising API documentation code samples [5752][gh5752]
* Updated docs to use `pip show` [5757][gh5757]
* Load &#39;static&#39; instead of &#39;staticfiles&#39; in templates [5773][gh5773]
* Fixed a typo in `fields` docs [5783][gh5783]
* Refer to &quot;NamespaceVersioning&quot; instead of &quot;NamespacedVersioning&quot; in the documentation [5754][gh5754]
* ErrorDetail: add `__eq__`/`__ne__` and `__repr__` [5787][gh5787]
* Replace `background-attachment: fixed` in docs [5777][gh5777]
* Make 404 &amp; 403 responses consistent with `exceptions.APIException` output [5763][gh5763]
* Small fix to API documentation: schemas [5796][gh5796]
* Fix schema generation for PrimaryKeyRelatedField [5764][gh5764]
* Represent serializer DictField as an Object in schema [5765][gh5765]
* Added docs example reimplementing ObtainAuthToken [5802][gh5802]
* Add schema to the ObtainAuthToken view [5676][gh5676]
* Fix request formdata handling [5800][gh5800]
* Fix authtoken views imports [5818][gh5818]
* Update pytest, isort [5815][gh5815] [5817][gh5817] [5894][gh5894]
* Fixed active timezone handling for non ISO8601 datetimes. [5833][gh5833]
* Made TemplateHTMLRenderer render IntegerField inputs when value is `0`. [5834][gh5834]
* Corrected endpoint in tutorial instructions [5835][gh5835]
* Add Django Rest Framework Role Filters to Third party packages [5809][gh5809]
* Use single copy of static assets. Update jQuery [5823][gh5823]
* Changes ternary conditionals to be PEP308 compliant [5827][gh5827]
* Added links to &#39;A Todo List API with React&#39; and &#39;Blog API&#39; tutorials [5837][gh5837]
* Fix comment typo in ModelSerializer [5844][gh5844]
* Add admin to installed apps to avoid test failures. [5870][gh5870]
* Fixed schema for UUIDField in SimpleMetadata. [5872][gh5872]
* Corrected docs on router include with namespaces. [5843][gh5843]
* Test using model objects for dotted source default [5880][gh5880]
* Allow traversing nullable related fields [5849][gh5849]
* Added: Tutorial: Django REST with React (Django 2.0) [5891][gh5891]
* Add `LimitOffsetPagination.get_count` to allow method override [5846][gh5846]
* Don&#39;t show hidden fields in metadata [5854][gh5854]
* Enable OrderingFilter to handle an empty tuple (or list) for the &#39;ordering&#39; field. [5899][gh5899]
* Added generic 500 and 400 JSON error handlers. [5904][gh5904]


 3.7.x series
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/djangorestframework
  - Changelog: https://pyup.io/changelogs/djangorestframework/
  - Homepage: http://www.django-rest-framework.org
</details>





### Update [dockerflow](https://pypi.org/project/dockerflow) from **2018.2.1** to **2018.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2018.4.0
   ```
   ^^^^^^^^^^^^^^^^^^^^^

- Fix backward-compatibility in the ``check_migrations_applied`` Flask check
  when an older version of Flask-Migrate is used.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/dockerflow
  - Changelog: https://pyup.io/changelogs/dockerflow/
  - Repo: https://github.com/mozilla-services/python-dockerflow
</details>





",pyup-bot,16239342,2018-04-09T15:22:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,99dfd4b64ff73048c84d37fb3cc4252c33dd4b23,Update djangorestframework from 3.7.7 to 3.8.2
100,https://api.github.com/repos/mozilla/distribution-viewer/pulls/380,380,Scheduled weekly dependency update for week 14,"




### Update [Django](https://pypi.org/project/Django) from **1.11.11** to **1.11.12**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.12
   ```
   ============================

*April 2, 2018*

Django 1.11.12 fixes two bugs in 1.11.11.

Bugfixes
========

* Fixed a regression in Django 1.11.8 where combining two annotated
  ``values_list()`` querysets with ``union()``, ``difference()``, or
  ``intersection()`` crashed due to mismatching columns (:ticket:`29229`).

* Fixed a regression in Django 1.11 where an empty choice could be initially
  selected for the ``SelectMultiple`` and ``CheckboxSelectMultiple`` widgets
  (:ticket:`29273`).


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [djangorestframework](https://pypi.org/project/djangorestframework) from **3.7.7** to **3.8.2**.


<details>
  <summary>Changelog</summary>
  
  
   ### 3.8.2
   ```
   **Date**: [6th April 2018][3.8.2-milestone]

* Fix `read_only` + `default` `unique_together` validation. [5922][gh5922]
* authtoken.views import coreapi from rest_framework.compat, not directly. [5921][gh5921]
* Docs: Add missing argument &#39;detail&#39; to Route [5920][gh5920]
   ```
   
  
  
   ### 3.8.1
   ```
   **Date**: [4th April 2018][3.8.1-milestone]

* Use old `url_name` behavior in route decorators [5915][gh5915]

    For `list_route` and `detail_route` maintain the old behavior of `url_name`,
    basing it on the `url_path` instead of the function name.
   ```
   
  
  
   ### 3.8.0
   ```
   **Date**: [3rd April 2018][3.8.0-milestone]


* **Breaking Change**: Alter `read_only` plus `default` behaviour. [5886][gh5886]

    `read_only` fields will now **always** be excluded from writable fields.

    Previously `read_only` fields with a `default` value would use the `default` for create and update operations.

    In order to maintain the old behaviour you may need to pass the value of `read_only` fields when calling `save()` in
    the view:

        def perform_create(self, serializer):
            serializer.save(owner=self.request.user)

    Alternatively you may override `save()` or `create()` or `update()` on the serialiser as appropriate.

* Correct allow_null behaviour when required=False [5888][gh5888]

    Without an explicit `default`, `allow_null` implies a default of `null` for outgoing serialisation. Previously such
    fields were being skipped when read-only or otherwise not required.

    **Possible backwards compatibility break** if you were relying on such fields being excluded from the outgoing
    representation. In order to restore the old behaviour you can override `data` to exclude the field when `None`.

    For example:

        property
        def data(self):
            &quot;&quot;&quot;
            Drop `maybe_none` field if None.
            &quot;&quot;&quot;
            data = super().data
            if &#39;maybe_none&#39; in data and data[&#39;maybe_none&#39;] is None:
                del data[&#39;maybe_none&#39;]
            return data

* Refactor dynamic route generation and improve viewset action introspectibility. [5705][gh5705]

    `ViewSet`s have been provided with new attributes and methods that allow
    it to introspect its set of actions and the details of the current action.

    * Merged `list_route` and `detail_route` into a single `action` decorator.
    * Get all extra actions on a `ViewSet` with `.get_extra_actions()`.
    * Extra actions now set the `url_name` and `url_path` on the decorated method.
    * `url_name` is now based on the function name, instead of the `url_path`,
      as the path is not always suitable (e.g., capturing arguments in the path).
    * Enable action url reversing through `.reverse_action()` method (added in 3.7.4)
    * Example reverse call: `self.reverse_action(self.custom_action.url_name)`
    * Add `detail` initkwarg to indicate if the current action is operating on a
      collection or a single instance.

    Additional changes:

    * Deprecated `list_route` &amp; `detail_route` in favor of `action` decorator with `detail` boolean.
    * Deprecated dynamic list/detail route variants in favor of `DynamicRoute` with `detail` boolean.
    * Refactored the router&#39;s dynamic route generation.
    * `list_route` and `detail_route` maintain the old behavior of `url_name`,
      basing it on the `url_path` instead of the function name.

* Fix formatting of the 3.7.4 release note [5704][gh5704]
* Docs: Update DRF Writable Nested Serializers references [5711][gh5711]
* Docs: Fixed typo in auth URLs example. [5713][gh5713]
* Improve composite field child errors [5655][gh5655]
* Disable HTML inputs for dict/list fields [5702][gh5702]
* Fix typo in HostNameVersioning doc [5709][gh5709]
* Use rsplit to get module and classname for imports [5712][gh5712]
* Formalize URLPatternsTestCase [5703][gh5703]
* Add exception translation test [5700][gh5700]
* Test staticfiles [5701][gh5701]
* Add drf-yasg to documentation and schema 3rd party packages [5720][gh5720]
* Remove unused `compat._resolve_model()` [5733][gh5733]
* Drop compat workaround for unsupported Python 3.2 [5734][gh5734]
* Prefer `iter(dict)` over `iter(dict.keys())` [5736][gh5736]
* Pass `python_requires` argument to setuptools [5739][gh5739]
* Remove unused links from docs [5735][gh5735]
* Prefer https protocol for links in docs when available [5729][gh5729]
* Add HStoreField, postgres fields tests [5654][gh5654]
* Always fully qualify ValidationError in docs [5751][gh5751]
* Remove unreachable code from ManualSchema [5766][gh5766]
* Allowed customising API documentation code samples [5752][gh5752]
* Updated docs to use `pip show` [5757][gh5757]
* Load &#39;static&#39; instead of &#39;staticfiles&#39; in templates [5773][gh5773]
* Fixed a typo in `fields` docs [5783][gh5783]
* Refer to &quot;NamespaceVersioning&quot; instead of &quot;NamespacedVersioning&quot; in the documentation [5754][gh5754]
* ErrorDetail: add `__eq__`/`__ne__` and `__repr__` [5787][gh5787]
* Replace `background-attachment: fixed` in docs [5777][gh5777]
* Make 404 &amp; 403 responses consistent with `exceptions.APIException` output [5763][gh5763]
* Small fix to API documentation: schemas [5796][gh5796]
* Fix schema generation for PrimaryKeyRelatedField [5764][gh5764]
* Represent serializer DictField as an Object in schema [5765][gh5765]
* Added docs example reimplementing ObtainAuthToken [5802][gh5802]
* Add schema to the ObtainAuthToken view [5676][gh5676]
* Fix request formdata handling [5800][gh5800]
* Fix authtoken views imports [5818][gh5818]
* Update pytest, isort [5815][gh5815] [5817][gh5817] [5894][gh5894]
* Fixed active timezone handling for non ISO8601 datetimes. [5833][gh5833]
* Made TemplateHTMLRenderer render IntegerField inputs when value is `0`. [5834][gh5834]
* Corrected endpoint in tutorial instructions [5835][gh5835]
* Add Django Rest Framework Role Filters to Third party packages [5809][gh5809]
* Use single copy of static assets. Update jQuery [5823][gh5823]
* Changes ternary conditionals to be PEP308 compliant [5827][gh5827]
* Added links to &#39;A Todo List API with React&#39; and &#39;Blog API&#39; tutorials [5837][gh5837]
* Fix comment typo in ModelSerializer [5844][gh5844]
* Add admin to installed apps to avoid test failures. [5870][gh5870]
* Fixed schema for UUIDField in SimpleMetadata. [5872][gh5872]
* Corrected docs on router include with namespaces. [5843][gh5843]
* Test using model objects for dotted source default [5880][gh5880]
* Allow traversing nullable related fields [5849][gh5849]
* Added: Tutorial: Django REST with React (Django 2.0) [5891][gh5891]
* Add `LimitOffsetPagination.get_count` to allow method override [5846][gh5846]
* Don&#39;t show hidden fields in metadata [5854][gh5854]
* Enable OrderingFilter to handle an empty tuple (or list) for the &#39;ordering&#39; field. [5899][gh5899]
* Added generic 500 and 400 JSON error handlers. [5904][gh5904]


 3.7.x series
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/djangorestframework
  - Changelog: https://pyup.io/changelogs/djangorestframework/
  - Homepage: http://www.django-rest-framework.org
</details>





### Update [dockerflow](https://pypi.org/project/dockerflow) from **2018.2.1** to **2018.4.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2018.4.0
   ```
   ^^^^^^^^^^^^^^^^^^^^^

- Fix backward-compatibility in the ``check_migrations_applied`` Flask check
  when an older version of Flask-Migrate is used.
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/dockerflow
  - Changelog: https://pyup.io/changelogs/dockerflow/
  - Repo: https://github.com/mozilla-services/python-dockerflow
</details>





",pyup-bot,16239342,2018-04-09T15:22:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,1ae378a3339ea76b58833b3415d0352729e482a7,Update dockerflow from 2018.2.1 to 2018.4.0
101,https://api.github.com/repos/mozilla/distribution-viewer/pulls/379,379,Update react monorepo packages to v16.3.1,"This Pull Request renovates the package group ""react monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [react-test-renderer](https://github.com/facebook/react) (`dependencies`): from `16.2.0` to `16.3.1`
-   [react-dom](https://github.com/facebook/react) (`dependencies`): from `16.2.0` to `16.3.1`
-   [react](https://github.com/facebook/react) (`dependencies`): from `16.2.0` to `16.3.1`

# Release Notes
<details>
<summary>facebook/react</summary>

### [`v16.3.0`](https://github.com/facebook/react/blob/master/CHANGELOG.md#&#8203;1630-March-29-2018)

##### React

* Add a new officially supported context API. ([@&#8203;acdlite] in [#&#8203;11818](`https://github.com/facebook/react/pull/11818`))
* Add a new `React.createRef()` API as an ergonomic alternative to callback refs. ([@&#8203;trueadm] in [#&#8203;12162](`https://github.com/facebook/react/pull/12162`))
* Add a new `React.forwardRef()` API to let components forward their refs to a child. ([@&#8203;bvaughn] in [#&#8203;12346](`https://github.com/facebook/react/pull/12346`))
* Fix a false positive warning in IE11 when using `React.Fragment`. ([@&#8203;XaveScor] in [#&#8203;11823](`https://github.com/facebook/react/pull/11823`))
* Replace `React.unstable_AsyncComponent` with `React.unstable_AsyncMode`. ([@&#8203;acdlite] in [#&#8203;12117](`https://github.com/facebook/react/pull/12117`))
* Improve the error message when calling `setState()` on an unmounted component. ([@&#8203;sophiebits] in [#&#8203;12347](`https://github.com/facebook/react/pull/12347`))
##### React DOM

* Add a new `getDerivedStateFromProps()` lifecycle and `UNSAFE_` aliases for the legacy lifecycles. ([@&#8203;bvaughn] in [#&#8203;12028](`https://github.com/facebook/react/pull/12028`))
* Add a new `getSnapshotBeforeUpdate()` lifecycle. ([@&#8203;bvaughn] in [#&#8203;12404](`https://github.com/facebook/react/pull/12404`))
* Add a new `<React.StrictMode>` wrapper to help prepare apps for async rendering. ([@&#8203;bvaughn] in [#&#8203;12083](`https://github.com/facebook/react/pull/12083`))
* Add support for `onLoad` and `onError` events on the `<link>` tag. ([@&#8203;roderickhsiao] in [#&#8203;11825](`https://github.com/facebook/react/pull/11825`))
* Add support for `noModule` boolean attribute on the `<script>` tag. ([@&#8203;aweary] in [#&#8203;11900](`https://github.com/facebook/react/pull/11900`))
* Fix minor DOM input bugs in IE and Safari. ([@&#8203;nhunzaker] in [#&#8203;11534](`https://github.com/facebook/react/pull/11534`))
* Correctly detect Ctrl + Enter in `onKeyPress` in more browsers. ([@&#8203;nstraub] in [#&#8203;10514](`https://github.com/facebook/react/pull/10514`))
* Fix containing elements getting focused on SSR markup mismatch. ([@&#8203;koba04] in [#&#8203;11737](`https://github.com/facebook/react/pull/11737`))
* Fix `value` and `defaultValue` to ignore Symbol values. ([@&#8203;nhunzaker] in [#&#8203;11741](`https://github.com/facebook/react/pull/11741`))
* Fix refs to class components not getting cleaned up when the attribute is removed. ([@&#8203;bvaughn] in [#&#8203;12178](`https://github.com/facebook/react/pull/12178`))
* Fix an IE/Edge issue when rendering inputs into a different window. ([@&#8203;M-ZubairAhmed] in [#&#8203;11870](`https://github.com/facebook/react/pull/11870`))
* Throw with a meaningful message if the component runs after jsdom has been destroyed. ([@&#8203;gaearon] in [#&#8203;11677](`https://github.com/facebook/react/pull/11677`))
* Don't crash if there is a global variable called `opera` with a `null` value. [@&#8203;alisherdavronov] in [#&#8203;11854](`https://github.com/facebook/react/pull/11854`))
* Don't check for old versions of Opera. ([@&#8203;skiritsis] in [#&#8203;11921](`https://github.com/facebook/react/pull/11921`))
* Deduplicate warning messages about `<option selected>`. ([@&#8203;watadarkstar] in [#&#8203;11821](`https://github.com/facebook/react/pull/11821`))
* Deduplicate warning messages about invalid callback. ([@&#8203;yenshih] in [#&#8203;11833](`https://github.com/facebook/react/pull/11833`))
* Deprecate `ReactDOM.unstable_createPortal()` in favor of `ReactDOM.createPortal()`. ([@&#8203;prometheansacrifice] in [#&#8203;11747](`https://github.com/facebook/react/pull/11747`))
* Don't emit User Timing entries for context types. ([@&#8203;abhaynikam] in [#&#8203;12250](`https://github.com/facebook/react/pull/12250`))
* Improve the error message when context consumer child isn't a function. ([@&#8203;raunofreiberg] in [#&#8203;12267](`https://github.com/facebook/react/pull/12267`)) 
* Improve the error message when adding a ref to a functional component. ([@&#8203;skiritsis] in [#&#8203;11782](`https://github.com/facebook/react/pull/11782`))
##### React DOM Server

* Prevent an infinite loop when attempting to render portals with SSR. ([@&#8203;gaearon] in [#&#8203;11709](`https://github.com/facebook/react/pull/11709`))
* Warn if a class doesn't extend `React.Component`. ([@&#8203;wyze] in [#&#8203;11993](`https://github.com/facebook/react/pull/11993`))
* Fix an issue with `this.state` of different components getting mixed up. ([@&#8203;sophiebits] in [#&#8203;12323](`https://github.com/facebook/react/pull/12323`))
* Provide a better message when component type is undefined. ([@&#8203;HeroProtagonist] in [#&#8203;11966](`https://github.com/facebook/react/pull/11966`))

---

### [`v16.3.1`](https://github.com/facebook/react/blob/master/CHANGELOG.md#&#8203;1631-April-3-2018)

##### React

* Fix a false positive warning in IE11 when using `Fragment`. ([@&#8203;heikkilamarko] in [#&#8203;12504](`https://github.com/facebook/react/pull/12504`))
* Prefix a private API. ([@&#8203;Andarist] in [#&#8203;12501](`https://github.com/facebook/react/pull/12501`))
* Improve the warning when calling `setState()` in constructor. ([@&#8203;gaearon] in [#&#8203;12532](`https://github.com/facebook/react/pull/12532`))
##### React DOM

* Fix `getDerivedStateFromProps()` not getting applied in some cases. ([@&#8203;acdlite] in [#&#8203;12528](`https://github.com/facebook/react/pull/12528`))
* Fix a performance regression in development mode. ([@&#8203;gaearon] in [#&#8203;12510](`https://github.com/facebook/react/pull/12510`))
* Fix error handling bugs in development mode. ([@&#8203;gaearon] and [@&#8203;acdlite] in [#&#8203;12508](`https://github.com/facebook/react/pull/12508`))
* Improve user timing API messages for profiling. ([@&#8203;flarnie] in [#&#8203;12384](`https://github.com/facebook/react/pull/12384`))
##### Create Subscription

* Set the package version to be in sync with React releases. ([@&#8203;bvaughn] in [#&#8203;12526](`https://github.com/facebook/react/pull/12526`))
* Add a peer dependency on React 16.3+. ([@&#8203;NMinhNguyen] in [#&#8203;12496](`https://github.com/facebook/react/pull/12496`))

---


</details>

# Commits

<details>
<summary>facebook/react</summary>

#### v16.3.0
-   [`c2c3c0c`](https://github.com/facebook/react/commit/c2c3c0cc36878cd6f020a480b83ff1c03b62fd28)Fix build script to handle react-is (no peer deps) (#&#8203;12471)
-   [`488ad5a`](https://github.com/facebook/react/commit/488ad5a6b94ac4b71ff587ecde05e48a218aba62)Fix typo in create-subscription readme
-   [`c1b21a7`](https://github.com/facebook/react/commit/c1b21a746c7d08554eed8bf55030a4049380c32c)Added DEV warning if getSnapshotBeforeUpdate is defined as a static method (#&#8203;12475)
-   [`268a3f6`](https://github.com/facebook/react/commit/268a3f60dfe67c4f6439fc37b569a2d81c81a53a)Add unstable APIs for async rendering to test renderer (#&#8203;12478)
-   [`c44665e`](https://github.com/facebook/react/commit/c44665e83278becfe7a3afdf788789536d63387b)Fix bug when fatal error is thrown as a result of `batch.commit` (#&#8203;12480)
-   [`7a833da`](https://github.com/facebook/react/commit/7a833dad95b3059ebfdfba44d3fa68e1301d8e6a)setState() in componentDidMount() should flush synchronously even with createBatch() (#&#8203;12466)
-   [`5855e9f`](https://github.com/facebook/react/commit/5855e9f2158b31d945f3fcc5bc582389dbecc88e)Improve warning message for setState-on-unmounted (#&#8203;12347)
-   [`15e3dff`](https://github.com/facebook/react/commit/15e3dffb4c9ca9b9466f4ef1a6b8b2293d41e9d6)Don&#x27;t bail out on referential equality of Consumer&#x27;s props.children function (#&#8203;12470)
-   [`125dd16`](https://github.com/facebook/react/commit/125dd16ba0b3fa74767b1cf417a3116a4a2b251a)Update user timing to record the timeout deadline with &#x27;waiting&#x27; events (#&#8203;12479)
-   [`96fe3b1`](https://github.com/facebook/react/commit/96fe3b1be2fe74e83c9a25d7511f23dbef15ac99)Add React.isValidElementType() (#&#8203;12483)
-   [`53fdc19`](https://github.com/facebook/react/commit/53fdc19df092bbc4bd736aea4ef8e0f12d692ee6)Updated react-is README to show new isValidElementType()
-   [`8650d2a`](https://github.com/facebook/react/commit/8650d2a1357985958c2738da55ea349406482721)Disable createRoot for open source builds (#&#8203;12486)
-   [`6294b67`](https://github.com/facebook/react/commit/6294b67a406d21cc6b65162e47497c1e8afe398f)unstable_createRoot (#&#8203;12487)
-   [`b2379d4`](https://github.com/facebook/react/commit/b2379d4cbe82653da931ccb128916707bc53d28a)Updating package versions for release 16.3.0
-   [`9778873`](https://github.com/facebook/react/commit/9778873143072635a795fec2ad0e1ac0bb7d8b91)Updating dependencies for react-noop-renderer
-   [`8e3d94f`](https://github.com/facebook/react/commit/8e3d94ffa1d2e19a5bf4b9f8030973b65b0fc854)Update bundle sizes for 16.3.0 release

#### v16.3.1
-   [`2c3f5fb`](https://github.com/facebook/react/commit/2c3f5fb97b6ea077f3e9aae6c6587bfe8328036d)Add React 16.3.0 changelog (#&#8203;12488)
-   [`4304475`](https://github.com/facebook/react/commit/43044757e55eca13ae788056b59f94788fc15050)Fix links
-   [`18ba36d`](https://github.com/facebook/react/commit/18ba36d89165ec15655f2606b0a6ba2e709ce641)Move context API in Changelog to &quot;React&quot; section
-   [`59b3905`](https://github.com/facebook/react/commit/59b39056d91787f6a3e4e0dfc0825c8687bd0af9)Fix method name in changelog
-   [`fa8e678`](https://github.com/facebook/react/commit/fa8e67893fca1b3902637129972032bca248a584)Change create-subscription&#x27;s peerDep on react to ^16.3.0 (#&#8203;12496)
-   [`0c80977`](https://github.com/facebook/react/commit/0c80977061ba576cee9ae0891245be233929d2ed)Validate React.Fragment props without Map. (#&#8203;12504)
-   [`59dac9d`](https://github.com/facebook/react/commit/59dac9d7a6a2f0b66003cf717d71b5587265423f)Fix DEV performance regression by avoiding Object.assign on Fibers (#&#8203;12510)
-   [`6b99c6f`](https://github.com/facebook/react/commit/6b99c6f9d376bacbb769264d743c405b495b03ad)Add missing changelog item
-   [`7a27ebd`](https://github.com/facebook/react/commit/7a27ebd52a3025a946c67eaf84d2646fd307cb44)Update user timing to record when we are about to commit (#&#8203;12384)
-   [`4ccf58a`](https://github.com/facebook/react/commit/4ccf58a94dce323718540b8185a32070ded6094b)Fix context stack misalignment caused by error replay (#&#8203;12508)
-   [`6f2ea73`](https://github.com/facebook/react/commit/6f2ea73978168372f33a6dfad6c049afddc4aef3)Extract throw to separate function so performUnitOfWork does not deopt (#&#8203;12521)
-   [`ba245f6`](https://github.com/facebook/react/commit/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3)Prefix _context property on returned ReactContext from createContext - it&#x27;s private (#&#8203;12501)
-   [`eb6e752`](https://github.com/facebook/react/commit/eb6e752cabafed0b72e1d0a38819ff156557d537)Bumped create-subscription package version (#&#8203;12526)
-   [`da4e855`](https://github.com/facebook/react/commit/da4e85567b411a180c2cfa1ef6573cf3cc9257f1)Remove @&#8203;providesModule in www bundles (#&#8203;12529)
-   [`0f2f90b`](https://github.com/facebook/react/commit/0f2f90bd9a9daf241d691bf4af3ea2e3a263c0e3)getDerivedStateFrom{Props,Catch} should update updateQueue.baseState (#&#8203;12528)
-   [`36c2939`](https://github.com/facebook/react/commit/36c29393720157a3966ce1d50449a33a35bdf14c)Improve not-yet-mounted setState warning (#&#8203;12531)
-   [`a2cc3c3`](https://github.com/facebook/react/commit/a2cc3c38e214c16ff6805312d4353c1faab9ff95)Follow up: make new warning less wordy (#&#8203;12532)
-   [`2279843`](https://github.com/facebook/react/commit/2279843ef966ea2e0460986efa1f91513cd50623)Updating yarn.lock file for 16.3.1 release
-   [`787b343`](https://github.com/facebook/react/commit/787b343f674c72837209bdffd55c59682910d807)Updating package versions for release 16.3.1
-   [`dc05957`](https://github.com/facebook/react/commit/dc059579c3e56ca338a999b86d146d2341ee6f64)Update bundle sizes for 16.3.1 release
-   [`b15b165`](https://github.com/facebook/react/commit/b15b165e0798dca03492e354ebd5bcf87b711184)Changelog for 16.3.1

</details>





---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-04-09T00:28:13Z,NONE,True,19,13,2,,JavaScript,e4e0bd9c7ec55bd9b6a185cdfffab20ada25367a,Update react monorepo packages
102,https://api.github.com/repos/mozilla/distribution-viewer/pulls/378,378,Update dependency sinon to v4.5.0,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.8` to `v4.5.0`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v4.4.9`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;449--2018-03-27)

==================

  * Fix #&#8203;1746: Remove dependency on ES2015 code from post-install script

---

### [`v4.5.0`](https://github.com/sinonjs/sinon/blob/master/CHANGELOG.md#&#8203;450--2018-03-30)

==================

  * Add .lastArg and .callback to spy call

---

</details>


<details>
<summary>Commits</summary>

#### v4.4.9
-   [`8f7a966`](https://github.com/sinonjs/sinon/commit/8f7a966970220bedd1f08c3cdff3d9a579d7ed30) Fix #&#8203;1746: Remove dependency on ES2015 code from post-install script
-   [`b1e2c47`](https://github.com/sinonjs/sinon/commit/b1e2c474e61edf8c53f8e18240108e83a6dbf97e) Update History.md and AUTHORS for new release
-   [`c4c4279`](https://github.com/sinonjs/sinon/commit/c4c42794b3f35965a2a00a6ba67c934726760133) 4.4.9
-   [`f547ef8`](https://github.com/sinonjs/sinon/commit/f547ef8c963fd2579b46ac6ae37990e7c5a0c868) Add release documentation for v4.4.9
-   [`48b9262`](https://github.com/sinonjs/sinon/commit/48b92621119fd93b786c5e23e5c365bf664a3a3a) Update docs/changelog.md and set new release id in docs/_config.yml
#### v4.4.10
-   [`f2696bd`](https://github.com/sinonjs/sinon/commit/f2696bd149309011b0f8167b76868e30c650bf58) fix extra space typo
-   [`cee8156`](https://github.com/sinonjs/sinon/commit/cee81561f967ea6b1f29c844c58e76182a0eb93c) Merge pull request #&#8203;1738 from nfriedly/issue-1736
-   [`3d50435`](https://github.com/sinonjs/sinon/commit/3d50435d304c3d39da98cb61f8d20e57b9e2f7f7) Update docs of stub.throws
-   [`1069f15`](https://github.com/sinonjs/sinon/commit/1069f159dadf52b4053bd0a5fd9a37a6db47b8a0) Update documentation for older releases
-   [`3d18f04`](https://github.com/sinonjs/sinon/commit/3d18f040bb80eaf092acd5c334df6b7f4cb88a36) Merge customized version of pull request #&#8203;1730
-   [`d333180`](https://github.com/sinonjs/sinon/commit/d333180e1b9b90054eec3a27646c6dd0e7763644) Update History.md and AUTHORS for new release
-   [`4ba4de7`](https://github.com/sinonjs/sinon/commit/4ba4de7b779df8e236eb27988f5303ce6b190db5) 4.4.10
-   [`3f391a1`](https://github.com/sinonjs/sinon/commit/3f391a1d50bc55617461a552731acce5c4680413) Add release documentation for v4.4.10
-   [`4a7d56a`](https://github.com/sinonjs/sinon/commit/4a7d56a808fb28c153c552b7d32ffa4cf6f1ef99) Update docs/changelog.md and set new release id in docs/_config.yml
#### v4.5.0
-   [`8635826`](https://github.com/sinonjs/sinon/commit/8635826393f34d80fab366f1b49f65d9bcb428e8) Fix inconsist use of semicolon in spy docs
-   [`f5e03eb`](https://github.com/sinonjs/sinon/commit/f5e03ebcf902e19d87dd665c5fcee79008a76377) Extract spy call documentation to own page
-   [`dc6b605`](https://github.com/sinonjs/sinon/commit/dc6b605bc3e59fd4903f4898f92600e0d1b13899) Add .lastArg and .callback to spy call
-   [`ba05b5a`](https://github.com/sinonjs/sinon/commit/ba05b5a3d5b745e6c4213f7ec95935690ab5ec43) Revert &quot;Merge pull request #&#8203;1738 from nfriedly/issue-1736&quot;
-   [`1abc699`](https://github.com/sinonjs/sinon/commit/1abc699bbcb07f687ef58ad8326b6bebae97f765) Update History.md and AUTHORS for new release
-   [`1a67742`](https://github.com/sinonjs/sinon/commit/1a677421dee2692793b9b5710eeaf4a9b53df58f) 4.5.0
-   [`0665b20`](https://github.com/sinonjs/sinon/commit/0665b20a60fa9ad4808a8a1f0ec125419cd875bd) Add release documentation for v4.5.0
-   [`c742969`](https://github.com/sinonjs/sinon/commit/c742969fdb770ee19212140d3969890b092a52af) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-04-09T00:27:54Z,NONE,True,4,4,2,,JavaScript,27bdff83708d79b6e1ebf587700cb7e7362a5862,Update dependency sinon to v4.5.0
103,https://api.github.com/repos/mozilla/distribution-viewer/pulls/377,377,Pin Docker postgres:9.5 image digest - autoclosed,"This Pull Request pins Docker base image `postgres:9.5` to use a digest (`sha256:888b62ebb1265a7df59258fa22227e707faa2b39d9abfe2a1d6f9e3cd5936468`).
This digest will then be kept updated via Pull Requests whenever the image is updated on the Docker registry. For details on Renovate's Docker support, please visit https://renovateapp.com/docs/language-support/docker

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-04-02T20:58:46Z,NONE,False,1,1,1,,JavaScript,bf89d4f0ce27242ea3f71c265f081e5847134f66,Update postgres to tag 9.5
104,https://api.github.com/repos/mozilla/distribution-viewer/pulls/376,376,Pin Docker postgres:9.5 image digest,"This Pull Request pins Docker base image `postgres:9.5` to use a digest (`sha256:888b62ebb1265a7df59258fa22227e707faa2b39d9abfe2a1d6f9e3cd5936468`).
This digest will then be kept updated via Pull Requests whenever the image is updated on the Docker registry. For details on Renovate's Docker support, please visit https://renovateapp.com/docs/language-support/docker

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-04-02T20:58:11Z,NONE,False,1,1,1,,JavaScript,bf89d4f0ce27242ea3f71c265f081e5847134f66,Update postgres to tag 9.5
105,https://api.github.com/repos/mozilla/distribution-viewer/pulls/375,375,Scheduled weekly dependency update for week 13,"




### Update [google-api-python-client](https://pypi.python.org/pypi/google-api-python-client) from **1.6.5** to **1.6.6**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.6
   ```
   Version 1.6.6

  Bugfix release

  - Warn when constructing BatchHttpRequest using the legacy batch URI (488)
  - Increase the default media chunksize to 100MB. (482)
  - Remove unnecessary parsing of mime headers in HttpRequest.__init__ (467)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [httplib2](https://pypi.python.org/pypi/httplib2) from **0.10.3** to **0.11.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 0.11.3
   ```
   No changes, just reupload of 0.11.2 after fixing automatic release conditions in Travis.
   ```
   
  
  
   ### 0.11.2
   ```
   proxy: py3 NameError basestring
  https://github.com/httplib2/httplib2/pull/100
   ```
   
  
  
   ### 0.11.1
   ```
   Fix HTTP(S)ConnectionWithTimeout AttributeError proxy_info
  https://github.com/httplib2/httplib2/pull/97
   ```
   
  
  
   ### 0.11.0
   ```
   Add DigiCert Global Root G2 serial 033af1e6a711a9a0bb2864b11d09fae5
  https://github.com/httplib2/httplib2/pull/91

  python3 proxy support
  https://github.com/httplib2/httplib2/pull/90

  If no_proxy environment value ends with comma then proxy is not used
  https://github.com/httplib2/httplib2/issues/11

  fix UnicodeDecodeError using socks5 proxy
  https://github.com/httplib2/httplib2/pull/64

  Respect NO_PROXY env var in proxy_info_from_url
  https://github.com/httplib2/httplib2/pull/58

  NO_PROXY=bar was matching foobar (suffix without dot delimiter)
  New behavior matches curl/wget:
  - no_proxy=foo.bar will only skip proxy for exact hostname match
  - no_proxy=.wild.card will skip proxy for any.subdomains.wild.card
  https://github.com/httplib2/httplib2/issues/94

  Bugfix for Content-Encoding: deflate
  https://stackoverflow.com/a/22311297
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/httplib2
  - Changelog: https://pyup.io/changelogs/httplib2/
  - Repo: https://github.com/httplib2/httplib2
</details>





",pyup-bot,16239342,2018-04-02T15:20:11Z,CONTRIBUTOR,True,2,2,1,,JavaScript,76d3ddd431101357b0b192d3f5372688c6e3a8b5,Update google-api-python-client from 1.6.5 to 1.6.6
106,https://api.github.com/repos/mozilla/distribution-viewer/pulls/375,375,Scheduled weekly dependency update for week 13,"




### Update [google-api-python-client](https://pypi.python.org/pypi/google-api-python-client) from **1.6.5** to **1.6.6**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.6.6
   ```
   Version 1.6.6

  Bugfix release

  - Warn when constructing BatchHttpRequest using the legacy batch URI (488)
  - Increase the default media chunksize to 100MB. (482)
  - Remove unnecessary parsing of mime headers in HttpRequest.__init__ (467)
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/google-api-python-client
  - Changelog: https://pyup.io/changelogs/google-api-python-client/
  - Repo: http://github.com/google/google-api-python-client/
</details>





### Update [httplib2](https://pypi.python.org/pypi/httplib2) from **0.10.3** to **0.11.3**.


<details>
  <summary>Changelog</summary>
  
  
   ### 0.11.3
   ```
   No changes, just reupload of 0.11.2 after fixing automatic release conditions in Travis.
   ```
   
  
  
   ### 0.11.2
   ```
   proxy: py3 NameError basestring
  https://github.com/httplib2/httplib2/pull/100
   ```
   
  
  
   ### 0.11.1
   ```
   Fix HTTP(S)ConnectionWithTimeout AttributeError proxy_info
  https://github.com/httplib2/httplib2/pull/97
   ```
   
  
  
   ### 0.11.0
   ```
   Add DigiCert Global Root G2 serial 033af1e6a711a9a0bb2864b11d09fae5
  https://github.com/httplib2/httplib2/pull/91

  python3 proxy support
  https://github.com/httplib2/httplib2/pull/90

  If no_proxy environment value ends with comma then proxy is not used
  https://github.com/httplib2/httplib2/issues/11

  fix UnicodeDecodeError using socks5 proxy
  https://github.com/httplib2/httplib2/pull/64

  Respect NO_PROXY env var in proxy_info_from_url
  https://github.com/httplib2/httplib2/pull/58

  NO_PROXY=bar was matching foobar (suffix without dot delimiter)
  New behavior matches curl/wget:
  - no_proxy=foo.bar will only skip proxy for exact hostname match
  - no_proxy=.wild.card will skip proxy for any.subdomains.wild.card
  https://github.com/httplib2/httplib2/issues/94

  Bugfix for Content-Encoding: deflate
  https://stackoverflow.com/a/22311297
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/httplib2
  - Changelog: https://pyup.io/changelogs/httplib2/
  - Repo: https://github.com/httplib2/httplib2
</details>





",pyup-bot,16239342,2018-04-02T15:20:11Z,CONTRIBUTOR,True,2,2,1,,JavaScript,00f4bec904f44bc7b3a324543e4d720314a52f48,Update httplib2 from 0.10.3 to 0.11.3
107,https://api.github.com/repos/mozilla/distribution-viewer/pulls/374,374,Pin Docker postgres:9.5 image digest,"This Pull Request pins Docker base image `postgres:9.5` to use a digest (`sha256:888b62ebb1265a7df59258fa22227e707faa2b39d9abfe2a1d6f9e3cd5936468`).
This digest will then be kept updated via Pull Requests whenever the image is updated on the Docker registry. For details on Renovate's Docker support, please visit https://renovateapp.com/docs/language-support/docker

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-04-02T00:26:59Z,NONE,False,1,1,1,,JavaScript,bf89d4f0ce27242ea3f71c265f081e5847134f66,Update postgres to tag 9.5
108,https://api.github.com/repos/mozilla/distribution-viewer/pulls/373,373,Scheduled weekly dependency update for week 12,"




### Update [httplib2](https://pypi.python.org/pypi/httplib2) from **0.10.3** to **0.11.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 0.11.0
   ```
   Add DigiCert Global Root G2 serial 033af1e6a711a9a0bb2864b11d09fae5
  https://github.com/httplib2/httplib2/pull/91

  python3 proxy support
  https://github.com/httplib2/httplib2/pull/90

  If no_proxy environment value ends with comma then proxy is not used
  https://github.com/httplib2/httplib2/issues/11

  fix UnicodeDecodeError using socks5 proxy
  https://github.com/httplib2/httplib2/pull/64

  Respect NO_PROXY env var in proxy_info_from_url
  https://github.com/httplib2/httplib2/pull/58

  NO_PROXY=bar was matching foobar (suffix without dot delimiter)
  New behavior matches curl/wget:
  - no_proxy=foo.bar will only skip proxy for exact hostname match
  - no_proxy=.wild.card will skip proxy for any.subdomains.wild.card
  https://github.com/httplib2/httplib2/issues/94

  Bugfix for Content-Encoding: deflate
  https://stackoverflow.com/a/22311297
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/httplib2
  - Changelog: https://pyup.io/changelogs/httplib2/
  - Repo: https://github.com/httplib2/httplib2
</details>





",pyup-bot,16239342,2018-03-26T15:21:06Z,CONTRIBUTOR,False,1,1,1,,JavaScript,ef1351c5061f39185d8fd1f37672b9a9badd5e23,Update httplib2 from 0.10.3 to 0.11.0
109,https://api.github.com/repos/mozilla/distribution-viewer/pulls/372,372,Update jest monorepo packages to v22.4.3,"This Pull Request renovates the package group ""jest monorepo"".

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.

-   [jest-cli](https://github.com/facebook/jest) (`dependencies`): from `22.4.2` to `22.4.3`
-   [babel-jest](https://github.com/facebook/jest) (`dependencies`): from `22.4.1` to `22.4.3`






---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-26T01:52:17Z,NONE,True,1096,405,2,,JavaScript,305b75e542631259006084b233e554b7ea86d65d,Update jest monorepo packages
110,https://api.github.com/repos/mozilla/distribution-viewer/pulls/371,371,Update dependency webpack-stream to v4.0.3,"This Pull Request updates dependency [webpack-stream](https://github.com/shama/webpack-stream) from `v4.0.2` to `v4.0.3`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.



<details>
<summary>Commits</summary>

#### v4.0.3
-   [`c66e8e9`](https://github.com/shama/webpack-stream/commit/c66e8e98b505f7fbda80d8ae92ad70d4e5d80453) Fix Webpack 4 deprecation warning
-   [`e004f39`](https://github.com/shama/webpack-stream/commit/e004f3908a9ed91afda8ef3b03e77c3f48b105c4) Merge pull request #&#8203;182 from mtraynham/webpack_4
-   [`c54f4fb`](https://github.com/shama/webpack-stream/commit/c54f4fb136a8217bf2996908d1701c524937a23c) semistandard
-   [`9bf6f6d`](https://github.com/shama/webpack-stream/commit/9bf6f6db0cd1d7b4353ee54042804c6e8c0366a7) Update deps
-   [`0c78f02`](https://github.com/shama/webpack-stream/commit/0c78f02aa238af5ccb095a5a2998514bbe38b448) Use const in code examples
-   [`8336e66`](https://github.com/shama/webpack-stream/commit/8336e6659481a6544999c53e2e5c44c08a1be89a) v4.0.3

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-26T00:51:34Z,NONE,True,458,43,2,,JavaScript,2f95458fb28df72ecbca54f621124ec3f93ca2a3,Update dependency webpack-stream to v4.0.3
111,https://api.github.com/repos/mozilla/distribution-viewer/pulls/370,370,Update dependency sinon to v4.4.8,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.6` to `v4.4.8`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.



<details>
<summary>Commits</summary>

#### v4.4.7
-   [`1f33fe5`](https://github.com/sinonjs/sinon/commit/1f33fe5c81476ec51eb8c6176d8d38bc2e3d42d5) Reduce noisy NPM output from postinstall script
-   [`a87ef85`](https://github.com/sinonjs/sinon/commit/a87ef85802c87a1254b7622c4bd895fcb280c4c6) Use existing mini-lib for coloring
-   [`9fb8577`](https://github.com/sinonjs/sinon/commit/9fb8577cece2a59f7b391c64d7fe2559f2383640) Emojify the support message :heart:
-   [`cc91fe6`](https://github.com/sinonjs/sinon/commit/cc91fe6d9ac97a3d0f1d91076435e2882a6bda06) Update History.md and AUTHORS for new release
-   [`f047838`](https://github.com/sinonjs/sinon/commit/f047838d3c270c2390a2d60cc5f292288097d853) 4.4.7
-   [`e9fce06`](https://github.com/sinonjs/sinon/commit/e9fce065e5ed8e46e43c14574904a4f04af3182f) Add release documentation for v4.4.7
-   [`e060fe9`](https://github.com/sinonjs/sinon/commit/e060fe9d06aef69088641daae079f56d6c9c3093) Update docs/changelog.md and set new release id in docs/_config.yml
#### v4.4.8
-   [`f547e1a`](https://github.com/sinonjs/sinon/commit/f547e1aa96a3b5213fec75363cfbd0c049c59791) Fix 1743: Add scripts/support-sinon.js to package
-   [`9a13d14`](https://github.com/sinonjs/sinon/commit/9a13d1423a3585ef16e49b01b61c0c050d362314) Update History.md and AUTHORS for new release
-   [`5254ed3`](https://github.com/sinonjs/sinon/commit/5254ed3c12318bcf2090228ac6498520d50c9f89) 4.4.8
-   [`46ace0f`](https://github.com/sinonjs/sinon/commit/46ace0feca89a7ae6ff9f0bf1b3a26a4ea236067) Add release documentation for v4.4.8
-   [`224084b`](https://github.com/sinonjs/sinon/commit/224084b89d072d2b34cace7e1b20cb708e63ddd3) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-26T00:51:02Z,NONE,True,9,9,2,,JavaScript,c66b76a60b0ec91bf0570fb69c93dc4c803e2ec2,Update dependency sinon to v4.4.8
112,https://api.github.com/repos/mozilla/distribution-viewer/pulls/369,369,Update dependency uglifyjs-webpack-plugin to v1.2.4,"This Pull Request updates dependency [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) from `v1.2.3` to `v1.2.4`

**Note**: This PR was created on a configured schedule (""before 5am on monday"") and will not receive updates outside those times.


<details>
<summary>Release Notes</summary>

### [`v1.2.4`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/releases/v1.2.4)

##### `Bug Fixes`

* **index:** correct default asset name `{RegExp}` (`options.test`) ([#&#8203;259](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/259`)) ([f9e55fe](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/f9e55fe))
* **index:** don't remove legal comments by default (`options.extractComments`) ([#&#8203;250](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/250`)) ([b31b574](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/b31b574))

---

</details>


<details>
<summary>Commits</summary>

#### v1.2.4
-   [`d3aae1c`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/d3aae1c8cd621a2b41f597ef6f9ee01ff4b6e0d5) test(invalid-options): update snapshot (#&#8203;258)
-   [`f9e55fe`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/f9e55fe39157e022d05abca601989c10d23a98e1) fix(index): correct default asset name `{RegExp}` (`options.test`) (#&#8203;259)
-   [`b31b574`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/b31b5744d7e1500b179e854ca8902e738c348e80) fix(index): don&#x27;t remove legal comments by default (`options.extractComments`) (#&#8203;250)
-   [`facbcc6`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/facbcc6cbb724181d5f439b9d424b2c5069cc676) chore(release): 1.2.4

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-19T00:36:05Z,NONE,True,12,12,2,,JavaScript,ac87e2f46933cef0ef5933d5d6677526c07e734b,Update dependency uglifyjs-webpack-plugin to v1.2.4
113,https://api.github.com/repos/mozilla/distribution-viewer/pulls/368,368,Update dependency sinon to v4.4.6,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.5` to `v4.4.6`




<details>
<summary>Commits</summary>

#### v4.4.6
-   [`e5e6835`](https://github.com/sinonjs/sinon/commit/e5e6835bcd0e9a6839073cb3764685dd1ec939eb) Return returned value of invokant when using yields* and callsArg* (#&#8203;1724)
-   [`fa11833`](https://github.com/sinonjs/sinon/commit/fa1183327227696c0b291ec5a9fb8764b82c086e) Update History.md and AUTHORS for new release
-   [`0b51a76`](https://github.com/sinonjs/sinon/commit/0b51a7603d2d781d61563929c61437548c4e6e08) 4.4.6
-   [`2c2f245`](https://github.com/sinonjs/sinon/commit/2c2f245c69a5a8a3d544a47327cdbb43944caf90) Add release documentation for v4.4.6
-   [`988df0c`](https://github.com/sinonjs/sinon/commit/988df0c5253368182d60d1141d09586e6e00f39f) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-15T07:40:30Z,NONE,True,4,4,2,,JavaScript,11bc8af3f87f836269a657b116600e78227010ef,Update dependency sinon to v4.4.6
114,https://api.github.com/repos/mozilla/distribution-viewer/pulls/368,368,Update dependency sinon to v4.4.6,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.5` to `v4.4.6`




<details>
<summary>Commits</summary>

#### v4.4.6
-   [`e5e6835`](https://github.com/sinonjs/sinon/commit/e5e6835bcd0e9a6839073cb3764685dd1ec939eb) Return returned value of invokant when using yields* and callsArg* (#&#8203;1724)
-   [`fa11833`](https://github.com/sinonjs/sinon/commit/fa1183327227696c0b291ec5a9fb8764b82c086e) Update History.md and AUTHORS for new release
-   [`0b51a76`](https://github.com/sinonjs/sinon/commit/0b51a7603d2d781d61563929c61437548c4e6e08) 4.4.6
-   [`2c2f245`](https://github.com/sinonjs/sinon/commit/2c2f245c69a5a8a3d544a47327cdbb43944caf90) Add release documentation for v4.4.6
-   [`988df0c`](https://github.com/sinonjs/sinon/commit/988df0c5253368182d60d1141d09586e6e00f39f) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-15T07:40:30Z,NONE,True,4,4,2,,JavaScript,6a38b3f6ea7d11baf171685df7e5cd3acaf4d959,"Further update package-lock.json

I'm not sure why Renovate missed this."
115,https://api.github.com/repos/mozilla/distribution-viewer/pulls/367,367,Scheduled weekly dependency update for week 10,"




### Update [Django](https://pypi.python.org/pypi/Django) from **1.11.10** to **1.11.11**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.11
   ```
   ============================

*March 6, 2018*

Django 1.11.11 fixes two security issues in 1.11.10.

CVE-2018-7536: Denial-of-service possibility in ``urlize`` and ``urlizetrunc`` template filters
===============================================================================================

The ``django.utils.html.urlize()`` function was extremely slow to evaluate
certain inputs due to catastrophic backtracking vulnerabilities in two regular
expressions. The ``urlize()`` function is used to implement the ``urlize`` and
``urlizetrunc`` template filters, which were thus vulnerable.

The problematic regular expressions are replaced with parsing logic that
behaves similarly.

CVE-2018-7537: Denial-of-service possibility in ``truncatechars_html`` and ``truncatewords_html`` template filters
==================================================================================================================

If ``django.utils.text.Truncator``&#39;s ``chars()`` and ``words()`` methods were
passed the ``html=True`` argument, they were extremely slow to evaluate certain
inputs due to a catastrophic backtracking vulnerability in a regular
expression. The ``chars()`` and ``words()`` methods are used to implement the
``truncatechars_html`` and ``truncatewords_html`` template filters, which were
thus vulnerable.

The backtracking problem in the regular expression is fixed.


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [dj-database-url](https://pypi.python.org/pypi/dj-database-url) from **0.4.2** to **0.5.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/dj-database-url
  - Repo: https://github.com/kennethreitz/dj-database-url
</details>





### Update [raven](https://pypi.python.org/pypi/raven) from **6.5.0** to **6.6.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.6.0
   ```
   ------------------
* [Core] Add trimming to breadcrumbs.
* [Core] Improve host message at startup.
* [Core] Update pytest to work on other environments
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





",pyup-bot,16239342,2018-03-12T15:19:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,a4682f1a794c2ddf7d820c1b42afc1ec95915f95,Update django from 1.11.10 to 1.11.11
116,https://api.github.com/repos/mozilla/distribution-viewer/pulls/367,367,Scheduled weekly dependency update for week 10,"




### Update [Django](https://pypi.python.org/pypi/Django) from **1.11.10** to **1.11.11**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.11
   ```
   ============================

*March 6, 2018*

Django 1.11.11 fixes two security issues in 1.11.10.

CVE-2018-7536: Denial-of-service possibility in ``urlize`` and ``urlizetrunc`` template filters
===============================================================================================

The ``django.utils.html.urlize()`` function was extremely slow to evaluate
certain inputs due to catastrophic backtracking vulnerabilities in two regular
expressions. The ``urlize()`` function is used to implement the ``urlize`` and
``urlizetrunc`` template filters, which were thus vulnerable.

The problematic regular expressions are replaced with parsing logic that
behaves similarly.

CVE-2018-7537: Denial-of-service possibility in ``truncatechars_html`` and ``truncatewords_html`` template filters
==================================================================================================================

If ``django.utils.text.Truncator``&#39;s ``chars()`` and ``words()`` methods were
passed the ``html=True`` argument, they were extremely slow to evaluate certain
inputs due to a catastrophic backtracking vulnerability in a regular
expression. The ``chars()`` and ``words()`` methods are used to implement the
``truncatechars_html`` and ``truncatewords_html`` template filters, which were
thus vulnerable.

The backtracking problem in the regular expression is fixed.


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [dj-database-url](https://pypi.python.org/pypi/dj-database-url) from **0.4.2** to **0.5.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/dj-database-url
  - Repo: https://github.com/kennethreitz/dj-database-url
</details>





### Update [raven](https://pypi.python.org/pypi/raven) from **6.5.0** to **6.6.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.6.0
   ```
   ------------------
* [Core] Add trimming to breadcrumbs.
* [Core] Improve host message at startup.
* [Core] Update pytest to work on other environments
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





",pyup-bot,16239342,2018-03-12T15:19:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,74a3970183eed8f88443024b0d45819883d6eedb,Update dj-database-url from 0.4.2 to 0.5.0
117,https://api.github.com/repos/mozilla/distribution-viewer/pulls/367,367,Scheduled weekly dependency update for week 10,"




### Update [Django](https://pypi.python.org/pypi/Django) from **1.11.10** to **1.11.11**.


<details>
  <summary>Changelog</summary>
  
  
   ### 1.11.11
   ```
   ============================

*March 6, 2018*

Django 1.11.11 fixes two security issues in 1.11.10.

CVE-2018-7536: Denial-of-service possibility in ``urlize`` and ``urlizetrunc`` template filters
===============================================================================================

The ``django.utils.html.urlize()`` function was extremely slow to evaluate
certain inputs due to catastrophic backtracking vulnerabilities in two regular
expressions. The ``urlize()`` function is used to implement the ``urlize`` and
``urlizetrunc`` template filters, which were thus vulnerable.

The problematic regular expressions are replaced with parsing logic that
behaves similarly.

CVE-2018-7537: Denial-of-service possibility in ``truncatechars_html`` and ``truncatewords_html`` template filters
==================================================================================================================

If ``django.utils.text.Truncator``&#39;s ``chars()`` and ``words()`` methods were
passed the ``html=True`` argument, they were extremely slow to evaluate certain
inputs due to a catastrophic backtracking vulnerability in a regular
expression. The ``chars()`` and ``words()`` methods are used to implement the
``truncatechars_html`` and ``truncatewords_html`` template filters, which were
thus vulnerable.

The backtracking problem in the regular expression is fixed.


============================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [dj-database-url](https://pypi.python.org/pypi/dj-database-url) from **0.4.2** to **0.5.0**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/dj-database-url
  - Repo: https://github.com/kennethreitz/dj-database-url
</details>





### Update [raven](https://pypi.python.org/pypi/raven) from **6.5.0** to **6.6.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 6.6.0
   ```
   ------------------
* [Core] Add trimming to breadcrumbs.
* [Core] Improve host message at startup.
* [Core] Update pytest to work on other environments
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.python.org/pypi/raven
  - Changelog: https://pyup.io/changelogs/raven/
  - Repo: https://github.com/getsentry/raven-python
</details>





",pyup-bot,16239342,2018-03-12T15:19:11Z,CONTRIBUTOR,True,3,3,1,,JavaScript,73cd6bfeb2e2c6ffa4b6e8cc957b1ffe3b836652,Update raven from 6.5.0 to 6.6.0
118,https://api.github.com/repos/mozilla/distribution-viewer/pulls/366,366,Update dependency sinon to v4.4.5,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.2` to `v4.4.5`




<details>
<summary>Commits</summary>

#### v4.4.3
-   [`47aad3c`](https://github.com/sinonjs/sinon/commit/47aad3c074779d8ab635d35163c779855a4b3fb9) Rename argument to index to match thrown error and documentation
-   [`6c25e72`](https://github.com/sinonjs/sinon/commit/6c25e72497dee9708efdb725f854b60db04ee28a) Merge pull request #&#8203;1707 from mroderick/rename-behaviour-arguments
-   [`2d6c01a`](https://github.com/sinonjs/sinon/commit/2d6c01a1352a4b3c3d82b392ad517f6d18e7076c) Fix the link to #fake-server-options
-   [`f89392c`](https://github.com/sinonjs/sinon/commit/f89392c419dd3825d7af7fa0d58cc6ddeabfa3a6) Fix the link to #serverrespond
-   [`7b8eae3`](https://github.com/sinonjs/sinon/commit/7b8eae32bc34a586e649135e33c88c29cc346099) Add %D to spy.printf documentation
-   [`7ebb903`](https://github.com/sinonjs/sinon/commit/7ebb90327131c0faac473a1a43ec0b476a2954ff) Allow html element var in markdown
-   [`b491a57`](https://github.com/sinonjs/sinon/commit/b491a5719e849009c0123765cba3243f26b3c6ef) Replace referee dependency with @&#8203;sinonjs/referee
-   [`3ede6ee`](https://github.com/sinonjs/sinon/commit/3ede6ee778713042c6fe4818deba9768d0ccf917) Throw meaningful error stubbing ECMAScript Module
-   [`f6b89a1`](https://github.com/sinonjs/sinon/commit/f6b89a1c2ef721d02a1949e79284ea8479a26534) Extract ES Module detection and improve error
-   [`6959188`](https://github.com/sinonjs/sinon/commit/6959188acb424b3292985f1ed0f41ec902be5a52) Add detection of ES Modules to spies and lots of tests
-   [`51cdafe`](https://github.com/sinonjs/sinon/commit/51cdafe24f4b0263b364f7996d9db6d69aa9751a) Add linting for ES Modules
-   [`d7fb7d5`](https://github.com/sinonjs/sinon/commit/d7fb7d567206b805be916fcd420741f1d90fcef0) Merge pull request #&#8203;1715 from sinonjs/sinon-es6-module-detection
-   [`dc895fc`](https://github.com/sinonjs/sinon/commit/dc895fc78251042b3f19f0a54db45e95bf1b1a0d) debounce function call
-   [`7af0579`](https://github.com/sinonjs/sinon/commit/7af05790d655ae3fa82ee9704a72f976dedc8204) remove unnecessary properties quoting
-   [`a0e200e`](https://github.com/sinonjs/sinon/commit/a0e200ed1ad7d79119ac131d2653427ba7e11842) Add subdir eslintrc for mjs
-   [`e9aa877`](https://github.com/sinonjs/sinon/commit/e9aa877a0dfa2decb1c805a01cd56715dc12b297) Fix missed switch from referee to @&#8203;sinonjs/referee
-   [`f01d847`](https://github.com/sinonjs/sinon/commit/f01d8478e14beb97060d6962e4408efd4dc15d96) Fix inconsistent newline usage %D
-   [`5b01728`](https://github.com/sinonjs/sinon/commit/5b01728a6fc84659f42d384fd29c11f9636b4290) Update History.md and AUTHORS for new release
-   [`17b052f`](https://github.com/sinonjs/sinon/commit/17b052fa80bdd1f487c6a6a72a88a54db3239bcf) 4.4.3
-   [`cecbc46`](https://github.com/sinonjs/sinon/commit/cecbc4608fe092d04a528e003b7c5d7eb16a567a) Add release documentation for v4.4.3
-   [`6de1cbd`](https://github.com/sinonjs/sinon/commit/6de1cbdee526b9bb722df2e2a77af7796d6ab376) Update docs/changelog.md and set new release id in docs/_config.yml
#### v4.4.4
-   [`c560240`](https://github.com/sinonjs/sinon/commit/c560240a32356a62d770bf4c3cdb59c2130fc6cf) Make @&#8203;std/esm a devDependency
-   [`c22d73f`](https://github.com/sinonjs/sinon/commit/c22d73f976a41eda33b0e1067f68f1b1a733b017) Update History.md and AUTHORS for new release
-   [`e458c9e`](https://github.com/sinonjs/sinon/commit/e458c9e5a215c0106d4e539995816a19f68cd7cb) 4.5.0
-   [`9865c89`](https://github.com/sinonjs/sinon/commit/9865c89828a1be5d0bc66e6b05e49976eca3c8b2) Add release documentation for v4.5.0
-   [`ff5e2f9`](https://github.com/sinonjs/sinon/commit/ff5e2f91935ea31f7c532c363ba1a5231c95aaaf) Update docs/changelog.md and set new release id in docs/_config.yml
-   [`cad4b60`](https://github.com/sinonjs/sinon/commit/cad4b607f07ffac074cf223cef7eec37e3117819) Update History.md and AUTHORS for new release
-   [`d2122e3`](https://github.com/sinonjs/sinon/commit/d2122e329891c57a1829adf75709af8e35a28cd1) 4.4.4
-   [`3bbc457`](https://github.com/sinonjs/sinon/commit/3bbc4578597008c377762a6b09105df968d2cd35) Add release documentation for v4.4.4
-   [`41c13b5`](https://github.com/sinonjs/sinon/commit/41c13b56d785ff79e9bee1e9f475b735100659fb) Update docs/changelog.md and set new release id in docs/_config.yml
-   [`37fc15f`](https://github.com/sinonjs/sinon/commit/37fc15ff032586b30a660b570436be1a5aa6a672) Remove accidental release
#### v4.4.5
-   [`4751ee9`](https://github.com/sinonjs/sinon/commit/4751ee996b7e47d743614ca86312458a30638dc7) Add postinstall banner pointing to Open Collective
-   [`d088fae`](https://github.com/sinonjs/sinon/commit/d088fae11d64282c1a5f3299707b0e333b7ba4d4) Update History.md and AUTHORS for new release
-   [`41f0b83`](https://github.com/sinonjs/sinon/commit/41f0b83e4cca5be68f6931361abe7d613476dec0) 4.4.5
-   [`d048ad1`](https://github.com/sinonjs/sinon/commit/d048ad10828bd2094b89c2eafb8f353d0d3ae7d3) Add release documentation for v4.4.5
-   [`2fa34f6`](https://github.com/sinonjs/sinon/commit/2fa34f68c0c4b7a2b0e5b5e7ffdcf4905394767f) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-12T06:52:39Z,NONE,True,12,12,2,,JavaScript,76d7995d60d2251d4877439eda0e4c4b2ddf1740,Update dependency sinon to v4.4.5
119,https://api.github.com/repos/mozilla/distribution-viewer/pulls/365,365,Update dependency uglifyjs-webpack-plugin to v1.2.3,"This Pull Request updates dependency [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) from `v1.2.2` to `v1.2.3`



<details>
<summary>Release Notes</summary>

### [`v1.2.3`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/releases/v1.2.3)

##### `Bug Fixes`

* **index:** correct `[name].js.LICENSE` file path (`options.extractComments`) ([#&#8203;249](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/249`)) ([430111c](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/430111c))
* **index:** relax default asset name `{RegExp}` (`options.test`) ([#&#8203;251](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/251`)) ([d27e822](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/d27e822))
* **package:** update `schema-utils` v0.4.3...0.4.5 (`dependencies`) ([#&#8203;255](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/255`)) ([4c0feb8](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/4c0feb8))
* **package:** update`cacache` v10.0.1...10.0.4 (`dependencies`) ([#&#8203;253](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/253`)) ([8b0c0cd](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/8b0c0cd))
##### `Performance Improvements`

* **index:** switch to `md4` for content hashing ([#&#8203;243](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/243`)) ([14d2c4c](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/14d2c4c))

---

</details>


<details>
<summary>Commits</summary>

#### v1.2.3
-   [`14d2c4c`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/14d2c4c3fb6d0f5196fe966d347e1ac68d5c8c1d) perf(index): switch to `md4` for content hashing (#&#8203;243)
-   [`430111c`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/430111cc3647e6524a58ef023c2a371d89fd1954) fix(index): correct `[name].js.LICENSE` file path (`options.extractComments`) (#&#8203;249)
-   [`d27e822`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/d27e8221e6103dff6f7a0a2b68030537a46484ab) fix(index): relax default asset name `{RegExp}` (`options.test`) (#&#8203;251)
-   [`8b0c0cd`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/8b0c0cd5469a4c2b87fd4e639b1d25c0610b6989) fix(package): update`cacache` v10.0.1...10.0.4 (`dependencies`) (#&#8203;253)
-   [`4c0feb8`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/4c0feb8dd4aef5ef50e509414654263bc0a79f12) fix(package): update `schema-utils` v0.4.3...0.4.5 (`dependencies`) (#&#8203;255)
-   [`45a6cdf`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/45a6cdfb451cc24bf341384457181a50909c9f54) chore(release): 1.2.3

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-10T22:43:40Z,NONE,True,22,23,2,,JavaScript,5f0958abfdb25095c42f66ddadd87aff23f4ce06,Update dependency uglifyjs-webpack-plugin to v1.2.3
120,https://api.github.com/repos/mozilla/distribution-viewer/pulls/364,364,Update dependency gulp-clean-css to v3.9.3 - autoclosed,"This Pull Request updates dependency [gulp-clean-css](https://github.com/scniro/gulp-clean-css) from `v3.9.2` to `v3.9.3`



<details>
<summary>Release Notes</summary>

### [`v3.9.3`](https://github.com/scniro/gulp-clean-css/releases/3.9.3)

- [#&#8203;57](`https://github.com/scniro/gulp-clean-css/issues/57`)

---

</details>


<details>
<summary>Commits</summary>

#### v3.9.3
-   [`4d8330d`](https://github.com/scniro/gulp-clean-css/commit/4d8330da735955fb33d0f8b3610041aeb96a5129) remove codeclimate
-   [`8479e19`](https://github.com/scniro/gulp-clean-css/commit/8479e19385de349e740a5dceb01e73a43de6401c) #&#8203;57, deps

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-09T00:20:30Z,NONE,True,44,9,2,,JavaScript,f617a11bf2ee2ccfe5413a3d98e6b9222fbface6,Update dependency gulp-clean-css to v3.9.3
121,https://api.github.com/repos/mozilla/distribution-viewer/pulls/363,363,Update dependency react-router to v3.2.1,"This Pull Request updates dependency [react-router](https://github.com/ReactTraining/react-router) from `v3.2.0` to `v3.2.1`



<details>
<summary>Release Notes</summary>

### [`v3.2.1`](https://github.com/ReactTraining/react-router/releases/v3.2.1)

- React 16.3 support

---

</details>


<details>
<summary>Commits</summary>

#### v3.2.1
-   [`67d7978`](https://github.com/ReactTraining/react-router/commit/67d7978bea10faa1dadca028e3f7815aac3771e5) Update react-router-redux readme to reflect versioning situation. (#&#8203;5560)
-   [`867e9f1`](https://github.com/ReactTraining/react-router/commit/867e9f180d2e19fc4b399b67a929edbea30e4af8) Ignore the website in CI
-   [`77352a8`](https://github.com/ReactTraining/react-router/commit/77352a8a7110d7198bc876540e938828f6b6bf67) Update Travis config
-   [`b36cfcc`](https://github.com/ReactTraining/react-router/commit/b36cfccadb352beddcf488542adea787f93b014d) Merge branch &#x27;feature/redirect-with-params&#x27; of https://github.com/dlindenkreuz/react-router into dlindenkreuz-feature/redirect-with-params
-   [`f964e00`](https://github.com/ReactTraining/react-router/commit/f964e009604c78d2029718479def468284fcc49f) Add test for &lt;Redirect&gt; param interpolation
-   [`5e763c5`](https://github.com/ReactTraining/react-router/commit/5e763c57937c2d1828c931b3d4c3dbda9ec33f93) Add a basic components guide (#&#8203;4926)
-   [`bcf8cb9`](https://github.com/ReactTraining/react-router/commit/bcf8cb9acb815f807ddf6d1e8bfa33738a10cdc5) Adds a note &amp; link to Redux blocked updates (#&#8203;5552)
-   [`6d28a2e`](https://github.com/ReactTraining/react-router/commit/6d28a2e741c16bb5a88efdb42d26b049ed220365) Add basic working examples to react-router-redux (#&#8203;5512)
-   [`be6fb6d`](https://github.com/ReactTraining/react-router/commit/be6fb6df75961e8786fae89dfd5bf74b2e7e2160) Fix &lt;Link to&#x3D;&quot;string&quot;&gt; (#&#8203;5489)
-   [`819b6ac`](https://github.com/ReactTraining/react-router/commit/819b6ac838636621ee5b1ce834659d8d592c81bd) update readme to clarify pathname (#&#8203;5066)
-   [`1006945`](https://github.com/ReactTraining/react-router/commit/10069457db64f60a68577fd55966375af2ae5f8e) Style tweak
-   [`08dfc5e`](https://github.com/ReactTraining/react-router/commit/08dfc5ec31aa5212166a9b4c03fa5e1584315c05) Document Route sensitive option (#&#8203;5592)
-   [`c3d453e`](https://github.com/ReactTraining/react-router/commit/c3d453ee4eba703bf606a77f61ce08eac8a64d0a) Escape NavLink path to allow special characters in path.  Fixes #&#8203;5584 (#&#8203;5596)
-   [`06d5661`](https://github.com/ReactTraining/react-router/commit/06d56612558536464c9ee18ac7e3899a5b659757) Upgrade deps and rollup config for react-router-redux
-   [`7450ce0`](https://github.com/ReactTraining/react-router/commit/7450ce05d5f7184f69ef2389af2201140ae4d5e8) Update deps and fix for various problems.
-   [`5182123`](https://github.com/ReactTraining/react-router/commit/5182123b68fdf35e0223133b998eaec5bb8de6a5) RRR published as 5.0.0-alpha.7
-   [`b835c8f`](https://github.com/ReactTraining/react-router/commit/b835c8fc07b6dcb92caf6a89151493346524e012) Update package.json (#&#8203;5638)
-   [`d6ac814`](https://github.com/ReactTraining/react-router/commit/d6ac814e273b2f3aad24b7630a6f1df3f19c1475) RRR 5.0.0-alpha.8
-   [`fd85fbc`](https://github.com/ReactTraining/react-router/commit/fd85fbc259a57c0cc61851cfbe377d85fa537bb4) react-router-redux/createMatchSelector: handle null case when router state is not yet initialized (#&#8203;5653)
-   [`d972088`](https://github.com/ReactTraining/react-router/commit/d9720881f0879fe81fcf23e2013cb8ba26d54b04) Fix some code splitting docs inconsistencies.
-   [`93cdf94`](https://github.com/ReactTraining/react-router/commit/93cdf94c7e561297bf0459aa362ceb507189d19a) Fix link to location.md (#&#8203;5676)
-   [`5470fad`](https://github.com/ReactTraining/react-router/commit/5470fad8876d7b788e29c4a61e83fa62a4301504) fix: wrong path of require (#&#8203;5681)
-   [`db1900a`](https://github.com/ReactTraining/react-router/commit/db1900a05400563a65995991ed27f44d75149965) Updated react-transition-group and changed Animation.js example (#&#8203;5691)
-   [`f8887ad`](https://github.com/ReactTraining/react-router/commit/f8887ad218df824b892f22ac66a15ec8b9272007) fix small typo (#&#8203;5695)
-   [`7cda4bd`](https://github.com/ReactTraining/react-router/commit/7cda4bda61dd039ee0de51841c3a64dd486c2ff8) Expose generatePath (#&#8203;5661)
-   [`db597b2`](https://github.com/ReactTraining/react-router/commit/db597b2239ae4a501b637a35aac9fc6614cdb73a) added a much needed comma! (#&#8203;5711)
-   [`c47ffd7`](https://github.com/ReactTraining/react-router/commit/c47ffd71022e1f94eee0a326b5c607aec0629326) Improvements to react-router-redux examples (#&#8203;5647)
-   [`7309a50`](https://github.com/ReactTraining/react-router/commit/7309a507bda66c24411a4a722df4015a8e9db0c9) &lt;Switch&gt; transition example (#&#8203;5516)
-   [`2a5be25`](https://github.com/ReactTraining/react-router/commit/2a5be253e33bf42b9bc757d93ee904bb1e8fbb8e) Fixes bad package-lock file
-   [`7f43de6`](https://github.com/ReactTraining/react-router/commit/7f43de6be0d669d62daa57dbb04ebf43c6827f67) Merge pull request #&#8203;5719 from ReactTraining/fix-website-lock
-   [`a3e6fac`](https://github.com/ReactTraining/react-router/commit/a3e6fac7c26dbe1976ccea1e08d63397ce1ffbc5) Use named import of &#x27;history&#x27; module to fix #&#8203;5576. (#&#8203;5589)
-   [`463cd3e`](https://github.com/ReactTraining/react-router/commit/463cd3e8bfbcb40415a2bde9ffab98103d7a383b) Hoist dependencies &#x3D; smaller react-router-dom UMD (#&#8203;5720)
-   [`da63a49`](https://github.com/ReactTraining/react-router/commit/da63a49b538ff350b6a33bc9d609b49fb5adda74) fix: remove aria-current from navLink when inactive (#&#8203;5508)
-   [`992ddf9`](https://github.com/ReactTraining/react-router/commit/992ddf9b5b35f83994bdcaac4976c8d0eb68058b) Change `history.location` to `object` (#&#8203;5732)
-   [`0e6f1a3`](https://github.com/ReactTraining/react-router/commit/0e6f1a37a2540595e776858c52e924cc74590d6b) Add &#x27;exact&#x27; &amp; &#x27;strict&#x27; props to redirect api doc. (#&#8203;5737)
-   [`8489b48`](https://github.com/ReactTraining/react-router/commit/8489b482e1328e8eb43ffc0ea35e96c81440e128) grammar fix (#&#8203;5744)
-   [`6b70d13`](https://github.com/ReactTraining/react-router/commit/6b70d1349a017f60777734a330042a3eb5dec843) [BUG-FIX]: createMatchSelector isExact (#&#8203;5748)
-   [`73348d9`](https://github.com/ReactTraining/react-router/commit/73348d9c7fdfed0d3c29fea20e2d49d2651dbeab) Fix &quot;exact match&quot; test &amp; remove unnecessary check (#&#8203;5749)
-   [`d107199`](https://github.com/ReactTraining/react-router/commit/d1071993e6262bc2e752c79b52a445979ce67111) Add Switch location argument to renderRoutes (#&#8203;5752)
-   [`469fc9f`](https://github.com/ReactTraining/react-router/commit/469fc9f7f0077fd8c1d794ab93d519adbfa851ea) react-router-redux: update propTypes (#&#8203;5777)
-   [`cdc31fa`](https://github.com/ReactTraining/react-router/commit/cdc31fafa689ec9a7ae6261e55e0096114cc3ab2) [FIX]: Redirect on mount issue (#&#8203;5786)
-   [`be61b15`](https://github.com/ReactTraining/react-router/commit/be61b1500103f04659b8098abd6ffc5fca3c840d) Not sure what happened here. We&#x27;re not using Yarn.
-   [`b5cc887`](https://github.com/ReactTraining/react-router/commit/b5cc887dbebcf67d209a2f702fc41dc449271781) RRR Alpha Nein!
-   [`fd8ed2c`](https://github.com/ReactTraining/react-router/commit/fd8ed2c045f94239bf3cfd063fa0dda75f9ce359) [FIX]: Allow other middlewares to dispatch routerActions on init (#&#8203;5790)
-   [`96410c6`](https://github.com/ReactTraining/react-router/commit/96410c69be1ca32e294bf83e7d1321c39ecd286b) Update license
-   [`5f881db`](https://github.com/ReactTraining/react-router/commit/5f881dbc81c76a4e5c9362c9806afee3a34e82e2) Bring back documentation on Link DOM props (#&#8203;5799)
-   [`3e87721`](https://github.com/ReactTraining/react-router/commit/3e877213ddfed632ab2212476c6fc125360f0331) Example with regex in path (#&#8203;5815)
-   [`186ac53`](https://github.com/ReactTraining/react-router/commit/186ac5318dc05ad8549cad9fa190644df3e79308) Fix typo in docs (#&#8203;5822)
-   [`8898f14`](https://github.com/ReactTraining/react-router/commit/8898f14be332d64c403a0510873cd68cd26e7504) Update Copyright Year (#&#8203;5829)
-   [`f168e5b`](https://github.com/ReactTraining/react-router/commit/f168e5b1e30deef0aae2d87dc3090b2c12ed61b2) documenting v3 &lt;Redirect&gt; query string behavior (#&#8203;5837)
-   [`dc10832`](https://github.com/ReactTraining/react-router/commit/dc10832d23f9ab673891805c9c866b90d1ef1ed6) Markup JSX in docs (#&#8203;5839)
-   [`6ab573f`](https://github.com/ReactTraining/react-router/commit/6ab573f6eedf24e48c5551b6c08cd71806bf9763) Add invariant for missing &quot;to&quot; property (#&#8203;5792)
-   [`c63f56d`](https://github.com/ReactTraining/react-router/commit/c63f56da5a1fe6b448f48437899d65d5b2cafc6e) Update website to Webpack v3 (#&#8203;5725)
-   [`bb96920`](https://github.com/ReactTraining/react-router/commit/bb969201817b4ce1667d3933a69497777e1cad15) Re-add website react-motion dep (#&#8203;5845)
-   [`435239c`](https://github.com/ReactTraining/react-router/commit/435239c8d957af85ab69d0415d08f184b9faf125) Warn of possible tooling loss on upgrade (#&#8203;5858)
-   [`37ae524`](https://github.com/ReactTraining/react-router/commit/37ae52472d61abb7361419a87ae18aa7087f5009) Update copyright year
-   [`76e7c81`](https://github.com/ReactTraining/react-router/commit/76e7c81e8605f267dd26833e23a2d24552d24110) Update README, remove sponsors
-   [`74a3d0e`](https://github.com/ReactTraining/react-router/commit/74a3d0ed86c3ceacc5bd680573ddb70e5bd2d45d) Regenerate package-lock.json
-   [`e6f9017`](https://github.com/ReactTraining/react-router/commit/e6f9017c947b3ae49affa24cc320d0a86f765b55) Just Use Prettier™
-   [`f8a1934`](https://github.com/ReactTraining/react-router/commit/f8a1934e76df1579e26f61f1c415e709339a52e2) Run prettier on commit
-   [`8a15aae`](https://github.com/ReactTraining/react-router/commit/8a15aaec4d44a6a8cb128837f055092b180c0e23) Don&#x27;t prettify package[-lock].json
-   [`2fbae3d`](https://github.com/ReactTraining/react-router/commit/2fbae3d9adc2f338644392673f7b06601954027b) Update `req.url` to be `req.path` (#&#8203;5880)
-   [`67bcd88`](https://github.com/ReactTraining/react-router/commit/67bcd88c8c00ee3164333c5981daa461b7f834ec) pretty-quick v1.2.2 (#&#8203;5884)
-   [`e212d28`](https://github.com/ReactTraining/react-router/commit/e212d28e792bfc8db92f2dc318422f3110b8bf8f) Upgrade deps. Handle new error boundary messages.
-   [`f9481bb`](https://github.com/ReactTraining/react-router/commit/f9481bb81587e50879cf213ff1162ce248474984) Lock RRN deps.
-   [`70dbb2a`](https://github.com/ReactTraining/react-router/commit/70dbb2abae4b702703169350c159926dade89510) componentDidMount does not take prevProps as an argument (#&#8203;5903)
-   [`6c5aeed`](https://github.com/ReactTraining/react-router/commit/6c5aeede22797c3fd84b1ededede83e297feb646) Fix ESLint to match Prettier config.
-   [`4ea0c85`](https://github.com/ReactTraining/react-router/commit/4ea0c85d98c9ce68eeb43fb4f306ba4283f17759) Fix non-functional links to routers (#&#8203;5911)
-   [`aa569ff`](https://github.com/ReactTraining/react-router/commit/aa569ff5034815404d261897a578c781c5cf0b65) Revert &quot;Fix non-functional links to routers (#&#8203;5911)&quot; (#&#8203;5913)
-   [`dc199db`](https://github.com/ReactTraining/react-router/commit/dc199db70cec6d2032f6bb66a4cac204043c3e02) Update animation.md (#&#8203;5926)
-   [`137a37b`](https://github.com/ReactTraining/react-router/commit/137a37b0a925a1be50c7f25aa3913dfa3441a391) Prettify website
-   [`ac1a3cf`](https://github.com/ReactTraining/react-router/commit/ac1a3cf5e7eb8e205714a00f4901c331b47f070e) Update changelog for all the upcoming goodies.
-   [`9cd19e2`](https://github.com/ReactTraining/react-router/commit/9cd19e25191aeb20fd99b2532fa71ac20dd5966b) Prompt doc: add example message returns true (#&#8203;5940)
-   [`b44bf78`](https://github.com/ReactTraining/react-router/commit/b44bf78af0e8c77d6512cc2fe90b5449131ea946) Fix documentation for Route&#x27;s sensitive attribute (#&#8203;5942)
-   [`bdcfec6`](https://github.com/ReactTraining/react-router/commit/bdcfec6dbfea4dbab009f3c10d42e8fdfd8e7871) Prettify scripts
-   [`f5abb33`](https://github.com/ReactTraining/react-router/commit/f5abb335d0f85d5e70378badbfb40c139486aba1) Move website webpack config to default location
-   [`f47d61e`](https://github.com/ReactTraining/react-router/commit/f47d61ec812d1cd2b7c994d83f1258fe9555f6ec) Add newsletter signup form to the website
-   [`ecc9a73`](https://github.com/ReactTraining/react-router/commit/ecc9a73230f574cba138929cd8ef829592609006) Don&#x27;t hard-code version in ISSUE_TEMPLATE (#&#8203;5952)
-   [`46c4c53`](https://github.com/ReactTraining/react-router/commit/46c4c530e0ba1d159ea11310f4c5bdad8da80322) Fix pathless route&#x27;s match when parent is null  (#&#8203;5964)
-   [`e5d8c66`](https://github.com/ReactTraining/react-router/commit/e5d8c669607938560aa2499802042d34daad8600) More stuff TBR
-   [`4a28213`](https://github.com/ReactTraining/react-router/commit/4a2821335daa1806ded29ad09359424053107e44) reimplement tests from #&#8203;5142 (#&#8203;5965)
-   [`6d9c425`](https://github.com/ReactTraining/react-router/commit/6d9c4250dd0b88e029e0698599b44aa8b0d8d90e) Fix when NavLink is passed a blank pathname
-   [`0ed8305`](https://github.com/ReactTraining/react-router/commit/0ed8305286fbfca8a7bbd831ec8b2eef2dbedf17) Update sandbox with newer versions of things.
-   [`7001576`](https://github.com/ReactTraining/react-router/commit/7001576645b084e68b30332ce2bd91b8f0cdd6fd) Note on accessing location.state in Redirect docs (#&#8203;5966)
-   [`060e92c`](https://github.com/ReactTraining/react-router/commit/060e92c211fe1c8f0111aada6ca7647140ee53f1) Update match.md (#&#8203;6003)

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-07T18:31:31Z,NONE,True,5,12,2,,JavaScript,39e60fb501fffdbb2eadb9981ec967657c47422d,Update dependency react-router to v3.2.1
122,https://api.github.com/repos/mozilla/distribution-viewer/pulls/362,362,Update dependency babel-loader to v7.1.4,"This Pull Request updates dependency [babel-loader](https://github.com/babel/babel-loader) from `v7.1.3` to `v7.1.4`



<details>
<summary>Release Notes</summary>

### [`v7.1.4`](https://github.com/babel/babel-loader/releases/v7.1.4)

##### 🐛 Bug Fix

* Update code to read filename

---

</details>


<details>
<summary>Commits</summary>

#### v7.1.4
-   [`b295162`](https://github.com/babel/babel-loader/commit/b29516266912fbc50120155fee00efb1b0a19f59) Format imports

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-06T10:05:13Z,NONE,True,4,4,2,,JavaScript,2a4fd6101d85cf650d34a05d8a392ce35a46198f,Update dependency babel-loader to v7.1.4
123,https://api.github.com/repos/mozilla/distribution-viewer/pulls/361,361,Scheduled weekly dependency update for week 09,"


## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>dj-database-url</b></td>
<td align=""center"">0.4.2</td>
<td align=""center"">&raquo;</td>
<td align=""center"">0.5.0</td>
<td>
     <a href=""https://pypi.python.org/pypi/dj-database-url"">PyPI</a> | <a href=""https://github.com/kennethreitz/dj-database-url"">Repo</a> 

</td>

<tr>
<td><b>raven</b></td>
<td align=""center"">6.5.0</td>
<td align=""center"">&raquo;</td>
<td align=""center"">6.6.0</td>
<td>
     <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 

</td>

</tr>
</table>



## Changelogs


### raven 6.5.0 -> 6.6.0

>### 6.6.0

>------------------
>* [Core] Add trimming to breadcrumbs.
>* [Core] Improve host message at startup.
>* [Core] Update pytest to work on other environments










That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2018-03-05T15:16:08Z,CONTRIBUTOR,False,2,2,1,,JavaScript,bbc648bef508d6aee1a43895e31bcc405ababe22,Update dj-database-url from 0.4.2 to 0.5.0
124,https://api.github.com/repos/mozilla/distribution-viewer/pulls/361,361,Scheduled weekly dependency update for week 09,"


## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>dj-database-url</b></td>
<td align=""center"">0.4.2</td>
<td align=""center"">&raquo;</td>
<td align=""center"">0.5.0</td>
<td>
     <a href=""https://pypi.python.org/pypi/dj-database-url"">PyPI</a> | <a href=""https://github.com/kennethreitz/dj-database-url"">Repo</a> 

</td>

<tr>
<td><b>raven</b></td>
<td align=""center"">6.5.0</td>
<td align=""center"">&raquo;</td>
<td align=""center"">6.6.0</td>
<td>
     <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 

</td>

</tr>
</table>



## Changelogs


### raven 6.5.0 -> 6.6.0

>### 6.6.0

>------------------
>* [Core] Add trimming to breadcrumbs.
>* [Core] Improve host message at startup.
>* [Core] Update pytest to work on other environments










That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2018-03-05T15:16:08Z,CONTRIBUTOR,False,2,2,1,,JavaScript,1adc70783dd38b42e308e7ec0fd809adc9765b84,Update raven from 6.5.0 to 6.6.0
125,https://api.github.com/repos/mozilla/distribution-viewer/pulls/360,360,Update dependency gulp-jest to v4,"This Pull Request updates dependency [gulp-jest](https://github.com/alansouzati/gulp-jest) from `v3.0.1` to `v4.0.2`



<details>
<summary>Release Notes</summary>

### [`v4.0.2`](https://github.com/alansouzati/gulp-jest/releases/v4.0.2)

- Fixed deprecated gulp util, thanks @&#8203;TheDancingCode 
- Changed default rootDir to `process.cwd()` as opposed to `file.path`

---

</details>


<details>
<summary>Commits</summary>

#### v4.0.0
-   [`c0beda3`](https://github.com/alansouzati/gulp-jest/commit/c0beda36c6d2fd887d2d4af3681c94d08cd78bdd) Fixed weird problem where the fix disappeared
#### v4.0.1
-   [`403dcdf`](https://github.com/alansouzati/gulp-jest/commit/403dcdf1bbd404d772a8187fa2e374c495e341c9) Using process.cwd() as the default rootDir
-   [`311e273`](https://github.com/alansouzati/gulp-jest/commit/311e27350306ca6a3ea6ac987414a68c6134ddcf) Replace deprecated gulp-util (#&#8203;49)

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-03-01T06:42:01Z,NONE,True,40,5,2,,JavaScript,2180863be6d5b2aaae442c1a47f294d304ea9ad6,Update dependency gulp-jest to v4.0.2
126,https://api.github.com/repos/mozilla/distribution-viewer/pulls/359,359,Update gulp-jest to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **4.0.0** of [gulp-jest](https://github.com/alansouzati/gulp-jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      gulp-jest
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      3.0.1
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **4.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of gulp-jest.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 1 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/commit/c0beda36c6d2fd887d2d4af3681c94d08cd78bdd""><code>c0beda3</code></a> <code>Fixed weird problem where the fix disappeared</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/compare/b6f445df13eaf25bf6288799346ba4d67129f52b...c0beda36c6d2fd887d2d4af3681c94d08cd78bdd"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-03-01T06:40:47Z,NONE,False,1,1,1,,JavaScript,86477cf940e9f7bf975ccee7eece2de3c371e1ca,fix(package): update gulp-jest to version 4.0.0
127,https://api.github.com/repos/mozilla/distribution-viewer/pulls/358,358,Update gulp-autoprefixer to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **5.0.0** of [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      gulp-autoprefixer
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      4.1.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **5.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of gulp-autoprefixer.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 4 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/sindresorhus/gulp-autoprefixer/commit/18a27bedc5c0f6bbbba6520b26a1e104f5361f6c""><code>18a27be</code></a> <code>5.0.0</code></li>
<li><a href=""https://urls.greenkeeper.io/sindresorhus/gulp-autoprefixer/commit/e526a78c1a7a9747a5dabe414d7284c155afa07d""><code>e526a78</code></a> <code>Meta tweaks</code></li>
<li><a href=""https://urls.greenkeeper.io/sindresorhus/gulp-autoprefixer/commit/e954e6e8044fcfe2dcd54d1d40333aa681b84808""><code>e954e6e</code></a> <code>Update sourcemap paths to be relative to <code>file.base</code> (#92)</code></li>
<li><a href=""https://urls.greenkeeper.io/sindresorhus/gulp-autoprefixer/commit/78286463a149aa6d77be29e2a8f2ea878ebe2cf1""><code>7828646</code></a> <code>Upgrade to Autoprefixer 8 (#96)</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/sindresorhus/gulp-autoprefixer/compare/d008588d84737dcc39e3595a76bad55f493b62c4...18a27bedc5c0f6bbbba6520b26a1e104f5361f6c"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-28T09:39:03Z,NONE,False,1,1,1,,JavaScript,b3c3dc6b843e5744081e52aaf2b506f338239c9a,fix(package): update gulp-autoprefixer to version 5.0.0
128,https://api.github.com/repos/mozilla/distribution-viewer/pulls/357,357,Update dependency gulp-autoprefixer to v5,"This Pull Request updates dependency [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer) from `v4.1.0` to `v5.0.0`




<details>
<summary>Commits</summary>

#### v5.0.0
-   [`7828646`](https://github.com/sindresorhus/gulp-autoprefixer/commit/78286463a149aa6d77be29e2a8f2ea878ebe2cf1) Upgrade to Autoprefixer 8 (#&#8203;96)
-   [`e954e6e`](https://github.com/sindresorhus/gulp-autoprefixer/commit/e954e6e8044fcfe2dcd54d1d40333aa681b84808) Update sourcemap paths to be relative to `file.base` (#&#8203;92)
-   [`e526a78`](https://github.com/sindresorhus/gulp-autoprefixer/commit/e526a78c1a7a9747a5dabe414d7284c155afa07d) Meta tweaks
-   [`18a27be`](https://github.com/sindresorhus/gulp-autoprefixer/commit/18a27bedc5c0f6bbbba6520b26a1e104f5361f6c) 5.0.0

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-28T09:34:19Z,NONE,True,68,15,2,,JavaScript,968fdafaa2913379d28e2011c9182ba6ead62de7,Update dependency gulp-autoprefixer to v5.0.0
129,https://api.github.com/repos/mozilla/distribution-viewer/pulls/356,356,Scheduled weekly dependency update for week 08,"


## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>dockerflow</b></td>
<td align=""center"">2017.11.0</td>
<td align=""center"">&raquo;</td>
<td align=""center"">2018.2.1</td>
<td>
     <a href=""https://pypi.python.org/pypi/dockerflow"">PyPI</a> | <a href=""https://pyup.io/changelogs/dockerflow/"">Changelog</a> | <a href=""https://github.com/mozilla-services/python-dockerflow"">Repo</a> 

</td>

</tr>
</table>



## Changelogs


### dockerflow 2017.11.0 -> 2018.2.1

>### 2018.2.1

>^^^^^^^^^^^^^^^^^^^^^

>- Fixes the instantiation of the JsonLogFormatter logging formatter
>  on Python 3 when using the logging module&#39;s ability to be configured
>  with ConfigParser ini files.

>- Extend the documentation for custom checks and reorganized it a bit.



>### 2018.2.0

>^^^^^^^^^^^^^^^^^^^^^

>- Adds Flask support. See the documentation for more information.

>- Extends the documentation about defining custom health checks.

>- Refactored some of the health monitoring code that existed for
>  the Django support.

>- Fixed an embarrassing typo about the default logger name when
>  using the ``JsonLogFormatter`` logging formatter, changed it
>  ``TestPilot`` to ``Dockerflow``.

>- Extends the testing matrix to include Django 2.0.

>- Make sure the the combination of Python and Django versions
>  match the official recommendation as defined at
>  https://docs.djangoproject.com/en/2.0/faq/install/what-python-version-can-i-use-with-django.










That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2018-02-26T15:12:08Z,CONTRIBUTOR,True,1,1,1,,JavaScript,1b52e39a5b2cf801a67da8001daf343497f0f1f5,Update dockerflow from 2017.11.0 to 2018.2.1
130,https://api.github.com/repos/mozilla/distribution-viewer/pulls/355,355,Update dependency babel-loader to v7.1.3,"This Pull Request updates dependency [babel-loader](https://github.com/babel/babel-loader) from `v7.1.2` to `v7.1.3`



<details>
<summary>Release Notes</summary>

### [`v7.1.3`](https://github.com/babel/babel-loader/releases/v7.1.3)

##### 🐛 Bug Fix

* Support webpack 4

---

</details>


<details>
<summary>Commits</summary>

#### v7.1.3
-   [`f753765`](https://github.com/babel/babel-loader/commit/f753765e7ddc97b79a363e06dc6ff8d825e41d94) Fix preset-env refs in README [skip ci]
-   [`e4f1aee`](https://github.com/babel/babel-loader/commit/e4f1aee1ee08a5e7d9ed53b84a68d2015845dc02) update readme versions [skip ci]
-   [`916affe`](https://github.com/babel/babel-loader/commit/916affe45bb7b7c9632cc3c21e5144bde499963f) Update lint-staged to the latest version 🚀 (#&#8203;536)
-   [`8b07d5d`](https://github.com/babel/babel-loader/commit/8b07d5d7b7e584a28d8c07bde23f342e675c7b9a) remove `@&#8203;next` since it&#x27;s not necessary on the scoped packages change [skip ci]
-   [`e6bb01e`](https://github.com/babel/babel-loader/commit/e6bb01e63969d0b459607164bb41c670d1abb734) Update ava to the latest version 🚀 (#&#8203;545)
-   [`7e95509`](https://github.com/babel/babel-loader/commit/7e95509500d28260a405f0970100cf44da561e4e) Update lint-staged to the latest version 🚀 (#&#8203;546)
-   [`b31d86f`](https://github.com/babel/babel-loader/commit/b31d86f1a189a0c7b810260f2fa89d146e6b749f) Fix preset-env and plugin-syntax-object-rest-spread refs. (#&#8203;549)
-   [`40552b6`](https://github.com/babel/babel-loader/commit/40552b60dfb1f070dd79d33de0bb799026592e20) Allow any version of webpack as a peerDependency (#&#8203;550)
-   [`8bd2521`](https://github.com/babel/babel-loader/commit/8bd2521fe15dd0e79ea71d138c21ea82cf82b80b) chore(package): update ava to version 0.25.0 (#&#8203;569)
-   [`638e433`](https://github.com/babel/babel-loader/commit/638e433da39c6638fd5f560f534ecec42c6c7768) Update readme.md (#&#8203;566)
-   [`23b3b97`](https://github.com/babel/babel-loader/commit/23b3b97b19dc5926a2e87ec4cc002b5c8aaf487c) fix compatibility with @&#8203;babel/core option check when inputSourceMap null (#&#8203;538)
-   [`7bf66bd`](https://github.com/babel/babel-loader/commit/7bf66bd710d7461c9288f539ceb5734c15ca4a86) docs(README): document babelrc option (#&#8203;442)
-   [`19caf69`](https://github.com/babel/babel-loader/commit/19caf69d71498362950c67f8608965def4dd7f2b) fix(babel): Update to latest babel version and fix babelrc behaviour (#&#8203;583)
-   [`552bdce`](https://github.com/babel/babel-loader/commit/552bdce759c40b138a335b18bf42afbd4f33ea42) refactor(src/Error): move `LoaderError` to separate file
-   [`be187cd`](https://github.com/babel/babel-loader/commit/be187cd0d45f5bacf29db0dd9d2094147f73d173) refactor(src/transform): move `transform` helper to separate file
-   [`27f44f8`](https://github.com/babel/babel-loader/commit/27f44f8a7bbf0079673ae50bb31cb84e22b764ae) style(src): modernize code
-   [`85bd8b7`](https://github.com/babel/babel-loader/commit/85bd8b7776db484d0d377a012049af6151b474ad) feat(src/cache): use async `transform` (`babel.transfrom`)
-   [`2109b8e`](https://github.com/babel/babel-loader/commit/2109b8ea4f92fbb3ed49bc725b5bcc55daffac14) feat(src/index): use async `transform` (`babel.transfrom`)
-   [`c1d2f83`](https://github.com/babel/babel-loader/commit/c1d2f83e3456eefbe6bc960631148a1c13223c38) chore(package): update `peerDependencies` &amp;&amp; `devDependencies`
-   [`537226d`](https://github.com/babel/babel-loader/commit/537226d9ad012e9c86a5577e215082a37ce1b3f8) Merge pull request #&#8203;584 from babel/michael-ciniawsky-feat
-   [`64dff0d`](https://github.com/babel/babel-loader/commit/64dff0db250983660f27d9ec89604970d7d79c38) Run tests with webpack 4 and fix them (#&#8203;585)
-   [`c436141`](https://github.com/babel/babel-loader/commit/c43614112dc0d1dda949d0ae9802a34152f7bca9) Update lint-staged

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-25T17:23:30Z,NONE,True,8,8,2,,JavaScript,343e53315309c7c40adcd45dd98ce7f0166f797b,Update dependency babel-loader to v7.1.3
131,https://api.github.com/repos/mozilla/distribution-viewer/pulls/354,354,Update babel-loader to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **7.1.3** of [babel-loader](https://github.com/babel/babel-loader) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      babel-loader
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      7.1.2
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **7.1.3** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of babel-loader.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Release Notes</summary>
<strong>7.1.3</strong>

<h3><g-emoji class=""g-emoji"" alias=""bug"" fallback-src=""https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png"">🐛</g-emoji> Bug Fix</h3>
<ul>
<li>Support webpack 4</li>
</ul>
</details>

<details>
<summary>Commits</summary>
<p>The new version differs by 7 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/d51e63557006d4c6ae1c06a248bbd3f2319a8566""><code>d51e635</code></a> <code>7.1.3</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/ba8a846d219e075e4f461962e4199d62322c18cb""><code>ba8a846</code></a> <code>Fix appveyor config</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/3102137195909e7b30f4b515fe99f1effad77a4d""><code>3102137</code></a> <code>Fix peer dependencies</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/81700809c5dc4cf4f41f3fa2a8d96ba6e166d651""><code>8170080</code></a> <code>Run tests with webpack 4 and fix them</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/b9f4d605fc237288683629ed6fab101f589ce0a5""><code>b9f4d60</code></a> <code>Update ava to the latest version 🚀 (#520)</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/d7de2264ac6aa945567a872a4f1c492c5ed8d886""><code>d7de226</code></a> <code>Update react to the latest version 🚀 (#516)</code></li>
<li><a href=""https://urls.greenkeeper.io/babel/babel-loader/commit/dff4a449d326304bdce83b0dcd96d552e8a25311""><code>dff4a44</code></a> <code>Update babel-eslint to the latest version 🚀 (#510)</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/babel/babel-loader/compare/1ca5c7856d2129a28d6ba031bd8a5759aa80b8eb...d51e63557006d4c6ae1c06a248bbd3f2319a8566"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-25T17:20:26Z,NONE,False,1,1,1,,JavaScript,9f305eef5db894c7766cbf8abd849b5e186f1af7,fix(package): update babel-loader to version 7.1.3
132,https://api.github.com/repos/mozilla/distribution-viewer/pulls/353,353,Update sinon to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **4.4.1** of [sinon](https://github.com/sinonjs/sinon) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      sinon
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      4.4.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **4.4.1** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of sinon.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 9 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/c105a4630d3ffe729aa9a2b10081839b2c16d95c""><code>c105a46</code></a> <code>Update docs/changelog.md and set new release id in docs/_config.yml</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/432a284688639cdfad7190ba404f4767c021717e""><code>432a284</code></a> <code>Add release documentation for v4.4.1</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/9b4870e6522e882560a87656e7590bc11f4b28da""><code>9b4870e</code></a> <code>4.4.1</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/a14d96f08f9acefc4fc8d2a1061c57e58c2cbd6c""><code>a14d96f</code></a> <code>Update History.md and AUTHORS for new release</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/ae22a33c2a44745220109c6de592db0ed2024867""><code>ae22a33</code></a> <code>merge doc changes to released versions</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/4cf8a830ad6e4d6d22ef772e90072e6567907ba1""><code>4cf8a83</code></a> <code>correct eslint statements</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/7380a034e1faa88902b94e2c9374f611a27882cb""><code>7380a03</code></a> <code>add tests to verify asserts on spyCalls</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/6e7e71fc8d39d57fd6198354f0df5c5f29f10855""><code>6e7e71f</code></a> <code>Update docs</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/cbc5667d1b1cc2d2afc49d23334288cd63f304bb""><code>cbc5667</code></a> <code>Document that it is allowed to assert on dedicated spy calls.</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/sinonjs/sinon/compare/78b21929044dcd71f9d26976951ad9b067906ff0...c105a4630d3ffe729aa9a2b10081839b2c16d95c"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-24T08:28:10Z,NONE,False,1,1,1,,JavaScript,da1824f1340dd7ce8b7e980f3e0b7a7a6b810a16,fix(package): update sinon to version 4.4.1
133,https://api.github.com/repos/mozilla/distribution-viewer/pulls/352,352,Update dependency sinon to v4.4.2,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.4.0` to `v4.4.2`




<details>
<summary>Commits</summary>

#### v4.4.1
-   [`cbc5667`](https://github.com/sinonjs/sinon/commit/cbc5667d1b1cc2d2afc49d23334288cd63f304bb) Document that it is allowed to assert on dedicated spy calls.
-   [`6e7e71f`](https://github.com/sinonjs/sinon/commit/6e7e71fc8d39d57fd6198354f0df5c5f29f10855) Update docs
-   [`7380a03`](https://github.com/sinonjs/sinon/commit/7380a034e1faa88902b94e2c9374f611a27882cb) add tests to verify asserts on spyCalls
-   [`4cf8a83`](https://github.com/sinonjs/sinon/commit/4cf8a830ad6e4d6d22ef772e90072e6567907ba1) correct eslint statements
-   [`ae22a33`](https://github.com/sinonjs/sinon/commit/ae22a33c2a44745220109c6de592db0ed2024867) merge doc changes to released versions
-   [`a14d96f`](https://github.com/sinonjs/sinon/commit/a14d96f08f9acefc4fc8d2a1061c57e58c2cbd6c) Update History.md and AUTHORS for new release
-   [`9b4870e`](https://github.com/sinonjs/sinon/commit/9b4870e6522e882560a87656e7590bc11f4b28da) 4.4.1
-   [`432a284`](https://github.com/sinonjs/sinon/commit/432a284688639cdfad7190ba404f4767c021717e) Add release documentation for v4.4.1
-   [`c105a46`](https://github.com/sinonjs/sinon/commit/c105a4630d3ffe729aa9a2b10081839b2c16d95c) Update docs/changelog.md and set new release id in docs/_config.yml
#### v4.4.2
-   [`5a2f19f`](https://github.com/sinonjs/sinon/commit/5a2f19fbbd449b8a91aa4c1091f041aeac76f0b9) Add descriptive error message on attempt to call argument that is not a function
-   [`e0bfd43`](https://github.com/sinonjs/sinon/commit/e0bfd430efe039961f1b4ced07c4bed3b9d1085e) Update History.md and AUTHORS for new release
-   [`5ac4eae`](https://github.com/sinonjs/sinon/commit/5ac4eae04ff56dcb1324e80a14dbd1e4b0b169f9) 4.4.2
-   [`2075fda`](https://github.com/sinonjs/sinon/commit/2075fda45782f764db59d1456795be390678ee0a) Add release documentation for v4.4.2
-   [`99ef3fa`](https://github.com/sinonjs/sinon/commit/99ef3fabcea01117dbe9c2510ae81df408c22772) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-24T08:22:06Z,NONE,True,4,4,2,,JavaScript,35fc0e3188ff2013ee0f09e3de4968cbb7682241,Update dependency sinon to v4.4.2
134,https://api.github.com/repos/mozilla/distribution-viewer/pulls/351,351,Update uglifyjs-webpack-plugin to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **1.2.2** of [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      uglifyjs-webpack-plugin
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      1.2.1
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **1.2.2** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of uglifyjs-webpack-plugin.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Release Notes</summary>
<strong>v1.2.2</strong>

<h2><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/compare/v1.2.1...v1.2.2"">2018-02-24</a></h2>
<h3><code>Bug Fixes</code></h3>
<ul>
<li><strong>index:</strong> typo <code>buildMobule</code> =&gt; <code>buildModule</code> (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/issues/242"">#242</a>) (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/259adad"">259adad</a>)</li>
<li><strong>package:</strong> add <code>webpack &gt;= v4.0.0</code> (<code>peerDependencies</code>) (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/issues/239"">#239</a>) (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/4c7f80a"">4c7f80a</a>)</li>
</ul>
</details>

<details>
<summary>Commits</summary>
<p>The new version differs by 3 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/9f66276c47114572178ea991a244e9073e07a9c0""><code>9f66276</code></a> <code>chore(release): 1.2.2</code></li>
<li><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/259adad54aed33479db96ae6df867c5b03fb95d9""><code>259adad</code></a> <code>fix(index): typo <code>buildMobule</code> =&gt; <code>buildModule</code> (#242)</code></li>
<li><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/4c7f80a76fd0be2defb3d1186778184bbbbba914""><code>4c7f80a</code></a> <code>fix(package): add <code>webpack &gt;= v4.0.0</code> (<code>peerDependencies</code>) (#239)</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/compare/d460f693bc8b9f25c1f1709e1a728e4571501c9c...9f66276c47114572178ea991a244e9073e07a9c0"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-24T01:33:08Z,NONE,False,1,1,1,,JavaScript,ae99110f69ee8c7bdf0b8a723773c7ae9cf7a6ed,fix(package): update uglifyjs-webpack-plugin to version 1.2.2
135,https://api.github.com/repos/mozilla/distribution-viewer/pulls/350,350,Update dependency uglifyjs-webpack-plugin to v1.2.2,"This Pull Request updates dependency [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) from `v1.2.1` to `v1.2.2`



<details>
<summary>Release Notes</summary>

### [`v1.2.2`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/releases/v1.2.2)

##### `Bug Fixes`

* **index:** typo `buildMobule` => `buildModule` ([#&#8203;242](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/242`)) ([259adad](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/259adad))
* **package:** add `webpack >= v4.0.0` (`peerDependencies`) ([#&#8203;239](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/239`)) ([4c7f80a](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/4c7f80a))

---

</details>


<details>
<summary>Commits</summary>

#### v1.2.2
-   [`4c7f80a`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/4c7f80a76fd0be2defb3d1186778184bbbbba914) fix(package): add `webpack &gt;&#x3D; v4.0.0` (`peerDependencies`) (#&#8203;239)
-   [`259adad`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/259adad54aed33479db96ae6df867c5b03fb95d9) fix(index): typo `buildMobule` &#x3D;&gt; `buildModule` (#&#8203;242)
-   [`9f66276`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/9f66276c47114572178ea991a244e9073e07a9c0) chore(release): 1.2.2

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-24T01:29:18Z,NONE,True,4,4,2,,JavaScript,ec5b860354ed54a641b48be7adb639297522b62b,Update dependency uglifyjs-webpack-plugin to v1.2.2
136,https://api.github.com/repos/mozilla/distribution-viewer/pulls/349,349,Update uglifyjs-webpack-plugin to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **1.2.1** of [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      uglifyjs-webpack-plugin
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      1.2.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **1.2.1** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of uglifyjs-webpack-plugin.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Release Notes</summary>
<strong>v1.2.1</strong>

<h2><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/compare/v1.2.0...v1.2.1"">2018-02-23</a></h2>
<h3><code>Bug Fixes</code></h3>
<ul>
<li><strong>index:</strong> <code>tapable</code> deprecation warnings (<code>webpack &gt;= v4.0.0</code>) (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/issues/238"">#238</a>) (<a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/23b1b38"">23b1b38</a>)</li>
</ul>
</details>

<details>
<summary>Commits</summary>
<p>The new version differs by 2 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/d460f693bc8b9f25c1f1709e1a728e4571501c9c""><code>d460f69</code></a> <code>chore(release): 1.2.1</code></li>
<li><a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/commit/23b1b38003953c2952879b5613ef7bafa9678c3c""><code>23b1b38</code></a> <code>fix(index): <code>tapable</code> deprecation warnings (<code>webpack &gt;= v4.0.0</code>) (#238)</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/webpack-contrib/uglifyjs-webpack-plugin/compare/99240e89d61002c7de0b70bf90137d0c4122b03e...d460f693bc8b9f25c1f1709e1a728e4571501c9c"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-23T19:09:53Z,NONE,False,1,1,1,,JavaScript,9ca3b9cbc6a44d270f2e2970ce74ab95c58b1404,fix(package): update uglifyjs-webpack-plugin to version 1.2.1
137,https://api.github.com/repos/mozilla/distribution-viewer/pulls/348,348,Update dependency uglifyjs-webpack-plugin to v1.2.1,"This Pull Request updates dependency [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) from `v1.2.0` to `v1.2.1`



<details>
<summary>Release Notes</summary>

### [`v1.2.1`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/releases/v1.2.1)

##### `Bug Fixes`

* **index:** `tapable` deprecation warnings (`webpack >= v4.0.0`) ([#&#8203;238](`https://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/238`)) ([23b1b38](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/23b1b38))

---

</details>


<details>
<summary>Commits</summary>

#### v1.2.1
-   [`23b1b38`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/23b1b38003953c2952879b5613ef7bafa9678c3c) fix(index): `tapable` deprecation warnings (`webpack &gt;&#x3D; v4.0.0`) (#&#8203;238)
-   [`d460f69`](https://github.com/webpack-contrib/uglifyjs-webpack-plugin/commit/d460f693bc8b9f25c1f1709e1a728e4571501c9c) chore(release): 1.2.1

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-23T19:07:30Z,NONE,True,25,18,2,,JavaScript,249c089e9ac5192dc336e65165001508d68de9d1,Update dependency uglifyjs-webpack-plugin to v1.2.1
138,https://api.github.com/repos/mozilla/distribution-viewer/pulls/347,347,Update dependency sinon to v4.4.0,"This Pull Request updates dependency [sinon](https://github.com/sinonjs/sinon) from `v4.3.0` to `v4.4.0`




<details>
<summary>Commits</summary>

#### v4.4.0
-   [`2c2bc0d`](https://github.com/sinonjs/sinon/commit/2c2bc0dbd2e4ed6666bdfd75fc6fc9a0fd30ab44) Added comma, for clarity
-   [`b81d20f`](https://github.com/sinonjs/sinon/commit/b81d20f4a8888c8200d9d97e9d26640981e62ecb) Change return value of yield and callArg
-   [`9f0615e`](https://github.com/sinonjs/sinon/commit/9f0615e2768c5049d072a4d6eb621967e9c71e89) Update History.md and AUTHORS for new release
-   [`a50f759`](https://github.com/sinonjs/sinon/commit/a50f7594e74b57c2d087045d00a4a95a5c926952) 4.4.0
-   [`1f3b7dc`](https://github.com/sinonjs/sinon/commit/1f3b7dc3ab16fe25d0a0a1a887e11869e5ebc0b5) Add release documentation for v4.4.0
-   [`78b2192`](https://github.com/sinonjs/sinon/commit/78b21929044dcd71f9d26976951ad9b067906ff0) Update docs/changelog.md and set new release id in docs/_config.yml

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-23T09:40:01Z,NONE,True,4,4,2,,JavaScript,e1868ac312015f81e10de7facb32bdeddca43ea6,Update dependency sinon to v4.4.0
139,https://api.github.com/repos/mozilla/distribution-viewer/pulls/346,346,Update sinon to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **4.4.0** of [sinon](https://github.com/sinonjs/sinon) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      sinon
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      4.3.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **4.4.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of sinon.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 6 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/78b21929044dcd71f9d26976951ad9b067906ff0""><code>78b2192</code></a> <code>Update docs/changelog.md and set new release id in docs/_config.yml</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/1f3b7dc3ab16fe25d0a0a1a887e11869e5ebc0b5""><code>1f3b7dc</code></a> <code>Add release documentation for v4.4.0</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/a50f7594e74b57c2d087045d00a4a95a5c926952""><code>a50f759</code></a> <code>4.4.0</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/9f0615e2768c5049d072a4d6eb621967e9c71e89""><code>9f0615e</code></a> <code>Update History.md and AUTHORS for new release</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/b81d20f4a8888c8200d9d97e9d26640981e62ecb""><code>b81d20f</code></a> <code>Change return value of yield and callArg</code></li>
<li><a href=""https://urls.greenkeeper.io/sinonjs/sinon/commit/2c2bc0dbd2e4ed6666bdfd75fc6fc9a0fd30ab44""><code>2c2bc0d</code></a> <code>Added comma, for clarity</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/sinonjs/sinon/compare/f7139e71c562f14810cc33a75673a043174ac61a...78b21929044dcd71f9d26976951ad9b067906ff0"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-23T09:37:50Z,NONE,False,1,1,1,,JavaScript,6dab81d3efc45fb94fc09daf20b69b93c91a241a,fix(package): update sinon to version 4.4.0
140,https://api.github.com/repos/mozilla/distribution-viewer/pulls/344,344,Update dependency striptags to v3,"This Pull Request updates dependency [striptags](https://github.com/ericnorris/striptags) from `v2.2.1` to `v3.1.1`



<details>
<summary>Release Notes</summary>

### [`v3.0.0`](https://github.com/ericnorris/striptags/releases/v3.0.0)

Completely rewritten from the ground up, using some of Node v4+ javascript features. Changes around the state machine aspect should mean an increase in speed.

Now features a streaming mode, where partial HTML can be pumped into a function and stripped HTML is returned.

---

</details>


<details>
<summary>Commits</summary>

#### v3.0.0
-   [`dd1ed03`](https://github.com/ericnorris/striptags/commit/dd1ed035b40e726ac8d5583605dea2276b92d684) Rewrite core module.
-   [`969cebd`](https://github.com/ericnorris/striptags/commit/969cebd0085f3c247f7da8f90d948c8356b34fd8) Move module back into src/ directory.
-   [`86e95d2`](https://github.com/ericnorris/striptags/commit/86e95d223b1c120e76c30e0fb2e754105b3190b7) Remove HTML test coverage command and JSHint config.
-   [`adf53b6`](https://github.com/ericnorris/striptags/commit/adf53b6c4c17dad951d27b0c8f2c83afd72543ee) Update mocha version and rewrite tests.
-   [`eb4d1f0`](https://github.com/ericnorris/striptags/commit/eb4d1f0a85cdab381fed14154d27df425e7079d0) Add test for streaming mode w/ allowable_tags.
-   [`9d9a804`](https://github.com/ericnorris/striptags/commit/9d9a8049c812ee42f94f295a7230d45053cd5082) Update README.md
-   [`cd53825`](https://github.com/ericnorris/striptags/commit/cd538252a7a8e7cad5e5649843f66e8185ec902e) v3.0.0
#### v3.0.1
-   [`517fd77`](https://github.com/ericnorris/striptags/commit/517fd77bdb8c282b6a9b5aa7d92f61a6d4a7e390) Fix AMD bindings and fix AMD test.
-   [`7427951`](https://github.com/ericnorris/striptags/commit/742795158765afe0bbcd7fe34739739cf0da1325) v3.0.1
#### v3.1.0
-   [`7179485`](https://github.com/ericnorris/striptags/commit/7179485e95f73fd5f06f33846e3acfff21e3d3f7) Add notice about uglifyjs issues
-   [`5eb9357`](https://github.com/ericnorris/striptags/commit/5eb9357586e73267142a7b260b91cb62e27daa2a) Fix typo in README.md
-   [`9ed9eb0`](https://github.com/ericnorris/striptags/commit/9ed9eb07fbae46aca20f397dc9181f3feb87432c) Add IE11 support using minimal polyfill
-   [`94ceaf6`](https://github.com/ericnorris/striptags/commit/94ceaf6dc5df7c51c0890b072ff1e60e1bc90a82) v3.1.0
#### v3.1.1
-   [`f80b3b8`](https://github.com/ericnorris/striptags/commit/f80b3b8079c186e847266bd38fe31048913ccd41) add typings
-   [`127f2fb`](https://github.com/ericnorris/striptags/commit/127f2fbb585228b5a900a71abe7337b0a38699c8) v3.1.1

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-23T01:24:39Z,NONE,False,4,4,2,,JavaScript,fe27c181659f7cb97416d067f0e50739d3834384,Update dependency striptags to v3.1.1
141,https://api.github.com/repos/mozilla/distribution-viewer/pulls/343,343,Update dependency react-router to v4,"This Pull Request updates dependency [react-router](https://github.com/ReactTraining/react-router) from `v3.2.0` to `v4.2.0`



<details>
<summary>Release Notes</summary>

### [`v4.0.0`](https://github.com/ReactTraining/react-router/releases/v4.0.0)

> Mar 10, 2017

- Released! No code changes from 4.0.0-beta.8

---

### [`v4.1.0`](https://github.com/ReactTraining/react-router/releases/v4.1.0)

> Apr 11, 2017

- Add `wrappedComponent` to the component returned by `withRouter`
- Add `wrappedComponentRef` prop to the component returned by `withRouter`
- Add non-react static methods and properties of the wrapped component to the component returned by `withRouter`

---

### [`v4.1.1`](https://github.com/ReactTraining/react-router/releases/v4.1.1)

> Apr 12, 2017

- Fixes for the various PropTypes related issues. 

Note: This work is still ongoing, as the React team still has some outstanding issues to figure out themselves. Keep an eye on [this issue](`https://github.com/facebook/react/issues/9398`) and [the `prop-types` repo](https://github.com/reactjs/prop-types) for updates as we all work through this craziness.

---

### [`v4.2.0`](https://github.com/ReactTraining/react-router/releases/v4.2.0)

> Aug 23, 2017

- Re-run Redirect on props update ([#&#8203;5162] by @&#8203;alexilyaev)
- Prevent remounts on routes with the same component in renderRoutes ([#&#8203;5430] by @&#8203;artywhite)
- Case sensitive routes ([#&#8203;5438] by @&#8203;paustria)
- Use direct imports in platform packages ([#&#8203;5095] by @&#8203;ruiaraujo)
- Add optional otherProps argument renderRoutes ([#&#8203;5137] by @&#8203;jharris4)
- Bump hoist-non-react-statics ([#&#8203;5347] by @&#8203;roderickhsiao)
- 3x build speed improvements on CI ([ea1212a] by @&#8203;timdorr)
- Use Jest for testing ([172dc16] by @&#8203;mjackson)
- Explicit error using Route outside of Router ([#&#8203;4939] by @&#8203;eXon)
- react-router-native Link improvements ([#&#8203;4816] by @&#8203;benstepp)
- aria-current on NavLink ([#&#8203;4708] by @&#8203;JasonEtco)
- Make AndroidBackButton a generic BackButton component ([#&#8203;5295] by @&#8203;DonnieWest)
- Access Link's underlying node via innerRef ([#&#8203;5294] by @&#8203;danielberndt)
- Return null from react-router-native DeepLinking if children is undefined ([#&#8203;5278] by @&#8203;seekshiva)
- Warn when using the history prop on a pre-configured Router ([#&#8203;5151] by @&#8203;Aprillion)
- Fix memory leak in ConnectedRouter during server side rendering ([#&#8203;5203] by @&#8203;klis87)
- Reorder NavLink activeClassName/className priority ([#&#8203;5109] by @&#8203;carloluis)
- Change react-native BackAndroid to BackHandler ([#&#8203;5093] by @&#8203;SeanGroff)
- Fix react-router-native StackRouter ([#&#8203;5071] by @&#8203;kafein)

[ea1212a]: https://github.com/ReactTraining/react-router/commit/ea1212a
[172dc16]: https://github.com/ReactTraining/react-router/commit/172dc16
[#&#8203;5162]: `https://github.com/ReactTraining/react-router/pull/5162`
[#&#8203;5430]: `https://github.com/ReactTraining/react-router/pull/5430`
[#&#8203;5438]: `https://github.com/ReactTraining/react-router/pull/5438`
[#&#8203;5095]: `https://github.com/ReactTraining/react-router/pull/5095`
[#&#8203;5137]: `https://github.com/ReactTraining/react-router/pull/5137`
[#&#8203;5347]: `https://github.com/ReactTraining/react-router/pull/5347`
[#&#8203;4939]: `https://github.com/ReactTraining/react-router/pull/4939`
[#&#8203;4816]: `https://github.com/ReactTraining/react-router/pull/4816`
[#&#8203;4708]: `https://github.com/ReactTraining/react-router/pull/4708`
[#&#8203;5295]: `https://github.com/ReactTraining/react-router/pull/5295`
[#&#8203;5294]: `https://github.com/ReactTraining/react-router/pull/5294`
[#&#8203;5278]: `https://github.com/ReactTraining/react-router/pull/5278`
[#&#8203;5151]: `https://github.com/ReactTraining/react-router/pull/5151`
[#&#8203;5203]: `https://github.com/ReactTraining/react-router/pull/5203`
[#&#8203;5109]: `https://github.com/ReactTraining/react-router/pull/5109`
[#&#8203;5093]: `https://github.com/ReactTraining/react-router/pull/5093`
[#&#8203;5071]: `https://github.com/ReactTraining/react-router/pull/5071`

---

</details>




---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-23T00:23:08Z,NONE,False,22,42,2,,JavaScript,bb198a98181752b1641c518b523385c71580a161,Update dependency react-router to v4.2.0
142,https://api.github.com/repos/mozilla/distribution-viewer/pulls/342,342,Update jest monorepo packages,"This Pull Request renovates the package group ""jest monorepo"".


-   [jest-cli](https://github.com/facebook/jest): from `22.3.0` to `22.4.2`
-   [babel-jest](https://github.com/facebook/jest): from `22.2.2` to `22.4.1`

# Release Notes
<details>
<summary>facebook/jest</summary>

### [`v22.4.0`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2240)

##### Fixes

* `[jest-haste-map]` Overhauls how Watchman crawler works fixing Windows
  ([#&#8203;5615](`https://github.com/facebook/jest/pull/5615`))
* `[expect]` Allow matching of Errors against plain objects
  ([#&#8203;5611](`https://github.com/facebook/jest/pull/5611`))
* `[jest-haste-map]` Do not read binary files in Haste, even when instructed to
  do so ([#&#8203;5612](`https://github.com/facebook/jest/pull/5612`))
* `[jest-cli]` Don't skip matchers for exact files
  ([#&#8203;5582](`https://github.com/facebook/jest/pull/5582`))
* `[docs]` Update discord links
  ([#&#8203;5586](`https://github.com/facebook/jest/pull/5586`))
* `[jest-runtime]` Align handling of testRegex on Windows between searching for
  tests and instrumentation checks
  ([#&#8203;5560](`https://github.com/facebook/jest/pull/5560`))
* `[jest-config]` Make it possible to merge `transform` option with preset
  ([#&#8203;5505](`https://github.com/facebook/jest/pull/5505`))
* `[jest-util]` Fix `console.assert` behavior in custom & buffered consoles
  ([#&#8203;5576](`https://github.com/facebook/jest/pull/5576`))
##### Features

* `[docs]` Add MongoDB guide
  ([#&#8203;5571](`https://github.com/facebook/jest/pull/5571`))
* `[jest-runtime]` Deprecate mapCoverage option.
  ([#&#8203;5177](`https://github.com/facebook/jest/pull/5177`))
* `[babel-jest]` Add option to return sourcemap from the transformer separately
  from source. ([#&#8203;5177](`https://github.com/facebook/jest/pull/5177`))
* `[jest-validate]` Add ability to log deprecation warnings for CLI flags.
  ([#&#8203;5536](`https://github.com/facebook/jest/pull/5536`))
* `[jest-serializer]` Added new module for serializing. Works using V8 or JSON
  ([#&#8203;5609](`https://github.com/facebook/jest/pull/5609`))
* `[docs]` Add a documentation note for project `displayName` configuration
  ([#&#8203;5600](`https://github.com/facebook/jest/pull/5600`))
### Chore & Maintenance

* `[docs]` Update automatic mocks documentation
  ([#&#8203;5630](`https://github.com/facebook/jest/pull/5630`))

---

### [`v22.4.1`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2241)

##### Fixes

* `[jest-haste-map]` Parallelize Watchman calls in crawler
  ([#&#8203;5640](`https://github.com/facebook/jest/pull/5640`))
* `[jest-editor-support]` Update TypeScript definitions
  ([#&#8203;5625](`https://github.com/facebook/jest/pull/5625`))
* `[babel-jest]` Remove `retainLines` argument to babel.
  ([#&#8203;5594](`https://github.com/facebook/jest/pull/5594`))
##### Features

* `[jest-runtime]` Provide `require.main` property set to module with test suite
  ([#&#8203;5618](`https://github.com/facebook/jest/pull/5618`))
##### Chore & Maintenance

* `[docs]` Add note about Node version support
  ([#&#8203;5622](`https://github.com/facebook/jest/pull/5622`))
* `[docs]` Update to use yarn
  ([#&#8203;5624](`https://github.com/facebook/jest/pull/5624`))
* `[docs]` Add how to mock scoped modules to Manual Mocks doc
  ([#&#8203;5638](`https://github.com/facebook/jest/pull/5638`))

---

### [`v22.4.2`](https://github.com/facebook/jest/blob/master/CHANGELOG.md#&#8203;2242)

##### Fixes

* `[jest-haste-map]` Recreate Haste map when deserialization fails
  ([#&#8203;5642](`https://github.com/facebook/jest/pull/5642`))

---


</details>

# Commits

<details>
<summary>facebook/jest</summary>

#### v22.4.0
-   [`5f8ad63`](https://github.com/facebook/jest/commit/5f8ad6379ac3962cc1eb9ce25eef6f3e8fc241e0)Release v22.3.0
-   [`c5fbd30`](https://github.com/facebook/jest/commit/c5fbd304c462e3c74c6cc5f5e7484e466c10521e)Use native trim instead of regexp (#&#8203;5555)
-   [`5b00d97`](https://github.com/facebook/jest/commit/5b00d9785015f699d0207b95770916d28cf78271)Fix jest-circus setup logic (#&#8203;5561)
-   [`1ee7df9`](https://github.com/facebook/jest/commit/1ee7df960e039a4f9033fcccfa471c1c47ccd81c)Optimize finding top frame in formatPaths (#&#8203;5557)
-   [`84e9789`](https://github.com/facebook/jest/commit/84e97893cb744639a74e7ffa9d099e995bd6c4f2)Fix typo in JestObjectAPI.md (#&#8203;5559)
-   [`4ca959b`](https://github.com/facebook/jest/commit/4ca959b041dcf6f2fe44fdebd7f86a4e0509e185)Revert setRawMode on --watch quit (fixes #&#8203;5028) (#&#8203;5029)
-   [`10276f9`](https://github.com/facebook/jest/commit/10276f90b264f8e02b2bb3b4f619095ac63cd59c)Standardize file names in integration-tests (#&#8203;5513)
-   [`c35b78b`](https://github.com/facebook/jest/commit/c35b78b7c0e6f7944b5b52392efdb09abc860570)Use v8.serialize when available (#&#8203;5565)
-   [`9d11ec4`](https://github.com/facebook/jest/commit/9d11ec4ee111df8a0925f34abb0a86e8920d59c7)Optimize getting stack trace in message-util (#&#8203;5569)
-   [`71795a5`](https://github.com/facebook/jest/commit/71795a5bb07e877084ccf87f9826ba9176f65a8c)Use native trimLeft, trimRight instead of regexp (#&#8203;5570)
-   [`146900f`](https://github.com/facebook/jest/commit/146900f5d36691ab706aafee19e747a4de6cdd71)Replace path sep for testRegex in should_instrument (#&#8203;5560)
-   [`b9b1f0d`](https://github.com/facebook/jest/commit/b9b1f0d0709c2948bf5c5d198c0c54b904218b2b)Update TutorialReactNative.md (#&#8203;5567)
-   [`fcdf071`](https://github.com/facebook/jest/commit/fcdf071955cf9ee4007226f15c91d7e483346973)docs: add jest-mongodb example (#&#8203;5571)
-   [`d065e87`](https://github.com/facebook/jest/commit/d065e87a2322e1b4b70e7ba9de3c24aed7a2ea72)Issue #&#8203;5197: Add descriptive error to Expect CalledWith methods when missing optional arguments (#&#8203;5547)
-   [`966aab6`](https://github.com/facebook/jest/commit/966aab60faa1b0a8cfdd51b95bcca780c68001d7)Removing the mapCoverage condition on reading inlineSourceMaps. (#&#8203;5177)
-   [`ba8a2d5`](https://github.com/facebook/jest/commit/ba8a2d5ccfb96987b30d9b808bf0961eae89d67b)Print deprecation warnings on CLI flags (#&#8203;5536)
-   [`0285e63`](https://github.com/facebook/jest/commit/0285e63e903abbab9c323341e62eb68b29acd87e)Simplify check for -0 in printNumber (#&#8203;5581)
-   [`e4f7d84`](https://github.com/facebook/jest/commit/e4f7d84568c16f692b08c954183ca524c14eced1)Update discord links, lint markdown (#&#8203;5586)
-   [`4d4bc67`](https://github.com/facebook/jest/commit/4d4bc671297ad603cba38827f041eaef0c56f078)chore(website): Upgrade docusaurus to 1.0.6 (#&#8203;5587)
-   [`950b2e7`](https://github.com/facebook/jest/commit/950b2e7825f872e54e9e639de64b8c7bab16642f)Don&#x27;t skip configured matchers for exact file names (#&#8203;5582)
-   [`430aebe`](https://github.com/facebook/jest/commit/430aebe49e9f144d29f144f5a29482315e269e4a)Simplify check -0 in jasmine-utils (#&#8203;5592)
-   [`3a86707`](https://github.com/facebook/jest/commit/3a8670703af15d7371d6b5ee5c2e2ec3c0bf1f46)chore: make no-unused-vars eslint rule error (#&#8203;5598)
-   [`e89de4e`](https://github.com/facebook/jest/commit/e89de4e6a9bbe72fb5ba86f254b55c9b3b220af3)Make it possible to merge `transform` option with preset (#&#8203;5505)
-   [`4e4a9e0`](https://github.com/facebook/jest/commit/4e4a9e0fca190d0eafd4757a09eb1e3c9d35d00a)add a documentation note for project displayName configuration (#&#8203;5600)
-   [`71c31d7`](https://github.com/facebook/jest/commit/71c31d76be116764b44dff0318d5c4d7ae8300f1)docs: link to full list of matchers in opening paragraph (#&#8203;5606)
-   [`402a6fe`](https://github.com/facebook/jest/commit/402a6feb7a6db7124c9802901232e973458e5d4c)chore(deps): upgrade flow to 0.66 (#&#8203;5602)
-   [`e2bb8f4`](https://github.com/facebook/jest/commit/e2bb8f41c925c65ab13ad7c935692abce41cc64e)Optimize print calls in spy matches (#&#8203;5596)
-   [`0b88438`](https://github.com/facebook/jest/commit/0b8843836fdb627b84ceab79eb170bf162a1207c)url and name fix (#&#8203;5608)
-   [`f5879c0`](https://github.com/facebook/jest/commit/f5879c061313f287446e43cb6f1fbd79d7cefe5e)fix: make Errors match with ordinary objects (fixes #&#8203;5359) (#&#8203;5611)
-   [`9c0912c`](https://github.com/facebook/jest/commit/9c0912cf4ca66dcf720d3b37b4d36baf6f712aac)fix: correcting a mislabeled CHANGELOG.md entry (#&#8203;5614)
-   [`bea889c`](https://github.com/facebook/jest/commit/bea889c9d8ccb74dc148380b4ab4b649746ea0ef)Avoid loading files that we know are binary ahead of time (#&#8203;5612)
-   [`3a2854a`](https://github.com/facebook/jest/commit/3a2854aeca669b6cd82139de23333fa18fce7c6c)Add jest-serializer module (#&#8203;5609)
-   [`adbd927`](https://github.com/facebook/jest/commit/adbd927987b7a4cbd937464ab038b6ee29d83554)fix(watchman): Overhauls how Watchman crawler works fixing Windows (#&#8203;5615)
-   [`593d801`](https://github.com/facebook/jest/commit/593d801340f93222f567576204dd32bc08272bd4)fix console &amp; buffered console assert behaviour (#&#8203;5576)
-   [`9df3035`](https://github.com/facebook/jest/commit/9df3035829299a93579bad8cfb1db2081617ea6e)Explain manual mocking modules (#&#8203;5616)

#### v22.4.1
-   [`acb7f64`](https://github.com/facebook/jest/commit/acb7f64ba0eb1b4a7a3801a01977cf1bb2a54e72)Release v22.4.0
-   [`4576dd4`](https://github.com/facebook/jest/commit/4576dd4ea448bfb2501cd1a664dca2aaa84e9187)Provide `require.main` property (#&#8203;5618)
-   [`da90886`](https://github.com/facebook/jest/commit/da908862ad5a28155ca7901f8443033e17c8d9ec)Add note about Node version support in README and docs. Fixes #&#8203;4947 (#&#8203;5622)
-   [`6ee2a14`](https://github.com/facebook/jest/commit/6ee2a14b83393c9e3e3408beb5c4848489f04cf6)Update to docs to use yarn (#&#8203;5624)
-   [`79533a9`](https://github.com/facebook/jest/commit/79533a90aefc94d0ee6029a7c6ab97071b2c6b1c)Small polish to the plugins API (#&#8203;5572)
-   [`ca8910f`](https://github.com/facebook/jest/commit/ca8910f3b2b7cd57e34ec8e2b6dea684a882160f)Remove debug snapshot (#&#8203;5627)
-   [`7bcdc8c`](https://github.com/facebook/jest/commit/7bcdc8c2305c06204f23da615590145c8db6f19b)Examples/standardize folder names (#&#8203;5626)
-   [`6ab04b7`](https://github.com/facebook/jest/commit/6ab04b79e8f70b5f3e6a6d0d0f8874e72d73070e)add versioned documentation to the website (#&#8203;5541)
-   [`23eec74`](https://github.com/facebook/jest/commit/23eec748db0de7b6b5fcda28cc51c48ddae16545)[WIP] Remove usage of `retainLines` (#&#8203;5594)
-   [`4b6f850`](https://github.com/facebook/jest/commit/4b6f8506520b17ded174a2609ec6052b6a792db8)Update documentation on automocking (#&#8203;5630)
-   [`1203ed6`](https://github.com/facebook/jest/commit/1203ed6ebeffe1edb7d1aa6c9ef0bd3cde8d92cf)[jest-editor-support] update TypeScript definition (#&#8203;5625)
-   [`67d1e47`](https://github.com/facebook/jest/commit/67d1e470a8de8e4332831db5a4191a4147d6410d)Add how to mock scoped modules to Manual Mocks doc (#&#8203;5638)
-   [`e9825d3`](https://github.com/facebook/jest/commit/e9825d3990bd82cd0c22cebcf9f62b688cc5dc0b)update istanbul-api (#&#8203;5637)
-   [`497be76`](https://github.com/facebook/jest/commit/497be7627ef851c947da830d4a8e21046f847a78)Jest got too popular (#&#8203;5639)
-   [`f020182`](https://github.com/facebook/jest/commit/f020182451e934221dedd92d2f550c55126f0985)fix(watchman): Parallelize Watchman calls in crawler again (#&#8203;5640)

#### v22.4.2
-   [`52bbb26`](https://github.com/facebook/jest/commit/52bbb26615d1d6f150082873a3346db17b158df9)Release v22.4.1
-   [`cdd5dfe`](https://github.com/facebook/jest/commit/cdd5dfea815bd043703c991dcca2051458d7ee75)Force haste map regeneration on deserialization error (#&#8203;5642)

</details>





---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-23T00:22:43Z,NONE,True,146,138,2,,JavaScript,a18ab5da06df7abc35a149173802268f601cc2e4,Update jest monorepo packages
143,https://api.github.com/repos/mozilla/distribution-viewer/pulls/341,341,Update jest-cli to the latest version 🚀,"
☝️ Greenkeeper’s [updated Terms of Service](https://mailchi.mp/ebfddc9880a9/were-updating-our-terms-of-service) will come into effect on April 6th, 2018.

## Version **22.4.2** of [jest-cli](https://github.com/facebook/jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      jest-cli
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      22.3.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **22.4.2** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of jest-cli.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---




<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-22T23:36:18Z,NONE,False,1,1,1,,JavaScript,6d7bf3ce77e25327bb3086e285c50505ba7b86bb,fix(package): update jest-cli to version 22.4.2
144,https://api.github.com/repos/mozilla/distribution-viewer/pulls/340,340,Update dependency webpack-stream to v4.0.2,"This Pull Request updates dependency [webpack-stream](https://github.com/shama/webpack-stream) from `v4.0.1` to `v4.0.2`




<details>
<summary>Commits</summary>

#### v4.0.2
-   [`721f757`](https://github.com/shama/webpack-stream/commit/721f757440442f001a6f9242baa88a3b9f79e403) Remove chalk and switch to chalk&#x27;s dependancy of supports-color given that&#x27;s all we use.
-   [`316aacd`](https://github.com/shama/webpack-stream/commit/316aacd3cf0d3cd9b8af572530fdcacbbb2529d8) Merge pull request #&#8203;179 from lgladdy/master
-   [`d8edee3`](https://github.com/shama/webpack-stream/commit/d8edee30168d7621552c637ee66cd6868a8313d9) v4.0.2

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-22T23:23:46Z,NONE,True,13,31,2,,JavaScript,b1df1a03cba2028f7dba387be466df7da4094602,Update dependency webpack-stream to v4.0.2
145,https://api.github.com/repos/mozilla/distribution-viewer/pulls/339,339,Update dependency react-redux to v5.0.7,"This Pull Request updates dependency [react-redux](https://github.com/reactjs/react-redux) from `v5.0.6` to `v5.0.7`



<details>
<summary>Release Notes</summary>

### [`v5.0.7`](https://github.com/reactjs/react-redux/releases/v5.0.7)

- Allow Redux 4.0
- Update hoist-non-react-statics to support `getDerivedStateFromProps`
- Fix test code coverage reporting (#&#8203;850 by @&#8203;jacobdfriedmann)
- Use `methodName` in error message (#&#8203;852 by @&#8203;pwnn)

---

</details>


<details>
<summary>Commits</summary>

#### v5.0.7
-   [`96d7484`](https://github.com/reactjs/react-redux/commit/96d7484ac4484e988affc893059e1b17383a447c) Fix misspell in api.md
-   [`fd81f18`](https://github.com/reactjs/react-redux/commit/fd81f1812c2420aa72805b61f1d06754cb5bfb43) Merge pull request #&#8203;762 from yenshih/patch-1
-   [`f1367df`](https://github.com/reactjs/react-redux/commit/f1367df6de7fc5aed4e2434d68038a517208f6da) Fix some grammar (#&#8203;778)
-   [`a875a4c`](https://github.com/reactjs/react-redux/commit/a875a4c5361bb8b9422196e49e4a84dfc8471a9c) Add dispatch shorthand example to documentation (#&#8203;804)
-   [`4c2670d`](https://github.com/reactjs/react-redux/commit/4c2670dc11cc067ef106f6c527e6e8b9d47f8af8) Update api.md - factory functions (#&#8203;805)
-   [`6fc5d39`](https://github.com/reactjs/react-redux/commit/6fc5d3973b020359d44afa2a3336d1197c13adf8) Remove extra comma after the last property in .eslintrc json (#&#8203;830)
-   [`59bf925`](https://github.com/reactjs/react-redux/commit/59bf9253e2c1b505f24d701bb122ab249b352a49) Travis is currently busted with Node 9.
-   [`775765a`](https://github.com/reactjs/react-redux/commit/775765ab2ce457ea0ffea05ba736ff0702d8a3ca) The latest node 8 includes an updated npm already.
-   [`a3fb71a`](https://github.com/reactjs/react-redux/commit/a3fb71a24bbed5e7c006663edb0c983549e53742) docs: fix typo
-   [`7bde889`](https://github.com/reactjs/react-redux/commit/7bde889738b4e4716bcd5fa7acf75e2675798997) Merge pull request #&#8203;846 from tbroadley/fix-typos
-   [`e170b2c`](https://github.com/reactjs/react-redux/commit/e170b2c54fbb796a32c087dcb9a1325abe5a370c) Tweak mSTP note
-   [`76dd7fa`](https://github.com/reactjs/react-redux/commit/76dd7faa90981dd2f9efa76f3e2f26ecf2c12cf7) fix: optimize invariant message (#&#8203;852)
-   [`83aef6f`](https://github.com/reactjs/react-redux/commit/83aef6f9f2c0513c87fda0d5641218b57e1040a4) Fix nyc test code coverage reporting (#&#8203;850)
-   [`a7a0902`](https://github.com/reactjs/react-redux/commit/a7a0902a681259b178bccad60af2c35e5f05d78a) Upgrade dependencies and rollup config
-   [`8abdf93`](https://github.com/reactjs/react-redux/commit/8abdf934f574a1873c87417a5e41c7a80e5121c3) Support redux 4.0
-   [`d485791`](https://github.com/reactjs/react-redux/commit/d485791cfdca3f2c9c14922340edb28b347bfa63) Remove deprecated jsnext:main entry.
-   [`c1b9d36`](https://github.com/reactjs/react-redux/commit/c1b9d36e078836374fe833a6eb2a8f0de0ad1e30) 5.0.7

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-22T23:23:28Z,NONE,True,8,8,2,,JavaScript,2488af5e94acb0ddac551810cc36a4fba72cdc92,Update dependency react-redux to v5.0.7
146,https://api.github.com/repos/mozilla/distribution-viewer/pulls/338,338,Update dependency eslint-plugin-react to v7.7.0,"This Pull Request updates dependency [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) from `v7.6.1` to `v7.7.0`



<details>
<summary>Release Notes</summary>

### [`v7.7.0`](https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#&#8203;770---2018-02-19)

##### Added
* [`forbid-foreign-prop-types`][]: add `allowInPropTypes` option ([#&#8203;1655][] @&#8203;iansu)
* Add [`jsx-max-depth`][] rule ([#&#8203;1260][] @&#8203;chriswong)
##### Fixed
* [`no-access-state-in-setstate`][]: Exclude references to this.state in setState callback ([#&#8203;1610][] @&#8203;pfhayes)
* [`no-danger-with-children`][]: prevent infinite loop ([#&#8203;1571][] @&#8203;ljharb)
* [`sort-prop-types`][]: Fix sortShapeProp when shape is not an object literal ([#&#8203;1669][] @&#8203;justinanastos)
* [`jsx-child-element-spacing`][]: fix error location ([#&#8203;1666][] @&#8203;pfhayes)
* [`no-unused-prop-types`][]: fix for createClass ([#&#8203;1675][] @&#8203;yuri-sakharov)
* [`prop-types`][]: include nextProps checking in shouldComponentUpdate ([#&#8203;1690][] @&#8203;amerryma)
* [`jsx-curly-spacing`][]: refactor to fix start and end-braces in a single pass ([#&#8203;1414][] @&#8203;s-h-a-d-o-w)
##### Changed
* [`jsx-child-element-spacing`][]: add missing docs ([#&#8203;1665][] @&#8203;pfhayes); fix docs ([#&#8203;1670][] @&#8203;SammyM)

[7.7.0]: https://github.com/yannickcr/eslint-plugin-react/compare/v7.6.1...v7.7.0
[#&#8203;1690]: `https://github.com/yannickcr/eslint-plugin-react/pull/1690`
[#&#8203;1675]: `https://github.com/yannickcr/eslint-plugin-react/pull/1675`
[#&#8203;1670]: `https://github.com/yannickcr/eslint-plugin-react/pull/1670`
[#&#8203;1669]: `https://github.com/yannickcr/eslint-plugin-react/pull/1669`
[#&#8203;1666]: `https://github.com/yannickcr/eslint-plugin-react/pull/1666`
[#&#8203;1655]: `https://github.com/yannickcr/eslint-plugin-react/pull/1655`
[#&#8203;1610]: `https://github.com/yannickcr/eslint-plugin-react/pull/1610`
[#&#8203;1414]: `https://github.com/yannickcr/eslint-plugin-react/pull/1414`
[#&#8203;1260]: `https://github.com/yannickcr/eslint-plugin-react/pull/1260`
[#&#8203;1571]: https://github.com/yannickcr/eslint-plugin-react/issue/1571

---

</details>


<details>
<summary>Commits</summary>

#### v7.7.0
-   [`cfd3959`](https://github.com/yannickcr/eslint-plugin-react/commit/cfd3959ff8e3b11262b0006dff28d0c957b282a2) [Docs] add `jsx-child-element-spacing`
-   [`70e8a02`](https://github.com/yannickcr/eslint-plugin-react/commit/70e8a023ee6d37ccd090161a747a8c35ca78081c) Merge pull request #&#8203;1610 from pfhayes/setstate
-   [`5e1a64c`](https://github.com/yannickcr/eslint-plugin-react/commit/5e1a64c14f8fda5e186991b1e09a55f476a64e27) [Fix] `no-danger-with-children`: prevent infinite loop
-   [`d8dff26`](https://github.com/yannickcr/eslint-plugin-react/commit/d8dff2639d7085ccbf9dd52d027e787f1494c962) test(sort-prop-types) Add failing test for when `sortShapeProp` is true and shape not object literal
-   [`17ac433`](https://github.com/yannickcr/eslint-plugin-react/commit/17ac433b4d97659b74cf682b7e79d48542a13822) fix(sort-prop-types): Fix sortShapeProp when shape is not an object literal
-   [`d818f2b`](https://github.com/yannickcr/eslint-plugin-react/commit/d818f2b87eb4edd0ecbb4f3839389e75cc38bc00) Merge pull request #&#8203;1669 from justinanastos/fix/sort-prop-types-shape-no-properties-1668
-   [`05c49d4`](https://github.com/yannickcr/eslint-plugin-react/commit/05c49d4d322f255fbdc304a7593a1471dd0a781a) [Fix] `jsx-child-element-spacing`: fix error location
-   [`2839b5d`](https://github.com/yannickcr/eslint-plugin-react/commit/2839b5d4c618450d094ab9715a95eff7b7e30942) Fix an issue with the documentation for &#x27;jsx-child-element-spacing&#x27;
-   [`dda03e9`](https://github.com/yannickcr/eslint-plugin-react/commit/dda03e934468f4b2b6f088146e070296a64ae463) Created test
-   [`78e2951`](https://github.com/yannickcr/eslint-plugin-react/commit/78e29517a285d905f109b62dccab0f76d10dc219) Fixed bug
-   [`b1444be`](https://github.com/yannickcr/eslint-plugin-react/commit/b1444be8dd8dc56a5936e540487dc2e8e3eb0d3b) Added more tests
-   [`24658b5`](https://github.com/yannickcr/eslint-plugin-react/commit/24658b56968d25c1b0fb4f3f238c7abbf4f4b5ba) Added more valid tests
-   [`3d83d13`](https://github.com/yannickcr/eslint-plugin-react/commit/3d83d13fe1900c8b16f7f65019e38d83e98746e5) Added more tests
-   [`fb2fefd`](https://github.com/yannickcr/eslint-plugin-react/commit/fb2fefd05cd28f0f4f021d82a26b7bb0105e4637) Merge pull request #&#8203;1675 from yuri-sakharov/fix/react-no-unused-prop-types
-   [`e77c97f`](https://github.com/yannickcr/eslint-plugin-react/commit/e77c97fc9fd54316bea9551af1f77f5d2298288f) Test
-   [`0fa0761`](https://github.com/yannickcr/eslint-plugin-react/commit/0fa0761734d0f6c40f1bb4e0dad3a2a4ff6984ef) Added test &amp; working
-   [`3ac7943`](https://github.com/yannickcr/eslint-plugin-react/commit/3ac79437a3461bc8c4fa17fd5fd7a8b4b029836c) [docs] add missing rule to readme
-   [`8ca344a`](https://github.com/yannickcr/eslint-plugin-react/commit/8ca344a6d1c98f97e65a44511f0e2d0a6bd5351c) Rearranged tests to be at the bottom of componentWillReceiveProps tests. Added a default parser test.
-   [`e26b7e2`](https://github.com/yannickcr/eslint-plugin-react/commit/e26b7e2061e7fe9ba505527c28811e1199ce5945) [Tests] clean up some formatting
-   [`c996740`](https://github.com/yannickcr/eslint-plugin-react/commit/c99674001db435b327e019ff1d9a7ab512da0ec9) Merge pull request #&#8203;1690 from mindspacepdx/am-should-component-update
-   [`e4de360`](https://github.com/yannickcr/eslint-plugin-react/commit/e4de3600c281c87bcb18d62c10ce279374ddcde4) [Fix] jsx-curly-spacing problem in new tests, fixes #&#8203;1414
-   [`0e2e046`](https://github.com/yannickcr/eslint-plugin-react/commit/0e2e0463cb73663d7d2ead66b7418c574ffd9704) [Dev Deps] update `babel-eslint`, `eslint`, `istanbul`, `mocha`
-   [`abe8381`](https://github.com/yannickcr/eslint-plugin-react/commit/abe8381c0d6748047224c430ce47f02e40160ed0) Update CHANGELOG and bump version

</details>



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-22T22:19:57Z,NONE,True,4,4,2,,JavaScript,818e21fe0be37e417b3c3865e8addfe17fb7373b,Update dependency eslint-plugin-react to v7.7.0
147,https://api.github.com/repos/mozilla/distribution-viewer/pulls/337,337,Pin Dependencies,"This Pull Request renovates the package group ""Pin Dependencies"".


-   [webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer): from `^2.0.2` to `2.7.0`
-   [webpack-stream](https://github.com/shama/webpack-stream): from `^4.0.0` to `4.0.1`
-   [striptags](https://github.com/ericnorris/striptags): from `^2.2.1` to `2.2.1`
-   [string-template](https://github.com/Matt-Esch/string-template): from `^1.0.0` to `1.0.0`
-   [sinon](https://github.com/sinonjs/sinon): from `^4.0.0` to `4.3.0`
-   [redux](https://github.com/reactjs/redux): from `^3.5.2` to `3.7.2`
-   [react-test-renderer](https://github.com/facebook/react): from `^16.0.0` to `16.2.0`
-   [react-router](https://github.com/ReactTraining/react-router): from `^3.0.5` to `3.2.0`
-   [react-redux](https://github.com/reactjs/react-redux): from `^5.0.2` to `5.0.6`
-   [react-ga](https://github.com/react-ga/react-ga): from `^2.1.2` to `2.4.1`
-   [react-dom](https://github.com/facebook/react): from `^16.0.0` to `16.2.0`
-   [react-addons-test-utils](https://github.com/facebook/react): from `^15.3.2` to `15.6.2`
-   [react](https://github.com/facebook/react): from `^16.0.0` to `16.2.0`
-   [nl2br](https://github.com/emanuelsaringan/nl2br): from `^0.0.3` to `0.0.3`
-   [nib](https://github.com/visionmedia/nib): from `^1.1.0` to `1.1.2`
-   [jest-cli](https://github.com/facebook/jest): from `^22.0.3` to `22.3.0`
-   [gulp-stylus](https://github.com/stevelacy/gulp-stylus): from `^2.3.1` to `2.7.0`
-   [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps): from `^2.1.1` to `2.6.4`
-   [gulp-jest](https://github.com/alansouzati/gulp-jest): from `^3.0.0` to `3.0.1`
-   [gulp-eslint](https://github.com/adametry/gulp-eslint): from `^4.0.0` to `4.0.2`
-   [gulp-concat](https://github.com/contra/gulp-concat): from `^2.6.0` to `2.6.1`
-   [gulp-clean-css](https://github.com/scniro/gulp-clean-css): from `^3.0.3` to `3.9.2`
-   [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer): from `^4.0.0` to `4.1.0`
-   [gulp](https://github.com/gulpjs/gulp): from `^3.9.1` to `3.9.1`
-   [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react): from `^7.3.0` to `7.6.1`
-   [enzyme-adapter-react-16](https://github.com/airbnb/enzyme): from `^1.0.3` to `1.1.1`
-   [enzyme](https://github.com/airbnb/enzyme): from `^3.0.0` to `3.3.0`
-   [d3-shape](https://github.com/d3/d3-shape): from `^1.0.3` to `1.2.0`
-   [d3-selection](https://github.com/d3/d3-selection): from `^1.0.2` to `1.3.0`
-   [d3-scale](https://github.com/d3/d3-scale): from `^2.0.0` to `2.0.0`
-   [d3-format](https://github.com/d3/d3-format): from `^1.0.2` to `1.2.2`
-   [d3-axis](https://github.com/d3/d3-axis): from `^1.0.3` to `1.0.8`
-   [d3-array](https://github.com/d3/d3-array): from `^1.0.1` to `1.2.1`
-   [browser-sync](https://github.com/BrowserSync/browser-sync): from `^2.12.3` to `2.23.6`
-   [babel-preset-react](https://babeljs.io/): from `^6.5.0` to `6.24.1`
-   [babel-preset-env](https://github.com/babel/babel-preset-env): from `^1.6.0` to `1.6.1`
-   `babel-plugin-transform-object-rest-spread`: from `^6.22.0` to `6.26.0`
-   [babel-loader](https://github.com/babel/babel-loader): from `^7.1.2` to `7.1.2`
-   [babel-jest](https://github.com/facebook/jest): from `^22.0.3` to `22.2.2`
-   [babel-core](https://babeljs.io/): from `^6.7.7` to `6.26.0`
-   [axios](https://github.com/axios/axios): from `^0.18.0` to `0.18.0`



**Important**: Renovate will wait until you have merged this Pin request before creating PRs for any *upgrades*. If you do not wish to pin anything, please update your config accordingly instead of leaving this PR open.



---

This PR has been generated by [Renovate Bot](https://renovateapp.com).",renovate[bot],29139614,2018-02-22T22:01:16Z,NONE,True,41,41,1,,JavaScript,a2ea42616f4221f7dccf8253fc2fdb25f3fdde6f,Pin Dependencies
148,https://api.github.com/repos/mozilla/distribution-viewer/pulls/336,336,Configure Renovate,"Welcome to [Renovate](https://renovateapp.com)!

This is an onboarding PR to help you understand and configure Renovate before regular Pull Requests begin. Once you merge or close this Pull Request, Renovate will begin keeping your dependencies up-to-date.

If you have any questions, try reading our [Docs](https://renovateapp.com/docs), particularly the Getting Started section. You can post questions in [our Config Help repository](https://github.com/renovateapp/config-help/issues) or @ the app author @rarkins in this PR and he'll probably see it.

---
## Detected Package Files

 * `package.json`

## Configuration Summary

Based on the currently configured presets, Renovate will:

  - Start dependency updates once this Configure Renovate PR is merged or closed
  - Separate major versions of dependencies into individual branches/PRs
  - Combine any patch and minor upgrades together into same branch/PR
  - Upgrade to unstable versions only if the existing version is unstable
  - Raise PRs immediately (after branch is created)
  - Use <code>renovate/</code> as prefix for all branch names
  - If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others
  - Keep existing branches updated even when not scheduled
  - Disable automerging feature - wait for humans to merge all PRs
  - Ignore `node_modules`, `bower_components`, and various test/tests directories
  - Update existing lock files only when <code>package.json</code> is modified
  - Autodetect whether to pin dependencies or maintain ranges
  - Rate limit PR creation to a maximum of two per hour
  - Limit to maximum 20 concurrent Renovate PRs at any time

Would you like to change the way Renovate is upgrading your dependencies? Simply edit the `renovate.json` in this branch and this Pull Request description will be updated the next time Renovate runs. Try to use Config Presets (the `extends` array) when possible rather than raw config, as then this PR will be able to more accurately describe your settings.

---

### What to Expect

With your current configuration, Renovate will create 7 Pull Requests:

1. **Pin Dependencies**

  - Branch name: `renovate/pin-dependencies`
  - Pins [webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer) in `devDependencies` to `2.7.0`
  - Pins [webpack-stream](https://github.com/shama/webpack-stream) in `dependencies` to `4.0.1`
  - Pins [striptags](https://github.com/ericnorris/striptags) in `dependencies` to `2.2.1`
  - Pins [string-template](https://github.com/Matt-Esch/string-template) in `dependencies` to `1.0.0`
  - Pins [sinon](https://github.com/sinonjs/sinon) in `dependencies` to `4.3.0`
  - Pins [redux](https://github.com/reactjs/redux) in `dependencies` to `3.7.2`
  - Pins [react-test-renderer](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [react-router](https://github.com/ReactTraining/react-router) in `dependencies` to `3.2.0`
  - Pins [react-redux](https://github.com/reactjs/react-redux) in `dependencies` to `5.0.6`
  - Pins [react-ga](https://github.com/react-ga/react-ga) in `dependencies` to `2.4.1`
  - Pins [react-dom](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [react-addons-test-utils](https://github.com/facebook/react) in `dependencies` to `15.6.2`
  - Pins [react](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [nl2br](https://github.com/emanuelsaringan/nl2br) in `dependencies` to `0.0.3`
  - Pins [nib](https://github.com/visionmedia/nib) in `dependencies` to `1.1.2`
  - Pins [jest-cli](https://github.com/facebook/jest) in `dependencies` to `22.3.0`
  - Pins [gulp-stylus](https://github.com/stevelacy/gulp-stylus) in `dependencies` to `2.7.0`
  - Pins [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) in `dependencies` to `2.6.4`
  - Pins [gulp-jest](https://github.com/alansouzati/gulp-jest) in `dependencies` to `3.0.1`
  - Pins [gulp-eslint](https://github.com/adametry/gulp-eslint) in `dependencies` to `4.0.2`
  - Pins [gulp-concat](https://github.com/contra/gulp-concat) in `dependencies` to `2.6.1`
  - Pins [gulp-clean-css](https://github.com/scniro/gulp-clean-css) in `dependencies` to `3.9.2`
  - Pins [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer) in `dependencies` to `4.1.0`
  - Pins [gulp](https://github.com/gulpjs/gulp) in `dependencies` to `3.9.1`
  - Pins [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) in `dependencies` to `7.6.1`
  - Pins [enzyme-adapter-react-16](https://github.com/airbnb/enzyme) in `dependencies` to `1.1.1`
  - Pins [enzyme](https://github.com/airbnb/enzyme) in `dependencies` to `3.3.0`
  - Pins [d3-shape](https://github.com/d3/d3-shape) in `dependencies` to `1.2.0`
  - Pins [d3-selection](https://github.com/d3/d3-selection) in `dependencies` to `1.3.0`
  - Pins [d3-scale](https://github.com/d3/d3-scale) in `dependencies` to `2.0.0`
  - Pins [d3-format](https://github.com/d3/d3-format) in `dependencies` to `1.2.2`
  - Pins [d3-axis](https://github.com/d3/d3-axis) in `dependencies` to `1.0.8`
  - Pins [d3-array](https://github.com/d3/d3-array) in `dependencies` to `1.2.1`
  - Pins [browser-sync](https://github.com/BrowserSync/browser-sync) in `dependencies` to `2.23.6`
  - Pins [babel-preset-react](https://babeljs.io/) in `dependencies` to `6.24.1`
  - Pins [babel-preset-env](https://github.com/babel/babel-preset-env) in `dependencies` to `1.6.1`
  - Pins babel-plugin-transform-object-rest-spread in `dependencies` to `6.26.0`
  - Pins [babel-loader](https://github.com/babel/babel-loader) in `dependencies` to `7.1.2`
  - Pins [babel-jest](https://github.com/facebook/jest) in `dependencies` to `22.2.2`
  - Pins [babel-core](https://babeljs.io/) in `dependencies` to `6.26.0`
  - Pins [axios](https://github.com/axios/axios) in `dependencies` to `0.18.0`


2. **Update dependency eslint-plugin-react to v7.7.0**

  - Branch name: `renovate/eslint-plugin-react-7.x`
  - Upgrades [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) in `dependencies` from `^7.3.0` to `7.7.0`


3. **Update dependency react-redux to v5.0.7**

  - Branch name: `renovate/react-redux-5.x`
  - Upgrades [react-redux](https://github.com/reactjs/react-redux) in `dependencies` from `^5.0.2` to `5.0.7`


4. **Update dependency webpack-stream to v4.0.2**

  - Branch name: `renovate/webpack-stream-4.x`
  - Upgrades [webpack-stream](https://github.com/shama/webpack-stream) in `dependencies` from `^4.0.0` to `4.0.2`


5. **Update jest monorepo packages to v22.4.1**

  - Branch name: `renovate/jest-monorepo`
  - Upgrades [jest-cli](https://github.com/facebook/jest) in `dependencies` from `^22.0.3` to `22.4.1`
  - Upgrades [babel-jest](https://github.com/facebook/jest) in `dependencies` from `^22.0.3` to `22.4.1`


6. **Update dependency react-router to v4**

  - Branch name: `renovate/react-router-4.x`
  - Upgrades [react-router](https://github.com/ReactTraining/react-router) in `dependencies` from `^3.0.5` to `4.2.0`


7. **Update dependency striptags to v3**

  - Branch name: `renovate/striptags-3.x`
  - Upgrades [striptags](https://github.com/ericnorris/striptags) in `dependencies` from `^2.2.1` to `3.1.1`



---

",renovate[bot],29139614,2018-02-22T16:13:30Z,NONE,True,8,0,1,,JavaScript,7f07d4540973f53e2a34c2234d2bab288c1eac11,Add renovate.json
149,https://api.github.com/repos/mozilla/distribution-viewer/pulls/336,336,Configure Renovate,"Welcome to [Renovate](https://renovateapp.com)!

This is an onboarding PR to help you understand and configure Renovate before regular Pull Requests begin. Once you merge or close this Pull Request, Renovate will begin keeping your dependencies up-to-date.

If you have any questions, try reading our [Docs](https://renovateapp.com/docs), particularly the Getting Started section. You can post questions in [our Config Help repository](https://github.com/renovateapp/config-help/issues) or @ the app author @rarkins in this PR and he'll probably see it.

---
## Detected Package Files

 * `package.json`

## Configuration Summary

Based on the currently configured presets, Renovate will:

  - Start dependency updates once this Configure Renovate PR is merged or closed
  - Separate major versions of dependencies into individual branches/PRs
  - Combine any patch and minor upgrades together into same branch/PR
  - Upgrade to unstable versions only if the existing version is unstable
  - Raise PRs immediately (after branch is created)
  - Use <code>renovate/</code> as prefix for all branch names
  - If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others
  - Keep existing branches updated even when not scheduled
  - Disable automerging feature - wait for humans to merge all PRs
  - Ignore `node_modules`, `bower_components`, and various test/tests directories
  - Update existing lock files only when <code>package.json</code> is modified
  - Autodetect whether to pin dependencies or maintain ranges
  - Rate limit PR creation to a maximum of two per hour
  - Limit to maximum 20 concurrent Renovate PRs at any time

Would you like to change the way Renovate is upgrading your dependencies? Simply edit the `renovate.json` in this branch and this Pull Request description will be updated the next time Renovate runs. Try to use Config Presets (the `extends` array) when possible rather than raw config, as then this PR will be able to more accurately describe your settings.

---

### What to Expect

With your current configuration, Renovate will create 7 Pull Requests:

1. **Pin Dependencies**

  - Branch name: `renovate/pin-dependencies`
  - Pins [webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer) in `devDependencies` to `2.7.0`
  - Pins [webpack-stream](https://github.com/shama/webpack-stream) in `dependencies` to `4.0.1`
  - Pins [striptags](https://github.com/ericnorris/striptags) in `dependencies` to `2.2.1`
  - Pins [string-template](https://github.com/Matt-Esch/string-template) in `dependencies` to `1.0.0`
  - Pins [sinon](https://github.com/sinonjs/sinon) in `dependencies` to `4.3.0`
  - Pins [redux](https://github.com/reactjs/redux) in `dependencies` to `3.7.2`
  - Pins [react-test-renderer](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [react-router](https://github.com/ReactTraining/react-router) in `dependencies` to `3.2.0`
  - Pins [react-redux](https://github.com/reactjs/react-redux) in `dependencies` to `5.0.6`
  - Pins [react-ga](https://github.com/react-ga/react-ga) in `dependencies` to `2.4.1`
  - Pins [react-dom](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [react-addons-test-utils](https://github.com/facebook/react) in `dependencies` to `15.6.2`
  - Pins [react](https://github.com/facebook/react) in `dependencies` to `16.2.0`
  - Pins [nl2br](https://github.com/emanuelsaringan/nl2br) in `dependencies` to `0.0.3`
  - Pins [nib](https://github.com/visionmedia/nib) in `dependencies` to `1.1.2`
  - Pins [jest-cli](https://github.com/facebook/jest) in `dependencies` to `22.3.0`
  - Pins [gulp-stylus](https://github.com/stevelacy/gulp-stylus) in `dependencies` to `2.7.0`
  - Pins [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) in `dependencies` to `2.6.4`
  - Pins [gulp-jest](https://github.com/alansouzati/gulp-jest) in `dependencies` to `3.0.1`
  - Pins [gulp-eslint](https://github.com/adametry/gulp-eslint) in `dependencies` to `4.0.2`
  - Pins [gulp-concat](https://github.com/contra/gulp-concat) in `dependencies` to `2.6.1`
  - Pins [gulp-clean-css](https://github.com/scniro/gulp-clean-css) in `dependencies` to `3.9.2`
  - Pins [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer) in `dependencies` to `4.1.0`
  - Pins [gulp](https://github.com/gulpjs/gulp) in `dependencies` to `3.9.1`
  - Pins [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) in `dependencies` to `7.6.1`
  - Pins [enzyme-adapter-react-16](https://github.com/airbnb/enzyme) in `dependencies` to `1.1.1`
  - Pins [enzyme](https://github.com/airbnb/enzyme) in `dependencies` to `3.3.0`
  - Pins [d3-shape](https://github.com/d3/d3-shape) in `dependencies` to `1.2.0`
  - Pins [d3-selection](https://github.com/d3/d3-selection) in `dependencies` to `1.3.0`
  - Pins [d3-scale](https://github.com/d3/d3-scale) in `dependencies` to `2.0.0`
  - Pins [d3-format](https://github.com/d3/d3-format) in `dependencies` to `1.2.2`
  - Pins [d3-axis](https://github.com/d3/d3-axis) in `dependencies` to `1.0.8`
  - Pins [d3-array](https://github.com/d3/d3-array) in `dependencies` to `1.2.1`
  - Pins [browser-sync](https://github.com/BrowserSync/browser-sync) in `dependencies` to `2.23.6`
  - Pins [babel-preset-react](https://babeljs.io/) in `dependencies` to `6.24.1`
  - Pins [babel-preset-env](https://github.com/babel/babel-preset-env) in `dependencies` to `1.6.1`
  - Pins babel-plugin-transform-object-rest-spread in `dependencies` to `6.26.0`
  - Pins [babel-loader](https://github.com/babel/babel-loader) in `dependencies` to `7.1.2`
  - Pins [babel-jest](https://github.com/facebook/jest) in `dependencies` to `22.2.2`
  - Pins [babel-core](https://babeljs.io/) in `dependencies` to `6.26.0`
  - Pins [axios](https://github.com/axios/axios) in `dependencies` to `0.18.0`


2. **Update dependency eslint-plugin-react to v7.7.0**

  - Branch name: `renovate/eslint-plugin-react-7.x`
  - Upgrades [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) in `dependencies` from `^7.3.0` to `7.7.0`


3. **Update dependency react-redux to v5.0.7**

  - Branch name: `renovate/react-redux-5.x`
  - Upgrades [react-redux](https://github.com/reactjs/react-redux) in `dependencies` from `^5.0.2` to `5.0.7`


4. **Update dependency webpack-stream to v4.0.2**

  - Branch name: `renovate/webpack-stream-4.x`
  - Upgrades [webpack-stream](https://github.com/shama/webpack-stream) in `dependencies` from `^4.0.0` to `4.0.2`


5. **Update jest monorepo packages to v22.4.1**

  - Branch name: `renovate/jest-monorepo`
  - Upgrades [jest-cli](https://github.com/facebook/jest) in `dependencies` from `^22.0.3` to `22.4.1`
  - Upgrades [babel-jest](https://github.com/facebook/jest) in `dependencies` from `^22.0.3` to `22.4.1`


6. **Update dependency react-router to v4**

  - Branch name: `renovate/react-router-4.x`
  - Upgrades [react-router](https://github.com/ReactTraining/react-router) in `dependencies` from `^3.0.5` to `4.2.0`


7. **Update dependency striptags to v3**

  - Branch name: `renovate/striptags-3.x`
  - Upgrades [striptags](https://github.com/ericnorris/striptags) in `dependencies` from `^2.2.1` to `3.1.1`



---

",renovate[bot],29139614,2018-02-22T16:13:30Z,NONE,True,8,0,1,,JavaScript,33cff36d51bcc88c043ebeb8314ccdc95bcce345,"Disable Renovate support for Docker

Rob Hudson mentioned in the firefox-test-tube repository that this
feature of Renovate was not necessary.[1]

[1] https://github.com/mozilla/firefox-test-tube/pull/100#issuecomment-366324528"
150,https://api.github.com/repos/mozilla/distribution-viewer/pulls/335,335,Update axios to the latest version 🚀,"
## Version **0.18.0** of [axios](https://github.com/axios/axios) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      axios
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      0.17.1
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **0.18.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of axios.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 40 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/d59c70fdfd35106130e9f783d0dbdcddd145b58f""><code>d59c70f</code></a> <code>Releasing v0.18.0</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/48a790222c3b6a640bf3f280162c1ccf73108b58""><code>48a7902</code></a> <code>Prepping for release: updating CHANGELOG.</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/5b2ea2e54c08862314477bd3ac860c1819d25abb""><code>5b2ea2e</code></a> <code>Merge pull request #1364 from MiguelMadero/mmadero/documents-timeout</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/23ba29602cf941d943772cbccee1fd260f5e0d02""><code>23ba296</code></a> <code>Merge pull request #1342 from alpancs/instance-bug-fix</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/b6b0865352743c4c61d7e80d9708f98fa876a253""><code>b6b0865</code></a> <code>Merge pull request #1363 from mdlavin/patch-1</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/821d5e245ad4bf9536142121ac6cd86259019196""><code>821d5e2</code></a> <code>Merge pull request #1366 from emilyemorehouse/fix/1070</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/4ea77b70b70501c0a701db837e77024de1e2fcf4""><code>4ea77b7</code></a> <code>Follow up to #1070:</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/ccc78899bb6f595e3c44ec7ad6af610455859d78""><code>ccc7889</code></a> <code>Merge pull request #1070 from Starfox64/master</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/f7310ca083afe7270d6fbf16ec33fc977573a684""><code>f7310ca</code></a> <code>Documents the timeout default</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/f1a0feb2cd9b97f00fcea3a48c461c63a0a43ff6""><code>f1a0feb</code></a> <code>Add reference to axios-fetch in ECOSYSTEM.md</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/40b829994c2e407109a38a4cf82703261aa3c22c""><code>40b8299</code></a> <code>Merge pull request #1357 from emilyemorehouse/fix/1286</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/839b9ab3e7eddb0941029b176825e1e1e89eec57""><code>839b9ab</code></a> <code>Fixes #1286 - also updating follow-redirects version in package.json to ensure that maxBodyLength option is supported</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/f26e0c0e7afd7b6b675744c75f613e60215d829f""><code>f26e0c0</code></a> <code>Merge pull request #1287 from mividtim/mividtim/follow-redirects-max-length</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/14057dc0bd9811a9fda773588f66de9f4aa0f617""><code>14057dc</code></a> <code>Merge pull request #1273 from jcrben/master</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/7a355ff4327038bbac1c194b30b999fe66e009d9""><code>7a355ff</code></a> <code>fix cannot send post method</code></li>
</ul>
<p>There are 40 commits in total.</p>
<p>See the <a href=""https://urls.greenkeeper.io/axios/axios/compare/ad1195f0702381a77b4f2863aad6ddb1002ffd51...d59c70fdfd35106130e9f783d0dbdcddd145b58f"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-02-20T00:42:59Z,NONE,False,1,1,1,,JavaScript,d900258886dae059f0bbdf99a5887b78ed56d719,fix(package): update axios to version 0.18.0
151,https://api.github.com/repos/mozilla/distribution-viewer/pulls/334,334,Scheduled weekly dependency update for week 06,"


## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>psycopg2</b></td>
<td align=""center"">2.7.3.2</td>
<td align=""center"">&raquo;</td>
<td align=""center"">2.7.4</td>
<td>
     <a href=""https://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> 

</td>

</tr>
</table>



## Changelogs


### psycopg2 2.7.3.2 -> 2.7.4

>### 2.7.4

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Moving away from installing the wheel package by default.
>  Packages installed from wheel raise a warning on import. Added package
>  ``psycopg2-binary`` to install from wheel instead (:ticket:`543`).
>- Convert fields names into valid Python identifiers in
>  `~psycopg2.extras.NamedTupleCursor` (:ticket:`211`).
>- Fixed Solaris 10 support (:ticket:`532`).
>- `cursor.mogrify()` can be called on closed cursors (:ticket:`579`).
>- Fixed setting session characteristics in corner cases on autocommit
>  connections (:ticket:`580`).
>- Fixed `~psycopg2.extras.MinTimeLoggingCursor` on Python 3 (:ticket:`609`).
>- Fixed parsing of array of points as floats (:ticket:`613`).
>- Fixed `~psycopg2.__libpq_version__` building with libpq &gt;= 10.1
>  (:ticket:`632`).
>- Fixed `~cursor.rowcount` after `~cursor.executemany()` with :sql:`RETURNING`
>  statements (:ticket:`633`).
>- Fixed compatibility problem with pypy3 (:ticket:`649`).
>- Wheel packages compiled against PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.
>- Wheel packages for Python 2.6 no more available (support dropped from
>  wheel building infrastructure).











That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2018-02-12T15:12:07Z,CONTRIBUTOR,True,1,1,1,,JavaScript,235d9ca985d01742e91002507d5e3cb5399c8b14,Update psycopg2 from 2.7.3.2 to 2.7.4
152,https://api.github.com/repos/mozilla/distribution-viewer/pulls/333,333,Scheduled weekly dependency update for week 05,"


## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>Django</b></td>
<td align=""center"">1.11.10</td>
<td align=""center"">&raquo;</td>
<td align=""center"">2.0.2</td>
<td>
     <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 

</td>

</tr>
</table>



## Changelogs


### Django 1.11.10 -> 2.0.2

>### 2.0.2

>==========================

>*February 1, 2018*

>Django 2.0.2 fixes a security issue and several bugs in 2.0.1.

>CVE-2018-6188: Information leakage in ``AuthenticationForm``
>============================================================

>A regression in Django 1.11.8 made
>:class:`~django.contrib.auth.forms.AuthenticationForm` run its
>``confirm_login_allowed()`` method even if an incorrect password is entered.
>This can leak information about a user, depending on what messages
>``confirm_login_allowed()`` raises. If ``confirm_login_allowed()`` isn&#39;t
>overridden, an attacker enter an arbitrary username and see if that user has
>been set to ``is_active=False``. If ``confirm_login_allowed()`` is overridden,
>more sensitive details could be leaked.

>This issue is fixed with the caveat that ``AuthenticationForm`` can no longer
>raise the &quot;This account is inactive.&quot; error if the authentication backend
>rejects inactive users (the default authentication backend, ``ModelBackend``,
>has done that since Django 1.10). This issue will be revisited for Django 2.1
>as a fix to address the caveat will likely be too invasive for inclusion in
>older versions.

>Bugfixes
>========

>* Fixed hidden content at the bottom of the &quot;The install worked successfully!&quot;
>  page for some languages (:ticket:`28885`).

>* Fixed incorrect foreign key nullification if a model has two foreign keys to
>  the same model and a target model is deleted (:ticket:`29016`).

>* Fixed regression in the use of ``QuerySet.values_list(..., flat=True)``
>  followed by ``annotate()`` (:ticket:`29067`).

>* Fixed a regression where a queryset that annotates with geometry objects
>  crashes (:ticket:`29054`).

>* Fixed a regression where ``contrib.auth.authenticate()`` crashes if an
>  authentication backend doesn&#39;t accept ``request`` and a later one does
>  (:ticket:`29071`).

>* Fixed a regression where ``makemigrations`` crashes if a migrations directory
>  doesn&#39;t have an ``__init__.py`` file (:ticket:`29091`).

>* Fixed crash when entering an invalid uuid in ``ModelAdmin.raw_id_fields``
>  (:ticket:`29094`).


>==========================


>### 2.0.1

>==========================

>*January 1, 2018*

>Django 2.0.1 fixes several bugs in 2.0.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).

>* Reallowed filtering a queryset with ``GeometryField=None`` (:ticket:`28896`).

>* Corrected admin check to allow a ``OneToOneField`` in
>  ``ModelAdmin.autocomplete_fields`` (:ticket:`28898`).

>* Fixed a regression on SQLite where ``DecimalField`` returned a result with
>  trailing zeros in the fractional part truncated (:ticket:`28915`).

>* Fixed crash in the ``testserver`` command startup (:ticket:`28941`).

>* Fixed crash when coercing a translatable URL pattern to ``str``
>  (:ticket:`28947`).

>* Fixed crash on SQLite when renaming a field in a model referenced by a
>  ``ManyToManyField`` (:ticket:`28884`).

>* Fixed a crash when chaining ``values()`` or ``values_list()`` after
>  ``QuerySet.select_for_update(of=(...))`` (:ticket:`28944`).

>* Fixed admin changelist crash when using a query expression in the page&#39;s
>  ordering (:ticket:`28958`).


>========================


>### 2.0

>========================

>*December 2, 2017*

>Welcome to Django 2.0!

>These release notes cover the :ref:`new features &lt;whats-new-2.0&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.0&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.11 or earlier. We&#39;ve
>:ref:`dropped some features&lt;removed-features-2.0&gt;` that have reached the end of
>their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for some
>features &lt;deprecated-features-2.0&gt;`.

>This release starts Django&#39;s use of a :ref:`loose form of semantic versioning
>&lt;internal-release-cadence&gt;`, but there aren&#39;t any major backwards incompatible
>changes that might be expected of a 2.0 release. Upgrading should be a similar
>amount of effort as past feature releases.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and only
>officially support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2.7.

>Django 2.0 will be the last release series to support Python 3.4. If you plan
>a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019),
>stick with Django 1.11 LTS (supported until April 2020) instead. Note, however,
>that the end-of-life for Python 3.4 is March 2019.

>Third-party library support for older version of Django
>=======================================================

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able to run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-2.0:

>What&#39;s new in Django 2.0
>========================

>Simplified URL routing syntax
>-----------------------------

>The new :func:`django.urls.path()` function allows a simpler, more readable URL
>routing syntax. For example, this example from previous Django releases::

>    url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),

>could be written as::

>    path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),

>The new syntax supports type coercion of URL parameters. In the example, the
>view will receive the ``year`` keyword argument as an integer rather than as
>a string. Also, the URLs that will match are slightly less constrained in the
>rewritten example. For example, the year 10000 will now match since the year
>integers aren&#39;t constrained to be exactly four digits long as they are in the
>regular expression.

>The ``django.conf.urls.url()`` function from previous versions is now available
>as :func:`django.urls.re_path`. The old location remains for backwards
>compatibility, without an imminent deprecation. The old
>``django.conf.urls.include()`` function is now importable from ``django.urls``
>so you can use ``from django.urls import include, path, re_path`` in your
>URLconfs.

>The :doc:`/topics/http/urls` document is rewritten to feature the new syntax
>and provide more details.

>Mobile-friendly ``contrib.admin``
>---------------------------------

>The admin is now responsive and supports all major mobile devices. Older
>browsers may experience varying levels of graceful degradation.

>Window expressions
>------------------

>The new :class:`~django.db.models.expressions.Window` expression allows
>adding an ``OVER`` clause to querysets. You can use :ref:`window functions
>&lt;window-functions&gt;` and :ref:`aggregate functions &lt;aggregation-functions&gt;` in
>the expression.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :attr:`.ModelAdmin.autocomplete_fields` attribute and
>  :meth:`.ModelAdmin.get_autocomplete_fields` method allow using an
>  `Select2 &lt;https://select2.org&gt;`_ search widget for ``ForeignKey`` and
>  ``ManyToManyField``.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased from
>  36,000 to 100,000.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added MySQL support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` function,
>  :class:`~django.contrib.gis.db.models.functions.GeoHash` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :lookup:`isvalid` lookup, and :ref:`distance lookups &lt;distance-lookups&gt;`.

>* Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and
>  :class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions,
>  supported on PostGIS and SpatiaLite.

>* Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now
>  has its SRID set.

>* Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map&#39;s
>  default zoom level.

>* Made metadata readable and editable on rasters through the
>  :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`,
>  :attr:`~django.contrib.gis.gdal.GDALRaster.info`, and
>  :attr:`~django.contrib.gis.gdal.GDALBand.metadata` attributes.

>* Allowed passing driver-specific creation options to
>  :class:`~django.contrib.gis.gdal.GDALRaster` objects using ``papsz_options``.

>* Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in
>  GDAL&#39;s internal virtual filesystem. Rasters can now be :ref:`created from and
>  converted to binary data &lt;gdal-raster-vsimem&gt;` in-memory.

>* The new :meth:`GDALBand.color_interp()
>  &lt;django.contrib.gis.gdal.GDALBand.color_interp&gt;` method returns the color
>  interpretation for the band.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.ArrayAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.functions.RandomUUID` database
>  function returns a version 4 UUID. It requires use of PostgreSQL&#39;s
>  ``pgcrypto`` extension which can be activated using the new
>  :class:`~django.contrib.postgres.operations.CryptoExtension` migration
>  operation.

>* :class:`django.contrib.postgres.indexes.GinIndex` now supports the
>  ``fastupdate`` and ``gin_pending_list_limit`` parameters.

>* The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows
>  creating ``GiST`` indexes in the database. The new
>  :class:`~django.contrib.postgres.operations.BtreeGistExtension` migration
>  operation installs the ``btree_gist`` extension to add support for operator
>  classes that aren&#39;t built-in.

>* :djadmin:`inspectdb` can now introspect ``JSONField`` and various
>  ``RangeField``\s (``django.contrib.postgres`` must be in ``INSTALLED_APPS``).

>:mod:`django.contrib.sitemaps`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added the ``protocol`` keyword argument to the
>  :class:`~django.contrib.sitemaps.GenericSitemap` constructor.

>Cache
>~~~~~

>* ``cache.set_many()`` now returns a list of keys that failed to be inserted.
>  For the built-in backends, failed inserts can only happen on memcached.

>File Storage
>~~~~~~~~~~~~

>* :meth:`File.open() &lt;django.core.files.File.open&gt;` can be used as a context
>  manager, e.g. ``with file.open() as f:``.

>Forms
>~~~~~

>* The new ``date_attrs`` and ``time_attrs`` arguments for
>  :class:`~django.forms.SplitDateTimeWidget` and
>  :class:`~django.forms.SplitHiddenDateTimeWidget` allow specifying different
>  HTML attributes for the ``DateInput`` and ``TimeInput`` (or hidden)
>  subwidgets.

>* The new :meth:`Form.errors.get_json_data()
>  &lt;django.forms.Form.errors.get_json_data&gt;` method returns form errors as
>  a dictionary suitable for including in a JSON response.

>Generic Views
>~~~~~~~~~~~~~

>* The new :attr:`.ContextMixin.extra_context` attribute allows adding context
>  in ``View.as_view()``.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :djadmin:`inspectdb` now translates MySQL&#39;s unsigned integer columns to
>  ``PositiveIntegerField`` or ``PositiveSmallIntegerField``.

>* The new :option:`makemessages --add-location` option controls the comment
>  format in PO files.

>* :djadmin:`loaddata` can now :ref:`read from stdin &lt;loading-fixtures-stdin&gt;`.

>* The new :option:`diffsettings --output` option allows formatting the output
>  in a unified diff format.

>* On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the
>  column is created as an identity column.

>* On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates.

>Migrations
>~~~~~~~~~~

>* The new :option:`squashmigrations --squashed-name` option allows naming the
>  squashed migration.

>Models
>~~~~~~

>* The new :class:`~django.db.models.functions.StrIndex` database function
>  finds the starting index of a string inside another string.

>* On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity
>  columns`_.

>  .. _`identity columns`: https://docs.oracle.com/database/121/DRDAA/migr_tools_feat.htmDRDAA109

>* The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the
>  number of rows fetched by the Python database client when streaming results
>  from the database. For databases that don&#39;t support server-side cursors, it
>  controls the number of results Django fetches from the database adapter.

>* :meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and
>  :attr:`Meta.get_latest_by &lt;django.db.models.Options.get_latest_by&gt;` now
>  allow ordering by several fields.

>* Added the :class:`~django.db.models.functions.ExtractQuarter` function to
>  extract the quarter from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField`, and exposed it through the
>  :lookup:`quarter` lookup.

>* Added the :class:`~django.db.models.functions.TruncQuarter` function to
>  truncate :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` to the first day of a quarter.

>* Added the :attr:`~django.db.models.Index.db_tablespace` parameter to
>  class-based indexes.

>* If the database supports a native duration field (Oracle and PostgreSQL),
>  :class:`~django.db.models.functions.Extract` now works with
>  :class:`~django.db.models.DurationField`.

>* Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, supported
>  on PostgreSQL and Oracle, to lock only rows from specific tables rather than
>  all selected tables. It may be helpful particularly when
>  :meth:`~.QuerySet.select_for_update()` is used in conjunction with
>  :meth:`~.QuerySet.select_related()`.

>* The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows fetching
>  results based on any unique model field.

>* :meth:`.CursorWrapper.callproc()` now takes an optional dictionary of keyword
>  parameters, if the backend supports this feature. Of Django&#39;s built-in
>  backends, only Oracle supports it.

>* The new :meth:`connection.execute_wrapper()
>  &lt;django.db.backends.base.DatabaseWrapper.execute_wrapper&gt;` method allows
>  :doc:`installing wrappers around execution of database queries
>  &lt;/topics/db/instrumentation&gt;`.

>* The new ``filter`` argument for built-in aggregates allows :ref:`adding
>  different conditionals &lt;conditional-aggregation&gt;` to multiple aggregations
>  over the same fields or relations.

>* Added support for expressions in :attr:`Meta.ordering
>  &lt;django.db.models.Options.ordering&gt;`.

>* The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching
>  results as named tuples.

>* The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to
>  querysets.

>Pagination
>~~~~~~~~~~

>* Added :meth:`Paginator.get_page() &lt;django.core.paginator.Paginator.get_page&gt;`
>  to provide the documented pattern of handling invalid page numbers.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`runserver` Web server supports HTTP 1.1.

>Templates
>~~~~~~~~~

>* To increase the usefulness of :meth:`.Engine.get_default` in third-party
>  apps, it now returns the first engine if multiple ``DjangoTemplates`` engines
>  are configured in ``TEMPLATES`` rather than raising ``ImproperlyConfigured``.

>* Custom template tags may now accept keyword-only arguments.

>Tests
>~~~~~

>* Added threading support to :class:`~django.test.LiveServerTestCase`.

>* Added settings that allow customizing the test tablespace parameters for
>  Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`,
>  :setting:`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`.

>Validators
>~~~~~~~~~~

>* The new :class:`.ProhibitNullCharactersValidator` disallows the null
>  character in the input of the :class:`~django.forms.CharField` form field
>  and its subclasses. Null character input was observed from vulnerability
>  scanning tools. Most databases silently discard null characters, but
>  psycopg2 2.7+ raises an exception when trying to save a null character to
>  a char/text field with PostgreSQL.

>.. _backwards-incompatible-2.0:

>Backwards incompatible changes in 2.0
>=====================================

>Removed support for bytestrings in some places
>----------------------------------------------

>To support native Python 2 strings, older Django versions had to accept both
>bytestrings and unicode strings. Now that Python 2 support is dropped,
>bytestrings should only be encountered around input/output boundaries (handling
>of binary fields or HTTP streams, for example). You might have to update your
>code to limit bytestring usage to a minimum, as Django no longer accepts
>bytestrings in certain code paths. Python&#39;s :option:`-b` option may help detect
>that mistake in your code.

>For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to
>coerce the ``args`` and ``kwargs`` it receives, prior to their placement in
>the URL. For bytestrings, this creates a string with an undesired ``b`` prefix
>as well as additional quotes (``str(b&#39;foo&#39;)`` is ``&quot;b&#39;foo&#39;&quot;``). To adapt, call
>``decode()`` on the bytestring before passing it to ``reverse()``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.datetime_cast_date_sql()``,
>  ``datetime_cast_time_sql()``, ``datetime_trunc_sql()``,
>  ``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return
>  only the SQL to perform the operation instead of SQL and a list of
>  parameters.

>* Third-party database backends should add a ``DatabaseWrapper.display_name``
>  attribute with the name of the database that your backend works with. Django
>  may use it in various messages, such as in system checks.

>* The first argument of ``SchemaEditor._alter_column_type_sql()`` is now
>  ``model`` rather than ``table``.

>* The first argument of ``SchemaEditor._create_index_name()`` is now
>  ``table_name`` rather than ``model``.

>* To enable ``FOR UPDATE OF`` support, set
>  ``DatabaseFeatures.has_select_for_update_of = True``. If the database
>  requires that the arguments to ``OF`` be columns rather than tables, set
>  ``DatabaseFeatures.select_for_update_of_column = True``.

>* To enable support for :class:`~django.db.models.expressions.Window`
>  expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You
>  may need to customize the ``DatabaseOperations.window_start_rows_start_end()``
>  and/or ``window_start_range_start_end()`` methods.

>* Third-party database backends should add a
>  ``DatabaseOperations.cast_char_field_without_max_length`` attribute with the
>  database data type that will be used in the
>  :class:`~django.db.models.functions.Cast` function for a ``CharField`` if the
>  ``max_length`` argument isn&#39;t provided.

>* The first argument of ``DatabaseCreation._clone_test_db()`` and
>  ``get_test_db_clone_settings()`` is now ``suffix`` rather
>  than ``number`` (in case you want to rename the signatures in your backend
>  for consistency). ``django.test`` also now passes those values as strings
>  rather than as integers.

>* Third-party database backends should add a
>  ``DatabaseIntrospection.get_sequences()`` method based on the stub in
>  ``BaseDatabaseIntrospection``.

>Dropped support for Oracle 11.2
>-------------------------------

>The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be
>supported until April 2020 which almost reaches this date. Django 2.0
>officially supports Oracle 12.1+.

>Default MySQL isolation level is read committed
>-----------------------------------------------

>MySQL&#39;s default isolation level, repeatable read, may cause data loss in
>typical Django usage. To prevent that and for consistency with other databases,
>the default isolation level is now read committed. You can use the
>:setting:`DATABASES` setting to :ref:`use a different isolation level
>&lt;mysql-isolation-level&gt;`, if needed.

>:attr:`AbstractUser.last_name &lt;django.contrib.auth.models.User.last_name&gt;` ``max_length`` increased to 150
>----------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.last_name` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>If you want to preserve the 30 character limit for last names, use a custom
>form::

>    from django.contrib.auth.forms import UserChangeForm

>    class MyUserChangeForm(UserChangeForm):
>        last_name = forms.CharField(max_length=30, required=False)

>If you wish to keep this restriction in the admin when editing users, set
>``UserAdmin.form`` to use this form::

>    from django.contrib.auth.admin import UserAdmin
>    from django.contrib.auth.models import User

>    class MyUserAdmin(UserAdmin):
>        form = MyUserChangeForm

>    admin.site.unregister(User)
>    admin.site.register(User, MyUserAdmin)

>``QuerySet.reverse()`` and ``last()`` are prohibited after slicing
>------------------------------------------------------------------

>Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to
>unexpected results due to the slice being applied after reordering. This is
>now prohibited, e.g.::

>    &gt;&gt;&gt; Model.objects.all()[:2].reverse()
>    Traceback (most recent call last):
>    ...
>    TypeError: Cannot reverse a query once a slice has been taken.

>Form fields no longer accept optional arguments as positional arguments
>-----------------------------------------------------------------------

>To help prevent runtime errors due to incorrect ordering of form field
>arguments, optional arguments of built-in form fields are no longer accepted
>as positional arguments. For example::

>    forms.IntegerField(25, 10)

>raises an exception and should be replaced with::

>    forms.IntegerField(max_value=25, min_value=10)

>``call_command()`` validates the options it receives
>----------------------------------------------------

>``call_command()`` now validates that the argument parser of the command being
>called defines all of the options passed to ``call_command()``.

>For custom management commands that use options not created using
>``parser.add_argument()``, add a ``stealth_options`` attribute on the command::

>    class MyCommand(BaseCommand):
>        stealth_options = (&#39;option_name&#39;, ...)

>Indexes no longer accept positional arguments
>---------------------------------------------

>For example::

>    models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)

>raises an exception and should be replaced with::

>    models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)

>Foreign key constraints are now enabled on SQLite
>-------------------------------------------------

>This will appear as a backwards-incompatible change (``IntegrityError:
>FOREIGN KEY constraint failed``) if attempting to save an existing model
>instance that&#39;s violating a foreign key constraint.

>Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead of
>``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate
>foreign keys with the new definition, particularly if you&#39;re using a pattern
>like this::

>    from django.db import transaction

>    with transaction.atomic():
>        Book.objects.create(author_id=1)
>        Author.objects.create(id=1)

>If you don&#39;t recreate the foreign key as ``DEFERRED``, the first ``create()``
>would fail now that foreign key constraints are enforced.

>Backup your database first! After upgrading to Django 2.0, you can then
>rebuild tables using a script similar to this::

>    from django.apps import apps
>    from django.db import connection

>    for app in apps.get_app_configs():
>        for model in app.get_models(include_auto_created=True):
>            if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
>                for base in model.__bases__:
>                    if hasattr(base, &#39;_meta&#39;):
>                        base._meta.local_many_to_many = []
>                model._meta.local_many_to_many = []
>                with connection.schema_editor() as editor:
>                    editor._remake_table(model)

>This script hasn&#39;t received extensive testing and needs adaption for various
>cases such as multiple databases. Feel free to contribute improvements.

>In addition, because of a table alteration limitation of SQLite, it&#39;s prohibited
>to perform :class:`~django.db.migrations.operations.RenameModel` and
>:class:`~django.db.migrations.operations.RenameField` operations on models or
>fields referenced by other models in a transaction. In order to allow migrations
>containing these operations to be applied, you must set the
>``Migration.atomic`` attribute to ``False``.

>Miscellaneous
>-------------

>* The ``SessionAuthenticationMiddleware`` class is removed. It provided no
>  functionality since session authentication is unconditionally enabled in
>  Django 1.10.

>* The default HTTP error handlers (``handler404``, etc.) are now callables
>  instead of dotted Python path strings. Django favors callable references
>  since they provide better performance and debugging experience.

>* :class:`~django.views.generic.base.RedirectView` no longer silences
>  ``NoReverseMatch`` if the ``pattern_name`` doesn&#39;t exist.

>* When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and
>  :class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR`
>  and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the
>  settings::

>     USE_L10N = False
>     USE_THOUSAND_SEPARATOR = True
>     DECIMAL_SEPARATOR = &#39;,&#39;
>     THOUSAND_SEPARATOR = &#39;.&#39;

>  an input of ``&quot;1.345&quot;`` is now converted to ``1345`` instead of ``1.345``.

>* Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no
>  longer required to implement ``get_short_name()`` and ``get_full_name()``.
>  (The base implementations that raise ``NotImplementedError`` are removed.)
>  ``django.contrib.admin`` uses these methods if implemented but doesn&#39;t
>  require them. Third-party apps that use these methods may want to adopt a
>  similar approach.

>* The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now
>  kept as integers in JavaScript and JSON i18n view outputs.

>* :meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores
>  connection configuration queries. Previously, if a test opened a new database
>  connection, those queries could be included as part of the
>  ``assertNumQueries()`` count.

>* The default size of the Oracle test tablespace is increased from 20M to 50M
>  and the default autoextend size is increased from 10M to 25M.

>* To improve performance when streaming large result sets from the database,
>  :meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100.
>  The old behavior can be restored using the ``chunk_size`` parameter. For
>  example::

>      Book.objects.iterator(chunk_size=100)

>* Providing unknown package names in the ``packages`` argument of the
>  :class:`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError``
>  instead of passing silently.

>* A model instance&#39;s primary key now appears in the default ``Model.__str__()``
>  method, e.g. ``Question object (1)``.

>* ``makemigrations`` now detects changes to the model field ``limit_choices_to``
>  option. Add this to your existing migrations or accept an auto-generated
>  migration for fields that use it.

>* Performing queries that require :ref:`automatic spatial transformations
>  &lt;automatic-spatial-transformations&gt;` now raises ``NotImplementedError``
>  on MySQL instead of silently using non-transformed geometries.

>* ``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used
>  in the cache backend as an intermediate class in ``CacheKeyWarning``&#39;s
>  inheritance of ``RuntimeWarning``.

>* Renamed ``BaseExpression._output_field`` to ``output_field``. You may need
>  to update custom expressions.

>* In older versions, forms and formsets combine their ``Media`` with widget
>  ``Media`` by concatenating the two. The combining now tries to :ref:`preserve
>  the relative order of elements in each list &lt;form-media-asset-order&gt;`.
>  ``MediaOrderConflictWarning`` is issued if the order can&#39;t be preserved.

>* ``django.contrib.gis.gdal.OGRException`` is removed. It&#39;s been an alias for
>  ``GDALException`` since Django 1.8.

>* Support for GEOS 3.3.x is dropped.

>* The way data is selected for ``GeometryField`` is changed to improve
>  performance, and in raw SQL queries, those fields must now be wrapped in
>  ``connection.ops.select``. See the :ref:`Raw queries note&lt;gis-raw-sql&gt;` in
>  the GIS tutorial for an example.

>.. _deprecated-features-2.0:

>Features deprecated in 2.0
>==========================

>``context`` argument of ``Field.from_db_value()`` and ``Expression.convert_value()``
>------------------------------------------------------------------------------------

>The ``context`` argument of ``Field.from_db_value()`` and
>``Expression.convert_value()`` is unused as it&#39;s always an empty dictionary.
>The signature of both methods is now::

>    (self, value, expression, connection)

>instead of::

>    (self, value, expression, connection, context)

>Support for the old signature in custom fields and expressions remains until
>Django 3.0.

>Miscellaneous
>-------------

>* The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor
>  of ``django.db.backends.postgresql``. It&#39;s been an alias since Django 1.9.
>  This only affects code that imports from the module directly. The
>  ``DATABASES`` setting can still use
>  ``&#39;django.db.backends.postgresql_psycopg2&#39;``, though you can simplify that by
>  using the ``&#39;django.db.backends.postgresql&#39;`` name added in Django 1.9.

>* ``django.shortcuts.render_to_response()`` is deprecated in favor of
>  :func:`django.shortcuts.render`. ``render()`` takes the same arguments
>  except that it also requires a ``request``.

>* The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn&#39;t interact well
>  well with third-party apps and is obsolete since HTML5 has mostly superseded
>  XHTML.

>* ``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the
>  request.

>* The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and
>  :meth:`.QuerySet.latest` is deprecated in favor of passing the field
>  names as arguments. Write ``.earliest(&#39;pub_date&#39;)`` instead of
>  ``.earliest(field_name=&#39;pub_date&#39;)``.

>.. _removed-features-2.0:

>Features removed in 2.0
>=======================

>These features have reached the end of their deprecation cycle and are removed
>in Django 2.0.

>See :ref:`deprecated-features-1.9` for details on these changes, including how
>to remove usage of these features.

>* The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is
>  removed.

>* ``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()``
>  is removed.

>* The ``django.forms.extras`` package is removed.

>* The ``assignment_tag`` helper is removed.

>* The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed.
>  The compatibility layer which allows absolute URLs to be considered equal to
>  relative ones when the path is identical is also removed.

>* ``Field.rel`` and ``Field.remote_field.to`` are removed.

>* The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now
>  required in models and migrations. Consider squashing migrations so that you
>  have fewer of them to update.

>* ``django.db.models.fields.add_lazy_relation()`` is removed.

>* When time zone support is enabled, database backends that don&#39;t support time
>  zones no longer convert aware datetimes to naive values in UTC anymore when
>  such values are passed as parameters to SQL queries executed outside of the
>  ORM, e.g. with ``cursor.execute()``.

>* ``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed.

>* The ``GeoManager`` and ``GeoQuerySet`` classes are removed.

>* The ``django.contrib.gis.geoip`` module is removed.

>* The ``supports_recursion`` check for template loaders is removed from:

>  * ``django.template.engine.Engine.find_template()``
>  * ``django.template.loader_tags.ExtendsNode.find_template()``
>  * ``django.template.loaders.base.Loader.supports_recursion()``
>  * ``django.template.loaders.cached.Loader.supports_recursion()``

>* The ``load_template`` and ``load_template_sources`` template loader methods
>  are removed.

>* The ``template_dirs`` argument for template loaders is removed:

>  * ``django.template.loaders.base.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.cache_key()``
>  * ``django.template.loaders.cached.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.get_template_sources()``
>  * ``django.template.loaders.filesystem.Loader.get_template_sources()``

>* ``django.template.loaders.base.Loader.__call__()`` is removed.

>* Support for custom error views that don&#39;t accept an ``exception`` parameter
>  is removed.

>* The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and
>  ``django.utils.feedgenerator.RssFeed`` is removed.

>* The ``app_name`` argument to ``include()`` is removed.

>* Support for passing a 3-tuple (including ``admin.site.urls``) as the first
>  argument to ``include()`` is removed.

>* Support for setting a URL instance namespace without an application namespace
>  is removed.

>* ``Field._get_val_from_obj()`` is removed.

>* ``django.template.loaders.eggs.Loader`` is removed.

>* The ``current_app`` parameter to the ``contrib.auth`` function-based views is
>  removed.

>* The ``callable_obj`` keyword argument to
>  ``SimpleTestCase.assertRaisesMessage()`` is removed.

>* Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is
>  removed.

>* The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is
>  removed.

>* The ``django.template.loader.LoaderOrigin`` and
>  ``django.template.base.StringOrigin`` aliases for
>  ``django.template.base.Origin`` are removed.

>See :ref:`deprecated-features-1.10` for details on these changes.

>* The ``makemigrations --exit`` option is removed.

>* Support for direct assignment to a reverse foreign key or many-to-many
>  relation is removed.

>* The ``get_srid()`` and ``set_srid()`` methods of
>  ``django.contrib.gis.geos.GEOSGeometry`` are removed.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  ``django.contrib.gis.geos.Point`` are removed.

>* The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon``
>  is removed.

>* ``django.utils.functional.allow_lazy()`` is removed.

>* The ``shell --plain`` option is removed.

>* The ``django.core.urlresolvers`` module is removed in favor of its new
>  location, ``django.urls``.

>* ``CommaSeparatedIntegerField`` is removed, except for support in historical
>  migrations.

>* The template ``Context.has_key()`` method is removed.

>* Support for the ``django.core.files.storage.Storage.accessed_time()``,
>  ``created_time()``, and ``modified_time()`` methods is removed.

>* Support for query lookups using the model name when
>  ``Meta.default_related_name`` is set is removed.

>* The MySQL ``__search`` lookup is removed.

>* The shim for supporting custom related manager classes without a
>  ``_apply_rel_filters()`` method is removed.

>* Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>  rather than properties is no longer supported.

>* The ``Model._meta.virtual_fields`` attribute is removed.

>* The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` and
>  ``virtual`` in ``Model._meta.add_field()`` are removed.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are removed.

>* ``django.contrib.gis.utils.precision_wkt()`` is removed.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is removed.

>* Support for ``Widget._format_value()`` is removed.

>* ``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are
>  removed.

>* The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>  ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>  removed.

>* The ``escape`` filter now uses ``django.utils.html.conditional_escape()``.

>* ``Manager.use_for_related_fields`` is removed.

>* Model ``Manager`` inheritance follows MRO inheritance rules. The requirement
>  to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is
>  removed.

>* Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is
>  removed.


>============================









That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2018-02-05T15:14:07Z,CONTRIBUTOR,False,1,1,1,,JavaScript,51ba15ad21b6a3e34e72ecc25e244cac1ea87900,Update django from 1.11.10 to 2.0.2
153,https://api.github.com/repos/mozilla/distribution-viewer/pulls/332,332,Update django to 2.0.2,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.11.10**. I have updated it to **2.0.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 2.0.2

>==========================

>*February 1, 2018*

>Django 2.0.2 fixes a security issue and several bugs in 2.0.1.

>CVE-2018-6188: Information leakage in ``AuthenticationForm``
>============================================================

>A regression in Django 1.11.8 made
>:class:`~django.contrib.auth.forms.AuthenticationForm` run its
>``confirm_login_allowed()`` method even if an incorrect password is entered.
>This can leak information about a user, depending on what messages
>``confirm_login_allowed()`` raises. If ``confirm_login_allowed()`` isn&#39;t
>overridden, an attacker enter an arbitrary username and see if that user has
>been set to ``is_active=False``. If ``confirm_login_allowed()`` is overridden,
>more sensitive details could be leaked.

>This issue is fixed with the caveat that ``AuthenticationForm`` can no longer
>raise the &quot;This account is inactive.&quot; error if the authentication backend
>rejects inactive users (the default authentication backend, ``ModelBackend``,
>has done that since Django 1.10). This issue will be revisited for Django 2.1
>as a fix to address the caveat will likely be too invasive for inclusion in
>older versions.

>Bugfixes
>========

>* Fixed hidden content at the bottom of the &quot;The install worked successfully!&quot;
>  page for some languages (:ticket:`28885`).

>* Fixed incorrect foreign key nullification if a model has two foreign keys to
>  the same model and a target model is deleted (:ticket:`29016`).

>* Fixed regression in the use of ``QuerySet.values_list(..., flat=True)``
>  followed by ``annotate()`` (:ticket:`29067`).

>* Fixed a regression where a queryset that annotates with geometry objects
>  crashes (:ticket:`29054`).

>* Fixed a regression where ``contrib.auth.authenticate()`` crashes if an
>  authentication backend doesn&#39;t accept ``request`` and a later one does
>  (:ticket:`29071`).

>* Fixed a regression where ``makemigrations`` crashes if a migrations directory
>  doesn&#39;t have an ``__init__.py`` file (:ticket:`29091`).

>* Fixed crash when entering an invalid uuid in ``ModelAdmin.raw_id_fields``
>  (:ticket:`29094`).


>==========================


>### 2.0.1

>==========================

>*January 1, 2018*

>Django 2.0.1 fixes several bugs in 2.0.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).

>* Reallowed filtering a queryset with ``GeometryField=None`` (:ticket:`28896`).

>* Corrected admin check to allow a ``OneToOneField`` in
>  ``ModelAdmin.autocomplete_fields`` (:ticket:`28898`).

>* Fixed a regression on SQLite where ``DecimalField`` returned a result with
>  trailing zeros in the fractional part truncated (:ticket:`28915`).

>* Fixed crash in the ``testserver`` command startup (:ticket:`28941`).

>* Fixed crash when coercing a translatable URL pattern to ``str``
>  (:ticket:`28947`).

>* Fixed crash on SQLite when renaming a field in a model referenced by a
>  ``ManyToManyField`` (:ticket:`28884`).

>* Fixed a crash when chaining ``values()`` or ``values_list()`` after
>  ``QuerySet.select_for_update(of=(...))`` (:ticket:`28944`).

>* Fixed admin changelist crash when using a query expression in the page&#39;s
>  ordering (:ticket:`28958`).


>========================


>### 2.0

>========================

>*December 2, 2017*

>Welcome to Django 2.0!

>These release notes cover the :ref:`new features &lt;whats-new-2.0&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.0&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.11 or earlier. We&#39;ve
>:ref:`dropped some features&lt;removed-features-2.0&gt;` that have reached the end of
>their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for some
>features &lt;deprecated-features-2.0&gt;`.

>This release starts Django&#39;s use of a :ref:`loose form of semantic versioning
>&lt;internal-release-cadence&gt;`, but there aren&#39;t any major backwards incompatible
>changes that might be expected of a 2.0 release. Upgrading should be a similar
>amount of effort as past feature releases.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and only
>officially support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2.7.

>Django 2.0 will be the last release series to support Python 3.4. If you plan
>a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019),
>stick with Django 1.11 LTS (supported until April 2020) instead. Note, however,
>that the end-of-life for Python 3.4 is March 2019.

>Third-party library support for older version of Django
>=======================================================

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able to run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-2.0:

>What&#39;s new in Django 2.0
>========================

>Simplified URL routing syntax
>-----------------------------

>The new :func:`django.urls.path()` function allows a simpler, more readable URL
>routing syntax. For example, this example from previous Django releases::

>    url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),

>could be written as::

>    path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),

>The new syntax supports type coercion of URL parameters. In the example, the
>view will receive the ``year`` keyword argument as an integer rather than as
>a string. Also, the URLs that will match are slightly less constrained in the
>rewritten example. For example, the year 10000 will now match since the year
>integers aren&#39;t constrained to be exactly four digits long as they are in the
>regular expression.

>The ``django.conf.urls.url()`` function from previous versions is now available
>as :func:`django.urls.re_path`. The old location remains for backwards
>compatibility, without an imminent deprecation. The old
>``django.conf.urls.include()`` function is now importable from ``django.urls``
>so you can use ``from django.urls import include, path, re_path`` in your
>URLconfs.

>The :doc:`/topics/http/urls` document is rewritten to feature the new syntax
>and provide more details.

>Mobile-friendly ``contrib.admin``
>---------------------------------

>The admin is now responsive and supports all major mobile devices. Older
>browsers may experience varying levels of graceful degradation.

>Window expressions
>------------------

>The new :class:`~django.db.models.expressions.Window` expression allows
>adding an ``OVER`` clause to querysets. You can use :ref:`window functions
>&lt;window-functions&gt;` and :ref:`aggregate functions &lt;aggregation-functions&gt;` in
>the expression.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :attr:`.ModelAdmin.autocomplete_fields` attribute and
>  :meth:`.ModelAdmin.get_autocomplete_fields` method allow using an
>  `Select2 &lt;https://select2.org&gt;`_ search widget for ``ForeignKey`` and
>  ``ManyToManyField``.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased from
>  36,000 to 100,000.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added MySQL support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` function,
>  :class:`~django.contrib.gis.db.models.functions.GeoHash` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :lookup:`isvalid` lookup, and :ref:`distance lookups &lt;distance-lookups&gt;`.

>* Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and
>  :class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions,
>  supported on PostGIS and SpatiaLite.

>* Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now
>  has its SRID set.

>* Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map&#39;s
>  default zoom level.

>* Made metadata readable and editable on rasters through the
>  :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`,
>  :attr:`~django.contrib.gis.gdal.GDALRaster.info`, and
>  :attr:`~django.contrib.gis.gdal.GDALBand.metadata` attributes.

>* Allowed passing driver-specific creation options to
>  :class:`~django.contrib.gis.gdal.GDALRaster` objects using ``papsz_options``.

>* Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in
>  GDAL&#39;s internal virtual filesystem. Rasters can now be :ref:`created from and
>  converted to binary data &lt;gdal-raster-vsimem&gt;` in-memory.

>* The new :meth:`GDALBand.color_interp()
>  &lt;django.contrib.gis.gdal.GDALBand.color_interp&gt;` method returns the color
>  interpretation for the band.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.ArrayAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.functions.RandomUUID` database
>  function returns a version 4 UUID. It requires use of PostgreSQL&#39;s
>  ``pgcrypto`` extension which can be activated using the new
>  :class:`~django.contrib.postgres.operations.CryptoExtension` migration
>  operation.

>* :class:`django.contrib.postgres.indexes.GinIndex` now supports the
>  ``fastupdate`` and ``gin_pending_list_limit`` parameters.

>* The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows
>  creating ``GiST`` indexes in the database. The new
>  :class:`~django.contrib.postgres.operations.BtreeGistExtension` migration
>  operation installs the ``btree_gist`` extension to add support for operator
>  classes that aren&#39;t built-in.

>* :djadmin:`inspectdb` can now introspect ``JSONField`` and various
>  ``RangeField``\s (``django.contrib.postgres`` must be in ``INSTALLED_APPS``).

>:mod:`django.contrib.sitemaps`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added the ``protocol`` keyword argument to the
>  :class:`~django.contrib.sitemaps.GenericSitemap` constructor.

>Cache
>~~~~~

>* ``cache.set_many()`` now returns a list of keys that failed to be inserted.
>  For the built-in backends, failed inserts can only happen on memcached.

>File Storage
>~~~~~~~~~~~~

>* :meth:`File.open() &lt;django.core.files.File.open&gt;` can be used as a context
>  manager, e.g. ``with file.open() as f:``.

>Forms
>~~~~~

>* The new ``date_attrs`` and ``time_attrs`` arguments for
>  :class:`~django.forms.SplitDateTimeWidget` and
>  :class:`~django.forms.SplitHiddenDateTimeWidget` allow specifying different
>  HTML attributes for the ``DateInput`` and ``TimeInput`` (or hidden)
>  subwidgets.

>* The new :meth:`Form.errors.get_json_data()
>  &lt;django.forms.Form.errors.get_json_data&gt;` method returns form errors as
>  a dictionary suitable for including in a JSON response.

>Generic Views
>~~~~~~~~~~~~~

>* The new :attr:`.ContextMixin.extra_context` attribute allows adding context
>  in ``View.as_view()``.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :djadmin:`inspectdb` now translates MySQL&#39;s unsigned integer columns to
>  ``PositiveIntegerField`` or ``PositiveSmallIntegerField``.

>* The new :option:`makemessages --add-location` option controls the comment
>  format in PO files.

>* :djadmin:`loaddata` can now :ref:`read from stdin &lt;loading-fixtures-stdin&gt;`.

>* The new :option:`diffsettings --output` option allows formatting the output
>  in a unified diff format.

>* On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the
>  column is created as an identity column.

>* On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates.

>Migrations
>~~~~~~~~~~

>* The new :option:`squashmigrations --squashed-name` option allows naming the
>  squashed migration.

>Models
>~~~~~~

>* The new :class:`~django.db.models.functions.StrIndex` database function
>  finds the starting index of a string inside another string.

>* On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity
>  columns`_.

>  .. _`identity columns`: https://docs.oracle.com/database/121/DRDAA/migr_tools_feat.htmDRDAA109

>* The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the
>  number of rows fetched by the Python database client when streaming results
>  from the database. For databases that don&#39;t support server-side cursors, it
>  controls the number of results Django fetches from the database adapter.

>* :meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and
>  :attr:`Meta.get_latest_by &lt;django.db.models.Options.get_latest_by&gt;` now
>  allow ordering by several fields.

>* Added the :class:`~django.db.models.functions.ExtractQuarter` function to
>  extract the quarter from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField`, and exposed it through the
>  :lookup:`quarter` lookup.

>* Added the :class:`~django.db.models.functions.TruncQuarter` function to
>  truncate :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` to the first day of a quarter.

>* Added the :attr:`~django.db.models.Index.db_tablespace` parameter to
>  class-based indexes.

>* If the database supports a native duration field (Oracle and PostgreSQL),
>  :class:`~django.db.models.functions.Extract` now works with
>  :class:`~django.db.models.DurationField`.

>* Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, supported
>  on PostgreSQL and Oracle, to lock only rows from specific tables rather than
>  all selected tables. It may be helpful particularly when
>  :meth:`~.QuerySet.select_for_update()` is used in conjunction with
>  :meth:`~.QuerySet.select_related()`.

>* The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows fetching
>  results based on any unique model field.

>* :meth:`.CursorWrapper.callproc()` now takes an optional dictionary of keyword
>  parameters, if the backend supports this feature. Of Django&#39;s built-in
>  backends, only Oracle supports it.

>* The new :meth:`connection.execute_wrapper()
>  &lt;django.db.backends.base.DatabaseWrapper.execute_wrapper&gt;` method allows
>  :doc:`installing wrappers around execution of database queries
>  &lt;/topics/db/instrumentation&gt;`.

>* The new ``filter`` argument for built-in aggregates allows :ref:`adding
>  different conditionals &lt;conditional-aggregation&gt;` to multiple aggregations
>  over the same fields or relations.

>* Added support for expressions in :attr:`Meta.ordering
>  &lt;django.db.models.Options.ordering&gt;`.

>* The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching
>  results as named tuples.

>* The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to
>  querysets.

>Pagination
>~~~~~~~~~~

>* Added :meth:`Paginator.get_page() &lt;django.core.paginator.Paginator.get_page&gt;`
>  to provide the documented pattern of handling invalid page numbers.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`runserver` Web server supports HTTP 1.1.

>Templates
>~~~~~~~~~

>* To increase the usefulness of :meth:`.Engine.get_default` in third-party
>  apps, it now returns the first engine if multiple ``DjangoTemplates`` engines
>  are configured in ``TEMPLATES`` rather than raising ``ImproperlyConfigured``.

>* Custom template tags may now accept keyword-only arguments.

>Tests
>~~~~~

>* Added threading support to :class:`~django.test.LiveServerTestCase`.

>* Added settings that allow customizing the test tablespace parameters for
>  Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`,
>  :setting:`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`.

>Validators
>~~~~~~~~~~

>* The new :class:`.ProhibitNullCharactersValidator` disallows the null
>  character in the input of the :class:`~django.forms.CharField` form field
>  and its subclasses. Null character input was observed from vulnerability
>  scanning tools. Most databases silently discard null characters, but
>  psycopg2 2.7+ raises an exception when trying to save a null character to
>  a char/text field with PostgreSQL.

>.. _backwards-incompatible-2.0:

>Backwards incompatible changes in 2.0
>=====================================

>Removed support for bytestrings in some places
>----------------------------------------------

>To support native Python 2 strings, older Django versions had to accept both
>bytestrings and unicode strings. Now that Python 2 support is dropped,
>bytestrings should only be encountered around input/output boundaries (handling
>of binary fields or HTTP streams, for example). You might have to update your
>code to limit bytestring usage to a minimum, as Django no longer accepts
>bytestrings in certain code paths. Python&#39;s :option:`-b` option may help detect
>that mistake in your code.

>For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to
>coerce the ``args`` and ``kwargs`` it receives, prior to their placement in
>the URL. For bytestrings, this creates a string with an undesired ``b`` prefix
>as well as additional quotes (``str(b&#39;foo&#39;)`` is ``&quot;b&#39;foo&#39;&quot;``). To adapt, call
>``decode()`` on the bytestring before passing it to ``reverse()``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.datetime_cast_date_sql()``,
>  ``datetime_cast_time_sql()``, ``datetime_trunc_sql()``,
>  ``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return
>  only the SQL to perform the operation instead of SQL and a list of
>  parameters.

>* Third-party database backends should add a ``DatabaseWrapper.display_name``
>  attribute with the name of the database that your backend works with. Django
>  may use it in various messages, such as in system checks.

>* The first argument of ``SchemaEditor._alter_column_type_sql()`` is now
>  ``model`` rather than ``table``.

>* The first argument of ``SchemaEditor._create_index_name()`` is now
>  ``table_name`` rather than ``model``.

>* To enable ``FOR UPDATE OF`` support, set
>  ``DatabaseFeatures.has_select_for_update_of = True``. If the database
>  requires that the arguments to ``OF`` be columns rather than tables, set
>  ``DatabaseFeatures.select_for_update_of_column = True``.

>* To enable support for :class:`~django.db.models.expressions.Window`
>  expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You
>  may need to customize the ``DatabaseOperations.window_start_rows_start_end()``
>  and/or ``window_start_range_start_end()`` methods.

>* Third-party database backends should add a
>  ``DatabaseOperations.cast_char_field_without_max_length`` attribute with the
>  database data type that will be used in the
>  :class:`~django.db.models.functions.Cast` function for a ``CharField`` if the
>  ``max_length`` argument isn&#39;t provided.

>* The first argument of ``DatabaseCreation._clone_test_db()`` and
>  ``get_test_db_clone_settings()`` is now ``suffix`` rather
>  than ``number`` (in case you want to rename the signatures in your backend
>  for consistency). ``django.test`` also now passes those values as strings
>  rather than as integers.

>* Third-party database backends should add a
>  ``DatabaseIntrospection.get_sequences()`` method based on the stub in
>  ``BaseDatabaseIntrospection``.

>Dropped support for Oracle 11.2
>-------------------------------

>The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be
>supported until April 2020 which almost reaches this date. Django 2.0
>officially supports Oracle 12.1+.

>Default MySQL isolation level is read committed
>-----------------------------------------------

>MySQL&#39;s default isolation level, repeatable read, may cause data loss in
>typical Django usage. To prevent that and for consistency with other databases,
>the default isolation level is now read committed. You can use the
>:setting:`DATABASES` setting to :ref:`use a different isolation level
>&lt;mysql-isolation-level&gt;`, if needed.

>:attr:`AbstractUser.last_name &lt;django.contrib.auth.models.User.last_name&gt;` ``max_length`` increased to 150
>----------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.last_name` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>If you want to preserve the 30 character limit for last names, use a custom
>form::

>    from django.contrib.auth.forms import UserChangeForm

>    class MyUserChangeForm(UserChangeForm):
>        last_name = forms.CharField(max_length=30, required=False)

>If you wish to keep this restriction in the admin when editing users, set
>``UserAdmin.form`` to use this form::

>    from django.contrib.auth.admin import UserAdmin
>    from django.contrib.auth.models import User

>    class MyUserAdmin(UserAdmin):
>        form = MyUserChangeForm

>    admin.site.unregister(User)
>    admin.site.register(User, MyUserAdmin)

>``QuerySet.reverse()`` and ``last()`` are prohibited after slicing
>------------------------------------------------------------------

>Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to
>unexpected results due to the slice being applied after reordering. This is
>now prohibited, e.g.::

>    &gt;&gt;&gt; Model.objects.all()[:2].reverse()
>    Traceback (most recent call last):
>    ...
>    TypeError: Cannot reverse a query once a slice has been taken.

>Form fields no longer accept optional arguments as positional arguments
>-----------------------------------------------------------------------

>To help prevent runtime errors due to incorrect ordering of form field
>arguments, optional arguments of built-in form fields are no longer accepted
>as positional arguments. For example::

>    forms.IntegerField(25, 10)

>raises an exception and should be replaced with::

>    forms.IntegerField(max_value=25, min_value=10)

>``call_command()`` validates the options it receives
>----------------------------------------------------

>``call_command()`` now validates that the argument parser of the command being
>called defines all of the options passed to ``call_command()``.

>For custom management commands that use options not created using
>``parser.add_argument()``, add a ``stealth_options`` attribute on the command::

>    class MyCommand(BaseCommand):
>        stealth_options = (&#39;option_name&#39;, ...)

>Indexes no longer accept positional arguments
>---------------------------------------------

>For example::

>    models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)

>raises an exception and should be replaced with::

>    models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)

>Foreign key constraints are now enabled on SQLite
>-------------------------------------------------

>This will appear as a backwards-incompatible change (``IntegrityError:
>FOREIGN KEY constraint failed``) if attempting to save an existing model
>instance that&#39;s violating a foreign key constraint.

>Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead of
>``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate
>foreign keys with the new definition, particularly if you&#39;re using a pattern
>like this::

>    from django.db import transaction

>    with transaction.atomic():
>        Book.objects.create(author_id=1)
>        Author.objects.create(id=1)

>If you don&#39;t recreate the foreign key as ``DEFERRED``, the first ``create()``
>would fail now that foreign key constraints are enforced.

>Backup your database first! After upgrading to Django 2.0, you can then
>rebuild tables using a script similar to this::

>    from django.apps import apps
>    from django.db import connection

>    for app in apps.get_app_configs():
>        for model in app.get_models(include_auto_created=True):
>            if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
>                for base in model.__bases__:
>                    if hasattr(base, &#39;_meta&#39;):
>                        base._meta.local_many_to_many = []
>                model._meta.local_many_to_many = []
>                with connection.schema_editor() as editor:
>                    editor._remake_table(model)

>This script hasn&#39;t received extensive testing and needs adaption for various
>cases such as multiple databases. Feel free to contribute improvements.

>In addition, because of a table alteration limitation of SQLite, it&#39;s prohibited
>to perform :class:`~django.db.migrations.operations.RenameModel` and
>:class:`~django.db.migrations.operations.RenameField` operations on models or
>fields referenced by other models in a transaction. In order to allow migrations
>containing these operations to be applied, you must set the
>``Migration.atomic`` attribute to ``False``.

>Miscellaneous
>-------------

>* The ``SessionAuthenticationMiddleware`` class is removed. It provided no
>  functionality since session authentication is unconditionally enabled in
>  Django 1.10.

>* The default HTTP error handlers (``handler404``, etc.) are now callables
>  instead of dotted Python path strings. Django favors callable references
>  since they provide better performance and debugging experience.

>* :class:`~django.views.generic.base.RedirectView` no longer silences
>  ``NoReverseMatch`` if the ``pattern_name`` doesn&#39;t exist.

>* When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and
>  :class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR`
>  and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the
>  settings::

>     USE_L10N = False
>     USE_THOUSAND_SEPARATOR = True
>     DECIMAL_SEPARATOR = &#39;,&#39;
>     THOUSAND_SEPARATOR = &#39;.&#39;

>  an input of ``&quot;1.345&quot;`` is now converted to ``1345`` instead of ``1.345``.

>* Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no
>  longer required to implement ``get_short_name()`` and ``get_full_name()``.
>  (The base implementations that raise ``NotImplementedError`` are removed.)
>  ``django.contrib.admin`` uses these methods if implemented but doesn&#39;t
>  require them. Third-party apps that use these methods may want to adopt a
>  similar approach.

>* The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now
>  kept as integers in JavaScript and JSON i18n view outputs.

>* :meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores
>  connection configuration queries. Previously, if a test opened a new database
>  connection, those queries could be included as part of the
>  ``assertNumQueries()`` count.

>* The default size of the Oracle test tablespace is increased from 20M to 50M
>  and the default autoextend size is increased from 10M to 25M.

>* To improve performance when streaming large result sets from the database,
>  :meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100.
>  The old behavior can be restored using the ``chunk_size`` parameter. For
>  example::

>      Book.objects.iterator(chunk_size=100)

>* Providing unknown package names in the ``packages`` argument of the
>  :class:`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError``
>  instead of passing silently.

>* A model instance&#39;s primary key now appears in the default ``Model.__str__()``
>  method, e.g. ``Question object (1)``.

>* ``makemigrations`` now detects changes to the model field ``limit_choices_to``
>  option. Add this to your existing migrations or accept an auto-generated
>  migration for fields that use it.

>* Performing queries that require :ref:`automatic spatial transformations
>  &lt;automatic-spatial-transformations&gt;` now raises ``NotImplementedError``
>  on MySQL instead of silently using non-transformed geometries.

>* ``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used
>  in the cache backend as an intermediate class in ``CacheKeyWarning``&#39;s
>  inheritance of ``RuntimeWarning``.

>* Renamed ``BaseExpression._output_field`` to ``output_field``. You may need
>  to update custom expressions.

>* In older versions, forms and formsets combine their ``Media`` with widget
>  ``Media`` by concatenating the two. The combining now tries to :ref:`preserve
>  the relative order of elements in each list &lt;form-media-asset-order&gt;`.
>  ``MediaOrderConflictWarning`` is issued if the order can&#39;t be preserved.

>* ``django.contrib.gis.gdal.OGRException`` is removed. It&#39;s been an alias for
>  ``GDALException`` since Django 1.8.

>* Support for GEOS 3.3.x is dropped.

>* The way data is selected for ``GeometryField`` is changed to improve
>  performance, and in raw SQL queries, those fields must now be wrapped in
>  ``connection.ops.select``. See the :ref:`Raw queries note&lt;gis-raw-sql&gt;` in
>  the GIS tutorial for an example.

>.. _deprecated-features-2.0:

>Features deprecated in 2.0
>==========================

>``context`` argument of ``Field.from_db_value()`` and ``Expression.convert_value()``
>------------------------------------------------------------------------------------

>The ``context`` argument of ``Field.from_db_value()`` and
>``Expression.convert_value()`` is unused as it&#39;s always an empty dictionary.
>The signature of both methods is now::

>    (self, value, expression, connection)

>instead of::

>    (self, value, expression, connection, context)

>Support for the old signature in custom fields and expressions remains until
>Django 3.0.

>Miscellaneous
>-------------

>* The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor
>  of ``django.db.backends.postgresql``. It&#39;s been an alias since Django 1.9.
>  This only affects code that imports from the module directly. The
>  ``DATABASES`` setting can still use
>  ``&#39;django.db.backends.postgresql_psycopg2&#39;``, though you can simplify that by
>  using the ``&#39;django.db.backends.postgresql&#39;`` name added in Django 1.9.

>* ``django.shortcuts.render_to_response()`` is deprecated in favor of
>  :func:`django.shortcuts.render`. ``render()`` takes the same arguments
>  except that it also requires a ``request``.

>* The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn&#39;t interact well
>  well with third-party apps and is obsolete since HTML5 has mostly superseded
>  XHTML.

>* ``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the
>  request.

>* The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and
>  :meth:`.QuerySet.latest` is deprecated in favor of passing the field
>  names as arguments. Write ``.earliest(&#39;pub_date&#39;)`` instead of
>  ``.earliest(field_name=&#39;pub_date&#39;)``.

>.. _removed-features-2.0:

>Features removed in 2.0
>=======================

>These features have reached the end of their deprecation cycle and are removed
>in Django 2.0.

>See :ref:`deprecated-features-1.9` for details on these changes, including how
>to remove usage of these features.

>* The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is
>  removed.

>* ``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()``
>  is removed.

>* The ``django.forms.extras`` package is removed.

>* The ``assignment_tag`` helper is removed.

>* The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed.
>  The compatibility layer which allows absolute URLs to be considered equal to
>  relative ones when the path is identical is also removed.

>* ``Field.rel`` and ``Field.remote_field.to`` are removed.

>* The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now
>  required in models and migrations. Consider squashing migrations so that you
>  have fewer of them to update.

>* ``django.db.models.fields.add_lazy_relation()`` is removed.

>* When time zone support is enabled, database backends that don&#39;t support time
>  zones no longer convert aware datetimes to naive values in UTC anymore when
>  such values are passed as parameters to SQL queries executed outside of the
>  ORM, e.g. with ``cursor.execute()``.

>* ``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed.

>* The ``GeoManager`` and ``GeoQuerySet`` classes are removed.

>* The ``django.contrib.gis.geoip`` module is removed.

>* The ``supports_recursion`` check for template loaders is removed from:

>  * ``django.template.engine.Engine.find_template()``
>  * ``django.template.loader_tags.ExtendsNode.find_template()``
>  * ``django.template.loaders.base.Loader.supports_recursion()``
>  * ``django.template.loaders.cached.Loader.supports_recursion()``

>* The ``load_template`` and ``load_template_sources`` template loader methods
>  are removed.

>* The ``template_dirs`` argument for template loaders is removed:

>  * ``django.template.loaders.base.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.cache_key()``
>  * ``django.template.loaders.cached.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.get_template_sources()``
>  * ``django.template.loaders.filesystem.Loader.get_template_sources()``

>* ``django.template.loaders.base.Loader.__call__()`` is removed.

>* Support for custom error views that don&#39;t accept an ``exception`` parameter
>  is removed.

>* The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and
>  ``django.utils.feedgenerator.RssFeed`` is removed.

>* The ``app_name`` argument to ``include()`` is removed.

>* Support for passing a 3-tuple (including ``admin.site.urls``) as the first
>  argument to ``include()`` is removed.

>* Support for setting a URL instance namespace without an application namespace
>  is removed.

>* ``Field._get_val_from_obj()`` is removed.

>* ``django.template.loaders.eggs.Loader`` is removed.

>* The ``current_app`` parameter to the ``contrib.auth`` function-based views is
>  removed.

>* The ``callable_obj`` keyword argument to
>  ``SimpleTestCase.assertRaisesMessage()`` is removed.

>* Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is
>  removed.

>* The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is
>  removed.

>* The ``django.template.loader.LoaderOrigin`` and
>  ``django.template.base.StringOrigin`` aliases for
>  ``django.template.base.Origin`` are removed.

>See :ref:`deprecated-features-1.10` for details on these changes.

>* The ``makemigrations --exit`` option is removed.

>* Support for direct assignment to a reverse foreign key or many-to-many
>  relation is removed.

>* The ``get_srid()`` and ``set_srid()`` methods of
>  ``django.contrib.gis.geos.GEOSGeometry`` are removed.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  ``django.contrib.gis.geos.Point`` are removed.

>* The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon``
>  is removed.

>* ``django.utils.functional.allow_lazy()`` is removed.

>* The ``shell --plain`` option is removed.

>* The ``django.core.urlresolvers`` module is removed in favor of its new
>  location, ``django.urls``.

>* ``CommaSeparatedIntegerField`` is removed, except for support in historical
>  migrations.

>* The template ``Context.has_key()`` method is removed.

>* Support for the ``django.core.files.storage.Storage.accessed_time()``,
>  ``created_time()``, and ``modified_time()`` methods is removed.

>* Support for query lookups using the model name when
>  ``Meta.default_related_name`` is set is removed.

>* The MySQL ``__search`` lookup is removed.

>* The shim for supporting custom related manager classes without a
>  ``_apply_rel_filters()`` method is removed.

>* Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>  rather than properties is no longer supported.

>* The ``Model._meta.virtual_fields`` attribute is removed.

>* The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` and
>  ``virtual`` in ``Model._meta.add_field()`` are removed.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are removed.

>* ``django.contrib.gis.utils.precision_wkt()`` is removed.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is removed.

>* Support for ``Widget._format_value()`` is removed.

>* ``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are
>  removed.

>* The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>  ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>  removed.

>* The ``escape`` filter now uses ``django.utils.html.conditional_escape()``.

>* ``Manager.use_for_related_fields`` is removed.

>* Model ``Manager`` inheritance follows MRO inheritance rules. The requirement
>  to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is
>  removed.

>* Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is
>  removed.


>============================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2018-02-02T19:18:27Z,CONTRIBUTOR,False,1,1,1,,JavaScript,9a70ee2882bcc950b708a09bcd4bfaba488b0050,Update django from 1.11.10 to 2.0.2
154,https://api.github.com/repos/mozilla/distribution-viewer/pulls/331,331,Update deps,,robhudson,1106,2018-02-02T18:49:11Z,MEMBER,True,35,253,12,,JavaScript,45da721927307543ff74cb0544f35796f5231993,Move to dockerflow lib
155,https://api.github.com/repos/mozilla/distribution-viewer/pulls/331,331,Update deps,,robhudson,1106,2018-02-02T18:49:11Z,MEMBER,True,35,253,12,,JavaScript,29bdda8bb5ee44f9df7bc43e5ea0650ec2b44e68,Squash migrations
156,https://api.github.com/repos/mozilla/distribution-viewer/pulls/331,331,Update deps,,robhudson,1106,2018-02-02T18:49:11Z,MEMBER,True,35,253,12,,JavaScript,3d443fbae1eef2f1d08df5167d8b71b38da9a765,Update dependencies
157,https://api.github.com/repos/mozilla/distribution-viewer/pulls/330,330,Update django to 2.0.2,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.8**. I have updated it to **2.0.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 2.0.2

>==========================

>*February 1, 2018*

>Django 2.0.2 fixes a security issue and several bugs in 2.0.1.

>CVE-2018-6188: Information leakage in ``AuthenticationForm``
>============================================================

>A regression in Django 1.11.8 made
>:class:`~django.contrib.auth.forms.AuthenticationForm` run its
>``confirm_login_allowed()`` method even if an incorrect password is entered.
>This can leak information about a user, depending on what messages
>``confirm_login_allowed()`` raises. If ``confirm_login_allowed()`` isn&#39;t
>overridden, an attacker enter an arbitrary username and see if that user has
>been set to ``is_active=False``. If ``confirm_login_allowed()`` is overridden,
>more sensitive details could be leaked.

>This issue is fixed with the caveat that ``AuthenticationForm`` can no longer
>raise the &quot;This account is inactive.&quot; error if the authentication backend
>rejects inactive users (the default authentication backend, ``ModelBackend``,
>has done that since Django 1.10). This issue will be revisited for Django 2.1
>as a fix to address the caveat will likely be too invasive for inclusion in
>older versions.

>Bugfixes
>========

>* Fixed hidden content at the bottom of the &quot;The install worked successfully!&quot;
>  page for some languages (:ticket:`28885`).

>* Fixed incorrect foreign key nullification if a model has two foreign keys to
>  the same model and a target model is deleted (:ticket:`29016`).

>* Fixed regression in the use of ``QuerySet.values_list(..., flat=True)``
>  followed by ``annotate()`` (:ticket:`29067`).

>* Fixed a regression where a queryset that annotates with geometry objects
>  crashes (:ticket:`29054`).

>* Fixed a regression where ``contrib.auth.authenticate()`` crashes if an
>  authentication backend doesn&#39;t accept ``request`` and a later one does
>  (:ticket:`29071`).

>* Fixed a regression where ``makemigrations`` crashes if a migrations directory
>  doesn&#39;t have an ``__init__.py`` file (:ticket:`29091`).

>* Fixed crash when entering an invalid uuid in ``ModelAdmin.raw_id_fields``
>  (:ticket:`29094`).


>==========================


>### 2.0.1

>==========================

>*January 1, 2018*

>Django 2.0.1 fixes several bugs in 2.0.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).

>* Reallowed filtering a queryset with ``GeometryField=None`` (:ticket:`28896`).

>* Corrected admin check to allow a ``OneToOneField`` in
>  ``ModelAdmin.autocomplete_fields`` (:ticket:`28898`).

>* Fixed a regression on SQLite where ``DecimalField`` returned a result with
>  trailing zeros in the fractional part truncated (:ticket:`28915`).

>* Fixed crash in the ``testserver`` command startup (:ticket:`28941`).

>* Fixed crash when coercing a translatable URL pattern to ``str``
>  (:ticket:`28947`).

>* Fixed crash on SQLite when renaming a field in a model referenced by a
>  ``ManyToManyField`` (:ticket:`28884`).

>* Fixed a crash when chaining ``values()`` or ``values_list()`` after
>  ``QuerySet.select_for_update(of=(...))`` (:ticket:`28944`).

>* Fixed admin changelist crash when using a query expression in the page&#39;s
>  ordering (:ticket:`28958`).


>========================


>### 2.0

>========================

>*December 2, 2017*

>Welcome to Django 2.0!

>These release notes cover the :ref:`new features &lt;whats-new-2.0&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.0&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.11 or earlier. We&#39;ve
>:ref:`dropped some features&lt;removed-features-2.0&gt;` that have reached the end of
>their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for some
>features &lt;deprecated-features-2.0&gt;`.

>This release starts Django&#39;s use of a :ref:`loose form of semantic versioning
>&lt;internal-release-cadence&gt;`, but there aren&#39;t any major backwards incompatible
>changes that might be expected of a 2.0 release. Upgrading should be a similar
>amount of effort as past feature releases.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and only
>officially support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2.7.

>Django 2.0 will be the last release series to support Python 3.4. If you plan
>a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019),
>stick with Django 1.11 LTS (supported until April 2020) instead. Note, however,
>that the end-of-life for Python 3.4 is March 2019.

>Third-party library support for older version of Django
>=======================================================

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able to run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-2.0:

>What&#39;s new in Django 2.0
>========================

>Simplified URL routing syntax
>-----------------------------

>The new :func:`django.urls.path()` function allows a simpler, more readable URL
>routing syntax. For example, this example from previous Django releases::

>    url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),

>could be written as::

>    path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),

>The new syntax supports type coercion of URL parameters. In the example, the
>view will receive the ``year`` keyword argument as an integer rather than as
>a string. Also, the URLs that will match are slightly less constrained in the
>rewritten example. For example, the year 10000 will now match since the year
>integers aren&#39;t constrained to be exactly four digits long as they are in the
>regular expression.

>The ``django.conf.urls.url()`` function from previous versions is now available
>as :func:`django.urls.re_path`. The old location remains for backwards
>compatibility, without an imminent deprecation. The old
>``django.conf.urls.include()`` function is now importable from ``django.urls``
>so you can use ``from django.urls import include, path, re_path`` in your
>URLconfs.

>The :doc:`/topics/http/urls` document is rewritten to feature the new syntax
>and provide more details.

>Mobile-friendly ``contrib.admin``
>---------------------------------

>The admin is now responsive and supports all major mobile devices. Older
>browsers may experience varying levels of graceful degradation.

>Window expressions
>------------------

>The new :class:`~django.db.models.expressions.Window` expression allows
>adding an ``OVER`` clause to querysets. You can use :ref:`window functions
>&lt;window-functions&gt;` and :ref:`aggregate functions &lt;aggregation-functions&gt;` in
>the expression.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :attr:`.ModelAdmin.autocomplete_fields` attribute and
>  :meth:`.ModelAdmin.get_autocomplete_fields` method allow using an
>  `Select2 &lt;https://select2.org&gt;`_ search widget for ``ForeignKey`` and
>  ``ManyToManyField``.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased from
>  36,000 to 100,000.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added MySQL support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` function,
>  :class:`~django.contrib.gis.db.models.functions.GeoHash` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :lookup:`isvalid` lookup, and :ref:`distance lookups &lt;distance-lookups&gt;`.

>* Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and
>  :class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions,
>  supported on PostGIS and SpatiaLite.

>* Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now
>  has its SRID set.

>* Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map&#39;s
>  default zoom level.

>* Made metadata readable and editable on rasters through the
>  :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`,
>  :attr:`~django.contrib.gis.gdal.GDALRaster.info`, and
>  :attr:`~django.contrib.gis.gdal.GDALBand.metadata` attributes.

>* Allowed passing driver-specific creation options to
>  :class:`~django.contrib.gis.gdal.GDALRaster` objects using ``papsz_options``.

>* Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in
>  GDAL&#39;s internal virtual filesystem. Rasters can now be :ref:`created from and
>  converted to binary data &lt;gdal-raster-vsimem&gt;` in-memory.

>* The new :meth:`GDALBand.color_interp()
>  &lt;django.contrib.gis.gdal.GDALBand.color_interp&gt;` method returns the color
>  interpretation for the band.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.ArrayAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.functions.RandomUUID` database
>  function returns a version 4 UUID. It requires use of PostgreSQL&#39;s
>  ``pgcrypto`` extension which can be activated using the new
>  :class:`~django.contrib.postgres.operations.CryptoExtension` migration
>  operation.

>* :class:`django.contrib.postgres.indexes.GinIndex` now supports the
>  ``fastupdate`` and ``gin_pending_list_limit`` parameters.

>* The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows
>  creating ``GiST`` indexes in the database. The new
>  :class:`~django.contrib.postgres.operations.BtreeGistExtension` migration
>  operation installs the ``btree_gist`` extension to add support for operator
>  classes that aren&#39;t built-in.

>* :djadmin:`inspectdb` can now introspect ``JSONField`` and various
>  ``RangeField``\s (``django.contrib.postgres`` must be in ``INSTALLED_APPS``).

>:mod:`django.contrib.sitemaps`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added the ``protocol`` keyword argument to the
>  :class:`~django.contrib.sitemaps.GenericSitemap` constructor.

>Cache
>~~~~~

>* ``cache.set_many()`` now returns a list of keys that failed to be inserted.
>  For the built-in backends, failed inserts can only happen on memcached.

>File Storage
>~~~~~~~~~~~~

>* :meth:`File.open() &lt;django.core.files.File.open&gt;` can be used as a context
>  manager, e.g. ``with file.open() as f:``.

>Forms
>~~~~~

>* The new ``date_attrs`` and ``time_attrs`` arguments for
>  :class:`~django.forms.SplitDateTimeWidget` and
>  :class:`~django.forms.SplitHiddenDateTimeWidget` allow specifying different
>  HTML attributes for the ``DateInput`` and ``TimeInput`` (or hidden)
>  subwidgets.

>* The new :meth:`Form.errors.get_json_data()
>  &lt;django.forms.Form.errors.get_json_data&gt;` method returns form errors as
>  a dictionary suitable for including in a JSON response.

>Generic Views
>~~~~~~~~~~~~~

>* The new :attr:`.ContextMixin.extra_context` attribute allows adding context
>  in ``View.as_view()``.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :djadmin:`inspectdb` now translates MySQL&#39;s unsigned integer columns to
>  ``PositiveIntegerField`` or ``PositiveSmallIntegerField``.

>* The new :option:`makemessages --add-location` option controls the comment
>  format in PO files.

>* :djadmin:`loaddata` can now :ref:`read from stdin &lt;loading-fixtures-stdin&gt;`.

>* The new :option:`diffsettings --output` option allows formatting the output
>  in a unified diff format.

>* On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the
>  column is created as an identity column.

>* On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates.

>Migrations
>~~~~~~~~~~

>* The new :option:`squashmigrations --squashed-name` option allows naming the
>  squashed migration.

>Models
>~~~~~~

>* The new :class:`~django.db.models.functions.StrIndex` database function
>  finds the starting index of a string inside another string.

>* On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity
>  columns`_.

>  .. _`identity columns`: https://docs.oracle.com/database/121/DRDAA/migr_tools_feat.htmDRDAA109

>* The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the
>  number of rows fetched by the Python database client when streaming results
>  from the database. For databases that don&#39;t support server-side cursors, it
>  controls the number of results Django fetches from the database adapter.

>* :meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and
>  :attr:`Meta.get_latest_by &lt;django.db.models.Options.get_latest_by&gt;` now
>  allow ordering by several fields.

>* Added the :class:`~django.db.models.functions.ExtractQuarter` function to
>  extract the quarter from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField`, and exposed it through the
>  :lookup:`quarter` lookup.

>* Added the :class:`~django.db.models.functions.TruncQuarter` function to
>  truncate :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` to the first day of a quarter.

>* Added the :attr:`~django.db.models.Index.db_tablespace` parameter to
>  class-based indexes.

>* If the database supports a native duration field (Oracle and PostgreSQL),
>  :class:`~django.db.models.functions.Extract` now works with
>  :class:`~django.db.models.DurationField`.

>* Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, supported
>  on PostgreSQL and Oracle, to lock only rows from specific tables rather than
>  all selected tables. It may be helpful particularly when
>  :meth:`~.QuerySet.select_for_update()` is used in conjunction with
>  :meth:`~.QuerySet.select_related()`.

>* The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows fetching
>  results based on any unique model field.

>* :meth:`.CursorWrapper.callproc()` now takes an optional dictionary of keyword
>  parameters, if the backend supports this feature. Of Django&#39;s built-in
>  backends, only Oracle supports it.

>* The new :meth:`connection.execute_wrapper()
>  &lt;django.db.backends.base.DatabaseWrapper.execute_wrapper&gt;` method allows
>  :doc:`installing wrappers around execution of database queries
>  &lt;/topics/db/instrumentation&gt;`.

>* The new ``filter`` argument for built-in aggregates allows :ref:`adding
>  different conditionals &lt;conditional-aggregation&gt;` to multiple aggregations
>  over the same fields or relations.

>* Added support for expressions in :attr:`Meta.ordering
>  &lt;django.db.models.Options.ordering&gt;`.

>* The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching
>  results as named tuples.

>* The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to
>  querysets.

>Pagination
>~~~~~~~~~~

>* Added :meth:`Paginator.get_page() &lt;django.core.paginator.Paginator.get_page&gt;`
>  to provide the documented pattern of handling invalid page numbers.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`runserver` Web server supports HTTP 1.1.

>Templates
>~~~~~~~~~

>* To increase the usefulness of :meth:`.Engine.get_default` in third-party
>  apps, it now returns the first engine if multiple ``DjangoTemplates`` engines
>  are configured in ``TEMPLATES`` rather than raising ``ImproperlyConfigured``.

>* Custom template tags may now accept keyword-only arguments.

>Tests
>~~~~~

>* Added threading support to :class:`~django.test.LiveServerTestCase`.

>* Added settings that allow customizing the test tablespace parameters for
>  Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`,
>  :setting:`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`.

>Validators
>~~~~~~~~~~

>* The new :class:`.ProhibitNullCharactersValidator` disallows the null
>  character in the input of the :class:`~django.forms.CharField` form field
>  and its subclasses. Null character input was observed from vulnerability
>  scanning tools. Most databases silently discard null characters, but
>  psycopg2 2.7+ raises an exception when trying to save a null character to
>  a char/text field with PostgreSQL.

>.. _backwards-incompatible-2.0:

>Backwards incompatible changes in 2.0
>=====================================

>Removed support for bytestrings in some places
>----------------------------------------------

>To support native Python 2 strings, older Django versions had to accept both
>bytestrings and unicode strings. Now that Python 2 support is dropped,
>bytestrings should only be encountered around input/output boundaries (handling
>of binary fields or HTTP streams, for example). You might have to update your
>code to limit bytestring usage to a minimum, as Django no longer accepts
>bytestrings in certain code paths. Python&#39;s :option:`-b` option may help detect
>that mistake in your code.

>For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to
>coerce the ``args`` and ``kwargs`` it receives, prior to their placement in
>the URL. For bytestrings, this creates a string with an undesired ``b`` prefix
>as well as additional quotes (``str(b&#39;foo&#39;)`` is ``&quot;b&#39;foo&#39;&quot;``). To adapt, call
>``decode()`` on the bytestring before passing it to ``reverse()``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.datetime_cast_date_sql()``,
>  ``datetime_cast_time_sql()``, ``datetime_trunc_sql()``,
>  ``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return
>  only the SQL to perform the operation instead of SQL and a list of
>  parameters.

>* Third-party database backends should add a ``DatabaseWrapper.display_name``
>  attribute with the name of the database that your backend works with. Django
>  may use it in various messages, such as in system checks.

>* The first argument of ``SchemaEditor._alter_column_type_sql()`` is now
>  ``model`` rather than ``table``.

>* The first argument of ``SchemaEditor._create_index_name()`` is now
>  ``table_name`` rather than ``model``.

>* To enable ``FOR UPDATE OF`` support, set
>  ``DatabaseFeatures.has_select_for_update_of = True``. If the database
>  requires that the arguments to ``OF`` be columns rather than tables, set
>  ``DatabaseFeatures.select_for_update_of_column = True``.

>* To enable support for :class:`~django.db.models.expressions.Window`
>  expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You
>  may need to customize the ``DatabaseOperations.window_start_rows_start_end()``
>  and/or ``window_start_range_start_end()`` methods.

>* Third-party database backends should add a
>  ``DatabaseOperations.cast_char_field_without_max_length`` attribute with the
>  database data type that will be used in the
>  :class:`~django.db.models.functions.Cast` function for a ``CharField`` if the
>  ``max_length`` argument isn&#39;t provided.

>* The first argument of ``DatabaseCreation._clone_test_db()`` and
>  ``get_test_db_clone_settings()`` is now ``suffix`` rather
>  than ``number`` (in case you want to rename the signatures in your backend
>  for consistency). ``django.test`` also now passes those values as strings
>  rather than as integers.

>* Third-party database backends should add a
>  ``DatabaseIntrospection.get_sequences()`` method based on the stub in
>  ``BaseDatabaseIntrospection``.

>Dropped support for Oracle 11.2
>-------------------------------

>The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be
>supported until April 2020 which almost reaches this date. Django 2.0
>officially supports Oracle 12.1+.

>Default MySQL isolation level is read committed
>-----------------------------------------------

>MySQL&#39;s default isolation level, repeatable read, may cause data loss in
>typical Django usage. To prevent that and for consistency with other databases,
>the default isolation level is now read committed. You can use the
>:setting:`DATABASES` setting to :ref:`use a different isolation level
>&lt;mysql-isolation-level&gt;`, if needed.

>:attr:`AbstractUser.last_name &lt;django.contrib.auth.models.User.last_name&gt;` ``max_length`` increased to 150
>----------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.last_name` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>If you want to preserve the 30 character limit for last names, use a custom
>form::

>    from django.contrib.auth.forms import UserChangeForm

>    class MyUserChangeForm(UserChangeForm):
>        last_name = forms.CharField(max_length=30, required=False)

>If you wish to keep this restriction in the admin when editing users, set
>``UserAdmin.form`` to use this form::

>    from django.contrib.auth.admin import UserAdmin
>    from django.contrib.auth.models import User

>    class MyUserAdmin(UserAdmin):
>        form = MyUserChangeForm

>    admin.site.unregister(User)
>    admin.site.register(User, MyUserAdmin)

>``QuerySet.reverse()`` and ``last()`` are prohibited after slicing
>------------------------------------------------------------------

>Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to
>unexpected results due to the slice being applied after reordering. This is
>now prohibited, e.g.::

>    &gt;&gt;&gt; Model.objects.all()[:2].reverse()
>    Traceback (most recent call last):
>    ...
>    TypeError: Cannot reverse a query once a slice has been taken.

>Form fields no longer accept optional arguments as positional arguments
>-----------------------------------------------------------------------

>To help prevent runtime errors due to incorrect ordering of form field
>arguments, optional arguments of built-in form fields are no longer accepted
>as positional arguments. For example::

>    forms.IntegerField(25, 10)

>raises an exception and should be replaced with::

>    forms.IntegerField(max_value=25, min_value=10)

>``call_command()`` validates the options it receives
>----------------------------------------------------

>``call_command()`` now validates that the argument parser of the command being
>called defines all of the options passed to ``call_command()``.

>For custom management commands that use options not created using
>``parser.add_argument()``, add a ``stealth_options`` attribute on the command::

>    class MyCommand(BaseCommand):
>        stealth_options = (&#39;option_name&#39;, ...)

>Indexes no longer accept positional arguments
>---------------------------------------------

>For example::

>    models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)

>raises an exception and should be replaced with::

>    models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)

>Foreign key constraints are now enabled on SQLite
>-------------------------------------------------

>This will appear as a backwards-incompatible change (``IntegrityError:
>FOREIGN KEY constraint failed``) if attempting to save an existing model
>instance that&#39;s violating a foreign key constraint.

>Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead of
>``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate
>foreign keys with the new definition, particularly if you&#39;re using a pattern
>like this::

>    from django.db import transaction

>    with transaction.atomic():
>        Book.objects.create(author_id=1)
>        Author.objects.create(id=1)

>If you don&#39;t recreate the foreign key as ``DEFERRED``, the first ``create()``
>would fail now that foreign key constraints are enforced.

>Backup your database first! After upgrading to Django 2.0, you can then
>rebuild tables using a script similar to this::

>    from django.apps import apps
>    from django.db import connection

>    for app in apps.get_app_configs():
>        for model in app.get_models(include_auto_created=True):
>            if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
>                for base in model.__bases__:
>                    if hasattr(base, &#39;_meta&#39;):
>                        base._meta.local_many_to_many = []
>                model._meta.local_many_to_many = []
>                with connection.schema_editor() as editor:
>                    editor._remake_table(model)

>This script hasn&#39;t received extensive testing and needs adaption for various
>cases such as multiple databases. Feel free to contribute improvements.

>In addition, because of a table alteration limitation of SQLite, it&#39;s prohibited
>to perform :class:`~django.db.migrations.operations.RenameModel` and
>:class:`~django.db.migrations.operations.RenameField` operations on models or
>fields referenced by other models in a transaction. In order to allow migrations
>containing these operations to be applied, you must set the
>``Migration.atomic`` attribute to ``False``.

>Miscellaneous
>-------------

>* The ``SessionAuthenticationMiddleware`` class is removed. It provided no
>  functionality since session authentication is unconditionally enabled in
>  Django 1.10.

>* The default HTTP error handlers (``handler404``, etc.) are now callables
>  instead of dotted Python path strings. Django favors callable references
>  since they provide better performance and debugging experience.

>* :class:`~django.views.generic.base.RedirectView` no longer silences
>  ``NoReverseMatch`` if the ``pattern_name`` doesn&#39;t exist.

>* When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and
>  :class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR`
>  and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the
>  settings::

>     USE_L10N = False
>     USE_THOUSAND_SEPARATOR = True
>     DECIMAL_SEPARATOR = &#39;,&#39;
>     THOUSAND_SEPARATOR = &#39;.&#39;

>  an input of ``&quot;1.345&quot;`` is now converted to ``1345`` instead of ``1.345``.

>* Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no
>  longer required to implement ``get_short_name()`` and ``get_full_name()``.
>  (The base implementations that raise ``NotImplementedError`` are removed.)
>  ``django.contrib.admin`` uses these methods if implemented but doesn&#39;t
>  require them. Third-party apps that use these methods may want to adopt a
>  similar approach.

>* The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now
>  kept as integers in JavaScript and JSON i18n view outputs.

>* :meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores
>  connection configuration queries. Previously, if a test opened a new database
>  connection, those queries could be included as part of the
>  ``assertNumQueries()`` count.

>* The default size of the Oracle test tablespace is increased from 20M to 50M
>  and the default autoextend size is increased from 10M to 25M.

>* To improve performance when streaming large result sets from the database,
>  :meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100.
>  The old behavior can be restored using the ``chunk_size`` parameter. For
>  example::

>      Book.objects.iterator(chunk_size=100)

>* Providing unknown package names in the ``packages`` argument of the
>  :class:`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError``
>  instead of passing silently.

>* A model instance&#39;s primary key now appears in the default ``Model.__str__()``
>  method, e.g. ``Question object (1)``.

>* ``makemigrations`` now detects changes to the model field ``limit_choices_to``
>  option. Add this to your existing migrations or accept an auto-generated
>  migration for fields that use it.

>* Performing queries that require :ref:`automatic spatial transformations
>  &lt;automatic-spatial-transformations&gt;` now raises ``NotImplementedError``
>  on MySQL instead of silently using non-transformed geometries.

>* ``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used
>  in the cache backend as an intermediate class in ``CacheKeyWarning``&#39;s
>  inheritance of ``RuntimeWarning``.

>* Renamed ``BaseExpression._output_field`` to ``output_field``. You may need
>  to update custom expressions.

>* In older versions, forms and formsets combine their ``Media`` with widget
>  ``Media`` by concatenating the two. The combining now tries to :ref:`preserve
>  the relative order of elements in each list &lt;form-media-asset-order&gt;`.
>  ``MediaOrderConflictWarning`` is issued if the order can&#39;t be preserved.

>* ``django.contrib.gis.gdal.OGRException`` is removed. It&#39;s been an alias for
>  ``GDALException`` since Django 1.8.

>* Support for GEOS 3.3.x is dropped.

>* The way data is selected for ``GeometryField`` is changed to improve
>  performance, and in raw SQL queries, those fields must now be wrapped in
>  ``connection.ops.select``. See the :ref:`Raw queries note&lt;gis-raw-sql&gt;` in
>  the GIS tutorial for an example.

>.. _deprecated-features-2.0:

>Features deprecated in 2.0
>==========================

>``context`` argument of ``Field.from_db_value()`` and ``Expression.convert_value()``
>------------------------------------------------------------------------------------

>The ``context`` argument of ``Field.from_db_value()`` and
>``Expression.convert_value()`` is unused as it&#39;s always an empty dictionary.
>The signature of both methods is now::

>    (self, value, expression, connection)

>instead of::

>    (self, value, expression, connection, context)

>Support for the old signature in custom fields and expressions remains until
>Django 3.0.

>Miscellaneous
>-------------

>* The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor
>  of ``django.db.backends.postgresql``. It&#39;s been an alias since Django 1.9.
>  This only affects code that imports from the module directly. The
>  ``DATABASES`` setting can still use
>  ``&#39;django.db.backends.postgresql_psycopg2&#39;``, though you can simplify that by
>  using the ``&#39;django.db.backends.postgresql&#39;`` name added in Django 1.9.

>* ``django.shortcuts.render_to_response()`` is deprecated in favor of
>  :func:`django.shortcuts.render`. ``render()`` takes the same arguments
>  except that it also requires a ``request``.

>* The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn&#39;t interact well
>  well with third-party apps and is obsolete since HTML5 has mostly superseded
>  XHTML.

>* ``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the
>  request.

>* The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and
>  :meth:`.QuerySet.latest` is deprecated in favor of passing the field
>  names as arguments. Write ``.earliest(&#39;pub_date&#39;)`` instead of
>  ``.earliest(field_name=&#39;pub_date&#39;)``.

>.. _removed-features-2.0:

>Features removed in 2.0
>=======================

>These features have reached the end of their deprecation cycle and are removed
>in Django 2.0.

>See :ref:`deprecated-features-1.9` for details on these changes, including how
>to remove usage of these features.

>* The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is
>  removed.

>* ``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()``
>  is removed.

>* The ``django.forms.extras`` package is removed.

>* The ``assignment_tag`` helper is removed.

>* The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed.
>  The compatibility layer which allows absolute URLs to be considered equal to
>  relative ones when the path is identical is also removed.

>* ``Field.rel`` and ``Field.remote_field.to`` are removed.

>* The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now
>  required in models and migrations. Consider squashing migrations so that you
>  have fewer of them to update.

>* ``django.db.models.fields.add_lazy_relation()`` is removed.

>* When time zone support is enabled, database backends that don&#39;t support time
>  zones no longer convert aware datetimes to naive values in UTC anymore when
>  such values are passed as parameters to SQL queries executed outside of the
>  ORM, e.g. with ``cursor.execute()``.

>* ``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed.

>* The ``GeoManager`` and ``GeoQuerySet`` classes are removed.

>* The ``django.contrib.gis.geoip`` module is removed.

>* The ``supports_recursion`` check for template loaders is removed from:

>  * ``django.template.engine.Engine.find_template()``
>  * ``django.template.loader_tags.ExtendsNode.find_template()``
>  * ``django.template.loaders.base.Loader.supports_recursion()``
>  * ``django.template.loaders.cached.Loader.supports_recursion()``

>* The ``load_template`` and ``load_template_sources`` template loader methods
>  are removed.

>* The ``template_dirs`` argument for template loaders is removed:

>  * ``django.template.loaders.base.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.cache_key()``
>  * ``django.template.loaders.cached.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.get_template_sources()``
>  * ``django.template.loaders.filesystem.Loader.get_template_sources()``

>* ``django.template.loaders.base.Loader.__call__()`` is removed.

>* Support for custom error views that don&#39;t accept an ``exception`` parameter
>  is removed.

>* The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and
>  ``django.utils.feedgenerator.RssFeed`` is removed.

>* The ``app_name`` argument to ``include()`` is removed.

>* Support for passing a 3-tuple (including ``admin.site.urls``) as the first
>  argument to ``include()`` is removed.

>* Support for setting a URL instance namespace without an application namespace
>  is removed.

>* ``Field._get_val_from_obj()`` is removed.

>* ``django.template.loaders.eggs.Loader`` is removed.

>* The ``current_app`` parameter to the ``contrib.auth`` function-based views is
>  removed.

>* The ``callable_obj`` keyword argument to
>  ``SimpleTestCase.assertRaisesMessage()`` is removed.

>* Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is
>  removed.

>* The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is
>  removed.

>* The ``django.template.loader.LoaderOrigin`` and
>  ``django.template.base.StringOrigin`` aliases for
>  ``django.template.base.Origin`` are removed.

>See :ref:`deprecated-features-1.10` for details on these changes.

>* The ``makemigrations --exit`` option is removed.

>* Support for direct assignment to a reverse foreign key or many-to-many
>  relation is removed.

>* The ``get_srid()`` and ``set_srid()`` methods of
>  ``django.contrib.gis.geos.GEOSGeometry`` are removed.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  ``django.contrib.gis.geos.Point`` are removed.

>* The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon``
>  is removed.

>* ``django.utils.functional.allow_lazy()`` is removed.

>* The ``shell --plain`` option is removed.

>* The ``django.core.urlresolvers`` module is removed in favor of its new
>  location, ``django.urls``.

>* ``CommaSeparatedIntegerField`` is removed, except for support in historical
>  migrations.

>* The template ``Context.has_key()`` method is removed.

>* Support for the ``django.core.files.storage.Storage.accessed_time()``,
>  ``created_time()``, and ``modified_time()`` methods is removed.

>* Support for query lookups using the model name when
>  ``Meta.default_related_name`` is set is removed.

>* The MySQL ``__search`` lookup is removed.

>* The shim for supporting custom related manager classes without a
>  ``_apply_rel_filters()`` method is removed.

>* Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>  rather than properties is no longer supported.

>* The ``Model._meta.virtual_fields`` attribute is removed.

>* The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` and
>  ``virtual`` in ``Model._meta.add_field()`` are removed.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are removed.

>* ``django.contrib.gis.utils.precision_wkt()`` is removed.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is removed.

>* Support for ``Widget._format_value()`` is removed.

>* ``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are
>  removed.

>* The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>  ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>  removed.

>* The ``escape`` filter now uses ``django.utils.html.conditional_escape()``.

>* ``Manager.use_for_related_fields`` is removed.

>* Model ``Manager`` inheritance follows MRO inheritance rules. The requirement
>  to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is
>  removed.

>* Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is
>  removed.


>============================


>### 1.11.10

>============================

>*February 1, 2018*

>Django 1.11.10 fixes a security issue and several bugs in 1.11.9.

>CVE-2018-6188: Information leakage in ``AuthenticationForm``
>============================================================

>A regression in Django 1.11.8 made
>:class:`~django.contrib.auth.forms.AuthenticationForm` run its
>``confirm_login_allowed()`` method even if an incorrect password is entered.
>This can leak information about a user, depending on what messages
>``confirm_login_allowed()`` raises. If ``confirm_login_allowed()`` isn&#39;t
>overridden, an attacker enter an arbitrary username and see if that user has
>been set to ``is_active=False``. If ``confirm_login_allowed()`` is overridden,
>more sensitive details could be leaked.

>This issue is fixed with the caveat that ``AuthenticationForm`` can no longer
>raise the &quot;This account is inactive.&quot; error if the authentication backend
>rejects inactive users (the default authentication backend, ``ModelBackend``,
>has done that since Django 1.10). This issue will be revisited for Django 2.1
>as a fix to address the caveat will likely be too invasive for inclusion in
>older versions.

>Bugfixes
>========

>* Fixed incorrect foreign key nullification if a model has two foreign keys to
>  the same model and a target model is deleted (:ticket:`29016`).

>* Fixed a regression where ``contrib.auth.authenticate()`` crashes if an
>  authentication backend doesn&#39;t accept ``request`` and a later one does
>  (:ticket:`29071`).

>* Fixed crash when entering an invalid uuid in ``ModelAdmin.raw_id_fields``
>  (:ticket:`29094`).


>===========================


>### 1.11.9

>===========================

>*January 1, 2018*

>Django 1.11.9 fixes several bugs in 1.11.8.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).


>===========================


>### 1.11.8

>===========================

>*December 2, 2017*

>Django 1.11.8 fixes several bugs in 1.11.7.

>Bugfixes
>========

>* Reallowed, following a regression in Django 1.10, ``AuthenticationForm`` to
>  raise the inactive user error when using ``ModelBackend`` (:ticket:`28645`).

>* Added support for ``QuerySet.values()`` and ``values_list()`` for
>  ``union()``, ``difference()``, and ``intersection()`` queries
>  (:ticket:`28781`).

>* Fixed incorrect index name truncation when using a namespaced ``db_table``
>  (:ticket:`28792`).

>* Made ``QuerySet.iterator()`` use server-side cursors on PostgreSQL after
>  ``values()`` and ``values_list()`` (:ticket:`28817`).

>* Fixed crash on SQLite and MySQL when ordering by a filtered subquery that
>  uses ``nulls_first`` or ``nulls_last`` (:ticket:`28848`).

>* Made query lookups for ``CICharField``, ``CIEmailField``, and ``CITextField``
>  use a ``citext`` cast (:ticket:`28702`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses multi-table inheritance (:ticket:`28856`).

>* Fixed &quot;Cannot change column &#39;x&#39;: used in a foreign key constraint&quot; crash on
>  MySQL with a sequence of ``AlterField`` and/or ``RenameField`` operations in
>  a migration (:ticket:`28305`).


>===========================


>### 1.11.7

>===========================

>*November 1, 2017*

>Django 1.11.7 fixes several bugs in 1.11.6.

>Bugfixes
>========

>* Prevented ``cache.get_or_set()`` from caching ``None`` if the ``default``
>  argument is a callable that returns ``None`` (:ticket:`28601`).

>* Fixed the Basque ``DATE_FORMAT`` string (:ticket:`28710`).

>* Made ``QuerySet.reverse()`` affect ``nulls_first`` and ``nulls_last``
>  (:ticket:`28722`).

>* Fixed unquoted table names in ``Subquery`` SQL when using ``OuterRef``
>  (:ticket:`28689`).


>===========================


>### 1.11.6

>===========================

>*October 5, 2017*

>Django 1.11.6 fixes several bugs in 1.11.5.

>Bugfixes
>========

>* Made the ``CharField`` form field convert whitespace-only values to the
>  ``empty_value`` when ``strip`` is enabled (:ticket:`28555`).

>* Fixed crash when using the name of a model&#39;s autogenerated primary key
>  (``id``) in an ``Index``&#39;s ``fields`` (:ticket:`28597`).

>* Fixed a regression in Django 1.9 where a custom view error handler such as
>  ``handler404`` that accesses ``csrf_token`` could cause CSRF verification
>  failures on other pages (:ticket:`28488`).


>===========================


>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite supp",pyup-bot,16239342,2018-02-01T16:41:34Z,CONTRIBUTOR,False,1,1,1,,JavaScript,204b89e775c5a68cd0d940a363006c4c1c464b45,Update django from 1.10.8 to 2.0.2
158,https://api.github.com/repos/mozilla/distribution-viewer/pulls/329,329,Add HSTS headers on static assets,,robhudson,1106,2018-01-30T17:41:38Z,MEMBER,True,13,9,3,,JavaScript,9b771ca45cb1bb4986fe50b82d72a9597bbe78f1,Add HSTS headers on static assets
159,https://api.github.com/repos/mozilla/distribution-viewer/pulls/329,329,Add HSTS headers on static assets,,robhudson,1106,2018-01-30T17:41:38Z,MEMBER,True,13,9,3,,JavaScript,f8818c4ac7504c586d4d8dcbe2a2a00094962d8d,Remove CORS middleware
160,https://api.github.com/repos/mozilla/distribution-viewer/pulls/329,329,Add HSTS headers on static assets,,robhudson,1106,2018-01-30T17:41:38Z,MEMBER,True,13,9,3,,JavaScript,4190c4aa8a3f1484f0d0485ff69d83f97ee1dc06,Update Whitenoise config
161,https://api.github.com/repos/mozilla/distribution-viewer/pulls/329,329,Add HSTS headers on static assets,,robhudson,1106,2018-01-30T17:41:38Z,MEMBER,True,13,9,3,,JavaScript,a1cd353e48680b9b4c50a964f5832410a43b5a17,Set anti mime sniffing header
162,https://api.github.com/repos/mozilla/distribution-viewer/pulls/328,328,Update d3-scale to the latest version 🚀,"
## Version **2.0.0** of [d3-scale](https://github.com/d3/d3-scale) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      d3-scale
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      1.0.7
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **2.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of d3-scale.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 6 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/916f68e71cdc42d1c70e94843c294b07e007c04e""><code>916f68e</code></a> <code>2.0.0</code></li>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/c1e0bf89a478d01cdd36b6904227039ab9376993""><code>c1e0bf8</code></a> <code>Update README.</code></li>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/538bfa8f548bb3d5266f4d567bc2b2f594f1ac85""><code>538bfa8</code></a> <code>Update README.</code></li>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/57bc7fbe3e43c45901a3222f16faaf74fdf54d9d""><code>57bc7fb</code></a> <code>Update README.</code></li>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/78193364284f56c4bdfcf4e8a768d558b4bb379b""><code>7819336</code></a> <code>Remove color schemes.</code></li>
<li><a href=""https://urls.greenkeeper.io/d3/d3-scale/commit/ccbcc05c135fa775bde46aaaa3edca6ecdeb3ed3""><code>ccbcc05</code></a> <code>Update dependencies.</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/d3/d3-scale/compare/8896a1515e3424b53000f31ff18cb4874004de9b...916f68e71cdc42d1c70e94843c294b07e007c04e"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2018-01-28T19:04:21Z,NONE,False,1,1,1,,JavaScript,2d9f20f318b0e3dace0991a94022d6e9f9c72598,fix(package): update d3-scale to version 2.0.0
163,https://api.github.com/repos/mozilla/distribution-viewer/pulls/327,327,Update raven to 6.5.0,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.1.0**. I have updated it to **6.5.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.5.0

>------------------
>* [Core] Fixed missing deprecation on `processors.SanitizePasswordsProcessor`
>* [Core] Improve exception handling in `Serializer.transform`
>* [Core] Fixed `celery.register_logger_signal` ignoring subclasses
>* [Core] Fixed sanitizer skipping `byte` instances
>* [Lambda] Fixed `AttributeError` when `requestContext` not present



>### 6.4.0

>------------------
>* [Core] Support for defining `sanitized_keys` on the client (pr/990)
>* [Django] Support for Django 2.0 Urlresolver
>* [Docs] Several fixes and improvements



>### 6.3.0

>------------------
>* [Core] Changed default timeout on http calls to 5 seconds
>* [Core] Fixed relative paths for traces generated on Windows
>* [Django] Fixed import issues for Django projects &lt; 1.7
>* [Django] Fixed django management command data option
>* [Django/DRF] Added `application/octet-stream` to non-cacheable types in middleware
>* [Django] Added parsing X-Forwarded-For for `user.ip_address`
>* [Flask] Added `request.remote_addr` as fallback for ip addresses
>* [Lambda] Added initial AWS Lambda support with `contrib.awslambda.LambdaClient` 




>### 6.2.1

>------------------

>* [Core] Fixed requirements in setup.py




>### 6.2.0

>------------------

>* [Core] `get_frame_locals` properly using `max_var_size`
>* [Core] Fixed raven initialization when `logging._srcfile` is None
>* [Core] Fixed import locking to avoid recursion
>* [Django] Fixed several issues for Django 1.11 and Django 2.0
>* [Django/DRF] Fixed issue with unavailable request data
>* [Flask] Added app.logger instrumentation
>* [Flask] Added signal on setup_logging
>* [ZConfig] Added standalone ZConfig support
>* [Celery] Fixed several issues related to Celery








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2018-01-19T15:02:33Z,CONTRIBUTOR,False,1,1,1,,JavaScript,df70061b0ec7edbbb017cc9d5a61b5166569827a,Update raven from 6.1.0 to 6.5.0
164,https://api.github.com/repos/mozilla/distribution-viewer/pulls/326,326,Update google-api-python-client to 1.6.5,"
There's a new version of [google-api-python-client](https://pypi.python.org/pypi/google-api-python-client) available.
You are currently using **1.6.2**. I have updated it to **1.6.5**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/google-api-python-client"">PyPI</a> | <a href=""https://pyup.io/changelogs/google-api-python-client/"">Changelog</a> | <a href=""http://github.com/google/google-api-python-client/"">Repo</a> 



### Changelog
> 
>### 1.6.5

>  Version 1.6.5

>  Bugfix release

>  - Proactively refresh credentials when applying and treat a missing
>    `access_token` as invalid. Note: This change reveals surprising behavior
>    between default credentials and batches. If you allow
>    `googleapiclient.discovery.build` to use default credentials *and* specify
>    different credentials by providing `batch.execut()` with an explicit `http`
>    argument, your individual requests will use the default credentials and
>    *not* the credentials specified to the batch http. To avoid this, tell
>    `build` explicitly not to use default credentials by specifying
>    `build(..., http=httplib2.Http()`. (469)
>  - Remove mutual exclusivity check for developerKey and credentials (465)
>  - Handle unknown media length. (406)
>  - Handle variant error format gracefully. (459)
>  - Avoid testing against Django &gt;= 2.0.0 on Python 2. (460)



>### 1.6.4

>  Version 1.6.4

>  Bugfix release

>  - Warn when google-auth credentials are used but google-auth-httplib2 isn&#39;t available. (443)



>### 1.6.3

>  Version 1.6.3

>  Bugfix release

>  - Add notification of maintenance mode to README. (410)
>  - Fix generation of methods with abnormal page token conventions. (338)
>  - Raise ValueError is credentials and developerKey are both specified. (358)
>  - Re-generate documentation. (364, 373, 401)
>  - Fix method signature documentation for multiline required parameters. (374)
>  - Fix ZeroDivisionError in MediaDownloadProgress.progress. (377)
>  - Fix dead link to WebTest in README. (378)
>  - Fix details missing in googleapiclient.errors.HttpError. (412)
>  - Don&#39;t treat httplib2.Credentials as oauth credentials. (425)
>  - Various fixes to the Django sample. (413)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2018-01-18T18:10:32Z,CONTRIBUTOR,False,1,1,1,,JavaScript,a9f2c27ab9294831a6bffff478347efd58d85801,Update google-api-python-client from 1.6.2 to 1.6.5
165,https://api.github.com/repos/mozilla/distribution-viewer/pulls/325,325,Update django to 2.0.1,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.8**. I have updated it to **2.0.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 2.0.1

>==========================

>*January 1, 2018*

>Django 2.0.1 fixes several bugs in 2.0.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).

>* Reallowed filtering a queryset with ``GeometryField=None`` (:ticket:`28896`).

>* Corrected admin check to allow a ``OneToOneField`` in
>  ``ModelAdmin.autocomplete_fields`` (:ticket:`28898`).

>* Fixed a regression on SQLite where ``DecimalField`` returned a result with
>  trailing zeros in the fractional part truncated (:ticket:`28915`).

>* Fixed crash in the ``testserver`` command startup (:ticket:`28941`).

>* Fixed crash when coercing a translatable URL pattern to ``str``
>  (:ticket:`28947`).

>* Fixed crash on SQLite when renaming a field in a model referenced by a
>  ``ManyToManyField`` (:ticket:`28884`).

>* Fixed a crash when chaining ``values()`` or ``values_list()`` after
>  ``QuerySet.select_for_update(of=(...))`` (:ticket:`28944`).

>* Fixed admin changelist crash when using a query expression in the page&#39;s
>  ordering (:ticket:`28958`).


>========================


>### 2.0

>========================

>*December 2, 2017*

>Welcome to Django 2.0!

>These release notes cover the :ref:`new features &lt;whats-new-2.0&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.0&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.11 or earlier. We&#39;ve
>:ref:`dropped some features&lt;removed-features-2.0&gt;` that have reached the end of
>their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for some
>features &lt;deprecated-features-2.0&gt;`.

>This release starts Django&#39;s use of a :ref:`loose form of semantic versioning
>&lt;internal-release-cadence&gt;`, but there aren&#39;t any major backwards incompatible
>changes that might be expected of a 2.0 release. Upgrading should be a similar
>amount of effort as past feature releases.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and only
>officially support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2.7.

>Django 2.0 will be the last release series to support Python 3.4. If you plan
>a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019),
>stick with Django 1.11 LTS (supported until April 2020) instead. Note, however,
>that the end-of-life for Python 3.4 is March 2019.

>Third-party library support for older version of Django
>=======================================================

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able to run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-2.0:

>What&#39;s new in Django 2.0
>========================

>Simplified URL routing syntax
>-----------------------------

>The new :func:`django.urls.path()` function allows a simpler, more readable URL
>routing syntax. For example, this example from previous Django releases::

>    url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),

>could be written as::

>    path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),

>The new syntax supports type coercion of URL parameters. In the example, the
>view will receive the ``year`` keyword argument as an integer rather than as
>a string. Also, the URLs that will match are slightly less constrained in the
>rewritten example. For example, the year 10000 will now match since the year
>integers aren&#39;t constrained to be exactly four digits long as they are in the
>regular expression.

>The ``django.conf.urls.url()`` function from previous versions is now available
>as :func:`django.urls.re_path`. The old location remains for backwards
>compatibility, without an imminent deprecation. The old
>``django.conf.urls.include()`` function is now importable from ``django.urls``
>so you can use ``from django.urls import include, path, re_path`` in your
>URLconfs.

>The :doc:`/topics/http/urls` document is rewritten to feature the new syntax
>and provide more details.

>Mobile-friendly ``contrib.admin``
>---------------------------------

>The admin is now responsive and supports all major mobile devices. Older
>browsers may experience varying levels of graceful degradation.

>Window expressions
>------------------

>The new :class:`~django.db.models.expressions.Window` expression allows
>adding an ``OVER`` clause to querysets. You can use :ref:`window functions
>&lt;window-functions&gt;` and :ref:`aggregate functions &lt;aggregation-functions&gt;` in
>the expression.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :attr:`.ModelAdmin.autocomplete_fields` attribute and
>  :meth:`.ModelAdmin.get_autocomplete_fields` method allow using an
>  `Select2 &lt;https://select2.org&gt;`_ search widget for ``ForeignKey`` and
>  ``ManyToManyField``.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased from
>  36,000 to 100,000.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added MySQL support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` function,
>  :class:`~django.contrib.gis.db.models.functions.GeoHash` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :lookup:`isvalid` lookup, and :ref:`distance lookups &lt;distance-lookups&gt;`.

>* Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and
>  :class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions,
>  supported on PostGIS and SpatiaLite.

>* Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now
>  has its SRID set.

>* Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map&#39;s
>  default zoom level.

>* Made metadata readable and editable on rasters through the
>  :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`,
>  :attr:`~django.contrib.gis.gdal.GDALRaster.info`, and
>  :attr:`~django.contrib.gis.gdal.GDALBand.metadata` attributes.

>* Allowed passing driver-specific creation options to
>  :class:`~django.contrib.gis.gdal.GDALRaster` objects using ``papsz_options``.

>* Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in
>  GDAL&#39;s internal virtual filesystem. Rasters can now be :ref:`created from and
>  converted to binary data &lt;gdal-raster-vsimem&gt;` in-memory.

>* The new :meth:`GDALBand.color_interp()
>  &lt;django.contrib.gis.gdal.GDALBand.color_interp&gt;` method returns the color
>  interpretation for the band.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.ArrayAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.functions.RandomUUID` database
>  function returns a version 4 UUID. It requires use of PostgreSQL&#39;s
>  ``pgcrypto`` extension which can be activated using the new
>  :class:`~django.contrib.postgres.operations.CryptoExtension` migration
>  operation.

>* :class:`django.contrib.postgres.indexes.GinIndex` now supports the
>  ``fastupdate`` and ``gin_pending_list_limit`` parameters.

>* The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows
>  creating ``GiST`` indexes in the database. The new
>  :class:`~django.contrib.postgres.operations.BtreeGistExtension` migration
>  operation installs the ``btree_gist`` extension to add support for operator
>  classes that aren&#39;t built-in.

>* :djadmin:`inspectdb` can now introspect ``JSONField`` and various
>  ``RangeField``\s (``django.contrib.postgres`` must be in ``INSTALLED_APPS``).

>:mod:`django.contrib.sitemaps`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added the ``protocol`` keyword argument to the
>  :class:`~django.contrib.sitemaps.GenericSitemap` constructor.

>Cache
>~~~~~

>* ``cache.set_many()`` now returns a list of keys that failed to be inserted.
>  For the built-in backends, failed inserts can only happen on memcached.

>File Storage
>~~~~~~~~~~~~

>* :meth:`File.open() &lt;django.core.files.File.open&gt;` can be used as a context
>  manager, e.g. ``with file.open() as f:``.

>Forms
>~~~~~

>* The new ``date_attrs`` and ``time_attrs`` arguments for
>  :class:`~django.forms.SplitDateTimeWidget` and
>  :class:`~django.forms.SplitHiddenDateTimeWidget` allow specifying different
>  HTML attributes for the ``DateInput`` and ``TimeInput`` (or hidden)
>  subwidgets.

>* The new :meth:`Form.errors.get_json_data()
>  &lt;django.forms.Form.errors.get_json_data&gt;` method returns form errors as
>  a dictionary suitable for including in a JSON response.

>Generic Views
>~~~~~~~~~~~~~

>* The new :attr:`.ContextMixin.extra_context` attribute allows adding context
>  in ``View.as_view()``.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :djadmin:`inspectdb` now translates MySQL&#39;s unsigned integer columns to
>  ``PositiveIntegerField`` or ``PositiveSmallIntegerField``.

>* The new :option:`makemessages --add-location` option controls the comment
>  format in PO files.

>* :djadmin:`loaddata` can now :ref:`read from stdin &lt;loading-fixtures-stdin&gt;`.

>* The new :option:`diffsettings --output` option allows formatting the output
>  in a unified diff format.

>* On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the
>  column is created as an identity column.

>* On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates.

>Migrations
>~~~~~~~~~~

>* The new :option:`squashmigrations --squashed-name` option allows naming the
>  squashed migration.

>Models
>~~~~~~

>* The new :class:`~django.db.models.functions.StrIndex` database function
>  finds the starting index of a string inside another string.

>* On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity
>  columns`_.

>  .. _`identity columns`: https://docs.oracle.com/database/121/DRDAA/migr_tools_feat.htmDRDAA109

>* The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the
>  number of rows fetched by the Python database client when streaming results
>  from the database. For databases that don&#39;t support server-side cursors, it
>  controls the number of results Django fetches from the database adapter.

>* :meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and
>  :attr:`Meta.get_latest_by &lt;django.db.models.Options.get_latest_by&gt;` now
>  allow ordering by several fields.

>* Added the :class:`~django.db.models.functions.ExtractQuarter` function to
>  extract the quarter from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField`, and exposed it through the
>  :lookup:`quarter` lookup.

>* Added the :class:`~django.db.models.functions.TruncQuarter` function to
>  truncate :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` to the first day of a quarter.

>* Added the :attr:`~django.db.models.Index.db_tablespace` parameter to
>  class-based indexes.

>* If the database supports a native duration field (Oracle and PostgreSQL),
>  :class:`~django.db.models.functions.Extract` now works with
>  :class:`~django.db.models.DurationField`.

>* Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, supported
>  on PostgreSQL and Oracle, to lock only rows from specific tables rather than
>  all selected tables. It may be helpful particularly when
>  :meth:`~.QuerySet.select_for_update()` is used in conjunction with
>  :meth:`~.QuerySet.select_related()`.

>* The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows fetching
>  results based on any unique model field.

>* :meth:`.CursorWrapper.callproc()` now takes an optional dictionary of keyword
>  parameters, if the backend supports this feature. Of Django&#39;s built-in
>  backends, only Oracle supports it.

>* The new :meth:`connection.execute_wrapper()
>  &lt;django.db.backends.base.DatabaseWrapper.execute_wrapper&gt;` method allows
>  :doc:`installing wrappers around execution of database queries
>  &lt;/topics/db/instrumentation&gt;`.

>* The new ``filter`` argument for built-in aggregates allows :ref:`adding
>  different conditionals &lt;conditional-aggregation&gt;` to multiple aggregations
>  over the same fields or relations.

>* Added support for expressions in :attr:`Meta.ordering
>  &lt;django.db.models.Options.ordering&gt;`.

>* The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching
>  results as named tuples.

>* The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to
>  querysets.

>Pagination
>~~~~~~~~~~

>* Added :meth:`Paginator.get_page() &lt;django.core.paginator.Paginator.get_page&gt;`
>  to provide the documented pattern of handling invalid page numbers.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`runserver` Web server supports HTTP 1.1.

>Templates
>~~~~~~~~~

>* To increase the usefulness of :meth:`.Engine.get_default` in third-party
>  apps, it now returns the first engine if multiple ``DjangoTemplates`` engines
>  are configured in ``TEMPLATES`` rather than raising ``ImproperlyConfigured``.

>* Custom template tags may now accept keyword-only arguments.

>Tests
>~~~~~

>* Added threading support to :class:`~django.test.LiveServerTestCase`.

>* Added settings that allow customizing the test tablespace parameters for
>  Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`,
>  :setting:`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`.

>Validators
>~~~~~~~~~~

>* The new :class:`.ProhibitNullCharactersValidator` disallows the null
>  character in the input of the :class:`~django.forms.CharField` form field
>  and its subclasses. Null character input was observed from vulnerability
>  scanning tools. Most databases silently discard null characters, but
>  psycopg2 2.7+ raises an exception when trying to save a null character to
>  a char/text field with PostgreSQL.

>.. _backwards-incompatible-2.0:

>Backwards incompatible changes in 2.0
>=====================================

>Removed support for bytestrings in some places
>----------------------------------------------

>To support native Python 2 strings, older Django versions had to accept both
>bytestrings and unicode strings. Now that Python 2 support is dropped,
>bytestrings should only be encountered around input/output boundaries (handling
>of binary fields or HTTP streams, for example). You might have to update your
>code to limit bytestring usage to a minimum, as Django no longer accepts
>bytestrings in certain code paths.

>For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to
>coerce the ``args`` and ``kwargs`` it receives, prior to their placement in
>the URL. For bytestrings, this creates a string with an undesired ``b`` prefix
>as well as additional quotes (``str(b&#39;foo&#39;)`` is ``&quot;b&#39;foo&#39;&quot;``). To adapt, call
>``decode()`` on the bytestring before passing it to ``reverse()``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.datetime_cast_date_sql()``,
>  ``datetime_cast_time_sql()``, ``datetime_trunc_sql()``,
>  ``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return
>  only the SQL to perform the operation instead of SQL and a list of
>  parameters.

>* Third-party database backends should add a ``DatabaseWrapper.display_name``
>  attribute with the name of the database that your backend works with. Django
>  may use it in various messages, such as in system checks.

>* The first argument of ``SchemaEditor._alter_column_type_sql()`` is now
>  ``model`` rather than ``table``.

>* The first argument of ``SchemaEditor._create_index_name()`` is now
>  ``table_name`` rather than ``model``.

>* To enable ``FOR UPDATE OF`` support, set
>  ``DatabaseFeatures.has_select_for_update_of = True``. If the database
>  requires that the arguments to ``OF`` be columns rather than tables, set
>  ``DatabaseFeatures.select_for_update_of_column = True``.

>* To enable support for :class:`~django.db.models.expressions.Window`
>  expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You
>  may need to customize the ``DatabaseOperations.window_start_rows_start_end()``
>  and/or ``window_start_range_start_end()`` methods.

>* Third-party database backends should add a
>  ``DatabaseOperations.cast_char_field_without_max_length`` attribute with the
>  database data type that will be used in the
>  :class:`~django.db.models.functions.Cast` function for a ``CharField`` if the
>  ``max_length`` argument isn&#39;t provided.

>* The first argument of ``DatabaseCreation._clone_test_db()`` and
>  ``get_test_db_clone_settings()`` is now ``suffix`` rather
>  than ``number`` (in case you want to rename the signatures in your backend
>  for consistency). ``django.test`` also now passes those values as strings
>  rather than as integers.

>* Third-party database backends should add a
>  ``DatabaseIntrospection.get_sequences()`` method based on the stub in
>  ``BaseDatabaseIntrospection``.

>Dropped support for Oracle 11.2
>-------------------------------

>The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be
>supported until April 2020 which almost reaches this date. Django 2.0
>officially supports Oracle 12.1+.

>Default MySQL isolation level is read committed
>-----------------------------------------------

>MySQL&#39;s default isolation level, repeatable read, may cause data loss in
>typical Django usage. To prevent that and for consistency with other databases,
>the default isolation level is now read committed. You can use the
>:setting:`DATABASES` setting to :ref:`use a different isolation level
>&lt;mysql-isolation-level&gt;`, if needed.

>:attr:`AbstractUser.last_name &lt;django.contrib.auth.models.User.last_name&gt;` ``max_length`` increased to 150
>----------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.last_name` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>If you want to preserve the 30 character limit for last names, use a custom
>form::

>    from django.contrib.auth.forms import UserChangeForm

>    class MyUserChangeForm(UserChangeForm):
>        last_name = forms.CharField(max_length=30, required=False)

>If you wish to keep this restriction in the admin when editing users, set
>``UserAdmin.form`` to use this form::

>    from django.contrib.auth.admin import UserAdmin
>    from django.contrib.auth.models import User

>    class MyUserAdmin(UserAdmin):
>        form = MyUserChangeForm

>    admin.site.unregister(User)
>    admin.site.register(User, MyUserAdmin)

>``QuerySet.reverse()`` and ``last()`` are prohibited after slicing
>------------------------------------------------------------------

>Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to
>unexpected results due to the slice being applied after reordering. This is
>now prohibited, e.g.::

>    &gt;&gt;&gt; Model.objects.all()[:2].reverse()
>    Traceback (most recent call last):
>    ...
>    TypeError: Cannot reverse a query once a slice has been taken.

>Form fields no longer accept optional arguments as positional arguments
>-----------------------------------------------------------------------

>To help prevent runtime errors due to incorrect ordering of form field
>arguments, optional arguments of built-in form fields are no longer accepted
>as positional arguments. For example::

>    forms.IntegerField(25, 10)

>raises an exception and should be replaced with::

>    forms.IntegerField(max_value=25, min_value=10)

>``call_command()`` validates the options it receives
>----------------------------------------------------

>``call_command()`` now validates that the argument parser of the command being
>called defines all of the options passed to ``call_command()``.

>For custom management commands that use options not created using
>``parser.add_argument()``, add a ``stealth_options`` attribute on the command::

>    class MyCommand(BaseCommand):
>        stealth_options = (&#39;option_name&#39;, ...)

>Indexes no longer accept positional arguments
>---------------------------------------------

>For example::

>    models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)

>raises an exception and should be replaced with::

>    models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)

>Foreign key constraints are now enabled on SQLite
>-------------------------------------------------

>This will appear as a backwards-incompatible change (``IntegrityError:
>FOREIGN KEY constraint failed``) if attempting to save an existing model
>instance that&#39;s violating a foreign key constraint.

>Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead of
>``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate
>foreign keys with the new definition, particularly if you&#39;re using a pattern
>like this::

>    from django.db import transaction

>    with transaction.atomic():
>        Book.objects.create(author_id=1)
>        Author.objects.create(id=1)

>If you don&#39;t recreate the foreign key as ``DEFERRED``, the first ``create()``
>would fail now that foreign key constraints are enforced.

>Backup your database first! After upgrading to Django 2.0, you can then
>rebuild tables using a script similar to this::

>    from django.apps import apps
>    from django.db import connection

>    for app in apps.get_app_configs():
>        for model in app.get_models(include_auto_created=True):
>            if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
>                for base in model.__bases__:
>                    if hasattr(base, &#39;_meta&#39;):
>                        base._meta.local_many_to_many = []
>                model._meta.local_many_to_many = []
>                with connection.schema_editor() as editor:
>                    editor._remake_table(model)

>This script hasn&#39;t received extensive testing and needs adaption for various
>cases such as multiple databases. Feel free to contribute improvements.

>In addition, because of a table alteration limitation of SQLite, it&#39;s prohibited
>to perform :class:`~django.db.migrations.operations.RenameModel` and
>:class:`~django.db.migrations.operations.RenameField` operations on models or
>fields referenced by other models in a transaction. In order to allow migrations
>containing these operations to be applied, you must set the
>``Migration.atomic`` attribute to ``False``.

>Miscellaneous
>-------------

>* The ``SessionAuthenticationMiddleware`` class is removed. It provided no
>  functionality since session authentication is unconditionally enabled in
>  Django 1.10.

>* The default HTTP error handlers (``handler404``, etc.) are now callables
>  instead of dotted Python path strings. Django favors callable references
>  since they provide better performance and debugging experience.

>* :class:`~django.views.generic.base.RedirectView` no longer silences
>  ``NoReverseMatch`` if the ``pattern_name`` doesn&#39;t exist.

>* When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and
>  :class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR`
>  and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the
>  settings::

>     USE_L10N = False
>     USE_THOUSAND_SEPARATOR = True
>     DECIMAL_SEPARATOR = &#39;,&#39;
>     THOUSAND_SEPARATOR = &#39;.&#39;

>  an input of ``&quot;1.345&quot;`` is now converted to ``1345`` instead of ``1.345``.

>* Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no
>  longer required to implement ``get_short_name()`` and ``get_full_name()``.
>  (The base implementations that raise ``NotImplementedError`` are removed.)
>  ``django.contrib.admin`` uses these methods if implemented but doesn&#39;t
>  require them. Third-party apps that use these methods may want to adopt a
>  similar approach.

>* The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now
>  kept as integers in JavaScript and JSON i18n view outputs.

>* :meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores
>  connection configuration queries. Previously, if a test opened a new database
>  connection, those queries could be included as part of the
>  ``assertNumQueries()`` count.

>* The default size of the Oracle test tablespace is increased from 20M to 50M
>  and the default autoextend size is increased from 10M to 25M.

>* To improve performance when streaming large result sets from the database,
>  :meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100.
>  The old behavior can be restored using the ``chunk_size`` parameter. For
>  example::

>      Book.objects.iterator(chunk_size=100)

>* Providing unknown package names in the ``packages`` argument of the
>  :class:`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError``
>  instead of passing silently.

>* A model instance&#39;s primary key now appears in the default ``Model.__str__()``
>  method, e.g. ``Question object (1)``.

>* ``makemigrations`` now detects changes to the model field ``limit_choices_to``
>  option. Add this to your existing migrations or accept an auto-generated
>  migration for fields that use it.

>* Performing queries that require :ref:`automatic spatial transformations
>  &lt;automatic-spatial-transformations&gt;` now raises ``NotImplementedError``
>  on MySQL instead of silently using non-transformed geometries.

>* ``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used
>  in the cache backend as an intermediate class in ``CacheKeyWarning``&#39;s
>  inheritance of ``RuntimeWarning``.

>* Renamed ``BaseExpression._output_field`` to ``output_field``. You may need
>  to update custom expressions.

>* In older versions, forms and formsets combine their ``Media`` with widget
>  ``Media`` by concatenating the two. The combining now tries to :ref:`preserve
>  the relative order of elements in each list &lt;form-media-asset-order&gt;`.
>  ``MediaOrderConflictWarning`` is issued if the order can&#39;t be preserved.

>* ``django.contrib.gis.gdal.OGRException`` is removed. It&#39;s been an alias for
>  ``GDALException`` since Django 1.8.

>* Support for GEOS 3.3.x is dropped.

>* The way data is selected for ``GeometryField`` is changed to improve
>  performance, and in raw SQL queries, those fields must now be wrapped in
>  ``connection.ops.select``. See the :ref:`Raw queries note&lt;gis-raw-sql&gt;` in
>  the GIS tutorial for an example.

>.. _deprecated-features-2.0:

>Features deprecated in 2.0
>==========================

>``context`` argument of ``Field.from_db_value()`` and ``Expression.convert_value()``
>------------------------------------------------------------------------------------

>The ``context`` argument of ``Field.from_db_value()`` and
>``Expression.convert_value()`` is unused as it&#39;s always an empty dictionary.
>The signature of both methods is now::

>    (self, value, expression, connection)

>instead of::

>    (self, value, expression, connection, context)

>Support for the old signature in custom fields and expressions remains until
>Django 3.0.

>Miscellaneous
>-------------

>* The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor
>  of ``django.db.backends.postgresql``. It&#39;s been an alias since Django 1.9.
>  This only affects code that imports from the module directly. The
>  ``DATABASES`` setting can still use
>  ``&#39;django.db.backends.postgresql_psycopg2&#39;``, though you can simplify that by
>  using the ``&#39;django.db.backends.postgresql&#39;`` name added in Django 1.9.

>* ``django.shortcuts.render_to_response()`` is deprecated in favor of
>  :func:`django.shortcuts.render`. ``render()`` takes the same arguments
>  except that it also requires a ``request``.

>* The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn&#39;t interact well
>  well with third-party apps and is obsolete since HTML5 has mostly superseded
>  XHTML.

>* ``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the
>  request.

>* The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and
>  :meth:`.QuerySet.latest` is deprecated in favor of passing the field
>  names as arguments. Write ``.earliest(&#39;pub_date&#39;)`` instead of
>  ``.earliest(field_name=&#39;pub_date&#39;)``.

>.. _removed-features-2.0:

>Features removed in 2.0
>=======================

>These features have reached the end of their deprecation cycle and are removed
>in Django 2.0.

>See :ref:`deprecated-features-1.9` for details on these changes, including how
>to remove usage of these features.

>* The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is
>  removed.

>* ``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()``
>  is removed.

>* The ``django.forms.extras`` package is removed.

>* The ``assignment_tag`` helper is removed.

>* The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed.
>  The compatibility layer which allows absolute URLs to be considered equal to
>  relative ones when the path is identical is also removed.

>* ``Field.rel`` and ``Field.remote_field.to`` are removed.

>* The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now
>  required in models and migrations. Consider squashing migrations so that you
>  have fewer of them to update.

>* ``django.db.models.fields.add_lazy_relation()`` is removed.

>* When time zone support is enabled, database backends that don&#39;t support time
>  zones no longer convert aware datetimes to naive values in UTC anymore when
>  such values are passed as parameters to SQL queries executed outside of the
>  ORM, e.g. with ``cursor.execute()``.

>* ``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed.

>* The ``GeoManager`` and ``GeoQuerySet`` classes are removed.

>* The ``django.contrib.gis.geoip`` module is removed.

>* The ``supports_recursion`` check for template loaders is removed from:

>  * ``django.template.engine.Engine.find_template()``
>  * ``django.template.loader_tags.ExtendsNode.find_template()``
>  * ``django.template.loaders.base.Loader.supports_recursion()``
>  * ``django.template.loaders.cached.Loader.supports_recursion()``

>* The ``load_template`` and ``load_template_sources`` template loader methods
>  are removed.

>* The ``template_dirs`` argument for template loaders is removed:

>  * ``django.template.loaders.base.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.cache_key()``
>  * ``django.template.loaders.cached.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.get_template_sources()``
>  * ``django.template.loaders.filesystem.Loader.get_template_sources()``

>* ``django.template.loaders.base.Loader.__call__()`` is removed.

>* Support for custom error views that don&#39;t accept an ``exception`` parameter
>  is removed.

>* The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and
>  ``django.utils.feedgenerator.RssFeed`` is removed.

>* The ``app_name`` argument to ``include()`` is removed.

>* Support for passing a 3-tuple (including ``admin.site.urls``) as the first
>  argument to ``include()`` is removed.

>* Support for setting a URL instance namespace without an application namespace
>  is removed.

>* ``Field._get_val_from_obj()`` is removed.

>* ``django.template.loaders.eggs.Loader`` is removed.

>* The ``current_app`` parameter to the ``contrib.auth`` function-based views is
>  removed.

>* The ``callable_obj`` keyword argument to
>  ``SimpleTestCase.assertRaisesMessage()`` is removed.

>* Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is
>  removed.

>* The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is
>  removed.

>* The ``django.template.loader.LoaderOrigin`` and
>  ``django.template.base.StringOrigin`` aliases for
>  ``django.template.base.Origin`` are removed.

>See :ref:`deprecated-features-1.10` for details on these changes.

>* The ``makemigrations --exit`` option is removed.

>* Support for direct assignment to a reverse foreign key or many-to-many
>  relation is removed.

>* The ``get_srid()`` and ``set_srid()`` methods of
>  ``django.contrib.gis.geos.GEOSGeometry`` are removed.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  ``django.contrib.gis.geos.Point`` are removed.

>* The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon``
>  is removed.

>* ``django.utils.functional.allow_lazy()`` is removed.

>* The ``shell --plain`` option is removed.

>* The ``django.core.urlresolvers`` module is removed in favor of its new
>  location, ``django.urls``.

>* ``CommaSeparatedIntegerField`` is removed, except for support in historical
>  migrations.

>* The template ``Context.has_key()`` method is removed.

>* Support for the ``django.core.files.storage.Storage.accessed_time()``,
>  ``created_time()``, and ``modified_time()`` methods is removed.

>* Support for query lookups using the model name when
>  ``Meta.default_related_name`` is set is removed.

>* The MySQL ``__search`` lookup is removed.

>* The shim for supporting custom related manager classes without a
>  ``_apply_rel_filters()`` method is removed.

>* Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>  rather than properties is no longer supported.

>* The ``Model._meta.virtual_fields`` attribute is removed.

>* The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` and
>  ``virtual`` in ``Model._meta.add_field()`` are removed.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are removed.

>* ``django.contrib.gis.utils.precision_wkt()`` is removed.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is removed.

>* Support for ``Widget._format_value()`` is removed.

>* ``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are
>  removed.

>* The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>  ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>  removed.

>* The ``escape`` filter now uses ``django.utils.html.conditional_escape()``.

>* ``Manager.use_for_related_fields`` is removed.

>* Model ``Manager`` inheritance follows MRO inheritance rules. The requirement
>  to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is
>  removed.

>* Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is
>  removed.


>===========================


>### 1.11.9

>===========================

>*January 1, 2018*

>Django 1.11.9 fixes several bugs in 1.11.8.

>Bugfixes
>========

>* Fixed a regression in Django 1.11 that added newlines between ``MultiWidget``&#39;s
>  subwidgets (:ticket:`28890`).

>* Fixed incorrect class-based model index name generation for models with
>  quoted ``db_table`` (:ticket:`28876`).

>* Fixed incorrect foreign key constraint name for models with quoted
>  ``db_table`` (:ticket:`28876`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses more than one level of multi-table inheritance
>  (:ticket:`28856`).


>===========================


>### 1.11.8

>===========================

>*December 2, 2017*

>Django 1.11.8 fixes several bugs in 1.11.7.

>Bugfixes
>========

>* Reallowed, following a regression in Django 1.10, ``AuthenticationForm`` to
>  raise the inactive user error when using ``ModelBackend`` (:ticket:`28645`).

>* Added support for ``QuerySet.values()`` and ``values_list()`` for
>  ``union()``, ``difference()``, and ``intersection()`` queries
>  (:ticket:`28781`).

>* Fixed incorrect index name truncation when using a namespaced ``db_table``
>  (:ticket:`28792`).

>* Made ``QuerySet.iterator()`` use server-side cursors on PostgreSQL after
>  ``values()`` and ``values_list()`` (:ticket:`28817`).

>* Fixed crash on SQLite and MySQL when ordering by a filtered subquery that
>  uses ``nulls_first`` or ``nulls_last`` (:ticket:`28848`).

>* Made query lookups for ``CICharField``, ``CIEmailField``, and ``CITextField``
>  use a ``citext`` cast (:ticket:`28702`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses multi-table inheritance (:ticket:`28856`).

>* Fixed &quot;Cannot change column &#39;x&#39;: used in a foreign key constraint&quot; crash on
>  MySQL with a sequence of ``AlterField`` and/or ``RenameField`` operations in
>  a migration (:ticket:`28305`).


>===========================


>### 1.11.7

>===========================

>*November 1, 2017*

>Django 1.11.7 fixes several bugs in 1.11.6.

>Bugfixes
>========

>* Prevented ``cache.get_or_set()`` from caching ``None`` if the ``default``
>  argument is a callable that returns ``None`` (:ticket:`28601`).

>* Fixed the Basque ``DATE_FORMAT`` string (:ticket:`28710`).

>* Made ``QuerySet.reverse()`` affect ``nulls_first`` and ``nulls_last``
>  (:ticket:`28722`).

>* Fixed unquoted table names in ``Subquery`` SQL when using ``OuterRef``
>  (:ticket:`28689`).


>===========================


>### 1.11.6

>===========================

>*October 5, 2017*

>Django 1.11.6 fixes several bugs in 1.11.5.

>Bugfixes
>========

>* Made the ``CharField`` form field convert whitespace-only values to the
>  ``empty_value`` when ``strip`` is enabled (:ticket:`28555`).

>* Fixed crash when using the name of a model&#39;s autogenerated primary key
>  (``id``) in an ``Index``&#39;s ``fields`` (:ticket:`28597`).

>* Fixed a regression in Django 1.9 where a custom view error handler such as
>  ``handler404`` that accesses ``csrf_token`` could cause CSRF verification
>  failures on other pages (:ticket:`28488`).


>===========================


>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~",pyup-bot,16239342,2018-01-02T05:17:54Z,CONTRIBUTOR,False,1,1,1,,JavaScript,0fe53ff24c7baf0d3d806b8dd9e126c73caf9407,Update django from 1.10.8 to 2.0.1
166,https://api.github.com/repos/mozilla/distribution-viewer/pulls/324,324,Update djangorestframework to 3.7.7,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.7**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.7


>**Date**: [21st December 2017][3.7.7-milestone]

>* Fix typo to include *.mo locale files to packaging. [5697][gh5697], [5695][gh5695]



>### 3.7.6


>**Date**: [21st December 2017][3.7.6-milestone]

>* Add missing *.ico icon files to packaging.



>### 3.7.5


>**Date**: [21st December 2017][3.7.5-milestone]

>* Add missing *.woff2 font files to packaging. [5692][gh5692]
>* Add missing *.mo locale files to packaging. [5695][gh5695], [5696][gh5696]



>### 3.7.4


>**Date**: [20th December 2017][3.7.4-milestone]

>* Schema: Extract method for `manual_fields` processing [5633][gh5633]

>    Allows for easier customisation of `manual_fields` processing, for example
>    to provide per-method manual fields. `AutoSchema` adds `get_manual_fields`,
>    as the intended override point, and a utility method `update_fields`, to
>    handle by-name field replacement from a list, which, in general, you are not
>    expected to override.

>    Note: `AutoSchema.__init__` now ensures `manual_fields` is a list.
>    Previously may have been stored internally as `None`.
>* Remove ulrparse compatability shim; use six instead [5579][gh5579]
>* Drop compat wrapper for `TimeDelta.total_seconds()` [5577][gh5577]
>* Clean up all whitespace throughout project [5578][gh5578]
>* Compat cleanup [5581][gh5581]
>* Add pygments CSS block in browsable API views [5584][gh5584] [5587][gh5587]
>* Remove `set_rollback()` from compat [5591][gh5591]
>* Fix request body/POST access [5590][gh5590]
>* Rename test to reference correct issue [5610][gh5610]
>* Documentation Fixes [5611][gh5611] [5612][gh5612]
>* Remove references to unsupported Django versions in docs and code [5602][gh5602]
>* Test Serializer exclude for declared fields [5599][gh5599]
>* Fixed schema generation for filter backends [5613][gh5613]
>* Minor cleanup for ModelSerializer tests [5598][gh5598]
>* Reimplement request attribute access w/ `__getattr__` [5617][gh5617]
>* Fixed SchemaJSRenderer renders invalid Javascript [5607][gh5607]
>* Make Django 2.0 support official/explicit [5619][gh5619]
>* Perform type check on passed request argument [5618][gh5618]
>* Fix AttributeError hiding on request authenticators [5600][gh5600]
>* Update test requirements [5626][gh5626]
>* Docs: `Serializer._declared_fields` enable modifying fields on a serializer [5629][gh5629]
>* Fix packaging [5624][gh5624]
>* Fix readme rendering for PyPI, add readme build to CI [5625][gh5625]
>* Update tutorial [5622][gh5622]
>* Non-required fields with `allow_null=True` should not imply a default value [5639][gh5639]
>* Docs: Add `allow_null` serialization output note [5641][gh5641]
>* Update to use the Django 2.0 release in tox.ini [5645][gh5645]
>* Fix `Serializer.data` for Browsable API rendering when provided invalid `data` [5646][gh5646]
>* Docs: Note AutoSchema limitations on bare APIView [5649][gh5649]
>* Add `.basename` and `.reverse_action()` to ViewSet [5648][gh5648]
>* Docs: Fix typos in serializers documentation [5652][gh5652]
>* Fix `override_settings` compat [5668][gh5668]
>* Add DEFAULT_SCHEMA_CLASS setting [5658][gh5658]
>* Add docs note re generated BooleanField being `required=False` [5665][gh5665]
>* Add &#39;dist&#39; build [5656][gh5656]
>* Fix typo in docstring [5678][gh5678]
>* Docs: Add `UNAUTHENTICATED_USER = None` note [5679][gh5679]
>* Update OPTIONS example from “Documenting Your API” [5680][gh5680]
>* Docs: Add note on object permissions for FBVs [5681][gh5681]
>* Docs: Add example to `to_representation` docs [5682][gh5682]
>* Add link to Classy DRF in docs [5683][gh5683]
>* Document ViewSet.action [5685][gh5685]
>* Fix schema docs typo [5687][gh5687]
>* Fix URL pattern parsing in schema generation [5689][gh5689]
>* Add example using `source=‘*’` to custom field docs. [5688][gh5688]
>* Fix format_suffix_patterns behavior with Django 2 path() routes [5691][gh5691]




>### 3.7.3


>**Date**: [6th November 2017][3.7.3-milestone]

>* Fix `AppRegistryNotReady` error from contrib.auth view imports [5567][gh5567]




>### 3.7.2


>**Date**: [6th November 2017][3.7.2-milestone]

>* Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. [5510][gh5510]
>* Add missing import for TextLexer. [5512][gh5512]
>* Adding examples and documentation for caching [5514][gh5514]
>* Include date and date-time format for schema generation [5511][gh5511]
>* Use triple backticks for markdown code blocks [5513][gh5513]
>* Interactive docs - make bottom sidebar items sticky [5516][gh5516]
>* Clarify pagination system check [5524][gh5524]
>* Stop JSONBoundField mangling invalid JSON [5527][gh5527]
>* Have JSONField render as textarea in Browsable API [5530][gh5530]
>* Schema: Exclude OPTIONS/HEAD for ViewSet actions [5532][gh5532]
>* Fix ordering for dotted sources [5533][gh5533]
>* Fix: Fields with `allow_null=True` should imply a default serialization value [5518][gh5518]
>* Ensure Location header is strictly a &#39;str&#39;, not subclass. [5544][gh5544]
>* Add import to example in api-guide/parsers [5547][gh5547]
>* Catch OverflowError for &quot;out of range&quot; datetimes [5546][gh5546]
>* Add djangorestframework-rapidjson to third party packages [5549][gh5549]
>* Increase test coverage for `drf_create_token` command [5550][gh5550]
>* Add trove classifier for Python 3.6 support. [5555][gh5555]
>* Add pip cache support to the Travis CI configuration [5556][gh5556]
>* Rename [`wheel`] section to [`bdist_wheel`] as the former is legacy [5557][gh5557]
>* Fix invalid escape sequence deprecation warnings [5560][gh5560]
>* Add interactive docs error template [5548][gh5548]
>* Add rounding parameter to DecimalField [5562][gh5562]
>* Fix all BytesWarning caught during tests [5561][gh5561]
>* Use dict and set literals instead of calls to dict() and set() [5559][gh5559]
>* Change ImageField validation pattern, use validators from DjangoImageField [5539][gh5539]
>* Fix processing unicode symbols in query_string by Python 2 [5552][gh5552]




>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-12-21T14:14:35Z,CONTRIBUTOR,False,1,1,1,,JavaScript,1d5297860f4d67bd7fffc83db1adb732d7554f9d,Update djangorestframework from 3.6.3 to 3.7.7
167,https://api.github.com/repos/mozilla/distribution-viewer/pulls/323,323,Update djangorestframework to 3.7.6,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.6**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.6


>**Date**: [21st December 2017][3.7.6-milestone]

>* Add missing *.ico icon files to packaging.



>### 3.7.5


>**Date**: [21st December 2017][3.7.5-milestone]

>* Add missing *.woff2 font files to packaging. [5692][gh5692]
>* Add missing *.mo locale files to packaging. [5695][gh5695], [5696][gh5696]



>### 3.7.4


>**Date**: [20th December 2017][3.7.4-milestone]

>* Schema: Extract method for `manual_fields` processing [5633][gh5633]

>    Allows for easier customisation of `manual_fields` processing, for example
>    to provide per-method manual fields. `AutoSchema` adds `get_manual_fields`,
>    as the intended override point, and a utility method `update_fields`, to
>    handle by-name field replacement from a list, which, in general, you are not
>    expected to override.

>    Note: `AutoSchema.__init__` now ensures `manual_fields` is a list.
>    Previously may have been stored internally as `None`.
>* Remove ulrparse compatability shim; use six instead [5579][gh5579]
>* Drop compat wrapper for `TimeDelta.total_seconds()` [5577][gh5577]
>* Clean up all whitespace throughout project [5578][gh5578]
>* Compat cleanup [5581][gh5581]
>* Add pygments CSS block in browsable API views [5584][gh5584] [5587][gh5587]
>* Remove `set_rollback()` from compat [5591][gh5591]
>* Fix request body/POST access [5590][gh5590]
>* Rename test to reference correct issue [5610][gh5610]
>* Documentation Fixes [5611][gh5611] [5612][gh5612]
>* Remove references to unsupported Django versions in docs and code [5602][gh5602]
>* Test Serializer exclude for declared fields [5599][gh5599]
>* Fixed schema generation for filter backends [5613][gh5613]
>* Minor cleanup for ModelSerializer tests [5598][gh5598]
>* Reimplement request attribute access w/ `__getattr__` [5617][gh5617]
>* Fixed SchemaJSRenderer renders invalid Javascript [5607][gh5607]
>* Make Django 2.0 support official/explicit [5619][gh5619]
>* Perform type check on passed request argument [5618][gh5618]
>* Fix AttributeError hiding on request authenticators [5600][gh5600]
>* Update test requirements [5626][gh5626]
>* Docs: `Serializer._declared_fields` enable modifying fields on a serializer [5629][gh5629]
>* Fix packaging [5624][gh5624]
>* Fix readme rendering for PyPI, add readme build to CI [5625][gh5625]
>* Update tutorial [5622][gh5622]
>* Non-required fields with `allow_null=True` should not imply a default value [5639][gh5639]
>* Docs: Add `allow_null` serialization output note [5641][gh5641]
>* Update to use the Django 2.0 release in tox.ini [5645][gh5645]
>* Fix `Serializer.data` for Browsable API rendering when provided invalid `data` [5646][gh5646]
>* Docs: Note AutoSchema limitations on bare APIView [5649][gh5649]
>* Add `.basename` and `.reverse_action()` to ViewSet [5648][gh5648]
>* Docs: Fix typos in serializers documentation [5652][gh5652]
>* Fix `override_settings` compat [5668][gh5668]
>* Add DEFAULT_SCHEMA_CLASS setting [5658][gh5658]
>* Add docs note re generated BooleanField being `required=False` [5665][gh5665]
>* Add &#39;dist&#39; build [5656][gh5656]
>* Fix typo in docstring [5678][gh5678]
>* Docs: Add `UNAUTHENTICATED_USER = None` note [5679][gh5679]
>* Update OPTIONS example from “Documenting Your API” [5680][gh5680]
>* Docs: Add note on object permissions for FBVs [5681][gh5681]
>* Docs: Add example to `to_representation` docs [5682][gh5682]
>* Add link to Classy DRF in docs [5683][gh5683]
>* Document ViewSet.action [5685][gh5685]
>* Fix schema docs typo [5687][gh5687]
>* Fix URL pattern parsing in schema generation [5689][gh5689]
>* Add example using `source=‘*’` to custom field docs. [5688][gh5688]
>* Fix format_suffix_patterns behavior with Django 2 path() routes [5691][gh5691]




>### 3.7.3


>**Date**: [6th November 2017][3.7.3-milestone]

>* Fix `AppRegistryNotReady` error from contrib.auth view imports [5567][gh5567]




>### 3.7.2


>**Date**: [6th November 2017][3.7.2-milestone]

>* Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. [5510][gh5510]
>* Add missing import for TextLexer. [5512][gh5512]
>* Adding examples and documentation for caching [5514][gh5514]
>* Include date and date-time format for schema generation [5511][gh5511]
>* Use triple backticks for markdown code blocks [5513][gh5513]
>* Interactive docs - make bottom sidebar items sticky [5516][gh5516]
>* Clarify pagination system check [5524][gh5524]
>* Stop JSONBoundField mangling invalid JSON [5527][gh5527]
>* Have JSONField render as textarea in Browsable API [5530][gh5530]
>* Schema: Exclude OPTIONS/HEAD for ViewSet actions [5532][gh5532]
>* Fix ordering for dotted sources [5533][gh5533]
>* Fix: Fields with `allow_null=True` should imply a default serialization value [5518][gh5518]
>* Ensure Location header is strictly a &#39;str&#39;, not subclass. [5544][gh5544]
>* Add import to example in api-guide/parsers [5547][gh5547]
>* Catch OverflowError for &quot;out of range&quot; datetimes [5546][gh5546]
>* Add djangorestframework-rapidjson to third party packages [5549][gh5549]
>* Increase test coverage for `drf_create_token` command [5550][gh5550]
>* Add trove classifier for Python 3.6 support. [5555][gh5555]
>* Add pip cache support to the Travis CI configuration [5556][gh5556]
>* Rename [`wheel`] section to [`bdist_wheel`] as the former is legacy [5557][gh5557]
>* Fix invalid escape sequence deprecation warnings [5560][gh5560]
>* Add interactive docs error template [5548][gh5548]
>* Add rounding parameter to DecimalField [5562][gh5562]
>* Fix all BytesWarning caught during tests [5561][gh5561]
>* Use dict and set literals instead of calls to dict() and set() [5559][gh5559]
>* Change ImageField validation pattern, use validators from DjangoImageField [5539][gh5539]
>* Fix processing unicode symbols in query_string by Python 2 [5552][gh5552]




>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-12-21T12:14:33Z,CONTRIBUTOR,False,1,1,1,,JavaScript,68ec217489048a4456a33c8fccd3dcb44b72645d,Update djangorestframework from 3.6.3 to 3.7.6
168,https://api.github.com/repos/mozilla/distribution-viewer/pulls/322,322,Update djangorestframework to 3.7.4,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.4


>**Date**: [20th December 2017][3.7.4-milestone]

>* Schema: Extract method for `manual_fields` processing [5633][gh5633]

>    Allows for easier customisation of `manual_fields` processing, for example
>    to provide per-method manual fields. `AutoSchema` adds `get_manual_fields`,
>    as the intended override point, and a utility method `update_fields`, to
>    handle by-name field replacement from a list, which, in general, you are not
>    expected to override.

>    Note: `AutoSchema.__init__` now ensures `manual_fields` is a list.
>    Previously may have been stored internally as `None`.
>* Remove ulrparse compatability shim; use six instead [5579][gh5579]
>* Drop compat wrapper for `TimeDelta.total_seconds()` [5577][gh5577]
>* Clean up all whitespace throughout project [5578][gh5578]
>* Compat cleanup [5581][gh5581]
>* Add pygments CSS block in browsable API views [5584][gh5584] [5587][gh5587]
>* Remove `set_rollback()` from compat [5591][gh5591]
>* Fix request body/POST access [5590][gh5590]
>* Rename test to reference correct issue [5610][gh5610]
>* Documentation Fixes [5611][gh5611] [5612][gh5612]
>* Remove references to unsupported Django versions in docs and code [5602][gh5602]
>* Test Serializer exclude for declared fields [5599][gh5599]
>* Fixed schema generation for filter backends [5613][gh5613]
>* Minor cleanup for ModelSerializer tests [5598][gh5598]
>* Reimplement request attribute access w/ `__getattr__` [5617][gh5617]
>* Fixed SchemaJSRenderer renders invalid Javascript [5607][gh5607]
>* Make Django 2.0 support official/explicit [5619][gh5619]
>* Perform type check on passed request argument [5618][gh5618]
>* Fix AttributeError hiding on request authenticators [5600][gh5600]
>* Update test requirements [5626][gh5626]
>* Docs: `Serializer._declared_fields` enable modifying fields on a serializer [5629][gh5629]
>* Fix packaging [5624][gh5624]
>* Fix readme rendering for PyPI, add readme build to CI [5625][gh5625]
>* Update tutorial [5622][gh5622]
>* Non-required fields with `allow_null=True` should not imply a default value [5639][gh5639]
>* Docs: Add `allow_null` serialization output note [5641][gh5641]
>* Update to use the Django 2.0 release in tox.ini [5645][gh5645]
>* Fix `Serializer.data` for Browsable API rendering when provided invalid `data` [5646][gh5646]
>* Docs: Note AutoSchema limitations on bare APIView [5649][gh5649]
>* Add `.basename` and `.reverse_action()` to ViewSet [5648][gh5648]
>* Docs: Fix typos in serializers documentation [5652][gh5652]
>* Fix `override_settings` compat [5668][gh5668]
>* Add DEFAULT_SCHEMA_CLASS setting [5658][gh5658]
>* Add docs note re generated BooleanField being `required=False` [5665][gh5665]
>* Add &#39;dist&#39; build [5656][gh5656]
>* Fix typo in docstring [5678][gh5678]
>* Docs: Add `UNAUTHENTICATED_USER = None` note [5679][gh5679]
>* Update OPTIONS example from “Documenting Your API” [5680][gh5680]
>* Docs: Add note on object permissions for FBVs [5681][gh5681]
>* Docs: Add example to `to_representation` docs [5682][gh5682]
>* Add link to Classy DRF in docs [5683][gh5683]
>* Document ViewSet.action [5685][gh5685]
>* Fix schema docs typo [5687][gh5687]
>* Fix URL pattern parsing in schema generation [5689][gh5689]
>* Add example using `source=‘*’` to custom field docs. [5688][gh5688]
>* Fix format_suffix_patterns behavior with Django 2 path() routes [5691][gh5691]




>### 3.7.3


>**Date**: [6th November 2017][3.7.3-milestone]

>* Fix `AppRegistryNotReady` error from contrib.auth view imports [5567][gh5567]




>### 3.7.2


>**Date**: [6th November 2017][3.7.2-milestone]

>* Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. [5510][gh5510]
>* Add missing import for TextLexer. [5512][gh5512]
>* Adding examples and documentation for caching [5514][gh5514]
>* Include date and date-time format for schema generation [5511][gh5511]
>* Use triple backticks for markdown code blocks [5513][gh5513]
>* Interactive docs - make bottom sidebar items sticky [5516][gh5516]
>* Clarify pagination system check [5524][gh5524]
>* Stop JSONBoundField mangling invalid JSON [5527][gh5527]
>* Have JSONField render as textarea in Browsable API [5530][gh5530]
>* Schema: Exclude OPTIONS/HEAD for ViewSet actions [5532][gh5532]
>* Fix ordering for dotted sources [5533][gh5533]
>* Fix: Fields with `allow_null=True` should imply a default serialization value [5518][gh5518]
>* Ensure Location header is strictly a &#39;str&#39;, not subclass. [5544][gh5544]
>* Add import to example in api-guide/parsers [5547][gh5547]
>* Catch OverflowError for &quot;out of range&quot; datetimes [5546][gh5546]
>* Add djangorestframework-rapidjson to third party packages [5549][gh5549]
>* Increase test coverage for `drf_create_token` command [5550][gh5550]
>* Add trove classifier for Python 3.6 support. [5555][gh5555]
>* Add pip cache support to the Travis CI configuration [5556][gh5556]
>* Rename [`wheel`] section to [`bdist_wheel`] as the former is legacy [5557][gh5557]
>* Fix invalid escape sequence deprecation warnings [5560][gh5560]
>* Add interactive docs error template [5548][gh5548]
>* Add rounding parameter to DecimalField [5562][gh5562]
>* Fix all BytesWarning caught during tests [5561][gh5561]
>* Use dict and set literals instead of calls to dict() and set() [5559][gh5559]
>* Change ImageField validation pattern, use validators from DjangoImageField [5539][gh5539]
>* Fix processing unicode symbols in query_string by Python 2 [5552][gh5552]




>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-12-20T16:44:28Z,CONTRIBUTOR,False,1,1,1,,JavaScript,32139c9d68a2dd01e03ab2068050ce5ebd51424f,Update djangorestframework from 3.6.3 to 3.7.4
169,https://api.github.com/repos/mozilla/distribution-viewer/pulls/321,321,Update jest-cli to the latest version 🚀,"
## Version **22.0.0** of [jest-cli](https://github.com/facebook/jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      jest-cli
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      21.3.0-beta.15
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **22.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of jest-cli.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---




<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-12-18T15:54:18Z,NONE,False,1,1,1,,JavaScript,9dacf9aad8525b4f0f95854a4dd9442e1a019738,fix(package): update jest-cli to version 22.0.0
170,https://api.github.com/repos/mozilla/distribution-viewer/pulls/320,320,Update babel-jest to the latest version 🚀,"
## Version **22.0.0** of [babel-jest](https://github.com/facebook/jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      babel-jest
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      21.2.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **22.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of babel-jest.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---




<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-12-18T12:23:35Z,NONE,False,1,1,1,,JavaScript,62797a1d8d909c0afad05fa6c7f8013705089bef,fix(package): update babel-jest to version 22.0.0
171,https://api.github.com/repos/mozilla/distribution-viewer/pulls/319,319,Update raven to 6.4.0,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.1.0**. I have updated it to **6.4.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.4.0

>------------------
>* [Core] Support for defining `sanitized_keys` on the client (pr/990)
>* [Django] Support for Django 2.0 Urlresolver
>* [Docs] Several fixes and improvements



>### 6.3.0

>------------------
>* [Core] Changed default timeout on http calls to 5 seconds
>* [Core] Fixed relative paths for traces generated on Windows
>* [Django] Fixed import issues for Django projects &lt; 1.7
>* [Django] Fixed django management command data option
>* [Django/DRF] Added `application/octet-stream` to non-cacheable types in middleware
>* [Django] Added parsing X-Forwarded-For for `user.ip_address`
>* [Flask] Added `request.remote_addr` as fallback for ip addresses
>* [Lambda] Added initial AWS Lambda support with `contrib.awslambda.LambdaClient` 




>### 6.2.1

>------------------

>* [Core] Fixed requirements in setup.py




>### 6.2.0

>------------------

>* [Core] `get_frame_locals` properly using `max_var_size`
>* [Core] Fixed raven initialization when `logging._srcfile` is None
>* [Core] Fixed import locking to avoid recursion
>* [Django] Fixed several issues for Django 1.11 and Django 2.0
>* [Django/DRF] Fixed issue with unavailable request data
>* [Flask] Added app.logger instrumentation
>* [Flask] Added signal on setup_logging
>* [ZConfig] Added standalone ZConfig support
>* [Celery] Fixed several issues related to Celery








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-12-12T06:51:11Z,CONTRIBUTOR,False,1,1,1,,JavaScript,7603d23801815c661c45ac942f9cf41bab9f6893,Update raven from 6.1.0 to 6.4.0
172,https://api.github.com/repos/mozilla/distribution-viewer/pulls/318,318,Update django to 2.0,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.8**. I have updated it to **2.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 2.0

>========================

>*December 2, 2017*

>Welcome to Django 2.0!

>These release notes cover the :ref:`new features &lt;whats-new-2.0&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.0&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.11 or earlier. We&#39;ve
>:ref:`dropped some features&lt;removed-features-2.0&gt;` that have reached the end of
>their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for some
>features &lt;deprecated-features-2.0&gt;`.

>This release starts Django&#39;s use of a :ref:`loose form of semantic versioning
>&lt;internal-release-cadence&gt;`, but there aren&#39;t any major backwards incompatible
>changes that might be expected of a 2.0 release. Upgrading should be a similar
>amount of effort as past feature releases.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Django 2.0 supports Python 3.4, 3.5, and 3.6. We **highly recommend** and only
>officially support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2.7.

>Django 2.0 will be the last release series to support Python 3.4. If you plan
>a deployment of Python 3.4 beyond the end-of-life for Django 2.0 (April 2019),
>stick with Django 1.11 LTS (supported until April 2020) instead. Note, however,
>that the end-of-life for Python 3.4 is March 2019.

>Third-party library support for older version of Django
>=======================================================

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able to run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-2.0:

>What&#39;s new in Django 2.0
>========================

>Simplified URL routing syntax
>-----------------------------

>The new :func:`django.urls.path()` function allows a simpler, more readable URL
>routing syntax. For example, this example from previous Django releases::

>    url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),

>could be written as::

>    path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),

>The new syntax supports type coercion of URL parameters. In the example, the
>view will receive the ``year`` keyword argument as an integer rather than as
>a string. Also, the URLs that will match are slightly less constrained in the
>rewritten example. For example, the year 10000 will now match since the year
>integers aren&#39;t constrained to be exactly four digits long as they are in the
>regular expression.

>The ``django.conf.urls.url()`` function from previous versions is now available
>as :func:`django.urls.re_path`. The old location remains for backwards
>compatibility, without an imminent deprecation. The old
>``django.conf.urls.include()`` function is now importable from ``django.urls``
>so you can use ``from django.urls import include, path, re_path`` in your
>URLconfs.

>The :doc:`/topics/http/urls` document is rewritten to feature the new syntax
>and provide more details.

>Mobile-friendly ``contrib.admin``
>---------------------------------

>The admin is now responsive and supports all major mobile devices. Older
>browsers may experience varying levels of graceful degradation.

>Window expressions
>------------------

>The new :class:`~django.db.models.expressions.Window` expression allows
>adding an ``OVER`` clause to querysets. You can use :ref:`window functions
>&lt;window-functions&gt;` and :ref:`aggregate functions &lt;aggregation-functions&gt;` in
>the expression.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :attr:`.ModelAdmin.autocomplete_fields` attribute and
>  :meth:`.ModelAdmin.get_autocomplete_fields` method allow using an
>  `Select2 &lt;https://select2.org&gt;`_ search widget for ``ForeignKey`` and
>  ``ManyToManyField``.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased from
>  36,000 to 100,000.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added MySQL support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` function,
>  :class:`~django.contrib.gis.db.models.functions.GeoHash` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :lookup:`isvalid` lookup, and :ref:`distance lookups &lt;distance-lookups&gt;`.

>* Added the :class:`~django.contrib.gis.db.models.functions.Azimuth` and
>  :class:`~django.contrib.gis.db.models.functions.LineLocatePoint` functions,
>  supported on PostGIS and SpatiaLite.

>* Any :class:`~django.contrib.gis.geos.GEOSGeometry` imported from GeoJSON now
>  has its SRID set.

>* Added the :attr:`.OSMWidget.default_zoom` attribute to customize the map&#39;s
>  default zoom level.

>* Made metadata readable and editable on rasters through the
>  :attr:`~django.contrib.gis.gdal.GDALRaster.metadata`,
>  :attr:`~django.contrib.gis.gdal.GDALRaster.info`, and
>  :attr:`~django.contrib.gis.gdal.GDALBand.metadata` attributes.

>* Allowed passing driver-specific creation options to
>  :class:`~django.contrib.gis.gdal.GDALRaster` objects using ``papsz_options``.

>* Allowed creating :class:`~django.contrib.gis.gdal.GDALRaster` objects in
>  GDAL&#39;s internal virtual filesystem. Rasters can now be :ref:`created from and
>  converted to binary data &lt;gdal-raster-vsimem&gt;` in-memory.

>* The new :meth:`GDALBand.color_interp()
>  &lt;django.contrib.gis.gdal.GDALBand.color_interp&gt;` method returns the color
>  interpretation for the band.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.ArrayAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.functions.RandomUUID` database
>  function returns a version 4 UUID. It requires use of PostgreSQL&#39;s
>  ``pgcrypto`` extension which can be activated using the new
>  :class:`~django.contrib.postgres.operations.CryptoExtension` migration
>  operation.

>* :class:`django.contrib.postgres.indexes.GinIndex` now supports the
>  ``fastupdate`` and ``gin_pending_list_limit`` parameters.

>* The new :class:`~django.contrib.postgres.indexes.GistIndex` class allows
>  creating ``GiST`` indexes in the database. The new
>  :class:`~django.contrib.postgres.operations.BtreeGistExtension` migration
>  operation installs the ``btree_gist`` extension to add support for operator
>  classes that aren&#39;t built-in.

>* :djadmin:`inspectdb` can now introspect ``JSONField`` and various
>  ``RangeField``\s (``django.contrib.postgres`` must be in ``INSTALLED_APPS``).

>:mod:`django.contrib.sitemaps`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added the ``protocol`` keyword argument to the
>  :class:`~django.contrib.sitemaps.GenericSitemap` constructor.

>Cache
>~~~~~

>* ``cache.set_many()`` now returns a list of keys that failed to be inserted.
>  For the built-in backends, failed inserts can only happen on memcached.

>File Storage
>~~~~~~~~~~~~

>* :meth:`File.open() &lt;django.core.files.File.open&gt;` can be used as a context
>  manager, e.g. ``with file.open() as f:``.

>Forms
>~~~~~

>* The new ``date_attrs`` and ``time_attrs`` arguments for
>  :class:`~django.forms.SplitDateTimeWidget` and
>  :class:`~django.forms.SplitHiddenDateTimeWidget` allow specifying different
>  HTML attributes for the ``DateInput`` and ``TimeInput`` (or hidden)
>  subwidgets.

>* The new :meth:`Form.errors.get_json_data()
>  &lt;django.forms.Form.errors.get_json_data&gt;` method returns form errors as
>  a dictionary suitable for including in a JSON response.

>Generic Views
>~~~~~~~~~~~~~

>* The new :attr:`.ContextMixin.extra_context` attribute allows adding context
>  in ``View.as_view()``.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :djadmin:`inspectdb` now translates MySQL&#39;s unsigned integer columns to
>  ``PositiveIntegerField`` or ``PositiveSmallIntegerField``.

>* The new :option:`makemessages --add-location` option controls the comment
>  format in PO files.

>* :djadmin:`loaddata` can now :ref:`read from stdin &lt;loading-fixtures-stdin&gt;`.

>* The new :option:`diffsettings --output` option allows formatting the output
>  in a unified diff format.

>* On Oracle, :djadmin:`inspectdb` can now introspect ``AutoField`` if the
>  column is created as an identity column.

>* On MySQL, :djadmin:`dbshell` now supports client-side TLS certificates.

>Migrations
>~~~~~~~~~~

>* The new :option:`squashmigrations --squashed-name` option allows naming the
>  squashed migration.

>Models
>~~~~~~

>* The new :class:`~django.db.models.functions.StrIndex` database function
>  finds the starting index of a string inside another string.

>* On Oracle, ``AutoField`` and ``BigAutoField`` are now created as `identity
>  columns`_.

>  .. _`identity columns`: https://docs.oracle.com/database/121/DRDAA/migr_tools_feat.htmDRDAA109

>* The new ``chunk_size`` parameter of :meth:`.QuerySet.iterator` controls the
>  number of rows fetched by the Python database client when streaming results
>  from the database. For databases that don&#39;t support server-side cursors, it
>  controls the number of results Django fetches from the database adapter.

>* :meth:`.QuerySet.earliest`, :meth:`.QuerySet.latest`, and
>  :attr:`Meta.get_latest_by &lt;django.db.models.Options.get_latest_by&gt;` now
>  allow ordering by several fields.

>* Added the :class:`~django.db.models.functions.ExtractQuarter` function to
>  extract the quarter from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField`, and exposed it through the
>  :lookup:`quarter` lookup.

>* Added the :class:`~django.db.models.functions.TruncQuarter` function to
>  truncate :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` to the first day of a quarter.

>* Added the :attr:`~django.db.models.Index.db_tablespace` parameter to
>  class-based indexes.

>* If the database supports a native duration field (Oracle and PostgreSQL),
>  :class:`~django.db.models.functions.Extract` now works with
>  :class:`~django.db.models.DurationField`.

>* Added the ``of`` argument to :meth:`.QuerySet.select_for_update()`, supported
>  on PostgreSQL and Oracle, to lock only rows from specific tables rather than
>  all selected tables. It may be helpful particularly when
>  :meth:`~.QuerySet.select_for_update()` is used in conjunction with
>  :meth:`~.QuerySet.select_related()`.

>* The new ``field_name`` parameter of :meth:`.QuerySet.in_bulk` allows fetching
>  results based on any unique model field.

>* :meth:`.CursorWrapper.callproc()` now takes an optional dictionary of keyword
>  parameters, if the backend supports this feature. Of Django&#39;s built-in
>  backends, only Oracle supports it.

>* The new :meth:`connection.execute_wrapper()
>  &lt;django.db.backends.base.DatabaseWrapper.execute_wrapper&gt;` method allows
>  :doc:`installing wrappers around execution of database queries
>  &lt;/topics/db/instrumentation&gt;`.

>* The new ``filter`` argument for built-in aggregates allows :ref:`adding
>  different conditionals &lt;conditional-aggregation&gt;` to multiple aggregations
>  over the same fields or relations.

>* Added support for expressions in :attr:`Meta.ordering
>  &lt;django.db.models.Options.ordering&gt;`.

>* The new ``named`` parameter of :meth:`.QuerySet.values_list` allows fetching
>  results as named tuples.

>* The new :class:`.FilteredRelation` class allows adding an ``ON`` clause to
>  querysets.

>Pagination
>~~~~~~~~~~

>* Added :meth:`Paginator.get_page() &lt;django.core.paginator.Paginator.get_page&gt;`
>  to provide the documented pattern of handling invalid page numbers.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`runserver` Web server supports HTTP 1.1.

>Templates
>~~~~~~~~~

>* To increase the usefulness of :meth:`.Engine.get_default` in third-party
>  apps, it now returns the first engine if multiple ``DjangoTemplates`` engines
>  are configured in ``TEMPLATES`` rather than raising ``ImproperlyConfigured``.

>* Custom template tags may now accept keyword-only arguments.

>Tests
>~~~~~

>* Added threading support to :class:`~django.test.LiveServerTestCase`.

>* Added settings that allow customizing the test tablespace parameters for
>  Oracle: :setting:`DATAFILE_SIZE`, :setting:`DATAFILE_TMP_SIZE`,
>  :setting:`DATAFILE_EXTSIZE`, and :setting:`DATAFILE_TMP_EXTSIZE`.

>Validators
>~~~~~~~~~~

>* The new :class:`.ProhibitNullCharactersValidator` disallows the null
>  character in the input of the :class:`~django.forms.CharField` form field
>  and its subclasses. Null character input was observed from vulnerability
>  scanning tools. Most databases silently discard null characters, but
>  psycopg2 2.7+ raises an exception when trying to save a null character to
>  a char/text field with PostgreSQL.

>.. _backwards-incompatible-2.0:

>Backwards incompatible changes in 2.0
>=====================================

>Removed support for bytestrings in some places
>----------------------------------------------

>To support native Python 2 strings, older Django versions had to accept both
>bytestrings and unicode strings. Now that Python 2 support is dropped,
>bytestrings should only be encountered around input/output boundaries (handling
>of binary fields or HTTP streams, for example). You might have to update your
>code to limit bytestring usage to a minimum, as Django no longer accepts
>bytestrings in certain code paths.

>For example, ``reverse()`` now uses ``str()`` instead of ``force_text()`` to
>coerce the ``args`` and ``kwargs`` it receives, prior to their placement in
>the URL. For bytestrings, this creates a string with an undesired ``b`` prefix
>as well as additional quotes (``str(b&#39;foo&#39;)`` is ``&quot;b&#39;foo&#39;&quot;``). To adapt, call
>``decode()`` on the bytestring before passing it to ``reverse()``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.datetime_cast_date_sql()``,
>  ``datetime_cast_time_sql()``, ``datetime_trunc_sql()``,
>  ``datetime_extract_sql()``, and ``date_interval_sql()`` methods now return
>  only the SQL to perform the operation instead of SQL and a list of
>  parameters.

>* Third-party database backends should add a ``DatabaseWrapper.display_name``
>  attribute with the name of the database that your backend works with. Django
>  may use it in various messages, such as in system checks.

>* The first argument of ``SchemaEditor._alter_column_type_sql()`` is now
>  ``model`` rather than ``table``.

>* The first argument of ``SchemaEditor._create_index_name()`` is now
>  ``table_name`` rather than ``model``.

>* To enable ``FOR UPDATE OF`` support, set
>  ``DatabaseFeatures.has_select_for_update_of = True``. If the database
>  requires that the arguments to ``OF`` be columns rather than tables, set
>  ``DatabaseFeatures.select_for_update_of_column = True``.

>* To enable support for :class:`~django.db.models.expressions.Window`
>  expressions, set ``DatabaseFeatures.supports_over_clause`` to ``True``. You
>  may need to customize the ``DatabaseOperations.window_start_rows_start_end()``
>  and/or ``window_start_range_start_end()`` methods.

>* Third-party database backends should add a
>  ``DatabaseOperations.cast_char_field_without_max_length`` attribute with the
>  database data type that will be used in the
>  :class:`~django.db.models.functions.Cast` function for a ``CharField`` if the
>  ``max_length`` argument isn&#39;t provided.

>* The first argument of ``DatabaseCreation._clone_test_db()`` and
>  ``get_test_db_clone_settings()`` is now ``suffix`` rather
>  than ``number`` (in case you want to rename the signatures in your backend
>  for consistency). ``django.test`` also now passes those values as strings
>  rather than as integers.

>* Third-party database backends should add a
>  ``DatabaseIntrospection.get_sequences()`` method based on the stub in
>  ``BaseDatabaseIntrospection``.

>Dropped support for Oracle 11.2
>-------------------------------

>The end of upstream support for Oracle 11.2 is Dec. 2020. Django 1.11 will be
>supported until April 2020 which almost reaches this date. Django 2.0
>officially supports Oracle 12.1+.

>Default MySQL isolation level is read committed
>-----------------------------------------------

>MySQL&#39;s default isolation level, repeatable read, may cause data loss in
>typical Django usage. To prevent that and for consistency with other databases,
>the default isolation level is now read committed. You can use the
>:setting:`DATABASES` setting to :ref:`use a different isolation level
>&lt;mysql-isolation-level&gt;`, if needed.

>:attr:`AbstractUser.last_name &lt;django.contrib.auth.models.User.last_name&gt;` ``max_length`` increased to 150
>----------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.last_name` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>If you want to preserve the 30 character limit for last names, use a custom
>form::

>    from django.contrib.auth.forms import UserChangeForm

>    class MyUserChangeForm(UserChangeForm):
>        last_name = forms.CharField(max_length=30, required=False)

>If you wish to keep this restriction in the admin when editing users, set
>``UserAdmin.form`` to use this form::

>    from django.contrib.auth.admin import UserAdmin
>    from django.contrib.auth.models import User

>    class MyUserAdmin(UserAdmin):
>        form = MyUserChangeForm

>    admin.site.unregister(User)
>    admin.site.register(User, MyUserAdmin)

>``QuerySet.reverse()`` and ``last()`` are prohibited after slicing
>------------------------------------------------------------------

>Calling ``QuerySet.reverse()`` or ``last()`` on a sliced queryset leads to
>unexpected results due to the slice being applied after reordering. This is
>now prohibited, e.g.::

>    &gt;&gt;&gt; Model.objects.all()[:2].reverse()
>    Traceback (most recent call last):
>    ...
>    TypeError: Cannot reverse a query once a slice has been taken.

>Form fields no longer accept optional arguments as positional arguments
>-----------------------------------------------------------------------

>To help prevent runtime errors due to incorrect ordering of form field
>arguments, optional arguments of built-in form fields are no longer accepted
>as positional arguments. For example::

>    forms.IntegerField(25, 10)

>raises an exception and should be replaced with::

>    forms.IntegerField(max_value=25, min_value=10)

>``call_command()`` validates the options it receives
>----------------------------------------------------

>``call_command()`` now validates that the argument parser of the command being
>called defines all of the options passed to ``call_command()``.

>For custom management commands that use options not created using
>``parser.add_argument()``, add a ``stealth_options`` attribute on the command::

>    class MyCommand(BaseCommand):
>        stealth_options = (&#39;option_name&#39;, ...)

>Indexes no longer accept positional arguments
>---------------------------------------------

>For example::

>    models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)

>raises an exception and should be replaced with::

>    models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)

>Foreign key constraints are now enabled on SQLite
>-------------------------------------------------

>This will appear as a backwards-incompatible change (``IntegrityError:
>FOREIGN KEY constraint failed``) if attempting to save an existing model
>instance that&#39;s violating a foreign key constraint.

>Foreign keys are now created with ``DEFERRABLE INITIALLY DEFERRED`` instead of
>``DEFERRABLE IMMEDIATE``. Thus, tables may need to be rebuilt to recreate
>foreign keys with the new definition, particularly if you&#39;re using a pattern
>like this::

>    from django.db import transaction

>    with transaction.atomic():
>        Book.objects.create(author_id=1)
>        Author.objects.create(id=1)

>If you don&#39;t recreate the foreign key as ``DEFERRED``, the first ``create()``
>would fail now that foreign key constraints are enforced.

>Backup your database first! After upgrading to Django 2.0, you can then
>rebuild tables using a script similar to this::

>    from django.apps import apps
>    from django.db import connection

>    for app in apps.get_app_configs():
>        for model in app.get_models(include_auto_created=True):
>            if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
>                for base in model.__bases__:
>                    if hasattr(base, &#39;_meta&#39;):
>                        base._meta.local_many_to_many = []
>                model._meta.local_many_to_many = []
>                with connection.schema_editor() as editor:
>                    editor._remake_table(model)

>This script hasn&#39;t received extensive testing and needs adaption for various
>cases such as multiple databases. Feel free to contribute improvements.

>In addition, because of a table alteration limitation of SQLite, it&#39;s prohibited
>to perform :class:`~django.db.migrations.operations.RenameModel` and
>:class:`~django.db.migrations.operations.RenameField` operations on models or
>fields referenced by other models in a transaction. In order to allow migrations
>containing these operations to be applied, you must set the
>``Migration.atomic`` attribute to ``False``.

>Miscellaneous
>-------------

>* The ``SessionAuthenticationMiddleware`` class is removed. It provided no
>  functionality since session authentication is unconditionally enabled in
>  Django 1.10.

>* The default HTTP error handlers (``handler404``, etc.) are now callables
>  instead of dotted Python path strings. Django favors callable references
>  since they provide better performance and debugging experience.

>* :class:`~django.views.generic.base.RedirectView` no longer silences
>  ``NoReverseMatch`` if the ``pattern_name`` doesn&#39;t exist.

>* When :setting:`USE_L10N` is off, :class:`~django.forms.FloatField` and
>  :class:`~django.forms.DecimalField` now respect :setting:`DECIMAL_SEPARATOR`
>  and :setting:`THOUSAND_SEPARATOR` during validation. For example, with the
>  settings::

>     USE_L10N = False
>     USE_THOUSAND_SEPARATOR = True
>     DECIMAL_SEPARATOR = &#39;,&#39;
>     THOUSAND_SEPARATOR = &#39;.&#39;

>  an input of ``&quot;1.345&quot;`` is now converted to ``1345`` instead of ``1.345``.

>* Subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser` are no
>  longer required to implement ``get_short_name()`` and ``get_full_name()``.
>  (The base implementations that raise ``NotImplementedError`` are removed.)
>  ``django.contrib.admin`` uses these methods if implemented but doesn&#39;t
>  require them. Third-party apps that use these methods may want to adopt a
>  similar approach.

>* The ``FIRST_DAY_OF_WEEK`` and ``NUMBER_GROUPING`` format settings are now
>  kept as integers in JavaScript and JSON i18n view outputs.

>* :meth:`~django.test.TransactionTestCase.assertNumQueries` now ignores
>  connection configuration queries. Previously, if a test opened a new database
>  connection, those queries could be included as part of the
>  ``assertNumQueries()`` count.

>* The default size of the Oracle test tablespace is increased from 20M to 50M
>  and the default autoextend size is increased from 10M to 25M.

>* To improve performance when streaming large result sets from the database,
>  :meth:`.QuerySet.iterator` now fetches 2000 rows at a time instead of 100.
>  The old behavior can be restored using the ``chunk_size`` parameter. For
>  example::

>      Book.objects.iterator(chunk_size=100)

>* Providing unknown package names in the ``packages`` argument of the
>  :class:`~django.views.i18n.JavaScriptCatalog` view now raises ``ValueError``
>  instead of passing silently.

>* A model instance&#39;s primary key now appears in the default ``Model.__str__()``
>  method, e.g. ``Question object (1)``.

>* ``makemigrations`` now detects changes to the model field ``limit_choices_to``
>  option. Add this to your existing migrations or accept an auto-generated
>  migration for fields that use it.

>* Performing queries that require :ref:`automatic spatial transformations
>  &lt;automatic-spatial-transformations&gt;` now raises ``NotImplementedError``
>  on MySQL instead of silently using non-transformed geometries.

>* ``django.core.exceptions.DjangoRuntimeWarning`` is removed. It was only used
>  in the cache backend as an intermediate class in ``CacheKeyWarning``&#39;s
>  inheritance of ``RuntimeWarning``.

>* Renamed ``BaseExpression._output_field`` to ``output_field``. You may need
>  to update custom expressions.

>* In older versions, forms and formsets combine their ``Media`` with widget
>  ``Media`` by concatenating the two. The combining now tries to :ref:`preserve
>  the relative order of elements in each list &lt;form-media-asset-order&gt;`.
>  ``MediaOrderConflictWarning`` is issued if the order can&#39;t be preserved.

>* ``django.contrib.gis.gdal.OGRException`` is removed. It&#39;s been an alias for
>  ``GDALException`` since Django 1.8.

>* Support for GEOS 3.3.x is dropped.

>* The way data is selected for ``GeometryField`` is changed to improve
>  performance, and in raw SQL queries, those fields must now be wrapped in
>  ``connection.ops.select``. See the :ref:`Raw queries note&lt;gis-raw-sql&gt;` in
>  the GIS tutorial for an example.

>.. _deprecated-features-2.0:

>Features deprecated in 2.0
>==========================

>``context`` argument of ``Field.from_db_value()`` and ``Expression.convert_value()``
>------------------------------------------------------------------------------------

>The ``context`` argument of ``Field.from_db_value()`` and
>``Expression.convert_value()`` is unused as it&#39;s always an empty dictionary.
>The signature of both methods is now::

>    (self, value, expression, connection)

>instead of::

>    (self, value, expression, connection, context)

>Support for the old signature in custom fields and expressions remains until
>Django 3.0.

>Miscellaneous
>-------------

>* The ``django.db.backends.postgresql_psycopg2`` module is deprecated in favor
>  of ``django.db.backends.postgresql``. It&#39;s been an alias since Django 1.9.
>  This only affects code that imports from the module directly. The
>  ``DATABASES`` setting can still use
>  ``&#39;django.db.backends.postgresql_psycopg2&#39;``, though you can simplify that by
>  using the ``&#39;django.db.backends.postgresql&#39;`` name added in Django 1.9.

>* ``django.shortcuts.render_to_response()`` is deprecated in favor of
>  :func:`django.shortcuts.render`. ``render()`` takes the same arguments
>  except that it also requires a ``request``.

>* The ``DEFAULT_CONTENT_TYPE`` setting is deprecated. It doesn&#39;t interact well
>  well with third-party apps and is obsolete since HTML5 has mostly superseded
>  XHTML.

>* ``HttpRequest.xreadlines()`` is deprecated in favor of iterating over the
>  request.

>* The ``field_name`` keyword argument to :meth:`.QuerySet.earliest` and
>  :meth:`.QuerySet.latest` is deprecated in favor of passing the field
>  names as arguments. Write ``.earliest(&#39;pub_date&#39;)`` instead of
>  ``.earliest(field_name=&#39;pub_date&#39;)``.

>.. _removed-features-2.0:

>Features removed in 2.0
>=======================

>These features have reached the end of their deprecation cycle and are removed
>in Django 2.0.

>See :ref:`deprecated-features-1.9` for details on these changes, including how
>to remove usage of these features.

>* The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` is
>  removed.

>* ``django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()``
>  is removed.

>* The ``django.forms.extras`` package is removed.

>* The ``assignment_tag`` helper is removed.

>* The ``host`` argument to ``SimpleTestCase.assertsRedirects()`` is removed.
>  The compatibility layer which allows absolute URLs to be considered equal to
>  relative ones when the path is identical is also removed.

>* ``Field.rel`` and ``Field.remote_field.to`` are removed.

>* The ``on_delete`` argument for ``ForeignKey`` and ``OneToOneField`` is now
>  required in models and migrations. Consider squashing migrations so that you
>  have less of them to update.

>* ``django.db.models.fields.add_lazy_relation()`` is removed.

>* When time zone support is enabled, database backends that don&#39;t support time
>  zones no longer convert aware datetimes to naive values in UTC anymore when
>  such values are passed as parameters to SQL queries executed outside of the
>  ORM, e.g. with ``cursor.execute()``.

>* ``django.contrib.auth.tests.utils.skipIfCustomUser()`` is removed.

>* The ``GeoManager`` and ``GeoQuerySet`` classes are removed.

>* The ``django.contrib.gis.geoip`` module is removed.

>* The ``supports_recursion`` check for template loaders is removed from:

>  * ``django.template.engine.Engine.find_template()``
>  * ``django.template.loader_tags.ExtendsNode.find_template()``
>  * ``django.template.loaders.base.Loader.supports_recursion()``
>  * ``django.template.loaders.cached.Loader.supports_recursion()``

>* The ``load_template`` and ``load_template_sources`` template loader methods
>  are removed.

>* The ``template_dirs`` argument for template loaders is removed:

>  * ``django.template.loaders.base.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.cache_key()``
>  * ``django.template.loaders.cached.Loader.get_template()``
>  * ``django.template.loaders.cached.Loader.get_template_sources()``
>  * ``django.template.loaders.filesystem.Loader.get_template_sources()``

>* ``django.template.loaders.base.Loader.__call__()`` is removed.

>* Support for custom error views that don&#39;t accept an ``exception`` parameter
>  is removed.

>* The ``mime_type`` attribute of ``django.utils.feedgenerator.Atom1Feed`` and
>  ``django.utils.feedgenerator.RssFeed`` is removed.

>* The ``app_name`` argument to ``include()`` is removed.

>* Support for passing a 3-tuple (including ``admin.site.urls``) as the first
>  argument to ``include()`` is removed.

>* Support for setting a URL instance namespace without an application namespace
>  is removed.

>* ``Field._get_val_from_obj()`` is removed.

>* ``django.template.loaders.eggs.Loader`` is removed.

>* The ``current_app`` parameter to the ``contrib.auth`` function-based views is
>  removed.

>* The ``callable_obj`` keyword argument to
>  ``SimpleTestCase.assertRaisesMessage()`` is removed.

>* Support for the ``allow_tags`` attribute on ``ModelAdmin`` methods is
>  removed.

>* The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is
>  removed.

>* The ``django.template.loader.LoaderOrigin`` and
>  ``django.template.base.StringOrigin`` aliases for
>  ``django.template.base.Origin`` are removed.

>See :ref:`deprecated-features-1.10` for details on these changes.

>* The ``makemigrations --exit`` option is removed.

>* Support for direct assignment to a reverse foreign key or many-to-many
>  relation is removed.

>* The ``get_srid()`` and ``set_srid()`` methods of
>  ``django.contrib.gis.geos.GEOSGeometry`` are removed.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of ``django.contrib.gis.geos.Point`` are removed.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  ``django.contrib.gis.geos.Point`` are removed.

>* The ``cascaded_union`` property of ``django.contrib.gis.geos.MultiPolygon``
>  is removed.

>* ``django.utils.functional.allow_lazy()`` is removed.

>* The ``shell --plain`` option is removed.

>* The ``django.core.urlresolvers`` module is removed in favor of its new
>  location, ``django.urls``.

>* ``CommaSeparatedIntegerField`` is removed, except for support in historical
>  migrations.

>* The template ``Context.has_key()`` method is removed.

>* Support for the ``django.core.files.storage.Storage.accessed_time()``,
>  ``created_time()``, and ``modified_time()`` methods is removed.

>* Support for query lookups using the model name when
>  ``Meta.default_related_name`` is set is removed.

>* The MySQL ``__search`` lookup is removed.

>* The shim for supporting custom related manager classes without a
>  ``_apply_rel_filters()`` method is removed.

>* Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>  rather than properties is no longer supported.

>* The ``Model._meta.virtual_fields`` attribute is removed.

>* The keyword arguments ``virtual_only`` in ``Field.contribute_to_class()`` and
>  ``virtual`` in ``Model._meta.add_field()`` are removed.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are removed.

>* ``django.contrib.gis.utils.precision_wkt()`` is removed.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is removed.

>* Support for ``Widget._format_value()`` is removed.

>* ``FileField`` methods ``get_directory_name()`` and ``get_filename()`` are
>  removed.

>* The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>  ``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>  removed.

>* The ``escape`` filter now uses ``django.utils.html.conditional_escape()``.

>* ``Manager.use_for_related_fields`` is removed.

>* Model ``Manager`` inheritance follows MRO inheritance rules. The requirement
>  to use ``Meta.manager_inheritance_from_future`` to opt-in to the behavior is
>  removed.

>* Support for old-style middleware using ``settings.MIDDLEWARE_CLASSES`` is
>  removed.


>===========================


>### 1.11.8

>===========================

>*December 2, 2017*

>Django 1.11.8 fixes several bugs in 1.11.7.

>Bugfixes
>========

>* Reallowed, following a regression in Django 1.10, ``AuthenticationForm`` to
>  raise the inactive user error when using ``ModelBackend`` (:ticket:`28645`).

>* Added support for ``QuerySet.values()`` and ``values_list()`` for
>  ``union()``, ``difference()``, and ``intersection()`` queries
>  (:ticket:`28781`).

>* Fixed incorrect index name truncation when using a namespaced ``db_table``
>  (:ticket:`28792`).

>* Made ``QuerySet.iterator()`` use server-side cursors on PostgreSQL after
>  ``values()`` and ``values_list()`` (:ticket:`28817`).

>* Fixed crash on SQLite and MySQL when ordering by a filtered subquery that
>  uses ``nulls_first`` or ``nulls_last`` (:ticket:`28848`).

>* Made query lookups for ``CICharField``, ``CIEmailField``, and ``CITextField``
>  use a ``citext`` cast (:ticket:`28702`).

>* Fixed a regression in caching of a ``GenericForeignKey`` when the referenced
>  model instance uses multi-table inheritance (:ticket:`28856`).

>* Fixed &quot;Cannot change column &#39;x&#39;: used in a foreign key constraint&quot; crash on
>  MySQL with a sequence of ``AlterField`` and/or ``RenameField`` operations in
>  a migration (:ticket:`28305`).


>===========================


>### 1.11.7

>===========================

>*November 1, 2017*

>Django 1.11.7 fixes several bugs in 1.11.6.

>Bugfixes
>========

>* Prevented ``cache.get_or_set()`` from caching ``None`` if the ``default``
>  argument is a callable that returns ``None`` (:ticket:`28601`).

>* Fixed the Basque ``DATE_FORMAT`` string (:ticket:`28710`).

>* Made ``QuerySet.reverse()`` affect ``nulls_first`` and ``nulls_last``
>  (:ticket:`28722`).

>* Fixed unquoted table names in ``Subquery`` SQL when using ``OuterRef``
>  (:ticket:`28689`).


>===========================


>### 1.11.6

>===========================

>*October 5, 2017*

>Django 1.11.6 fixes several bugs in 1.11.5.

>Bugfixes
>========

>* Made the ``CharField`` form field convert whitespace-only values to the
>  ``empty_value`` when ``strip`` is enabled (:ticket:`28555`).

>* Fixed crash when using the name of a model&#39;s autogenerated primary key
>  (``id``) in an ``Index``&#39;s ``fields`` (:ticket:`28597`).

>* Fixed a regression in Django 1.9 where a custom view error handler such as
>  ``handler404`` that accesses ``csrf_token`` could cause CSRF verification
>  failures on other pages (:ticket:`28488`).


>===========================


>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.Trunc` functions.

>* Added the :class:`~django.db.models.functions.ExtractWeek` function to
>  extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.TruncTime` function to truncate
>  :class:`~django.db.models.DateTimeField` to its time component and exposed it
>  through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  ",pyup-bot,16239342,2017-12-02T18:36:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,4c75f93497eca3e6a840e6464a8df6c189b59530,Update django from 1.10.8 to 2.0
173,https://api.github.com/repos/mozilla/distribution-viewer/pulls/317,317,Update striptags to the latest version 🚀,"
## Version **3.1.1** of [striptags](https://github.com/ericnorris/striptags) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      striptags
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      2.2.1
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **3.1.1** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of striptags.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 15 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/127f2fbb585228b5a900a71abe7337b0a38699c8""><code>127f2fb</code></a> <code>v3.1.1</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/f80b3b8079c186e847266bd38fe31048913ccd41""><code>f80b3b8</code></a> <code>add typings</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/94ceaf6dc5df7c51c0890b072ff1e60e1bc90a82""><code>94ceaf6</code></a> <code>v3.1.0</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/9ed9eb07fbae46aca20f397dc9181f3feb87432c""><code>9ed9eb0</code></a> <code>Add IE11 support using minimal polyfill</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/5eb9357586e73267142a7b260b91cb62e27daa2a""><code>5eb9357</code></a> <code>Fix typo in README.md</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/7179485e95f73fd5f06f33846e3acfff21e3d3f7""><code>7179485</code></a> <code>Add notice about uglifyjs issues</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/742795158765afe0bbcd7fe34739739cf0da1325""><code>7427951</code></a> <code>v3.0.1</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/517fd77bdb8c282b6a9b5aa7d92f61a6d4a7e390""><code>517fd77</code></a> <code>Fix AMD bindings and fix AMD test.</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/cd538252a7a8e7cad5e5649843f66e8185ec902e""><code>cd53825</code></a> <code>v3.0.0</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/9d9a8049c812ee42f94f295a7230d45053cd5082""><code>9d9a804</code></a> <code>Update README.md</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/eb4d1f0a85cdab381fed14154d27df425e7079d0""><code>eb4d1f0</code></a> <code>Add test for streaming mode w/ allowable_tags.</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/adf53b6c4c17dad951d27b0c8f2c83afd72543ee""><code>adf53b6</code></a> <code>Update mocha version and rewrite tests.</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/86e95d223b1c120e76c30e0fb2e754105b3190b7""><code>86e95d2</code></a> <code>Remove HTML test coverage command and JSHint config.</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/969cebd0085f3c247f7da8f90d948c8356b34fd8""><code>969cebd</code></a> <code>Move module back into src/ directory.</code></li>
<li><a href=""https://urls.greenkeeper.io/ericnorris/striptags/commit/dd1ed035b40e726ac8d5583605dea2276b92d684""><code>dd1ed03</code></a> <code>Rewrite core module.</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/ericnorris/striptags/compare/1563e2f2a60b088750fec7e83136242313842086...127f2fbb585228b5a900a71abe7337b0a38699c8"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-12-02T03:56:13Z,NONE,False,1,1,1,,JavaScript,b3b1ec0d2c9c5d1ba2e2f9ba938d0b4cef406a46,fix(package): update striptags to version 3.1.1
174,https://api.github.com/repos/mozilla/distribution-viewer/pulls/316,316,Update pyopenssl to 17.5.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **17.2.0**. I have updated it to **17.5.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyopenssl"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""https://pyopenssl.org/"">Homepage</a> | <a href=""http://pythonhosted.org/pyOpenSSL/"">Docs</a> 



### Changelog
> 
>### 17.5.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>* The minimum ``cryptography`` version is now 2.1.4.


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^

>- Fixed a potential use-after-free in the verify callback and resolved a memory leak when loading PKCS12 files with ``cacerts``.
>  `723 &lt;https://github.com/pyca/pyopenssl/pull/723&gt;`_
>- Added ``Connection.export_keying_material`` for RFC 5705 compatible export of keying material.
>  `725 &lt;https://github.com/pyca/pyopenssl/pull/725&gt;`_

>----





>### 17.4.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^


>- Re-added a subset of the ``OpenSSL.rand`` module.
>  This subset allows conscientious users to reseed the OpenSSL CSPRNG after fork.
>  `708 &lt;https://github.com/pyca/pyopenssl/pull/708&gt;`_
>- Corrected a use-after-free when reusing an issuer or subject from an ``X509`` object after the underlying object has been mutated.
>  `709 &lt;https://github.com/pyca/pyopenssl/pull/709&gt;`_

>----




>### 17.3.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Dropped support for Python 3.3.
>  `677 &lt;https://github.com/pyca/pyopenssl/pull/677&gt;`_
>- Removed the deprecated ``OpenSSL.rand`` module.
>  This is being done ahead of our normal deprecation schedule due to its lack of use and the fact that it was becoming a maintenance burden.
>  ``os.urandom()`` should be used instead.
>  `675 &lt;https://github.com/pyca/pyopenssl/pull/675&gt;`_


>Deprecations:
>^^^^^^^^^^^^^

>- Deprecated ``OpenSSL.tsafe``.
>  `673 &lt;https://github.com/pyca/pyopenssl/pull/673&gt;`_

>Changes:
>^^^^^^^^

>- Fixed a memory leak in ``OpenSSL.crypto.CRL``.
>  `690 &lt;https://github.com/pyca/pyopenssl/pull/690&gt;`_
>- Fixed a memory leak when verifying certificates with ``OpenSSL.crypto.X509StoreContext``.
>  `691 &lt;https://github.com/pyca/pyopenssl/pull/691&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-12-01T03:29:47Z,CONTRIBUTOR,False,1,1,1,,JavaScript,5337e8df1f41a725af89b5e0d1208431c16c919c,Update pyopenssl from 17.2.0 to 17.5.0
175,https://api.github.com/repos/mozilla/distribution-viewer/pulls/315,315,Update simplejson to 3.13.2,"
There's a new version of [simplejson](https://pypi.python.org/pypi/simplejson) available.
You are currently using **3.11.1**. I have updated it to **3.13.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/simplejson"">PyPI</a> | <a href=""https://pyup.io/changelogs/simplejson/"">Changelog</a> | <a href=""http://github.com/simplejson/simplejson"">Repo</a> 



### Changelog
> 
>### 3.13.2


>* Fix additional Python 2.x compilation issue on Windows



>### 3.13.1


>* Improve CI to catch speedups build regressions
>* Fix speedups build regression in Python 2.x
>  https://github.com/simplejson/simplejson/issues/193



>### 3.13.0


>* Workarounds for NamedTemporaryFile issues with Windows for tool tests
>* Make TypeError messages contain type name instead of a repr.
>  https://github.com/simplejson/simplejson/pull/191
>* Ensure that encoding of text subtypes is consistent with or without speedups
>  https://github.com/simplejson/simplejson/issues/185



>### 3.12.1


>* Misc updates to build infrastructure
>* Fix an assertion failure when make_encoder receives a bad encoder argument
>  https://github.com/simplejson/simplejson/pull/188
>* Fix potential crash during GC
>  https://github.com/simplejson/simplejson/pull/187
>* Fix a reference leak when sorting keys
>  https://github.com/simplejson/simplejson/pull/186



>### 3.12.0


>* Fix threaded import race condition
>  https://github.com/simplejson/simplejson/issues/184
>* Move RawJSON implementation to simplejson.raw_json module
>* Move JSONDecodeError implementation to simplejson.errors module







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-24T20:07:34Z,CONTRIBUTOR,False,1,1,1,,JavaScript,ef4ec661d6153fa6ea7fed792298ed1fa0efd143,Update simplejson from 3.11.1 to 3.13.2
176,https://api.github.com/repos/mozilla/distribution-viewer/pulls/314,314,Update simplejson to 3.13.0,"
There's a new version of [simplejson](https://pypi.python.org/pypi/simplejson) available.
You are currently using **3.11.1**. I have updated it to **3.13.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/simplejson"">PyPI</a> | <a href=""https://pyup.io/changelogs/simplejson/"">Changelog</a> | <a href=""http://github.com/simplejson/simplejson"">Repo</a> 



### Changelog
> 
>### 3.13.0


>* Workarounds for NamedTemporaryFile issues with Windows for tool tests
>* Make TypeError messages contain type name instead of a repr.
>  https://github.com/simplejson/simplejson/pull/191
>* Ensure that encoding of text subtypes is consistent with or without speedups
>  https://github.com/simplejson/simplejson/issues/185



>### 3.12.1


>* Misc updates to build infrastructure
>* Fix an assertion failure when make_encoder receives a bad encoder argument
>  https://github.com/simplejson/simplejson/pull/188
>* Fix potential crash during GC
>  https://github.com/simplejson/simplejson/pull/187
>* Fix a reference leak when sorting keys
>  https://github.com/simplejson/simplejson/pull/186



>### 3.12.0


>* Fix threaded import race condition
>  https://github.com/simplejson/simplejson/issues/184
>* Move RawJSON implementation to simplejson.raw_json module
>* Move JSONDecodeError implementation to simplejson.errors module







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-24T03:37:34Z,CONTRIBUTOR,False,1,1,1,,JavaScript,23212b4ff791231a512d43ebc8ed853ec0d4d5f2,Update simplejson from 3.11.1 to 3.13.0
177,https://api.github.com/repos/mozilla/distribution-viewer/pulls/313,313,Update pyasn1 to 0.4.2,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.4.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-23T20:14:34Z,CONTRIBUTOR,False,1,1,1,,JavaScript,0b403290321792dfcbc50fa6db1a0b0470b0e50f,Update pyasn1 from 0.3.1 to 0.4.2
178,https://api.github.com/repos/mozilla/distribution-viewer/pulls/312,312,Update pyasn1-modules to 0.2.1,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.2.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-23T11:11:39Z,CONTRIBUTOR,False,1,1,1,,JavaScript,9f2d1a179b3bb5ac34b4b83e771f876fc48d87a9,Update pyasn1-modules from 0.0.9 to 0.2.1
179,https://api.github.com/repos/mozilla/distribution-viewer/pulls/311,311,Update pyasn1 to 0.4.1,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.4.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-23T11:11:31Z,CONTRIBUTOR,False,1,1,1,,JavaScript,5fc44c199b69723f257a33787643add168e31b35,Update pyasn1 from 0.3.1 to 0.4.1
180,https://api.github.com/repos/mozilla/distribution-viewer/pulls/310,310,Update pyopenssl to 17.4.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **17.2.0**. I have updated it to **17.4.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyopenssl"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""https://pyopenssl.org/"">Homepage</a> | <a href=""http://pythonhosted.org/pyOpenSSL/"">Docs</a> 



### Changelog
> 
>### 17.4.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^


>- Re-added a subset of the ``OpenSSL.rand`` module.
>  This subset allows conscientious users to reseed the OpenSSL CSPRNG after fork.
>  `708 &lt;https://github.com/pyca/pyopenssl/pull/708&gt;`_
>- Corrected a use-after-free when reusing an issuer or subject from an ``X509`` object after the underlying object has been mutated.
>  `709 &lt;https://github.com/pyca/pyopenssl/pull/709&gt;`_

>----




>### 17.3.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Dropped support for Python 3.3.
>  `677 &lt;https://github.com/pyca/pyopenssl/pull/677&gt;`_
>- Removed the deprecated ``OpenSSL.rand`` module.
>  This is being done ahead of our normal deprecation schedule due to its lack of use and the fact that it was becoming a maintenance burden.
>  ``os.urandom()`` should be used instead.
>  `675 &lt;https://github.com/pyca/pyopenssl/pull/675&gt;`_


>Deprecations:
>^^^^^^^^^^^^^

>- Deprecated ``OpenSSL.tsafe``.
>  `673 &lt;https://github.com/pyca/pyopenssl/pull/673&gt;`_

>Changes:
>^^^^^^^^

>- Fixed a memory leak in ``OpenSSL.crypto.CRL``.
>  `690 &lt;https://github.com/pyca/pyopenssl/pull/690&gt;`_
>- Fixed a memory leak when verifying certificates with ``OpenSSL.crypto.X509StoreContext``.
>  `691 &lt;https://github.com/pyca/pyopenssl/pull/691&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-22T01:59:29Z,CONTRIBUTOR,False,1,1,1,,JavaScript,33285525caf48dbfb465b071faca2966e7160953,Update pyopenssl from 17.2.0 to 17.4.0
181,https://api.github.com/repos/mozilla/distribution-viewer/pulls/309,309,Update djangorestframework to 3.7.3,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.3


>**Date**: [6th Novemember 2017][3.7.3-milestone]

>* Fix `AppRegistryNotReady` error from contrib.auth view imports [5567][gh5567]




>### 3.7.2


>**Date**: [6th Novemember 2017][3.7.2-milestone]

>* Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. [5510][gh5510]
>* Add missing import for TextLexer. [5512][gh5512]
>* Adding examples and documentation for caching [5514][gh5514]
>* Include date and date-time format for schema generation [5511][gh5511]
>* Use triple backticks for markdown code blocks [5513][gh5513]
>* Interactive docs - make bottom sidebar items sticky [5516][gh5516]
>* Clarify pagination system check [5524][gh5524]
>* Stop JSONBoundField mangling invalid JSON [5527][gh5527]
>* Have JSONField render as textarea in Browsable API [5530][gh5530]
>* Schema: Exclude OPTIONS/HEAD for ViewSet actions [5532][gh5532]
>* Fix ordering for dotted sources [5533][gh5533]
>* Fix: Fields with `allow_null=True` should imply a default serialization value [5518][gh5518]
>* Ensure Location header is strictly a &#39;str&#39;, not subclass. [5544][gh5544]
>* Add import to example in api-guide/parsers [5547][gh5547]
>* Catch OverflowError for &quot;out of range&quot; datetimes [5546][gh5546]
>* Add djangorestframework-rapidjson to third party packages [5549][gh5549]
>* Increase test coverage for `drf_create_token` command [5550][gh5550]
>* Add trove classifier for Python 3.6 support. [5555][gh5555]
>* Add pip cache support to the Travis CI configuration [5556][gh5556]
>* Rename [`wheel`] section to [`bdist_wheel`] as the former is legacy [5557][gh5557]
>* Fix invalid escape sequence deprecation warnings [5560][gh5560]
>* Add interactive docs error template [5548][gh5548]
>* Add rounding parameter to DecimalField [5562][gh5562]
>* Fix all BytesWarning caught during tests [5561][gh5561]
>* Use dict and set literals instead of calls to dict() and set() [5559][gh5559]
>* Change ImageField validation pattern, use validators from DjangoImageField [5539][gh5539]
>* Fix processing unicode symbols in query_string by Python 2 [5552][gh5552]




>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-06T17:24:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,908d14cb0052863621c63e8c6febcc91ebe84e33,Update djangorestframework from 3.6.3 to 3.7.3
182,https://api.github.com/repos/mozilla/distribution-viewer/pulls/308,308,Update djangorestframework to 3.7.2,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.2


>**Date**: [6th Novemember 2017][3.7.2-milestone]

>* Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. [5510][gh5510]
>* Add missing import for TextLexer. [5512][gh5512]
>* Adding examples and documentation for caching [5514][gh5514]
>* Include date and date-time format for schema generation [5511][gh5511]
>* Use triple backticks for markdown code blocks [5513][gh5513]
>* Interactive docs - make bottom sidebar items sticky [5516][gh5516]
>* Clarify pagination system check [5524][gh5524]
>* Stop JSONBoundField mangling invalid JSON [5527][gh5527]
>* Have JSONField render as textarea in Browsable API [5530][gh5530]
>* Schema: Exclude OPTIONS/HEAD for ViewSet actions [5532][gh5532]
>* Fix ordering for dotted sources [5533][gh5533]
>* Fix: Fields with `allow_null=True` should imply a default serialization value [5518][gh5518]
>* Ensure Location header is strictly a &#39;str&#39;, not subclass. [5544][gh5544]
>* Add import to example in api-guide/parsers [5547][gh5547]
>* Catch OverflowError for &quot;out of range&quot; datetimes [5546][gh5546]
>* Add djangorestframework-rapidjson to third party packages [5549][gh5549]
>* Increase test coverage for `drf_create_token` command [5550][gh5550]
>* Add trove classifier for Python 3.6 support. [5555][gh5555]
>* Add pip cache support to the Travis CI configuration [5556][gh5556]
>* Rename [`wheel`] section to [`bdist_wheel`] as the former is legacy [5557][gh5557]
>* Fix invalid escape sequence deprecation warnings [5560][gh5560]
>* Add interactive docs error template [5548][gh5548]
>* Add rounding parameter to DecimalField [5562][gh5562]
>* Fix all BytesWarning caught during tests [5561][gh5561]
>* Use dict and set literals instead of calls to dict() and set() [5559][gh5559]
>* Change ImageField validation pattern, use validators from DjangoImageField [5539][gh5539]
>* Fix processing unicode symbols in query_string by Python 2 [5552][gh5552]




>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-06T12:53:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,3fc4e3ff17288c1cb7814cd014dde696bc9ebc5d,Update djangorestframework from 3.6.3 to 3.7.2
183,https://api.github.com/repos/mozilla/distribution-viewer/pulls/307,307,Update simplejson to 3.12.0,"
There's a new version of [simplejson](https://pypi.python.org/pypi/simplejson) available.
You are currently using **3.11.1**. I have updated it to **3.12.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/simplejson"">PyPI</a> | <a href=""https://pyup.io/changelogs/simplejson/"">Changelog</a> | <a href=""http://github.com/simplejson/simplejson"">Repo</a> 



### Changelog
> 
>### 3.12.0


>* Fix threaded import race condition
>  https://github.com/simplejson/simplejson/issues/184
>* Move RawJSON implementation to simplejson.raw_json module
>* Move JSONDecodeError implementation to simplejson.errors module







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-05T20:05:51Z,CONTRIBUTOR,False,1,1,1,,JavaScript,f67aa095886ff22a5a9578f4304c7c0361a64f8a,Update simplejson from 3.11.1 to 3.12.0
184,https://api.github.com/repos/mozilla/distribution-viewer/pulls/306,306,Update gulp-jest to the latest version 🚀,"
## Version **3.0.0** of [gulp-jest](https://github.com/alansouzati/gulp-jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      gulp-jest
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      2.0.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **3.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of gulp-jest.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 2 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/commit/d53ea395bb5a1da3e256e2d323ac4700ce068e23""><code>d53ea39</code></a> <code>Ai patch 1 (#43)</code></li>
<li><a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/commit/9fcf9075661ec7ffad41a96944e9252e05f13306""><code>9fcf907</code></a> <code>Updated readme</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/compare/723882d6866dc8fceb85616e73cd794a835298fb...d53ea395bb5a1da3e256e2d323ac4700ce068e23"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-11-02T21:02:49Z,NONE,True,16,9,3,,JavaScript,3147c4d1b469874edc32628f3ffd77b473b4db7a,fix(package): update gulp-jest to version 3.0.0
185,https://api.github.com/repos/mozilla/distribution-viewer/pulls/306,306,Update gulp-jest to the latest version 🚀,"
## Version **3.0.0** of [gulp-jest](https://github.com/alansouzati/gulp-jest) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      gulp-jest
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      2.0.0
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **3.0.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of gulp-jest.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 2 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/commit/d53ea395bb5a1da3e256e2d323ac4700ce068e23""><code>d53ea39</code></a> <code>Ai patch 1 (#43)</code></li>
<li><a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/commit/9fcf9075661ec7ffad41a96944e9252e05f13306""><code>9fcf907</code></a> <code>Updated readme</code></li>
</ul>
<p>See the <a href=""https://urls.greenkeeper.io/alansouzati/gulp-jest/compare/723882d6866dc8fceb85616e73cd794a835298fb...d53ea395bb5a1da3e256e2d323ac4700ce068e23"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-11-02T21:02:49Z,NONE,True,16,9,3,,JavaScript,2770df1d12c3173a3f48770371d6d3d580e9578a,Fix test failures and warnings
186,https://api.github.com/repos/mozilla/distribution-viewer/pulls/305,305,Update django to 1.11.7,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.8**. I have updated it to **1.11.7**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.7

>===========================

>*November 1, 2017*

>Django 1.11.7 fixes several bugs in 1.11.6.

>Bugfixes
>========

>* Prevented ``cache.get_or_set()`` from caching ``None`` if the ``default``
>  argument is a callable that returns ``None`` (:ticket:`28601`).

>* Fixed the Basque ``DATE_FORMAT`` string (:ticket:`28710`).

>* Made ``QuerySet.reverse()`` affect ``nulls_first`` and ``nulls_last``
>  (:ticket:`28722`).

>* Fixed unquoted table names in ``Subquery`` SQL when using ``OuterRef``
>  (:ticket:`28689`).


>===========================


>### 1.11.6

>===========================

>*October 5, 2017*

>Django 1.11.6 fixes several bugs in 1.11.5.

>Bugfixes
>========

>* Made the ``CharField`` form field convert whitespace-only values to the
>  ``empty_value`` when ``strip`` is enabled (:ticket:`28555`).

>* Fixed crash when using the name of a model&#39;s autogenerated primary key
>  (``id``) in an ``Index``&#39;s ``fields`` (:ticket:`28597`).

>* Fixed a regression in Django 1.9 where a custom view error handler such as
>  ``handler404`` that accesses ``csrf_token`` could cause CSRF verification
>  failures on other pages (:ticket:`28488`).


>===========================


>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.Trunc` functions.

>* Added the :class:`~django.db.models.functions.ExtractWeek` function to
>  extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.TruncTime` function to truncate
>  :class:`~django.db.models.DateTimeField` to its time component and exposed it
>  through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The undocumented ``Select.render_option()`` method is removed.

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-11-02T05:31:46Z,CONTRIBUTOR,False,1,1,1,,JavaScript,8b2aadf45bda15f768b4edeb4fdab0b5a9bc4fc7,Update django from 1.10.8 to 1.11.7
187,https://api.github.com/repos/mozilla/distribution-viewer/pulls/304,304,Update raven to 6.3.0,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.1.0**. I have updated it to **6.3.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.3.0

>------------------
>* [Core] Changed default timeout on http calls to 5 seconds
>* [Core] Fixed relative paths for traces generated on Windows
>* [Django] Fixed import issues for Django projects &lt; 1.7
>* [Django] Fixed django management command data option
>* [Django/DRF] Added `application/octet-stream` to non-cacheable types in middleware
>* [Django] Added parsing X-Forwarded-For for `user.ip_address`
>* [Flask] Added `request.remote_addr` as fallback for ip addresses
>* [Lambda] Added initial AWS Lambda support with `contrib.awslambda.LambdaClient` 




>### 6.2.1

>------------------

>* [Core] Fixed requirements in setup.py




>### 6.2.0

>------------------

>* [Core] `get_frame_locals` properly using `max_var_size`
>* [Core] Fixed raven initialization when `logging._srcfile` is None
>* [Core] Fixed import locking to avoid recursion
>* [Django] Fixed several issues for Django 1.11 and Django 2.0
>* [Django/DRF] Fixed issue with unavailable request data
>* [Flask] Added app.logger instrumentation
>* [Flask] Added signal on setup_logging
>* [ZConfig] Added standalone ZConfig support
>* [Celery] Fixed several issues related to Celery








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-29T20:56:39Z,CONTRIBUTOR,False,1,1,1,,JavaScript,26ae04f4e5b188279750fb67fddb001de63de8e2,Update raven from 6.1.0 to 6.3.0
188,https://api.github.com/repos/mozilla/distribution-viewer/pulls/303,303,Update psycopg2 to 2.7.3.2,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.7.3**. I have updated it to **2.7.3.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> 



### Changelog
> 
>### 2.7.3.2

>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Wheel package compiled against PostgreSQL 10.0 libpq and OpenSSL 1.0.2l
>  (:tickets:`601, 602`)




>### 2.7.3.1

>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Dropped libresolv from wheel package to avoid incompatibility with
>  glibc 2.26 (wheels ticket 2)








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-24T19:35:56Z,CONTRIBUTOR,False,1,1,1,,JavaScript,96695153108695e8a6441cce71677e3f894b14f8,Update psycopg2 from 2.7.3 to 2.7.3.2
189,https://api.github.com/repos/mozilla/distribution-viewer/pulls/302,302,Update flake8 to 3.5.0,"
There's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.
You are currently using **3.3.0**. I have updated it to **3.5.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/flake8"">PyPI</a> | <a href=""https://pyup.io/changelogs/flake8/"">Changelog</a> | <a href=""https://gitlab.com/pycqa/flake8"">Repo</a> 



### Changelog
> 
>### 3.5.0

>-------------------

>You can view the `3.5.0 milestone`_ on GitLab for more details.

>New Dependency Information
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>- Allow for PyFlakes 1.6.0 (See also `GitLab359`_)

>- Start using new PyCodestyle checks for bare excepts and ambiguous identifier
>  (See also `GitLab361`_)

>Features
>~~~~~~~~

>- Print out information about configuring VCS hooks (See also `GitLab335`_)

>- Allow users to develop plugins &quot;local&quot; to a repository without using
>  setuptools. See our documentation on local plugins for more information.
>  (See also `GitLab357`_)

>Bugs Fixed
>~~~~~~~~~~

>- Catch and helpfully report ``UnicodeDecodeError``\ s when parsing
>  configuration files. (See also `GitLab358`_)


>.. all links
>.. _3.5.0 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/20

>.. issue links
>.. _GitLab335:
>    https://gitlab.com/pycqa/flake8/issues/335
>.. _GitLab357:
>    https://gitlab.com/pycqa/flake8/issues/357
>.. _GitLab358:
>    https://gitlab.com/pycqa/flake8/issues/358
>.. _GitLab359:
>    https://gitlab.com/pycqa/flake8/issues/359
>.. _GitLab361:
>    https://gitlab.com/pycqa/flake8/issues/361

>.. merge request links




>### 3.4.1

>-------------------

>You can view the `3.4.1 milestone`_ on GitLab for more details.

>- Fix minor regression when users specify only a ``--select`` list with items
>  in the enabled/extended select list.  (See also `GitLab354`_)

>.. all links
>.. _3.4.1 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/19

>.. issue links
>.. _GitLab354:
>    https://gitlab.com/pycqa/flake8/issues/354

>.. merge request links




>### 3.4.0

>-------------------

>You can view the `3.4.0 milestone`_ on GitLab for more details.

>- Refine logic around ``--select`` and ``--ignore`` when combined with the
>  default values for each. (See also `GitLab318`_)

>- Handle spaces as an alternate separate for error codes, e.g.,
>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)

>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.
>  (See also `GitLab330`_)

>- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)

>- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.
>  (See also `GitLab!193`_)

>- Remove unused import of ``os`` in the git hook template (See also
>  `GitLab!194`_)

>.. all links
>.. _3.4.0 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/18

>.. issue links
>.. _GitLab318:
>    https://gitlab.com/pycqa/flake8/issues/318
>.. _GitLab329:
>    https://gitlab.com/pycqa/flake8/issues/329
>.. _GitLab330:
>    https://gitlab.com/pycqa/flake8/issues/330
>.. _GitLab341:
>    https://gitlab.com/pycqa/flake8/issues/341

>.. merge request links
>.. _GitLab!193:
>    https://gitlab.com/pycqa/flake8/merge_requests/193
>.. _GitLab!194:
>    https://gitlab.com/pycqa/flake8/merge_requests/194








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-23T18:51:29Z,CONTRIBUTOR,False,1,1,1,,JavaScript,3abef13b7863bda5fab29e691ef86188b89ebc1f,Update flake8 from 3.3.0 to 3.5.0
190,https://api.github.com/repos/mozilla/distribution-viewer/pulls/301,301,Update axios to the latest version 🚀,"
## Version **0.17.0** of [axios](https://github.com/axios/axios) was just published.

<table>
  <tr>
    <th align=left>
      Dependency
    </td>
    <td>
      axios
    </td>
  </tr>
  <tr>
    <th align=left>
      Current Version
    </td>
    <td>
      0.16.2
    </td>
  </tr>
  <tr>
    <th align=left>
      Type
    </td>
    <td>
      dependency
    </td>
  </tr>
</table>

The version **0.17.0** is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

It might be worth looking into these changes and trying to get this project onto the latest version of axios.

If you have a solid test suite and good coverage, a passing build is a strong indicator that you can take advantage of these changes directly by merging the proposed change into your project. If the build fails or you don’t have such unconditional trust in your tests, this branch is a great starting point for you to work on the update.


---


<details>
<summary>Commits</summary>
<p>The new version differs by 27 commits.</p>
<ul>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/2c0e3183215d9a5fbc2ee8f35f459ac0e4d9f99c""><code>2c0e318</code></a> <code>Releasing 0.17.0</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/c24b1cc5de354cb0d123e8ef05e4d24153762729""><code>c24b1cc</code></a> <code>Updating changelog</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/add023c25c2bd0103495b86fe5cf2dbacfadd75f""><code>add023c</code></a> <code>Update build status badge URL</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/ada06d1522d3270043bae732174fbaa4061bc99e""><code>ada06d1</code></a> <code>Merge branch 'master' of github.com:axios/axios</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/94f1e21ba398a3d379aedfdb65b49e48e27e210f""><code>94f1e21</code></a> <code>Fix SauceLabs config</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/7133141cb9472f88220bdaf6e6ccef898786298d""><code>7133141</code></a> <code>Merge pull request #1061 from d-fischer/ts-generic-response</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/638804aa2c16e1dfaa5e96e68368c0981048c4c4""><code>638804a</code></a> <code>Merge pull request #1135 from kuitos/master</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/f06ee7390f30abadb26826e371f40e3f960a3fba""><code>f06ee73</code></a> <code>Adding axios-extensions to the ecosystem</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/26b06391f831ef98606ec0ed406d2be1742e9850""><code>26b0639</code></a> <code>Update links</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/17e44c8ec9692516ef3d8794b1b42e0ae7543ed1""><code>17e44c8</code></a> <code>Merge pull request #982 from ibci/use-XMLHttpRequest-for-IE10+</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/51b3ad65269ee83e2c8b4409414ce4d02f9f86de""><code>51b3ad6</code></a> <code>Merge pull request #987 from siddharthkp/master</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/ab974a708d7dbaab49f4319f5aa9eef28d16a384""><code>ab974a7</code></a> <code>Merge pull request #1055 from fridzema/patch-1</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/7f60dd8441ba9a202c3151445a2431ea8dce6e0d""><code>7f60dd8</code></a> <code>Merge pull request #1056 from jin5354/patch-1</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/b0dccc6f1696446c79af54b306151c384afc5d51""><code>b0dccc6</code></a> <code>Updated TypeScript typings with generic type parameters for request methods &amp; AxiosResponse</code></li>
<li><a href=""https://urls.greenkeeper.io/axios/axios/commit/b26f351b6d15475a18312e7b6915a38814cbc224""><code>b26f351</code></a> <code>Update ECOSYSTEM.md</code></li>
</ul>
<p>There are 27 commits in total.</p>
<p>See the <a href=""https://urls.greenkeeper.io/axios/axios/compare/46e275c407f81c44dd9aad419b6e861d8a936580...2c0e3183215d9a5fbc2ee8f35f459ac0e4d9f99c"">full diff</a></p>
</details>

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:

",greenkeeper[bot],23040076,2017-10-21T18:41:42Z,NONE,True,1,1,1,,JavaScript,930adc1f5394c6f35d5dd8f3d1d31f4eaf537285,fix(package): update axios to version 0.17.0
191,https://api.github.com/repos/mozilla/distribution-viewer/pulls/300,300,Update djangorestframework to 3.7.1,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.1


>**Date**: [16th October 2017][3.7.1-milestone]

>* Fix Interactive documentation always uses false for boolean fields in requests [5492][gh5492]
>* Improve compatibility with Django 2.0 alpha. [5500][gh5500] [5503][gh5503]
>* Improved handling of schema naming collisions [5486][gh5486]
>* Added additional docs and tests around providing a default value for dotted `source` fields [5489][gh5489]




>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pycache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken management command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]
>* Refactor schema generation to allow per-view customisation.
>    **BC Change**: `SchemaGenerator.get_serializer_fields` has been refactored as `AutoSchema.get_serializer_fields` and drops the `view` argument [5354][gh5354]

> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-16T15:05:19Z,CONTRIBUTOR,False,1,1,1,,JavaScript,ed37b11bdc841c68b6f71d2f53c8e1421df3f6f9,Update djangorestframework from 3.6.3 to 3.7.1
192,https://api.github.com/repos/mozilla/distribution-viewer/pulls/299,299,Update pyasn1-modules to 0.1.5,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.1.5**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-10T18:11:06Z,CONTRIBUTOR,False,1,1,1,,JavaScript,1d769a5ed3d959086f38e0489e40cceb78d48efd,Update pyasn1-modules from 0.0.9 to 0.1.5
193,https://api.github.com/repos/mozilla/distribution-viewer/pulls/298,298,Update djangorestframework to 3.7.0,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.7.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.7.0


>**Date**: [6th October 2017][3.7.0-milestone]

>* Fix `DjangoModelPermissions` to ensure user authentication before calling the view&#39;s `get_queryset()` method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. [5376][gh5376]
>* Deprecated `exclude_from_schema` on `APIView` and `api_view` decorator. Set `schema = None` or `schema(None)` as appropriate. [5422][gh5422]
>* Timezone-aware `DateTimeField`s now respect active or default `timezone` during serialization, instead of always using UTC. [5435][gh5435]

>    Resolves inconsistency whereby instances were serialised with supplied datetime for `create` but UTC for `retrieve`. [3732][gh3732]

>    **Possible backwards compatibility break** if you were relying on datetime strings being UTC. Have client interpret datetimes or [set default or active timezone (docs)][djangodocs-set-timezone] to UTC if needed.

>* Removed DjangoFilterBackend inline with deprecation policy. Use `django_filters.rest_framework.FilterSet` and/or `django_filters.rest_framework.DjangoFilterBackend` instead. [5273][gh5273]
>* Don&#39;t strip microseconds from `time` when encoding. Makes consistent with `datetime`.
>    **BC Change**: Previously only milliseconds were encoded. [5440][gh5440]
>* Added `STRICT_JSON` setting (default `True`) to raise exception for the extended float values (`nan`, `inf`, `-inf`) accepted by Python&#39;s `json` module.
>    **BC Change**: Previously these values would converted to corresponding strings. Set `STRICT_JSON` to `False` to restore the previous behaviour. [5265][gh5265]
>* Add support for `page_size` parameter in CursorPaginator class [5250][gh5250]
>* Make `DEFAULT_PAGINATION_CLASS` `None` by default.
>    **BC Change**: If your were **just** setting `PAGE_SIZE` to enable pagination you will need to add `DEFAULT_PAGINATION_CLASS`.
>    The previous default was `rest_framework.pagination.PageNumberPagination`. There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. [5170][gh5170]
>* Catch `APIException` from `get_serializer_fields` in schema generation. [5443][gh5443]
>* Allow custom authentication and permission classes when using `include_docs_urls` [5448][gh5448]
>* Defer translated string evaluation on validators. [5452][gh5452]
>* Added default value for &#39;detail&#39; param into &#39;ValidationError&#39; exception [5342][gh5342]
>* Adjust schema get_filter_fields rules to match framework [5454][gh5454]
>* Updated test matrix to add Django 2.0 and drop Django 1.8 &amp; 1.9
>    **BC Change**: This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. [5457][gh5457]
>* Fixed a deprecation warning in serializers.ModelField [5058][gh5058]
>* Added a more explicit error message when `get_queryset` returned `None` [5348][gh5348]
>* Fix docs for Response `data` description [5361][gh5361]
>* Fix __pychache__/.pyc excludes when packaging [5373][gh5373]
>* Fix default value handling for dotted sources [5375][gh5375]
>* Ensure content_type is set when passing empty body to RequestFactory [5351][gh5351]
>* Fix ErrorDetail Documentation [5380][gh5380]
>* Allow optional content in the generic content form [5372][gh5372]
>* Updated supported values for the NullBooleanField [5387][gh5387]
>* Fix ModelSerializer custom named fields with source on model [5388][gh5388]
>* Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission [5398][gh5398]
>* Update get_object() example in permissions.md [5401][gh5401]
>* Fix authtoken managment command [5415][gh5415]
>* Fix schema generation markdown [5421][gh5421]
>* Allow `ChoiceField.choices` to be set dynamically [5426][gh5426]
>* Add the project layout to the quickstart [5434][gh5434]
>* Reuse &#39;apply_markdown&#39; function in &#39;render_markdown&#39; templatetag [5469][gh5469]
>* Added links to `drf-openapi` package in docs [5470][gh5470]
>* Added docstrings code highlighting with pygments [5462][gh5462]
>* Fixed documentation rendering for views named `data` [5472][gh5472]
>* Docs: Clarified &#39;to_internal_value()&#39; validation behavior [5466][gh5466]
>* Fix missing six.text_type() call on APIException.__str__ [5476][gh5476]
>* Document documentation.py [5478][gh5478]
>* Fix naming collisions in Schema Generation [5464][gh5464]
>* Call Django&#39;s authenticate function with the request object [5295][gh5295]
>* Update coreapi JS to 0.1.1 [5479][gh5479]
>* Have `is_list_view` recognise RetrieveModel… views [5480][gh5480]
>* Remove Django 1.8 &amp; 1.9 compatibility code [5481][gh5481]
>* Remove deprecated schema code from DefaultRouter [5482][gh5482]


> 3.6.x series



>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-06T13:46:03Z,CONTRIBUTOR,False,1,1,1,,JavaScript,447c0ecd4ed3a3e0ece5f265fbdb970d8080a396,Update djangorestframework from 3.6.3 to 3.7.0
194,https://api.github.com/repos/mozilla/distribution-viewer/pulls/297,297,Update django to 1.11.6,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.8**. I have updated it to **1.11.6**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.6

>===========================

>*October 5, 2017*

>Django 1.11.6 fixes several bugs in 1.11.5.

>Bugfixes
>========

>* Made the ``CharField`` form field convert whitespace-only values to the
>  ``empty_value`` when ``strip`` is enabled (:ticket:`28555`).

>* Fixed crash when using the name of a model&#39;s autogenerated primary key
>  (``id``) in an ``Index``&#39;s ``fields`` (:ticket:`28597`).

>* Fixed a regression in Django 1.9 where a custom view error handler such as
>  ``handler404`` that accesses ``csrf_token`` could cause CSRF verification
>  failures on other pages (:ticket:`28488`).


>===========================


>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The undocumented ``Select.render_option()`` method is removed.

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-05T22:16:01Z,CONTRIBUTOR,False,1,1,1,,JavaScript,eaba2e68513fa5f58a67224443470ae8a0af14ee,Update django from 1.10.8 to 1.11.6
195,https://api.github.com/repos/mozilla/distribution-viewer/pulls/296,296,Update pyasn1 to 0.3.7,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.7**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-10-04T21:13:03Z,CONTRIBUTOR,False,1,1,1,,JavaScript,3c4304ce95e961faafb67e54e58e2503ddcea5df,Update pyasn1 from 0.3.1 to 0.3.7
196,https://api.github.com/repos/mozilla/distribution-viewer/pulls/295,295,Update dependencies to enable Greenkeeper 🌴,"
Let’s get started with automated dependency management for distribution-viewer :muscle:



This pull request **updates all your dependencies to their latest version**. Having them all up to date really is the best starting point. I will look out for further dependency updates and make sure to handle them in isolation and in real-time, **as soon as you merge this pull request**.

**I won’t start sending you further updates, unless you have merged this very pull request**.



---
<details>
<summary>🏷 How to check the status of this repository</summary>

There is a badge added to your README, indicating the status of this repository.

This is how your badge looks like :point_right:  ![Greenkeeper badge](https://badges.greenkeeper.io/mozilla/distribution-viewer.svg)
</details>
<details>
<summary>🙈 How to ignore certain dependencies</summary>

In case you can not, or do not want to update a certain dependency right now, you can of course just [change the `package.json` file back to your liking](https://github.com/mozilla/distribution-viewer/edit/greenkeeper/initial/package.json).

Add a `greenkeeper.ignore` field to your `package.json`, containing a list of dependencies you don’t want to update right now.

```js
// package.json
{
  …
  ""greenkeeper"": {
    ""ignore"": [
      ""package-names"",
      ""you-want-me-to-ignore""
    ]
  }
}
```
</details>
<details>
<summary>👩‍💻 How to update this pull request</summary>

```bash
  # change into your repository’s directory
  git fetch
  git checkout greenkeeper/initial
  npm install-test
  # adapt your code, so it’s working again
  git commit -m 'chore: adapt code to updated dependencies'
  git push origin greenkeeper/initial
```
</details>
<details>
<summary>✨ How the updates will look like</summary>

As soon as you merge this pull request **I’ll create a branch for every dependency update**, with the new version applied. The branch creation should trigger your testing services to check the new version. Using the results of these tests I’ll try to open meaningful and helpful pull requests and issues, so your dependencies remain working and up-to-date.

```diff
-  ""underscore"": ""^1.6.0""
+  ""underscore"": ""^1.7.0""
```

In the above example you can see an in-range update. `1.7.0` is included in the old `^1.6.0` range, because of the [caret `^` character ](https://docs.npmjs.com/misc/semver#ranges).
When the test services report success I’ll delete the branch again, because no action needs to be taken – everything is fine.
When there is a failure however, I’ll create an issue so you know about the problem immediately.

This way every single version update of your dependencies will either continue to work with your project, or you’ll get to know of potential problems immediately.

```diff
-  ""lodash"": ""^3.0.0""
+  ""lodash"": ""^4.0.0""
```

In this example the new version `4.0.0` is not included in the old `^3.0.0` range.
For version updates like these – let’s call them “out of range” updates – you’ll receive a pull request.

Now **you no longer need to check for exciting new versions by hand** – I’ll just let you know automatically.
And the pull request will not only serve as a reminder to update. In case it passes your decent test suite that’s a strong reason to merge right away :shipit:
</details>
<details>
<summary>💁‍♂️ Not sure how things are going to work exactly?</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html) and of course you may always [ask my humans](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Good luck with your project and see you soon :sparkles:

Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:
",greenkeeper[bot],23040076,2017-09-29T00:52:45Z,NONE,True,7,5,2,,JavaScript,9e4151d24df52249d8d1384d6e0b87664ec91717,chore(package): update dependencies
197,https://api.github.com/repos/mozilla/distribution-viewer/pulls/295,295,Update dependencies to enable Greenkeeper 🌴,"
Let’s get started with automated dependency management for distribution-viewer :muscle:



This pull request **updates all your dependencies to their latest version**. Having them all up to date really is the best starting point. I will look out for further dependency updates and make sure to handle them in isolation and in real-time, **as soon as you merge this pull request**.

**I won’t start sending you further updates, unless you have merged this very pull request**.



---
<details>
<summary>🏷 How to check the status of this repository</summary>

There is a badge added to your README, indicating the status of this repository.

This is how your badge looks like :point_right:  ![Greenkeeper badge](https://badges.greenkeeper.io/mozilla/distribution-viewer.svg)
</details>
<details>
<summary>🙈 How to ignore certain dependencies</summary>

In case you can not, or do not want to update a certain dependency right now, you can of course just [change the `package.json` file back to your liking](https://github.com/mozilla/distribution-viewer/edit/greenkeeper/initial/package.json).

Add a `greenkeeper.ignore` field to your `package.json`, containing a list of dependencies you don’t want to update right now.

```js
// package.json
{
  …
  ""greenkeeper"": {
    ""ignore"": [
      ""package-names"",
      ""you-want-me-to-ignore""
    ]
  }
}
```
</details>
<details>
<summary>👩‍💻 How to update this pull request</summary>

```bash
  # change into your repository’s directory
  git fetch
  git checkout greenkeeper/initial
  npm install-test
  # adapt your code, so it’s working again
  git commit -m 'chore: adapt code to updated dependencies'
  git push origin greenkeeper/initial
```
</details>
<details>
<summary>✨ How the updates will look like</summary>

As soon as you merge this pull request **I’ll create a branch for every dependency update**, with the new version applied. The branch creation should trigger your testing services to check the new version. Using the results of these tests I’ll try to open meaningful and helpful pull requests and issues, so your dependencies remain working and up-to-date.

```diff
-  ""underscore"": ""^1.6.0""
+  ""underscore"": ""^1.7.0""
```

In the above example you can see an in-range update. `1.7.0` is included in the old `^1.6.0` range, because of the [caret `^` character ](https://docs.npmjs.com/misc/semver#ranges).
When the test services report success I’ll delete the branch again, because no action needs to be taken – everything is fine.
When there is a failure however, I’ll create an issue so you know about the problem immediately.

This way every single version update of your dependencies will either continue to work with your project, or you’ll get to know of potential problems immediately.

```diff
-  ""lodash"": ""^3.0.0""
+  ""lodash"": ""^4.0.0""
```

In this example the new version `4.0.0` is not included in the old `^3.0.0` range.
For version updates like these – let’s call them “out of range” updates – you’ll receive a pull request.

Now **you no longer need to check for exciting new versions by hand** – I’ll just let you know automatically.
And the pull request will not only serve as a reminder to update. In case it passes your decent test suite that’s a strong reason to merge right away :shipit:
</details>
<details>
<summary>💁‍♂️ Not sure how things are going to work exactly?</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html) and of course you may always [ask my humans](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Good luck with your project and see you soon :sparkles:

Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:
",greenkeeper[bot],23040076,2017-09-29T00:52:45Z,NONE,True,7,5,2,,JavaScript,6dc405645bcd2f5eb48e73e892343d43787cc602,docs(readme): add Greenkeeper badge
198,https://api.github.com/repos/mozilla/distribution-viewer/pulls/295,295,Update dependencies to enable Greenkeeper 🌴,"
Let’s get started with automated dependency management for distribution-viewer :muscle:



This pull request **updates all your dependencies to their latest version**. Having them all up to date really is the best starting point. I will look out for further dependency updates and make sure to handle them in isolation and in real-time, **as soon as you merge this pull request**.

**I won’t start sending you further updates, unless you have merged this very pull request**.



---
<details>
<summary>🏷 How to check the status of this repository</summary>

There is a badge added to your README, indicating the status of this repository.

This is how your badge looks like :point_right:  ![Greenkeeper badge](https://badges.greenkeeper.io/mozilla/distribution-viewer.svg)
</details>
<details>
<summary>🙈 How to ignore certain dependencies</summary>

In case you can not, or do not want to update a certain dependency right now, you can of course just [change the `package.json` file back to your liking](https://github.com/mozilla/distribution-viewer/edit/greenkeeper/initial/package.json).

Add a `greenkeeper.ignore` field to your `package.json`, containing a list of dependencies you don’t want to update right now.

```js
// package.json
{
  …
  ""greenkeeper"": {
    ""ignore"": [
      ""package-names"",
      ""you-want-me-to-ignore""
    ]
  }
}
```
</details>
<details>
<summary>👩‍💻 How to update this pull request</summary>

```bash
  # change into your repository’s directory
  git fetch
  git checkout greenkeeper/initial
  npm install-test
  # adapt your code, so it’s working again
  git commit -m 'chore: adapt code to updated dependencies'
  git push origin greenkeeper/initial
```
</details>
<details>
<summary>✨ How the updates will look like</summary>

As soon as you merge this pull request **I’ll create a branch for every dependency update**, with the new version applied. The branch creation should trigger your testing services to check the new version. Using the results of these tests I’ll try to open meaningful and helpful pull requests and issues, so your dependencies remain working and up-to-date.

```diff
-  ""underscore"": ""^1.6.0""
+  ""underscore"": ""^1.7.0""
```

In the above example you can see an in-range update. `1.7.0` is included in the old `^1.6.0` range, because of the [caret `^` character ](https://docs.npmjs.com/misc/semver#ranges).
When the test services report success I’ll delete the branch again, because no action needs to be taken – everything is fine.
When there is a failure however, I’ll create an issue so you know about the problem immediately.

This way every single version update of your dependencies will either continue to work with your project, or you’ll get to know of potential problems immediately.

```diff
-  ""lodash"": ""^3.0.0""
+  ""lodash"": ""^4.0.0""
```

In this example the new version `4.0.0` is not included in the old `^3.0.0` range.
For version updates like these – let’s call them “out of range” updates – you’ll receive a pull request.

Now **you no longer need to check for exciting new versions by hand** – I’ll just let you know automatically.
And the pull request will not only serve as a reminder to update. In case it passes your decent test suite that’s a strong reason to merge right away :shipit:
</details>
<details>
<summary>💁‍♂️ Not sure how things are going to work exactly?</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html) and of course you may always [ask my humans](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Good luck with your project and see you soon :sparkles:

Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:
",greenkeeper[bot],23040076,2017-09-29T00:52:45Z,NONE,True,7,5,2,,JavaScript,1207605a5b23c24d0b3e9d1682b58fcd78c620cf,"Revert react-router and striptags versions

react-router is not upgraded because the 4.x.x branch has a very
different API and the team has said that they will continue supporting
3.x.x indefinitely.

striptags is not upgraded because webpack-uglifyjs-plugin doesn't
support libraries written in ES6 and the striptags team says it's safe
to stay on the 2.x.x branch of striptags."
199,https://api.github.com/repos/mozilla/distribution-viewer/pulls/293,293,Switch to whitenoise 3.x config (bug 1371580),Took a look at the stuff done for treeherder in https://bugzilla.mozilla.org/show_bug.cgi?id=1258700 -- this seems to address the issue @psiinon raised.,washort,947487,2017-09-26T22:51:45Z,CONTRIBUTOR,False,5,2,2,,JavaScript,180f0cc18f98ba3488da29586d9b2567b5780f52,Switch to whitenoise 3.x config (bug 1371580)
200,https://api.github.com/repos/mozilla/distribution-viewer/pulls/292,292,Update whitenoise to 3.3.1,"
There's a new version of [whitenoise](https://pypi.python.org/pypi/whitenoise) available.
You are currently using **3.3.0**. I have updated it to **3.3.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/whitenoise"">PyPI</a> | <a href=""https://pyup.io/changelogs/whitenoise/"">Changelog</a> | <a href=""http://whitenoise.evans.io"">Homepage</a> 



### Changelog
> 
>### 3.3.1

>------

> * Fix issue with the immutable file test when running behind a CDN which rewrites
>   paths (thanks lskillen).







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-23T18:29:39Z,CONTRIBUTOR,False,1,1,1,,JavaScript,c1484050df754d3afbd51cb8e560c78c79979338,Update whitenoise from 3.3.0 to 3.3.1
201,https://api.github.com/repos/mozilla/distribution-viewer/pulls/291,291,Update raven to 6.2.1,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.1.0**. I have updated it to **6.2.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.2.0

>-------------

>* [Core] `get_frame_locals` properly using `max_var_size`
>* [Core] Fixed raven initialization when `logging._srcfile` is None
>* [Core] Fixed import locking to avoid recursion
>* [Django] Fixed several issues for Django 1.11 and Django 2.0
>* [Django/DRF] Fixed issue with unavailable request data
>* [Flask] Added app.logger instrumentation
>* [Flask] Added signal on setup_logging
>* [ZConfig] Added standalone ZConfig support
>* [Celery] Fixed several issues related to Celery








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-22T18:18:39Z,CONTRIBUTOR,False,1,1,1,,JavaScript,1a8add8dc78eb7b15305a36744aef52a171c4fb1,Update raven from 6.1.0 to 6.2.1
202,https://api.github.com/repos/mozilla/distribution-viewer/pulls/290,290,Update raven to 6.2.0,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.1.0**. I have updated it to **6.2.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.2.0

>-------------

>* [Core] `get_frame_locals` properly using `max_var_size`
>* [Core] Fixed raven initialization when `logging._srcfile` is None
>* [Core] Fixed import locking to avoid recursion
>* [Django] Fixed several issues for Django 1.11 and Django 2.0
>* [Django/DRF] Fixed issue with unavailable request data
>* [Flask] Added app.logger instrumentation
>* [Flask] Added signal on setup_logging
>* [ZConfig] Added standalone ZConfig support
>* [Celery] Fixed several issues related to Celery








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-22T13:48:37Z,CONTRIBUTOR,False,1,1,1,,JavaScript,550a5a55f0f29ddcada13914b0be721e82f848f6,Update raven from 6.1.0 to 6.2.0
203,https://api.github.com/repos/mozilla/distribution-viewer/pulls/288,288,Update pyasn1 to 0.3.6,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.6**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-20T21:42:46Z,CONTRIBUTOR,False,1,1,1,,JavaScript,806ad4b5be91e699c9da9aa8cb87c8c0f9c32020,Update pyasn1 from 0.3.1 to 0.3.6
204,https://api.github.com/repos/mozilla/distribution-viewer/pulls/287,287,Update google-api-python-client to 1.6.4,"
There's a new version of [google-api-python-client](https://pypi.python.org/pypi/google-api-python-client) available.
You are currently using **1.6.2**. I have updated it to **1.6.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/google-api-python-client"">PyPI</a> | <a href=""https://pyup.io/changelogs/google-api-python-client/"">Changelog</a> | <a href=""http://github.com/google/google-api-python-client/"">Repo</a> 



### Changelog
> 
>### 1.6.4

>  Version 1.6.4

>  Bugfix release

>  - Warn when google-auth credentials are used but google-auth-httplib2 isn&#39;t available. (443)



>### 1.6.3

>  Version 1.6.3

>  Bugfix release

>  - Add notification of maintenance mode to README. (410)
>  - Fix generation of methods with abnormal page token conventions. (338)
>  - Raise ValueError is credentials and developerKey are both specified. (358)
>  - Re-generate documentation. (364, 373, 401)
>  - Fix method signature documentation for multiline required parameters. (374)
>  - Fix ZeroDivisionError in MediaDownloadProgress.progress. (377)
>  - Fix dead link to WebTest in README. (378)
>  - Fix details missing in googleapiclient.errors.HttpError. (412)
>  - Don&#39;t treat httplib2.Credentials as oauth credentials. (425)
>  - Various fixes to the Django sample. (413)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-20T16:10:34Z,CONTRIBUTOR,False,1,1,1,,JavaScript,af4562006f87ceb37662bb9f3bc1566e933d5f06,Update google-api-python-client from 1.6.2 to 1.6.4
205,https://api.github.com/repos/mozilla/distribution-viewer/pulls/286,286,Update six to 1.11.0,"
There's a new version of [six](https://pypi.python.org/pypi/six) available.
You are currently using **1.10.0**. I have updated it to **1.11.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/six"">PyPI</a> | <a href=""https://pyup.io/changelogs/six/"">Changelog</a> | <a href=""http://pypi.python.org/pypi/six/"">Homepage</a> | <a href=""http://pythonhosted.org/six/"">Docs</a> 



### Changelog
> 
>### 1.11.0

>------

>- Pull request 178: `with_metaclass` now properly proxies `__prepare__` to the
>  underlying metaclass.

>- Pull request 191: Allow `with_metaclass` to work with metaclasses implemented
>  in C.

>- Pull request 203: Add parse_http_list and parse_keqv_list to moved
>  urllib.request.

>- Pull request 172 and issue 171: Add unquote_to_bytes to moved urllib.parse.

>- Pull request 167: Add `six.moves.getoutput`.

>- Pull request 80: Add `six.moves.urllib_parse.splitvalue`.

>- Pull request 75: Add `six.moves.email_mime_image`.

>- Pull request 72: Avoid creating reference cycles through tracebacks in
>  `reraise`.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-17T22:11:31Z,CONTRIBUTOR,False,1,1,1,,JavaScript,9e4335886d2fabdabbaebfd749092225204d1f26,Update six from 1.10.0 to 1.11.0
206,https://api.github.com/repos/mozilla/distribution-viewer/pulls/285,285,Update pyasn1 to 0.3.5,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.5**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-16T23:26:30Z,CONTRIBUTOR,False,1,1,1,,JavaScript,5ef35639115bff118e4a1d9489acfec6d8c2ee8a,Update pyasn1 from 0.3.1 to 0.3.5
207,https://api.github.com/repos/mozilla/distribution-viewer/pulls/284,284,Update pyopenssl to 17.3.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **17.2.0**. I have updated it to **17.3.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyopenssl"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""https://pyopenssl.org/"">Homepage</a> | <a href=""http://pythonhosted.org/pyOpenSSL/"">Docs</a> 



### Changelog
> 
>### 17.3.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Dropped support for Python 3.3.
>  `677 &lt;https://github.com/pyca/pyopenssl/pull/677&gt;`_
>- Removed the deprecated ``OpenSSL.rand`` module.
>  This is being done ahead of our normal deprecation schedule due to its lack of use and the fact that it was becoming a maintenance burden.
>  ``os.urandom()`` should be used instead.
>  `675 &lt;https://github.com/pyca/pyopenssl/pull/675&gt;`_


>Deprecations:
>^^^^^^^^^^^^^

>- Deprecated ``OpenSSL.tsafe``.
>  `673 &lt;https://github.com/pyca/pyopenssl/pull/673&gt;`_

>Changes:
>^^^^^^^^

>- Fixed a memory leak in ``OpenSSL.crypto.CRL``.
>  `690 &lt;https://github.com/pyca/pyopenssl/pull/690&gt;`_
>- Fixed a memory leak when verifying certificates with ``OpenSSL.crypto.X509StoreContext``.
>  `691 &lt;https://github.com/pyca/pyopenssl/pull/691&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-14T04:05:23Z,CONTRIBUTOR,False,1,1,1,,JavaScript,b922b766ed8b98efc9a4a7370dfd67a56303d8ab,Update pyopenssl from 17.2.0 to 17.3.0
208,https://api.github.com/repos/mozilla/distribution-viewer/pulls/283,283,Remove CORS header and set anti-mime-sniffing header,As per https://wiki.mozilla.org/Security/Guidelines/Web_Security#Cross-origin_Resource_Sharing and https://wiki.mozilla.org/Security/Guidelines/Web_Security#X-Content-Type-Options,psiinon,1081115,2017-09-12T08:35:43Z,CONTRIBUTOR,False,1,1,1,,JavaScript,f0456fa8157f7111a4a5cd2238cdfeb97f0238af,"Remove CORS header and set anti-mime-sniffing header

As per https://wiki.mozilla.org/Security/Guidelines/Web_Security#Cross-origin_Resource_Sharing and https://wiki.mozilla.org/Security/Guidelines/Web_Security#X-Content-Type-Options"
209,https://api.github.com/repos/mozilla/distribution-viewer/pulls/282,282,Update pyasn1-modules to 0.1.4,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.1.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-07T15:40:15Z,CONTRIBUTOR,False,1,1,1,,JavaScript,75682948cfa0d96064567520a8e3705bd14c8042,Update pyasn1-modules from 0.0.9 to 0.1.4
210,https://api.github.com/repos/mozilla/distribution-viewer/pulls/281,281,Update pyasn1-modules to 0.1.2,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.1.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-07T10:25:15Z,CONTRIBUTOR,False,1,1,1,,JavaScript,65d230559b149009bcd7f1996726eb0551649a95,Update pyasn1-modules from 0.0.9 to 0.1.2
211,https://api.github.com/repos/mozilla/distribution-viewer/pulls/280,280,Update pyasn1 to 0.3.4,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-07T08:41:14Z,CONTRIBUTOR,False,1,1,1,,JavaScript,032c824ac4e0f93da87f58c5b88ecec436dd2be8,Update pyasn1 from 0.3.1 to 0.3.4
212,https://api.github.com/repos/mozilla/distribution-viewer/pulls/279,279,Update django to 1.11.5,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.7**. I have updated it to **1.11.5**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.5

>===========================

>*September 5, 2017*

>Django 1.11.5 fixes a security issue and several bugs in 1.11.4.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.

>Bugfixes
>========

>* Fixed GEOS version parsing if the version has a commit hash at the end (new
>  in GEOS 3.6.2) (:ticket:`28441`).

>* Added compatibility for ``cx_Oracle`` 6 (:ticket:`28498`).

>* Fixed select widget rendering when option values are tuples (:ticket:`28502`).

>* Django 1.11 inadvertently changed the sequence and trigger naming scheme on
>  Oracle. This causes errors on INSERTs for some tables if
>  ``&#39;use_returning_into&#39;: False`` is in the ``OPTIONS`` part of ``DATABASES``.
>  The pre-1.11 naming scheme is now restored. Unfortunately, it necessarily
>  requires an update to Oracle tables created with Django 1.11.[1-4]. Use the
>  upgrade script in :ticket:`28451` comment 8 to update sequence and trigger
>  names to use the pre-1.11 naming scheme.

>* Added POST request support to ``LogoutView``, for equivalence with the
>  function-based ``logout()`` view (:ticket:`28513`).

>* Omitted ``pages_per_range`` from ``BrinIndex.deconstruct()`` if it&#39;s ``None``
>  (:ticket:`25809`).

>* Fixed a regression where ``SelectDateWidget`` localized the years in the
>  select box (:ticket:`28530`).

>* Fixed a regression in 1.11.4 where ``runserver`` crashed with non-Unicode
>  system encodings on Python 2 + Windows (:ticket:`28487`).

>* Fixed a regression in Django 1.10 where changes to a ``ManyToManyField``
>  weren&#39;t logged in the admin change history (:ticket:`27998`) and prevented
>  ``ManyToManyField`` initial data in model forms from being affected by
>  subsequent model changes (:ticket:`28543`).

>* Fixed non-deterministic results or an ``AssertionError`` crash in some
>  queries with multiple joins (:ticket:`26522`).

>* Fixed a regression in ``contrib.auth``&#39;s ``login()`` and ``logout()`` views
>  where they ignored positional arguments (:ticket:`28550`).


>===========================


>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.4+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The undocumented ``Select.render_option()`` method is removed.

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================


>### 1.10.8

>===========================

>*September 5, 2017*

>Django 1.10.8 fixes a security issue in 1.10.7.

>CVE-2017-12794: Possible XSS in traceback section of technical 500 debug page
>=============================================================================

>In older versions, HTML autoescaping was disabled in a portion of the template
>for the technical 500 debug page. Given the right circumstances, this allowed
>a cross-site scripting attack. This vulnerability shouldn&#39;t affect most
>production sites since you shouldn&#39;t run with ``DEBUG = True`` (which makes
>this page accessible) in your production settings.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-09-05T18:51:13Z,CONTRIBUTOR,False,1,1,1,,JavaScript,6050f9000087c1048a4d73aef050abca9a6f3cc6,Update django from 1.10.7 to 1.11.5
213,https://api.github.com/repos/mozilla/distribution-viewer/pulls/278,278,Update google-api-python-client to 1.6.3,"
There's a new version of [google-api-python-client](https://pypi.python.org/pypi/google-api-python-client) available.
You are currently using **1.6.2**. I have updated it to **1.6.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/google-api-python-client"">PyPI</a> | <a href=""https://pyup.io/changelogs/google-api-python-client/"">Changelog</a> | <a href=""http://github.com/google/google-api-python-client/"">Repo</a> 



### Changelog
> 
>### 1.6.3

>  Version 1.6.3

>  Bugfix release

>  - Add notification of maintenance mode to README. (410)
>  - Fix generation of methods with abnormal page token conventions. (338)
>  - Raise ValueError is credentials and developerKey are both specified. (358)
>  - Re-generate documentation. (364, 373, 401)
>  - Fix method signature documentation for multiline required parameters. (374)
>  - Fix ZeroDivisionError in MediaDownloadProgress.progress. (377)
>  - Fix dead link to WebTest in README. (378)
>  - Fix details missing in googleapiclient.errors.HttpError. (412)
>  - Don&#39;t treat httplib2.Credentials as oauth credentials. (425)
>  - Various fixes to the Django sample. (413)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-29T16:40:00Z,CONTRIBUTOR,False,1,1,1,,JavaScript,fc15039cdb1bf5c9d07c1a2c8358729ae1207120,Update google-api-python-client from 1.6.2 to 1.6.3
214,https://api.github.com/repos/mozilla/distribution-viewer/pulls/277,277,Update pyasn1-modules to 0.1.1,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.1.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-27T22:25:15Z,CONTRIBUTOR,False,1,1,1,,JavaScript,e542cb1aa31a8fd0ed6f009205e1fd404b52456a,Update pyasn1-modules from 0.0.9 to 0.1.1
215,https://api.github.com/repos/mozilla/distribution-viewer/pulls/276,276,Update pyasn1 to 0.3.3,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-27T00:53:57Z,CONTRIBUTOR,False,1,1,1,,JavaScript,a040e53945036c5f5656374a528dc2dd6ecce88f,Update pyasn1 from 0.3.1 to 0.3.3
216,https://api.github.com/repos/mozilla/distribution-viewer/pulls/275,275,Update psycopg2 to 2.7.3.1,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.7.3**. I have updated it to **2.7.3.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> 



### Changelog
> 
>### 2.7.3.1

>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Dropped libresolv from wheel package to avoid incompatibility with
>  glibc 2.26 (wheels ticket 2)








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-26T16:40:57Z,CONTRIBUTOR,False,1,1,1,,JavaScript,1e1a84cf196c5ee40a91d18ac6e2591f2f42f43a,Update psycopg2 from 2.7.3 to 2.7.3.1
217,https://api.github.com/repos/mozilla/distribution-viewer/pulls/274,274,Added XFrame-Options header,"To prevent clickjacking, as per https://wiki.mozilla.org/Security/Guidelines/Web_Security#X-Frame-Options",psiinon,1081115,2017-08-23T12:45:15Z,CONTRIBUTOR,True,1,0,1,,JavaScript,18209427efbca9ef14c47c6d3425f3a029850c4f,"Added XFrame-Options header

To prevent clickjacking, as per https://wiki.mozilla.org/Security/Guidelines/Web_Security#X-Frame-Options"
218,https://api.github.com/repos/mozilla/distribution-viewer/pulls/273,273,Update djangorestframework to 3.6.4,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.3**. I have updated it to **3.6.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.6.4


>**Date**: [21st August 2017][3.6.4-milestone]

>* Ignore any invalidly formed query parameters for OrderingFilter. [5131][gh5131]
>* Improve memory footprint when reading large JSON requests. [5147][gh5147]
>* Fix schema generation for pagination. [5161][gh5161]
>* Fix exception when `HTML_CUTOFF` is set to `None`. [5174][gh5174]
>* Fix browsable API not supporting `multipart/form-data` correctly. [5176][gh5176]
>* Fixed `test_hyperlinked_related_lookup_url_encoded_exists`. [5179][gh5179]
>* Make sure max_length is in FileField kwargs. [5186][gh5186]
>* Fix `list_route` &amp; `detail_route` with kwargs contains curly bracket in `url_path` [5187][gh5187]
>* Add Django manage command to create a DRF user Token. [5188][gh5188]
>* Ensure API documentation templates do not check for user authentication [5162][gh5162]
>* Fix special case where OneToOneField is also primary key. [5192][gh5192]
>* Added aria-label and a new region for accessibility purposes in base.html [5196][gh5196]
>* Quote nested API parameters in api.js. [5214][gh5214]
>* Set ViewSet args/kwargs/request before dispatch. [5229][gh5229]
>* Added unicode support to SlugField. [5231][gh5231]
>* Fix HiddenField appears in Raw Data form initial content. [5259][gh5259]
>* Raise validation error on invalid timezone parsing. [5261][gh5261]
>* Fix SearchFilter to-many behavior/performance. [5264][gh5264]
>* Simplified chained comparisons and minor code fixes. [5276][gh5276]
>* RemoteUserAuthentication, docs, and tests. [5306][gh5306]
>* Revert &quot;Cached the field&#39;s root and context property&quot; [5313][gh5313]
>* Fix introspection of list field in schema. [5326][gh5326]
>* Fix interactive docs for multiple nested and extra methods. [5334][gh5334]
>* Fix/remove undefined template var &quot;schema&quot; [5346][gh5346]







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-22T14:54:45Z,CONTRIBUTOR,False,1,1,1,,JavaScript,003348e908de0d78ddd695554681f0df22e185ae,Update djangorestframework from 3.6.3 to 3.6.4
219,https://api.github.com/repos/mozilla/distribution-viewer/pulls/272,272,Update requests to 2.18.4,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.18.2**. I have updated it to **2.18.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.18.4

>+++++++++++++++++++

>**Improvements**

>- Error messages for invalid headers now include the header name for easier debugging

>**Dependencies**

>- We now support idna v2.6.



>### 2.18.3

>+++++++++++++++++++

>**Improvements**

>- Running ``$ python -m requests.help`` now includes the installed version of idna.

>**Bugfixes**

>- Fixed issue where Requests would raise ``ConnectionError`` instead of
>  ``SSLError`` when encountering SSL problems when using urllib3 v1.22.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-15T16:44:01Z,CONTRIBUTOR,False,1,1,1,,JavaScript,fd595dd6baef9e3c5a401274ca273020384d2e50,Update requests from 2.18.2 to 2.18.4
220,https://api.github.com/repos/mozilla/distribution-viewer/pulls/271,271,Update python-decouple to 3.1,"
There's a new version of [python-decouple](https://pypi.python.org/pypi/python-decouple) available.
You are currently using **3.0**. I have updated it to **3.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/python-decouple"">PyPI</a> | <a href=""http://github.com/henriquebastos/python-decouple/"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-07T23:43:19Z,CONTRIBUTOR,False,1,1,1,,JavaScript,9566be3d3c0b08887046dc2a446c8ba20a31f923,Update python-decouple from 3.0 to 3.1
221,https://api.github.com/repos/mozilla/distribution-viewer/pulls/270,270,Update pyasn1-modules to 0.0.11,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.0.11**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-04T19:24:25Z,CONTRIBUTOR,False,1,1,1,,JavaScript,6964b48b9eb2d82d0cbc68534d70ab6e0cd04fb9,Update pyasn1-modules from 0.0.9 to 0.0.11
222,https://api.github.com/repos/mozilla/distribution-viewer/pulls/269,269,Update pyasn1 to 0.3.2,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.3.1**. I have updated it to **0.3.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-04T19:24:15Z,CONTRIBUTOR,False,1,1,1,,JavaScript,949bd8b886a7f4ee815c396b314324e16e7437a7,Update pyasn1 from 0.3.1 to 0.3.2
223,https://api.github.com/repos/mozilla/distribution-viewer/pulls/268,268,Update pyflakes to 1.6.0,"
There's a new version of [pyflakes](https://pypi.python.org/pypi/pyflakes) available.
You are currently using **1.5.0**. I have updated it to **1.6.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyflakes"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyflakes/"">Changelog</a> | <a href=""https://github.com/PyCQA/pyflakes"">Repo</a> 



### Changelog
> 
>### 1.6.0

>  - Process function scope variable annotations for used names
>  - Find Python files without extensions by their shebang







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-03T16:15:13Z,CONTRIBUTOR,False,1,1,1,,JavaScript,e1f5b1c25edbe5e4d42b56c1b1e2d1ea0fb45189,Update pyflakes from 1.5.0 to 1.6.0
224,https://api.github.com/repos/mozilla/distribution-viewer/pulls/267,267,Update requests to 2.18.3,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.18.2**. I have updated it to **2.18.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.18.3

>+++++++++++++++++++

>**Improvements**

>- Running ``$ python -m requests.help`` now includes the installed version of idna.

>**Bugfixes**

>- Fixed issue where Requests would raise ``ConnectionError`` instead of
>  ``SSLError`` when encoutering SSL problems when using urllib3 v1.22.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-02T16:50:12Z,CONTRIBUTOR,False,1,1,1,,JavaScript,3143ee04c9dd530221f075e009c93943303ba5a2,Update requests from 2.18.2 to 2.18.3
225,https://api.github.com/repos/mozilla/distribution-viewer/pulls/266,266,Update django to 1.11.4,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.7**. I have updated it to **1.11.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.4

>===========================

>*August 1, 2017*

>Django 1.11.4 fixes several bugs in 1.11.3.

>Bugfixes
>========

>* Fixed a regression in 1.11.3 on Python 2 where non-ASCII ``format`` values
>  for date/time widgets results in an empty ``value`` in the widget&#39;s HTML
>  (:ticket:`28355`).

>* Fixed ``QuerySet.union()`` and ``difference()`` when combining with
>  a queryset raising ``EmptyResultSet`` (:ticket:`28378`).

>* Fixed a regression in pickling of ``LazyObject`` on Python 2 when the wrapped
>  object doesn&#39;t have ``__reduce__()`` (:ticket:`28389`).

>* Fixed crash in ``runserver``&#39;s ``autoreload`` with Python 2 on Windows with
>  non-``str`` environment variables (:ticket:`28174`).

>* Corrected ``Field.has_changed()`` to return ``False`` for disabled form
>  fields: ``BooleanField``, ``MultipleChoiceField``, ``MultiValueField``,
>  ``FileField``, ``ModelChoiceField``, and ``ModelMultipleChoiceField``.

>* Fixed ``QuerySet.count()`` for ``union()``, ``difference()``, and
>  ``intersection()`` queries. (:ticket:`28399`).

>* Fixed ``ClearableFileInput`` rendering as a subwidget of ``MultiWidget``
>  (:ticket:`28414`). Custom ``clearable_file_input.html`` widget templates
>  will need to adapt for the fact that context values
>  ``checkbox_name``, ``checkbox_id``, ``is_initial``, ``input_text``,
>  ``initial_text``, and ``clear_checkbox_label`` are now attributes of
>  ``widget`` rather than appearing in the top-level context.

>* Fixed queryset crash when using a ``GenericRelation`` to a proxy model
>  (:ticket:`28418`).


>===========================


>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.5+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The undocumented ``Select.render_option()`` method is removed.

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-08-01T15:34:09Z,CONTRIBUTOR,False,1,1,1,,JavaScript,5fd1e47d18b2dafce8d006db1571ec805642f260,Update django from 1.10.7 to 1.11.4
226,https://api.github.com/repos/mozilla/distribution-viewer/pulls/265,265,Update flake8 to 3.4.1,"
There's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.
You are currently using **3.3.0**. I have updated it to **3.4.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/flake8"">PyPI</a> | <a href=""https://pyup.io/changelogs/flake8/"">Changelog</a> | <a href=""https://gitlab.com/pycqa/flake8"">Repo</a> 



### Changelog
> 
>### 3.4.1

>-------------------

>You can view the `3.4.1 milestone`_ on GitLab for more details.

>- Fix minor regression when users specify only a ``--select`` list with items
>  in the enabled/extended select list.  (See also `GitLab354`_)

>.. all links
>.. _3.4.1 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/19

>.. issue links
>.. _GitLab354:
>    https://gitlab.com/pycqa/flake8/issues/354

>.. merge request links




>### 3.4.0

>-------------------

>You can view the `3.4.0 milestone`_ on GitLab for more details.

>- Refine logic around ``--select`` and ``--ignore`` when combined with the
>  default values for each. (See also `GitLab318`_)

>- Handle spaces as an alternate separate for error codes, e.g.,
>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)

>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.
>  (See also `GitLab330`_)

>- Specify dependencies appropriately in ``setup.py`` (See also `Gitlab341_`)

>- Fix bug in parsing ``--quiet`` and ``--verbose`` from config files.
>  (See also `GitLab!193`_)

>- Remove unused import of ``os`` in the git hook template (See also
>  `GitLab!194`_)

>.. all links
>.. _3.4.0 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/18

>.. issue links
>.. _GitLab318:
>    https://gitlab.com/pycqa/flake8/issues/318
>.. _GitLab329:
>    https://gitlab.com/pycqa/flake8/issues/329
>.. _GitLab330:
>    https://gitlab.com/pycqa/flake8/issues/330
>.. _GitLab341:
>    https://gitlab.com/pycqa/flake8/issues/341

>.. merge request links
>.. _GitLab!193:
>    https://gitlab.com/pycqa/flake8/merge_requests/193
>.. _GitLab!194:
>    https://gitlab.com/pycqa/flake8/merge_requests/194








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-28T17:30:03Z,CONTRIBUTOR,False,1,1,1,,JavaScript,516d7ec0ad1cdf97e75e905f7bcf42d6a83273de,Update flake8 from 3.3.0 to 3.4.1
227,https://api.github.com/repos/mozilla/distribution-viewer/pulls/264,264,Update flake8 to 3.4.0,"
There's a new version of [flake8](https://pypi.python.org/pypi/flake8) available.
You are currently using **3.3.0**. I have updated it to **3.4.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/flake8"">PyPI</a> | <a href=""https://pyup.io/changelogs/flake8/"">Changelog</a> | <a href=""https://gitlab.com/pycqa/flake8"">Repo</a> 



### Changelog
> 
>### 3.4.0

>-------------------

>You can view the `3.4.0 milestone`_ on GitLab for more details.

>- Refine logic around ``--select`` and ``--ignore`` when combined with the
>  default values for each. (See also `GitLab318`_)

>- Handle spaces as an alternate separate for error codes, e.g.,
>  ``--ignore &#39;E123 E234&#39;``. (See also `GitLab329`_)

>- Filter out empty select and ignore codes, e.g., ``--ignore E123,,E234``.
>  (See also `GitLab330`_)

>.. all links
>.. _3.4.0 milestone:
>    https://gitlab.com/pycqa/flake8/milestones/18

>.. issue links
>.. _GitLab318:
>    https://gitlab.com/pycqa/flake8/issues/318
>.. _GitLab329:
>    https://gitlab.com/pycqa/flake8/issues/329
>.. _GitLab330:
>    https://gitlab.com/pycqa/flake8/issues/330

>.. merge request links








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-28T06:15:00Z,CONTRIBUTOR,False,1,1,1,,JavaScript,cf8a994d57e5b40cd7f607a1177911e8a6855f3a,Update flake8 from 3.3.0 to 3.4.0
228,https://api.github.com/repos/mozilla/distribution-viewer/pulls/263,263,Update pyasn1-modules to 0.0.10,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.9**. I have updated it to **0.0.10**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-26T22:53:00Z,CONTRIBUTOR,False,1,1,1,,JavaScript,7703a39d665a5c3deef44d88e9def0e64822f741,Update pyasn1-modules from 0.0.9 to 0.0.10
229,https://api.github.com/repos/mozilla/distribution-viewer/pulls/262,262,Updating Python libs,,robhudson,1106,2017-07-26T18:49:29Z,MEMBER,True,10,10,1,,JavaScript,9123fb044fa6f4c4eba4382e79c1c8be05b3bed6,Updating Python libs
230,https://api.github.com/repos/mozilla/distribution-viewer/pulls/261,261,Update pyasn1 to 0.3.1,"
There's a new version of [pyasn1](https://pypi.python.org/pypi/pyasn1) available.
You are currently using **0.2.3**. I have updated it to **0.3.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-26T18:32:55Z,CONTRIBUTOR,False,1,1,1,,JavaScript,9d34c37309aa4a23a6f59f963a56269487a95c74,Update pyasn1 from 0.2.3 to 0.3.1
231,https://api.github.com/repos/mozilla/distribution-viewer/pulls/260,260,Update requests to 2.18.2,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.18.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.18.2

>+++++++++++++++++++

>**Bugfixes**

>- ``requests.help`` no longer fails on Python 2.6 due to the absence of
>  ``ssl.OPENSSL_VERSION_NUMBER``.

>**Dependencies**

>- We now support urllib3 v1.22.



>### 2.18.1

>+++++++++++++++++++

>**Bugfixes**

>- Fix an error in the packaging whereby the *.whl contained incorrect data that
>  regressed the fix in v2.17.3.



>### 2.18.0

>+++++++++++++++++++

>**Improvements**

>- ``Response`` is now a context manager, so can be used directly in a ``with`` statement
>  without first having to be wrapped by ``contextlib.closing()``.

>**Bugfixes**

>- Resolve installation failure if multiprocessing is not available
>- Resolve tests crash if multiprocessing is not able to determine the number of CPU cores
>- Resolve error swallowing in utils set_environ generator




>### 2.17.3

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.2

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.1

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.0

>+++++++++++++++++++

>**Improvements**

>- Removal of the 301 redirect cache. This improves thread-safety.




>### 2.16.5

>+++++++++++++++++++

>- Improvements to ``$ python -m requests.help``.



>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-25T18:32:57Z,CONTRIBUTOR,False,1,1,1,,JavaScript,74eebd8e2ddcd21e8af8cb2e3cd0c276128a5a02,Update requests from 2.13.0 to 2.18.2
232,https://api.github.com/repos/mozilla/distribution-viewer/pulls/259,259,Update psycopg2 to 2.7.3,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.7.1**. I have updated it to **2.7.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> | <a href=""http://pythonhosted.org/psycopg2/"">Docs</a> 



### Changelog
> 
>### 2.7.3

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Restored default :sql:`timestamptz[]` typecasting to Python `!datetime`.
>  Regression introduced in Psycopg 2.7.2 (:ticket:`578`).




>### 2.7.2

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Fixed inconsistent state in externally closed connections
>  (:tickets:`263, 311, 443`). Was fixed in 2.6.2 but not included in
>  2.7 by mistake.
>- Fixed Python exceptions propagation in green callback (:ticket:`410`).
>- Don&#39;t display the password in `connection.dsn` when the connection
>  string is specified as an URI (:ticket:`528`).
>- Return objects with timezone parsing &quot;infinity&quot; :sql:`timestamptz`
>  (:ticket:`536`).
>- Dropped dependency on VC9 runtime on Windows binary packages
>  (:ticket:`541`).
>- Fixed segfault in `~connection.lobject()` when *mode*\=\ `!None`
>  (:ticket:`544`).
>- Fixed `~connection.lobject()` keyword argument *lobject_factory*
>  (:ticket:`545`).
>- Fixed `~psycopg2.extras.ReplicationCursor.consume_stream()`
>  *keepalive_interval* argument (:ticket:`547`).
>- Maybe fixed random import error on Python 3.6 in multiprocess
>  environment (:ticket:`550`).
>- Fixed random `!SystemError` upon receiving abort signal (:ticket:`551`).
>- Accept `~psycopg2.sql.Composable` objects in
>  `~psycopg2.extras.ReplicationCursor.start_replication_expert()`
>  (:ticket:`554`).
>- Parse intervals returned as microseconds from Redshift (:ticket:`558`).
>- Added `~psycopg2.extras.Json` `!prepare()` method to consider connection
>  params when adapting (:ticket:`562`).
>- `~psycopg2.errorcodes` map updated to PostgreSQL 10 beta 1.








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-24T19:30:55Z,CONTRIBUTOR,False,1,1,1,,JavaScript,99adae86cac9de3f54944faaba4a3616fc8104e4,Update psycopg2 from 2.7.1 to 2.7.3
233,https://api.github.com/repos/mozilla/distribution-viewer/pulls/258,258,Update psycopg2 to 2.7.2,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.7.1**. I have updated it to **2.7.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> | <a href=""http://pythonhosted.org/psycopg2/"">Docs</a> 



### Changelog
> 
>### 2.7.2

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Fixed inconsistent state in externally closed connections
>  (:tickets:`263, 311, 443`). Was fixed in 2.6.2 but not included in
>  2.7 by mistake.
>- Fixed Python exceptions propagation in green callback (:ticket:`410`).
>- Don&#39;t display the password in `connection.dsn` when the connection
>  string is specified as an URI (:ticket:`528`).
>- Return objects with timezone parsing &quot;infinity&quot; :sql:`timestamptz`
>  (:ticket:`536`).
>- Dropped dependency on VC9 runtime on Windows binary packages
>  (:ticket:`541`).
>- Fixed segfault in `~connection.lobject()` when *mode*\=\ `!None`
>  (:ticket:`544`).
>- Fixed `~connection.lobject()` keyword argument *lobject_factory*
>  (:ticket:`545`).
>- Fixed `~psycopg2.extras.ReplicationCursor.consume_stream()`
>  *keepalive_interval* argument (:ticket:`547`).
>- Maybe fixed random import error on Python 3.6 in multiprocess
>  environment (:ticket:`550`).
>- Fixed random `!SystemError` upon receiving abort signal (:ticket:`551`).
>- Accept `~psycopg2.sql.Composable` objects in
>  `~psycopg2.extras.ReplicationCursor.start_replication_expert()`
>  (:ticket:`554`).
>- Parse intervals returned as microseconds from Redshift (:ticket:`558`).
>- Added `~psycopg2.extras.Json` `!prepare()` method to consider connection
>  params when adapting (:ticket:`562`).
>- `~psycopg2.errorcodes` map updated to PostgreSQL 10 beta 1.








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-22T17:15:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,66b2b7f2a58d672ca74aea03c9e0b8bcf8c08caa,Update psycopg2 from 2.7.1 to 2.7.2
234,https://api.github.com/repos/mozilla/distribution-viewer/pulls/257,257,Update pyopenssl to 17.2.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **16.2.0**. I have updated it to **17.2.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyopenssl"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""https://pyopenssl.org/"">Homepage</a> | <a href=""http://pythonhosted.org/pyOpenSSL/"">Docs</a> 



### Changelog
> 
>### 17.2.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>- Deprecated ``OpenSSL.rand`` - callers should use ``os.urandom()`` instead.
>  `658 &lt;https://github.com/pyca/pyopenssl/pull/658&gt;`_


>Changes:
>^^^^^^^^

>- Fixed a bug causing ``Context.set_default_verify_paths()`` to not work with cryptography ``manylinux1`` wheels on Python 3.x.
>  `665 &lt;https://github.com/pyca/pyopenssl/pull/665&gt;`_
>- Fixed a crash with (EC)DSA signatures in some cases.
>  `670 &lt;https://github.com/pyca/pyopenssl/pull/670&gt;`_


>----




>### 17.1.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Removed the deprecated ``OpenSSL.rand.egd()`` function.
>  Applications should prefer ``os.urandom()`` for random number generation.
>  `630 &lt;https://github.com/pyca/pyopenssl/pull/630&gt;`_
>- Removed the deprecated default ``digest`` argument to ``OpenSSL.crypto.CRL.export()``.
>  Callers must now always pass an explicit ``digest``.
>  `652 &lt;https://github.com/pyca/pyopenssl/pull/652&gt;`_
>- Fixed a bug with ``ASN1_TIME`` casting in ``X509.set_notBefore()``,
>  ``X509.set_notAfter()``, ``Revoked.set_rev_date()``, ``Revoked.set_nextUpdate()``,
>  and ``Revoked.set_lastUpdate()``. You must now pass times in the form
>  ``YYYYMMDDhhmmssZ``. ``YYYYMMDDhhmmss+hhmm`` and ``YYYYMMDDhhmmss-hhmm``
>  will no longer work. `612 &lt;https://github.com/pyca/pyopenssl/pull/612&gt;`_


>Deprecations:
>^^^^^^^^^^^^^


>- Deprecated the legacy &quot;Type&quot; aliases: ``ContextType``, ``ConnectionType``, ``PKeyType``, ``X509NameType``, ``X509ExtensionType``, ``X509ReqType``, ``X509Type``, ``X509StoreType``, ``CRLType``, ``PKCS7Type``, ``PKCS12Type``, ``NetscapeSPKIType``.
>  The names without the &quot;Type&quot;-suffix should be used instead.


>Changes:
>^^^^^^^^

>- Added ``OpenSSL.crypto.X509.from_cryptography()`` and ``OpenSSL.crypto.X509.to_cryptography()`` for converting X.509 certificate to and from pyca/cryptography objects.
>  `640 &lt;https://github.com/pyca/pyopenssl/pull/640&gt;`_
>- Added ``OpenSSL.crypto.X509Req.from_cryptography()``, ``OpenSSL.crypto.X509Req.to_cryptography()``, ``OpenSSL.crypto.CRL.from_cryptography()``, and ``OpenSSL.crypto.CRL.to_cryptography()`` for converting X.509 CSRs and CRLs to and from pyca/cryptography objects.
>  `645 &lt;https://github.com/pyca/pyopenssl/pull/645&gt;`_
>- Added ``OpenSSL.debug`` that allows to get an overview of used library versions (including linked OpenSSL) and other useful runtime information using ``python -m OpenSSL.debug``.
>  `620 &lt;https://github.com/pyca/pyopenssl/pull/620&gt;`_
>- Added a fallback path to ``Context.set_default_verify_paths()`` to accommodate the upcoming release of ``cryptography`` ``manylinux1`` wheels.
>  `633 &lt;https://github.com/pyca/pyopenssl/pull/633&gt;`_


>----




>### 17.0.0

>-------------------

>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^

>- Added ``OpenSSL.X509Store.set_time()`` to set a custom verification time when verifying certificate chains.
>  `567 &lt;https://github.com/pyca/pyopenssl/pull/567&gt;`_
>- Added a collection of functions for working with OCSP stapling.
>  None of these functions make it possible to validate OCSP assertions, only to staple them into the handshake and to retrieve the stapled assertion if provided.
>  Users will need to write their own code to handle OCSP assertions.
>  We specifically added: ``Context.set_ocsp_server_callback()``, ``Context.set_ocsp_client_callback()``, and ``Connection.request_ocsp()``.
>  `580 &lt;https://github.com/pyca/pyopenssl/pull/580&gt;`_
>- Changed the ``SSL`` module&#39;s memory allocation policy to avoid zeroing memory it allocates when unnecessary.
>  This reduces CPU usage and memory allocation time by an amount proportional to the size of the allocation.
>  For applications that process a lot of TLS data or that use very lage allocations this can provide considerable performance improvements.
>  `578 &lt;https://github.com/pyca/pyopenssl/pull/578&gt;`_
>- Automatically set ``SSL_CTX_set_ecdh_auto()`` on ``OpenSSL.SSL.Context``.
>  `575 &lt;https://github.com/pyca/pyopenssl/pull/575&gt;`_
>- Fix empty exceptions from ``OpenSSL.crypto.load_privatekey()``.
>  `581 &lt;https://github.com/pyca/pyopenssl/pull/581&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-20T10:43:49Z,CONTRIBUTOR,False,1,1,1,,JavaScript,0cbb4da8e028a2ea5e954744a2f09e4652126041,Update pyopenssl from 16.2.0 to 17.2.0
235,https://api.github.com/repos/mozilla/distribution-viewer/pulls/256,256,Update django to 1.11.3,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.7**. I have updated it to **1.11.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.3

>===========================

>*July 1, 2017*

>Django 1.11.3 fixes several bugs in 1.11.2.

>Bugfixes
>========

>* Removed an incorrect deprecation warning about a missing ``renderer``
>  argument if a ``Widget.render()`` method accepts ``**kwargs``
>  (:ticket:`28265`).

>* Fixed a regression causing ``Model.__init__()`` to crash if a field has an
>  instance only descriptor (:ticket:`28269`).

>* Fixed an incorrect ``DisallowedModelAdminLookup`` exception when using
>  a nested reverse relation in ``list_filter`` (:ticket:`28262`).

>* Fixed admin&#39;s ``FieldListFilter.get_queryset()`` crash on invalid input
>  (:ticket:`28202`).

>* Fixed invalid HTML for a required ``AdminFileWidget`` (:ticket:`28278`).

>* Fixed model initialization to set the name of class-based model indexes
>  for models that only inherit ``models.Model`` (:ticket:`28282`).

>* Fixed crash in admin&#39;s inlines when a model has an inherited non-editable
>  primary key (:ticket:`27967`).

>* Fixed ``QuerySet.union()``, ``intersection()``, and ``difference()`` when
>  combining with an ``EmptyQuerySet`` (:ticket:`28293`).

>* Prevented ``Paginator``’s unordered object list warning from evaluating a
>  ``QuerySet`` (:ticket:`28284`).

>* Fixed the value of ``redirect_field_name`` in ``LoginView``’s template
>  context. It&#39;s now an empty string (as it is for the original function-based
>  ``login()`` view) if the corresponding parameter isn&#39;t sent in a request (in
>  particular, when the login page is accessed directly) (:ticket:`28229`).

>* Prevented attribute values in the ``django/forms/widgets/attrs.html``
>  template from being localized so that numeric attributes (e.g. ``max`` and
>  ``min``) of ``NumberInput`` work correctly (:ticket:`28303`).

>* Removed casting of the option value to a string in the template context of
>  the ``CheckboxSelectMultiple``, ``NullBooleanSelect``, ``RadioSelect``,
>  ``SelectMultiple``, and ``Select`` widgets (:ticket:`28176`). In Django
>  1.11.1, casting was added in Python to avoid localization of numeric values
>  in Django templates, but this made some use cases more difficult. Casting is
>  now done in the template using the ``|stringformat:&#39;s&#39;`` filter.

>* Prevented a primary key alteration from adding a foreign key constraint if
>  ``db_constraint=False`` (:ticket:`28298`).

>* Fixed ``UnboundLocalError`` crash in ``RenameField`` with nonexistent field
>  (:ticket:`28350`).

>* Fixed a regression preventing a model field&#39;s ``limit_choices_to`` from being
>  evaluated when a ``ModelForm`` is instantiated (:ticket:`28345`).


>===========================


>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.5+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>This section describes changes that may be needed in third-party database
>backends.

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The undocumented ``Select.render_option()`` method is removed.

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-07-02T02:36:53Z,CONTRIBUTOR,False,1,1,1,,JavaScript,0b7eb17731df761b095bd2958373efd558761250,Update django from 1.10.7 to 1.11.3
236,https://api.github.com/repos/mozilla/distribution-viewer/pulls/255,255,Update pyopenssl to 17.1.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **16.2.0**. I have updated it to **17.1.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyopenssl"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""https://pyopenssl.readthedocs.io/"">Docs</a> 



### Changelog
> 
>### 17.1.0

>-------------------


>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Removed the deprecated ``OpenSSL.rand.egd()`` function.
>  Applications should prefer ``os.urandom()`` for random number generation.
>  `630 &lt;https://github.com/pyca/pyopenssl/pull/630&gt;`_
>- Removed the deprecated default ``digest`` argument to ``OpenSSL.crypto.CRL.export()``.
>  Callers must now always pass an explicit ``digest``.
>  `652 &lt;https://github.com/pyca/pyopenssl/pull/652&gt;`_
>- Fixed a bug with ``ASN1_TIME`` casting in ``X509.set_notBefore()``,
>  ``X509.set_notAfter()``, ``Revoked.set_rev_date()``, ``Revoked.set_nextUpdate()``,
>  and ``Revoked.set_lastUpdate()``. You must now pass times in the form
>  ``YYYYMMDDhhmmssZ``. ``YYYYMMDDhhmmss+hhmm`` and ``YYYYMMDDhhmmss-hhmm``
>  will no longer work. `612 &lt;https://github.com/pyca/pyopenssl/pull/612&gt;`_


>Deprecations:
>^^^^^^^^^^^^^


>- Deprecated the legacy &quot;Type&quot; aliases: ``ContextType``, ``ConnectionType``, ``PKeyType``, ``X509NameType``, ``X509ExtensionType``, ``X509ReqType``, ``X509Type``, ``X509StoreType``, ``CRLType``, ``PKCS7Type``, ``PKCS12Type``, ``NetscapeSPKIType``.
>  The names without the &quot;Type&quot;-suffix should be used instead.


>Changes:
>^^^^^^^^

>- Added ``OpenSSL.crypto.X509.from_cryptography()`` and ``OpenSSL.crypto.X509.to_cryptography()`` for converting X.509 certificate to and from pyca/cryptography objects.
>  `640 &lt;https://github.com/pyca/pyopenssl/pull/640&gt;`_
>- Added ``OpenSSL.crypto.X509Req.from_cryptography()``, ``OpenSSL.crypto.X509Req.to_cryptography()``, ``OpenSSL.crypto.CRL.from_cryptography()``, and ``OpenSSL.crypto.CRL.to_cryptography()`` for converting X.509 CSRs and CRLs to and from pyca/cryptography objects.
>  `645 &lt;https://github.com/pyca/pyopenssl/pull/645&gt;`_
>- Added ``OpenSSL.debug`` that allows to get an overview of used library versions (including linked OpenSSL) and other useful runtime information using ``python -m OpenSSL.debug``.
>  `620 &lt;https://github.com/pyca/pyopenssl/pull/620&gt;`_
>- Added a fallback path to ``Context.set_default_verify_paths()`` to accommodate the upcoming release of ``cryptography`` ``manylinux1`` wheels.
>  `633 &lt;https://github.com/pyca/pyopenssl/pull/633&gt;`_


>----




>### 17.0.0

>-------------------

>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^

>- Added ``OpenSSL.X509Store.set_time()`` to set a custom verification time when verifying certificate chains.
>  `567 &lt;https://github.com/pyca/pyopenssl/pull/567&gt;`_
>- Added a collection of functions for working with OCSP stapling.
>  None of these functions make it possible to validate OCSP assertions, only to staple them into the handshake and to retrieve the stapled assertion if provided.
>  Users will need to write their own code to handle OCSP assertions.
>  We specifically added: ``Context.set_ocsp_server_callback()``, ``Context.set_ocsp_client_callback()``, and ``Connection.request_ocsp()``.
>  `580 &lt;https://github.com/pyca/pyopenssl/pull/580&gt;`_
>- Changed the ``SSL`` module&#39;s memory allocation policy to avoid zeroing memory it allocates when unnecessary.
>  This reduces CPU usage and memory allocation time by an amount proportional to the size of the allocation.
>  For applications that process a lot of TLS data or that use very lage allocations this can provide considerable performance improvements.
>  `578 &lt;https://github.com/pyca/pyopenssl/pull/578&gt;`_
>- Automatically set ``SSL_CTX_set_ecdh_auto()`` on ``OpenSSL.SSL.Context``.
>  `575 &lt;https://github.com/pyca/pyopenssl/pull/575&gt;`_
>- Fix empty exceptions from ``OpenSSL.crypto.load_privatekey()``.
>  `581 &lt;https://github.com/pyca/pyopenssl/pull/581&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-30T16:27:51Z,CONTRIBUTOR,False,1,1,1,,JavaScript,0c385a6a71ddae39a5036fe1aabea80057a370e0,Update pyopenssl from 16.2.0 to 17.1.0
237,https://api.github.com/repos/mozilla/distribution-viewer/pulls/254,254,Update oauth2client to 4.1.2,"
There's a new version of [oauth2client](https://pypi.python.org/pypi/oauth2client) available.
You are currently using **4.0.0**. I have updated it to **4.1.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/oauth2client"">PyPI</a> | <a href=""https://pyup.io/changelogs/oauth2client/"">Changelog</a> | <a href=""http://github.com/google/oauth2client/"">Repo</a> 



### Changelog
> 
>### 4.1.2


>**Note**: oauth2client is deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>Bug fixes:
>* Fix packaging issue had erroneously installed the test package. (688)



>### 4.1.1


>**Note**: oauth2client is deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>New features:
>* Allow passing prompt=&#39;consent&#39; via the flow_from_clientsecrets. (717)



>### 4.1.0


>**Note**: oauth2client is now deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>New features:
>* Allow customizing the GCE metadata service address via an env var. (704)
>* Store original encoded and signed identity JWT in OAuth2Credentials. (680)
>* Use jsonpickle in django contrib, if available. (676)

>Bug fixes:
>* Typo fixes. (668, 697)
>* Remove b64 padding from PKCE values, per RFC7636. (683)
>* Include LICENSE in Manifest.in. (694)
>* Fix tests and CI. (705, 712, 713)
>* Escape callback error code in flask_util. (710)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-29T22:20:47Z,CONTRIBUTOR,False,1,1,1,,JavaScript,27d10fb53e0d53cbfc4a485e5368b5ab5ea26e8a,Update oauth2client from 4.0.0 to 4.1.2
238,https://api.github.com/repos/mozilla/distribution-viewer/pulls/253,253,Update simplejson to 3.11.1,"
There's a new version of [simplejson](https://pypi.python.org/pypi/simplejson) available.
You are currently using **3.10.0**. I have updated it to **3.11.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/simplejson"">PyPI</a> | <a href=""https://pyup.io/changelogs/simplejson/"">Changelog</a> | <a href=""http://github.com/simplejson/simplejson"">Repo</a> 



### Changelog
> 
>### 3.11.1


>* Fix issue with item_sort_key when speedups are available, and add
>  auto-discovery to test suites to prevent similar regressions
>  https://github.com/simplejson/simplejson/issues/173



>### 3.11.0


>* docstring fix in JSONEncoder
>  https://github.com/simplejson/simplejson/pull/172
>* Call PyObject_IsTrue() only once for the strict argument of scanner
>  https://github.com/simplejson/simplejson/pull/170
>* Fix a crash with unencodable encoding in the encoder
>  https://github.com/simplejson/simplejson/pull/171
>* Remove unused imports
>  https://github.com/simplejson/simplejson/pull/162
>* Remove remnants of Python 2.4 support
>  https://github.com/simplejson/simplejson/pull/168
>* Fix argument checking errors in _speedups.c
>  https://github.com/simplejson/simplejson/pull/169
>* Remove the `__init__` methods in extension classes
>  https://github.com/simplejson/simplejson/pull/166
>* Fix typo in the doc for loads
>  https://github.com/simplejson/simplejson/issues/161
>* Add Python 3.6 to testing matrix and PyPI metadata
>  https://github.com/simplejson/simplejson/pull/153
>  https://github.com/simplejson/simplejson/pull/152







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-19T20:45:28Z,CONTRIBUTOR,False,1,1,1,,JavaScript,102312852ad18b4533fa58317106aec82bd0338c,Update simplejson from 3.10.0 to 3.11.1
239,https://api.github.com/repos/mozilla/distribution-viewer/pulls/252,252,Update simplejson to 3.11.0,"
There's a new version of [simplejson](https://pypi.python.org/pypi/simplejson) available.
You are currently using **3.10.0**. I have updated it to **3.11.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/simplejson"">PyPI</a> | <a href=""https://pyup.io/changelogs/simplejson/"">Changelog</a> | <a href=""http://github.com/simplejson/simplejson"">Repo</a> 



### Changelog
> 
>### 3.11.0


>* docstring fix in JSONEncoder
>  https://github.com/simplejson/simplejson/pull/172
>* Call PyObject_IsTrue() only once for the strict argument of scanner
>  https://github.com/simplejson/simplejson/pull/170
>* Fix a crash with unencodable encoding in the encoder
>  https://github.com/simplejson/simplejson/pull/171
>* Remove unused imports
>  https://github.com/simplejson/simplejson/pull/162
>* Remove remnants of Python 2.4 support
>  https://github.com/simplejson/simplejson/pull/168
>* Fix argument checking errors in _speedups.c
>  https://github.com/simplejson/simplejson/pull/169
>* Remove the `__init__` methods in extension classes
>  https://github.com/simplejson/simplejson/pull/166
>* Fix typo in the doc for loads
>  https://github.com/simplejson/simplejson/issues/161
>* Add Python 3.6 to testing matrix and PyPI metadata
>  https://github.com/simplejson/simplejson/pull/153
>  https://github.com/simplejson/simplejson/pull/152







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-18T15:15:30Z,CONTRIBUTOR,False,1,1,1,,JavaScript,bdcb0ac937ab4334816a855a3c35ef9f7441320d,Update simplejson from 3.10.0 to 3.11.0
240,https://api.github.com/repos/mozilla/distribution-viewer/pulls/251,251,Update requests to 2.18.1,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.18.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.18.1

>+++++++++++++++++++

>**Bugfixes**

>- Fix an error in the packaging whereby the *.whl contained incorrect data that
>  regressed the fix in v2.17.3.



>### 2.18.0

>+++++++++++++++++++

>**Improvements**

>- ``Response`` is now a context manager, so can be used directly in a ``with`` statement
>  without first having to be wrapped by ``contextlib.closing()``.

>**Bugfixes**

>- Resolve installation failure if multiprocessing is not available
>- Resolve tests crash if multiprocessing is not able to determine the number of CPU cores
>- Resolve error swallowing in utils set_environ generator




>### 2.17.3

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.2

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.1

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.0

>+++++++++++++++++++

>**Improvements**

>- Removal of the 301 redirect cache. This improves thread-safety.




>### 2.16.5

>+++++++++++++++++++

>- Improvements to ``$ python -m requests.help``.



>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-14T18:45:35Z,CONTRIBUTOR,False,1,1,1,,JavaScript,4d45cd9095e64fa3dbb7bb5d5a0a8a2a22d2b520,Update requests from 2.13.0 to 2.18.1
241,https://api.github.com/repos/mozilla/distribution-viewer/pulls/250,250,Update oauth2client to 4.1.1,"
There's a new version of [oauth2client](https://pypi.python.org/pypi/oauth2client) available.
You are currently using **4.0.0**. I have updated it to **4.1.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/oauth2client"">PyPI</a> | <a href=""https://pyup.io/changelogs/oauth2client/"">Changelog</a> | <a href=""http://github.com/google/oauth2client/"">Repo</a> 



### Changelog
> 
>### 4.1.1


>**Note**: oauth2client is deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>New features:
>* Allow passing prompt=&#39;consent&#39; via the flow_from_clientsecrets. (717)



>### 4.1.0


>**Note**: oauth2client is now deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>New features:
>* Allow customizing the GCE metadata service address via an env var. (704)
>* Store original encoded and signed identity JWT in OAuth2Credentials. (680)
>* Use jsonpickle in django contrib, if available. (676)

>Bug fixes:
>* Typo fixes. (668, 697)
>* Remove b64 padding from PKCE values, per RFC7636. (683)
>* Include LICENSE in Manifest.in. (694)
>* Fix tests and CI. (705, 712, 713)
>* Escape callback error code in flask_util. (710)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-06T16:17:09Z,CONTRIBUTOR,False,1,1,1,,JavaScript,f2e79fb4158afcc6c9cbc817447bfce67dc52d89,Update oauth2client from 4.0.0 to 4.1.1
242,https://api.github.com/repos/mozilla/distribution-viewer/pulls/249,249,Update pyasn1-modules to 0.0.9,"
There's a new version of [pyasn1-modules](https://pypi.python.org/pypi/pyasn1-modules) available.
You are currently using **0.0.8**. I have updated it to **0.0.9**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/pyasn1-modules"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyasn1-modules/"">Changelog</a> | <a href=""https://github.com/etingof/pyasn1-modules"">Repo</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-01T21:36:04Z,CONTRIBUTOR,False,1,1,1,,JavaScript,3ad663bb41f11283d7a20a89b9d744d7fc3c68c5,Update pyasn1-modules from 0.0.8 to 0.0.9
243,https://api.github.com/repos/mozilla/distribution-viewer/pulls/248,248,Update django to 1.11.2,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.7**. I have updated it to **1.11.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.2

>===========================

>*June 1, 2017*

>Django 1.11.2 adds a minor feature and fixes several bugs in 1.11.1. Also, the
>latest string translations from Transifex are incorporated.

>Minor feature
>=============

>The new ``LiveServerTestCase.port`` attribute reallows the use case of binding
>to a specific port following the :ref:`bind to port zero
>&lt;liveservertestcase-port-zero-change&gt;` change in Django 1.11.

>Bugfixes
>========

>* Added detection for GDAL 2.1 and 2.0, and removed detection for unsupported
>  versions 1.7 and 1.8 (:ticket:`28181`).

>* Changed ``contrib.gis`` to raise ``ImproperlyConfigured`` rather than
>  ``GDALException`` if ``gdal`` isn&#39;t installed, to allow third-party apps to
>  catch that exception (:ticket:`28178`).

>* Fixed ``django.utils.http.is_safe_url()`` crash on invalid IPv6 URLs
>  (:ticket:`28142`).

>* Fixed regression causing pickling of model fields to crash (:ticket:`28188`).

>* Fixed ``django.contrib.auth.authenticate()`` when multiple authentication
>  backends don&#39;t accept a positional ``request`` argument (:ticket:`28207`).

>* Fixed introspection of index field ordering on PostgreSQL (:ticket:`28197`).

>* Fixed a regression where ``Model._state.adding`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28210`).

>* Allowed ``DjangoJSONEncoder`` to serialize
>  ``django.utils.deprecation.CallableBool`` (:ticket:`28230`).

>* Relaxed the validation added in Django 1.11 of the fields in the ``defaults``
>  argument of ``QuerySet.get_or_create()`` and ``update_or_create()`` to
>  reallow settable model properties (:ticket:`28222`).

>* Fixed ``MultipleObjectMixin.paginate_queryset()`` crash on Python 2 if the
>  ``InvalidPage`` message contains non-ASCII (:ticket:`28204`).

>* Prevented ``Subquery`` from adding an unnecessary ``CAST`` which resulted in
>  invalid SQL (:ticket:`28199`).

>* Corrected detection of GDAL 2.1 on Windows (:ticket:`28181`).

>* Made date-based generic views return a 404 rather than crash when given an
>  out of range date (:ticket:`28209`).

>* Fixed a regression where ``file_move_safe()`` crashed when moving files to a
>  CIFS mount (:ticket:`28170`).

>* Moved the ``ImageField`` file extension validation added in Django 1.11 from
>  the model field to the form field to reallow the use case of storing images
>  without an extension (:ticket:`28242`).


>===========================


>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.5+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  (This validator moved to the form field in :doc:`Django 1.11.2 &lt;1.11.2&gt;`.)

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>.. _liveservertestcase-port-zero-change:

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>If you need to bind ``LiveServerTestCase`` to a specific port, use the ``port``
>attribute added in Django 1.11.2.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>* The signature of private API ``Widget.build_attrs()`` changed from
>  ``extra_attrs=None, **kwargs`` to ``base_attrs, extra_attrs=None``.

>* File-like objects (e.g., :class:`~io.StringIO` and :class:`~io.BytesIO`)
>  uploaded to an :class:`~django.db.models.ImageField` using the test client
>  now require a ``name`` attribute with a value that passes the
>  :data:`~django.core.validators.validate_image_file_extension` validator.
>  See the note in :meth:`.Client.post`.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-06-01T19:15:04Z,CONTRIBUTOR,False,1,1,1,,JavaScript,f8eda51d51d669dacfaf49841cfa67244b3ef0a1,Update django from 1.10.7 to 1.11.2
244,https://api.github.com/repos/mozilla/distribution-viewer/pulls/247,247,Update requests to 2.17.3,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.17.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.17.3

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.2

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.1

>+++++++++++++++++++

>**Improvements**

>- Improved ``packages`` namespace identity support, for monkeypatching libraries.




>### 2.17.0

>+++++++++++++++++++

>**Improvements**

>- Removal of the 301 redirect cache. This improves thread-safety.




>### 2.16.5

>+++++++++++++++++++

>- Improvements to ``$ python -m requests.help``.



>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-29T22:34:55Z,CONTRIBUTOR,False,1,1,1,,JavaScript,12ff8cbf9d39c1507b224a0f41bd7873a7483e78,Update requests from 2.13.0 to 2.17.3
245,https://api.github.com/repos/mozilla/distribution-viewer/pulls/246,246,Update requests to 2.17.0,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.17.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.17.0

>+++++++++++++++++++

>**Improvements**

>- Removal of the 301 redirect cache. This improves thread-safety.




>### 2.16.5

>+++++++++++++++++++

>- Improvements to ``$ python -m requests.help``.



>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-29T19:49:57Z,CONTRIBUTOR,False,1,1,1,,JavaScript,734f9d1ef6b161438f18e11b7a6c9c3b43df803c,Update requests from 2.13.0 to 2.17.0
246,https://api.github.com/repos/mozilla/distribution-viewer/pulls/245,245,Update requests to 2.16.5,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.16.5**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.16.5

>+++++++++++++++++++

>- Improvements to ``$ python -m requests.help``.



>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-28T07:05:54Z,CONTRIBUTOR,False,1,1,1,,JavaScript,b3e112bd65e3d601dd7aafb0e21403f3aac88719,Update requests from 2.13.0 to 2.16.5
247,https://api.github.com/repos/mozilla/distribution-viewer/pulls/244,244,Update requests to 2.16.4,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.16.4**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.16.4

>+++++++++++++++++++

>- Introduction of the ``$ python -m requests.help`` command, for debugging with maintainers!



>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-28T00:05:53Z,CONTRIBUTOR,False,1,1,1,,JavaScript,d2657631244e5fe5b558114fd3048246016f866d,Update requests from 2.13.0 to 2.16.4
248,https://api.github.com/repos/mozilla/distribution-viewer/pulls/243,243,Update requests to 2.16.3,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.16.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.16.3

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.



>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-27T17:35:51Z,CONTRIBUTOR,False,1,1,1,,JavaScript,dc6a3e5ee85f1e18e6fb1d1b18c1f19e16334b10,Update requests from 2.13.0 to 2.16.3
249,https://api.github.com/repos/mozilla/distribution-viewer/pulls/242,242,Update requests to 2.16.2,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.16.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.16.2

>+++++++++++++++++++

>- Further restored the ``requests.packages`` namespace for compatibility reasons.

>No code modification (noted below) should be neccessary any longer.



>### 2.16.1

>+++++++++++++++++++

>- Restored the ``requests.packages`` namespace for compatibility reasons.
>- Bugfix for ``urllib3`` version parsing.

>**Note**: code that was written to import against the ``requests.packages``
>namespace previously will have to import code that rests at this module-level
>now.

>For example::

>    from requests.packages.urllib3.poolmanager import PoolManager

>Will need to be re-written to be::

>    from requests.packages import urllib3
>    urllib3.poolmanager.PoolManager

>Or, even better::

>    from urllib3.poolmanager import PoolManager



>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-27T16:20:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,ad6136f556827392216cbda414b2d66c76d1ad5e,Update requests from 2.13.0 to 2.16.2
250,https://api.github.com/repos/mozilla/distribution-viewer/pulls/241,241,Update requests to 2.16.0,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.16.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.16.0

>+++++++++++++++++++

>- Unvendor ALL the things!



>### 2.15.1

>+++++++++++++++++++

>- Everyone makes mistakes.



>### 2.15.0

>+++++++++++++++++++

>**Improvements**

>- Introduction of the ``Response.next`` property, for getting the next
>  ``PreparedResponse`` from a redirect chain (when ``allow_redirects=False``).
>- Internal refactoring of ``__version__`` module.

>**Bugfixes**

>- Restored once-optional parameter for ``requests.utils.get_environ_proxies()``.



>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeErrors`` are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-27T04:20:52Z,CONTRIBUTOR,False,1,1,1,,JavaScript,54322a223f19062659f49a64b3843d16ff67b49a,Update requests from 2.13.0 to 2.16.0
251,https://api.github.com/repos/mozilla/distribution-viewer/pulls/240,240,Update raven to 6.1.0,"
There's a new version of [raven](https://pypi.python.org/pypi/raven) available.
You are currently using **6.0.0**. I have updated it to **6.1.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/raven"">PyPI</a> | <a href=""https://pyup.io/changelogs/raven/"">Changelog</a> | <a href=""https://github.com/getsentry/raven-python"">Repo</a> 



### Changelog
> 
>### 6.1.0

>-------------

>* Support both string and class values for ``ignore_exceptions`` parameters.
>  Class values also support child exceptions.
>* Ensure consistent fingerprint for SoftTimeLimitExceeded exceptions
>* Add sample_rate configuration
>* fix registration of hooks for Django







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-25T21:50:50Z,CONTRIBUTOR,False,1,1,1,,JavaScript,df275dd5f7e0597b8a7a7a9cc450ce87b09e6ae3,Update raven from 6.0.0 to 6.1.0
252,https://api.github.com/repos/mozilla/distribution-viewer/pulls/239,239,Update djangorestframework to 3.6.3,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.2**. I have updated it to **3.6.3**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 



### Changelog
> 
>### 3.6.3


>**Date**: [12th May 2017][3.6.3-milestone]

>* Raise 404 if a URL lookup results in ValidationError. ([5126][gh5126])
>* Honor http_method_names on class based view, when generating API schemas. ([5085][gh5085])
>* Allow overridden `get_limit` in LimitOffsetPagination to return all records. ([4437][gh4437])
>* Fix partial update for the ListSerializer. ([4222][gh4222])
>* Render JSONField control correctly in browsable API. ([4999][gh4999], [5042][gh5042])
>* Raise validation errors for invalid datetime in given timezone. ([4987][gh4987])
>* Support restricting doc &amp; schema shortcuts to a subset of urls. ([4979][gh4979])
>* Resolve SchemaGenerator error with paginators that have no `page_size` attribute. ([5086][gh5086], [3692][gh3692])
>* Resolve HyperlinkedRelatedField exception on string with %20 instead of space. ([4748][gh4748], [5078][gh5078])
>* Customizable schema generator classes. ([5082][gh5082])
>* Update existing vary headers in response instead of overwriting them. ([5047][gh5047])
>* Support passing `.as_view()` to view instance. ([5053][gh5053])
>* Use correct exception handler when settings overridden on a view. ([5055][gh5055], [5054][gh5054])
>* Update Boolean field to support &#39;yes&#39; and &#39;no&#39; values. ([5038][gh5038])
>* Fix unique validator for ChoiceField. ([5004][gh5004], [5026][gh5026], [5028][gh5028])
>* JavaScript cleanups in API Docs. ([5001][gh5001])
>* Include URL path regexs in API schemas where valid. ([5014][gh5014])
>* Correctly set scheme in coreapi TokenAuthentication. ([5000][gh5000], [4994][gh4994])
>* HEAD requests on ViewSets should not return 405. ([4705][gh4705], [4973][gh4973], [4864][gh4864])
>* Support usage of &#39;source&#39; in `extra_kwargs`. ([4688][gh4688])
>* Fix invalid content type for schema.js ([4968][gh4968])
>* Fix DjangoFilterBackend inheritance issues. ([5089][gh5089], [5117][gh5117])







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-12T17:34:32Z,CONTRIBUTOR,False,1,1,1,,JavaScript,19c64c2bb78496d0ab0b252e20febf06d9dc71be,Update djangorestframework from 3.6.2 to 3.6.3
253,https://api.github.com/repos/mozilla/distribution-viewer/pulls/238,238,Update oauth2client to 4.1.0,"
There's a new version of [oauth2client](https://pypi.python.org/pypi/oauth2client) available.
You are currently using **4.0.0**. I have updated it to **4.1.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/oauth2client"">PyPI</a> | <a href=""https://pyup.io/changelogs/oauth2client/"">Changelog</a> | <a href=""http://github.com/google/oauth2client/"">Repo</a> 



### Changelog
> 
>### 4.1.0


>**Note**: oauth2client is now deprecated. No more features will be added to the
>libraries and the core team is turning down support. We recommend you use
>[google-auth](https://google-auth.readthedocs.io) and [oauthlib](http://oauthlib.readthedocs.io/).

>New features:
>* Allow customizing the GCE metadata service address via an env var. (704)
>* Store original encoded and signed identity JWT in OAuth2Credentials. (680)
>* Use jsonpickle in django contrib, if available. (676)

>Bug fixes:
>* Typo fixes. (668, 697)
>* Remove b64 padding from PKCE values, per RFC7636. (683)
>* Include LICENSE in Manifest.in. (694)
>* Fix tests and CI. (705, 712, 713)
>* Escape callback error code in flask_util. (710)







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-10T23:32:32Z,CONTRIBUTOR,False,1,1,1,,JavaScript,d0e97b0368645aad130bd82a0ac47ca383107222,Update oauth2client from 4.0.0 to 4.1.0
254,https://api.github.com/repos/mozilla/distribution-viewer/pulls/237,237,Update requests to 2.14.2,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.14.2**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.14.2

>+++++++++++++++++++

>**Bugfixes**

>- Changed a less-than to an equal-to and an or in the dependency markers to
>  widen compatibility with older setuptools releases.



>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeError``s are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-10T16:28:24Z,CONTRIBUTOR,False,1,1,1,,JavaScript,fa854af22ea331f63f9bbca1001802f1a6e36d70,Update requests from 2.13.0 to 2.14.2
255,https://api.github.com/repos/mozilla/distribution-viewer/pulls/236,236,Update requests to 2.14.1,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.14.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.14.1

>+++++++++++++++++++

>**Bugfixes**

>- Changed the dependency markers to widen compatibility with older pip
>  releases.



>### 2.14.0

>+++++++++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeError``s are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-09T21:28:27Z,CONTRIBUTOR,False,1,1,1,,JavaScript,c58e424aba01920ba41f04441faa4a29c5a7fce6,Update requests from 2.13.0 to 2.14.1
256,https://api.github.com/repos/mozilla/distribution-viewer/pulls/235,235,Update requests to 2.14.0,"
There's a new version of [requests](https://pypi.python.org/pypi/requests) available.
You are currently using **2.13.0**. I have updated it to **2.14.0**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/requests"">PyPI</a> | <a href=""https://pyup.io/changelogs/requests/"">Changelog</a> | <a href=""http://python-requests.org"">Homepage</a> 



### Changelog
> 
>### 2.14.0

>+++++++++++++

>**Improvements**

>- It is now possible to pass ``no_proxy`` as a key to the ``proxies``
>  dictionary to provide handling similar to the ``NO_PROXY`` environment
>  variable.
>- When users provide invalid paths to certificate bundle files or directories
>  Requests now raises ``IOError``, rather than failing at the time of the HTTPS
>  request with a fairly inscrutable certificate validation error.
>- The behavior of ``SessionRedirectMixin`` was slightly altered.
>  ``resolve_redirects`` will now detect a redirect by calling
>  ``get_redirect_target(response)`` instead of directly
>  querying ``Response.is_redirect`` and ``Response.headers[&#39;location&#39;]``.
>  Advanced users will be able to process malformed redirects more easily.
>- Changed the internal calculation of elapsed request time to have higher
>  resolution on Windows.
>- Added ``win_inet_pton`` as conditional dependency for the ``[socks]`` extra
>  on Windows with Python 2.7.
>- Changed the proxy bypass implementation on Windows: the proxy bypass
>  check doesn&#39;t use forward and reverse DNS requests anymore
>- URLs with schemes that begin with ``http`` but are not ``http`` or ``https``
>  no longer have their host parts forced to lowercase.

>**Bugfixes**

>- Much improved handling of non-ASCII ``Location`` header values in redirects.
>  Fewer ``UnicodeDecodeError``s are encountered on Python 2, and Python 3 now
>  correctly understands that Latin-1 is unlikely to be the correct encoding.
>- If an attempt to ``seek`` file to find out its length fails, we now
>  appropriately handle that by aborting our content-length calculations.
>- Restricted ``HTTPDigestAuth`` to only respond to auth challenges made on 4XX
>  responses, rather than to all auth challenges.
>- Fixed some code that was firing ``DeprecationWarning`` on Python 3.6.
>- The dismayed person emoticon (``/o\\``) no longer has a big head. I&#39;m sure
>  this is what you were all worrying about most.


>**Miscellaneous**

>- Updated bundled urllib3 to v1.21.1.
>- Updated bundled chardet to v3.0.2.
>- Updated bundled idna to v2.5.
>- Updated bundled certifi to 2017.4.17.







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-09T18:13:26Z,CONTRIBUTOR,False,1,1,1,,JavaScript,34a6a2f6ea47f4e659b2cb6a9ee57ed90e69e455,Update requests from 2.13.0 to 2.14.0
257,https://api.github.com/repos/mozilla/distribution-viewer/pulls/234,234,Update django to 1.11.1,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.7**. I have updated it to **1.11.1**



These links might come in handy:  <a href=""https://pypi.python.org/pypi/django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.11.1

>===========================

>*May 6, 2017*

>Django 1.11.1 adds a minor feature and fixes several bugs in 1.11.

>Allowed disabling server-side cursors on PostgreSQL
>===================================================

>The change in Django 1.11 to make :meth:`.QuerySet.iterator()` use server-side
>cursors on PostgreSQL prevents running Django with `pgBouncer` in transaction
>pooling mode. To reallow that, use the :setting:`DISABLE_SERVER_SIDE_CURSORS
>&lt;DATABASE-DISABLE_SERVER_SIDE_CURSORS&gt;` setting in :setting:`DATABASES`.

>See :ref:`transaction-pooling-server-side-cursors` for more discussion.

>Bugfixes
>========

>* Made migrations respect ``Index``’s ``name`` argument. If you created a
>  named index with Django 1.11, ``makemigrations`` will create a migration to
>  recreate the index with the correct name (:ticket:`28051`).

>* Fixed a crash when using a ``__icontains`` lookup on a ``ArrayField``
>  (:ticket:`28038`).

>* Fixed a crash when using a two-tuple in ``EmailMessage``’s ``attachments``
>  argument (:ticket:`28042`).

>* Fixed ``QuerySet.filter()`` crash when it references the name of a
>  ``OneToOneField`` primary key (:ticket:`28047`).

>* Fixed empty POST data table appearing instead of &quot;No POST data&quot; in HTML debug
>  page (:ticket:`28079`).

>* Restored ``BoundField``\s without any ``choices`` evaluating to ``True``
>  (:ticket:`28058`).

>* Prevented ``SessionBase.cycle_key()`` from losing session data if
>  ``_session_cache`` isn&#39;t populated (:ticket:`28066`).

>* Fixed layout of ``ReadOnlyPasswordHashWidget`` (used in the admin&#39;s user
>  change page) (:ticket:`28097`).

>* Allowed prefetch calls on managers with custom ``ModelIterable`` subclasses
>  (:ticket:`28096`).

>* Fixed change password link in the ``contrib.auth`` admin for ``el``,
>  ``es_MX``, and ``pt`` translations (:ticket:`28100`).

>* Restored the output of the ``class`` attribute in the ``&lt;ul&gt;`` of widgets
>  that use the ``multiple_input.html`` template. This fixes
>  ``ModelAdmin.radio_fields`` with ``admin.HORIZONTAL`` (:ticket:`28059`).

>* Fixed crash in ``BaseGeometryWidget.subwidgets()`` (:ticket:`28039`).

>* Fixed exception reraising in ORM query execution when ``cursor.execute()``
>  fails and the subsequent ``cursor.close()`` also fails (:ticket:`28091`).

>* Fixed a regression where ``CheckboxSelectMultiple``, ``NullBooleanSelect``,
>  ``RadioSelect``, ``SelectMultiple``, and ``Select`` localized option values
>  (:ticket:`28075`).

>* Corrected the stack level of unordered queryset pagination warnings
>  (:ticket:`28109`).

>* Fixed a regression causing incorrect queries for ``__in`` subquery lookups
>  when models use ``ForeignKey.to_field`` (:ticket:`28101`).

>* Fixed crash when overriding the template of
>  ``django.views.static.directory_index()`` (:ticket:`28122`).

>* Fixed a regression in formset ``min_num`` validation with unchanged forms
>  that have initial data (:ticket:`28130`).

>* Prepared for ``cx_Oracle`` 6.0 support (:ticket:`28138`).

>* Updated the ``contrib.postgres`` ``SplitArrayWidget`` to use template-based
>  widget rendering (:ticket:`28040`).

>* Fixed crash in ``BaseGeometryWidget.get_context()`` when overriding existing
>  ``attrs`` (:ticket:`28105`).

>* Prevented ``AddIndex`` and ``RemoveIndex`` from mutating model state
>  (:ticket:`28043`).

>* Prevented migrations from dropping database indexes from ``Meta.indexes``
>  when changing ``Field.db_index`` to ``False`` (:ticket:`28052`).

>* Fixed a regression in choice ordering in form fields with grouped and
>  non-grouped options (:ticket:`28157`).

>* Fixed crash in  ``BaseInlineFormSet._construct_form()`` when using
>  ``save_as_new`` (:ticket:`28159`).

>* Fixed a regression where ``Model._state.db`` wasn&#39;t set correctly on
>  multi-table inheritance parent models after saving a child model
>  (:ticket:`28166`).

>* Corrected the return type of ``ArrayField(CITextField())`` values retrieved
>  from the database (:ticket:`28161`).

>* Fixed ``QuerySet.prefetch_related()`` crash when fetching relations in nested
>  ``Prefetch`` objects (:ticket:`27554`).

>* Prevented hiding GDAL errors if it&#39;s not installed when using ``contrib.gis``
>  (:ticket:`28160`). (It&#39;s a required dependency as of Django 1.11.)

>* Fixed a regression causing ``__in`` lookups on a foreign key to fail when
>  using the foreign key&#39;s parent model as the lookup value (:ticket:`28175`).


>=========================


>### 1.11

>=========================

>*April 4, 2017*

>Welcome to Django 1.11!

>These release notes cover the :ref:`new features &lt;whats-new-1.11&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.11&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.10 or older versions. We&#39;ve
>:ref:`begun the deprecation process for some features
>&lt;deprecated-features-1.11&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Django 1.11 is designated as a :term:`long-term support release`. It will
>receive security updates for at least three years after its release. Support
>for the previous LTS, Django 1.8, will end in April 2018.

>Python compatibility
>====================

>Django 1.11 requires Python 2.7, 3.4, 3.5, or 3.6. Django 1.11 is the first
>release to support Python 3.6. We **highly recommend** and only officially
>support the latest release of each series.

>The Django 1.11.x series is the last to support Python 2. The next major
>release, Django 2.0, will only support Python 3.5+.

>Deprecating warnings are no longer loud by default
>==================================================

>Unlike older versions of Django, Django&#39;s own deprecation warnings are no
>longer displayed by default. This is consistent with Python&#39;s default behavior.

>This change allows third-party apps to support both Django 1.11 LTS and Django
>1.8 LTS without having to add code to avoid deprecation warnings.

>Following the release of Django 2.0, we suggest that third-party app authors
>drop support for all versions of Django prior to 1.11. At that time, you should
>be able run your package&#39;s tests using ``python -Wd`` so that deprecation
>warnings do appear. After making the deprecation warning fixes, your app should
>be compatible with Django 2.0.

>.. _whats-new-1.11:

>What&#39;s new in Django 1.11
>=========================

>Class-based model indexes
>-------------------------

>The new :mod:`django.db.models.indexes` module contains classes which ease
>creating database indexes. Indexes are added to models using the
>:attr:`Meta.indexes &lt;django.db.models.Options.indexes&gt;` option.

>The :class:`~django.db.models.Index` class creates a b-tree index, as if you
>used :attr:`~django.db.models.Field.db_index` on the model field or
>:attr:`~django.db.models.Options.index_together` on the model ``Meta`` class.
>It can be subclassed to support different index types, such as
>:class:`~django.contrib.postgres.indexes.GinIndex`. It also allows defining the
>order (ASC/DESC) for the columns of the index.

>Template-based widget rendering
>-------------------------------

>To ease customizing widgets, form widget rendering is now done using the
>template system rather than in Python. See :doc:`/ref/forms/renderers`.

>You may need to adjust any custom widgets that you&#39;ve written for a few
>:ref:`backwards incompatible changes &lt;template-widget-incompatibilities-1-11&gt;`.

>``Subquery`` expressions
>------------------------

>The new :class:`~django.db.models.Subquery` and
>:class:`~django.db.models.Exists` database expressions allow creating
>explicit subqueries. Subqueries may refer to fields from the outer queryset
>using the :class:`~django.db.models.OuterRef` class.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* :attr:`.ModelAdmin.date_hierarchy` can now reference fields across relations.

>* The new :meth:`ModelAdmin.get_exclude()
>  &lt;django.contrib.admin.ModelAdmin.get_exclude&gt;` hook allows specifying the
>  exclude fields based on the request or model instance.

>* The ``popup_response.html`` template can now be overridden per app, per
>  model, or by setting the :attr:`.ModelAdmin.popup_response_template`
>  attribute.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The default iteration count for the PBKDF2 password hasher is increased by
>  20%.

>* The :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` class-based views supersede the
>  deprecated ``login()`` and ``logout()`` function-based views.

>* The :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView` class-based
>  views supersede the deprecated ``password_change()``,
>  ``password_change_done()``, ``password_reset()``, ``password_reset_done()``,
>  ``password_reset_confirm()``, and ``password_reset_complete()`` function-based
>  views.

>* The new ``post_reset_login`` attribute for
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` allows
>  automatically logging in a user after a successful password reset.
>  If you have multiple ``AUTHENTICATION_BACKENDS`` configured, use the
>  ``post_reset_login_backend`` attribute to choose which one to use.

>* To avoid the possibility of leaking a password reset token via the HTTP
>  Referer header (for example, if the reset page includes a reference to CSS or
>  JavaScript hosted on another domain), the
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView` (but not the
>  deprecated ``password_reset_confirm()`` function-based view) stores the token
>  in a session and redirects to itself to present the password change form to
>  the user without the token in the URL.

>* :func:`~django.contrib.auth.update_session_auth_hash` now rotates the session
>  key to allow a password change to invalidate stolen session cookies.

>* The new ``success_url_allowed_hosts`` attribute for
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView` allows specifying a set of
>  hosts that are safe for redirecting after login and logout.

>* Added password validators ``help_text`` to
>  :class:`~django.contrib.auth.forms.UserCreationForm`.

>* The ``HttpRequest`` is now passed to :func:`~django.contrib.auth.authenticate`
>  which in turn passes it to the authentication backend if it accepts a
>  ``request`` argument.

>* The :func:`~django.contrib.auth.signals.user_login_failed` signal now
>  receives a ``request`` argument.

>* :class:`~django.contrib.auth.forms.PasswordResetForm` supports custom user
>  models that use an email field named something other than ``&#39;email&#39;``.
>  Set :attr:`CustomUser.EMAIL_FIELD
>  &lt;django.contrib.auth.models.CustomUser.EMAIL_FIELD&gt;` to the name of the field.

>* :func:`~django.contrib.auth.get_user_model` can now be called at import time,
>  even in modules that define models.

>:mod:`django.contrib.contenttypes`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* When stale content types are detected in the
>  :djadmin:`remove_stale_contenttypes` command, there&#39;s now a list of related
>  objects such as ``auth.Permission``\s that will also be deleted. Previously,
>  only the content types were listed (and this prompt was after ``migrate``
>  rather than in a separate command).

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new :meth:`.GEOSGeometry.from_gml` and :meth:`.OGRGeometry.from_gml`
>  methods allow creating geometries from GML.

>* Added support for the :lookup:`dwithin` lookup on SpatiaLite.

>* The :class:`~django.contrib.gis.db.models.functions.Area` function,
>  :class:`~django.contrib.gis.db.models.functions.Distance` function, and
>  distance lookups now work with geodetic coordinates on SpatiaLite.

>* The OpenLayers-based form widgets now use ``OpenLayers.js`` from
>  ``https://cdnjs.cloudflare.com`` which is more suitable for production use
>  than the the old ``http://openlayers.org`` source. They are also updated to
>  use OpenLayers 3.

>* PostGIS migrations can now change field dimensions.

>* Added the ability to pass the `size`, `shape`, and `offset` parameter when
>  creating :class:`~django.contrib.gis.gdal.GDALRaster` objects.

>* Added SpatiaLite support for the
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function,
>  :class:`~django.contrib.gis.db.models.functions.MakeValid` function, and
>  :lookup:`isvalid` lookup.

>* Added Oracle support for the
>  :class:`~django.contrib.gis.db.models.functions.AsGML` function,
>  :class:`~django.contrib.gis.db.models.functions.BoundingCircle` function,
>  :class:`~django.contrib.gis.db.models.functions.IsValid` function, and
>  :lookup:`isvalid` lookup.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The new ``distinct`` argument for
>  :class:`~django.contrib.postgres.aggregates.StringAgg` determines if
>  concatenated values will be distinct.

>* The new :class:`~django.contrib.postgres.indexes.GinIndex` and
>  :class:`~django.contrib.postgres.indexes.BrinIndex` classes allow
>  creating ``GIN`` and ``BRIN`` indexes in the database.

>* :class:`~django.contrib.postgres.fields.JSONField` accepts a new ``encoder``
>  parameter to specify a custom class to encode data types not supported by the
>  standard encoder.

>* The new :class:`~django.contrib.postgres.fields.CIText` mixin and
>  :class:`~django.contrib.postgres.operations.CITextExtension` migration
>  operation allow using PostgreSQL&#39;s ``citext`` extension for case-insensitive
>  lookups. Three fields are provided: :class:`.CICharField`,
>  :class:`.CIEmailField`, and :class:`.CITextField`.

>* The new :class:`~django.contrib.postgres.aggregates.JSONBAgg` allows
>  aggregating values as a JSON array.

>* The :class:`~django.contrib.postgres.fields.HStoreField` (model field) and
>  :class:`~django.contrib.postgres.forms.HStoreField` (form field) allow
>  storing null values.

>Cache
>~~~~~

>* Memcached backends now pass the contents of :setting:`OPTIONS &lt;CACHES-OPTIONS&gt;`
>  as keyword arguments to the client constructors, allowing for more advanced
>  control of client behavior. See the :ref:`cache arguments &lt;cache_arguments&gt;`
>  documentation for examples.

>* Memcached backends now allow defining multiple servers as a comma-delimited
>  string in :setting:`LOCATION &lt;CACHES-LOCATION&gt;`, for convenience with
>  third-party services that use such strings in environment variables.

>CSRF
>~~~~

>* Added the :setting:`CSRF_USE_SESSIONS` setting to allow storing the CSRF
>  token in the user&#39;s session rather than in a cookie.

>Database backends
>~~~~~~~~~~~~~~~~~

>* Added the ``skip_locked`` argument to :meth:`.QuerySet.select_for_update()`
>  on PostgreSQL 9.5+ and Oracle to execute queries with
>  ``FOR UPDATE SKIP LOCKED``.

>* Added the :setting:`TEST[&#39;TEMPLATE&#39;] &lt;TEST_TEMPLATE&gt;` setting to let
>  PostgreSQL users specify a template for creating the test database.

>* :meth:`.QuerySet.iterator()` now uses :ref:`server-side cursors
>  &lt;psycopg2:server-side-cursors&gt;` on PostgreSQL. This feature transfers some of
>  the worker memory load (used to hold query results) to the database and might
>  increase database memory usage.

>* Added MySQL support for the ``&#39;isolation_level&#39;`` option in
>  :setting:`OPTIONS` to allow specifying the :ref:`transaction isolation level
>  &lt;mysql-isolation-level&gt;`. To avoid possible data loss, it&#39;s recommended to
>  switch from MySQL&#39;s default level, repeatable read, to read committed.

>* Added support for ``cx_Oracle`` 5.3.

>Email
>~~~~~

>* Added the :setting:`EMAIL_USE_LOCALTIME` setting to allow sending SMTP date
>  headers in the local time zone rather than in UTC.

>* ``EmailMessage.attach()`` and ``attach_file()`` now fall back to MIME type
>  ``application/octet-stream`` when binary content that can&#39;t be decoded as
>  UTF-8 is specified for a ``text/*`` attachment.

>File Storage
>~~~~~~~~~~~~

>* To make it wrappable by :class:`io.TextIOWrapper`,
>  :class:`~django.core.files.File` now has the ``readable()``, ``writable()``,
>  and ``seekable()`` methods.

>Forms
>~~~~~

>* The new :attr:`CharField.empty_value &lt;django.forms.CharField.empty_value&gt;`
>  attribute allows specifying the Python value to use to represent &quot;empty&quot;.

>* The new :meth:`Form.get_initial_for_field()
>  &lt;django.forms.Form.get_initial_for_field&gt;` method returns initial data for a
>  form field.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* Number formatting and the :setting:`NUMBER_GROUPING` setting support
>  non-uniform digit grouping.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* The new :option:`loaddata --exclude` option allows excluding models and apps
>  while loading data from fixtures.

>* The new :option:`diffsettings --default` option allows specifying a settings
>  module other than Django&#39;s default settings to compare against.

>* ``app_label``\s arguments now limit the :option:`showmigrations --plan`
>  output.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``uuid.UUID`` objects.

>Models
>~~~~~~

>* Added support for callable values in the ``defaults`` argument of
>  :meth:`QuerySet.update_or_create()
>  &lt;django.db.models.query.QuerySet.update_or_create&gt;` and
>  :meth:`~django.db.models.query.QuerySet.get_or_create`.

>* :class:`~django.db.models.ImageField` now has a default
>  :data:`~django.core.validators.validate_image_file_extension` validator.

>* Added support for time truncation to
>  :class:`~django.db.models.functions.datetime.Trunc` functions.

>* Added the :class:`~django.db.models.functions.datetime.ExtractWeek` function
>  to extract the week from :class:`~django.db.models.DateField` and
>  :class:`~django.db.models.DateTimeField` and exposed it through the
>  :lookup:`week` lookup.

>* Added the :class:`~django.db.models.functions.datetime.TruncTime` function
>  to truncate :class:`~django.db.models.DateTimeField` to its time component
>  and exposed it through the :lookup:`time` lookup.

>* Added support for expressions in :meth:`.QuerySet.values` and
>  :meth:`~.QuerySet.values_list`.

>* Added support for query expressions on lookups that take multiple arguments,
>  such as ``range``.

>* You can now use the ``unique=True`` option with
>  :class:`~django.db.models.FileField`.

>* Added the ``nulls_first`` and ``nulls_last`` parameters to
>  :class:`Expression.asc() &lt;django.db.models.Expression.asc&gt;` and
>  :meth:`~django.db.models.Expression.desc` to control
>  the ordering of null values.

>* The new ``F`` expression ``bitleftshift()`` and ``bitrightshift()`` methods
>  allow :ref:`bitwise shift operations &lt;using-f-expressions-in-filters&gt;`.

>* Added :meth:`.QuerySet.union`, :meth:`~.QuerySet.intersection`, and
>  :meth:`~.QuerySet.difference`.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added :meth:`QueryDict.fromkeys() &lt;django.http.QueryDict.fromkeys&gt;`.

>* :class:`~django.middleware.common.CommonMiddleware` now sets the
>  ``Content-Length`` response header for non-streaming responses.

>* Added the :setting:`SECURE_HSTS_PRELOAD` setting to allow appending the
>  ``preload`` directive to the ``Strict-Transport-Security`` header.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` now adds the
>  ``ETag`` header to responses.

>Serialization
>~~~~~~~~~~~~~

>* The new ``django.core.serializers.base.Serializer.stream_class`` attribute
>  allows subclasses to customize the default stream.

>* The encoder used by the :ref:`JSON serializer &lt;serialization-formats-json&gt;`
>  can now be customized by passing a ``cls`` keyword argument to the
>  ``serializers.serialize()`` function.

>* :class:`~django.core.serializers.json.DjangoJSONEncoder` now serializes
>  :class:`~datetime.timedelta` objects (used by
>  :class:`~django.db.models.DurationField`).

>Templates
>~~~~~~~~~

>* :meth:`~django.utils.safestring.mark_safe` can now be used as a decorator.

>* The :class:`~django.template.backends.jinja2.Jinja2` template backend now
>  supports context processors by setting the ``&#39;context_processors&#39;`` option in
>  :setting:`OPTIONS &lt;TEMPLATES-OPTIONS&gt;`.

>* The :ttag:`regroup` tag now returns ``namedtuple``\s instead of dictionaries
>  so you can unpack the group object directly in a loop, e.g.
>  ``{% for grouper, list in regrouped %}``.

>* Added a :ttag:`resetcycle` template tag to allow resetting the sequence of
>  the :ttag:`cycle` template tag.

>* You can now specify specific directories for a particular
>  :class:`filesystem.Loader &lt;django.template.loaders.filesystem.Loader&gt;`.

>Tests
>~~~~~

>* Added :meth:`.DiscoverRunner.get_test_runner_kwargs` to allow customizing the
>  keyword arguments passed to the test runner.

>* Added the :option:`test --debug-mode` option to help troubleshoot test
>  failures by setting the :setting:`DEBUG` setting to ``True``.

>* The new :func:`django.test.utils.setup_databases` (moved from
>  ``django.test.runner``) and :func:`~django.test.utils.teardown_databases`
>  functions make it easier to build custom test runners.

>* Added support for :meth:`python:unittest.TestCase.subTest`’s when using the
>  :option:`test --parallel` option.

>* ``DiscoverRunner`` now runs the system checks at the start of a test run.
>  Override the :meth:`.DiscoverRunner.run_checks` method if you want to disable
>  that.

>Validators
>~~~~~~~~~~

>* Added :class:`~django.core.validators.FileExtensionValidator` to validate
>  file extensions and
>  :data:`~django.core.validators.validate_image_file_extension` to validate
>  image files.

>.. _backwards-incompatible-1.11:

>Backwards incompatible changes in 1.11
>======================================

>:mod:`django.contrib.gis`
>-------------------------

>* To simplify the codebase and because it&#39;s easier to install than when
>  ``contrib.gis`` was first released, :ref:`gdalbuild` is now a required
>  dependency for GeoDjango. In older versions, it&#39;s only required for SQLite.

>* ``contrib.gis.maps`` is removed as it interfaces with a retired version of
>  the Google Maps API and seems to be unmaintained. If you&#39;re using it, `let
>  us know &lt;https://code.djangoproject.com/ticket/14284&gt;`_.

>* The ``GEOSGeometry`` equality operator now also compares SRID.

>* The OpenLayers-based form widgets now use OpenLayers 3, and the
>  ``gis/openlayers.html`` and ``gis/openlayers-osm.html`` templates have been
>  updated. Check your project if you subclass these widgets or extend the
>  templates. Also, the new widgets work a bit differently than the old ones.
>  Instead of using a toolbar in the widget, you click to draw, click and drag
>  to move the map, and click and drag a point/vertex/corner to move it.

>* Support for SpatiaLite &lt; 4.0 is dropped.

>* Support for GDAL 1.7 and 1.8 is dropped.

>* The widgets in ``contrib.gis.forms.widgets`` and the admin&#39;s
>  ``OpenLayersWidget`` use the :doc:`form rendering API &lt;/ref/forms/renderers&gt;`
>  rather than ``loader.render_to_string()``. If you&#39;re using a custom widget
>  template, you&#39;ll need to be sure your form renderer can locate it. For
>  example, you could use the :class:`~django.forms.renderers.TemplatesSetting`
>  renderer.

>:mod:`django.contrib.staticfiles`
>---------------------------------

>* ``collectstatic`` may now fail during post-processing when using a hashed
>  static files storage if a reference loop exists (e.g. ``&#39;foo.css&#39;``
>  references ``&#39;bar.css&#39;`` which itself references ``&#39;foo.css&#39;``) or if the
>  chain of files referencing other files is too deep to resolve in several
>  passes. In the latter case, increase the number of passes using
>  :attr:`.ManifestStaticFilesStorage.max_post_process_passes`.

>* When using ``ManifestStaticFilesStorage``, static files not found in the
>  manifest at runtime now raise a ``ValueError`` instead of returning an
>  unchanged path. You can revert to the old behavior by setting
>  :attr:`.ManifestStaticFilesStorage.manifest_strict` to ``False``.

>Database backend API
>--------------------

>* The ``DatabaseOperations.time_trunc_sql()`` method is added to support
>  ``TimeField`` truncation. It accepts a ``lookup_type`` and ``field_name``
>  arguments and returns the appropriate SQL to truncate the given time field
>  ``field_name`` to a time object with only the given specificity. The
>  ``lookup_type`` argument can be either ``&#39;hour&#39;``, ``&#39;minute&#39;``, or
>  ``&#39;second&#39;``.

>* The ``DatabaseOperations.datetime_cast_time_sql()`` method is added to
>  support the :lookup:`time` lookup. It accepts a ``field_name`` and ``tzname``
>  arguments and returns the SQL necessary to cast a datetime value to time value.

>* To enable ``FOR UPDATE SKIP LOCKED`` support, set
>  ``DatabaseFeatures.has_select_for_update_skip_locked = True``.

>* The new ``DatabaseFeatures.supports_index_column_ordering`` attribute
>  specifies if a database allows defining ordering for columns in indexes. The
>  default value is ``True`` and the ``DatabaseIntrospection.get_constraints()``
>  method should include an ``&#39;orders&#39;`` key in each of the returned
>  dictionaries with a list of ``&#39;ASC&#39;`` and/or ``&#39;DESC&#39;`` values corresponding
>  to the the ordering of each column in the index.

>* :djadmin:`inspectdb` no longer calls ``DatabaseIntrospection.get_indexes()``
>  which is deprecated. Custom database backends should ensure all types of
>  indexes are returned by ``DatabaseIntrospection.get_constraints()``.

>* Renamed the ``ignores_quoted_identifier_case`` feature to
>  ``ignores_table_name_case`` to more accurately reflect how it is used.

>* The ``name`` keyword argument is added to the
>  ``DatabaseWrapper.create_cursor(self, name=None)`` method to allow usage of
>  server-side cursors on backends that support it.

>Dropped support for PostgreSQL 9.2 and PostGIS 2.0
>--------------------------------------------------

>Upstream support for PostgreSQL 9.2 ends in September 2017. As a consequence,
>Django 1.11 sets PostgreSQL 9.3 as the minimum version it officially supports.

>Support for PostGIS 2.0 is also removed as PostgreSQL 9.2 is the last version
>to support it.

>Also, the minimum supported version of psycopg2 is increased from 2.4.5 to
>2.5.4.

>``LiveServerTestCase`` binds to port zero
>-----------------------------------------

>Rather than taking a port range and iterating to find a free port,
>``LiveServerTestCase`` binds to port zero and relies on the operating system
>to assign a free port. The ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` environment
>variable is no longer used, and as it&#39;s also no longer used, the
>``manage.py test --liveserver`` option is removed.

>Protection against insecure redirects in :mod:`django.contrib.auth` and ``i18n`` views
>--------------------------------------------------------------------------------------

>``LoginView``, ``LogoutView`` (and the deprecated function-based equivalents),
>and :func:`~django.views.i18n.set_language` protect users from being redirected
>to non-HTTPS ``next`` URLs when the app is running over HTTPS.

>``QuerySet.get_or_create()`` and ``update_or_create()`` validate arguments
>--------------------------------------------------------------------------

>To prevent typos from passing silently,
>:meth:`~django.db.models.query.QuerySet.get_or_create` and
>:meth:`~django.db.models.query.QuerySet.update_or_create` check that their
>arguments are model fields. This should be backwards-incompatible only in the
>fact that it might expose a bug in your project.

>``pytz`` is a required dependency and support for ``settings.TIME_ZONE = None`` is removed
>------------------------------------------------------------------------------------------

>To simplify Django&#39;s timezone handling, ``pytz`` is now a required dependency.
>It&#39;s automatically installed along with Django.

>Support for ``settings.TIME_ZONE = None`` is removed as the behavior isn&#39;t
>commonly used and is questionably useful. If you want to automatically detect
>the timezone based on the system timezone, you can use `tzlocal
>&lt;https://pypi.python.org/pypi/tzlocal&gt;`_::

>    from tzlocal import get_localzone

>    TIME_ZONE = get_localzone().zone

>This works similar to ``settings.TIME_ZONE = None`` except that it also sets
>``os.environ[&#39;TZ&#39;]``. `Let us know
>&lt;https://groups.google.com/d/topic/django-developers/OAV3FChfuPM/discussion&gt;`__
>if there&#39;s a use case where you find you can&#39;t adapt your code to set a
>``TIME_ZONE``.

>HTML changes in admin templates
>-------------------------------

>``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag to allow including lists
>inside help text.

>Read-only fields are wrapped in ``&lt;div class=&quot;readonly&quot;&gt;...&lt;/div&gt;`` instead of
>``&lt;p&gt;...&lt;/p&gt;`` to allow any kind of HTML as the field&#39;s content.

>.. _template-widget-incompatibilities-1-11:

>Changes due to the introduction of template-based widget rendering
>------------------------------------------------------------------

>Some undocumented classes in ``django.forms.widgets`` are removed:

>* ``SubWidget``
>* ``RendererMixin``, ``ChoiceFieldRenderer``, ``RadioFieldRenderer``,
>  ``CheckboxFieldRenderer``
>* ``ChoiceInput``, ``RadioChoiceInput``, ``CheckboxChoiceInput``

>The ``Widget.format_output()`` method is removed. Use a custom widget template
>instead.

>Some widget values, such as ``&lt;select&gt;`` options, are now localized if
>``settings.USE_L10N=True``. You could revert to the old behavior with custom
>widget templates that uses the :ttag:`localize` template tag to turn off
>localization.

>``django.template.backends.django.Template.render()`` prohibits non-dict context
>--------------------------------------------------------------------------------

>For compatibility with multiple template engines,
>``django.template.backends.django.Template.render()`` (returned from high-level
>template loader APIs such as ``loader.get_template()``) must receive a
>dictionary of context rather than ``Context`` or ``RequestContext``. If you
>were passing either of the two classes, pass a dictionary instead -- doing so
>is backwards-compatible with older versions of Django.

>Model state changes in migration operations
>-------------------------------------------

>To improve the speed of applying migrations, rendering of related models is
>delayed until an operation that needs them (e.g. ``RunPython``). If you have a
>custom operation that works with model classes or model instances from the
>``from_state`` argument in ``database_forwards()`` or ``database_backwards()``,
>you must render model states using the ``clear_delayed_apps_cache()`` method as
>described in :ref:`writing your own migration operation
>&lt;writing-your-own-migration-operation&gt;`.

>Miscellaneous
>-------------

>* If no items in the feed have a ``pubdate`` or ``updateddate`` attribute,
>  :meth:`SyndicationFeed.latest_post_date()
>  &lt;django.utils.feedgenerator.SyndicationFeed.latest_post_date&gt;` now returns
>  the current UTC date/time, instead of a datetime without any timezone
>  information.

>* CSRF failures are logged to the ``django.security.csrf`` logger instead of
>  ``django.request``.

>* :setting:`ALLOWED_HOSTS` validation is no longer disabled when running tests.
>  If your application includes tests with custom host names, you must include
>  those host names in :setting:`ALLOWED_HOSTS`. See
>  :ref:`topics-testing-advanced-multiple-hosts`.

>* Using a foreign key&#39;s id (e.g. ``&#39;field_id&#39;``) in ``ModelAdmin.list_display``
>  displays the related object&#39;s ID. Remove the ``_id`` suffix if you want the
>  old behavior of the string representation of the object.

>* In model forms, :class:`~django.db.models.CharField` with ``null=True`` now
>  saves ``NULL`` for blank values instead of empty strings.

>* On Oracle, :meth:`Model.validate_unique()
>  &lt;django.db.models.Model.validate_unique&gt;` no longer checks empty strings for
>  uniqueness as the database interprets the value as ``NULL``.

>* If you subclass :class:`.AbstractUser` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.BaseUserManager.normalize_email` is called in a
>  new :meth:`.AbstractUser.clean` method so that normalization is applied in
>  cases like model form validation.

>* ``EmailField`` and ``URLField`` no longer accept the ``strip`` keyword
>  argument. Remove it because it doesn&#39;t have an effect in older versions of
>  Django as these fields always strip whitespace.

>* The ``checked`` and ``selected`` attribute rendered by form widgets now uses
>  HTML5 boolean syntax rather than XHTML&#39;s ``checked=&#39;checked&#39;`` and
>  ``selected=&#39;selected&#39;``.

>* :meth:`RelatedManager.add()
>  &lt;django.db.models.fields.related.RelatedManager.add&gt;`,
>  :meth:`~django.db.models.fields.related.RelatedManager.remove`,
>  :meth:`~django.db.models.fields.related.RelatedManager.clear`, and
>  :meth:`~django.db.models.fields.related.RelatedManager.set` now
>  clear the ``prefetch_related()`` cache.

>* To prevent possible loss of saved settings,
>  :func:`~django.test.utils.setup_test_environment` now raises an exception if
>  called a second time before calling
>  :func:`~django.test.utils.teardown_test_environment`.

>* The undocumented ``DateTimeAwareJSONEncoder`` alias for
>  :class:`~django.core.serializers.json.DjangoJSONEncoder` (renamed in Django
>  1.0) is removed.

>* The :class:`cached template loader &lt;django.template.loaders.cached.Loader&gt;`
>  is now enabled if :setting:`DEBUG` is ``False`` and
>  :setting:`OPTIONS[&#39;loaders&#39;] &lt;TEMPLATES-OPTIONS&gt;` isn&#39;t specified. This could
>  be backwards-incompatible if you have some :ref:`template tags that aren&#39;t
>  thread safe &lt;template_tag_thread_safety&gt;`.

>* The prompt for stale content type deletion no longer occurs after running the
>  ``migrate`` command. Use the new :djadmin:`remove_stale_contenttypes` command
>  instead.

>* The admin&#39;s widget for ``IntegerField`` uses ``type=&quot;number&quot;`` rather than
>  ``type=&quot;text&quot;``.

>* Conditional HTTP headers are now parsed and compared according to the
>  :rfc:`7232` Conditional Requests specification rather than the older
>  :rfc:`2616`.

>* :func:`~django.utils.cache.patch_response_headers` no longer adds a
>  ``Last-Modified`` header. According to the :rfc:`7234section-4.2.2`, this
>  header is useless alongside other caching headers that provide an explicit
>  expiration time, e.g. ``Expires`` or ``Cache-Control``.
>  :class:`~django.middleware.cache.UpdateCacheMiddleware` and
>  :func:`~django.utils.cache.add_never_cache_headers` call
>  ``patch_response_headers()`` and therefore are also affected by this change.

>* In the admin templates, ``&lt;p class=&quot;help&quot;&gt;`` is replaced with a ``&lt;div&gt;`` tag
>  to allow including lists inside help text.

>* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer sets the
>  ``Date`` header as Web servers set that header. It also no longer sets the
>  ``Content-Length`` header as this is now done by
>  :class:`~django.middleware.common.CommonMiddleware`.

>* :meth:`~django.apps.AppConfig.get_model` and
>  :meth:`~django.apps.AppConfig.get_models` now raise
>  :exc:`~django.core.exceptions.AppRegistryNotReady` if they&#39;re called before
>  models of all applications have been loaded. Previously they only required
>  the target application&#39;s models to be loaded and thus could return models
>  without all their relations set up. If you need the old behavior of
>  ``get_model()``, set the ``require_ready`` argument to ``False``.

>* The unused ``BaseCommand.can_import_settings`` attribute is removed.

>* The undocumented ``django.utils.functional.lazy_property`` is removed.

>* For consistency with non-multipart requests, ``MultiPartParser.parse()`` now
>  leaves ``request.POST`` immutable. If you&#39;re modifying that ``QueryDict``,
>  you must now first copy it, e.g. ``request.POST.copy()``.

>* Support for ``cx_Oracle`` &lt; 5.2 is removed.

>* Support for IPython &lt; 1.0 is removed from the ``shell`` command.

>.. _deprecated-features-1.11:

>Features deprecated in 1.11
>===========================

>``models.permalink()`` decorator
>--------------------------------

>Use :func:`django.urls.reverse` instead. For example::

>    from django.db import models

>    class MyModel(models.Model):
>        ...

>        models.permalink
>        def url(self):
>            return (&#39;guitarist_detail&#39;, [self.slug])

>becomes::

>    from django.db import models
>    from django.urls import reverse

>    class MyModel(models.Model):
>        ...

>        def url(self):
>            return reverse(&#39;guitarist_detail&#39;, args=[self.slug])

>Miscellaneous
>-------------

>* ``contrib.auth``’s ``login()`` and ``logout()`` function-based views are
>  deprecated in favor of new class-based views
>  :class:`~django.contrib.auth.views.LoginView` and
>  :class:`~django.contrib.auth.views.LogoutView`.

>* The unused ``extra_context`` parameter of
>  ``contrib.auth.views.logout_then_login()``  is deprecated.

>* ``contrib.auth``’s ``password_change()``, ``password_change_done()``,
>  ``password_reset()``, ``password_reset_done()``, ``password_reset_confirm()``,
>  and ``password_reset_complete()`` function-based views are deprecated in favor
>  of new class-based views
>  :class:`~django.contrib.auth.views.PasswordChangeView`,
>  :class:`~django.contrib.auth.views.PasswordChangeDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetView`,
>  :class:`~django.contrib.auth.views.PasswordResetDoneView`,
>  :class:`~django.contrib.auth.views.PasswordResetConfirmView`, and
>  :class:`~django.contrib.auth.views.PasswordResetCompleteView`.

>* ``django.test.runner.setup_databases()`` is moved to
>  :func:`django.test.utils.setup_databases`. The old location is deprecated.

>* ``django.utils.translation.string_concat()`` is deprecated in
>  favor of :func:`django.utils.text.format_lazy`. ``string_concat(*strings)``
>  can be replaced by ``format_lazy(&#39;{}&#39; * len(strings), *strings)``.

>* For the ``PyLibMCCache`` cache backend, passing ``pylibmc`` behavior settings
>  as top-level attributes of ``OPTIONS`` is deprecated. Set them under a
>  ``behaviors`` key within ``OPTIONS`` instead.

>* The ``host`` parameter of ``django.utils.http.is_safe_url()`` is deprecated
>  in favor of the new ``allowed_hosts`` parameter.

>* Silencing exceptions raised while rendering the
>  :ttag:`{% include %} &lt;include&gt;` template tag is deprecated as the behavior is
>  often more confusing than helpful. In Django 2.1, the exception will be
>  raised.

>* ``DatabaseIntrospection.get_indexes()`` is deprecated in favor of
>  ``DatabaseIntrospection.get_constraints()``.

>* :func:`~django.contrib.auth.authenticate` now passes a ``request`` argument
>  to the ``authenticate()`` method of authentication backends. Support for
>  methods that don&#39;t accept ``request`` as the first positional argument will
>  be removed in Django 2.1.

>* The ``USE_ETAGS`` setting is deprecated in favor of
>  :class:`~django.middleware.http.ConditionalGetMiddleware` which now adds the
>  ``ETag`` header to responses regardless of the setting. ``CommonMiddleware``
>  and ``django.utils.cache.patch_response_headers()`` will no longer set ETags
>  when the deprecation ends.

>* ``Model._meta.has_auto_field`` is deprecated in favor of checking if
>  ``Model._meta.auto_field is not None``.

>* Using regular expression groups with ``iLmsu`` in ``url()`` is deprecated.
>  The only group that&#39;s useful is ``(?i)`` for case-insensitive URLs, however,
>  case-insensitive URLs aren&#39;t a good practice because they create multiple
>  entries for search engines, for example. An alternative solution could be to
>  create a :data:`~django.conf.urls.handler404` that looks for uppercase
>  characters in the URL and redirects to a lowercase equivalent.

>* The ``renderer`` argument is added to the :meth:`Widget.render()
>  &lt;django.forms.Widget.render&gt;` method. Methods that don&#39;t accept that argument
>  will work through a deprecation period.


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-05-06T15:53:33Z,CONTRIBUTOR,False,1,1,1,,JavaScript,7c7bf7afc6a1b8b9707e54a946f8bd3353ce3bfa,Update django from 1.10.7 to 1.11.1
258,https://api.github.com/repos/mozilla/distribution-viewer/pulls/233,233,Update contextlib2 to 0.5.5,"
There's a new version of [contextlib2](https://pypi.python.org/pypi/contextlib2) available.
You are currently using **0.5.4**. I have updated it to **0.5.5**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/contextlib2"">PyPI</a> | <a href=""https://pyup.io/changelogs/contextlib2/"">Changelog</a> | <a href=""http://contextlib2.readthedocs.org"">Docs</a> 



### Changelog
> 
>### 0.5.5

>^^^^^^^^^^^^^^^^^^

>* Issue `13 &lt;https://github.com/jazzband/contextlib2/issues/13&gt;`__:
>  ``setup.py`` now falls back to plain ``distutils`` if ``setuptools`` is not
>  available (patch by Allan Harwood)

>* Updates to the default compatibility testing matrix:
>  * Added: PyPy3, CPython 3.6 (maintenance), CPython 3.7 (development)
>  * Dropped: CPython 3.3







*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-04-25T04:10:12Z,CONTRIBUTOR,False,1,1,1,,JavaScript,67647410ad10f3ed6165a51aff7c72138dbeef39,Update contextlib2 from 0.5.4 to 0.5.5
259,https://api.github.com/repos/mozilla/distribution-viewer/pulls/232,232,Update pyopenssl to 17.0.0,"
There's a new version of [PyOpenSSL](https://pypi.python.org/pypi/PyOpenSSL) available.
You are currently using **16.2.0**. I have updated it to **17.0.0**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/pyOpenSSL"">PyPI</a> | <a href=""https://pyup.io/changelogs/pyopenssl/"">Changelog</a> | <a href=""http://pythonhosted.org/pyOpenSSL/"">Docs</a> 



### Changelog
> 
>### 17.0.0

>-------------------

>Backward-incompatible changes:
>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

>*none*


>Deprecations:
>^^^^^^^^^^^^^

>*none*


>Changes:
>^^^^^^^^

>- Added ``OpenSSL.X509Store.set_time()`` to set a custom verification time when verifying certificate chains.
>  `567 &lt;https://github.com/pyca/pyopenssl/pull/567&gt;`_
>- Added a collection of functions for working with OCSP stapling.
>  None of these functions make it possible to validate OCSP assertions, only to staple them into the handshake and to retrieve the stapled assertion if provided.
>  Users will need to write their own code to handle OCSP assertions.
>  We specifically added: ``Context.set_ocsp_server_callback``, ``Context.set_ocsp_client_callback``, and ``Connection.request_ocsp``.
>  `580 &lt;https://github.com/pyca/pyopenssl/pull/580&gt;`_
>- Changed the ``SSL`` module&#39;s memory allocation policy to avoid zeroing memory it allocates when unnecessary.
>  This reduces CPU usage and memory allocation time by an amount proportional to the size of the allocation.
>  For applications that process a lot of TLS data or that use very lage allocations this can provide considerable performance improvements.
>  `578 &lt;https://github.com/pyca/pyopenssl/pull/578&gt;`_
>- Automatically set ``SSL_CTX_set_ecdh_auto()`` on ``OpenSSL.SSL.Context``.
>  `575 &lt;https://github.com/pyca/pyopenssl/pull/575&gt;`_
>- Fix empty exceptions from ``OpenSSL.crypto.load_privatekey()``.
>  `581 &lt;https://github.com/pyca/pyopenssl/pull/581&gt;`_


>----








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-04-20T12:03:27Z,CONTRIBUTOR,False,1,1,1,,JavaScript,38526f07753fe23dd2a72d8df5a42cf890133deb,Update pyopenssl from 16.2.0 to 17.0.0
260,https://api.github.com/repos/mozilla/distribution-viewer/pulls/231,231,Update django to 1.11,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.6**. I have updated it to **1.11**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/Django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.10.7

>===========================

>*April 4, 2017*

>Django 1.10.7 fixes two security issues and a bug in 1.10.6.

>CVE-2017-7233: Open redirect and possible XSS attack via user-supplied numeric redirect URLs
>============================================================================================

>Django relies on user input in some cases  (e.g.
>:func:`django.contrib.auth.views.login` and :doc:`i18n &lt;/topics/i18n/index&gt;`)
>to redirect the user to an &quot;on success&quot; URL. The security check for these
>redirects (namely ``django.utils.http.is_safe_url()``) considered some numeric
>URLs (e.g. ``http:999999999``) &quot;safe&quot; when they shouldn&#39;t be.

>Also, if a developer relies on ``is_safe_url()`` to provide safe redirect
>targets and puts such a URL into a link, they could suffer from an XSS attack.

>CVE-2017-7234: Open redirect vulnerability in ``django.views.static.serve()``
>=============================================================================

>A maliciously crafted URL to a Django site using the
>:func:`~django.views.static.serve` view could redirect to any other domain. The
>view no longer does any redirects as they don&#39;t provide any known, useful
>functionality.

>Note, however, that this view has always carried a warning that it is not
>hardened for production use and should be used only as a development aid.

>Bugfixes
>========

>* Made admin&#39;s ``RelatedFieldWidgetWrapper`` use the wrapped widget&#39;s
>  ``value_omitted_from_data()`` method (:ticket:`27905`).

>* Fixed model form ``default`` fallback for ``SelectMultiple``
>  (:ticket:`27993`).


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-04-04T16:12:47Z,CONTRIBUTOR,False,1,1,1,,JavaScript,52bded94c6fe1d3e3d4b2f968ebfe7bfb14ae960,Update django from 1.10.6 to 1.11
261,https://api.github.com/repos/mozilla/distribution-viewer/pulls/230,230,Update django to 1.10.7,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.6**. I have updated it to **1.10.7**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/Django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.10.7

>===========================

>*April 4, 2017*

>Django 1.10.7 fixes two security issues and a bug in 1.10.6.

>CVE-2017-7233: Open redirect and possible XSS attack via user-supplied numeric redirect URLs
>============================================================================================

>Django relies on user input in some cases  (e.g.
>:func:`django.contrib.auth.views.login` and :doc:`i18n &lt;/topics/i18n/index&gt;`)
>to redirect the user to an &quot;on success&quot; URL. The security check for these
>redirects (namely ``django.utils.http.is_safe_url()``) considered some numeric
>URLs (e.g. ``http:999999999``) &quot;safe&quot; when they shouldn&#39;t be.

>Also, if a developer relies on ``is_safe_url()`` to provide safe redirect
>targets and puts such a URL into a link, they could suffer from an XSS attack.

>CVE-2017-7234: Open redirect vulnerability in ``django.views.static.serve()``
>=============================================================================

>A maliciously crafted URL to a Django site using the
>:func:`~django.views.static.serve` view could redirect to any other domain. The
>view no longer does any redirects as they don&#39;t provide any known, useful
>functionality.

>Note, however, that this view has always carried a warning that it is not
>hardened for production use and should be used only as a development aid.

>Bugfixes
>========

>* Made admin&#39;s ``RelatedFieldWidgetWrapper`` use the wrapped widget&#39;s
>  ``value_omitted_from_data()`` method (:ticket:`27905`).

>* Fixed model form ``default`` fallback for ``SelectMultiple``
>  (:ticket:`27993`).


>===========================






*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-04-04T15:57:49Z,CONTRIBUTOR,False,1,1,1,,JavaScript,cf32d2cacd75846282fba6e0c27737b9d853bb60,Update django from 1.10.6 to 1.10.7
262,https://api.github.com/repos/mozilla/distribution-viewer/pulls/229,229,Fix #228 - Add name field to `DataSet`,,robhudson,1106,2017-03-29T18:44:39Z,MEMBER,True,46,7,4,,JavaScript,e9c588eda0965720a0b81025a2f1d4155795f15c,Fix #228 - Add name field to `DataSet`
263,https://api.github.com/repos/mozilla/distribution-viewer/pulls/226,226,Fix #225: Remove escaped tags from descriptions,,openjck,933396,2017-03-29T14:14:01Z,CONTRIBUTOR,False,43,9,6,,JavaScript,45dfc63ae979107a7bed14c770b2f2d804a0d56e,Fix #225: Remove escaped tags from descriptions
264,https://api.github.com/repos/mozilla/distribution-viewer/pulls/224,224,Fix list_display_links setup error,"This fixes the following error, which only happens when Distribution
Viewer is set up for the first time:

    <class 'distributionviewer.api.admin.MetricAdmin'>: (admin.E124) The
    value of 'list_editable[0]' refers to the first field in
    'list_display' ('id'), which cannot be used unless
    'list_display_links' is set.",openjck,933396,2017-03-28T19:54:57Z,CONTRIBUTOR,True,1,0,1,,JavaScript,8e93c49fd9237bd841b7dc02dda9f1ba5a930ea1,"Fix list_display_links setup error

This fixes the following error, which only happens when Distribution
Viewer is set up for the first time:

    <class 'distributionviewer.api.admin.MetricAdmin'>: (admin.E124) The
    value of 'list_editable[0]' refers to the first field in
    'list_display' ('id'), which cannot be used unless
    'list_display_links' is set."
265,https://api.github.com/repos/mozilla/distribution-viewer/pulls/223,223,Update gunicorn to 19.7.1,"
There's a new version of [gunicorn](https://pypi.python.org/pypi/gunicorn) available.
You are currently using **19.7.0**. I have updated it to **19.7.1**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/gunicorn"">PyPI</a> | <a href=""https://pyup.io/changelogs/gunicorn/"">Changelog</a> | <a href=""http://gunicorn.org"">Homepage</a> 



### Changelog
> 
>### 19.7.1

>===================

>- fix: continue if SO_REUSEPORT seems to be available but fails (:issue:`1480`)
>- fix: support non-decimal values for the umask command line option (:issue:`1325`)








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-24T16:06:45Z,CONTRIBUTOR,True,1,1,1,,JavaScript,6e3ffb5a1f8d759a1538a2b02eafbfe1c077336a,Update gunicorn from 19.7.0 to 19.7.1
266,https://api.github.com/repos/mozilla/distribution-viewer/pulls/222,222,Fix #164: Add introductory text,,openjck,933396,2017-03-17T19:30:22Z,CONTRIBUTOR,True,45,10,4,,JavaScript,63e2293f3d8eedfa38daec7a7ee5b1296ac80eab,Fix #164: Add introductory text
267,https://api.github.com/repos/mozilla/distribution-viewer/pulls/221,221,Issue #155: Don't round labels to nearest digit,,openjck,933396,2017-03-17T17:03:44Z,CONTRIBUTOR,True,1,1,1,,JavaScript,76101e564d1655db9633377220ad9275a7b84f31,Issue #155: Don't round labels to nearest digit
268,https://api.github.com/repos/mozilla/distribution-viewer/pulls/220,220,Fix #161: Change axis/tick colors,,openjck,933396,2017-03-17T16:39:57Z,CONTRIBUTOR,True,8,8,2,,JavaScript,b773092c2f769d566bc51907a3b11c5f09bd8ffa,Fix #161: Change axis/tick colors
269,https://api.github.com/repos/mozilla/distribution-viewer/pulls/215,215,Update psycopg2 to 2.7.1,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.7**. I have updated it to **2.7.1**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> | <a href=""http://pythonhosted.org/psycopg2/"">Docs</a> 



### Changelog
> 
>### 2.7.1

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Ignore `!None` arguments passed to `~psycopg2.connect()` and
>  `~psycopg2.extensions.make_dsn()` (:ticket:`517`).
>- OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel
>  packages (:ticket:`518`).
>- Fixed build with libpq versions &lt; 9.3 (:ticket:`520`).








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-13T12:58:44Z,CONTRIBUTOR,True,1,1,1,,JavaScript,4b5e13f31ff8a2d1c213ce73ee1d81f4b197d7c5,Update psycopg2 from 2.7 to 2.7.1
270,https://api.github.com/repos/mozilla/distribution-viewer/pulls/214,214,Update djangorestframework to 3.6.2,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.6.1**. I have updated it to **3.6.2**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-10T13:44:17Z,CONTRIBUTOR,True,1,1,1,,JavaScript,a355c3370e199a579493c40f8000054ee92649bd,Update djangorestframework from 3.6.1 to 3.6.2
271,https://api.github.com/repos/mozilla/distribution-viewer/pulls/213,213,Update djangorestframework to 3.6.1,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.5.4**. I have updated it to **3.6.1**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-09T17:29:15Z,CONTRIBUTOR,True,1,1,1,,JavaScript,6f9549a605bd2a78958081c598c0e54688efad68,Update djangorestframework from 3.5.4 to 3.6.1
272,https://api.github.com/repos/mozilla/distribution-viewer/pulls/212,212,Update djangorestframework to 3.6.0,"
There's a new version of [djangorestframework](https://pypi.python.org/pypi/djangorestframework) available.
You are currently using **3.5.4**. I have updated it to **3.6.0**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/djangorestframework"">PyPI</a> | <a href=""https://pyup.io/changelogs/djangorestframework/"">Changelog</a> | <a href=""http://www.django-rest-framework.org"">Homepage</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-09T15:44:14Z,CONTRIBUTOR,False,1,1,1,,JavaScript,ab6f86a1d735565ee943ec4ece2988d17f511a6b,Update djangorestframework from 3.5.4 to 3.6.0
273,https://api.github.com/repos/mozilla/distribution-viewer/pulls/211,211,Fix #175: Bail early to avoid duplicate imports,,robhudson,1106,2017-03-08T22:46:14Z,MEMBER,True,22,6,2,,JavaScript,1b7398d0e1eee2b59cb260c5d61b574cf230ff44,Fix #175: Bail early to avoid duplicate imports
274,https://api.github.com/repos/mozilla/distribution-viewer/pulls/210,210,Fix #193: Surface configuration options,"This change also makes the ""Show outliers"" option available on the
homepage and the ""Populations"" option available on the chart detail
page.",openjck,933396,2017-03-08T22:09:22Z,CONTRIBUTOR,True,550,291,23,,JavaScript,4424285e832e4620c60ca9ea710d1ccfd9cc0fe3,"Fix #193: Surface configuration options

This change also makes the ""Show outliers"" option available on the
homepage and the ""Populations"" option available on the chart detail
page."
275,https://api.github.com/repos/mozilla/distribution-viewer/pulls/208,208,Update gunicorn to 19.7.0,"
There's a new version of [gunicorn](https://pypi.python.org/pypi/gunicorn) available.
You are currently using **19.6.0**. I have updated it to **19.7.0**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/gunicorn"">PyPI</a> | <a href=""http://gunicorn.org"">Homepage</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-04T10:53:33Z,CONTRIBUTOR,True,1,1,1,,JavaScript,005d7abc8d47f3d0934f5ac106a672ceb1dd78a1,Update gunicorn from 19.6.0 to 19.7.0
276,https://api.github.com/repos/mozilla/distribution-viewer/pulls/207,207,Fix #185 and #186: Use consistent colors for populations and color population names in hover descriptions,,openjck,933396,2017-03-02T20:58:22Z,CONTRIBUTOR,True,139,87,13,,JavaScript,50a45222787491aac7306e4ed411aaf89293e012,"Fix #186: Always render populations in same colors

For example, the ""All"" population is always blue, the ""channel:release""
population is always purple, and the ""channel:nightly"" population is
always yellow."
277,https://api.github.com/repos/mozilla/distribution-viewer/pulls/207,207,Fix #185 and #186: Use consistent colors for populations and color population names in hover descriptions,,openjck,933396,2017-03-02T20:58:22Z,CONTRIBUTOR,True,139,87,13,,JavaScript,efaf6d816645d92bebc94c35f7830256cceab69e,Fix #185: Color population names in descriptions
278,https://api.github.com/repos/mozilla/distribution-viewer/pulls/206,206,Update psycopg2 to 2.7,"
There's a new version of [psycopg2](https://pypi.python.org/pypi/psycopg2) available.
You are currently using **2.6.2**. I have updated it to **2.7**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/psycopg2"">PyPI</a> | <a href=""https://pyup.io/changelogs/psycopg2/"">Changelog</a> | <a href=""http://initd.org/psycopg/"">Homepage</a> | <a href=""http://pythonhosted.org/psycopg2/"">Docs</a> 



### Changelog
> 
>### 2.7

>-------------------------

>New features:

>- Added `~psycopg2.sql` module to generate SQL dynamically (:ticket:`308`).
>- Added :ref:`replication-support` (:ticket:`322`). Main authors are
>  Oleksandr Shulgin and Craig Ringer, who deserve a huge thank you.
>- Added `~psycopg2.extensions.parse_dsn()` and
>  `~psycopg2.extensions.make_dsn()` functions (:tickets:`321, 363`).
>  `~psycopg2.connect()` now can take both *dsn* and keyword arguments, merging
>  them together.
>- Added `~psycopg2.__libpq_version__` and
>  `~psycopg2.extensions.libpq_version()` to inspect the version of the
>  ``libpq`` library the module was compiled/loaded with
>  (:tickets:`35, 323`).
>- The attributes `~connection.notices` and `~connection.notifies` can be
>  customized replacing them with any object exposing an `!append()` method
>  (:ticket:`326`).
>- Adapt network types to `ipaddress` objects when available. When not
>  enabled, convert arrays of network types to lists by default. The old `!Inet`
>  adapter is deprecated (:tickets:`317, 343, 387`).
>- Added `~psycopg2.extensions.quote_ident()` function (:ticket:`359`).
>- Added `~connection.get_dsn_parameters()` connection method (:ticket:`364`).
>- `~cursor.callproc()` now accepts a dictionary of parameters (:ticket:`381`).
>- Give precedence to `!__conform__()` over superclasses to choose an object
>  adapter (:ticket:`456`).
>- Using Python C API decoding functions and codecs caching for faster
>  unicode encoding/decoding (:ticket:`473`).
>- `~cursor.executemany()` slowness addressed by
>  `~psycopg2.extras.execute_batch()` and `~psycopg2.extras.execute_values()`
>  (:ticket:`491`).
>- Added ``async_`` as an alias for ``async`` to support Python 3.7 where
>  ``async`` will become a keyword (:ticket:`495`).
>- Unless in autocommit, do not use :sql:`default_transaction_*` settings to
>  control the session characteristics as it may create problems with external
>  connection pools such as pgbouncer; use :sql:`BEGIN` options instead
>  (:ticket:`503`).
>- `~connection.isolation_level` is now writable and entirely separated from
>  `~connection.autocommit`; added `~connection.readonly`,
>  `~connection.deferrable` writable attributes.

>Bug fixes:

>- Fixed error caused by missing decoding `~psycopg2.extras.LoggingConnection`
>  (:ticket:`483`).
>- Fixed integer overflow in :sql:`interval` seconds (:ticket:`512`).

>Other changes:

>- Dropped support for Python 2.5 and 3.1.
>- Dropped support for client library older than PostgreSQL 9.1 (but older
>  server versions are still supported).
>- `~connection.isolation_level` doesn&#39;t read from the database but will return
>  `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT` if no value was set on the
>  connection.
>- Empty arrays no more converted into lists if they don&#39;t have a type attached
>  (:ticket:`506`)




>### 2.6.3

>^^^^^^^^^^^^^^^^^^^^^^^^^^^

>- Throw an exception trying to pass ``NULL`` chars as parameters
>  (:ticket:`420`).
>- Make `~psycopg2.extras.Range` objects picklable (:ticket:`462`).








*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-01T15:10:29Z,CONTRIBUTOR,True,1,1,1,,JavaScript,dbef7e2ed4462377183c3ad5339a6e25e6753095,Update psycopg2 from 2.6.2 to 2.7
279,https://api.github.com/repos/mozilla/distribution-viewer/pulls/205,205,Update django to 1.10.6,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.10.5**. I have updated it to **1.10.6**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/Django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 


*I couldn't find a changelog for this release. Do you know where I can find one? [Tell me!](https://github.com/pyupio/changelogs/issues/new)*


*Got merge conflicts? Close this PR and delete the branch. I'll create a new PR for you.*

Happy merging! 🤖
",pyup-bot,16239342,2017-03-01T15:10:24Z,CONTRIBUTOR,True,1,1,1,,JavaScript,6f0c549a00f76b6ce612e934150a842b9441ec8a,Update django from 1.10.5 to 1.10.6
280,https://api.github.com/repos/mozilla/distribution-viewer/pulls/204,204,Update django to 1.10.5,"
There's a new version of [Django](https://pypi.python.org/pypi/Django) available.
You are currently using **1.9.12**. I have updated it to **1.10.5**



These links might come in handy:  <a href=""http://pypi.python.org/pypi/Django"">PyPI</a> | <a href=""https://pyup.io/changelogs/django/"">Changelog</a> | <a href=""https://www.djangoproject.com/"">Homepage</a> 



### Changelog
> 
>### 1.10.3

>===========================
>Django 1.10.3 release notes
>===========================

>*November 1, 2016*

>Django 1.10.3 fixes two security issues and several bugs in 1.10.2.

>User with hardcoded password created when running tests on Oracle
>=================================================================

>When running tests with an Oracle database, Django creates a temporary database
>user. In older versions, if a password isn&#39;t manually specified in the database
>settings ``TEST`` dictionary, a hardcoded password is used. This could allow
>an attacker with network access to the database server to connect.

>This user is usually dropped after the test suite completes, but not when using
>the ``manage.py test --keepdb`` option or if the user has an active session
>(such as an attacker&#39;s connection).

>A randomly generated password is now used for each test run.

>DNS rebinding vulnerability when ``DEBUG=True``
>===============================================

>Older versions of Django don&#39;t validate the ``Host`` header against
>``settings.ALLOWED_HOSTS`` when ``settings.DEBUG=True``. This makes them
>vulnerable to a `DNS rebinding attack
>&lt;http://benmmurphy.github.io/blog/2016/07/11/rails-webconsole-dns-rebinding/&gt;`_.

>While Django doesn&#39;t ship a module that allows remote code execution, this is
>at least a cross-site scripting vector, which could be quite serious if
>developers load a copy of the production database in development or connect to
>some production services for which there&#39;s no development instance, for
>example. If a project uses a package like the ``django-debug-toolbar``, then
>the attacker could execute arbitrary SQL, which could be especially bad if the
>developers connect to the database with a superuser account.

>``settings.ALLOWED_HOSTS`` is now validated regardless of ``DEBUG``. For
>convenience, if ``ALLOWED_HOSTS`` is empty and ``DEBUG=True``, the following
>variations of localhost are allowed ``[&#39;localhost&#39;, &#39;127.0.0.1&#39;, &#39;::1&#39;]``. If
>your local settings file has your production ``ALLOWED_HOSTS`` value, you must
>now omit it to get those fallback values.

>Bugfixes
>========

>* Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be
>  tested for ``set`` membership (:ticket:`27309`).

>* Fixed a performance regression when running ``migrate`` in projects
>  with ``RenameModel`` operations (:ticket:`27279`).

>* Added ``model_name`` to the ``allow_migrate()`` calls in ``makemigrations``
>  (:ticket:`27200`).

>* Made the ``JavaScriptCatalog`` view respect the ``packages`` argument;
>  previously it was ignored (:ticket:`27374`).

>* Fixed ``QuerySet.bulk_create()`` on PostgreSQL when the number of objects is
>  a multiple plus one of ``batch_size`` (:ticket:`27385`).

>* Prevented ``i18n_patterns()`` from using too much of the URL as the language
>  to fix a use case for ``prefix_default_language=False`` (:ticket:`27063`).

>* Replaced a possibly incorrect redirect from ``SessionMiddleware`` when a
>  session is destroyed in a concurrent request with a ``SuspiciousOperation``
>  to indicate that the request can&#39;t be completed (:ticket:`27363`).


>### 1.10.2

>===========================
>Django 1.10.2 release notes
>===========================

>*October 1, 2016*

>Django 1.10.2 fixes several bugs in 1.10.1.

>Bugfixes
>========

>* Fixed a crash in MySQL database validation where ``SELECT @@sql_mode``
>  doesn&#39;t return a result (:ticket:`27180`).

>* Allowed combining ``contrib.postgres.search.SearchQuery`` with more than one
>  ``&amp;`` or ``|`` operators (:ticket:`27143`).

>* Disabled system check for URL patterns beginning with a &#39;/&#39; when
>  ``APPEND_SLASH=False`` (:ticket:`27238`).

>* Fixed model form ``default`` fallback for ``CheckboxSelectMultiple``,
>  ``MultiWidget``, ``FileInput``, ``SplitDateTimeWidget``, ``SelectDateWidget``,
>  and ``SplitArrayWidget`` (:ticket:`27186`). Custom widgets affected by this
>  issue should implement :meth:`~django.forms.Widget.value_omitted_from_data`.

>* Fixed a crash in ``runserver`` logging during a &quot;Broken pipe&quot; error
>  (:ticket:`27271`).

>* Fixed a regression where unchanged localized date/time fields were listed as
>  changed in the admin&#39;s model history messages (:ticket:`27302`).


>### 1.10.1

>===========================
>Django 1.10.1 release notes
>===========================

>*September 1, 2016*

>Django 1.10.1 fixes several bugs in 1.10.

>Bugfixes
>========

>* Fixed a crash in MySQL connections where ``SELECT @@SQL_AUTO_IS_NULL``
>  doesn&#39;t return a result (:ticket:`26991`).

>* Allowed ``User.is_authenticated`` and ``User.is_anonymous`` properties to be
>  compared using ``==``, ``!=``, and ``|`` (:ticket:`26988`, :ticket:`27154`).

>* Removed the broken ``BaseCommand.usage()`` method which was for
>  ``optparse`` support (:ticket:`27000`).

>* Fixed a checks framework crash with an empty ``Meta.default_permissions``
>  (:ticket:`26997`).

>* Fixed a regression in the number of queries when using ``RadioSelect`` with a
>  ``ModelChoiceField`` form field (:ticket:`27001`).

>* Fixed a crash if ``request.META[&#39;CONTENT_LENGTH&#39;]`` is an empty string
>  (:ticket:`27005`).

>* Fixed the ``isnull`` lookup on a ``ForeignKey`` with its ``to_field``
>  pointing to a ``CharField`` or pointing to a ``CharField`` defined with
>  ``primary_key=True`` (:ticket:`26983`).

>* Prevented the ``migrate`` command from raising
>  ``InconsistentMigrationHistory`` in the presence of unapplied squashed
>  migrations (:ticket:`27004`).

>* Fixed a regression in ``Client.force_login()`` which required specifying a
>  ``backend`` rather than automatically using the first one if multiple
>  backends are configured (:ticket:`27027`).

>* Made ``QuerySet.bulk_create()`` properly initialize model instances on
>  backends, such as PostgreSQL, that support returning the IDs of the created
>  records so that many-to-many relationships can be used on the new objects
>  (:ticket:`27026`).

>* Fixed crash of ``django.views.static.serve()`` with ``show_indexes`` enabled
>  (:ticket:`26973`).

>* Fixed ``ClearableFileInput`` to avoid the ``required`` HTML attribute when
>  initial data exists (:ticket:`27037`).

>* Fixed annotations with database functions when combined with lookups on
>  PostGIS (:ticket:`27014`).

>* Reallowed the ``{% for %}`` tag to unpack any iterable (:ticket:`27058`).

>* Made ``makemigrations`` skip inconsistent history checks on non-default
>  databases if database routers aren&#39;t in use or if no apps can be migrated
>  to the database (:ticket:`27054`, :ticket:`27110`, :ticket:`27142`).

>* Removed duplicated managers in ``Model._meta.managers`` (:ticket:`27073`).

>* Fixed ``contrib.admindocs`` crash when a view is in a class, such as some of
>  the admin views (:ticket:`27018`).

>* Reverted a few admin checks that checked ``field.many_to_many`` back to
>  ``isinstance(field, models.ManyToManyField)`` since it turned out the checks
>  weren&#39;t suitable to be generalized like that (:ticket:`26998`).

>* Added the database alias to the ``InconsistentMigrationHistory`` message
>  raised by ``makemigrations`` and ``migrate`` (:ticket:`27089`).

>* Fixed the creation of ``ContentType`` and ``Permission`` objects for models
>  of applications without migrations when calling the ``migrate`` command with
>  no migrations to apply (:ticket:`27044`).

>* Included the already applied migration state changes in the ``Apps`` instance
>  provided to the ``pre_migrate`` signal receivers to allow ``ContentType``
>  renaming to be performed on model rename (:ticket:`27100`).

>* Reallowed subclassing ``UserCreationForm`` without ``USERNAME_FIELD`` in
>  ``Meta.fields`` (:ticket:`27111`).

>* Fixed a regression in model forms where model fields with a ``default`` that
>  didn&#39;t appear in POST data no longer used the ``default`` (:ticket:`27039`).


>### 1.10

>=========================
>Django 1.10 release notes
>=========================

>*August 1, 2016*

>Welcome to Django 1.10!

>These release notes cover the :ref:`new features &lt;whats-new-1.10&gt;`, as well as
>some :ref:`backwards incompatible changes &lt;backwards-incompatible-1.10&gt;` you&#39;ll
>want to be aware of when upgrading from Django 1.9 or older versions. We&#39;ve
>:ref:`dropped some features &lt;removed-features-1.10&gt;` that have reached the end
>of their deprecation cycle, and we&#39;ve :ref:`begun the deprecation process for
>some features &lt;deprecated-features-1.10&gt;`.

>See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
>project.

>Python compatibility
>====================

>Like Django 1.9, Django 1.10 requires Python 2.7, 3.4, or 3.5. We **highly
>recommend** and only officially support the latest release of each series.

>.. _whats-new-1.10:

>What&#39;s new in Django 1.10
>=========================

>Full text search for PostgreSQL
>-------------------------------

>``django.contrib.postgres`` now includes a :doc:`collection of database
>functions &lt;/ref/contrib/postgres/search&gt;` to allow the use of the full text
>search engine. You can search across multiple fields in your relational
>database, combine the searches with other lookups, use different language
>configurations and weightings, and rank the results by relevance.

>It also now includes trigram support, using the :lookup:`trigram_similar`
>lookup, and the :class:`~django.contrib.postgres.search.TrigramSimilarity` and
>:class:`~django.contrib.postgres.search.TrigramDistance` expressions.

>New-style middleware
>--------------------

>:doc:`A new style of middleware is introduced &lt;/topics/http/middleware&gt;` to
>solve the lack of strict request/response layering of the old-style of
>middleware described in `DEP 0005
>&lt;https://github.com/django/deps/blob/master/final/0005-improved-middleware.rst&gt;`_.
>You&#39;ll need to :ref:`adapt old, custom middleware &lt;upgrading-middleware&gt;` and
>switch from the ``MIDDLEWARE_CLASSES`` setting to the new :setting:`MIDDLEWARE`
>setting to take advantage of the improvements.

>Official support for Unicode usernames
>--------------------------------------

>The :class:`~django.contrib.auth.models.User` model in ``django.contrib.auth``
>originally only accepted ASCII letters in usernames. Although it wasn&#39;t a
>deliberate choice, Unicode characters have always been accepted when using
>Python 3.

>The username validator now explicitly accepts Unicode letters by
>default on Python 3 only. This default behavior can be overridden by changing
>the :attr:`~django.contrib.auth.models.User.username_validator` attribute of
>the ``User`` model, or to any proxy of that model, using either
>:class:`~django.contrib.auth.validators.ASCIIUsernameValidator` or
>:class:`~django.contrib.auth.validators.UnicodeUsernameValidator`. Custom user
>models may also use those validators.

>Minor features
>--------------

>:mod:`django.contrib.admin`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* For sites running on a subpath, the default :attr:`URL for the &quot;View site&quot;
>  link &lt;django.contrib.admin.AdminSite.site_url&gt;` at the top of each admin page
>  will now point to ``request.META[&#39;SCRIPT_NAME&#39;]`` if set, instead of ``/``.

>* The success message that appears after adding or editing an object now
>  contains a link to the object&#39;s change form.

>* All inline JavaScript is removed so you can enable the
>  ``Content-Security-Policy`` HTTP header if you wish.

>* The new :attr:`InlineModelAdmin.classes
>  &lt;django.contrib.admin.InlineModelAdmin.classes&gt;` attribute allows specifying
>  classes on inline fieldsets. Inlines with a ``collapse`` class will be
>  initially collapsed and their header will have a small &quot;show&quot; link.

>* If a user doesn&#39;t have the add permission, the ``object-tools`` block on a
>  model&#39;s changelist will now be rendered (without the add button, of course).
>  This makes it easier to add custom tools in this case.

>* The :class:`~django.contrib.admin.models.LogEntry` model now stores change
>  messages in a JSON structure so that the message can be dynamically translated
>  using the current active language. A new ``LogEntry.get_change_message()``
>  method is now the preferred way of retrieving the change message.

>* Selected objects for fields in ``ModelAdmin.raw_id_fields`` now have a link
>  to object&#39;s change form.

>* Added &quot;No date&quot; and &quot;Has date&quot; choices for ``DateFieldListFilter`` if the
>  field is nullable.

>* The jQuery library embedded in the admin is upgraded from version 2.1.4 to
>  2.2.3.

>:mod:`django.contrib.auth`
>~~~~~~~~~~~~~~~~~~~~~~~~~~

>* Added support for the :ref:`Argon2 password hash &lt;argon2_usage&gt;`. It&#39;s
>  recommended over PBKDF2, however, it&#39;s not the default as it requires a
>  third-party library.

>* The default iteration count for the PBKDF2 password hasher has been increased
>  by 25%. This backwards compatible change will not affect users who have
>  subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the
>  default value.

>* The :func:`~django.contrib.auth.views.logout` view sends &quot;no-cache&quot; headers
>  to prevent an issue where Safari caches redirects and prevents a user from
>  being able to log out.

>* Added the optional ``backend`` argument to :func:`~django.contrib.auth.login`
>  to allow using it without credentials.

>* The new :setting:`LOGOUT_REDIRECT_URL` setting controls the redirect of the
>  :func:`~django.contrib.auth.views.logout` view, if the view doesn&#39;t get a
>  ``next_page`` argument.

>* The new ``redirect_authenticated_user`` parameter for the
>  :func:`~django.contrib.auth.views.login` view allows redirecting
>  authenticated users visiting the login page.

>* The new :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` and
>  :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` ignore
>  the value of ``User.is_active``, while
>  :class:`~django.contrib.auth.backends.ModelBackend` and
>  :class:`~django.contrib.auth.backends.RemoteUserBackend` now reject inactive
>  users.

>:mod:`django.contrib.gis`
>~~~~~~~~~~~~~~~~~~~~~~~~~

>* :ref:`Distance lookups &lt;distance-lookups&gt;` now accept expressions as the
>  distance value parameter.

>* The new :attr:`GEOSGeometry.unary_union
>  &lt;django.contrib.gis.geos.GEOSGeometry.unary_union&gt;` property computes the
>  union of all the elements of this geometry.

>* Added the :meth:`GEOSGeometry.covers()
>  &lt;django.contrib.gis.geos.GEOSGeometry.covers&gt;` binary predicate.

>* Added the :meth:`GDALBand.statistics()
>  &lt;django.contrib.gis.gdal.GDALBand.statistics&gt;` method and
>  :attr:`~django.contrib.gis.gdal.GDALBand.mean`
>  and :attr:`~django.contrib.gis.gdal.GDALBand.std` attributes.

>* Added support for the :class:`~django.contrib.gis.db.models.MakeLine`
>  aggregate and :class:`~django.contrib.gis.db.models.functions.GeoHash`
>  function on SpatiaLite.

>* Added support for the
>  :class:`~django.contrib.gis.db.models.functions.Difference`,
>  :class:`~django.contrib.gis.db.models.functions.Intersection`, and
>  :class:`~django.contrib.gis.db.models.functions.SymDifference`
>  functions on MySQL.

>* Added support for instantiating empty GEOS geometries.

>* The new :attr:`~django.contrib.gis.geos.WKTWriter.trim` and
>  :attr:`~django.contrib.gis.geos.WKTWriter.precision` properties
>  of :class:`~django.contrib.gis.geos.WKTWriter` allow controlling
>  output of the fractional part of the coordinates in WKT.

>* Added the :attr:`LineString.closed
>  &lt;django.contrib.gis.geos.LineString.closed&gt;` and
>  :attr:`MultiLineString.closed
>  &lt;django.contrib.gis.geos.MultiLineString.closed&gt;` properties.

>* The :doc:`GeoJSON serializer &lt;/ref/contrib/gis/serializers&gt;` now outputs the
>  primary key of objects in the ``properties`` dictionary if specific fields
>  aren&#39;t specified.

>* The ability to replicate input data on the :meth:`GDALBand.data()
>  &lt;django.contrib.gis.gdal.GDALBand.data&gt;` method was added. Band data can
>  now be updated with repeated values efficiently.

>* Added database functions
>  :class:`~django.contrib.gis.db.models.functions.IsValid` and
>  :class:`~django.contrib.gis.db.models.functions.MakeValid`, as well as the
>  :lookup:`isvalid` lookup, all for PostGIS. This allows filtering and
>  repairing invalid geometries on the database side.

>* Added raster support for all :doc:`spatial lookups
>  &lt;/ref/contrib/gis/geoquerysets&gt;`.

>:mod:`django.contrib.postgres`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* For convenience, :class:`~django.contrib.postgres.fields.HStoreField` now
>  casts its keys and values to strings.

>:mod:`django.contrib.sessions`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The :djadmin:`clearsessions` management command now removes file-based
>  sessions.

>:mod:`django.contrib.sites`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The :class:`~django.contrib.sites.models.Site` model now supports
>  :ref:`natural keys &lt;topics-serialization-natural-keys&gt;`.

>:mod:`django.contrib.staticfiles`
>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>* The :ttag:`static` template tag now uses ``django.contrib.staticfiles``
>  if it&#39;s in ``INSTALLED_APPS``. This is especially useful for third-party apps
>  which can now always use ``{% load static %}`` (instead of
>  ``{% load staticfiles %}`` or ``{% load static from staticfiles %}``) and
>  not worry about whether or not the ``staticfiles`` app is installed.

>* You can :ref:`more easily customize &lt;customize-staticfiles-ignore-patterns&gt;`
>  the ``collectstatic --ignore_patterns`` option with a custom ``AppConfig``.

>Cache
>~~~~~

>* The file-based cache backend now uses the highest pickling protocol.

>CSRF
>~~~~

>* The default :setting:`CSRF_FAILURE_VIEW`, ``views.csrf.csrf_failure()`` now
>  accepts an optional ``template_name`` parameter, defaulting to
>  ``&#39;403_csrf.html&#39;``, to control the template used to render the page.

>* To protect against `BREACH`_ attacks, the CSRF protection mechanism now
>  changes the form token value on every request (while keeping an invariant
>  secret which can be used to validate the different tokens).

>.. _BREACH: http://breachattack.com/

>Database backends
>~~~~~~~~~~~~~~~~~

>* Temporal data subtraction was unified on all backends.

>* If the database supports it, backends can set
>  ``DatabaseFeatures.can_return_ids_from_bulk_insert=True`` and implement
>  ``DatabaseOperations.fetch_returned_insert_ids()`` to set primary keys
>  on objects created using ``QuerySet.bulk_create()``.

>* Added keyword arguments to the ``as_sql()`` methods of various expressions
>  (``Func``, ``When``, ``Case``, and ``OrderBy``) to allow database backends to
>  customize them without mutating ``self``, which isn&#39;t safe when using
>  different database backends. See the ``arg_joiner`` and ``**extra_context``
>  parameters of :meth:`Func.as_sql() &lt;django.db.models.Func.as_sql&gt;` for an
>  example.

>File Storage
>~~~~~~~~~~~~

>* Storage backends now present a timezone-aware API with new methods
>  :meth:`~django.core.files.storage.Storage.get_accessed_time`,
>  :meth:`~django.core.files.storage.Storage.get_created_time`, and
>  :meth:`~django.core.files.storage.Storage.get_modified_time`. They return a
>  timezone-aware ``datetime`` if :setting:`USE_TZ` is ``True`` and a naive
>  ``datetime`` in the local timezone otherwise.

>* The new :meth:`Storage.generate_filename()
>  &lt;django.core.files.storage.Storage.generate_filename&gt;` method makes it easier
>  to implement custom storages that don&#39;t use the ``os.path`` calls previously
>  in :class:`~django.db.models.FileField`.

>Forms
>~~~~~

>* Form and widget ``Media`` is now served using
>  :mod:`django.contrib.staticfiles` if installed.

>* The ``&lt;input&gt;`` tag rendered by :class:`~django.forms.CharField` now includes
>  a ``minlength`` attribute if the field has a ``min_length``.

>* Required form fields now have the ``required`` HTML attribute. Set the new
>  :attr:`Form.use_required_attribute &lt;django.forms.Form.use_required_attribute&gt;`
>  attribute to ``False`` to disable it. The ``required`` attribute isn&#39;t
>  included on forms of formsets because the browser validation may not be
>  correct when adding and deleting formsets.

>Generic Views
>~~~~~~~~~~~~~

>* The :class:`~django.views.generic.base.View` class can now be imported from
>  ``django.views``.

>Internationalization
>~~~~~~~~~~~~~~~~~~~~

>* The :func:`~django.conf.urls.i18n.i18n_patterns` helper function can now be
>  used in a root URLConf specified using :attr:`request.urlconf
>  &lt;django.http.HttpRequest.urlconf&gt;`.

>* By setting the new ``prefix_default_language`` parameter for
>  :func:`~django.conf.urls.i18n.i18n_patterns` to ``False``, you can allow
>  accessing the default language without a URL prefix.

>* :func:`~django.views.i18n.set_language` now returns a 204 status code (No
>  Content) for AJAX requests when there is no ``next`` parameter in ``POST`` or
>  ``GET``.

>* The :class:`~django.views.i18n.JavaScriptCatalog` and
>  :class:`~django.views.i18n.JSONCatalog` class-based views supersede the
>  deprecated ``javascript_catalog()`` and ``json_catalog()`` function-based
>  views. The new views are almost equivalent to the old ones except that by
>  default the new views collect all JavaScript strings in the ``djangojs``
>  translation domain from all installed apps rather than only the JavaScript
>  strings from :setting:`LOCALE_PATHS`.

>Management Commands
>~~~~~~~~~~~~~~~~~~~

>* :func:`~django.core.management.call_command` now returns the value returned
>  from the ``command.handle()`` method.

>* The new :option:`check --fail-level` option allows specifying the message
>  level that will cause the command to exit with a non-zero status.

>* The new :option:`makemigrations --check` option makes the command exit
>  with a non-zero status when model changes without migrations are detected.

>* :djadmin:`makemigrations` now displays the path to the migration files that
>  it generates.

>* The :option:`shell --interface` option now accepts ``python`` to force use of
>  the &quot;plain&quot; Python interpreter.

>* The new :option:`shell --command` option lets you run a command as Django and
>  exit, instead of opening the interactive shell.

>* Added a warning to :djadmin:`dumpdata` if a proxy model is specified (which
>  results in no output) without its concrete parent.

>* The new :attr:`BaseCommand.requires_migrations_checks
>  &lt;django.core.management.BaseCommand.requires_migrations_checks&gt;` attribute
>  may be set to ``True`` if you want your command to print a warning, like
>  :djadmin:`runserver` does, if the set of migrations on disk don&#39;t match the
>  migrations in the database.

>* To assist with testing, :func:`~django.core.management.call_command` now
>  accepts a command object as the first argument.

>* The :djadmin:`shell` command supports tab completion on systems using
>  ``libedit``, e.g. Mac OSX.

>* The :djadmin:`inspectdb` command lets you choose what tables should be
>  inspected by specifying their names as arguments.

>Migrations
>~~~~~~~~~~

>* Added support for serialization of ``enum.Enum`` objects.

>* Added the ``elidable`` argument to the
>  :class:`~django.db.migrations.operations.RunSQL` and
>  :class:`~django.db.migrations.operations.RunPython` operations to allow them
>  to be removed when squashing migrations.

>* Added support for :ref:`non-atomic migrations &lt;non-atomic-migrations&gt;` by
>  setting the ``atomic`` attribute on a ``Migration``.

>* The ``migrate`` and ``makemigrations`` commands now :ref:`check for a
>  consistent migration history &lt;migration-history-consistency&gt;`. If they find
>  some unapplied dependencies of an applied migration,
>  ``InconsistentMigrationHistory`` is raised.

>* The :func:`~django.db.models.signals.pre_migrate` and
>  :func:`~django.db.models.signals.post_migrate` signals now dispatch their
>  migration ``plan`` and ``apps``.

>Models
>~~~~~~

>* Reverse foreign keys from proxy models are now propagated to their
>  concrete class. The reverse relation attached by a
>  :class:`~django.db.models.ForeignKey` pointing to a proxy model is now
>  accessible as a descriptor on the proxied model class and may be referenced in
>  queryset filtering.

>* The new :meth:`Field.rel_db_type() &lt;django.db.models.Field.rel_db_type&gt;`
>  method returns the database column data type for fields such as ``ForeignKey``
>  and ``OneToOneField`` that point to another field.

>* The :attr:`~django.db.models.Func.arity` class attribute is added to
>  :class:`~django.db.models.Func`. This attribute can be used to set the number
>  of arguments the function accepts.

>* Added :class:`~django.db.models.BigAutoField` which acts much like an
>  :class:`~django.db.models.AutoField` except that it is guaranteed
>  to fit numbers from ``1`` to ``9223372036854775807``.

>* :meth:`QuerySet.in_bulk() &lt;django.db.models.query.QuerySet.in_bulk&gt;`
>  may be called without any arguments to return all objects in the queryset.

>* :attr:`~django.db.models.ForeignKey.related_query_name` now supports
>  app label and class interpolation using the ``&#39;%(app_label)s&#39;`` and
>  ``&#39;%(class)s&#39;`` strings.

>* Allowed overriding model fields inherited from abstract base classes.

>* The :func:`~django.db.models.prefetch_related_objects` function is now a
>  public API.

>* :meth:`QuerySet.bulk_create() &lt;django.db.models.query.QuerySet.bulk_create&gt;`
>  sets the primary key on objects when using PostgreSQL.

>* Added the :class:`~django.db.models.functions.Cast` database function.

>* A proxy model may now inherit multiple proxy models that share a common
>  non-abstract parent class.

>* Added :class:`~django.db.models.functions.datetime.Extract` functions
>  to extract datetime components as integers, such as year and hour.

>* Added :class:`~django.db.models.functions.datetime.Trunc` functions to
>  truncate a date or datetime to a significant component. They enable queries
>  like sales-per-day or sales-per-hour.

>* ``Model.__init__()`` now sets values of virtual fields from its keyword
>  arguments.

>* The new :attr:`Meta.base_manager_name
>  &lt;django.db.models.Options.base_manager_name&gt;` and
>  :attr:`Meta.default_manager_name
>  &lt;django.db.models.Options.default_manager_name&gt;` options allow controlling
>  the :attr:`~django.db.models.Model._base_manager` and
>  :attr:`~django.db.models.Model._default_manager`, respectively.

>Requests and Responses
>~~~~~~~~~~~~~~~~~~~~~~

>* Added ``request.user`` to the debug view.

>* Added :class:`~django.http.HttpResponse` methods
>  :meth:`~django.http.HttpResponse.readable()` and
>  :meth:`~django.http.HttpResponse.seekable()` to make an instance a
>  stream-like object and allow wrapping it with :py:class:`io.TextIOWrapper`.

>* Added the :attr:`HttpResponse.content_type
>  &lt;django.http.HttpRequest.content_type&gt;` and
>  :attr:`~django.http.HttpRequest.content_params` attributes which are
>  parsed from the ``CONTENT_TYPE`` header.

>* The parser for ``request.COOKIES`` is simplified to better match the behavior
>  of browsers. ``request.COOKIES`` may now contain cookies that are invalid
>  according to :rfc:`6265` but are possible to set via ``document.cookie``.

>Serialization
>~~~~~~~~~~~~~

>* The ``django.core.serializers.json.DjangoJSONEncoder`` now knows how to
>  serialize lazy strings, typically used for translatable content.

>Templates
>~~~~~~~~~

>* Added the ``autoescape`` option to the
>  :class:`~django.template.backends.django.DjangoTemplates` backend and the
>  :class:`~django.template.Engine` class.

>* Added the ``is`` and ``is not`` comparison operators to the :ttag:`if` tag.

>* Allowed :tfilter:`dictsort` to order a list of lists by an element at a
>  specified index.

>* The :func:`~django.template.context_processors.debug` context processor
>  contains queries for all database aliases instead of only the default alias.

>* Added relative path support for string arguments of the :ttag:`extends` and
>  :ttag:`include` template tags.

>Tests
>~~~~~

>* To better catch bugs, :class:`~django.test.TestCase` now checks deferrable
>  database constraints at the end of each test.

>* Tests and test cases can be :ref:`marked with tags &lt;topics-tagging-tests&gt;`
>  and run selectively with the new :option:`test --tag` and :option:`test
>  --exclude-tag` options.

>* You can now login and use sessions with the test client even if
>  :mod:`django.contrib.sessions` is not in :setting:`INSTALLED_APPS`.

>URLs
>~~~~

>* An addition in :func:`django.setup()` allows URL resolving that happens
>  outside of the request/response cycle (e.g. in management commands and
>  standalone scripts) to take :setting:`FORCE_SCRIPT_NAME` into account when it
>  is set.

>Validators
>~~~~~~~~~~

>* :class:`~django.core.validators.URLValidator` now limits the length of
>  domain name labels to 63 characters and the total length of domain
>  names to 253 characters per :rfc:`1034`.

>* :func:`~django.core.validators.int_list_validator` now accepts an optional
>  ``allow_negative`` boolean parameter, defaulting to ``False``, to allow
>  negative integers.

>.. _backwards-incompatible-1.10:

>Backwards incompatible changes in 1.10
>======================================

>.. warning::

>    In addition to the changes outlined in this section, be sure to review the
>    :ref:`removed-features-1.10` for the features that have reached the end of
>    their deprecation cycle and therefore been removed. If you haven&#39;t updated
>    your code within the deprecation timeline for a given feature, its removal
>    may appear as a backwards incompatible change.

>Database backend API
>--------------------

>* GIS&#39;s ``AreaField`` uses an unspecified underlying numeric type that could in
>  practice be any numeric Python type. ``decimal.Decimal`` values retrieved
>  from the database are now converted to ``float`` to make it easier to combine
>  them with values used by the GIS libraries.

>* In order to enable temporal subtraction you must set the
>  ``supports_temporal_subtraction`` database feature flag to ``True`` and
>  implement the ``DatabaseOperations.subtract_temporals()`` method. This
>  method should return the SQL and parameters required to compute the
>  difference in microseconds between the ``lhs`` and ``rhs`` arguments in the
>  datatype used to store :class:`~django.db.models.DurationField`.

>``select_related()`` prohibits non-relational fields for nested relations
>-------------------------------------------------------------------------

>Django 1.8 added validation for non-relational fields in ``select_related()``::

>    &gt;&gt;&gt; Book.objects.select_related(&#39;title&#39;)
>    Traceback (most recent call last):
>    ...
>    FieldError: Non-relational field given in select_related: &#39;title&#39;

>But it didn&#39;t prohibit nested non-relation fields as it does now::

>    &gt;&gt;&gt; Book.objects.select_related(&#39;author__name&#39;)
>    Traceback (most recent call last):
>    ...
>    FieldError: Non-relational field given in select_related: &#39;name&#39;

>``_meta.get_fields()`` returns consistent reverse fields for proxy models
>-------------------------------------------------------------------------

>Before Django 1.10, the :meth:`~django.db.models.options.Options.get_fields`
>method returned different reverse fields when called on a proxy model compared
>to its proxied concrete class. This inconsistency was fixed by returning the
>full set of fields pointing to a concrete class or one of its proxies in both
>cases.

>:attr:`AbstractUser.username &lt;django.contrib.auth.models.User.username&gt;` ``max_length`` increased to 150
>--------------------------------------------------------------------------------------------------------

>A migration for :attr:`django.contrib.auth.models.User.username` is included.
>If you have a custom user model inheriting from ``AbstractUser``, you&#39;ll need
>to generate and apply a database migration for your user model.

>We considered an increase to 254 characters to more easily allow the use of
>email addresses (which are limited to 254 characters) as usernames but rejected
>it due to a MySQL limitation.  When using the ``utf8mb4`` encoding (recommended
>for proper Unicode support), MySQL can only create unique indexes with 191
>characters by default. Therefore, if you need a longer length, please use a
>custom user model.

>If you want to preserve the 30 character limit for usernames, use a custom form
>when creating a user or changing usernames::

>    from django.contrib.auth.forms import UserCreationForm

>    class MyUserCreationForm(UserCreationForm):
>        username = forms.CharField(
>            max_length=30,
>            help_text=&#39;Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.&#39;,
>        )

>If you wish to keep this restriction in the admin, set ``UserAdmin.add_form``
>to use this form::

>    from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
>    from django.contrib.auth.models import User

>    class UserAdmin(BaseUserAdmin):
>        add_form = MyUserCreationForm

>    admin.site.unregister(User)
>    admin.site.register(User, UserAdmin)

>Dropped support for PostgreSQL 9.1
>----------------------------------

>Upstream support for PostgreSQL 9.1 ends in September 2016. As a consequence,
>Django 1.10 sets PostgreSQL 9.2 as the minimum version it officially supports.

>``runserver`` output goes through logging
>-----------------------------------------

>Request and response handling of the ``runserver`` command is sent to the
>:ref:`django-server-logger` logger instead of to ``sys.stderr``. If you
>disable Django&#39;s logging configuration or override it with your own, you&#39;ll
>need to add the appropriate logging configuration if you want to see that
>output::

>    &#39;formatters&#39;: {
>        &#39;django.server&#39;: {
>            &#39;()&#39;: &#39;django.utils.log.ServerFormatter&#39;,
>            &#39;format&#39;: &#39;[%(server_time)s] %(message)s&#39;,
>        }
>    },
>    &#39;handlers&#39;: {
>        &#39;django.server&#39;: {
>            &#39;level&#39;: &#39;INFO&#39;,
>            &#39;class&#39;: &#39;logging.StreamHandler&#39;,
>            &#39;formatter&#39;: &#39;django.server&#39;,
>        },
>    },
>    &#39;loggers&#39;: {
>        &#39;django.server&#39;: {
>            &#39;handlers&#39;: [&#39;django.server&#39;],
>            &#39;level&#39;: &#39;INFO&#39;,
>            &#39;propagate&#39;: False,
>        }
>    }

>``auth.CustomUser`` and ``auth.ExtensionUser`` test models were removed
>-----------------------------------------------------------------------

>Since the introduction of migrations for the contrib apps in Django 1.8, the
>tables of these custom user test models were not created anymore making them
>unusable in a testing context.

>Apps registry is no longer auto-populated when unpickling models outside of Django
>----------------------------------------------------------------------------------

>The apps registry is no longer auto-populated when unpickling models. This was
>added in Django 1.7.2 as an attempt to allow unpickling models outside of
>Django, such as in an RQ worker, without calling ``django.setup()``, but it
>creates the possibility of a deadlock. To adapt your code in the case of RQ,
>you can `provide your own worker script &lt;http://python-rq.org/docs/workers/&gt;`_
>that calls ``django.setup()``.

>Removed null assignment check for non-null foreign key fields
>-------------------------------------------------------------

>In older versions, assigning ``None`` to a non-nullable ``ForeignKey`` or
>``OneToOneField`` raised ``ValueError(&#39;Cannot assign None: &quot;model.field&quot; does
>not allow null values.&#39;)``. For consistency with other model fields which don&#39;t
>have a similar check, this check is removed.

>Removed weak password hashers from the default ``PASSWORD_HASHERS`` setting
>---------------------------------------------------------------------------

>Django 0.90 stored passwords as unsalted MD5. Django 0.91 added support for
>salted SHA1 with automatic upgrade of passwords when a user logs in. Django 1.4
>added PBKDF2 as the default password hasher.

>If you have an old Django project with MD5 or SHA1 (even salted) encoded
>passwords, be aware that these can be cracked fairly easily with today&#39;s
>hardware. To make Django users acknowledge continued use of weak hashers, the
>following hashers are removed from the default :setting:`PASSWORD_HASHERS`
>setting::

>    &#39;django.contrib.auth.hashers.SHA1PasswordHasher&#39;
>    &#39;django.contrib.auth.hashers.MD5PasswordHasher&#39;
>    &#39;django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher&#39;
>    &#39;django.contrib.auth.hashers.UnsaltedMD5PasswordHasher&#39;
>    &#39;django.contrib.auth.hashers.CryptPasswordHasher&#39;

>Consider using a :ref:`wrapped password hasher &lt;wrapping-password-hashers&gt;` to
>strengthen the hashes in your database. If that&#39;s not feasible, add the
>:setting:`PASSWORD_HASHERS` setting to your project and add back any hashers
>that you need.

>You can check if your database has any of the removed hashers like this::

>    from django.contrib.auth import get_user_model
>    User = get_user_model()

>    # Unsalted MD5/SHA1:
>    User.objects.filter(password__startswith=&#39;md5$$&#39;)
>    User.objects.filter(password__startswith=&#39;sha1$$&#39;)
>    # Salted MD5/SHA1:
>    User.objects.filter(password__startswith=&#39;md5$&#39;).exclude(password__startswith=&#39;md5$$&#39;)
>    User.objects.filter(password__startswith=&#39;sha1$&#39;).exclude(password__startswith=&#39;sha1$$&#39;)
>    # Crypt hasher:
>    User.objects.filter(password__startswith=&#39;crypt$$&#39;)

>    from django.db.models import CharField
>    from django.db.models.functions import Length
>    CharField.register_lookup(Length)
>    # Unsalted MD5 passwords might not have an &#39;md5$$&#39; prefix:
>    User.objects.filter(password__length=32)

>``Field.get_prep_lookup()`` and ``Field.get_db_prep_lookup()`` methods are removed
>----------------------------------------------------------------------------------

>If you have a custom field that implements either of these methods, register a
>custom lookup for it. For example::

>    from django.db.models import Field
>    from django.db.models.lookups import Exact

>    class MyField(Field):
>        ...

>    class MyFieldExact(Exact):
>        def get_prep_lookup(self):
>            # do_custom_stuff_for_myfield
>            ....

>    MyField.register_lookup(MyFieldExact)

>:mod:`django.contrib.gis`
>-------------------------

>* Support for SpatiaLite &lt; 3.0 and GEOS &lt; 3.3 is dropped.

>* The ``add_postgis_srs()`` backwards compatibility alias for
>  ``django.contrib.gis.utils.add_srs_entry()`` is removed.

>* On Oracle/GIS, the :class:`~django.contrib.gis.db.models.functions.Area`
>  aggregate function now returns a ``float`` instead of ``decimal.Decimal``.
>  (It&#39;s still wrapped in a measure of square meters.)

>* The default :class:`~django.contrib.gis.geos.GEOSGeometry` representation (WKT
>  output) is trimmed by default. That is, instead of
>  ``POINT (23.0000000000000000 5.5000000000000000)``, you&#39;ll get
>  ``POINT (23 5.5)``.

>Maximum size of a request body and the number of GET/POST parameters is limited
>-------------------------------------------------------------------------------

>Two new settings help mitigate denial-of-service attacks via large requests:

>* :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE` limits the size that a request body
>  may be. File uploads don&#39;t count towards this limit.
>* :setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS` limits the number of GET/POST
>  parameters that are parsed.

>Applications that receive unusually large form posts may need to tune these
>settings.

>Miscellaneous
>-------------

>* The ``repr()`` of a ``QuerySet`` is wrapped in ``&lt;QuerySet &gt;`` to
>  disambiguate it from a plain list when debugging.

>* ``utils.version.get_version()`` returns :pep:`440` compliant release
>  candidate versions (e.g. &#39;1.10rc1&#39; instead of &#39;1.10c1&#39;).

>* CSRF token values are now required to be strings of 64 alphanumerics; values
>  of 32 alphanumerics, as set by older versions of Django by default, are
>  automatically replaced by strings of 64 characters. Other values are
>  considered invalid. This should only affect developers or users who replace
>  these tokens.

>* The ``LOGOUT_URL`` setting is removed as Django hasn&#39;t made use of it
>  since pre-1.0. If you use it in your project, you can add it to your
>  project&#39;s settings. The default value was ``&#39;/accounts/logout/&#39;``.

>* Objects with a ``close()`` method such as files and generators passed to
>  :class:`~django.http.HttpResponse` are now closed immediately instead of when
>  the WSGI server calls ``close()`` on the response.

>* A redundant ``transaction.atomic()`` call in ``QuerySet.update_or_create()``
>  is removed. This may affect query counts tested by
>  ``TransactionTestCase.assertNumQueries()``.

>* Support for ``skip_validation`` in ``BaseCommand.execute(**options)`` is
>  removed. Use ``skip_checks`` (added in Django 1.7) instead.

>* :djadmin:`loaddata` now raises a ``CommandError`` instead of showing a
>  warning when the specified fixture file is not found.

>* Instead of directly accessing the ``LogEntry.change_message`` attribute, it&#39;s
>  now better to call the ``LogEntry.get_change_message()`` method which will
>  provide the message in the current language.

>* The default error views now raise ``TemplateDoesNotExist`` if a nonexistent
>  ``template_name`` is specified.

>* The unused ``choices`` keyword argument of the ``Select`` and
>  ``SelectMultiple`` widgets&#39; ``render()`` method is removed. The ``choices``
>  argument of the ``render_options()`` method is also removed, making
>  ``selected_choices`` the first argument.

>* Tests that violate deferrable database constraints will now error when run on
>  a database that supports deferrable constraints.

>* Built-in management commands now use indexing of keys in ``options``, e.g.
>  ``options[&#39;verbosity&#39;]``, instead of ``options.get()`` and no longer perform
>  any type coercion. This could be a problem if you&#39;re calling commands using
>  ``Command.execute()`` (which bypasses the argument parser that sets a default
>  value) instead of :func:`~django.core.management.call_command`. Instead of
>  calling ``Command.execute()``, pass the command object as the first argument
>  to ``call_command()``.

>* :class:`~django.contrib.auth.backends.ModelBackend` and
>  :class:`~django.contrib.auth.backends.RemoteUserBackend` now reject inactive
>  users. This means that inactive users can&#39;t login and will be logged
>  out if they are switched from ``is_active=True`` to ``False``. If you need
>  the previous behavior, use the new
>  :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` or
>  :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend`
>  in :setting:`AUTHENTICATION_BACKENDS` instead.

>* In light of the previous change, the test client&#39;s
>  :meth:`~django.test.Client.login()` method no longer always rejects inactive
>  users but instead delegates this decision to the authentication backend.
>  :meth:`~django.test.Client.force_login()` also delegates the decision to the
>  authentication backend, so if you&#39;re using the default backends, you need to
>  use an active user.

>* :func:`django.views.i18n.set_language` may now return a 204 status code for
>  AJAX requests.

>* The ``base_field`` attribute of
>  :class:`~django.contrib.postgres.fields.RangeField` is now a type of field,
>  not an instance of a field.  If you have created a custom subclass of
>  :class:`~django.contrib.postgres.fields.RangeField`, you should change the
>  ``base_field`` attribute.

>* Middleware classes are now initialized when the server starts rather than
>  during the first request.

>* If you override ``is_authenticated()`` or ``is_anonymous()`` in a custom user
>  model, you must convert them to attributes or properties as described in
>  :ref:`the deprecation note &lt;user-is-auth-anon-deprecation&gt;`.

>* When using :attr:`ModelAdmin.save_as=True
>  &lt;django.contrib.admin.ModelAdmin.save_as&gt;`, the &quot;Save as new&quot; button now
>  redirects to the change view for the new object instead of to the model&#39;s
>  changelist. If you need the previous behavior, set the new
>  :attr:`ModelAdmin.save_as_continue
>  &lt;django.contrib.admin.ModelAdmin.save_as_continue&gt;` attribute to ``False``.

>* Required form fields now have the ``required`` HTML attribute. Set the
>  :attr:`Form.use_required_attribute &lt;django.forms.Form.use_required_attribute&gt;`
>  attribute to ``False`` to disable it. You could also add the ``novalidate``
>  attribute to ``&lt;form&gt;`` if you don&#39;t want browser validation. To disable
>  the ``required`` attribute on custom widgets, override the
>  :meth:`Widget.use_required_attribute() &lt;django.forms.Widget.use_required_attribute&gt;`
>  method.

>* The WSGI handler no longer removes content of responses from ``HEAD``
>  requests or responses with a ``status_code`` of 100-199, 204, or 304. Most
>  Web servers already implement this behavior. Responses retrieved using the
>  Django test client continue to have these &quot;response fixes&quot; applied.

>* ``Model.__init__()`` now receives ``django.db.models.DEFERRED`` as the value
>  of deferred fields.

>* The ``Model._deferred`` attribute is removed as dynamic model classes when
>  using ``QuerySet.defer()`` and ``only()`` is removed.

>* :meth:`Storage.save() &lt;django.core.files.storage.Storage.save&gt;` no longer
>  replaces ``&#39;\&#39;`` with ``&#39;/&#39;``. This behavior is moved to
>  :class:`~django.core.files.storage.FileSystemStorage` since this is a storage
>  specific implementation detail. Any Windows user with a custom storage
>  implementation that relies on this behavior will need to implement it in the
>  custom storage&#39;s ``save()`` method.

>* Private :class:`~django.db.models.FileField` methods ``get_directory_name()``
>  and ``get_filename()`` are no longer called (and are now deprecated) which is
>  a backwards incompatible change for users overriding those methods on custom
>  fields. To adapt such code, override ``FileField.generate_filename()`` or
>  :meth:`Storage.generate_filename()
>  &lt;django.core.files.storage.Storage.generate_filename&gt;` instead. It
>  might be possible to use :attr:`~django.db.models.FileField.upload_to` also.

>* The subject of mail sent by ``AdminEmailHandler`` is no longer truncated at
>  989 characters. If you were counting on a limited length, truncate the subject
>  yourself.

>* Private expressions ``django.db.models.expressions.Date`` and ``DateTime``
>  are removed. The new :class:`~django.db.models.functions.datetime.Trunc`
>  expressions provide the same functionality.

>* The ``_base_manager`` and ``_default_manager`` attributes are removed from
>  model instances. They remain accessible on the model class.

>* Accessing a deleted field on a model instance, e.g. after ``del obj.field``,
>  reloads the field&#39;s value instead of raising ``AttributeError``.

>* If you subclass ``AbstractBaseUser`` and override ``clean()``, be sure it
>  calls ``super()``. :meth:`.AbstractBaseUser.normalize_username` is called in
>  a new :meth:`.AbstractBaseUser.clean` method.

>* Private API ``django.forms.models.model_to_dict()`` returns a queryset rather
>  than a list of primary keys for ``ManyToManyField``\s .

>* If ``django.contrib.staticfiles`` is
>  installed, the :ttag:`static`  template tag uses the ``staticfiles`` storage
>  to construct the URL rather than simply joining the value with
>  ``STATIC_ROOT``. The new approach encodes the URL, which could be
>  backwards-incompatible in cases such as including a fragment in a path, e.g.
>  ``{% static &#39;img.svg#fragment&#39; %}``, since the ``#`` is encoded as ``%23``.
>  To adapt, move the fragment outside the template tag:
>  ``{% static &#39;img.svg&#39; %}#fragment``.

>.. _deprecated-features-1.10:

>Features deprecated in 1.10
>===========================

>Direct assignment to a reverse foreign key or many-to-many relation
>-------------------------------------------------------------------

>Instead of assigning related objects using direct assignment::

>    &gt;&gt;&gt; new_list = [obj1, obj2, obj3]
>    &gt;&gt;&gt; e.related_set = new_list

>Use the :meth:`~django.db.models.fields.related.RelatedManager.set` method
>added in Django 1.9::

>        &gt;&gt;&gt; e.related_set.set([obj1, obj2, obj3])

>This prevents confusion about an assignment resulting in an implicit save.

>Non-timezone-aware :class:`~django.core.files.storage.Storage` API
>------------------------------------------------------------------

>The old, non-timezone-aware methods ``accessed_time()``, ``created_time()``,
>and ``modified_time()`` are deprecated in favor of the new ``get_*_time()``
>methods.

>Third-party storage backends should implement the new methods and mark the old
>ones as deprecated. Until then, the new ``get_*_time()`` methods on the base
>:class:`~django.core.files.storage.Storage` class convert ``datetime``\s from
>the old methods as required and emit a deprecation warning as they do so.

>Third-party storage backends may retain the old methods as long as they
>wish to support earlier versions of Django.

>:mod:`django.contrib.gis`
>-------------------------

>* The ``get_srid()`` and ``set_srid()`` methods of
>  :class:`~django.contrib.gis.geos.GEOSGeometry` are deprecated in favor
>  of the :attr:`~django.contrib.gis.geos.GEOSGeometry.srid` property.

>* The ``get_x()``, ``set_x()``, ``get_y()``, ``set_y()``, ``get_z()``, and
>  ``set_z()`` methods of :class:`~django.contrib.gis.geos.Point` are deprecated
>  in favor of the ``x``, ``y``, and ``z`` properties.

>* The ``get_coords()`` and ``set_coords()`` methods of
>  :class:`~django.contrib.gis.geos.Point` are deprecated in favor of the
>  ``tuple`` property.

>* The ``cascaded_union`` property of
>  :class:`~django.contrib.gis.geos.MultiPolygon` is deprecated in favor of the
>  :attr:`~django.contrib.gis.geos.GEOSGeometry.unary_union` property.

>* The ``django.contrib.gis.utils.precision_wkt()`` function is deprecated in
>  favor of :class:`~django.contrib.gis.geos.WKTWriter`.

>``CommaSeparatedIntegerField`` model field
>------------------------------------------

>``CommaSeparatedIntegerField`` is deprecated in favor of
>:class:`~django.db.models.CharField` with the
>:func:`~django.core.validators.validate_comma_separated_integer_list`
>validator::

>    from django.core.validators import validate_comma_separated_integer_list
>    from django.db import models

>    class MyModel(models.Model):
>        numbers = models.CharField(..., validators=[validate_comma_separated_integer_list])

>If you&#39;re using Oracle, ``CharField`` uses a different database field  type
>(``NVARCHAR2``) than ``CommaSeparatedIntegerField`` (``VARCHAR2``). Depending
>on your database settings, this might imply a different encoding, and thus a
>different length (in bytes) for the same contents. If your stored values are
>longer than the 4000 byte limit of ``NVARCHAR2``, you should use ``TextField``
>(``NCLOB``) instead. In this case, if you have any queries that group by the
>field (e.g. annotating the model with an aggregation or using ``distinct()``)
>you&#39;ll need to change them (to defer the field).

>Using a model name as a query lookup when ``default_related_name`` is set
>-------------------------------------------------------------------------

>Assume the following models::

>    from django.db import models

>    class Foo(models.Model):
>        pass

>    class Bar(models.Model):
>        foo = models.ForeignKey(Foo)

>        class Meta:
>            default_related_name = &#39;bars&#39;

>In older versions, :attr:`~django.db.models.Options.default_related_name`
>couldn&#39;t be used as a query lookup. This is fixed and support for the old
>lookup name is deprecated. For example, since ``default_related_name`` is set
>in model ``Bar``, instead of using the model name ``bar`` as the lookup::

>    &gt;&gt;&gt; bar = Bar.objects.get(pk=1)
>    &gt;&gt;&gt; Foo.objects.get(bar=bar)

>use the default_related_name ``bars``::

>    &gt;&gt;&gt; Foo.objects.get(bars=bar)

>.. _search-lookup-replacement:

>``__search`` query lookup
>-------------------------

>The ``search`` lookup, which supports MySQL only and is extremely limited in
>features, is deprecated. Replace it with a custom lookup::

>    from django.db import models

>    class Search(models.Lookup):
>        lookup_name = &#39;search&#39;

>        def as_mysql(self, compiler, connection):
>            lhs, lhs_params = self.process_lhs(compiler, connection)
>            rhs, rhs_params = self.process_rhs(compiler, connection)
>            params = lhs_params + rhs_params
>            return &#39;MATCH (%s) AGAINST (%s IN BOOLEAN MODE)&#39; % (lhs, rhs), params

>    models.CharField.register_lookup(Search)
>    models.TextField.register_lookup(Search)

>.. _user-is-auth-anon-deprecation:

>Using ``User.is_authenticated()`` and ``User.is_anonymous()`` as methods
>------------------------------------------------------------------------

>The ``is_authenticated()`` and ``is_anonymous()`` methods of
>:class:`~django.contrib.auth.models.AbstractBaseUser` and
>:class:`~django.contrib.auth.models.AnonymousUser` classes are now
>properties. They will still work as methods until Django 2.0, but all usage
>in Django now uses attribute access.

>For example, if you use
>:class:`~django.contrib.auth.middleware.AuthenticationMiddleware` and want
>to know whether the user is currently logged-in you would use::

>    if request.user.is_authenticated:
>        ... # Do something for logged-in users.
>    else:
>        ... # Do something for anonymous users.

>instead of ``request.user.is_authenticated()``.

>This change avoids accidental information leakage if you forget to call the
>method, e.g.::

>    if request.user.is_authenticated:
>        return sensitive_information

>If you override these methods in a custom user model, you must change them to
>properties or attributes.

>Django uses a ``CallableBool`` object to allow these attributes to work as both
>a property and a method. Thus, until the deprecation period ends, you cannot
>compare these properties using the ``is`` operator. That is, the following
>won&#39;t work::

>    if request.user.is_authenticated is True:
>        ...

>Custom manager classes available through ``prefetch_related`` must define a ``_apply_rel_filters()`` method
>-----------------------------------------------------------------------------------------------------------

>If you defined a custom manager class available through
>:meth:`~django.db.models.query.QuerySet.prefetch_related` you must make sure
>it defines a ``_apply_rel_filters()`` method.

>This method must accept a :class:`~django.db.models.query.QuerySet` instance
>as its single argument and return a filtered version of the queryset for the
>model instance the manager is bound to.

>The &quot;escape&quot; half of ``django.utils.safestring``
>------------------------------------------------

>The ``mark_for_escaping()`` function and the classes it uses: ``EscapeData``,
>``EscapeBytes``, ``EscapeText``, ``EscapeString``, and ``EscapeUnicode`` are
>deprecated.

>As a result, the &quot;lazy&quot; behavior of the ``escape`` filter (where it would
>always be applied as the last filter no matter where in the filter chain it
>appeared) is deprecated. The filter will change to immediately apply
>:func:`~django.utils.html.conditional_escape` in Django 2.0.

>``Manager.use_for_related_fields`` and inheritance changes
>----------------------------------------------------------

>``Manager.use_for_related_fields`` is deprecated in favor of setting
>:attr:`Meta.base_manager_name &lt;django.db.models.Options.base_manager_name&gt;` on
>the model.

>Model ``Manager`` inheritance will follow MRO inheritance rules in Django 2.0,
>changing the current behavior where managers defined on non-abstract base
>classes aren&#39;t inherited by child classes. A deprecating warning with
>instructions on how to adapt your code is raised if you have any affected
>managers. You&#39;ll either redeclare a manager from an abstract model on the child
>class to override the manager from the concrete model, or you&#39;ll set the
>model&#39;s ``Meta.manager_inheritance_from_future=True`` option to opt-in to the
>new inheritance behavior.

>During the deprecation period, ``use_for_related_fields`` will be honored and
>raise a warning, even if a ``base_manager_name`` is set. This allows
>third-party code to preserve legacy behavior while transitioning to the new
>API. The warning can be silenced by setting
>``silence_use_for_related_fields_deprecation=True`` on the manager.

>Miscellaneous
>-------------

>* The ``makemigrations --exit`` option is deprecated in favor of the
>  :option:`makemigrations --check` option.

>* ``django.utils.functional.allow_lazy()`` is deprecated in favor of the new
>  :func:`~django.utils.functional.keep_lazy` function which can be used with a
>  more natural decorator syntax.

>* The ``shell --plain`` option is deprecated in favor of ``-i python`` or
>  ``--interface python``.

>* Importing from the ``django.core.urlresolvers`` module is deprecated in
>  favor of its new location, :mod:`django.urls`.

>* The template ``Context.has_key()`` method is deprecated in favor of ``in``.

>* The private attribute ``virtual_fields`` of ``Model._meta`` is
>  deprecated in favor of ``private_fields``.

>* The private keyword arguments ``virtual_only`` in
>  ``Field.contribute_to_class()`` and ``virtual`` in
>  ``Model._meta.add_field()`` are deprecated in favor of ``private_only``
>  and ``private``, respectively.

>* The ``javascript_catalog()`` and ``json_catalog()`` views are deprecated in
>  favor of class-based views :class:`~django.views.i18n.JavaScriptCatalog`
>  and :class:`~django.views.i18n.JSONCatalog`.

>* In multi-table inheritance, implicit promotion of a ``OneToOneField`` to a
>  ``parent_link`` is deprecated. Add ``parent_link=True`` to such fields.

>* The private API ``Widget._format_value()`` is made public and renamed to
>  :meth:`~django.forms.Widget.format_value`. The old name will work
>  through a deprecation period.

>* Private ``FileField`` methods ``get_directory_name()`` and ``get_filename()``
>  are deprecated in favor of performing this work in
>  :meth:`Storage.generate_filename()
>  &lt;django.core.files.storage.Storage.generate_filename&gt;`).

>* Old-style middleware that uses  ``settings.MIDDLEWARE_CLASSES`` are
>  deprecated. :ref:`Adapt old, custom middleware &lt;upgrading-middleware&gt;` and
>  use the new :setting:`MIDDLEWARE` setting.

>.. _removed-features-1.10:

>Features removed in 1.10
>========================

>These features have reached the end of their deprecation cycle and are removed
>in Django 1.10. See :ref:`deprecated-features-1.8` for details, including how
>to remove usage of these features.

>* Support for calling a ``SQLCompiler`` directly as an alias for calling its
>  ``quote_name_unless_alias`` method is removed.

>* The ``cycle`` and ``firstof`` template tags are removed from the ``future``
>  template tag library.

>* ``django.conf.urls.patterns()`` is removed.

>* Support for the ``prefix`` argument to
>  ``django.conf.urls.i18n.i18n_patterns()`` is removed.

>* ``SimpleTestCase.urls`` is removed.

>* Using an incorrect count of unpacked values in the ``for`` template tag
>  raises an exception rather than failing silently.

>* The ability to :func:`~django.urls.reverse` URLs using a dotted Python path
>  is removed.

>* The ability to use a dotted Python path for the ``LOGIN_URL`` and
>  ``LOGIN_REDIRECT_URL`` settings is removed.

>* Support for ``optparse`` is dropped for custom management commands.

>* The class ``django.core.management.NoArgsCommand`` is removed.

>* ``django.core.context_processors`` module is removed.

>* ``django.db.models.sql.aggregates`` module is removed.

>* ``django.contrib.gis.db.models.sql.aggregates`` module is removed.

>* The following methods and properties of ``django.db.sql.query.Query`` are
>  removed:

>  * Properties: ``aggregates`` and ``aggregate_select``
>  * Methods: ``add_aggregate``, ``set_aggregate_mask``, and
>    ``append_aggregate_mask``.

>* ``django.template.resolve_variable`` is removed.

>* The following private APIs are removed from
>  :class:`django.db.models.options.Options` (``Model._meta``):

>  * ``get_field_by_name()``
>  * ``get_all_field_names()``
>  * ``get_fields_with_model()``
>  * ``get_concrete_fields_with_model()``
>  * ``get_m2m_with_model()``
>  * ``get_all_related_objects()``
>  * ``get_all_related_objects_with_model()``
>  * ``get_all_related_many_to_many_objects()``
>  * ``get_all_related_m2m_objects_with_model()``

>* The ``error_message`` argument of ``django.forms.RegexField`` is removed.

>* The ``unordered_list`` filter no longer supports old style lists.

>* Support for string ``view`` arguments to ``url()`` is removed.

>* The backward compatible shim  to rename ``django.forms.Form._has_changed()``
>  to ``has_changed()`` is removed.

>* The ``removetags`` template filter is removed.

>* The ``remove_tags()`` and ``strip_entities()`` functions in
>  ``django.utils.html`` is removed.

>* The ``is_admin_site`` argument to
>  ``django.contrib.auth.views.password_reset()`` is removed.

>* ``django.db.models.field.subclassing.SubfieldBase`` is removed.

>* ``django.utils.checksums`` is removed.

>* The ``original_content_type_id`` attribute on
>  ``django.contrib.admin.helpers.InlineAdminForm`` is removed.

>* The backwards compatibility shim to allow ``FormMixin.get_form()`` to be
>  defined with no default value for its ``form_class`` argument is removed.

>* The following settings are removed, and :doc:`you must upgrade
>  &lt;/ref/templates/upgrading&gt;` to the :setting:`TEMPLATES` setting:

>  * ``ALLOWED_INCLUDE_ROOTS``
>  * ``TEMPLATE_CONTEXT_PROCESSORS``
>  * ``TEMPLATE_DEBUG``
>  * ``TEMPLATE_DIRS``
>  * ``TEMPLATE_LOADERS``
>  * ``TEMPLATE_STRING_IF_INVALID``

>* The backwards compatibility alias ``django.template.loader.BaseLoader`` is
>  removed.

>* Django template objects returned by
>  :func:`~django.template.loader.get_template` and
>  :func:`~django.template.loader.select_template` no longer accept a
>  :class:`~django.template.Context` in their
>  :meth:`~django.template.backends.base.Template.render()` method.

>* :doc:`Template response APIs &lt;/ref/template-response&gt;` enforce the use of
>  :class:`dict` and backend-dependent template objects instead of
>  :class:`~django.template.Context` and :class:`~django.template.Template`
>  respectively.

>* The ``current_app`` parameter for the following function and classes is
>  removed:

>  * ``django.shortcuts.render()``
>  * ``django.template.Context()``
>  * ``django.template.RequestContext()``
>  * ``django.template.response.TemplateResponse()``

>* The ``dictionary`` and ``context_instance`` parameters for the following
>  functions are removed:

>  * ``django.shortcuts.render()``
>  * ``django.shortcuts.render_to_response()``
>  * ``django.template.loader.render_to_string()``

>* The ``dirs`` parameter for the following functions is removed:

>  * ``django.template.loader.get_template()``
>  * ``django.template.loader.select_template()``
>  * ``django.shortcuts.render()``
>  * ``django.shortcuts.render_to_response()``

>* Session verification is enabled regardless of whether or not
>  ``&#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;`` is in
>  ``MIDDLEWARE_CLASSES``. ``SessionAuthenticationMiddleware`` no longer has
>  any purpose and can be removed from ``MIDDLEWARE_CLASSES``. It&#39;s kept as
>  a stub until Django 2.0 as a courtesy for users who don&#39;t read this note.

>* Private attribute ``django.db.models.Field.related`` is removed.

>* The ``--list`` option of the ``migrate`` management command is removed.

>* The ``ssi`` template tag is removed.

>* Support for the ``=`` comparison operator in the ``if`` template tag is
>  removed.

>* The backwards compatibility shims to allow ``Storage.get_available_name()``
>  and ``Storage.save()`` to be defined without a ``max_length`",pyup-bot,16239342,2017-02-28T18:49:15Z,CONTRIBUTOR,True,1,1,1,,JavaScript,3281680dcfc7c9c37ce5f69c30746f6e0cd79f68,Update django from 1.9.12 to 1.10.5
281,https://api.github.com/repos/mozilla/distribution-viewer/pulls/203,203,Fixes #200: Update Python dependencies,,robhudson,1106,2017-02-28T16:47:56Z,MEMBER,True,17,18,2,,JavaScript,6ea06c23f84f487b1240f057a91ca439e3f26e45,Fixes #200: Update Python dependencies
282,https://api.github.com/repos/mozilla/distribution-viewer/pulls/199,199,"Fix #189: Show a ""No data"" message",,openjck,933396,2017-02-24T22:27:42Z,CONTRIBUTOR,True,55,5,3,,JavaScript,6447990f9bd1bd4518bd395eeb47c66c26f3c85f,"Fix #189: Show a ""No data"" message"
283,https://api.github.com/repos/mozilla/distribution-viewer/pulls/198,198,Initial Update,"
This is my first visit to this fine repo so I have bundled all updates in a single pull request to make things easier for you to merge. 

*Close this pull request and delete the branch if you want me to start with single pull requests right away*

Here's the executive summary:

## Updates
Here's a list of all the updates bundled in this pull request. I've added some links to make it easier for you to find all the information you need.
<table align=""center"">

<tr>
<td><b>httplib2</b></td>
<td align=""center"">0.9.2</td>
<td align=""center"">&raquo;</td>
<td align=""center"">0.10.3</td>
<td>
     <a href=""http://pypi.python.org/pypi/httplib2"">PyPI</a> | <a href=""https://pyup.io/changelogs/httplib2/"">Changelog</a> | <a href=""https://github.com/httplib2/httplib2"">Repo</a> 

</td>

</tr>
</table>



## Changelogs


### httplib2 0.9.2 -> 0.10.3

>### 0.10.3


>  Fix certificate validation on Python&lt;=2.7.8 without ssl.CertificateError
>  https://github.com/httplib2/httplib2/issues/45



>### 0.10.2


>  Just a reupload of 0.10.1, which was broken for Python3
>  because wheel distribution doesn&#39;t play well with our 2/3 split code base.
>  https://github.com/httplib2/httplib2/issues/43



>### 0.10.1


>  This is the first release by new httplib2 team. See post by Joe
>  https://bitworking.org/news/2016/03/an_update_on_httplib2

>  Remove VeriSign Class 3 CA from trusted certs
>  https://googleonlinesecurity.blogspot.com/2015/12/proactive-measures-in-digital.html

>  Add IdenTrust DST Root CA X3
>  https://github.com/httplib2/httplib2/pull/26

>  Support for specifying the SSL protocol version (Python v2)
>  https://github.com/jcgregorio/httplib2/issues/329

>  On App Engine use urlfetch&#39;s default deadline if None is passed.

>  Fix TypeError on AppEngine “__init__() got an unexpected keyword argument &#39;ssl_version’”
>  https://github.com/httplib2/httplib2/pull/12

>  Send SNI data for SSL connections on Python 2.7.9+
>  Verify the server hostname if certificate validation is enabled
>  https://github.com/httplib2/httplib2/pull/13

>  Add proxy_headers argument to ProxyInfo constructor
>  https://github.com/httplib2/httplib2/pull/21

>  Make disable_ssl_certificate_validation work with Python 3.5.
>  https://github.com/httplib2/httplib2/pull/15

>  Fix socket error handling
>  https://github.com/httplib2/httplib2/commit/eb7468561714a5b700d5a3d8fa1a8794de02b9ef
>  https://github.com/httplib2/httplib2/commit/e7f6e622047107e701ee70e7ec586717d97b0cbb









Once you have closed this pull request, I'll create seperate pull requests for every update as soon as I find them.

That's it for now!

Happy merging! 🤖
",pyup-bot,16239342,2017-02-22T23:49:53Z,CONTRIBUTOR,True,1,1,1,,JavaScript,d43290bb6668d7d6d0dfac1f2a85e21bad787ba2,Update httplib2 from 0.9.2 to 0.10.3
284,https://api.github.com/repos/mozilla/distribution-viewer/pulls/197,197,Config file for pyup.io,"Hi there and thanks for using pyup.io!

Since you are using a non-default config I've created one for you.

There are a lot of things you can configure on top of that, so make sure to check out the [docs](https://pyup.io/docs/configuration/) to see what I can do for you.",pyup-bot,16239342,2017-02-22T23:49:49Z,CONTRIBUTOR,True,4,0,1,,JavaScript,982a56fd974c1fb44bd0ab87d0ecbc446fbb1ada,create pyup.io config file
285,https://api.github.com/repos/mozilla/distribution-viewer/pulls/196,196,Rename metric.metric to metric.name in API output,,openjck,933396,2017-02-22T20:57:06Z,CONTRIBUTOR,True,14,14,4,,JavaScript,da05bd8e512258c766a18eb00b356de8cdcf28fe,Issue #187: More realistic examples in API docs
286,https://api.github.com/repos/mozilla/distribution-viewer/pulls/196,196,Rename metric.metric to metric.name in API output,,openjck,933396,2017-02-22T20:57:06Z,CONTRIBUTOR,True,14,14,4,,JavaScript,e79451634212a613665987880d28442421dd5505,"Fix #187: Rename metric.metric to metric.name

This makes client implementations clearer and improves consistency
within the API. We use the term ""name"" elsewhere, including when this
same value is made available from the /metrics/ endpoint."
287,https://api.github.com/repos/mozilla/distribution-viewer/pulls/195,195,Upgrade npm packages,,openjck,933396,2017-02-22T20:34:15Z,CONTRIBUTOR,True,6,15,2,,JavaScript,3c4c057bf8ecd905c5cac1d6d574ab914384ac78,Issue #192: Upgrade Jest-related packages
288,https://api.github.com/repos/mozilla/distribution-viewer/pulls/195,195,Upgrade npm packages,,openjck,933396,2017-02-22T20:34:15Z,CONTRIBUTOR,True,6,15,2,,JavaScript,0a216e03267de902744eb90192f253df452e23f4,"Issue #192: Stop using gulp-filter

All stylesheets are currently written in Stylus, so there's no reason to
filter for them before running the stylus compiler."
289,https://api.github.com/repos/mozilla/distribution-viewer/pulls/195,195,Upgrade npm packages,,openjck,933396,2017-02-22T20:34:15Z,CONTRIBUTOR,True,6,15,2,,JavaScript,785efa4ca4b974a74cde0121ff3b348b7642c929,Issue #192: Upgrade gulp-clean-css to ^3.0.3
290,https://api.github.com/repos/mozilla/distribution-viewer/pulls/195,195,Upgrade npm packages,,openjck,933396,2017-02-22T20:34:15Z,CONTRIBUTOR,True,6,15,2,,JavaScript,599624ca8379d027d4a264c806e1b4ba08608eb2,Issue #192: Upgrade striptags to ^3.0.1
291,https://api.github.com/repos/mozilla/distribution-viewer/pulls/195,195,Upgrade npm packages,,openjck,933396,2017-02-22T20:34:15Z,CONTRIBUTOR,True,6,15,2,,JavaScript,3ef728d017ec1accd0f44eff5ffb5dc7b483b9f1,Fix #192: Upgrade react-redux to ^5.0.2
292,https://api.github.com/repos/mozilla/distribution-viewer/pulls/194,194,Fix #188: Rename types to numerical/categorical,,openjck,933396,2017-02-21T23:45:37Z,CONTRIBUTOR,True,25,24,8,,JavaScript,ce99505a436a7e3b66a97428a9ccf0c01ceed091,Fix #188: Rename types to numerical/categorical
293,https://api.github.com/repos/mozilla/distribution-viewer/pulls/183,183,"Fix #182: Don't crash when ""All"" is not selected",,openjck,933396,2017-02-15T22:20:26Z,CONTRIBUTOR,True,19,10,2,,JavaScript,883698d8ca6b5d4aeb73f06545a4e8ad129f2322,"Fix #182: Don't crash when ""All"" is not selected"
294,https://api.github.com/repos/mozilla/distribution-viewer/pulls/181,181,API: populations.population -> populations.name,"This is something that came up while implementing the populations
feature. The name population.population ended up being a bit confusing
in the front-end code. This commit renames it to population.name.",openjck,933396,2017-02-15T21:59:31Z,CONTRIBUTOR,True,10,12,4,,JavaScript,fbd5a0348dbf200ab680875795dc65e7d356040f,"API: populations.population -> populations.name

This is something that came up while implementing the populations
feature. The name population.population ended up being a bit confusing
in the front-end code. This commit renames it to population.name."
295,https://api.github.com/repos/mozilla/distribution-viewer/pulls/180,180,Add Google Analytics tracking,,openjck,933396,2017-02-15T21:15:42Z,CONTRIBUTOR,True,38,5,5,,JavaScript,b718c9302b1634d7c79ef6d5d2fb21de044a0534,Fix #173: Add Google Analytics tracking
296,https://api.github.com/repos/mozilla/distribution-viewer/pulls/178,178,Populations frontend,"You'll want to re-import the sample data or the hover descriptions will look weird.

`docker exec distributionviewer_server_1 ./manage.py loaddata fixtures/sample.json`",openjck,933396,2017-02-11T01:44:08Z,CONTRIBUTOR,True,605,173,27,,JavaScript,4375a24a5ed8f5d9e005c7f70e665f1f90c2c1b3,Update configuration page to allow selection of populations
297,https://api.github.com/repos/mozilla/distribution-viewer/pulls/178,178,Populations frontend,"You'll want to re-import the sample data or the hover descriptions will look weird.

`docker exec distributionviewer_server_1 ./manage.py loaddata fixtures/sample.json`",openjck,933396,2017-02-11T01:44:08Z,CONTRIBUTOR,True,605,173,27,,JavaScript,91570d1f9d1ca223343e11e256e0c3ff25a5a0a8,Fix #2: Add front-end for multiple populations
298,https://api.github.com/repos/mozilla/distribution-viewer/pulls/177,177,Add type to metrics API - fixes #176,,robhudson,1106,2017-02-10T18:15:42Z,MEMBER,True,25,11,4,,JavaScript,87589f6385346d620c00c2710697e81896652cc3,Add type to metrics API - fixes #176
299,https://api.github.com/repos/mozilla/distribution-viewer/pulls/171,171,Add populations support to backend,,robhudson,1106,2017-01-04T23:10:25Z,MEMBER,True,131,93,6,,JavaScript,2b14ce70c1d58a105a619982486762a4adcbfe39,Update backend to support multiple populations
300,https://api.github.com/repos/mozilla/distribution-viewer/pulls/171,171,Add populations support to backend,,robhudson,1106,2017-01-04T23:10:25Z,MEMBER,True,131,93,6,,JavaScript,dfc67a9baea0377fc8d378c1b60901e47e2d4158,Update frontend to support new backend JSON schema
301,https://api.github.com/repos/mozilla/distribution-viewer/pulls/170,170,Added new OS populations,,robhudson,1106,2016-12-15T21:30:59Z,MEMBER,True,14,5,1,,JavaScript,c3004a58d18d688ebf1d253d267586b6ff8259a7,Added new OS populations
302,https://api.github.com/repos/mozilla/distribution-viewer/pulls/153,153,Add ON DELETE CASCADE to more easily remove bad datasets,,robhudson,1106,2016-12-02T19:31:05Z,MEMBER,True,55,0,1,,JavaScript,30672f8800edec0191835303077e93b0110189e2,Add ON DELETE CASCADE to more easily remove bad datasets
303,https://api.github.com/repos/mozilla/distribution-viewer/pulls/152,152,Fix #8: Add log option for supported datasets,"Unsupported datasets include non-numerical datasets (for obvious
reasons) and datasets that contain an x-value <= 0, since log is
undefined for numbers <= 0.",openjck,933396,2016-12-01T19:26:32Z,CONTRIBUTOR,True,93,12,5,,JavaScript,46a825fc129ec29a64a31e8e55b78430454bdba2,"Fix #8: Add log option for supported datasets

Unsupported datasets include non-numerical datasets (for obvious
reasons) and datasets that contain an x-value <= 0, since log is
undefined for numbers <= 0."
304,https://api.github.com/repos/mozilla/distribution-viewer/pulls/150,150,Update docker config to test inside container (issue #135),,robhudson,1106,2016-11-16T00:49:48Z,MEMBER,True,90,53,12,,JavaScript,4d85359698b31e0a0d8b4a95b90823369de535ba,Update docker config to test inside container (issue #135)
305,https://api.github.com/repos/mozilla/distribution-viewer/pulls/149,149,Add input checking and resiliency (fixes #137),,robhudson,1106,2016-11-14T21:39:23Z,MEMBER,True,13,6,1,,JavaScript,55281b7145125788c38510558b60cb04700fae98,Add input checking and resiliency (fixes #137)
306,https://api.github.com/repos/mozilla/distribution-viewer/pulls/148,148,Optimizations and start/stop flag/date (fixes #145),,robhudson,1106,2016-11-09T23:28:40Z,MEMBER,True,97,59,4,,JavaScript,6804adf8e099dadb7c3d52ba89e2e0d5ae031a11,Optimizations and start/stop flag/date (fixes #145)
307,https://api.github.com/repos/mozilla/distribution-viewer/pulls/147,147,Update dataset model with new fields (issue #145),,robhudson,1106,2016-11-09T22:50:30Z,MEMBER,True,33,0,2,,JavaScript,74da90db2362d4f772bb2ece5d5780046a2cb545,Update dataset model with new fields (issue #145)
308,https://api.github.com/repos/mozilla/distribution-viewer/pulls/144,144,Add batch import of metric data to admin (fixes #143),,robhudson,1106,2016-11-04T17:55:33Z,MEMBER,True,175,7,10,,JavaScript,53e2c557ca88cd5fa4dfe8e30c6a157050c1eeb6,Add batch import of metric data to admin (fixes #143)
309,https://api.github.com/repos/mozilla/distribution-viewer/pulls/142,142,Use standard login form for /admin/login/,,openjck,933396,2016-11-03T21:53:53Z,CONTRIBUTOR,True,21,0,4,,JavaScript,80ad0002b18e37f1cfceb7e1ee74ab501c4e755b,Use standard login form for /admin/login/
310,https://api.github.com/repos/mozilla/distribution-viewer/pulls/141,141,Set up local development via Docker (issue #135),,robhudson,1106,2016-11-01T22:23:27Z,MEMBER,True,30780,1908,18,,JavaScript,5573e96dbb522204bb9f3d6569ba87d8634406c4,Set up local development via Docker (issue #135)
311,https://api.github.com/repos/mozilla/distribution-viewer/pulls/141,141,Set up local development via Docker (issue #135),,robhudson,1106,2016-11-01T22:23:27Z,MEMBER,True,30780,1908,18,,JavaScript,7ec2f6d2e742c4cde0665398b4b7f063445b5018,Use Django-backed API locally
312,https://api.github.com/repos/mozilla/distribution-viewer/pulls/141,141,Set up local development via Docker (issue #135),,robhudson,1106,2016-11-01T22:23:27Z,MEMBER,True,30780,1908,18,,JavaScript,ecf62397b1150d1640a5f385085005800a224b03,Update all documentation
313,https://api.github.com/repos/mozilla/distribution-viewer/pulls/140,140,Update to use CircleCI,"CircleCI is the preferred platform for building docker images and pushing the to docker hub. This switches our testing from TravisCI to CircleCI.
",robhudson,1106,2016-10-28T23:40:45Z,MEMBER,True,11,45,3,,JavaScript,ae57d16c6e046d13e4328ecd89c557038ea043dc,Update to use CircleCI
314,https://api.github.com/repos/mozilla/distribution-viewer/pulls/140,140,Update to use CircleCI,"CircleCI is the preferred platform for building docker images and pushing the to docker hub. This switches our testing from TravisCI to CircleCI.
",robhudson,1106,2016-10-28T23:40:45Z,MEMBER,True,11,45,3,,JavaScript,ec35ea0cd0c5ce7dde00f03155b9c0f02cc8f3f5,"Attempt to fix ""npm test"" error on CircleCI"
315,https://api.github.com/repos/mozilla/distribution-viewer/pulls/140,140,Update to use CircleCI,"CircleCI is the preferred platform for building docker images and pushing the to docker hub. This switches our testing from TravisCI to CircleCI.
",robhudson,1106,2016-10-28T23:40:45Z,MEMBER,True,11,45,3,,JavaScript,d97f8c5d09a72c5b753804ea1b2fa287a91ce8dd,Attempt to pass tests in CircleCI with babel-jest
316,https://api.github.com/repos/mozilla/distribution-viewer/pulls/140,140,Update to use CircleCI,"CircleCI is the preferred platform for building docker images and pushing the to docker hub. This switches our testing from TravisCI to CircleCI.
",robhudson,1106,2016-10-28T23:40:45Z,MEMBER,True,11,45,3,,JavaScript,a65e89f64f5401856ab52579cd2603186a85e0fe,Override tests so both Django and tox don't run
317,https://api.github.com/repos/mozilla/distribution-viewer/pulls/139,139,Fix #93: Chart descriptions,,openjck,933396,2016-10-27T19:29:36Z,CONTRIBUTOR,True,128,6,11,,JavaScript,c48ad2db780caae974759bd66de7cfd26abf3d8b,Issue #93: Show chart description on detail page
318,https://api.github.com/repos/mozilla/distribution-viewer/pulls/139,139,Fix #93: Chart descriptions,,openjck,933396,2016-10-27T19:29:36Z,CONTRIBUTOR,True,128,6,11,,JavaScript,7c8f7050432325cbd34bf4341fcb7517b29b2c1a,Fix #93: Display tooltip upon hovering chart title
319,https://api.github.com/repos/mozilla/distribution-viewer/pulls/138,138,"Fix #126: Update ""Show outliers"" to work with D3",,openjck,933396,2016-10-27T17:50:46Z,CONTRIBUTOR,True,47,18,2,,JavaScript,0d3b4e03797dccb30329484020961f37210761f6,"Fix #126: Update ""Show outliers"" to work with D3"
320,https://api.github.com/repos/mozilla/distribution-viewer/pulls/136,136,Make detail page chart responsive,,openjck,933396,2016-10-21T22:30:55Z,CONTRIBUTOR,True,92,46,6,,JavaScript,e9f5d3e50109e3aec761ee9edab4d59f96a330c5,Make detail page chart responsive
321,https://api.github.com/repos/mozilla/distribution-viewer/pulls/134,134,work with tooltips from the meta store instead of individual metric,"Concept for how to address propagating the tooltip strings to each individual metric.
",spasovski,391260,2016-10-20T22:39:23Z,CONTRIBUTOR,True,46,10,6,,JavaScript,58c8bdd7b6eb8f80135d04345f81077cbd5e79f4,work with tooltips from the meta store instead of individual metric
322,https://api.github.com/repos/mozilla/distribution-viewer/pulls/133,133,Show a bigger chart on the detail page,,openjck,933396,2016-10-20T18:56:53Z,CONTRIBUTOR,True,9,18,2,,JavaScript,c01d8f3851cfd0d5f56d0dad8be24fa0e315103d,Fix #127: Show a bigger chart on the detail page
323,https://api.github.com/repos/mozilla/distribution-viewer/pulls/132,132,prep work for templated string hovers,"- some styling fixups especially with responsiveness
- supplying the hoverString prop (maps to API metric .tooltip)
",spasovski,391260,2016-10-19T06:18:41Z,CONTRIBUTOR,True,164,289,15,,JavaScript,7753442761687f97148224a2b607b065ad8a1e1d,layout fixups and chart hover text formatting
324,https://api.github.com/repos/mozilla/distribution-viewer/pulls/131,131,Add front-end test infrastructure and simple test,,openjck,933396,2016-10-18T23:11:41Z,CONTRIBUTOR,True,33,2,4,,JavaScript,d47c60c641c2f5aad9cdc7c21fb04d3a8c58847d,Add front-end test infrastructure and simple test
325,https://api.github.com/repos/mozilla/distribution-viewer/pulls/130,130,Add polyfills for Array.from and Object.assign,"No versions of Internet Explorer support these methods.
",openjck,933396,2016-10-18T16:40:55Z,CONTRIBUTOR,False,8,1,2,,JavaScript,e50db4cdc010986373dbc4514ade37291e63e6d9,"Add polyfills for Array.from and Object.assign

No versions of Internet Explorer support these methods."
326,https://api.github.com/repos/mozilla/distribution-viewer/pulls/129,129,Fix #128: Unfilter when ?metrics is removed,,openjck,933396,2016-10-17T21:30:54Z,CONTRIBUTOR,True,14,0,1,,JavaScript,3983377ab45f5ea59444f2c4f4354ddb91972000,Fix #128: Unfilter when ?metrics is removed
327,https://api.github.com/repos/mozilla/distribution-viewer/pulls/125,125,Refactor chart-detail to be fully presentational,,openjck,933396,2016-10-13T22:20:32Z,CONTRIBUTOR,True,29,26,3,,JavaScript,9476f25d32228f781786aa63a55529677e4724b3,Refactor chart-detail to be fully presentational
328,https://api.github.com/repos/mozilla/distribution-viewer/pulls/124,124,raw d3 charts with react initial commit,,spasovski,391260,2016-10-13T18:10:36Z,CONTRIBUTOR,True,492,401,33,,JavaScript,9fa04b48aa2c6a8cab478f5a62d21e3a864f5c4a,raw d3 charts with react initial commit
329,https://api.github.com/repos/mozilla/distribution-viewer/pulls/124,124,raw d3 charts with react initial commit,,spasovski,391260,2016-10-13T18:10:36Z,CONTRIBUTOR,True,492,401,33,,JavaScript,093343a54587140bb61c75d6eb7cf41a28c4267e,Minor code cleanup in chart-line-container
330,https://api.github.com/repos/mozilla/distribution-viewer/pulls/124,124,raw d3 charts with react initial commit,,spasovski,391260,2016-10-13T18:10:36Z,CONTRIBUTOR,True,492,401,33,,JavaScript,cb4f3bde5414d6e7414bd29b7d3842be1356ffd7,"Fix #121, fix #122: Improve the front-end API

This commit improves the front-end API. Each chart is now loaded
individually using Redux. The detail page and ""Show outliers"" button are
fixed in the process.

This setup more closely resembles the setup in Brad Westfall's example.
The store has a single `metrics` object (just like his store has a
single `users` object[1]) and metric data is added to it over time.
Components subscribe to only the metric data they care about.

As in Brad Westfall's example, download status is no longer considered
state. The `metrics` object isn't downloaded; it's assembled. It has no
download status of its own. Thankfully, the download status of
individual metrics can be inferred in container components by checking
for the existence of `this.props.metric`.

[1] https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/376e1b0f37b2fdebabd465063495d7186a91d163/guide-3-redux/app/reducers/user-reducer.js"
331,https://api.github.com/repos/mozilla/distribution-viewer/pulls/123,123,"Fix #121, fix #122: Improve the front-end API","This commit improves the front-end API. Each chart is now loaded
individually using Redux. The detail page and ""Show outliers"" button are
fixed in the process.

This setup more closely resembles the setup in Brad Westfall's example.
The store has a single `metrics` object (just like his store has a
single `users` object[1]) and metric data is added to it over time.
Components subscribe to only the metric data they care about.

As in Brad Westfall's example, download status is no longer considered
state. The `metrics` object isn't downloaded; it's assembled. It has no
download status of its own. Thankfully, the download status of
individual metrics can be inferred in container components by checking
for the existence of `this.props.metric`.

[1] https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/376e1b0f37b2fdebabd465063495d7186a91d163/guide-3-redux/app/reducers/user-reducer.js
",openjck,933396,2016-10-13T04:45:42Z,CONTRIBUTOR,False,164,208,19,,JavaScript,8195ff6c474689d74ad74456c1ee6baf98370bca,"Fix #121, fix #122: Improve the front-end API

This commit improves the front-end API. Each chart is now loaded
individually using Redux. The detail page and ""Show outliers"" button are
fixed in the process.

This setup more closely resembles the setup in Brad Westfall's example.
The store has a single `metrics` object (just like his store has a
single `users` object[1]) and metric data is added to it over time.
Components subscribe to only the metric data they care about.

As in Brad Westfall's example, download status is no longer considered
state. The `metrics` object isn't downloaded; it's assembled. It has no
download status of its own. Thankfully, the download status of
individual metrics can be inferred in container components by checking
for the existence of `this.props.metric`.

[1] https://github.com/bradwestfall/CSS-Tricks-React-Series/blob/376e1b0f37b2fdebabd465063495d7186a91d163/guide-3-redux/app/reducers/user-reducer.js"
332,https://api.github.com/repos/mozilla/distribution-viewer/pulls/119,119,Add tooltip to metric model (issue #94),,robhudson,1106,2016-10-11T22:45:09Z,MEMBER,True,50,12,5,,JavaScript,a1ba41474b5119f38a50838dcdda6e7ec34239b5,Add tooltip to metric model (issue #94)
333,https://api.github.com/repos/mozilla/distribution-viewer/pulls/118,118,Add helping text for auth,"If you have design preferences I'm happy to adjust or merge fix after.

Here's what this looks like currently:
<img width=""1400"" alt=""screenshot 2016-10-11 10 18 34"" src=""https://cloud.githubusercontent.com/assets/1106/19280793/326a9f64-8f9c-11e6-96d1-52fde6808715.png"">
",robhudson,1106,2016-10-11T17:12:42Z,MEMBER,True,12,2,2,,JavaScript,f0cba67b709b4e88742eddeacd72cabcb4bfe836,Add helping text for auth
334,https://api.github.com/repos/mozilla/distribution-viewer/pulls/117,117,raw d3 charts with react initial commit,"### Known issues
- less pretty tooltips (these are blocked on the new string templates)
- details page needs the chart to be resized
### TODO
- [ ] Hovering show _x_ and _y_ values, but not proportion (do we want to show proportion?)
- [ ] Hovering shows _y_ values as a decimal (.99) rather than percentage (99%)
- [ ] No _Not Found_ for invalid chart IDs (#96)
- [ ] Sidebar links don't work
",spasovski,391260,2016-10-07T19:28:04Z,CONTRIBUTOR,False,358,250,16,,JavaScript,9fa04b48aa2c6a8cab478f5a62d21e3a864f5c4a,raw d3 charts with react initial commit
335,https://api.github.com/repos/mozilla/distribution-viewer/pulls/116,116,"Fix #115, fix #112: Load charts with Redux",,openjck,933396,2016-09-30T01:15:52Z,CONTRIBUTOR,True,202,75,19,,JavaScript,4a37ea227b2a9bde40394a37b1039f9cefd164e5,"Fix #115, fix #112: Load charts with Redux"
336,https://api.github.com/repos/mozilla/distribution-viewer/pulls/114,114,"Anon. components, default exports where possible",,openjck,933396,2016-09-29T20:31:43Z,CONTRIBUTOR,True,60,74,15,,JavaScript,a28e57663757181acc8682e7113280a9244c7edd,"Anon. components, default exports where possible"
337,https://api.github.com/repos/mozilla/distribution-viewer/pulls/113,113,Fix #96: Return 404 for invalid chart IDs,,openjck,933396,2016-09-28T22:02:53Z,CONTRIBUTOR,True,15,9,1,,JavaScript,34ad0db367a8f2e8215edbaee0c6d41e72088f07,Fix #96: Return 404 for invalid chart IDs
338,https://api.github.com/repos/mozilla/distribution-viewer/pulls/111,111,Add support for chart filtering via `metrics` query param,"This isn't quite ready yet but I'm using it as a way to lint check and run the tests while developing.
",robhudson,1106,2016-09-28T20:39:04Z,MEMBER,True,115,7,9,,JavaScript,64e5d19b35983c600b0b3d592e8d33285e23481b,"Add dashboard configuration (Fixes #1)

This adds support for filtering the list of charts via the `metrics`
query parameter, along with a configuration view to select which charts
to display."
339,https://api.github.com/repos/mozilla/distribution-viewer/pulls/110,110,Fix logout button prop type warning,,openjck,933396,2016-09-28T19:03:49Z,CONTRIBUTOR,False,1,1,1,,JavaScript,215ac29d27ec160938692326e1e3f1e9090a96c4,Fix logout button prop type warning
340,https://api.github.com/repos/mozilla/distribution-viewer/pulls/109,109,Fix #106: Show error for non-Mozilla email address,,openjck,933396,2016-09-27T22:53:06Z,CONTRIBUTOR,True,16,10,6,,JavaScript,61844c58d65e0625af472f2c457c1c9435e37b6d,Fix #106: Show error for non-Mozilla email address
341,https://api.github.com/repos/mozilla/distribution-viewer/pulls/107,107,Fix #104: Protect API behind authentication,,openjck,933396,2016-09-27T20:05:30Z,CONTRIBUTOR,True,19,84,4,,JavaScript,148ae2982a14d5d7fe04ac4f76443553c1a3c38d,Fix #104: Protect API behind authentication
342,https://api.github.com/repos/mozilla/distribution-viewer/pulls/102,102,Only compress the bundle on production,,openjck,933396,2016-09-22T18:34:36Z,CONTRIBUTOR,True,19,14,1,,JavaScript,bfeed6812ca9175433f598f760e668a25e35082b,Only compress the bundle on production
343,https://api.github.com/repos/mozilla/distribution-viewer/pulls/101,101,Add populations filtering to API (issue #2),,robhudson,1106,2016-09-20T21:30:21Z,MEMBER,True,54,16,7,,JavaScript,c132ec23ff98677c08f422f5d5f396927ee2c38e,Add populations filtering to API (issue #2)
344,https://api.github.com/repos/mozilla/distribution-viewer/pulls/100,100,Fix #98: Compress JavaScript,"The compressed bundle is 36.5% the size of the uncompressed bundle.
",openjck,933396,2016-09-16T22:15:50Z,CONTRIBUTOR,True,9,1,1,,JavaScript,a6c0c9ea0e1ae9f709271c038efa7278d6f0052b,"Fix #98: Compress JavaScript

The compressed bundle is 36.5% the size of the uncompressed bundle."
345,https://api.github.com/repos/mozilla/distribution-viewer/pulls/99,99,"Add ""size"" npm command to analyze bundle size",,openjck,933396,2016-09-16T21:59:44Z,CONTRIBUTOR,True,6,2,3,,JavaScript,dcb4c68c2d3d1ee467ab6bbdf0488585855b8308,"Add ""size"" npm command to analyze bundle size"
346,https://api.github.com/repos/mozilla/distribution-viewer/pulls/97,97,Add ability to edit metrics in Django admin,,robhudson,1106,2016-09-15T16:32:34Z,MEMBER,True,33,8,5,,JavaScript,baa7f1a5d3079ccda1daf60d5ebdfa2cab420f98,Add ability to edit metrics in Django admin
347,https://api.github.com/repos/mozilla/distribution-viewer/pulls/91,91,Fix warnings on chart detail page,,openjck,933396,2016-09-14T22:07:29Z,CONTRIBUTOR,True,2,4,3,,JavaScript,4aa0125baf2a45614744c54749852bfb44f48e47,Fix warnings on chart detail page
348,https://api.github.com/repos/mozilla/distribution-viewer/pulls/90,90,Remove unused $green Stylus variable,,openjck,933396,2016-09-14T22:02:23Z,CONTRIBUTOR,True,0,1,1,,JavaScript,c6227d15c288c97fc2b2060b9f5839a74cf0e80d,Remove unused $green Stylus variable
349,https://api.github.com/repos/mozilla/distribution-viewer/pulls/89,89,Make outliers toggle pretty using react-ios-switch,,openjck,933396,2016-09-14T21:58:29Z,CONTRIBUTOR,False,33,7,4,,JavaScript,bcb7324a228a0c45d34587a79f5b2ac49d479f1d,Make outliers toggle pretty using react-ios-switch
350,https://api.github.com/repos/mozilla/distribution-viewer/pulls/88,88,"Fix #83: Pull latest charts, show correct date",,openjck,933396,2016-09-13T23:13:40Z,CONTRIBUTOR,True,57,28,7,,JavaScript,57c5f95844fc19526af9d18441935b8b0b543ae1,"Fix #83: Pull latest charts, show correct date"
351,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,02eba4a9f406ffcdca8bb17ef23630721a071efd,Login page preceding content pages
352,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,bffc7720b2d11067db8bec68ab46cbc972fcde8c,add sign out button
353,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,28c16eb35458451c800ed33c357de821f852aa2b,Kill Django session on logout
354,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,49e5d1247a1e31bf4b8705b9d210f9f960de20ea,linter fixes
355,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,94d6e50ba064bd090a21e483f3b60eec0033b1c4,Update logout button style
356,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,b3bc94b4c9c13cb8756b790dc091b6339525f13b,Update login button style
357,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,656bc84afcab32c704cddbf5acf504def56bfd0e,"Default to redirecting to /

This fixes a bug where the user would be redirected to None if ?next was
not set."
358,https://api.github.com/repos/mozilla/distribution-viewer/pulls/86,86,Login page preceding content pages,,washort,947487,2016-09-13T06:26:14Z,CONTRIBUTOR,True,211,41,16,,JavaScript,fc370f9e08795250c963219d0839f04443cf879e,Use .button style for logout button
359,https://api.github.com/repos/mozilla/distribution-viewer/pulls/84,84,Upgrade axios,"Like before, there aren't any specific improvements in this new version
that we need to take advantage of, but by upgrading now we can stay
ahead of the curve and hopefully make future upgrades a little easier.
",openjck,933396,2016-09-09T18:18:15Z,CONTRIBUTOR,True,1,1,1,,JavaScript,924d3f32064001922182b454a8510797e4e500ba,"Upgrade axios

Like before, there aren't any specific improvements in this new version
that we need to take advantage of, but by upgrading now we can stay
ahead of the curve and hopefully make future upgrades a little easier."
360,https://api.github.com/repos/mozilla/distribution-viewer/pulls/82,82,Wrap rows of chart rollover table in <tbody>,"React has been complaining about the &lt;tbody&gt; not being present. It is
valid to omit it, but apparently doing so can interfere with React down
the road.[1]

[1] https://github.com/facebook/react/issues/5652
",openjck,933396,2016-09-08T20:16:58Z,CONTRIBUTOR,True,14,12,1,,JavaScript,6d208dc5a64c612c6bd1fdf4dbf45e7d13014129,"Wrap rows of chart rollover table in <tbody>

React has been complaining about the <tbody> not being present. It is
valid to omit it, but apparently doing so can interfere with React down
the road.[1]

[1] https://github.com/facebook/react/issues/5652"
361,https://api.github.com/repos/mozilla/distribution-viewer/pulls/81,81,Read process.env values from the .env file,,openjck,933396,2016-09-07T19:14:17Z,CONTRIBUTOR,False,11,9,5,,JavaScript,74fb345d53b8e0059444ce120d79b078af311751,Read process.env values from the .env file
362,https://api.github.com/repos/mozilla/distribution-viewer/pulls/80,80,Add concept of datasets for historical data (fixes #62),,robhudson,1106,2016-09-06T23:49:39Z,MEMBER,True,139,104,9,,JavaScript,8f00878772a6ea413c0ee1501d3910c27ad9816d,"Add concept of datasets for historical data (fixes #62)

Note: This commit squashes and replaces the initial migrations. You will
need to drop and recreate your database.

For example, run the following commands:

	dropdb distributionviewer
	createdb -Odistributionviewer -Eutf8 distributionviewer
	./manage.py migrate"
363,https://api.github.com/repos/mozilla/distribution-viewer/pulls/79,79,Rename Log to Numeric in data model,"Brendan called this ""numeric"" when we spoke. I called it numeric in the metric model. So I'm extending the name to the data model as well.
",robhudson,1106,2016-09-06T18:59:00Z,MEMBER,True,65,40,8,,JavaScript,f2294a6e8166eb6f18a590ccf7f60360671d245e,Rename Log to Numeric in data model
364,https://api.github.com/repos/mozilla/distribution-viewer/pulls/78,78,Add to API docs,,openjck,933396,2016-09-01T21:13:45Z,CONTRIBUTOR,True,37,19,2,,JavaScript,ec67c80b2e1af75ee2fe64187951aaaf12d0f4d9,Document that data points are always in order
365,https://api.github.com/repos/mozilla/distribution-viewer/pulls/78,78,Add to API docs,,openjck,933396,2016-09-01T21:13:45Z,CONTRIBUTOR,True,37,19,2,,JavaScript,4882022f53302f01dddea961de0b6039280e7951,Document possible type values in API
366,https://api.github.com/repos/mozilla/distribution-viewer/pulls/77,77,Fix #70: Show y values in table below chart,,openjck,933396,2016-09-01T19:21:17Z,CONTRIBUTOR,True,42,11,3,,JavaScript,2bc0122cda7431dca0b302d1c1672700644e262a,Fix #70: Show y values in table below chart
367,https://api.github.com/repos/mozilla/distribution-viewer/pulls/76,76,Update y-axes to more closely match those in Brendan's dashboard,"This updates y-axes to more closely match those in Brendan's dashboard.
",openjck,933396,2016-09-01T17:29:49Z,CONTRIBUTOR,True,7,4,1,,JavaScript,6e216a63a0df0b152b0307744f99266e2d186e25,Show full y-axis from 0% to 100%
368,https://api.github.com/repos/mozilla/distribution-viewer/pulls/76,76,Update y-axes to more closely match those in Brendan's dashboard,"This updates y-axes to more closely match those in Brendan's dashboard.
",openjck,933396,2016-09-01T17:29:49Z,CONTRIBUTOR,True,7,4,1,,JavaScript,3ea827729bde48e53e581c3793a8c0970d7b6f59,Show (ideally) 5 y-axis ticks
369,https://api.github.com/repos/mozilla/distribution-viewer/pulls/75,75,Fix #54: Fix floating-point x-axis labels,"Version 2.10.1 of metrics-graphics fixed this issue about a week ago,
but we didn't see the benefit because we were inadvertently passing
x-axis values as strings.
",openjck,933396,2016-08-31T19:23:41Z,CONTRIBUTOR,True,2,2,2,,JavaScript,4093b2dd2a6ce863fb5e72fa537e9082094e0edf,"Fix #54: Fix floating-point x-axis labels

Version 2.10.1 of metrics-graphics fixed this issue about a week ago,
but we didn't see the benefit because we were inadvertently passing
x-axis values as strings."
370,https://api.github.com/repos/mozilla/distribution-viewer/pulls/74,74,Remove example chart description,"This was fine when we were building a prototype, but now that we're
starting to get real data we should really get rid of it.
",openjck,933396,2016-08-31T18:17:34Z,CONTRIBUTOR,True,2,2,2,,JavaScript,19683ce43a860657bdf5ec54a41608b003992643,"Remove example chart description

This was fine when we were building a prototype, but now that we're
starting to get real data we should really get rid of it."
371,https://api.github.com/repos/mozilla/distribution-viewer/pulls/73,73,Add placeholder 404 page,,openjck,933396,2016-08-31T17:21:07Z,CONTRIBUTOR,True,30,0,4,,JavaScript,c20671200c460c0dedfc2b69a9173040c9ad579d,Add placeholder 404 page
372,https://api.github.com/repos/mozilla/distribution-viewer/pulls/72,72,"Add ""gulp serve:api"" instruction to README",,openjck,933396,2016-08-31T16:54:51Z,CONTRIBUTOR,True,3,2,1,,JavaScript,9907ce47cc9fba6bb2ce029e18472cf1f6c2e58f,"Add ""gulp serve:api"" instruction to README"
373,https://api.github.com/repos/mozilla/distribution-viewer/pulls/71,71,add login url and token check,,washort,947487,2016-08-30T13:42:42Z,CONTRIBUTOR,True,147,34,6,,JavaScript,ea118463bb3716c4b03010f146f34a3f1f33ee86,add login url and token check
374,https://api.github.com/repos/mozilla/distribution-viewer/pulls/69,69,Update metric API to use ID rather than name,,robhudson,1106,2016-08-26T19:32:15Z,MEMBER,True,90,75,17,,JavaScript,9fdbb7f3d6978da95c67e1ba32850af5d7ea1a1f,Update metric API to use ID rather than name
375,https://api.github.com/repos/mozilla/distribution-viewer/pulls/68,68,add real metric list,"Populates the left menu with the real charts. Uses 'name' for now but we should have something more user-readable.
",spasovski,391260,2016-08-26T16:06:50Z,CONTRIBUTOR,True,60,67,11,,JavaScript,8a343c26a928a4a9e832bdae949c9c988111ce6d,add real metric list
376,https://api.github.com/repos/mozilla/distribution-viewer/pulls/67,67,Allow hyphens in metric name (fixes #65),,robhudson,1106,2016-08-25T23:59:20Z,MEMBER,False,4,4,2,,JavaScript,ad781135698adf0ee306c79323e979e2dcee09f9,Allow hyphens in metric name (fixes #65)
377,https://api.github.com/repos/mozilla/distribution-viewer/pulls/64,64,Adding aggregation script,"r? @washort for a light review?

Before merging I would like to have the real data source set up and have tested against that.

TODO:
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1297548
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1286573
- [x] Testing on atmo
",robhudson,1106,2016-08-25T18:33:21Z,MEMBER,True,170,0,2,,JavaScript,cbc0406fb86e97c3059aee9de677c68a8507e884,Add aggregation and import script
378,https://api.github.com/repos/mozilla/distribution-viewer/pulls/64,64,Adding aggregation script,"r? @washort for a light review?

Before merging I would like to have the real data source set up and have tested against that.

TODO:
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1297548
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1286573
- [x] Testing on atmo
",robhudson,1106,2016-08-25T18:33:21Z,MEMBER,True,170,0,2,,JavaScript,a6848c42a1ba219e32cb04db4de8d931bb685339,Update aggregation and import script.
379,https://api.github.com/repos/mozilla/distribution-viewer/pulls/64,64,Adding aggregation script,"r? @washort for a light review?

Before merging I would like to have the real data source set up and have tested against that.

TODO:
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1297548
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1286573
- [x] Testing on atmo
",robhudson,1106,2016-08-25T18:33:21Z,MEMBER,True,170,0,2,,JavaScript,9b9fb74ce1f24a7d45fab1af31f39287c7e70479,Updating TODOs and minor cleanup
380,https://api.github.com/repos/mozilla/distribution-viewer/pulls/64,64,Adding aggregation script,"r? @washort for a light review?

Before merging I would like to have the real data source set up and have tested against that.

TODO:
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1297548
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1286573
- [x] Testing on atmo
",robhudson,1106,2016-08-25T18:33:21Z,MEMBER,True,170,0,2,,JavaScript,f973542ffc2a98d88e57d2d71b5fd29eb5e5fb50,Various fixes discovered while testing on a.t.m.o
381,https://api.github.com/repos/mozilla/distribution-viewer/pulls/64,64,Adding aggregation script,"r? @washort for a light review?

Before merging I would like to have the real data source set up and have tested against that.

TODO:
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1297548
- [x] https://bugzilla.mozilla.org/show_bug.cgi?id=1286573
- [x] Testing on atmo
",robhudson,1106,2016-08-25T18:33:21Z,MEMBER,True,170,0,2,,JavaScript,3cec1f6021585ea67313cc63c43b9b24fd6efeab,Update import script after introducing datasets
382,https://api.github.com/repos/mozilla/distribution-viewer/pulls/63,63,Separate styles into different files,"Just a small change to help us stay organized. I may also follow this up
with a change that allows us to choose which stylesheets to apply on a
given page, making extra specificity like .chart-list .chart
unnecessary.
",openjck,933396,2016-08-24T17:01:10Z,CONTRIBUTOR,True,234,217,6,,JavaScript,ddc303ef75792e0344c51fccbc59de33f5ae4023,"Separate styles into different files

Just a small change to help us stay organized. I may also follow this up
with a change that allows us to choose which stylesheets to apply on a
given page, making extra specificity like .chart-list .chart
unnecessary."
383,https://api.github.com/repos/mozilla/distribution-viewer/pulls/61,61,Updated Metric data model,"This adds a few extra columns required to support the upcoming Spark
script that will aggregate and import data.
",robhudson,1106,2016-08-19T17:49:23Z,MEMBER,True,32,0,2,,JavaScript,34bc91f4258624555d39e514fd7cc78b23cca37e,"Updated Metric data model

This adds a few extra columns required to support the upcoming Spark
script that will aggregate and import data."
384,https://api.github.com/repos/mozilla/distribution-viewer/pulls/59,59,"Add ""Show outliers"" option",,openjck,933396,2016-08-16T22:19:27Z,CONTRIBUTOR,True,175,110,9,,JavaScript,971ec082c8352f0745743ab6520fd897ac00f8fe,"Add ""Show outliers"" option"
385,https://api.github.com/repos/mozilla/distribution-viewer/pulls/58,58,update layout to be more flexy,"- makes things work better on mobile
- removes `position: absolute` from filters
- creates sign-in wrapper for the upcoming auth component 
",spasovski,391260,2016-08-16T21:59:43Z,CONTRIBUTOR,True,84,76,4,,JavaScript,eaa24f3f8b649f3eb51280f6038fe18a9bbbd80a,update layout to be more flexy
386,https://api.github.com/repos/mozilla/distribution-viewer/pulls/57,57,dark theme reskin,"Cleans up the styles and charts a bit. It doesn't have to end up like this in the long run but it's a start. Responsive considerations will be a separate PR.
",spasovski,391260,2016-08-12T04:47:56Z,CONTRIBUTOR,True,210,52,12,,JavaScript,4e0a51a279ff5fd77594d555a586b182c01d7cae,dark theme reskin
387,https://api.github.com/repos/mozilla/distribution-viewer/pulls/56,56,Update front-end dependencies,"""npm outdated"" reported that these packages had newer versions
available. I don't know of any features from the newer versions that we
need right now, but we might as well stay on top of it.
",openjck,933396,2016-08-11T21:30:46Z,CONTRIBUTOR,True,2,2,1,,JavaScript,b9919c8f1a915f809eb2e97886f4b1599dbd579a,"Update front-end dependencies

""npm outdated"" reported that these packages had newer versions
available. I don't know of any features from the newer versions that we
need right now, but we might as well stay on top of it."
388,https://api.github.com/repos/mozilla/distribution-viewer/pulls/55,55,Compress third-party CSS with compiled Stylus,,openjck,933396,2016-08-11T21:20:00Z,CONTRIBUTOR,True,13,2,2,,JavaScript,5ef0b2e6ff1b809a12d63297458ba35377793e32,Compress third-party CSS with compiled Stylus
389,https://api.github.com/repos/mozilla/distribution-viewer/pulls/53,53,add fetching animation for individual charts,"Not entirely happy with the look yet but I want to reskin the project in a later commit. You _could_ say the restyle is fetching :grin: 
",spasovski,391260,2016-08-10T04:28:39Z,CONTRIBUTOR,True,80,27,7,,JavaScript,aef05fc7001b2361da1795e37f6b28053efab095,add fetching animation for individual charts
390,https://api.github.com/repos/mozilla/distribution-viewer/pulls/52,52,Fix logarithmic graphs,,openjck,933396,2016-08-10T00:53:01Z,CONTRIBUTOR,True,10,5,1,,JavaScript,3da4fe05f5e552c40d5b6f6cbad555b19764dca9,Fix logarithmic graphs
391,https://api.github.com/repos/mozilla/distribution-viewer/pulls/51,51,Add testing info to README.md,,openjck,933396,2016-08-09T22:31:48Z,CONTRIBUTOR,True,8,0,1,,JavaScript,eb941d7d1bc0ea25386b7ae1cd31a4a3c3e9fd2a,Add testing info to README.md
392,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,e5d51501ac63ea1483e0223a17a9f8505e1f5de6,MG redux charts WIP
393,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,72610c01eee7b65fc0891e1c530f694823f9c202,Fix all lint errors except for log warnings
394,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,613c31c1d9c49598709b8f122d5417226866f2d0,Fix ChartList import error
395,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,c81a89338ea8838a0113c3b64774934ba915ff1d,"Correct items validation, fix width/height warning"
396,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,06b5d667be98e66a56c31c22f4cd73ececc419c3,Fix ChartList key prop warning
397,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,09f8148bb09876154ec4205e1eb235120cb6e858,top-level redux API hookup
398,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,633476aa95acc8e8f026298beee2b1a4b0b468e3,Remove console log from metric-api.js
399,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,d4d55bf55cf49f9558fdead6aa345764c13a7d5d,Remove metricApi import from chart-container.js
400,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,780482ade683b3f29c2552098ce177feaf435be0,Adjust chart rollover values
401,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,1662084166e6ae7727dcbe8c97857d123a316c3b,Update Redux charts to work on Heroku
402,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,55b9e995f0e74bd2b15a39f55849996bd06a5ac3,Remove unused Redux code for getting single metric
403,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,6eb93b359407ea6a254ce77932ba8ffce4145962,"Ignore ""process"" global in ESLint tests"
404,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,6e02f652e6fd843088ef532c727a6f57b9c4ba35,Load bigger version of chart when clicked
405,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,f56f5b0f363f8adc9501148a13b09856b09bf4f4,Remove comment in chart-container.js
406,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,9814876d486824580b729070784128fa75afd4c0,Use template literals to define mouseover formats
407,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,ab4a9cd4afc1f36e5e02af717de66382dbefd16d,Remove extra linebreak in chart.js
408,https://api.github.com/repos/mozilla/distribution-viewer/pulls/48,48,Use sample data from the backend to generate charts,,openjck,933396,2016-08-06T00:21:49Z,CONTRIBUTOR,True,504,379,37,,JavaScript,94b1fc59e1a183e0623812f384fde106b3f42536,"Fix chart detail page, serve it at /metric/[name]"
409,https://api.github.com/repos/mozilla/distribution-viewer/pulls/47,47,MG redux charts WIP,"DO NO MERGE!

WIP for interim feedback.
",spasovski,391260,2016-08-05T19:42:28Z,CONTRIBUTOR,False,442,292,30,,JavaScript,f89f70cb676d064006836e546720138c64d70d6d,MG redux charts WIP
410,https://api.github.com/repos/mozilla/distribution-viewer/pulls/46,46,Update API docs,,openjck,933396,2016-08-04T19:21:28Z,CONTRIBUTOR,True,33,12,1,,JavaScript,9b435f4e676ae12be1334225cbfca632539a2021,"Update API docs to note that ""name"" is unique"
411,https://api.github.com/repos/mozilla/distribution-viewer/pulls/46,46,Update API docs,,openjck,933396,2016-08-04T19:21:28Z,CONTRIBUTOR,True,33,12,1,,JavaScript,68720e08e648414c84f88a7af9f08a4d3f5d94ef,Update API doc formatting a bit
412,https://api.github.com/repos/mozilla/distribution-viewer/pulls/45,45,Fix #33: Update metrics-graphics,,openjck,933396,2016-08-02T19:25:10Z,CONTRIBUTOR,True,1,1,1,,JavaScript,78105d5bb23d5738680f0168b80d51c0c4b1be74,Fix #33: Update metrics-graphics
413,https://api.github.com/repos/mozilla/distribution-viewer/pulls/44,44,Responsive styles,,openjck,933396,2016-08-01T20:41:22Z,CONTRIBUTOR,True,71,30,5,,JavaScript,7612c9bb274d33c9bc6200f8ca4fc7620c6576f8,Add responsive styles to homepage and detail page
414,https://api.github.com/repos/mozilla/distribution-viewer/pulls/43,43,Add Rob's API docs (#14) to the docs directory,,openjck,933396,2016-07-29T23:06:41Z,CONTRIBUTOR,True,91,0,1,,JavaScript,78f7969d9a3822dccb170635f5f04ed7b0788c1c,Add Rob's API docs (#14) to the docs directory
415,https://api.github.com/repos/mozilla/distribution-viewer/pulls/42,42,Create separate install and run doc sections,,openjck,933396,2016-07-29T22:57:54Z,CONTRIBUTOR,True,40,14,1,,JavaScript,e57f42b848f99f420dfdd7ab272a0a255d0ac328,Create separate install and run doc sections
416,https://api.github.com/repos/mozilla/distribution-viewer/pulls/41,41,Update distributions API to be per metric (fixes #40),,robhudson,1106,2016-07-29T22:15:52Z,MEMBER,True,20,9,3,,JavaScript,f9d370d3c60d806349512ad1c10da7c281ecb625,Update distributions API to be per metric (fixes #40)
417,https://api.github.com/repos/mozilla/distribution-viewer/pulls/39,39,Add metrics API (fixes #35),,robhudson,1106,2016-07-27T21:37:06Z,MEMBER,True,48,5,5,,JavaScript,01ced701c1c0656899bdf90e3e86fb35a6eb08d9,Add metrics API (fixes #35)
418,https://api.github.com/repos/mozilla/distribution-viewer/pulls/38,38,Add API tests (fixes #34),,robhudson,1106,2016-07-27T18:57:48Z,MEMBER,True,74,0,2,,JavaScript,06f3c993eeae186adbd454c2abe19c736cb4d681,Add API tests (fixes #34)
419,https://api.github.com/repos/mozilla/distribution-viewer/pulls/37,37,Fix syntax error in .travis.yml,,openjck,933396,2016-07-27T17:53:42Z,CONTRIBUTOR,True,1,1,1,,JavaScript,712c6248250265b7c9d18acf3ef85622843dbba1,Fix syntax error in .travis.yml
420,https://api.github.com/repos/mozilla/distribution-viewer/pulls/36,36,Run tests with Travis,,openjck,933396,2016-07-27T17:45:57Z,CONTRIBUTOR,True,1720,1709,3,,JavaScript,23dd00c938bb812794f83705f002b672f1e5aa91,Run front-end tests with Travis
421,https://api.github.com/repos/mozilla/distribution-viewer/pulls/36,36,Run tests with Travis,,openjck,933396,2016-07-27T17:45:57Z,CONTRIBUTOR,True,1720,1709,3,,JavaScript,feff8dbd778825c369a684b4771c9b2cc90f6c75,Ignore fakedata.py when running flake8
422,https://api.github.com/repos/mozilla/distribution-viewer/pulls/36,36,Run tests with Travis,,openjck,933396,2016-07-27T17:45:57Z,CONTRIBUTOR,True,1720,1709,3,,JavaScript,c484ed00f9ab58749fdb520eeca96070896ebbfd,Use PostgreSQL 9.4 on Travis
423,https://api.github.com/repos/mozilla/distribution-viewer/pulls/36,36,Run tests with Travis,,openjck,933396,2016-07-27T17:45:57Z,CONTRIBUTOR,True,1720,1709,3,,JavaScript,d2c6135d39e6c0bd650c7757ce6ed28d70c6f7df,Fix spacing in fakedata.py
424,https://api.github.com/repos/mozilla/distribution-viewer/pulls/32,32,Move all devDependencies to dependencies,"The most recent Heroku deploy failed. Heroku runs `gulp build` to build
the application. This process fails because the Gulpfile imports some
`devDependencies`, which Heroku doesn't install.

This change makes all `devDependencies` normal `dependencies` instead.
Alternatively, we could separate development tasks into a separate
Gulpfile.
",openjck,933396,2016-07-26T21:24:38Z,CONTRIBUTOR,True,3,5,1,,JavaScript,61d8284b69988647533196614c63b29a8b7bba92,"Move all devDependencies to dependencies

The most recent Heroku deploy failed. Heroku runs `gulp build` to build
the application. This process fails because the Gulpfile imports some
`devDependencies`, which Heroku doesn't install.

This change makes all `devDependencies` normal `dependencies` instead.
Alternatively, we could separate development tasks into a separate
Gulpfile."
425,https://api.github.com/repos/mozilla/distribution-viewer/pulls/31,31,Add eslint test and make recommended changes,,openjck,933396,2016-07-26T20:17:56Z,CONTRIBUTOR,True,140,66,13,,JavaScript,217695e0d0586ef154568a21c159b43a8f88330c,"Use ES6 in Gulpfile, organize paths and bundles"
426,https://api.github.com/repos/mozilla/distribution-viewer/pulls/31,31,Add eslint test and make recommended changes,,openjck,933396,2016-07-26T20:17:56Z,CONTRIBUTOR,True,140,66,13,,JavaScript,c620dcdd812293cec85e499b306cbb8663c98873,Add eslint test and make recommended changes
427,https://api.github.com/repos/mozilla/distribution-viewer/pulls/30,30,Fix #7: Add chart detail page,,openjck,933396,2016-07-22T21:10:37Z,CONTRIBUTOR,True,120,32,11,,JavaScript,224fcee641e7bf6a3b95001eec04538c1428d465,Fix #7: Add chart detail page
428,https://api.github.com/repos/mozilla/distribution-viewer/pulls/29,29,Add example date range from mocks,,openjck,933396,2016-07-20T21:20:28Z,CONTRIBUTOR,True,25,1,4,,JavaScript,2406d556c33f49c726aefd5afad65e44fa608f27,Add example date range from mocks
429,https://api.github.com/repos/mozilla/distribution-viewer/pulls/28,28,Use ES6 class to define ExampleReduxChartContainer,,openjck,933396,2016-07-20T20:49:38Z,CONTRIBUTOR,True,6,5,1,,JavaScript,b314c3d6c463c3fbb6eedf88fbdd917c6254b5d2,Use ES6 class to define ExampleReduxChartContainer
430,https://api.github.com/repos/mozilla/distribution-viewer/pulls/27,27,Add sidebar from mocks,,openjck,933396,2016-07-20T18:02:09Z,CONTRIBUTOR,True,61,13,5,,JavaScript,444d4fab3dd65c12b4645ddf0e498b7aebb9229c,Add sidebar from mocks
431,https://api.github.com/repos/mozilla/distribution-viewer/pulls/26,26,Replace rd3 with metrics-graphics,"Two known issues:
1. I was able to make rd3 show specific tick marks like Brendan does ([screenshot](https://cloud.githubusercontent.com/assets/933396/16857107/f37cbcc4-49eb-11e6-8b38-54852dcc34e2.png)), but I wasn't able to make metrics-graphics do the same ([screenshot](https://cloud.githubusercontent.com/assets/933396/16857108/f37cfa7c-49eb-11e6-8cc4-8d91eaf24061.png))
2. All of the x-axis labels are bunched up below the first chart ([screenshot](https://cloud.githubusercontent.com/assets/933396/16857228/8eac2ec8-49ec-11e6-8199-3fa19cab3a54.png)). It looks like this might be a bug in metrics-graphics.
",openjck,933396,2016-07-14T22:00:22Z,CONTRIBUTOR,True,33,27,4,,JavaScript,4b635b82b92bd6377387242812a422c053f079ea,Replace rd3 with metrics-graphics
432,https://api.github.com/repos/mozilla/distribution-viewer/pulls/25,25,Build and use Stylus source maps,,openjck,933396,2016-07-14T19:48:48Z,CONTRIBUTOR,True,4,0,2,,JavaScript,c498d274457f38a925cc0501e8f0bd07a155de30,Build and use Stylus source maps
433,https://api.github.com/repos/mozilla/distribution-viewer/pulls/24,24,Use ES6 classes to define ChartListContainer,"Open to discussion. Personally I find the object-oriented approach easier to read.
",openjck,933396,2016-07-14T18:57:20Z,CONTRIBUTOR,True,17,19,2,,JavaScript,2582e2effa5ffcb7f166e6b1b8dcc4ee2cfe527d,Use ES6 classes to define ChartListContainer
434,https://api.github.com/repos/mozilla/distribution-viewer/pulls/23,23,redux example charts listing,"We'll really need to finalize the JSON structure but this should be a start to populating fake data for MG. 
",spasovski,391260,2016-07-13T20:38:15Z,CONTRIBUTOR,True,202,3,13,,JavaScript,f3203ddbf1719fa02af6f39fccb4dec2acef2077,redux example charts listing
435,https://api.github.com/repos/mozilla/distribution-viewer/pulls/22,22,Add chart list and basic styles,,openjck,933396,2016-07-12T21:29:24Z,CONTRIBUTOR,True,100,11,9,,JavaScript,21b08d41bd058a0777c7a2c76c18014cd5fd1b9f,"Add some basic styles

Credit where credit's due; these styles are basically just a copy of
Davor's styles for SHIELDDash."
436,https://api.github.com/repos/mozilla/distribution-viewer/pulls/22,22,Add chart list and basic styles,,openjck,933396,2016-07-12T21:29:24Z,CONTRIBUTOR,True,100,11,9,,JavaScript,388182bed2e9e34d748535a7ff0e85d54250968b,Fix #12: Add list of example charts on homepage
437,https://api.github.com/repos/mozilla/distribution-viewer/pulls/21,21,Add some basic styles,"Credit where credit's due; these styles are basically just a copy of
Davor's styles for SHIELDDash.
",openjck,933396,2016-07-12T20:06:48Z,CONTRIBUTOR,False,48,6,4,,JavaScript,5b75dc035c625dfca776d8272b2cda45055c8701,"Add some basic styles

Credit where credit's due; these styles are basically just a copy of
Davor's styles for SHIELDDash."
438,https://api.github.com/repos/mozilla/distribution-viewer/pulls/19,19,Add example chart to homepage,,openjck,933396,2016-07-11T21:39:29Z,CONTRIBUTOR,True,73,8,6,,JavaScript,385054548b1f758a8fd02f968b9c2a725f1bb447,Add example chart to homepage
439,https://api.github.com/repos/mozilla/distribution-viewer/pulls/18,18,Add LICENSE,"When we added a LICENSE file to the [mozilla/kuma](https://github.com/mozilla/kuma) repo, it [was recommended](https://github.com/mozilla/kuma/pull/1000#issuecomment-17811789) that we have all contributors document their permission to use the new license in writing.

We should probably do the same here. If you've contributed to this repo (see the list below) and give permission for us to use the MPL 2, please add the following comment:

**I give my permission to license under the MPL 2 any contributions I have made to the distribution-viewer codebase.**
## Contributors
- [x] Allen Short (@washort)
- [x] Davor Spasovski (@spasovski)
- [x] John Karahalis
",openjck,933396,2016-07-11T16:45:59Z,CONTRIBUTOR,True,373,0,1,,JavaScript,ac53fccd65546aff75ca7a845f5267959c3bfc17,Add LICENSE
440,https://api.github.com/repos/mozilla/distribution-viewer/pulls/17,17,Add React skeleton,"Redux was intentionally not added at this stage, not because we
shouldn't use it, but because there's not much setup to do until we have
some real-world use cases.
",openjck,933396,2016-07-08T21:22:31Z,CONTRIBUTOR,True,81,11,14,,JavaScript,04787913171059ec5939b83c67f69ab1a2002ff8,"Add React skeleton

Redux was intentionally not added at this stage, not because we
shouldn't use it, but because there's not much setup to do until we have
some real-world use cases."
441,https://api.github.com/repos/mozilla/distribution-viewer/pulls/15,15,Add basic development docs,,openjck,933396,2016-07-08T20:20:02Z,CONTRIBUTOR,True,22,0,1,,JavaScript,8b74a190cf26b2d880d931c11aaf9e5a54b1a2b2,Add basic development docs
