,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/build-tooltool/pulls/47,47,moving tooltool.py to new location,,garbas,20208,2019-04-17T11:46:41Z,NONE,True,1,3078,15,A tool for fetching binary artifacts for builds and tests,,8d739683dbab92c1d8734425da3661be9e61944b,moving tooltool.py to new location
1,https://api.github.com/repos/mozilla/build-tooltool/pulls/45,45,Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas.
",bclary,1934422,2018-11-09T11:54:48Z,NONE,True,2,3,1,A tool for fetching binary artifacts for builds and tests,,3ba4d72c0af9bf193c948631cdcf06d8c38cc28e,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas."
2,https://api.github.com/repos/mozilla/build-tooltool/pulls/44,44,Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas.
",bclary,1934422,2018-11-09T11:42:13Z,NONE,False,1,2,1,A tool for fetching binary artifacts for builds and tests,,d94265e155602d0ebcf6b4fd5430aa53643d3c2e,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas."
3,https://api.github.com/repos/mozilla/build-tooltool/pulls/43,43,Bug 1501802 - Update tooltool.py fetch_file,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas.",bclary,1934422,2018-11-09T11:27:15Z,NONE,False,1,2,1,A tool for fetching binary artifacts for builds and tests,,d94265e155602d0ebcf6b4fd5430aa53643d3c2e,"Bug 1501802 - Update tooltool.py fetch_file to log.info exceptions instead of log.debug, r=garbas."
4,https://api.github.com/repos/mozilla/build-tooltool/pulls/42,42,remove py26 support,this will fix travis build,garbas,20208,2018-06-29T14:20:29Z,NONE,True,2,4,3,A tool for fetching binary artifacts for builds and tests,,ac67475af6703dcb4bd9efecc3646f54f53939b1,remove py26 support
5,https://api.github.com/repos/mozilla/build-tooltool/pulls/41,41,Updated base_url to point to the new tooltool location,"Based on :garbas' work on the ToolTool Migration, we now have to set the base url to tooltool.mozilla-releng.net",Akhliskun,25681178,2018-06-29T13:58:54Z,NONE,False,1,1,1,A tool for fetching binary artifacts for builds and tests,,60cace062a69d65f13bde1ccd99e6de13d0baf29,Updated base_url to point to the new tooltool location
6,https://api.github.com/repos/mozilla/build-tooltool/pulls/40,40,new url for tooltool,,garbas,20208,2017-10-09T11:36:56Z,NONE,True,3,3,2,A tool for fetching binary artifacts for builds and tests,,54d8d3835e7d3eb79e475f4ff329539de0b02e17,new url for tooltool
7,https://api.github.com/repos/mozilla/build-tooltool/pulls/40,40,new url for tooltool,,garbas,20208,2017-10-09T11:36:56Z,NONE,True,3,3,2,A tool for fetching binary artifacts for builds and tests,,fca9f4d783a7994fb8b61f830cee67c60309422c,fixing the tests for the url change
8,https://api.github.com/repos/mozilla/build-tooltool/pulls/37,37,Bump version to 1.3.0.,"This is vague semversioning based on new features which have
each been in use for a while. Imagining

- Adding setup scripts would be 1.1.0.
- Adding the 'unpack' key would be 1.2.0.
- Adding the 'version' key would be 1.3.0.",rillian,225102,2016-12-21T21:43:32Z,NONE,True,1,1,1,A tool for fetching binary artifacts for builds and tests,,9b01f35165fd38269d1851dca2042b09bbedb843,"Bump version to 1.3.0.

This is vague semversioning based on new features which have
each been in use for a while. Imagining

- Adding setup scripts would be 1.1.0.
- Adding the 'unpack' key would be 1.2.0.
- Adding the 'version' key would be 1.3.0."
9,https://api.github.com/repos/mozilla/build-tooltool/pulls/36,36,Add a --version switch for adding file version keys,Add a command-line switch for inserting the `version` keys we've been using to mark toolchain records in gecko manifests.,rillian,225102,2016-12-21T18:54:44Z,NONE,True,50,21,2,A tool for fetching binary artifacts for builds and tests,,5a6b3eb48fca2fccc9f78f639f1a7c119755f463,"Add a --version switch for recording file version strings.

In automation usage it's difficult to use versioned filename
like in a traditional release tarball because scripts would
need to parse out and use the versioned directory after
unpacking.

It has therefore become fasionable to include a 'version' key in
manifest files to identifying the specific revision represented
by a hash. This commits adds a command-line switch to set this
when adding a file for convenience."
10,https://api.github.com/repos/mozilla/build-tooltool/pulls/36,36,Add a --version switch for adding file version keys,Add a command-line switch for inserting the `version` keys we've been using to mark toolchain records in gecko manifests.,rillian,225102,2016-12-21T18:54:44Z,NONE,True,50,21,2,A tool for fetching binary artifacts for builds and tests,,05d34ff0f9f730f9e23aeb0ac2e5991367762504,Update existing tests for new 'version' add_files option.
11,https://api.github.com/repos/mozilla/build-tooltool/pulls/36,36,Add a --version switch for adding file version keys,Add a command-line switch for inserting the `version` keys we've been using to mark toolchain records in gecko manifests.,rillian,225102,2016-12-21T18:54:44Z,NONE,True,50,21,2,A tool for fetching binary artifacts for builds and tests,,03a9b79a6d6d88dae14d1b8750fa2210d4840ebd,Add tests for --version switch.
12,https://api.github.com/repos/mozilla/build-tooltool/pulls/35,35,Fall back to shasum if sha512sum isn't available.,"MacOS doesn't provide sha512sum, but 'shasum -a 512' works
equivalently. Check for sha512sum and fall back to shasum
if it is available instead. This helps the shell tests to
run on MacOS systems.",rillian,225102,2016-12-21T18:34:35Z,NONE,True,11,1,1,A tool for fetching binary artifacts for builds and tests,,3d3c2f9ab6f427ccaf5f486dada9cb3a43dedfe6,"Fall back to shasum if sha512sum isn't available.

MacOS doesn't provide sha512sum, but 'shasum -a 512' works
equivalently. Check for sha512sum and fall back to shasum
if it is available instead. This helps the shell tests to
run on MacOS systems."
13,https://api.github.com/repos/mozilla/build-tooltool/pulls/34,34,Indent json when writing manifest files.,"Previously, tooltool manifests used no indenting (except when it
was added manually). Instead use a 2-space indent.

A code-oriented editor will maintain the intent scheme, so it's
no harder to update, but is much easier see the stanza boundaries
by eye.

The digest lines are already over 80 characters, so this doesn't
change the line-wrapping behaviour (145 vs 141 columns).",rillian,225102,2016-11-23T22:23:29Z,NONE,True,1,1,1,A tool for fetching binary artifacts for builds and tests,,9accc7125a95290feb117e4a9a5eb305855f7b71,"Indent json when writing manifest files.

Previously, tooltool manifests used no indenting (except when it
was added manually). Instead use a 2-space indent.

A code-oriented editor will maintain the intent scheme, so it's
no harder to update, but is much easier see the stanza boundaries
by eye.

The digest lines are already over 80 characters, so this doesn't
change the line-wrapping behaviour (145 vs 141 columns)."
14,https://api.github.com/repos/mozilla/build-tooltool/pulls/33,33,specify binary mode in all open(..) calls,This fixed upload issues on Windows per [this comment](https://bugzilla.mozilla.org/show_bug.cgi?id=1316249),djmitche,28673,2016-11-10T15:02:52Z,NONE,True,3,3,1,A tool for fetching binary artifacts for builds and tests,,cdb041b935d4c51777efb2f56910d0d3f0fac269,specify binary mode in all open(..) calls
15,https://api.github.com/repos/mozilla/build-tooltool/pulls/32,32,fix typo in --visibility help text,"Just a small fix.
",froydnj,151096,2016-10-05T14:03:07Z,NONE,True,1,1,1,A tool for fetching binary artifacts for builds and tests,,a0291b6714460d84358c48e6845662ba89eea6d9,fix typo in --visibility help text
16,https://api.github.com/repos/mozilla/build-tooltool/pulls/31,31,"Implement ""includes"" directive in manifest files","I know that tooltool is supposed to be simple, but the in-tree gecko tooltool manifests are growing a disturbing amount of duplication. I wonder if you would consider the addition of an 'includes' directive.

With this PR, all existing manifests are still valid, but you can also include other manifests:

```
{
    'includes': [ 'submanifest1', 'submanifest2' ],
    'files': [
       { 'filename': '...', ... }
    ]
}
```

This will allow factoring out common pieces of tooltool manifests so that eg you can say ""install everything that desktop firefox uses plus this other package"".
",hotsphink,78649,2016-06-22T22:37:38Z,NONE,False,137,62,2,A tool for fetching binary artifacts for builds and tests,,52f842493c23ec0bee1097cd19e9026b01626063,"Implement ""includes"" directive in manifest files"
17,https://api.github.com/repos/mozilla/build-tooltool/pulls/30,30,Add --unpack switch.,"I finally got around to fixing the tests. I think it passes now. Let me know if you want it rebased.
",rillian,225102,2016-02-04T23:47:52Z,NONE,True,56,14,2,A tool for fetching binary artifacts for builds and tests,,0170cd28b356c6b6c89374beba2862aa49058032,"Add an option for setting the unpack attribute.

Useful when adding files since we almost always want this now."
18,https://api.github.com/repos/mozilla/build-tooltool/pulls/30,30,Add --unpack switch.,"I finally got around to fixing the tests. I think it passes now. Let me know if you want it rebased.
",rillian,225102,2016-02-04T23:47:52Z,NONE,True,56,14,2,A tool for fetching binary artifacts for builds and tests,,9aa69d058ff80f0d418e1803381c30b69b877ef4,"Add --unpack switch.

This sets 'unpack: true' in the manifest, which is ignored on upload,
but useful when updating download manifests referencing archives."
19,https://api.github.com/repos/mozilla/build-tooltool/pulls/30,30,Add --unpack switch.,"I finally got around to fixing the tests. I think it passes now. Let me know if you want it rebased.
",rillian,225102,2016-02-04T23:47:52Z,NONE,True,56,14,2,A tool for fetching binary artifacts for builds and tests,,ffeb6d6ebbe98bc306c8a647d92c12234d59ca73,Add tests for --unpack.
20,https://api.github.com/repos/mozilla/build-tooltool/pulls/30,30,Add --unpack switch.,"I finally got around to fixing the tests. I think it passes now. Let me know if you want it rebased.
",rillian,225102,2016-02-04T23:47:52Z,NONE,True,56,14,2,A tool for fetching binary artifacts for builds and tests,,c8cc08de13dd8566e502be56d59c6c210dc75f5d,Merge branch 'master' into unpack
21,https://api.github.com/repos/mozilla/build-tooltool/pulls/30,30,Add --unpack switch.,"I finally got around to fixing the tests. I think it passes now. Let me know if you want it rebased.
",rillian,225102,2016-02-04T23:47:52Z,NONE,True,56,14,2,A tool for fetching binary artifacts for builds and tests,,cfc0637579c38330cb99437fba8cb04964c695e3,"Fix up tests for --unpack switch.

Pass unpack or set a default for all uses of add_file.

Add new test variants for the 'add' command with --unpack."
22,https://api.github.com/repos/mozilla/build-tooltool/pulls/29,29,don't add trailing whitepace when writing manifest entries,"The json module documentation notes that if |indent| is specified to
|json.dump|, trailing whitespace may be added to the output.  To prevent
this, it suggests specifying |separators| with no space after the item
separator.  Let's make this change to make manifest files a little
tidier, along with a test to ensure we don't regress.
",froydnj,151096,2016-01-26T19:48:52Z,NONE,True,4,1,2,A tool for fetching binary artifacts for builds and tests,,cf72a42b97f0795b1fcd107639c9653cc715a48a,"don't add trailing whitepace when writing manifest entries

The json module documentation notes that if |indent| is specified to
|json.dump|, trailing whitespace may be added to the output.  To prevent
this, it suggests specifying |separators| with no space after the item
separator.  Let's make this change to make manifest files a little
tidier, along with a test to ensure we don't regress."
23,https://api.github.com/repos/mozilla/build-tooltool/pulls/28,28,remove references to being a relengapi component,"@Callek r?
",djmitche,28673,2015-11-04T19:35:03Z,NONE,True,3,6,4,A tool for fetching binary artifacts for builds and tests,,759cb674d1c13ff018e69f99f386c8cb4b9563fd,remove references to being a relengapi component
24,https://api.github.com/repos/mozilla/build-tooltool/pulls/27,27,Run validate.sh with tox.,"Example of setting up the test environment with tox instead, per @Callek in #26.

Two issues: travis tests verify with py26 as well, but that's hard for me. Fedora doesn't package it, and as far as I can tell, pip and tox can't install it. https://stackoverflow.com/questions/19858961/install-older-version-of-python-via-pip

I didn't update .travis.yml, but shoud.
",rillian,225102,2015-11-04T19:02:15Z,NONE,True,25,9,3,A tool for fetching binary artifacts for builds and tests,,0a2765330d65534f873c4444b7cf2c6870ed2e35,"Run validate.sh with tox.

Try this with:

  pip install tox
  tox

You can also `tox -e py27` to run with just a specific version."
25,https://api.github.com/repos/mozilla/build-tooltool/pulls/27,27,Run validate.sh with tox.,"Example of setting up the test environment with tox instead, per @Callek in #26.

Two issues: travis tests verify with py26 as well, but that's hard for me. Fedora doesn't package it, and as far as I can tell, pip and tox can't install it. https://stackoverflow.com/questions/19858961/install-older-version-of-python-via-pip

I didn't update .travis.yml, but shoud.
",rillian,225102,2015-11-04T19:02:15Z,NONE,True,25,9,3,A tool for fetching binary artifacts for builds and tests,,920f8e76719403f48cb48678373e4219b465be84,"Use tox to run validation.sh on travis.

We should still run on both python 2.6 and python 2.7,
as two parallel travis jobs."
26,https://api.github.com/repos/mozilla/build-tooltool/pulls/27,27,Run validate.sh with tox.,"Example of setting up the test environment with tox instead, per @Callek in #26.

Two issues: travis tests verify with py26 as well, but that's hard for me. Fedora doesn't package it, and as far as I can tell, pip and tox can't install it. https://stackoverflow.com/questions/19858961/install-older-version-of-python-via-pip

I didn't update .travis.yml, but shoud.
",rillian,225102,2015-11-04T19:02:15Z,NONE,True,25,9,3,A tool for fetching binary artifacts for builds and tests,,13e4aca9e452f8d013ca9529a912f936dff94f11,"Use TOXENV to pass python version on travis.

This is cleaner than using a custom script, since tox already
looks here for matrix variants. Based on the example of
https://github.com/hynek/structlog/blob/master/.travis.yml

Thanks to Callek for the pointer."
27,https://api.github.com/repos/mozilla/build-tooltool/pulls/26,26,Run validate.sh from the Makefile.,"I always forget about this test, only have travis complain
about missing coverage, etc. So run it from the default
make target.

As a pre-dependency, construct a python virtualenv under
_relengapi and install the testing dependencies there.

Add a 'make clean' target to remove the _relengapi virualenv.
",rillian,225102,2015-11-04T00:02:33Z,NONE,False,13,2,1,A tool for fetching binary artifacts for builds and tests,,9d0f29bf8e24cb93e67f874e31af398e3cf41836,"Run validate.sh from the Makefile.

I always forget about this test, only have travis complain
about missing coverage, etc. So run it from the default
make target.

As a pre-dependency, construct a python virtualenv under
_relengapi and install the testing dependencies there.

Add a 'make clean' target to remove the _relengapi virualenv."
28,https://api.github.com/repos/mozilla/build-tooltool/pulls/25,25,Add --unpack switch.,"I find this helpful for automation, to get the 'unpack' attribute for set in the manifest at add time so it's easy to propagate to the releng.manifest in-tree.
",rillian,225102,2015-11-03T21:40:49Z,NONE,False,16,2,2,A tool for fetching binary artifacts for builds and tests,,0170cd28b356c6b6c89374beba2862aa49058032,"Add an option for setting the unpack attribute.

Useful when adding files since we almost always want this now."
29,https://api.github.com/repos/mozilla/build-tooltool/pulls/25,25,Add --unpack switch.,"I find this helpful for automation, to get the 'unpack' attribute for set in the manifest at add time so it's easy to propagate to the releng.manifest in-tree.
",rillian,225102,2015-11-03T21:40:49Z,NONE,False,16,2,2,A tool for fetching binary artifacts for builds and tests,,9aa69d058ff80f0d418e1803381c30b69b877ef4,"Add --unpack switch.

This sets 'unpack: true' in the manifest, which is ignored on upload,
but useful when updating download manifests referencing archives."
30,https://api.github.com/repos/mozilla/build-tooltool/pulls/25,25,Add --unpack switch.,"I find this helpful for automation, to get the 'unpack' attribute for set in the manifest at add time so it's easy to propagate to the releng.manifest in-tree.
",rillian,225102,2015-11-03T21:40:49Z,NONE,False,16,2,2,A tool for fetching binary artifacts for builds and tests,,ffeb6d6ebbe98bc306c8a647d92c12234d59ca73,Add tests for --unpack.
31,https://api.github.com/repos/mozilla/build-tooltool/pulls/24,24,Log 'rm tree' before 'untarring',"This confused us in bug 1187047.  There was no actual problem, but the
logging for cleaning the tree came after the logging for untarring,
suggesting that tooltool.py was deleting the directory just after
untarring it.

@rillian mind having a look, since you just touched this code?
",djmitche,28673,2015-07-24T20:52:18Z,NONE,True,2,2,1,A tool for fetching binary artifacts for builds and tests,,988b396dc6bd9671a37425c470b2b5c0beb1f019,"Log 'rm tree' before 'untarring'

This confused us in bug 1187047.  There was no actual problem, but the
logging for cleaning the tree came after the logging for untarring,
suggesting that tooltool.py was deleting the directory just after
untarring it."
32,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,2df69aa36c233ec5f6006c7bb96769f89370fb38,Add a time to live field to the manifest
33,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,a875bff8641dd59230a59d3dd474888af2abb508,Unbreak broken tests with addition of ttl
34,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,ef2bedbe069ae91d8219ec0639ea2608aa6614a7,Add tests for code coverage
35,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,0e005385e2a0dc0131f9ed024f01ff4b0861761c,[fixes] Update documentation and remove max ttl value
36,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,be27588def8cc7c5bdf3532f8c4aba2e7c0d7f05,Fix code coverage
37,https://api.github.com/repos/mozilla/build-tooltool/pulls/23,23,﻿Bug 1167636 - Add option for TTL,"This adds a --ttl option in the tooltool client, which will optionally add a ttl field to the manifest that is an integer in days. Valid values for the time to live are between 1 to 365 days, inclusive. I figure having the file expire any longer than that isn't all that useful, this would normally be used for smaller values (say one or two days). The field will default to a value of None, which will keep the file permanent. 

This option will need to be implemented in the tooltool server, and should otherwise be ignored.

[Link to referenced bug 1167636](https://bugzilla.mozilla.org/show_bug.cgi?id=1167636)
",acmiyaguchi,3304040,2015-07-16T20:08:40Z,NONE,False,67,21,2,A tool for fetching binary artifacts for builds and tests,,5ad78b670126c2f1458f996b4ad48460ef595015,Rebase changes. Change convert ttl values to seconds.
38,https://api.github.com/repos/mozilla/build-tooltool/pulls/22,22,Zipfile,"In https://bugzilla.mozilla.org/show_bug.cgi?id=1175359 mshal asked me to use the unpack option in tooltool to avoid having to include a setup script in the manifest. For some targets we use zipfiles instead of tarballs, so here's a patch to make tooltool unpack those as well.
",rillian,225102,2015-06-24T06:01:29Z,NONE,True,58,40,2,A tool for fetching binary artifacts for builds and tests,,53f5fc8c0a3167efb567e7ecb1f55a4914d04432,"Abstract untar_file's cleanup step into clean_path.

This lets us share the code instead of repeating it each time."
39,https://api.github.com/repos/mozilla/build-tooltool/pulls/22,22,Zipfile,"In https://bugzilla.mozilla.org/show_bug.cgi?id=1175359 mshal asked me to use the unpack option in tooltool to avoid having to include a setup script in the manifest. For some targets we use zipfiles instead of tarballs, so here's a patch to make tooltool unpack those as well.
",rillian,225102,2015-06-24T06:01:29Z,NONE,True,58,40,2,A tool for fetching binary artifacts for builds and tests,,23201d771ed6a51a89bc56524a28645abda0c8f4,Add zip support for the unpack attribute.
40,https://api.github.com/repos/mozilla/build-tooltool/pulls/22,22,Zipfile,"In https://bugzilla.mozilla.org/show_bug.cgi?id=1175359 mshal asked me to use the unpack option in tooltool to avoid having to include a setup script in the manifest. For some targets we use zipfiles instead of tarballs, so here's a patch to make tooltool unpack those as well.
",rillian,225102,2015-06-24T06:01:29Z,NONE,True,58,40,2,A tool for fetching binary artifacts for builds and tests,,9d62b16bf522925565677c239f41ef0aa346104d,Add zipfile test coverage.
41,https://api.github.com/repos/mozilla/build-tooltool/pulls/22,22,Zipfile,"In https://bugzilla.mozilla.org/show_bug.cgi?id=1175359 mshal asked me to use the unpack option in tooltool to avoid having to include a setup script in the manifest. For some targets we use zipfiles instead of tarballs, so here's a patch to make tooltool unpack those as well.
",rillian,225102,2015-06-24T06:01:29Z,NONE,True,58,40,2,A tool for fetching binary artifacts for builds and tests,,3c3bf54c698120ace26bf14920207fc243139357,"Rename untar_file to unpack_file.

Referring to both tarballs and zipfiles as tar files
is confusing. Use generic terms instead."
42,https://api.github.com/repos/mozilla/build-tooltool/pulls/20,20,Improve comment header.,"Update default manifest filename extension and clean up wording.
",rillian,225102,2015-05-14T20:52:13Z,NONE,True,4,4,1,A tool for fetching binary artifacts for builds and tests,,4f0dbbadbbf312e3c1ffe12616b301fcc450b685,Improve comment header.
43,https://api.github.com/repos/mozilla/build-tooltool/pulls/19,19,make the chevrons toggle when clicking on them,"r? anyone?
",djmitche,28673,2015-05-04T17:53:01Z,NONE,True,3,1,1,A tool for fetching binary artifacts for builds and tests,,d7e1f059e55e4e45c6d8c2a988762c271b36ba43,make the chevrons toggle when clicking on them
44,https://api.github.com/repos/mozilla/build-tooltool/pulls/18,18,"Bug 1159941 - Use Basic auth instead of Bearer auth, r=dustin",,jonallengriffin,119080,2015-04-29T23:00:29Z,MEMBER,False,4,1,1,A tool for fetching binary artifacts for builds and tests,,c763526bf214795d30dd14d7b23d34f10477f47e,"Bug 1159941 - Use Basic auth instead of Bearer auth, r=dustin"
45,https://api.github.com/repos/mozilla/build-tooltool/pulls/17,17,add trailing slashes to URLs,,djmitche,28673,2015-04-17T13:38:13Z,NONE,True,24,11,2,A tool for fetching binary artifacts for builds and tests,,10c11b079651e84ca48aee37bb6a21fa4f75efe8,add trailing slashes to URLs
46,https://api.github.com/repos/mozilla/build-tooltool/pulls/12,12,Don't fail on duplicate `tooltool_file_instances`,"Seeing a lot of this during uploads: `IntegrityError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occuring prematurely) (IntegrityError) (1062, ""Duplicate entry '52-us-west-2' for key 'PRIMARY'"") 'INSERT INTO tooltool_file_instances (file_id, region) VALUES (%s, %s)' (52L, 'us-west-2')`

That's probably due to a race between the user-triggered completion check and the badpenny completion check.  It's harmless, but shouldn't end up making the badpenny task fail.
",djmitche,28673,2015-04-16T21:22:20Z,NONE,True,62,6,2,A tool for fetching binary artifacts for builds and tests,,ff76422016f24499f87cc6271edb088786b32431,be more resilient to idempotent functions racing with themselves
47,https://api.github.com/repos/mozilla/build-tooltool/pulls/16,16,Don't keep sessions open while doing multi-second operations,,djmitche,28673,2015-04-16T15:28:43Z,NONE,True,35,27,2,A tool for fetching binary artifacts for builds and tests,,ec087cb3a038d616fdb16232f94f251d43003a76,Don't keep sessions open while doing multi-second operations
48,https://api.github.com/repos/mozilla/build-tooltool/pulls/13,13,"Bug 1151470: use token authentication to download, too",,djmitche,28673,2015-04-07T17:11:15Z,NONE,True,48,64,2,A tool for fetching binary artifacts for builds and tests,,d421d0a80c262194218d67c46815de420f61be12,"Bug 1151470: use token authentication to download, too"
49,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,f438233c185a19ed798428c6b38c2f90cf57f541,"Implement the basic tooltool /sha512/<hash> API.

This redirects to the existing API temporarily.  In the process, it
demonstrates that the tooltool *client* can handle 302 redirects just
fine."
50,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,ad346bcc552a3622659a68d33f251e671b13d254,ruthless coverage requirement
51,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,1d5575a6f7341be85a6d47aefc539f104c644d73,WIP on signing
52,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,b9c5f1e08a6c057b30ae12b478b08a16b6ff44d4,make a python package
53,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,1113cff912e4a8facdd9635dffa7839e5da9a4ef,check whether a file exists before redirecting to it
54,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,e230eb535518304a7b2e8b52370f9118e5a46f79,verify the well-formedness of digests
55,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,fa9852f8ac8c90be2ceaac08aaba739f8ef0afc1,support region preferences from users
56,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,7af8cdce661e14afbcd34b21b47db5ff08fda582,update TODOs
57,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,d49ad802acfb7bdcd7e1384a8bd59290f8d84b88,check pending uploads periodically
58,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,9a7826ec4fcc950ebe13c0373088131f13211c26,Provide a put_url when there are no file instances
59,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,3ac7f5db83a62573d97dc55f9f46438774cc2b7d,add /uploads/complete
60,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,7e2dadf1ebf9020fe4bc3724ec283830326c0197,add visibility levels and enforce not changing them in uploads
61,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,3c03c19c815431d8a251a2077f4e04050a677693,add permissions
62,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,3a29e5fafaaaad583945001d50de2a121ac97eb1,Include filenames for files in batches
63,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,4086d680c021d578738c23c9eb93226d446f088d,docs tweaks
64,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,da6de38179bc58078494d10eff8adf13f75a27f8,don't attempt to hide existence of INTERNAL files (but still hide their content)
65,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,7a6cc39c6c8c333fe839c449fe80baea3d802963,add read-only methods for uploads and files
66,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,19351f3cffa0f660cef7b2715ff8e80044a14c2c,add CLEAR /tooltool/file/<a>/<s> to clear instances
67,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,c07b0a4cb6758474e388f270cc17e52e8ab31788,switch from CLEAR to PATCH
68,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,a30ffc89a3f12c6eb44299d457ad94278c8c3111,add the ability for admins to change file visibility levels
69,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,769a69c47a13a80d563cc248715c6f440d9c5111,"support changing a file's visibility after the fact, by admins"
70,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,bc539cbfd190b63ebff236f2ce73ad82047a92d2,"fix /upload/complete to include algorithm, for consistency"
71,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,cc7ef9218bb03ff9b9413c722c13db5b66129d4c,Adjust the upload expiration down to 60s
72,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,007251ac4c26f2c2eb6c05715a2c55c8be02522d,don't examine uploads until the URLs have expired
73,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,c231dc33ea1482316468ef665ca0c064bb00e4ae,"verify more attributes of each uploaded object

Verify the storage class, redrirect, and ACL."
74,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,b807b205f0a150426d8099c9d23096bbbb276364,rename S3 keys to not start with /
75,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,53627fb5712536e87f5690606604be016ecb5b19,log at warning level
76,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,962a53ba3ed2cc4664098bd627013294a18e8345,"log successful processing of an upload, don't double-add it"
77,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,5ecc162166dc27daffd2a5053fb4f96a0e7ce44c,replicate from region to region
78,https://api.github.com/repos/mozilla/build-tooltool/pulls/10,10,Tooltool API and updated client,"This is a lot of commits, but the result is cohesive.
## Blueprint

The blueprint handles tooltool files as a combination of ""upload batches"" and ""files"".  Files have visibility levels, and are automatically replicated between regions.  Upload batches have collections of files, an author, a message, and an upload date.

Downloads are handled by 302'ing to a signed S3 URL for the file in the preferred region or a random region.  Uploads are only performed for files not already present, and are similarly performed via signed S3 URLs.  Once the uploads are complete and the URL is expired, the blueprint verifies the upload (including checking the digest) and makes it available for download.  It's careful to not verify an upload while there's an upload pending (actually, there's a race condition here now that I think about it.. I'll work on that)
### UI

The UI lets users search for files and uploads.  It can eventually grow an administrative interface to change file visibility, delete files, etc. (#8).
## Client

The client is updated to handle the completely new upload system, and to handle token authentication for downloads.  It _should_ continue to work with the existing tooltool repositories, although I haven't tested this.
",djmitche,28673,2015-03-26T18:09:41Z,NONE,True,3040,259,23,A tool for fetching binary artifacts for builds and tests,,19ebffcda9b9fc2c299ad5b0c8527415d771cf69,document periodic tasks
79,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,75e351c0102514a56636cebb5a4fec5ce245fab6,fix commented-out test
80,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,a953b4f5b9d8b45f03e44458f7f8ea6099cfc17d,test and fix up main()
81,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,839e3eb887493cc6a2491d6b04df542c9d7615f0,test some commands
82,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,a9280f01ecd9797cdc39f7c912495b4815549712,"don't cover functions that will be rewritten soon, anyway"
83,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,8e731345e481bf50e06ea875bcb514fbbcc75e58,only allow sha512
84,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,bb538e711ae0fb4c793f38296b7173040d39fd1d,remove TODO
85,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,031e01d97207a1e992e6a8df8a096ce2c3053a96,test purge
86,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,523cf239794f8e2b36a633689d0db840c4960aa0,test fetch_files
87,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,8d944064592630d165338aef99d97783a3f52f14,don't run client tests twice in validate
88,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,2f8d80038ff9160d5aac72a1f85646ec7d03f282,address miscellaneous missing coverage
89,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,4783be306967a04f84b465322d1389081523a5f1,test and improve execute
90,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,51717fdc1259c8b02d50b968d9764c6a680f2a0d,finish testing untar_file
91,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,ff39c0a42a387298de86b66f6eff64fb1e96f069,test fetch_file
92,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,b6c9b1b1ac23a913f2c2eea8f423bcccaceb7f8d,test touch and (sorta) _urlopen
93,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,e10b0c8edf2fc204e20e14be5b4164ab489436c6,"test and fix add_files

Calling new_fr.validate() doesn't work if that file is not in the
current directory, and anyway the digest is already calculated so
there's nothing to validate.  Files already in the manifest need not
exist in the current directory, so they can't be validated either."
94,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,28017aa6a2b5bbcd9e2767a786866451ae249be6,test validate_manifest
95,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,41bc9b07013ac3a9a17d39f835cc1d74b3dd956c,don't remove the fist element of argv twice
96,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,4ed7f6b29d855ef1885e05cec32dc33800ee94eb,"make tar log to stdout, not stderr"
97,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,d3f1ececaf5c96603168def921d8dad4931301de,test for and fix an error in restoring file records with unpack
98,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,f10adb3a6f436023d9d3953b35c36beeaadf9eb5,fix syntax to be py26-compatible
99,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,f6414c3d6326c5c9e34d6882cc1db2f9700fbb72,minor tweaks from review
100,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,6975425efccfbacf2858ea81e577326bca31d7b4,remove uses of .format
101,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,cb09620681005e7a795508f1462ea5b326062ee4,do everything in a temp dir
102,https://api.github.com/repos/mozilla/build-tooltool/pulls/6,6,Test and clean up the client,"This gets tooltool.py to 100% coverage.

Well, sort of -- the bits that are both hard to test and destined for the bitbucket with the ongoing rewrite are tagged with 'pragma: no cover'.

This also includes a bunch of bug fixes and minor refactors in tooltool.py:
- fail on any path info in filenames, regardless of platform
- `repr` the size as an integer, not a string
- fix manifest comparison to compare sorted manifests
- don't try to sort manifests while manipulating them
- don't attempt to re-validate files in `add_files`, as they may not be in the cwd and thus validation will fail
- return false from `untar_file` if the xz untar operation fails
- remove fetched temp files if they fail verification
- simplify `purge`
- refactor cli implementation to ease testing
- indicate that only sha512 algorithm is supported
",djmitche,28673,2015-03-19T14:04:06Z,NONE,True,806,181,4,A tool for fetching binary artifacts for builds and tests,,aa31ee244127f772e0c236cd164d2a2141d8f72c,run the client tests on python-2.6
103,https://api.github.com/repos/mozilla/build-tooltool/pulls/5,5,"fix up validate actually run client tests, check pep8, etc.","All of the changes to `tooltool.py`, and most to `test_tooltool.py`, are pep8/pyflakes/coding style fixes.

The presence of `unittest.main()` at the bottom of `test_tooltool.py` was causing nosetests to exit on importing the module, which caused other failures to be ignored.

I've omitted tooltool.py from the coverage check because it's _very_ badly covered.  It will be getting a pretty substantial rewrite very soon (once the server side changes are done), so adding coverage now isn't a good use of time.
",djmitche,28673,2015-03-08T02:28:30Z,NONE,True,249,159,3,A tool for fetching binary artifacts for builds and tests,,feaa8772902f9459a383148a994c69c42a76d8b2,"fix up validate actually run client tests, check pep8, etc."
104,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,573769e5c6343b3e18a88b2ce8b98ae6e006d76f,basic skeleton (based on mapper)
105,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,f0bfda9c23d9c4febc1bfb140046334ee7a48482,move stuff around a bit
106,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,6dfdf9aa280b53ab77b24af9660bf7ef5faab335,fix directory name
107,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,44771443b783870826c20195ba938f592735bfe2,"skel -> skeleton, and some other cleanup"
108,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,83b60c3529bfabaac1237c1a8e1659ec0f0fc0ba,ignore egg-info stuff
109,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,f5e915a0bd9d7b19b4643df00dd1fbbe8c8533ad,fix apimethod usage
110,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,89b9d897e29cc81f2b07bdb58dfcf0229ccb2313,use the correct module
111,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,2744de348e7f88eec3c01404a6af4deb95d481e6,use the correct request path
112,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,075abbf59a08ba5c1ce39f723bf19421d5de329f,import validate stuff from relengapi
113,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,67af523d21d3ae092969837ce7ed3dc79bba9f67,fix test
114,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,346144a4df9a8c1b687e5c3431581bd5b7517e00,exclude namespace packages from coverage
115,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,144cb5c22e83761f6c2e4e059ead13164c4b51d7,tweak validate until it passes
116,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,36310993455a0475b56a05fe29fdaf35a49072e4,validate new-blueprint process
117,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,98345c2f93c8b062f7933c1b00df3efdb908621e,add .travis.yml
118,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,29599b1acd7bf8e90e00e660fafec4b6a7d55e70,"bring package_data, data_files in line with upstream relengapi"
119,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,502d6929b47d95afbfa95f6a23f3e63b6646cbfd,chmod +x
120,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,09be88b0b04d886addfe3d1562e718d8a468776c,require relengapi-0.3 or higher
121,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,9f171a0874a6fd8a4ce5fb55f3363f69b537439d,"Better test for project == relengapi-skeleton

The global s/skeleton/bubbler/g would replace the string ""skeleton"" in
the test, as well.  With this change the test uses a regular expression
which doesn't contain the string 'skeleton', but is still readable and
clear about what it's doing."
122,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,930a49698278437a8b19a6ba962d8be5f4daf427,Merge djmitche/build-relengapi-skeleton:fix-validate-test (PR #1)
123,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,62655c9f3ddea9fc7e6dd7479127437281dfe21d,don't include empty directories in data_files
124,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,f6fdad6e499393d470a13b5117bf8092ba397b87,Merge djmitche/build-relengapi-skeleton:bug1088676 (PR #3)
125,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,1d0ef5d3a883d27fd6c4038484498ad7f93a1ab0,test for overzealous uninstall
126,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,53c5c14eabdf05ca92dc66ad1937a6bd95101f80,Merge djmitche/build-relengapi-skeleton:issue4 (PR #4)
127,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,4883b460d0d6c578fb0f747240d59f62ec924876,rename skeleton to tooltool
128,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,86804d9c13f2910a9b63c1f001212356ac5b0a5a,merge existing (non-relengapi) repo
129,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,3441f5a508a574fdc6d18da833c60ad950e63b18,Merge PR #3 -- resuscitate client testing
130,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,7dd342c44eff07f21f2687d074f025492b37c894,move client/shell tests into validate.sh and fix up file references
131,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,78d21e2ee19f32d4a1d6e3ec73a76459683d3047,Use bash to run shell tests
132,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,994bb854b06984b5a216faf5939bf90eeed3fd81,Get rid of the skeletons in the docs
133,https://api.github.com/repos/mozilla/build-tooltool/pulls/4,4,Now it's a blueprint,"This merges the tooltool repo, including #3, with the relengapi-skeleton repo.  The blueprint itself doesn't actually do anything yet, but I want to get this mess in place as a basis for that more interesting pull.
",djmitche,28673,2015-03-02T21:08:55Z,NONE,True,574,10,15,A tool for fetching binary artifacts for builds and tests,,0551104f106c95cf2797dfa48cbf558470a41eb2,consolidate READMEs
134,https://api.github.com/repos/mozilla/build-tooltool/pulls/3,3,"Bug 1138614: Fix tests, add Travis","Even once I figured out what files it expected on the web server, test.sh was failing pretty badly -- mostly due to bugs!  So I fixed 'em.
",djmitche,28673,2015-03-02T20:41:18Z,NONE,True,55,14,3,A tool for fetching binary artifacts for builds and tests,,a992fd56a866a3056c359c2c6f5101863b340758,Bug 1138614: run a webserver for tests
135,https://api.github.com/repos/mozilla/build-tooltool/pulls/3,3,"Bug 1138614: Fix tests, add Travis","Even once I figured out what files it expected on the web server, test.sh was failing pretty badly -- mostly due to bugs!  So I fixed 'em.
",djmitche,28673,2015-03-02T20:41:18Z,NONE,True,55,14,3,A tool for fetching binary artifacts for builds and tests,,a4f70158cd9d9508cd445bfe1b8eb14317926895,Bug 1138614: include old files from a manifest when adding new files
136,https://api.github.com/repos/mozilla/build-tooltool/pulls/3,3,"Bug 1138614: Fix tests, add Travis","Even once I figured out what files it expected on the web server, test.sh was failing pretty badly -- mostly due to bugs!  So I fixed 'em.
",djmitche,28673,2015-03-02T20:41:18Z,NONE,True,55,14,3,A tool for fetching binary artifacts for builds and tests,,614c1eb3e9ce48e459cf600f36731560929f8668,"Don't expect --overwrite to work

Support for --overwrite was removed by simone, but the option re-added
in 212c7b33a9d971aca2d370a463750645f60e7f44, suggesting is still
available.  It's now the default, and cannot be disabled."
137,https://api.github.com/repos/mozilla/build-tooltool/pulls/3,3,"Bug 1138614: Fix tests, add Travis","Even once I figured out what files it expected on the web server, test.sh was failing pretty badly -- mostly due to bugs!  So I fixed 'em.
",djmitche,28673,2015-03-02T20:41:18Z,NONE,True,55,14,3,A tool for fetching binary artifacts for builds and tests,,5706cd24517322d33f95d39cd273287a92b59746,add .travis.yml
138,https://api.github.com/repos/mozilla/build-tooltool/pulls/3,3,"Bug 1138614: Fix tests, add Travis","Even once I figured out what files it expected on the web server, test.sh was failing pretty badly -- mostly due to bugs!  So I fixed 'em.
",djmitche,28673,2015-03-02T20:41:18Z,NONE,True,55,14,3,A tool for fetching binary artifacts for builds and tests,,d5221604d3d49a2ae5a4ba17579a2191a449a0ba,shouldn't have been commented out
139,https://api.github.com/repos/mozilla/build-tooltool/pulls/2,2,Bug 1137796: messages for users uploading files to tooltool,,djmitche,28673,2015-02-27T17:55:50Z,NONE,True,19,0,1,A tool for fetching binary artifacts for builds and tests,,db2c92f53ba34275e2edf78ce61d44f845358dd0,Bug 1137796: messages for users uploading files to tooltool
140,https://api.github.com/repos/mozilla/build-tooltool/pulls/1,1,Bug 1088208 - Allow tooltool to use authenticated file retrievals. r=rail,"@rail could you please merge the pull request? Thanks!
",armenzg,44410,2014-12-22T21:01:49Z,NONE,True,23,5,1,A tool for fetching binary artifacts for builds and tests,,78113eb8ab9618df3c7a2e4acd2ad83768ed5568,Bug 1088208 - Allow tooltool to use authenticated file retrievals. r=rail
