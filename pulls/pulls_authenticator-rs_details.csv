,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/authenticator-rs/pulls/146,146,Add support for D-Bus virtual devices,"This enables access to authenticator devices through the D-Bus based protocol rather than low-level communication protocols such as USB HID. The main motivation of this is to allow isolated clients (e.g., Firefox Flatpak) to run without unnecessary privileges on the host.

The D-Bus server implementation is mostly done by our colleague Norbert as part of his internship at Red Hat. The protocol is still not fixed, so use [my branch](https://gitlab.com/dueno/fido2-proxy/-/commits/wip/dueno/demo) if you are interested in testing it.",ueno,47549,2021-01-06T11:17:01Z,NONE,False,555,30,13,"Rust library to interact with Security Keys, used by Firefox",Rust,2c0cf07ff0002c6abba57393dfee2e1371147dbb,"Don't assume AppId is hashed

This allows alternative token implementations to use CTAP2 based API,
that expects relying party is hashed by the platform, not by the
application."
1,https://api.github.com/repos/mozilla/authenticator-rs/pulls/146,146,Add support for D-Bus virtual devices,"This enables access to authenticator devices through the D-Bus based protocol rather than low-level communication protocols such as USB HID. The main motivation of this is to allow isolated clients (e.g., Firefox Flatpak) to run without unnecessary privileges on the host.

The D-Bus server implementation is mostly done by our colleague Norbert as part of his internship at Red Hat. The protocol is still not fixed, so use [my branch](https://gitlab.com/dueno/fido2-proxy/-/commits/wip/dueno/demo) if you are interested in testing it.",ueno,47549,2021-01-06T11:17:01Z,NONE,False,555,30,13,"Rust library to interact with Security Keys, used by Firefox",Rust,a89492963a0f415e01aff0da65a1df8e1c8092f7,Add support for D-Bus virtual devices
2,https://api.github.com/repos/mozilla/authenticator-rs/pulls/143,143,fixes #136: implements software_u2f,"This is definitely a work in progress. I guess the kind of feedback I'm looking for is broad strokes on if this is the approach we want to take. Also, am I interpreting various arguments/return values correctly? Additionally, is there a way to test this end-to-end? (e.g. how do I configure the library to use the softoken instead of looking for a hardware token?)",mozkeeler,3374946,2020-11-07T00:08:26Z,COLLABORATOR,False,372,22,7,"Rust library to interact with Security Keys, used by Firefox",Rust,58c4a4b18cd9ad5521707efcd47654c27892e782,fixes #138: adds and implements a CryptographyProvider trait
3,https://api.github.com/repos/mozilla/authenticator-rs/pulls/143,143,fixes #136: implements software_u2f,"This is definitely a work in progress. I guess the kind of feedback I'm looking for is broad strokes on if this is the approach we want to take. Also, am I interpreting various arguments/return values correctly? Additionally, is there a way to test this end-to-end? (e.g. how do I configure the library to use the softoken instead of looking for a hardware token?)",mozkeeler,3374946,2020-11-07T00:08:26Z,COLLABORATOR,False,372,22,7,"Rust library to interact with Security Keys, used by Firefox",Rust,2ca9d36f4823c4c8e65ace272851f2f0295cdb7f,fixes #136: implements software_u2f
4,https://api.github.com/repos/mozilla/authenticator-rs/pulls/142,142,fixes #138: adds and implements a CryptographyProvider trait,Was this the sort of thing you were thinking? It's still a bit of a work in progress - e.g. the right build flags aren't there.,mozkeeler,3374946,2020-11-07T00:05:14Z,COLLABORATOR,False,90,1,5,"Rust library to interact with Security Keys, used by Firefox",Rust,58c4a4b18cd9ad5521707efcd47654c27892e782,fixes #138: adds and implements a CryptographyProvider trait
5,https://api.github.com/repos/mozilla/authenticator-rs/pulls/140,140,Ensure OpenBSD has `use std::io`,"Fix #139 and https://bugzilla.mozilla.org/show_bug.cgi?id=1666701

I'm still upgrading to OpenBSD 6.7 locally so I can use the necessary version of Rust, but I think this is all that's needed. This and a version bump.",jcjones,518542,2020-10-07T15:27:40Z,CONTRIBUTOR,True,2,1,2,"Rust library to interact with Security Keys, used by Firefox",Rust,7fb92f63f5faf0b236267cad201bd0c5bae4cd87,"Ensure OpenBSD has `use std::io`

Fix #139 and https://bugzilla.mozilla.org/show_bug.cgi?id=1666701"
6,https://api.github.com/repos/mozilla/authenticator-rs/pulls/140,140,Ensure OpenBSD has `use std::io`,"Fix #139 and https://bugzilla.mozilla.org/show_bug.cgi?id=1666701

I'm still upgrading to OpenBSD 6.7 locally so I can use the necessary version of Rust, but I think this is all that's needed. This and a version bump.",jcjones,518542,2020-10-07T15:27:40Z,CONTRIBUTOR,True,2,1,2,"Rust library to interact with Security Keys, used by Firefox",Rust,9b9da3bf0e156f5668497ce693d92946d5ef1085,Version bump 0.3.1
7,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,8fd381a196a0afd9f9c59d78c9d85a182d450067,Fix linux unneeded extra
8,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,61f39437e67caf889f90c390beec3fe8398064aa,Other clippy issues
9,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,ee30508cb977bfca4af2fde5808471907f6ec65e,Review update
10,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,6cc1b71b979b98690edfe5b75916fd6b1ece1531,"Clippy for the webdriver feature, also enable in CI"
11,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,b5120847f0805d7db47efa1191b43d0096265559,More clippy
12,https://api.github.com/repos/mozilla/authenticator-rs/pulls/135,135,Rust 1.46 clippy fixes,Clippy issues which have appeared since moving from Rust 1.43 to Rust 1.46.,jcjones,518542,2020-09-14T22:13:41Z,CONTRIBUTOR,True,31,35,8,"Rust library to interact with Security Keys, used by Firefox",Rust,f24989f6db307c79bd30af2c32b71c01280e924f,More clippy
13,https://api.github.com/repos/mozilla/authenticator-rs/pulls/133,133,"Absorb status updates at the C API, rather than letting the channel error","Issue #132 will plumb the status channel through to the actual C API signatures.

Fixes #131",jcjones,518542,2020-09-10T15:46:27Z,CONTRIBUTOR,True,22,4,1,"Rust library to interact with Security Keys, used by Firefox",Rust,308329859d4caf9eac925faf0321ce8f3ef3ae6c,"Absorb status updates at the C API, rather than letting the channel error

Issue #132 will plumb the status channel through to the actual C API signatures.

Fixes #131"
14,https://api.github.com/repos/mozilla/authenticator-rs/pulls/130,130,Build Better Errors,"As-is, everything comes down to the 5 enumerated U2F errors, yet the library needs to handle U2F and CTAP2, as well as other miscellaneous things that may be problematic. And it needs to do so while also smoothly passing along U2F errors to the C API, when they occur.

This PR refactors all the errors to use a main error type located in `crate::errors`, and a typedef for `crate::Result` for all result objects. It has some convenience functions for handling different error types, and is intended to be extended as we add the necessary CTAP2 and crypto pieces.

I am not super happy with the verbosity of what I've put together, particularly code like:
```rust
callback.call(Err(errors::AuthenticatorError::U2FToken(
       errors::U2FTokenError::InvalidState,
)));
```

but honestly, that's not that hard to refactor compared to the rest of this, and only really affects `statemachine.rs` badly, so in the interests of keeping things moving along, I'm going to go ahead and request review of this.

I am totally open to ideas for how to make the semantics of the above better. Obviously direct imports to avoid the `errors::` prefixes would help a slight amount, but maybe it's a call for something more like:
```rust
callback.call(Err(errors::u2f(errors::U2FTokenError::InvalidState)))
```
or even have the method return the `Err(...)` so it's just `callback.call(errors::u2f(...))`?

I could also see shortening U2FTokenError.

Anyway, open to suggestions of any manner. Thanks!",jcjones,518542,2020-09-02T04:58:01Z,CONTRIBUTOR,True,300,177,14,"Rust library to interact with Security Keys, used by Firefox",Rust,2c7088b1709f649f17de4f275095dd09c7754cf8,Better errors - only MacOS
15,https://api.github.com/repos/mozilla/authenticator-rs/pulls/130,130,Build Better Errors,"As-is, everything comes down to the 5 enumerated U2F errors, yet the library needs to handle U2F and CTAP2, as well as other miscellaneous things that may be problematic. And it needs to do so while also smoothly passing along U2F errors to the C API, when they occur.

This PR refactors all the errors to use a main error type located in `crate::errors`, and a typedef for `crate::Result` for all result objects. It has some convenience functions for handling different error types, and is intended to be extended as we add the necessary CTAP2 and crypto pieces.

I am not super happy with the verbosity of what I've put together, particularly code like:
```rust
callback.call(Err(errors::AuthenticatorError::U2FToken(
       errors::U2FTokenError::InvalidState,
)));
```

but honestly, that's not that hard to refactor compared to the rest of this, and only really affects `statemachine.rs` badly, so in the interests of keeping things moving along, I'm going to go ahead and request review of this.

I am totally open to ideas for how to make the semantics of the above better. Obviously direct imports to avoid the `errors::` prefixes would help a slight amount, but maybe it's a call for something more like:
```rust
callback.call(Err(errors::u2f(errors::U2FTokenError::InvalidState)))
```
or even have the method return the `Err(...)` so it's just `callback.call(errors::u2f(...))`?

I could also see shortening U2FTokenError.

Anyway, open to suggestions of any manner. Thanks!",jcjones,518542,2020-09-02T04:58:01Z,CONTRIBUTOR,True,300,177,14,"Rust library to interact with Security Keys, used by Firefox",Rust,07d08df460ef5126e68c20975fa04056d0c3e7ee,Update all other platforms with the new error mechanism
16,https://api.github.com/repos/mozilla/authenticator-rs/pulls/130,130,Build Better Errors,"As-is, everything comes down to the 5 enumerated U2F errors, yet the library needs to handle U2F and CTAP2, as well as other miscellaneous things that may be problematic. And it needs to do so while also smoothly passing along U2F errors to the C API, when they occur.

This PR refactors all the errors to use a main error type located in `crate::errors`, and a typedef for `crate::Result` for all result objects. It has some convenience functions for handling different error types, and is intended to be extended as we add the necessary CTAP2 and crypto pieces.

I am not super happy with the verbosity of what I've put together, particularly code like:
```rust
callback.call(Err(errors::AuthenticatorError::U2FToken(
       errors::U2FTokenError::InvalidState,
)));
```

but honestly, that's not that hard to refactor compared to the rest of this, and only really affects `statemachine.rs` badly, so in the interests of keeping things moving along, I'm going to go ahead and request review of this.

I am totally open to ideas for how to make the semantics of the above better. Obviously direct imports to avoid the `errors::` prefixes would help a slight amount, but maybe it's a call for something more like:
```rust
callback.call(Err(errors::u2f(errors::U2FTokenError::InvalidState)))
```
or even have the method return the `Err(...)` so it's just `callback.call(errors::u2f(...))`?

I could also see shortening U2FTokenError.

Anyway, open to suggestions of any manner. Thanks!",jcjones,518542,2020-09-02T04:58:01Z,CONTRIBUTOR,True,300,177,14,"Rust library to interact with Security Keys, used by Firefox",Rust,db4ac5ea235908aa7e69f748ab775b50e39bb4b9,Review update
17,https://api.github.com/repos/mozilla/authenticator-rs/pulls/127,127,WebDriver Virtual Device Implementation,"This PR adds a WebDriver endpoint for integration with Firefox Marinonette for Web Platform Tests.

As-is, the virtual device controls `testtoken.rs` which depends on a stub implementation of `software_u2f.rs` and does not support CTAP2. While all the WebDriver methods exist and have tests, when the WebDriver is enabled and commanded appropriately, only blank output gets returned. That's as-expected, and a next effort will be building out the `software_u2f.rs` implementation to work properly.",jcjones,518542,2020-08-14T22:26:48Z,CONTRIBUTOR,True,1617,9,19,"Rust library to interact with Security Keys, used by Firefox",Rust,24bf2ecdd23b03d35382dad58d031cf23a7ca3a2,WebDriver implementation
18,https://api.github.com/repos/mozilla/authenticator-rs/pulls/127,127,WebDriver Virtual Device Implementation,"This PR adds a WebDriver endpoint for integration with Firefox Marinonette for Web Platform Tests.

As-is, the virtual device controls `testtoken.rs` which depends on a stub implementation of `software_u2f.rs` and does not support CTAP2. While all the WebDriver methods exist and have tests, when the WebDriver is enabled and commanded appropriately, only blank output gets returned. That's as-expected, and a next effort will be building out the `software_u2f.rs` implementation to work properly.",jcjones,518542,2020-08-14T22:26:48Z,CONTRIBUTOR,True,1617,9,19,"Rust library to interact with Security Keys, used by Firefox",Rust,0651c79faf32f1d121ed949ed2fd0278d83f094d,Add all WebDriver methods to control TestToken
19,https://api.github.com/repos/mozilla/authenticator-rs/pulls/127,127,WebDriver Virtual Device Implementation,"This PR adds a WebDriver endpoint for integration with Firefox Marinonette for Web Platform Tests.

As-is, the virtual device controls `testtoken.rs` which depends on a stub implementation of `software_u2f.rs` and does not support CTAP2. While all the WebDriver methods exist and have tests, when the WebDriver is enabled and commanded appropriately, only blank output gets returned. That's as-expected, and a next effort will be building out the `software_u2f.rs` implementation to work properly.",jcjones,518542,2020-08-14T22:26:48Z,CONTRIBUTOR,True,1617,9,19,"Rust library to interact with Security Keys, used by Firefox",Rust,cc1180f53d04593f2c3ee9d67be3696f21f21dd3,Review feedback
20,https://api.github.com/repos/mozilla/authenticator-rs/pulls/127,127,WebDriver Virtual Device Implementation,"This PR adds a WebDriver endpoint for integration with Firefox Marinonette for Web Platform Tests.

As-is, the virtual device controls `testtoken.rs` which depends on a stub implementation of `software_u2f.rs` and does not support CTAP2. While all the WebDriver methods exist and have tests, when the WebDriver is enabled and commanded appropriately, only blank output gets returned. That's as-expected, and a next effort will be building out the `software_u2f.rs` implementation to work properly.",jcjones,518542,2020-08-14T22:26:48Z,CONTRIBUTOR,True,1617,9,19,"Rust library to interact with Security Keys, used by Firefox",Rust,a158b7b05b23baca44109a80c7b24f41c12e5c91,"Rebase on v0.3.0 new errors, etc."
21,https://api.github.com/repos/mozilla/authenticator-rs/pulls/127,127,WebDriver Virtual Device Implementation,"This PR adds a WebDriver endpoint for integration with Firefox Marinonette for Web Platform Tests.

As-is, the virtual device controls `testtoken.rs` which depends on a stub implementation of `software_u2f.rs` and does not support CTAP2. While all the WebDriver methods exist and have tests, when the WebDriver is enabled and commanded appropriately, only blank output gets returned. That's as-expected, and a next effort will be building out the `software_u2f.rs` implementation to work properly.",jcjones,518542,2020-08-14T22:26:48Z,CONTRIBUTOR,True,1617,9,19,"Rust library to interact with Security Keys, used by Firefox",Rust,b7f59322614041c98e356a97e0c237c854673989,Fix webdriver tests on the rebase
22,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,e52d163df6ce93758f71f99c881f8cf0f7e11b4b,"Add a higher-level AuthenticatorService that can query multiple backends

- Add the basic structure for virtual devices:
  a framework for macos_touchid, and the WebDriver WPT virtual device mechanism

This commit will get broken into logical subsections, utlimately, but it's easier to rebase for now as one monolith."
23,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,9999c339f5a2e22b04cdef1340ca4959f6106dbb,"Build a software U2F stub, add tests to authenticatorservice and util, and refactor StateCallback to be constructed outside the Register and Sign methods"
24,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,e0d06d3d2b95699937015e073da29cfa28c30edf,virtualdevices mod.rs cleanups
25,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,3f95f89e9b0fffa0a262109f0e1267e191676d2a,Pull the warp WebAPI into its own rs file
26,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,5e85019f1c69f7a6ec1d8bf83f993e6757a585f8,Fix pre rust 1.43 warning for directives on conditionals
27,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,aa50f1b71292f652fc38a4f0a5139e4af41c75a8,stubs for credential add
28,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,8d61804d6e5498ccf9289025b3add783b9ff1148,All targets and features for tests
29,https://api.github.com/repos/mozilla/authenticator-rs/pulls/126,126,Add a WebDriver virtual device for Web Platform Tests,,jcjones,518542,2020-08-13T23:53:28Z,CONTRIBUTOR,False,1974,143,29,"Rust library to interact with Security Keys, used by Firefox",Rust,b84f69c066ada182b580fe13dc8adb93fdc9cabc,Add tests for the web api methods
30,https://api.github.com/repos/mozilla/authenticator-rs/pulls/125,125,"cargo fix, move to edition 2018","This is purely a `cargo fix --edition` followed by updating the toml to set `edition = ""2018""`.",jcjones,518542,2020-08-06T00:17:27Z,CONTRIBUTOR,True,180,171,31,"Rust library to interact with Security Keys, used by Firefox",Rust,c797eeae1c84391744e9e5177144b7c9b85ba4ba,"cargo fix, move to edition 2018"
31,https://api.github.com/repos/mozilla/authenticator-rs/pulls/125,125,"cargo fix, move to edition 2018","This is purely a `cargo fix --edition` followed by updating the toml to set `edition = ""2018""`.",jcjones,518542,2020-08-06T00:17:27Z,CONTRIBUTOR,True,180,171,31,"Rust library to interact with Security Keys, used by Firefox",Rust,f94e2532bafa68692d351e8d6c89040da6e2271a,more targets
32,https://api.github.com/repos/mozilla/authenticator-rs/pulls/125,125,"cargo fix, move to edition 2018","This is purely a `cargo fix --edition` followed by updating the toml to set `edition = ""2018""`.",jcjones,518542,2020-08-06T00:17:27Z,CONTRIBUTOR,True,180,171,31,"Rust library to interact with Security Keys, used by Firefox",Rust,22d1a0e3c48c69c59ffdd9f7d4bb8ad508d2fc70,cargo fix freebsd
33,https://api.github.com/repos/mozilla/authenticator-rs/pulls/125,125,"cargo fix, move to edition 2018","This is purely a `cargo fix --edition` followed by updating the toml to set `edition = ""2018""`.",jcjones,518542,2020-08-06T00:17:27Z,CONTRIBUTOR,True,180,171,31,"Rust library to interact with Security Keys, used by Firefox",Rust,b5d56ab54d2aa21baf27c8c1301fb660a92b87a3,stub fix
34,https://api.github.com/repos/mozilla/authenticator-rs/pulls/123,123,Add a higher-level AuthenticatorService that can query multiple backends,"This patch adds a new trait `AuthenticatorTransport` for the existing `manager.rs`'s `U2FManager` to implement, and a higher-level `AuthenticatorService` that registers `AuthenticatorTransport`s and queries them.

This starts down the road of adding in additional authenticator/transport implementations to be queried simultaneously, including reworking the callback function to have an observer which cancels other transports (see `clone_and_configure_cancellation_callback` in `authenticatorservice.rs`). It does not add any new transport types, which will be done in their own PRs.",jcjones,518542,2020-08-05T22:09:34Z,CONTRIBUTOR,True,921,138,16,"Rust library to interact with Security Keys, used by Firefox",Rust,d5be1f1b439c7648b81c49f7c04f03165ee719ef,"Add a higher-level AuthenticatorService that can query multiple backends

- This moves the callback mechanism into its own file, as it gets more complex
- Reworks the C API to use the AuthenticatorService"
35,https://api.github.com/repos/mozilla/authenticator-rs/pulls/122,122,"Add a ""status update"" channel to the API's register and sign methods",This will be needed for future GUI enhancements. Depends on the #93 `DeviceInfo` struct.,jcjones,518542,2020-08-04T05:51:48Z,CONTRIBUTOR,True,150,29,5,"Rust library to interact with Security Keys, used by Firefox",Rust,518e0ddfb396763c233178e69432e35318131f99,Create status channel for MacOS
36,https://api.github.com/repos/mozilla/authenticator-rs/pulls/121,121,Rework callback to not use boxfnonce since rust 1.35.0 doesn't need it anymore ,"Since we're now not limited to `FnOnce` trait, this is useful for status callbacks as well, so I generalize it to an `Fn` trait of generic argument in advance of upstream status reporting.",jcjones,518542,2020-08-03T22:19:26Z,CONTRIBUTOR,True,32,41,12,"Rust library to interact with Security Keys, used by Firefox",Rust,e1fbc655a4c626dae177c94b64ea67e7094867e5,Remove boxfnonce and rename to StateCallback on MacOS
37,https://api.github.com/repos/mozilla/authenticator-rs/pulls/121,121,Rework callback to not use boxfnonce since rust 1.35.0 doesn't need it anymore ,"Since we're now not limited to `FnOnce` trait, this is useful for status callbacks as well, so I generalize it to an `Fn` trait of generic argument in advance of upstream status reporting.",jcjones,518542,2020-08-03T22:19:26Z,CONTRIBUTOR,True,32,41,12,"Rust library to interact with Security Keys, used by Firefox",Rust,0c07e9c1f639bec940897d20f21a9daf1d0b1469,Genericize StateCallback for MacOS
38,https://api.github.com/repos/mozilla/authenticator-rs/pulls/121,121,Rework callback to not use boxfnonce since rust 1.35.0 doesn't need it anymore ,"Since we're now not limited to `FnOnce` trait, this is useful for status callbacks as well, so I generalize it to an `Fn` trait of generic argument in advance of upstream status reporting.",jcjones,518542,2020-08-03T22:19:26Z,CONTRIBUTOR,True,32,41,12,"Rust library to interact with Security Keys, used by Firefox",Rust,75396f0cbd3813ba4a8aa25ccee39f4acc46592b,Rework callbacks in all other platforms
39,https://api.github.com/repos/mozilla/authenticator-rs/pulls/121,121,Rework callback to not use boxfnonce since rust 1.35.0 doesn't need it anymore ,"Since we're now not limited to `FnOnce` trait, this is useful for status callbacks as well, so I generalize it to an `Fn` trait of generic argument in advance of upstream status reporting.",jcjones,518542,2020-08-03T22:19:26Z,CONTRIBUTOR,True,32,41,12,"Rust library to interact with Security Keys, used by Firefox",Rust,0adf63921a4a3906f3e03b4793481efe0cfbc861,"Without having to cheat with a closure, static lifetime no longer is necessary for the StateCallback's Fn trait. Thanks Dana"
40,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,2db8fafd271bb795fec5b6e20b000639c9d821e9,Build for Windows on Travis
41,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,f8a1cadfcd562444845389e94e63637caf81b58f,Switch to mem::MaybeUninit
42,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,44101680f99e415791e495444fa1a41f4e894337,Unlock winapi to 0.3+
43,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,3c2d89913976d256fa84c06cb897149b1b37c14e,"Oops, ASAN is only for Linux"
44,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,b71bc5d2fe1ae19f7bf1ccae442005658748f6e1,Fixup Device struct initialization
45,https://api.github.com/repos/mozilla/authenticator-rs/pulls/119,119,Windows fixes,"Fixes the following errors:
```
error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\transaction.rs:21:24
   |
21 |         F: Fn(String, &Fn() -> bool) + Sync + Send + 'static,
   |                        ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
   |
   = note: `-D bare-trait-objects` implied by `-D warnings`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:16:20
   |
16 |     F: Fn(String, &Fn() -> bool) + Sync,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:24:20
   |
24 |     F: Fn(String, &Fn() -> bool) + Send + Sync + 'static,
   |                    ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`

error: trait objects without an explicit `dyn` are deprecated
  --> src\windows\monitor.rs:33:35
   |
33 |     pub fn run(&mut self, alive: &Fn() -> bool) -> io::Result<()> {
   |                                   ^^^^^^^^^^^^ help: use `dyn`: `dyn Fn() -> bool`
    Checking termcolor v1.1.0

error: redundant field names in struct initialization
  --> src\windows\device.rs:26:13
   |
26 |             path: path,
   |             ^^^^^^^^^^ help: replace it with: `path`
   |
   = note: `-D clippy::redundant-field-names` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: redundant field names in struct initialization
  --> src\windows\device.rs:27:13
   |
27 |             file: file,
   |             ^^^^^^^^^^ help: replace it with: `file`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:131:22
    |
131 |             unsafe { mem::uninitialized::<setupapi::SP_DEVICE_INTERFACE_DATA>() };
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'std::mem::uninitialized': use `mem::MaybeUninit` instead
   --> src\windows\winapi.rs:250:51
    |
250 |         let mut caps: hidpi::HIDP_CAPS = unsafe { mem::uninitialized() };
    |                                                   ^^^^^^^^^^^^^^^^^^
    Checking env_logger v0.6.2

error: aborting due to 8 previous errors
```",jcjones,518542,2020-07-27T20:20:02Z,CONTRIBUTOR,True,31,31,6,"Rust library to interact with Security Keys, used by Firefox",Rust,666e8c04951fac201840bb96a25d14348b3dcb17,Don't try to fuzz on Windows
46,https://api.github.com/repos/mozilla/authenticator-rs/pulls/118,118,Repo cleanups,,jcjones,518542,2020-07-27T20:17:10Z,CONTRIBUTOR,True,67,20,13,"Rust library to interact with Security Keys, used by Firefox",Rust,67fb409fd77d231128d80ffe3468b303e39588c9,Fix fuzzing targets to use stable cargo-fuzz
47,https://api.github.com/repos/mozilla/authenticator-rs/pulls/118,118,Repo cleanups,,jcjones,518542,2020-07-27T20:17:10Z,CONTRIBUTOR,True,67,20,13,"Rust library to interact with Security Keys, used by Firefox",Rust,b2fcb09b3b95f4954239c1ea8f67610ff9c7d190,"Add rustfmt, cargo test, and clippy to the pre-commit config"
48,https://api.github.com/repos/mozilla/authenticator-rs/pulls/118,118,Repo cleanups,,jcjones,518542,2020-07-27T20:17:10Z,CONTRIBUTOR,True,67,20,13,"Rust library to interact with Security Keys, used by Firefox",Rust,dd1fce2684611769bd3951c944e615502496d335,rustfmt src/linux
49,https://api.github.com/repos/mozilla/authenticator-rs/pulls/118,118,Repo cleanups,,jcjones,518542,2020-07-27T20:17:10Z,CONTRIBUTOR,True,67,20,13,"Rust library to interact with Security Keys, used by Firefox",Rust,50bfdb4d9603f03a62051f1f9a8936a1aba9a92f,Check cargo-fuzz on Travis
50,https://api.github.com/repos/mozilla/authenticator-rs/pulls/117,117,Bump core-foundation dependency,,jrmuizel,332653,2020-07-17T18:56:45Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,f44a2311696655193b9eca5c005b20958ca97934,Bump core-foundation dependency
51,https://api.github.com/repos/mozilla/authenticator-rs/pulls/116,116,Add NetBSD support.,"Kernel support in NetBSD for the necessary raw mode is not yet included in a release, but it's been committed to HEAD and should be included in NetBSD 9.1 and NetBSD 10.

https://mail-index.netbsd.org/source-changes/2020/03/02/msg114683.html
https://releng.netbsd.org/cgi-bin/req-9.cgi?show=1010",riastradh,3687362,2020-07-15T07:40:17Z,NONE,True,416,2,8,"Rust library to interact with Security Keys, used by Firefox",Rust,a5bb11214aecae90bcb756cea028790dcaa2e440,Add NetBSD support.
52,https://api.github.com/repos/mozilla/authenticator-rs/pulls/115,115,Fix race condition causing repeated sign requests,"The `break` only caused the inner loop to break, so the Transaction would
continue until the StateMachine itself is cancelled by the U2FManager,
which only happens when it is dropped.

This means that there would be a period in which the sign request is fully
done, but the manager is not yet dropped in which one or more other sign
requests can execute.

Example:

```rust
let manager = U2FManager::new().unwrap();
    let flags = RegisterFlags::empty();

    let (tx, rx) = channel();
    manager
        .register(
            flags,
            15_000,
            chall_bytes.clone(),
            app_bytes.clone(),
            vec![],
            move |rv| {
                tx.send(rv.unwrap()).unwrap();
            },
        )
        .unwrap();

    let register_data = try_or!(rx.recv(), |_| {
        panic!(""Problem receiving, unable to continue"");
    });
    println!(""Register result: {}"", base64::encode(&register_data));
    println!(""Asking a security key to sign now, with the data from the register..."");
    let credential = u2f_get_key_handle_from_register_response(&register_data).unwrap();
    let key_handle = KeyHandle {
        credential,
        transports: AuthenticatorTransports::empty(),
    };

    let flags = SignFlags::empty();
    let (tx, rx) = channel();
    manager
        .sign(
            flags,
            15_000,
            chall_bytes.clone(),
            vec![app_bytes.clone()],
            vec![key_handle],
            move |rv| {
                tx.send(rv.unwrap()).unwrap();
            },
        )
        .unwrap();

    let (_, handle_used, sign_data) = try_or!(rx.recv(), |_| {
        println!(""Problem receiving"");
    });
    println!(""Sign result: {}"", base64::encode(&sign_data));
    println!(""Key handle used: {}"", base64::encode(&handle_used));

    println!(""Starting wait..."");
    thread::sleep(Duration::from_millis(10000));

    // The operation is finished, so we should be idling.
    // Instead we are spamming the u2f device with repeated sign requests!

    // Just here to prevent the manager from being dropped
    let flags = RegisterFlags::empty();
    let (tx, rx) = channel();
    manager
        .register(
            flags,
            15_000,
            chall_bytes.clone(),
            app_bytes.clone(),
            vec![],
            move |rv| {
                tx.send(rv.unwrap()).unwrap();
            },
        );
    println!(""Done"");
```",Crote,931757,2020-06-28T16:57:16Z,CONTRIBUTOR,True,2,2,1,"Rust library to interact with Security Keys, used by Firefox",Rust,b000d3da71c2c9525b8e77e96a47997989b4ec0b,"Fix race condition causing repeated sign requests

The `break` only caused the inner loop to break, so the Transaction would
continue until the StateMachine itself is cancelled by the U2FManager,
which only happens when it is dropped.

This means that there would be a period in which the sign request is fully
done, but the manager is not yet dropped in which one or more other sign
requests can execute."
53,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,f9f1655248ae13ce2da985a1debed0cf25bf81bf,Detangle APDU code from HID implementation
54,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,eb0371f5b56452fd76814501d773b71dbdb13f7b,Decouple device info getter from U2FDevice
55,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,fcd16c360e9c0afdc71218c223bfb6a51518627e,Rename device-agnostic APDU methods
56,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,1b3d8fa821abd246e426162573eff17802166e36,Generalize hex tracing
57,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,e47a02ac6e1873175defe4b10d71870717916d69,First attempt at decoupling Device/Transaction stuff from StateMachine
58,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,db71f283dd7ba97c5f410c2cdcb95c9a32b90fdb,Add NFC support
59,https://api.github.com/repos/mozilla/authenticator-rs/pulls/114,114,[WIP] Add basic NFC support,"Recently I bought a fancy ACR122U NFC reader because I got tired of plugging in my Yubikey all the time.
To my great surprise, Firefox didn't support Webauthn via NFC yet.
So I took it upon myself to try implementing this myself as #51 isn't really showing a lot of progress :wink: .

About the implementation:
The old library was tightly coupled to wrapping all APDU command in a HID layer. This has been reworked in a backend-agnostic variant, making it possible to add new communication methods.
The NFC implementation is done using `pcsc-rust`, which should provide bindings on Windows, Linux, and MacOS.
To use NFC, use `--features nfc`. This will also disable USB support for now.
This is my first time writing Rust, so there's probably a lot of improvement to be made style-wise.

Work remaining:
- The implementation currently provides an interface similar to the OS-agnostic one, as `StateMachine` only allows for a single `Transaction` backend at the moment. This means that enabling NFC currently disables USB, so `StateMachine` should be reworked.
- The backend-agnostic interface has only been implemented for Linux at the moment. The other platforms must also be converted. This should be relatively easy, but I don't have access to those platforms so I left that for a later point in time.
- This breaks **a lot** of tests. I'm deferring a rewrite of them as the current code structure is just a first draft.

Open issues:
- It seems that there is no way to easily distinguish between a USB-attached smartcard and an NFC reader. This means that we will also try to connect to a USB-attached U2F device as if it is attached via NFC. This will, of course, not work. It seems to be harmless, but perhaps it could interfere with the proper HID implementation, so we should probably try to prevent this from happening. ",Crote,931757,2020-06-27T14:19:37Z,CONTRIBUTOR,False,841,370,22,"Rust library to interact with Security Keys, used by Firefox",Rust,0de730f112e07908b481f38842b1c43682f6724d,Add CI pcsc support
60,https://api.github.com/repos/mozilla/authenticator-rs/pulls/113,113,Add missing bindings for mips*,,glandium,1038527,2020-06-04T07:26:06Z,CONTRIBUTOR,True,6,0,2,"Rust library to interact with Security Keys, used by Firefox",Rust,9cd3853336af0e4dc654a6a64c3f08365d82123d,Add missing bindings for mips*
61,https://api.github.com/repos/mozilla/authenticator-rs/pulls/112,112,Extract in/out HID report sizes from descriptors,"The U2F/CTAP specifications for the HID transport allow arbitrary
sizes for the HID input/output reports, not just the standard 64 bytes.
This commit adds the general logic needed to deal with varying report
sizes and implements the relevant descriptor parsing for Linux.",fmeum,4312191,2020-04-29T06:55:25Z,CONTRIBUTOR,True,217,35,11,"Rust library to interact with Security Keys, used by Firefox",Rust,6495aa2aff7e6fe2a35b5b83bb74c87f3d007537,Fix CI warnings
62,https://api.github.com/repos/mozilla/authenticator-rs/pulls/112,112,Extract in/out HID report sizes from descriptors,"The U2F/CTAP specifications for the HID transport allow arbitrary
sizes for the HID input/output reports, not just the standard 64 bytes.
This commit adds the general logic needed to deal with varying report
sizes and implements the relevant descriptor parsing for Linux.",fmeum,4312191,2020-04-29T06:55:25Z,CONTRIBUTOR,True,217,35,11,"Rust library to interact with Security Keys, used by Firefox",Rust,76b1369821bce19aafa76743c52398b02aa7c786,"Extract in/out HID report sizes from descriptors

The U2F/CTAP specifications for the HID transport allow arbitrary
sizes for the HID input/output reports, not just the standard 64 bytes.
This commit adds the general logic needed to deal with varying report
sizes and implements the relevant descriptor parsing for Linux."
63,https://api.github.com/repos/mozilla/authenticator-rs/pulls/111,111,Update core-foundation dependency to 0.7,"This may be a blocker for https://phabricator.services.mozilla.com/D70140, depending on what the build team thinks about having duplicated dependencies.",kvark,107301,2020-04-08T15:29:15Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,c31a441c81d157b64161d9d8ffe6145ccfde172a,Update core-foundation dependency
64,https://api.github.com/repos/mozilla/authenticator-rs/pulls/110,110,Fix link on GitHub,,rugk,11966684,2020-04-07T17:06:43Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,97ecf4adbb8cd82bfaf73e32cf59d3beef82d5ee,Fix link on GitHub
65,https://api.github.com/repos/mozilla/authenticator-rs/pulls/109,109,Add PowerPC (32-bit big-endian) ioctl definitions,Cross-compiling Firefox 74 fails to find the `ioctl_powerpcbe.rs` file.  Adding this file fixes the build.,dm0-,1379865,2020-03-16T00:47:57Z,CONTRIBUTOR,True,3,0,1,"Rust library to interact with Security Keys, used by Firefox",Rust,47e0cb7a3d7d3223d34ddbe19ebb076db41a7a08,Add PowerPC (32-bit big-endian) ioctl definitions
66,https://api.github.com/repos/mozilla/authenticator-rs/pulls/107,107,Add mips64el build support.,,ClarkWang-2013,6102764,2020-03-10T06:49:23Z,CONTRIBUTOR,True,10,0,3,"Rust library to interact with Security Keys, used by Firefox",Rust,cfa047d2af39b9b5024c4368b442e9d87bf2b860,Add mips64el build support.
67,https://api.github.com/repos/mozilla/authenticator-rs/pulls/106,106,Fix #105: Fails to build on s390x,"Ran `cargo build --features binding-recompile`, then `cargo build` and `cargo test`.
All tests passed.",msirringhaus,50315401,2020-02-28T07:27:17Z,NONE,True,10,0,3,"Rust library to interact with Security Keys, used by Firefox",Rust,e3f9d9ca22f87b7c3890346d5d08a536768318b8,Fix #105: Fails to build on s390x
68,https://api.github.com/repos/mozilla/authenticator-rs/pulls/104,104,Update for clippy errors,,jcjones,518542,2020-01-17T17:50:15Z,CONTRIBUTOR,True,63,11,8,"Rust library to interact with Security Keys, used by Firefox",Rust,f4921709d484c526da11ae8b2e37387be22d65c0,Update for clippy errors
69,https://api.github.com/repos/mozilla/authenticator-rs/pulls/104,104,Update for clippy errors,,jcjones,518542,2020-01-17T17:50:15Z,CONTRIBUTOR,True,63,11,8,"Rust library to interact with Security Keys, used by Firefox",Rust,44e89f2e729c30a1b7630030676d2d6a9428e9e5,cargo fmt
70,https://api.github.com/repos/mozilla/authenticator-rs/pulls/104,104,Update for clippy errors,,jcjones,518542,2020-01-17T17:50:15Z,CONTRIBUTOR,True,63,11,8,"Rust library to interact with Security Keys, used by Firefox",Rust,fdf59bb1df260e1572f152edcf201d1080ac4861,Linux clippy fixups
71,https://api.github.com/repos/mozilla/authenticator-rs/pulls/102,102,Add OpenBSD support to authenticator-rs,"This implementation uses OpenBSD's fido(4) interface which provides restricted USB HID access to FIDO/U2F security keys.  fido(4) is a new driver in OpenBSD 6.7 (6.6-current at the time of this writing); running this code on older releases will simply not find the security keys which is OK as full backwards compatibility is not desired.

See also: http://man.openbsd.org/fido.4

We've also tested this as a patch for the Mozilla Firefox port in OpenBSD, see:
https://marc.info/?l=openbsd-ports&m=157666694220206

Please note that I decided to pass the device as an opened file descriptor instead of a device name to prevent a possible TOCTOU issue. This is different to the existing FreeBSD backend.",reyk,2347189,2020-01-02T16:06:47Z,CONTRIBUTOR,True,306,2,8,"Rust library to interact with Security Keys, used by Firefox",Rust,b29453a530fcdbcb58727089f4a7ed089b579360,"Add OpenBSD support to authenticator-rs

This implementation uses OpenBSD's fido(4) interface which provides
restricted USB HID access to FIDO/U2F security keys.  fido(4) is a new
driver in OpenBSD 6.7 (6.6-current at the time of this writing);
running this code on older releases will simply not find the security
keys which is OK as full backwards compatibility is not desired.

See also: http://man.openbsd.org/fido.4"
72,https://api.github.com/repos/mozilla/authenticator-rs/pulls/102,102,Add OpenBSD support to authenticator-rs,"This implementation uses OpenBSD's fido(4) interface which provides restricted USB HID access to FIDO/U2F security keys.  fido(4) is a new driver in OpenBSD 6.7 (6.6-current at the time of this writing); running this code on older releases will simply not find the security keys which is OK as full backwards compatibility is not desired.

See also: http://man.openbsd.org/fido.4

We've also tested this as a patch for the Mozilla Firefox port in OpenBSD, see:
https://marc.info/?l=openbsd-ports&m=157666694220206

Please note that I decided to pass the device as an opened file descriptor instead of a device name to prevent a possible TOCTOU issue. This is different to the existing FreeBSD backend.",reyk,2347189,2020-01-02T16:06:47Z,CONTRIBUTOR,True,306,2,8,"Rust library to interact with Security Keys, used by Firefox",Rust,c732b76f9ca63184204c8682e5c32d09989bcd21,rustfmt to unbreak the CI build
73,https://api.github.com/repos/mozilla/authenticator-rs/pulls/101,101,Update rand to 0.7,,glandium,1038527,2019-12-05T06:42:29Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,0fa9dbc8c0e13bb34778f6f776feae74d7d6dd14,Update rand to 0.7
74,https://api.github.com/repos/mozilla/authenticator-rs/pulls/99,99,Fix #100 - Ignore communication on unknown channels (in HID transport protocol),"The ctap over hid protocol spec allows for different applications to
communicate with the authenticator at the same time. This is done by
allocating a ""channel"" for each application. An application should
ignore messages coming on channels it does not know.
(see
https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html#usb-channels)

See also https://bugs.chromium.org/p/chromium/issues/detail?id=998452
for a similar bug which was fixed in chrome.",jonathanverner,34303,2019-11-25T09:48:56Z,NONE,True,10,10,1,"Rust library to interact with Security Keys, used by Firefox",Rust,ef50df0322dee145dbf9fba999e8a72214aeafb7,"Ignore communication on unknown channels (in HID transport protocol)

The ctap over hid protocol spec allows for different applications to
communicate with the authenticator at the same time. This is done by
allocating a ""channel"" for each application. An application should
ignore messages coming on channels it does not know.
(see
https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html#usb-channels)

See also https://bugs.chromium.org/p/chromium/issues/detail?id=998452
for a similar bug which was fixed in chrome."
75,https://api.github.com/repos/mozilla/authenticator-rs/pulls/97,97,use bindgen to make linux hidraw access portable,here is my proposed fix to #96 ,estokes,7115692,2019-09-14T18:15:47Z,CONTRIBUTOR,True,133,31,8,"Rust library to interact with Security Keys, used by Firefox",Rust,7e312b3be958b99423fce4122323bba174167c1a,use bindgen to make linux hidraw access portable
76,https://api.github.com/repos/mozilla/authenticator-rs/pulls/97,97,use bindgen to make linux hidraw access portable,here is my proposed fix to #96 ,estokes,7115692,2019-09-14T18:15:47Z,CONTRIBUTOR,True,133,31,8,"Rust library to interact with Security Keys, used by Firefox",Rust,79c5954179764b2d7182d70459449e2c3dd3a8f7,"make the generation of ioctl bindings an optional feature, and add bindings for powerpc64le"
77,https://api.github.com/repos/mozilla/authenticator-rs/pulls/97,97,use bindgen to make linux hidraw access portable,here is my proposed fix to #96 ,estokes,7115692,2019-09-14T18:15:47Z,CONTRIBUTOR,True,133,31,8,"Rust library to interact with Security Keys, used by Firefox",Rust,d4ceec36a29ab36c77c1af9160a6ea9f060ba8f1,generate ioctl bindings for x86_64
78,https://api.github.com/repos/mozilla/authenticator-rs/pulls/93,93,Fix #92 - Expose authenticator details to calling application,"This patch sets groundwork for additional authenticator metadata that Firefox will ultimately want to surface as part of its UX. Not all platforms have full support, but those that don't return safe values.",jcjones,518542,2019-06-27T17:34:27Z,CONTRIBUTOR,True,373,34,19,"Rust library to interact with Security Keys, used by Firefox",Rust,93282babd1758d926adadf696c6edbe4f5eb406b,"Add authenticator USB and Firmware details to the C API

Fixes #92"
79,https://api.github.com/repos/mozilla/authenticator-rs/pulls/93,93,Fix #92 - Expose authenticator details to calling application,"This patch sets groundwork for additional authenticator metadata that Firefox will ultimately want to surface as part of its UX. Not all platforms have full support, but those that don't return safe values.",jcjones,518542,2019-06-27T17:34:27Z,CONTRIBUTOR,True,373,34,19,"Rust library to interact with Security Keys, used by Firefox",Rust,7478ee102557412200ea77f218ac2973bd987dd1,Check CFGetTypeID for GetProperty on MacOS
80,https://api.github.com/repos/mozilla/authenticator-rs/pulls/91,91,Add a missing constant,"This was added in the crate while it was in the m-c tree but was never
merged into the original repository

This is necessary for https://bugzilla.mozilla.org/show_bug.cgi?id=1520166",Eijebong,3650385,2019-05-22T20:27:47Z,CONTRIBUTOR,True,2,1,2,"Rust library to interact with Security Keys, used by Firefox",Rust,216957867566d74e63443f0e417855adb24dc6f6,"Add a missing constant and bump version

This was added in the crate while it was in the m-c tree but was never
merged into the original repository"
81,https://api.github.com/repos/mozilla/authenticator-rs/pulls/90,90,ctap: adjust comments about clientdata hashing,,baloo,59060,2019-05-02T18:08:57Z,NONE,True,5,4,1,"Rust library to interact with Security Keys, used by Firefox",Rust,f07f8cb4d6c1e0727361128a1f4ebb92babe197e,"ctap: adjust comments about clientdata hashing

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
82,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,f7e8e4520d1ed90baf61feea655d65ef588fa59a,"deprecated u2fmanager for fidomanager

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
83,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,600129bf071e14d26965d50e3d25e3c462b34725,"ctap2: adds protocol basics

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
84,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,f9ffd7d0baf7cd62496a80a85b9d350fd6387115,"fido2 implementation of make_credentials

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
85,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,c7d2f386798bd7f23c8e62c94d1467ce7b7de072,"allow to match results of attestation in tests

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
86,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,2b8ac4c02b255c6b4329ad7f751b030e7ab06b75,"hotfix: fixup cbor dep (master broken)

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
87,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,65a3850b37fb3aeec19a668c3e5b78639531a6cd,"disable old api

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
88,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,101739f2365fd6b583dc52a053b52d45c70e0792,"integration test: basic idea how to mock devices

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
89,https://api.github.com/repos/mozilla/authenticator-rs/pulls/78,78,WIP: fido2 support,"This is still a work in progress, and I'm sharing early, but at some point we should be able to use ctap2 devices.",baloo,59060,2019-03-17T05:51:54Z,NONE,True,6935,434,54,"Rust library to interact with Security Keys, used by Firefox",Rust,df28de23154470f18ce2540c773c3465d5273398,"Retrofit older api and implement assertion

Signed-off-by: Arthur Gautier <baloo@gandi.net>"
90,https://api.github.com/repos/mozilla/authenticator-rs/pulls/77,77,Update rand back to 0.6,#76 is fixed by https://github.com/rust-random/rand/pull/720,Eijebong,3650385,2019-02-22T21:23:45Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,5046d3163c40523833476e41d5e5502d29281462,"Update rand back to 0.6

#76 is fixed by https://github.com/rust-random/rand/pull/720"
91,https://api.github.com/repos/mozilla/authenticator-rs/pulls/75,75,Update all the things,I didn't update boxfnonce as this would require adding lifetimes everywhere and that would be a breaking change.,Eijebong,3650385,2018-12-24T15:24:35Z,CONTRIBUTOR,True,8,8,3,"Rust library to interact with Security Keys, used by Firefox",Rust,c318af89ddce190293a442f9730c6edb43434849,Update devd-rs to 0.3
92,https://api.github.com/repos/mozilla/authenticator-rs/pulls/75,75,Update all the things,I didn't update boxfnonce as this would require adding lifetimes everywhere and that would be a breaking change.,Eijebong,3650385,2018-12-24T15:24:35Z,CONTRIBUTOR,True,8,8,3,"Rust library to interact with Security Keys, used by Firefox",Rust,ac8bba84ac27195108fdfcc50ab78924d2b7a336,Update rand to 0.6
93,https://api.github.com/repos/mozilla/authenticator-rs/pulls/75,75,Update all the things,I didn't update boxfnonce as this would require adding lifetimes everywhere and that would be a breaking change.,Eijebong,3650385,2018-12-24T15:24:35Z,CONTRIBUTOR,True,8,8,3,"Rust library to interact with Security Keys, used by Firefox",Rust,22c202fb6d3e4c07e9e6ca8bd824d682391b0956,Update sha2 to 0.8
94,https://api.github.com/repos/mozilla/authenticator-rs/pulls/75,75,Update all the things,I didn't update boxfnonce as this would require adding lifetimes everywhere and that would be a breaking change.,Eijebong,3650385,2018-12-24T15:24:35Z,CONTRIBUTOR,True,8,8,3,"Rust library to interact with Security Keys, used by Firefox",Rust,aea6167dc0665bb531d11c49db1818cb94bce162,Update base64 to 0.10
95,https://api.github.com/repos/mozilla/authenticator-rs/pulls/75,75,Update all the things,I didn't update boxfnonce as this would require adding lifetimes everywhere and that would be a breaking change.,Eijebong,3650385,2018-12-24T15:24:35Z,CONTRIBUTOR,True,8,8,3,"Rust library to interact with Security Keys, used by Firefox",Rust,b559c73b20260a6cc2d84088170afc22269df11c,Update env_logger to 0.6
96,https://api.github.com/repos/mozilla/authenticator-rs/pulls/73,73,Fix travis,,jcjones,518542,2018-11-28T22:34:46Z,CONTRIBUTOR,True,7,11,2,"Rust library to interact with Security Keys, used by Firefox",Rust,b74bdda73668465e83fba8b48b4a1a8f9586a9e6,Only do clippy on stable
97,https://api.github.com/repos/mozilla/authenticator-rs/pulls/73,73,Fix travis,,jcjones,518542,2018-11-28T22:34:46Z,CONTRIBUTOR,True,7,11,2,"Rust library to interact with Security Keys, used by Firefox",Rust,168fee6987026757c90464e911909ee69ee63803,Update cargo fmt
98,https://api.github.com/repos/mozilla/authenticator-rs/pulls/71,71,Fix #60 - Only use core-foundation,"Earlier versions of `core-foundation` lacked `runloop` support, among other things, prompting us to use `core-foundation-sys`. >0.6 supports everything needed out of `-sys`, so let's retire direct use of `core-foundation-sys`.",jcjones,518542,2018-10-23T15:29:40Z,CONTRIBUTOR,True,8,13,6,"Rust library to interact with Security Keys, used by Firefox",Rust,1c5c29d1f9a4ea90f2f484f7f4702d3914c9c238,"Fix #60 - Only use core-foundation

Earlier versions of core-foundation lacked runloop support, among other things,
prompting us to use core-foundation-sys. >0.6 supports everything needed out of
-sys, so let's retire direct use of core-foundation-sys."
99,https://api.github.com/repos/mozilla/authenticator-rs/pulls/70,70,"Fix #35 - Run Clippy at TravisCI, and clean up Clippy warnings","This works for Rust Beta and Stable, and breaks on Nightly because the clippy lints require a `clippy::` prefix. Eventually that will break Rust Beta builds at which case we'll need to adjust the `.travis.yml` again.

Lots of this is taken from https://github.com/serianox/u2f-hid-rs/tree/ci -- thanks @serianox!",jcjones,518542,2018-10-23T14:57:17Z,CONTRIBUTOR,True,62,54,16,"Rust library to interact with Security Keys, used by Firefox",Rust,b365b41f120c4471c2900af8f6b2d9d31d2a0d7e,Add fuzzing corpuses to gitignore
100,https://api.github.com/repos/mozilla/authenticator-rs/pulls/70,70,"Fix #35 - Run Clippy at TravisCI, and clean up Clippy warnings","This works for Rust Beta and Stable, and breaks on Nightly because the clippy lints require a `clippy::` prefix. Eventually that will break Rust Beta builds at which case we'll need to adjust the `.travis.yml` again.

Lots of this is taken from https://github.com/serianox/u2f-hid-rs/tree/ci -- thanks @serianox!",jcjones,518542,2018-10-23T14:57:17Z,CONTRIBUTOR,True,62,54,16,"Rust library to interact with Security Keys, used by Firefox",Rust,414c3068bfda80bb0451db2abaa4c6a021e56ef6,"Fix #35 - Run Clippy at TravisCI, and clean up Clippy warnings

Lots of this is taken from https://github.com/serianox/u2f-hid-rs/tree/ci --
thanks @serianox!"
101,https://api.github.com/repos/mozilla/authenticator-rs/pulls/69,69,"Make rust fmt run on ""stable"" only for TravisCI, and run it.",,jcjones,518542,2018-10-23T07:53:24Z,CONTRIBUTOR,True,22,22,8,"Rust library to interact with Security Keys, used by Firefox",Rust,cde5034a87d1c0711bd053e4f447a877ff3b53fc,"Make rust fmt run on ""stable"" only for TravisCI, and run it."
102,https://api.github.com/repos/mozilla/authenticator-rs/pulls/68,68,Remove unused import to resolve build warning on macOS,,alex,772,2018-10-15T14:08:10Z,CONTRIBUTOR,True,0,2,1,"Rust library to interact with Security Keys, used by Firefox",Rust,701b145e303c689a7c42c8377dda5adce77f69d5,Remove unused import to resolve build warning on macOS
103,https://api.github.com/repos/mozilla/authenticator-rs/pulls/67,67,"use `extern ""system""` rather than `extern ""stdcall""`","`extern ""stdcall""` really only has meaning on x86 Windows; I'm not even sure what calling `extern ""stdcall""` functions on x86-64 Windows does (probably bad things?).  `extern ""system""` carries the correct meaning on x86 and x86-64 (and other architectures such as AArch64), so let's use that.  (FWIW, `winapi` also uses `extern ""system""` for these functions.)",froydnj,151096,2018-09-25T20:15:13Z,CONTRIBUTOR,True,2,2,1,"Rust library to interact with Security Keys, used by Firefox",Rust,bcbaab8d8f02c187e23eb62e03879b42f1feb36a,"use `extern ""system""` rather than `extern ""stdcall""`

`extern ""stdcall""` really only has meaning on x86 Windows; I'm not even sure what calling `extern ""stdcall""` functions on x86-64 Windows does (probably bad things?).  `extern ""system""` carries the correct meaning on x86 and x86-64 (and other architectures such as AArch64), so let's use that.  (FWIW, `winapi` also uses `extern ""system""` for these functions.)"
104,https://api.github.com/repos/mozilla/authenticator-rs/pulls/66,66,Fix #65 - Update to WinAPI 0.3,"This updates to the new package layouts for the WinAPI 0.3.x crate, which doesn't appear to have had any semantic changes over 0.2.x.",jcjones,518542,2018-09-20T18:33:05Z,CONTRIBUTOR,True,87,69,11,"Rust library to interact with Security Keys, used by Firefox",Rust,471df9a2d468fad6efce26684791aaeddb4e8ce7,Fix #65 - Update to WinAPI 0.3
105,https://api.github.com/repos/mozilla/authenticator-rs/pulls/66,66,Fix #65 - Update to WinAPI 0.3,"This updates to the new package layouts for the WinAPI 0.3.x crate, which doesn't appear to have had any semantic changes over 0.2.x.",jcjones,518542,2018-09-20T18:33:05Z,CONTRIBUTOR,True,87,69,11,"Rust library to interact with Security Keys, used by Firefox",Rust,6fe82abf07a3a89528359cfe7de893b5b2084f1f,rust-fmt update
106,https://api.github.com/repos/mozilla/authenticator-rs/pulls/64,64,Update core-foundation and use it to clean up some code.,This updates to core-foundation-sys 0.6.0 and additionally uses core-foundation to clean up some of the manual CFDictionary code.,jrmuizel,332653,2018-05-04T19:29:10Z,CONTRIBUTOR,True,27,74,5,"Rust library to interact with Security Keys, used by Firefox",Rust,547a1d7f32b57f6f844f4cb46424bcc4951f045c,Update to core-foundation-sys 0.6.0
107,https://api.github.com/repos/mozilla/authenticator-rs/pulls/64,64,Update core-foundation and use it to clean up some code.,This updates to core-foundation-sys 0.6.0 and additionally uses core-foundation to clean up some of the manual CFDictionary code.,jrmuizel,332653,2018-05-04T19:29:10Z,CONTRIBUTOR,True,27,74,5,"Rust library to interact with Security Keys, used by Firefox",Rust,a3f447c3d19bc6425ee9f7ee72a78f3224f8b7b3,"Use core-foundation to create the CFDictionary

This removes a bunch of code and takes advantage of the helpers from
core-foundation."
108,https://api.github.com/repos/mozilla/authenticator-rs/pulls/62,62,Add FreeBSD Support,"This PR adds support for FreeBSD (and makes it easier to add support for other BSDs in the future, especially DragonFly since it also uses `devd`).

- BSD `uhid` is pretty similar to Linux `hidraw`, except for skipping the report id in `write` (and ioctls are different, of course). So the non-Linux-specific parts have been extracted into `src/hidproto.rs`.
- my crate [devd-rs](https://github.com/myfreeweb/devd-rs) is used for getting hotplug notifications.
- `rust-crypto` to `sha2`: I think rust-crypto failed the build for me. The monolithic `rust-crypto` crate is deprecated anyway.
- `env_logger` update: prompted by `mach vendor rust` in Firefox.
- rustfmt for CI

The test example binary is not fully reliable for me (sometimes it hangs), but Firefox Nightly with this library seems more reliable: I've been able to complete WebAuthn and Yubico tests and authenticate on gitlab.com multiple times in the same session without any issues.

BTW, it would be nice to retry `Device::new` multiple times, because the notification might appear before `devd` rules give the user permission to access the token. (Does `udev` on Linux not have that problem?)

cc @jbeich",unrelentingtech,208340,2018-04-16T18:50:50Z,CONTRIBUTOR,True,566,151,11,"Rust library to interact with Security Keys, used by Firefox",Rust,553f1c1738635ff5d549cc66a251b58193499231,"Extract hidproto module from linux::hidraw

Make the protocol parts independent of Linux code, in preparation for
adding FreeBSD support."
109,https://api.github.com/repos/mozilla/authenticator-rs/pulls/62,62,Add FreeBSD Support,"This PR adds support for FreeBSD (and makes it easier to add support for other BSDs in the future, especially DragonFly since it also uses `devd`).

- BSD `uhid` is pretty similar to Linux `hidraw`, except for skipping the report id in `write` (and ioctls are different, of course). So the non-Linux-specific parts have been extracted into `src/hidproto.rs`.
- my crate [devd-rs](https://github.com/myfreeweb/devd-rs) is used for getting hotplug notifications.
- `rust-crypto` to `sha2`: I think rust-crypto failed the build for me. The monolithic `rust-crypto` crate is deprecated anyway.
- `env_logger` update: prompted by `mach vendor rust` in Firefox.
- rustfmt for CI

The test example binary is not fully reliable for me (sometimes it hangs), but Firefox Nightly with this library seems more reliable: I've been able to complete WebAuthn and Yubico tests and authenticate on gitlab.com multiple times in the same session without any issues.

BTW, it would be nice to retry `Device::new` multiple times, because the notification might appear before `devd` rules give the user permission to access the token. (Does `udev` on Linux not have that problem?)

cc @jbeich",unrelentingtech,208340,2018-04-16T18:50:50Z,CONTRIBUTOR,True,566,151,11,"Rust library to interact with Security Keys, used by Firefox",Rust,8bb69b4a4053b3b1b3ef1a2a8e8298d1530b64ed,"Add FreeBSD (uhid + devd) support

Tested with a YubiKey 4."
110,https://api.github.com/repos/mozilla/authenticator-rs/pulls/62,62,Add FreeBSD Support,"This PR adds support for FreeBSD (and makes it easier to add support for other BSDs in the future, especially DragonFly since it also uses `devd`).

- BSD `uhid` is pretty similar to Linux `hidraw`, except for skipping the report id in `write` (and ioctls are different, of course). So the non-Linux-specific parts have been extracted into `src/hidproto.rs`.
- my crate [devd-rs](https://github.com/myfreeweb/devd-rs) is used for getting hotplug notifications.
- `rust-crypto` to `sha2`: I think rust-crypto failed the build for me. The monolithic `rust-crypto` crate is deprecated anyway.
- `env_logger` update: prompted by `mach vendor rust` in Firefox.
- rustfmt for CI

The test example binary is not fully reliable for me (sometimes it hangs), but Firefox Nightly with this library seems more reliable: I've been able to complete WebAuthn and Yubico tests and authenticate on gitlab.com multiple times in the same session without any issues.

BTW, it would be nice to retry `Device::new` multiple times, because the notification might appear before `devd` rules give the user permission to access the token. (Does `udev` on Linux not have that problem?)

cc @jbeich",unrelentingtech,208340,2018-04-16T18:50:50Z,CONTRIBUTOR,True,566,151,11,"Rust library to interact with Security Keys, used by Firefox",Rust,e47d97eddefd0c61b016cb7169e7b4d307649548,"rustfmt

+ mention FreeBSD in readme"
111,https://api.github.com/repos/mozilla/authenticator-rs/pulls/61,61,Fix Travis,"Travis CI metadata update, a rustfmt, and fixes to the README and Example.",jcjones,518542,2018-02-26T16:00:09Z,CONTRIBUTOR,True,156,135,18,"Rust library to interact with Security Keys, used by Firefox",Rust,fb37d7e09355a9319641bddbb4e74bc8825c2c0f,Travis update
112,https://api.github.com/repos/mozilla/authenticator-rs/pulls/61,61,Fix Travis,"Travis CI metadata update, a rustfmt, and fixes to the README and Example.",jcjones,518542,2018-02-26T16:00:09Z,CONTRIBUTOR,True,156,135,18,"Rust library to interact with Security Keys, used by Firefox",Rust,6e9143884063c93c1b823c470a8896fb4a2117e4,rustfmt
113,https://api.github.com/repos/mozilla/authenticator-rs/pulls/61,61,Fix Travis,"Travis CI metadata update, a rustfmt, and fixes to the README and Example.",jcjones,518542,2018-02-26T16:00:09Z,CONTRIBUTOR,True,156,135,18,"Rust library to interact with Security Keys, used by Firefox",Rust,9efffada019afc41935b129068a7e0e9f954497a,"Example fix, and README update"
114,https://api.github.com/repos/mozilla/authenticator-rs/pulls/59,59,"One StateMachine to rule them all, fixes #58",,ttaubert,300895,2017-11-21T18:41:01Z,CONTRIBUTOR,True,238,489,12,"Rust library to interact with Security Keys, used by Firefox",Rust,ed0728d259f757c54705dae9d0cba9e5fb488dab,"One StateMachine to rule them all, fixes #58"
115,https://api.github.com/repos/mozilla/authenticator-rs/pulls/57,57,"Remove KeyHandleMatcher, Implement per-device threads on Windows, fixes #47",,ttaubert,300895,2017-11-21T13:19:33Z,CONTRIBUTOR,True,185,369,6,"Rust library to interact with Security Keys, used by Firefox",Rust,296f6707b3da1e098dff866b8bc5d6d734a15515,"Remove KeyHandleMatcher, Implement per-device threads on Windows, fixes #47"
116,https://api.github.com/repos/mozilla/authenticator-rs/pulls/56,56,"Linux-part of #47: Implement per-device threads, don't use the KeyHandleMatcher",This rewrites the Linux backend to look like the macOS one. See #52.,ttaubert,300895,2017-11-20T15:46:48Z,CONTRIBUTOR,True,216,234,6,"Rust library to interact with Security Keys, used by Firefox",Rust,32721767831e21d15639ed751383d376171a8d68,"Linux-part of #47: Implement per-device threads, don't use the KeyHandleMatcher"
117,https://api.github.com/repos/mozilla/authenticator-rs/pulls/55,55,Use CFRetain() to ensure the CFRunLoop! is kept alive as long as we need it,"According to the [docs](https://developer.apple.com/documentation/corefoundation/1542428-cfrunloopgetcurrent), `CFRunLoopGetCurrent()` returns a `CFRunLoop!` that we have to keep alive ourselves. If we fail to do so, we crash when calling `CFRunLoopStop()`.",ttaubert,300895,2017-11-16T20:29:58Z,CONTRIBUTOR,True,215,150,5,"Rust library to interact with Security Keys, used by Firefox",Rust,ae8f2b921d987dc9d919800c9f62fc90777b2a92,Use CFRetain() to ensure the CFRunLoop! is kept alive as long as we need it
118,https://api.github.com/repos/mozilla/authenticator-rs/pulls/54,54,"Let stubs fail, instead of running until cancellation",On platforms that use the stubbed platform manager we should fail immediately when a request comes in. Currently we don't even time out.,ttaubert,300895,2017-11-16T20:24:30Z,CONTRIBUTOR,True,6,5,1,"Rust library to interact with Security Keys, used by Firefox",Rust,3052954a04ea3763ae41b5138dda8aa8071ce905,"Let stubs fail, instead of running until cancellation"
119,https://api.github.com/repos/mozilla/authenticator-rs/pulls/52,52,Rewrite macOS IOHIDManager communication and state machine,"r? @jcjones 

Looking forward to your feedback!

This seems very stable, I can't make a custom Firefox panic when plugging/unplugging multiple times. Re-plugged devices are properly registered, and work for registration and signing. With Chrome open, I also can't reproduce bug 1398268 anymore.",ttaubert,300895,2017-11-09T11:52:00Z,CONTRIBUTOR,False,402,383,9,"Rust library to interact with Security Keys, used by Firefox",Rust,4906ba86e34c31aa856f262ccaafd070f885c452,Rewrite macOS IOHIDManager communication and state machine
120,https://api.github.com/repos/mozilla/authenticator-rs/pulls/49,49,Allow build failures from Rust nightly,"This is the recommended configuration of Rust project in Travis, see https://docs.travis-ci.com/user/languages/rust/#Choosing-a-Rust-version",upsuper,333750,2017-10-27T01:06:53Z,CONTRIBUTOR,True,4,0,1,"Rust library to interact with Security Keys, used by Firefox",Rust,34e7c831e8bf23be74a863e3060593c3e70fac4e,Allow build failures from Rust nightly
121,https://api.github.com/repos/mozilla/authenticator-rs/pulls/48,48,Remove unnescary `mut`,,alex,772,2017-10-16T15:32:08Z,CONTRIBUTOR,True,1,1,1,"Rust library to interact with Security Keys, used by Firefox",Rust,a12c7c21d22a8c939df043f6e2c1eb93ad21c188,Remove unnescary `mut`
122,https://api.github.com/repos/mozilla/authenticator-rs/pulls/46,46,Fix u2f-hid-rs to compile Fennec from OSX,"For OSX, u2f-hid-rs uses ""build.rs"" to set appropriate linker flags.
Unfortunately, when cross-compiling to Android on OSX, build.rs is setting
those flags even though target_os is (theoretically) now Android. There's
almost certainly a perfectly reasonable explanation for why this is so, but for
now, this patch is a hack to un-break Fennec builds on OSX by playing off of
target_env in addition to target_os.",jcjones,518542,2017-09-18T22:20:12Z,CONTRIBUTOR,True,1,9,3,"Rust library to interact with Security Keys, used by Firefox",Rust,306c753275b786a019c1599b02e5ccf5facaa91b,"Bug 1400927 - Fix Android build. r?jcj

One cannot use #[cfg(target_os)] checks in build.rs.
Build scripts can be used to generate code so the target
is set to the host platform when they are compiled.

Having this setting exported an unconditional link
depencency whenever the host was macOS, which broke
cross-compiling, in particular for fennec builds
targetting Android.

Instead, declare the IOKit dependency on the `extern`
block which imports the symbol inside macOS-specific
code. That way final link still works, but the extra
dependency is only enabled when appropriate for the
final target, like the other platform-dependent code."
123,https://api.github.com/repos/mozilla/authenticator-rs/pulls/44,44,"Allow building on BSDs, Solaris and other unsupported platforms","If Gecko won't support builds without u2f-hid-rs then stubs are required.

https://bugzilla.mozilla.org/show_bug.cgi?id=1400066
",jbeich,11153579,2017-09-15T00:51:33Z,CONTRIBUTOR,True,2,2,2,"Rust library to interact with Security Keys, used by Firefox",Rust,1305407cb4ace290e0043b1b5251e16d5fb27c76,"All unsupported platforms to use stub

error[E0432]: unresolved import `platform::PlatformManager`
  --> src/manager.rs:10:5
   |
10 | use platform::PlatformManager;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ Maybe a missing `extern crate platform;`?"
124,https://api.github.com/repos/mozilla/authenticator-rs/pulls/41,41,fixes #39: properly unpack status codes from APDUs,,ttaubert,300895,2017-08-30T10:48:47Z,CONTRIBUTOR,True,28,36,1,"Rust library to interact with Security Keys, used by Firefox",Rust,f8d68cac4a11c0f4f1c70fed57a15655c9d78a6d,fixes #39: properly unpack status codes from APDUs
125,https://api.github.com/repos/mozilla/authenticator-rs/pulls/41,41,fixes #39: properly unpack status codes from APDUs,,ttaubert,300895,2017-08-30T10:48:47Z,CONTRIBUTOR,True,28,36,1,"Rust library to interact with Security Keys, used by Firefox",Rust,76c5a43c509f2208edada959e03ecc2af5e4a46f,"Take 2-byte status instead of separate hi,lo arguments"
126,https://api.github.com/repos/mozilla/authenticator-rs/pulls/38,38,"Add a stub for Android, so that builds on Android compile OK.",,jcjones,518542,2017-08-28T23:08:55Z,CONTRIBUTOR,True,44,0,2,"Rust library to interact with Security Keys, used by Firefox",Rust,a44835b64bb68cb77bda5cb5907b28aae607fc00,"Add a stub for Android, so that builds on Android compile OK."
127,https://api.github.com/repos/mozilla/authenticator-rs/pulls/37,37,Fix most clippy issues,"There are a couple warnings left but they don't really apply.

r? @ttaubert @qDot",Manishearth,1617736,2017-08-10T21:05:07Z,CONTRIBUTOR,True,18,14,6,"Rust library to interact with Security Keys, used by Firefox",Rust,40f7c00d45e4356e211d8b3d0fe641e254fc1684,Fix most clippy issues
128,https://api.github.com/repos/mozilla/authenticator-rs/pulls/37,37,Fix most clippy issues,"There are a couple warnings left but they don't really apply.

r? @ttaubert @qDot",Manishearth,1617736,2017-08-10T21:05:07Z,CONTRIBUTOR,True,18,14,6,"Rust library to interact with Security Keys, used by Firefox",Rust,ff00d026f54e7d1fb1abdf97c6a3a7d76003fc99,Rustfmt
129,https://api.github.com/repos/mozilla/authenticator-rs/pulls/31,31,Use clang's AddressSanitizer for unit tests on Rust Nightly builds,,jcjones,518542,2017-08-09T18:52:01Z,CONTRIBUTOR,True,5,4,1,"Rust library to interact with Security Keys, used by Firefox",Rust,69d428c2edcbf4eee8269ba84a96926a439e84cd,"For nightly builds, run the tests with ASAN."
130,https://api.github.com/repos/mozilla/authenticator-rs/pulls/31,31,Use clang's AddressSanitizer for unit tests on Rust Nightly builds,,jcjones,518542,2017-08-09T18:52:01Z,CONTRIBUTOR,True,5,4,1,"Rust library to interact with Security Keys, used by Firefox",Rust,69d933b33af6f45c3dc64a7974ccc4e4c354b8a4,Be less verbose with ASAN builds
131,https://api.github.com/repos/mozilla/authenticator-rs/pulls/30,30,"Simplify U2F packet communication, remove unused fields","Simplify U2F packet reading and writing some more. Remove fields we never used. Fuzzing should be easier to implement with the new APIs.

r? @jcjones ",ttaubert,300895,2017-08-02T21:10:48Z,CONTRIBUTOR,True,141,269,5,"Rust library to interact with Security Keys, used by Firefox",Rust,4ceee629abb7b9e6784f24b25139e999d22a1775,"Simplify U2F packet communication, remove unused fields"
132,https://api.github.com/repos/mozilla/authenticator-rs/pulls/27,27,Fixes #26: Copy bytes instead of using unsafe casting for HID types,"Can you give this a try on your machine and see if it fixes the crashes you see? Even if it doesn't, I think this is still a valuable thing to do.",ttaubert,300895,2017-08-01T14:14:57Z,CONTRIBUTOR,True,310,212,7,"Rust library to interact with Security Keys, used by Firefox",Rust,3160df45546e3046069985f32fb758920aa0f045,Fixes #26: Copy bytes instead of using unsafe casting for HID types
133,https://api.github.com/repos/mozilla/authenticator-rs/pulls/23,23,"Run rustfmt, and configure Travis to enforce rustfmt.",,jcjones,518542,2017-07-27T16:11:10Z,CONTRIBUTOR,True,1329,781,25,"Rust library to interact with Security Keys, used by Firefox",Rust,6da667a37fc18aac9b10fa88a5a865a3bc6c4790,"Run rustfmt, and configure Travis to enforce rustfmt."
134,https://api.github.com/repos/mozilla/authenticator-rs/pulls/18,18,Fix #7: Refactor U2FProtocol,Move U2F protocol functions out of `lib.rs` into `u2fprotocol.rs`,jcjones,518542,2017-06-12T16:32:16Z,CONTRIBUTOR,True,567,561,5,"Rust library to interact with Security Keys, used by Firefox",Rust,218a47b1e36806dc34f318ec9b4746b2235ac01a,Fix #7 - Move U2F protocol functions out of lib.rs into u2fprotocol.rs
135,https://api.github.com/repos/mozilla/authenticator-rs/pulls/3,3,Resolve #2 - Support TravisCI,"Add readme.
Add travis config.",jcjones,518542,2017-05-16T16:02:53Z,CONTRIBUTOR,True,21,0,2,"Rust library to interact with Security Keys, used by Firefox",Rust,ebfd017558776afb0819f116cded4b764d11c925,"Resolve #2 - Support TravisCI

Add readme.
Add travis config."
