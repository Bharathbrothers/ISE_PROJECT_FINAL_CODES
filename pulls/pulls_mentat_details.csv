,pullid,pulls_number,pulltitle,pullsbody,pullsuserlogin,pullsuserid,pullauthordate,author_association,merged_status,stats_addns,stats_delns,stats_changed_files,pull_repo_desc,pull_repo_lang,pull_commit_sha,pull_commit_message
0,https://api.github.com/repos/mozilla/mentat/pulls/821,821,add plus symbol,"Note that the position of + in the char set can break the build.

--- a/edn/src/edn.rustpeg
+++ b/edn/src/edn.rustpeg
@@ -146,7 +146,7 @@ namespace_separator = ""/""
 // Keywords follow the rules of symbols, except they can (and must) begin with :
 // e.g. :fred or :my/fred. See https://github.com/edn-format/edn#keywords
 symbol_char_initial = [a-zA-Z0-9*!_?$%&=<>]
-symbol_char_subsequent = [+a-zA-Z0-9*!_?$%&=<>-]
+symbol_char_subsequent = [a-zA-Z0-9*!_?$%&=<>-+]

At the start seems to be fine, but at the end after the - caused this:

error[E0030]: lower range bound must be less than or equal to upper
   --> foobar/target/debug/build/edn-ef28a228c59621bd/out/edn.rs:153:395
    |
153 |  fn __parse_symbol_char_subsequent < 'input > ( __input : & 'input str , __state : & mut ParseState < 'input > , __pos : usize ) -> RuleResult < () > { # ! [ allow ( non_snake_case , unused ) ] if __input . len ( ) > __pos { let ( __ch , __next ) = char_range_at ( __input , __pos ) ; match __ch { 'a' ... 'z' | 'A' ... 'Z' | '0' ... '9' | '*' | '!' | '_' | '?' | '$' | '%' | '&' | '=' | '<' | '>' ... '+' => Matched ( __next , ( ) ) , _ => __state . mark_failure ( __pos , ""[a-zA-Z0-9*!_?$%&=<>-+]"" ) , } } else { __state . mark_failure ( __pos , ""[a-zA-Z0-9*!_?$%&=<>-+]"" ) } } 
    |                                                                                                                                                                                                                                                                                                                                                                                                           ^^^ lower bound larger than upper bound
 If anyone knows why I would love to know.

Finally I feel like I am adding clutter with lots of branches, can I do something better?",sc13-bioinf,2690765,2018-09-02T11:21:55Z,CONTRIBUTOR,True,4,1,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5be4dde066c482bb245d6c8cae17890ff8bdf401,"add plus symbol

note that its position in the char set can break the build"
1,https://api.github.com/repos/mozilla/mentat/pulls/820,820,Add method to get the ValueType of a TypedValue as a keyword to Android API,"Also remove a println (leftover from debug?)

This makes life easier when dealing with query results, as it allows them to be extracted without knowing the types in advance. This makes use from clojure easier.

Returning standard data structures and types instead (commented on elsewhere) is something that I think is also worth a look.

I would be interested in helping out with this project so I would be happy to chat sometime.",sc13-bioinf,2690765,2018-09-01T00:18:18Z,CONTRIBUTOR,False,44,2,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,922ee4bf747f46d6f4b737a6df6cf20788159db2,"Add method to get the ValueType of a TypedValue as a keyword

remove debug println"
2,https://api.github.com/repos/mozilla/mentat/pulls/820,820,Add method to get the ValueType of a TypedValue as a keyword to Android API,"Also remove a println (leftover from debug?)

This makes life easier when dealing with query results, as it allows them to be extracted without knowing the types in advance. This makes use from clojure easier.

Returning standard data structures and types instead (commented on elsewhere) is something that I think is also worth a look.

I would be interested in helping out with this project so I would be happy to chat sometime.",sc13-bioinf,2690765,2018-09-01T00:18:18Z,CONTRIBUTOR,False,44,2,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca460fadc624c48e37ed14a6e8ab384a68caa224,add size to tuple result to allow looping over the contents
3,https://api.github.com/repos/mozilla/mentat/pulls/819,819,Make sure double retractions are not inserted. Fixes #818,,grigoryk,465422,2018-08-31T22:12:35Z,COLLABORATOR,True,31,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aa7960277f05153c8f71ce355ec95040a01b0712,Make sure double retractions are not inserted. Fixes #818
4,https://api.github.com/repos/mozilla/mentat/pulls/817,817,add method to return current schema to android bindings,Needs a review regarding safety/correctness. I am pretty new to rust / JNA.,sc13-bioinf,2690765,2018-08-30T07:31:23Z,CONTRIBUTOR,False,21,1,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e33768e5cee4bc9af639f320207023637248ab0f,add method to return current schema to android bindings
5,https://api.github.com/repos/mozilla/mentat/pulls/816,816,Build and deploy swiftdoc using jazzy,"* Move from using `ghp-import` to using a travis deploy stage to commit documentation updates.
* Add Jazzy installation and swiftdoc generation to document building script.
* Commit generated documentation to a new branch `gh-pages-api-docs`. The existing `gh-pages` branch was incorrectly formatted and it was easier to just create a new branch.
* Remove existing `cargo-doc` script.
* Ensure build phase only executes on the master branch.

TODO: Point GithubPages to `gh-pages-api-docs` branch rather than master. This is done directly in settings and so will not form part of this PR. It needs to be done once this patch has landed.
",fluffyemily,12613048,2018-08-23T09:50:44Z,COLLABORATOR,False,20,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,11f0497375005cf406e8cb1de27d5b2e18128711,"build and deploy swiftdoc using jazzy

Skip tests on deploy stage

push to specific pages api branch"
6,https://api.github.com/repos/mozilla/mentat/pulls/816,816,Build and deploy swiftdoc using jazzy,"* Move from using `ghp-import` to using a travis deploy stage to commit documentation updates.
* Add Jazzy installation and swiftdoc generation to document building script.
* Commit generated documentation to a new branch `gh-pages-api-docs`. The existing `gh-pages` branch was incorrectly formatted and it was easier to just create a new branch.
* Remove existing `cargo-doc` script.
* Ensure build phase only executes on the master branch.

TODO: Point GithubPages to `gh-pages-api-docs` branch rather than master. This is done directly in settings and so will not form part of this PR. It needs to be done once this patch has landed.
",fluffyemily,12613048,2018-08-23T09:50:44Z,COLLABORATOR,False,20,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8948c8436a1aa7d84682a342beb88c09f7a4dae0,Remove unused script
7,https://api.github.com/repos/mozilla/mentat/pulls/816,816,Build and deploy swiftdoc using jazzy,"* Move from using `ghp-import` to using a travis deploy stage to commit documentation updates.
* Add Jazzy installation and swiftdoc generation to document building script.
* Commit generated documentation to a new branch `gh-pages-api-docs`. The existing `gh-pages` branch was incorrectly formatted and it was easier to just create a new branch.
* Remove existing `cargo-doc` script.
* Ensure build phase only executes on the master branch.

TODO: Point GithubPages to `gh-pages-api-docs` branch rather than master. This is done directly in settings and so will not form part of this PR. It needs to be done once this patch has landed.
",fluffyemily,12613048,2018-08-23T09:50:44Z,COLLABORATOR,False,20,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b82693e205efde1a896a57c8633058f30bc5865,Only run deplot on master branch
8,https://api.github.com/repos/mozilla/mentat/pulls/810,810,Automate iOS Build and Test,,fluffyemily,12613048,2018-08-22T15:40:32Z,COLLABORATOR,True,41,9,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,29da5babb216245f0f1b1736992e2bbe0fc72ac2,"Adding iOS Build and Test to CI (#804)

* Add iOS SDK build and test to rust 1.25.0 version of travis CI build

* Address review comments

* Move iOS testing and document generation into post test jobs"
9,https://api.github.com/repos/mozilla/mentat/pulls/809,809,Bump failure to 0.1.2,,grigoryk,465422,2018-08-21T01:25:48Z,COLLABORATOR,False,25,25,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca950f3921da8d6407c80644e96e90c54ce5efa9,Bump failure to 0.1.2
10,https://api.github.com/repos/mozilla/mentat/pulls/808,808,Allow 'sqlcipher' feature for all uses of rusqlite,"This also patches our CI test script to only run ""--feature sqlcipher""
tests on sub-crates which expose this feature (i.e. themselves rely on rusqlite).",grigoryk,465422,2018-08-20T23:11:47Z,COLLABORATOR,True,25,3,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4a78d492f194c050dcc10cf09d604a59036c5f8,"Allow 'sqlcipher' feature for all uses of rusqlite

This also patches our CI test script to only run ""--feature sqlcipher""
tests on sub-crates which expose this feature (i.e. themselves rely on rusqlite)."
11,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,66d38c842ecf9ff7810dbd0d35fe30963c75921a,"Pre: Remove `open_empty`.

This was a work-around for Tolstoy, which couldn't gracefully handle
syncing a store with a bootstrap transaction.  Tolstoy now handles
that single transaction, so this is no longer necessary."
12,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0205092f40304cd6ada384f688bd61730523334e,Pre: Add top-level NotYetImplemented error.
13,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8dba3b6b4671dfc7224a948237d88a539d2fa521,Pre: expose read_partition_map from the db crate
14,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f2ac108ae5ee24aa5ac8c4fffd7537cfd736fd1,"Pre: Split a Db error for clarity

error_chain stack limitations no longer apply, so let's have better errors!"
15,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99d18a59d0252f95fd9b4bf7050360f7d57ed609,Pre: use 'db/syncable' feature; derive serialization for PartitionMap
16,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,440ee252f40739f3fd34fac4492d315806e79e28,"Split ""mentat transaction"" logic away from the main crate

Sync needs to operate over a ""mentat transaction"", not just a ""db transaction"".
This shuffle allows internal mentat crates to consume InProgress, which models
the concept of a ""mentat transaction""."
17,https://api.github.com/repos/mozilla/mentat/pulls/807,807,"Split ""mentat transaction"" logic into its own crate","Splitting some more ""pre"" work from #563.

Paraphrased from the discussion in that PR:

Splitting high level metadata logic away from the top level is needed in some form to enable nicer patterns for the internal consumers (well, just `tolstoy` for now). Further refactoring of this logic should be easier from this point on, and the consumers building on top of the `transaction` crate won't be affected significantly - likely just a few import changes.

As it stands, `transaction` right now is a thin layer on top of `db`, doing some bookkeeping one layer above it. I'm not a fan of having Store and Conn at the top level, either - it makes writing tests that want to use a real Conn awkward, forcing them to be at the top level, away from the functionality that's being tested. The TestConn surrogate is a smell of that. So, there's like more re-shuffling to be done! My hope is that little steps like this will help inform us what the ""ideal"" world might look like.",grigoryk,465422,2018-08-20T19:33:45Z,COLLABORATOR,True,914,803,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b1dc7be47b508d5ce4336be78b022656cb262dda,"Post: use dirs crate, avoiding compile warning about home_dir"
18,https://api.github.com/repos/mozilla/mentat/pulls/806,806,WIP: tutorial.,"Figured I'd throw up a PR for this old branch. It's almost certainly bitrotted, but better in a PR than in a branch.",rnewman,91722,2018-08-11T22:25:14Z,COLLABORATOR,False,177,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,28a07709a7751062a4dfce4d662342a752d1038d,WIP: tutorial.
19,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,163635a4a77de66fbf77a803564f22549cd20536,Pre: Move Entid and KnownEntid into core_traits
20,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1f89968403331fce14b1f554faecc0f6ba3e1b59,Pre: Move core/types.rs into core_traits
21,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,055b42af0ac852db8766b8f9bbe87ae6dad88dc2,Pre: Move db/errors.rs into db_traits
22,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32e57bee7a987e0c7e1ab477da24fd0270671628,Pre: Move query-pull/errors into query-pull-traits
23,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,30f1304c3a5bd43e1e3d2ee72a02ae43da0aeacd,Pre: Remove query/ crate
24,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aea988ff55f6dec730ca2c4711c98eeebd3f5f7b,Pre: Do not re-export EdnParseError from core
25,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b875a26b9f37f3a7516cef24920b58815b268cb,Pre: Move ValueTypeSet into core-traits
26,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7111c799d555c0e1d7789ef89d74bf614a88f26,Pre: Move query-algebrizer/error.rs into query-algebrizer-traits
27,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9444559f6cad47e6aafd7bc4397cad1e372321e7,Pre: Move query-projectors/errors and aggregates into query-projector-traits
28,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cd0bd46232ca325da7cc94e4de11da3187677197,Pre: Fold query-translator into query-projector
29,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,474d17d3da07e69d5d00f6172080c280df3228cf,Pre: Move sql/errors into sql_traits
30,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2c8f197a3fc080ce72b830caf47232ef67b8c5e8,Pre: Move core/Attribute* to core-traits
31,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99301398a3341b85e21a23934e3c807032fee74b,Pre: Move tolstoy/errors into tolstoy-traits
32,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,722921760e7916d47845a2fbad9af6019cf84977,Pre: Remove :: dependency from src/errors.rs
33,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b6f3e716e40826ca8891e076a0da1823354351a3,Part 1: Move public errors into public-traits
34,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,40ff6a1ed0a4f578e4c8d1596237411da9ba087a,Post: Use a single implementation of bail macro
35,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cfedfea1907a6c0b160846f7adff31860989f3b5,Post: Remove mentat_sql dependency from query-projector
36,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,994a93004b2ae39e320be3117ec0d80999860aa8,Post: Remove bunch of dependencies from query-pull
37,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e188397981d357b20074eb9a900c866acf1241fc,"Post: Make tests pass on Rust 1.25.0

For some reason, the converted doc test fails on Rust 1.25.0, while
working with other Rust versions. For simplicity, just convert it into
a regular test."
38,https://api.github.com/repos/mozilla/mentat/pulls/805,805,Move MentatError away from the top-level crate,"This PR is in preparation for landing some of the work in #563 - specifically, the Pre work which splits `transaction`-like functionality away from the top-level into its own inner crate.

`Pre` commits move any trait or type that is necessary to compose an error out of a given crate, and into a ""leaf"" crate, which use the `*-traits` naming convention (e.g. `db` and `db-traits`). This pattern is similar to how Servo structures their internal inter-dependencies, although at a weaker level (since I'm retrofitting this pattern onto the current world, and going all-in on it would be quite a bit of work!).

This move is needed so that we can use a single Error type in our public API.

Without these changes, the Pre patch above would have to leak a `TransactionError` into mentat's public API space, which is a subset of the `MentatError`. If the `MentatError` is defined in an inner crate, it can now be referenced in other inner crates, in absence of circular dependencies.

This pattern is useful for crates which:
- tie a lot of internal functionality together
- are exposed as part of the public API
- themselves don't introduce new error types

A prime example is the ""mentat transaction state manager"" (the `transaction` crate in #563), and the upcoming `tolstoy` which makes heavy use of the `transaction` crate.",grigoryk,465422,2018-08-08T23:48:41Z,COLLABORATOR,True,2222,1684,119,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a7bb805982a531b7a740ffc90407d855f7ba0406,Bump version to 0.11.1
39,https://api.github.com/repos/mozilla/mentat/pulls/804,804,Adding iOS Build and Test to CI,,fluffyemily,12613048,2018-08-08T16:40:54Z,COLLABORATOR,True,41,9,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2235f28bcd5325e2df1746d407550557acaf0baf,Add iOS SDK build and test to rust 1.25.0 version of travis CI build
40,https://api.github.com/repos/mozilla/mentat/pulls/804,804,Adding iOS Build and Test to CI,,fluffyemily,12613048,2018-08-08T16:40:54Z,COLLABORATOR,True,41,9,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b34b854ca2995f3228ef2a76f483c0ac66772550,Address review comments
41,https://api.github.com/repos/mozilla/mentat/pulls/804,804,Adding iOS Build and Test to CI,,fluffyemily,12613048,2018-08-08T16:40:54Z,COLLABORATOR,True,41,9,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,69ffe90e214210f9fe098109809ff834461ecbde,Move iOS testing and document generation into post test jobs
42,https://api.github.com/repos/mozilla/mentat/pulls/803,803,Fix broken iOS SDK tests,Changes to error handling had caused the iOS tests to no longer compile. Plus a test creating a named database was failing. This patch fixes those problems.,fluffyemily,12613048,2018-08-06T16:46:45Z,COLLABORATOR,True,36,37,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c0d28a044858a5b2e9386736e42b5baac2f80659,Get iOS tests building again.
43,https://api.github.com/repos/mozilla/mentat/pulls/803,803,Fix broken iOS SDK tests,Changes to error handling had caused the iOS tests to no longer compile. Plus a test creating a named database was failing. This patch fixes those problems.,fluffyemily,12613048,2018-08-06T16:46:45Z,COLLABORATOR,True,36,37,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c549e19d1314653d6bbd99321b001d722fb1e10,Fix broken iOS tests
44,https://api.github.com/repos/mozilla/mentat/pulls/802,802,Use crates.io version of the enum-set,@rnewman upstreamed his changes in https://github.com/contain-rs/enum-set/pull/20,grigoryk,465422,2018-08-03T20:41:13Z,COLLABORATOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e35bf356f0e06b1ff0cf81240bfc2d8be9340b96,"Use crates.io version of the enum-set

rnewman upstreamed his changes in https://github.com/contain-rs/enum-set/pull/20"
45,https://api.github.com/repos/mozilla/mentat/pulls/801,801,Generic automation images,"This separates the Mentat-specific parts of our Docker image out of the Android NDK + Rust parts of the Docker image.  In the process, it moves the ARM Rust architecture from `arm-linux-androideabi` to `armv7-linux-androideabi`, which is considered more modern and is what the FxA Rust client is targeting.  It also puts the Android NDK standalone toolchains in a global location, and changes the expected names.  This all requires commensurate changes in the `rust-android-gradle` plugin; hence the version bump.",ncalexan,1097182,2018-08-03T17:10:30Z,MEMBER,True,96,73,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f747e2e5508597f6f7aa96d5c46d348dfb5b85d4,[sdks/android] Pre: Disable `testCaching` for frequent intermittent failures.
46,https://api.github.com/repos/mozilla/mentat/pulls/801,801,Generic automation images,"This separates the Mentat-specific parts of our Docker image out of the Android NDK + Rust parts of the Docker image.  In the process, it moves the ARM Rust architecture from `arm-linux-androideabi` to `armv7-linux-androideabi`, which is considered more modern and is what the FxA Rust client is targeting.  It also puts the Android NDK standalone toolchains in a global location, and changes the expected names.  This all requires commensurate changes in the `rust-android-gradle` plugin; hence the version bump.",ncalexan,1097182,2018-08-03T17:10:30Z,MEMBER,True,96,73,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0cb82277507d0153e254bb190ae31d90c36d97a9,"[automation] Be project agnostic; use armv7-linux-androideabi; install Android standalone toolchains.

This is ready for Android Rust-y components: it no longer references Mentat.

The standalone toolchains are installed into
$ANDROID_NDK_TOOLCHAIN_DIR/arch-$ANDROID_NDK_API_VERSION."
47,https://api.github.com/repos/mozilla/mentat/pulls/801,801,Generic automation images,"This separates the Mentat-specific parts of our Docker image out of the Android NDK + Rust parts of the Docker image.  In the process, it moves the ARM Rust architecture from `arm-linux-androideabi` to `armv7-linux-androideabi`, which is considered more modern and is what the FxA Rust client is targeting.  It also puts the Android NDK standalone toolchains in a global location, and changes the expected names.  This all requires commensurate changes in the `rust-android-gradle` plugin; hence the version bump.",ncalexan,1097182,2018-08-03T17:10:30Z,MEMBER,True,96,73,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,814ab19ecbc089fcd33549d748e6a709546058fb,"[automation] Move project-agnostic Dockerfile into subdirectory.

Docker is directory oriented so we have to play along."
48,https://api.github.com/repos/mozilla/mentat/pulls/801,801,Generic automation images,"This separates the Mentat-specific parts of our Docker image out of the Android NDK + Rust parts of the Docker image.  In the process, it moves the ARM Rust architecture from `arm-linux-androideabi` to `armv7-linux-androideabi`, which is considered more modern and is what the FxA Rust client is targeting.  It also puts the Android NDK standalone toolchains in a global location, and changes the expected names.  This all requires commensurate changes in the `rust-android-gradle` plugin; hence the version bump.",ncalexan,1097182,2018-08-03T17:10:30Z,MEMBER,True,96,73,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b5d0e12a24e4217e378ff1b24a09ef9f44b11d5c,[automation] Re-add project-specific Mentat Docker image.
49,https://api.github.com/repos/mozilla/mentat/pulls/800,800,Convert `androidTest` to `test`,"We're all JNI, all the way down, so let's exploit that to speed up our development cycle.  We can run Android Robolectric unit tests against Mentat built for the host machine rather than requiring cross-compilation and an emulator.  This is **much** faster to work on locally.  Let's see how it does in automation!",ncalexan,1097182,2018-07-27T17:49:07Z,MEMBER,True,210,298,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6856462f1bcd39bf64242472a56b5f920e2af6d2,[sdks/android] Part 1: Move androidTest to test.
50,https://api.github.com/repos/mozilla/mentat/pulls/800,800,Convert `androidTest` to `test`,"We're all JNI, all the way down, so let's exploit that to speed up our development cycle.  We can run Android Robolectric unit tests against Mentat built for the host machine rather than requiring cross-compilation and an emulator.  This is **much** faster to work on locally.  Let's see how it does in automation!",ncalexan,1097182,2018-07-27T17:49:07Z,MEMBER,True,210,298,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,190e05e360e7d116d194a5aa2226cee717f3eaf9,"[sdks/android] Part 2: Replace Expectation/wait/notify with CountDownLatch.

Locally, I witnessed very slow tests.  Profiling with Visual VM
revealed a lot of time spent in `wait`.

Digging in, we were trying to be clever, with a `wait(1000)/notify`
mechanism.  However, there were never multiple threads in play, so the
waiter wasn't waiting when `notify` was invoked.  That means we always
timed out.  I think this never worked and using bare `wait()` would
have revealed that.

Anyway, `CountDownLatch` maintains the one bit of state (was I
notified) and generalizes smoothly to when we have threads."
51,https://api.github.com/repos/mozilla/mentat/pulls/800,800,Convert `androidTest` to `test`,"We're all JNI, all the way down, so let's exploit that to speed up our development cycle.  We can run Android Robolectric unit tests against Mentat built for the host machine rather than requiring cross-compilation and an emulator.  This is **much** faster to work on locally.  Let's see how it does in automation!",ncalexan,1097182,2018-07-27T17:49:07Z,MEMBER,True,210,298,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2978ad91c0b0f5bf215fe4fdfc4e70c26f1fec67,[sdks/android] Part 3: Finish conversion to Robolectric.
52,https://api.github.com/repos/mozilla/mentat/pulls/800,800,Convert `androidTest` to `test`,"We're all JNI, all the way down, so let's exploit that to speed up our development cycle.  We can run Android Robolectric unit tests against Mentat built for the host machine rather than requiring cross-compilation and an emulator.  This is **much** faster to work on locally.  Let's see how it does in automation!",ncalexan,1097182,2018-07-27T17:49:07Z,MEMBER,True,210,298,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a7d2057bc694ae3bf2254e1dff1634df14fc1f7f,"[sdks/android] Post: Address most Android Studio complaints.

The only ones I cared about were unchecked access, but while I'm here,
might as well do most of them."
53,https://api.github.com/repos/mozilla/mentat/pulls/800,800,Convert `androidTest` to `test`,"We're all JNI, all the way down, so let's exploit that to speed up our development cycle.  We can run Android Robolectric unit tests against Mentat built for the host machine rather than requiring cross-compilation and an emulator.  This is **much** faster to work on locally.  Let's see how it does in automation!",ncalexan,1097182,2018-07-27T17:49:07Z,MEMBER,True,210,298,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e06bfd1b7ded029b8f66ad710d298c3d92fe7f6e,[sdks/android] Workaround Android Studio JUnit test runner runtime classpath issue.
54,https://api.github.com/repos/mozilla/mentat/pulls/799,799,"Android SDK: Remove unused ""app_name"" string.",It seems like this string is unused (although I'm unable to build the library locally) and a library overriding this default string can cause funny problems. :),pocmo,89638,2018-07-26T10:43:19Z,NONE,False,0,3,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b41c2df3d39bf95c75303e9ae3ec99bd292cebd,"Android SDK: Remove unused ""app_name"" string."
55,https://api.github.com/repos/mozilla/mentat/pulls/798,798,Make sure mentat error types preserve failure backtraces (wip),"This adds a lot of boilerplate which could be simplified by macros.

I was planning on cleaning this up before pushing it but here it is!

Caveat: I haven't tested this in versions of rust other than whatever i happen to be using by default right now! I did try to make the changes compatible with 1.25.0 (e.g. `&`/`ref` noise in matches) but that was just to minimize future work and I might not have been thorough here",thomcc,860665,2018-07-23T23:59:53Z,CONTRIBUTOR,False,636,254,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4735f56745559867895b2f167932b2afa32d85de,"Make sure mentat error types preserve failure backtraces (wip)

This adds a lot of boilerplate which could be simplified by macros.

I was planning on cleaning this up before pushing it but here it is!"
56,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9e6505a9303aea5d64d938d586d4c7954a2dd48f,[sdks/android] Pre: Fix unused warnings.
57,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0955c784b7b5296db5efa4aaec5483a6c5562e6a,"[sdks/android] Pre: Trim unused Android bits.

We don't use UI libraries, don't require UI resources, and don't
require any permissions."
58,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,67a14ca756bceab9b3dcdc1f94b6b261a50d170f,"[sdks/android] Build Mentat Android SDK in TaskCluster; publish org.mozilla.mentat to nalexander's personal Bintray repo.

The automation parts were cribbed directly from
https://github.com/mozilla-mobile/android-components/tree/50add3e176e038c6630ab3612268feb156d33984.

The automation permissions were added in
https://bugzilla.mozilla.org/show_bug.cgi?id=1477311.

This uses a very rudimentary Gradle plugin, `rust-android-gradle`,
with custom fixes and extensions.  It works pretty well for what it
is!  See https://github.com/ncalexan/rust-android-gradle."
59,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7e31ca15bcaeb8d5ff4316b6d92d5ee5a68421f4,"[sdks] Make `store_open{_encrypted}` return useful errors.

Because this was formerly a constructor, the pattern needed to change
to a factory function, but that's better than what we had."
60,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76d7df554872aa84341f90a2b478e12c2f5afa06,[sdks/android] Package JNA using upstream dependency.
61,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8cc9cb70d78f5be04754c450a43cda2d937e04b,"[sdks/android] Don't strip Mentat library.

Help folks debugging by including symbols in our native libraries.
Yes, this makes the resulting AAR very large.  The Android ecosystem
seems to be in flux around who is in charge of stripping native
binaries, but for now let's provide symbols and see how consumers
react."
62,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,faef4e9ee8f3c6dd32a0dbfeb25ceffd6e86b2b6,Bump to version 0.10.0.
63,https://api.github.com/repos/mozilla/mentat/pulls/795,795,Build android sdk,,ncalexan,1097182,2018-07-19T20:37:03Z,MEMBER,True,587,133,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fba378ee394cad7f373b1623f1a74dadc3999110,"[sdks/android] Build Mentat Android SDK in TaskCluster; publish org.mozilla.mentat to nalexander's personal Bintray repo.

I haven't had this reviewed thoroughly, but it mostly works."
64,https://api.github.com/repos/mozilla/mentat/pulls/793,793,Generate rust documentation on CI and publish to gh-pages automatically,"Signed-off-by: Victor Porof <victor.porof@gmail.com>

A very simple start for generating documentation automatically.

Here's how it looks like: https://victorporof.github.io/mentat
When this PR is merged, this link will also point to the rust API documentation: https://mozilla.github.io/mentat

The `gh-pages` branch would look like this: https://github.com/victorporof/mentat/tree/gh-pages

This PR implements the following: 
1. Upon successful test runs on the master branch (and not for pull requests), run `cargo doc` to generate documentation.
2. If that succeeds, create an `index.html` entry-point for the projects's `gh-pages` website that redirects to the generated documentation for the top-level mentat crate.
3. Copy the CI-generated documentation and the index into the `gh-pages` branch, overwriting everything that was previously there.

A link to the documentation is also added to the README.

The importing of the generated documentation into the `gh-pages` branch is done with a very simple [ghp-import](https://github.com/davisp/ghp-import/blob/master/ghp_import.py) python script that I came across. In the long term, it's likely that we'll want to roll out our own, especially since we want to provide more than just Rust API documentation. However I think this is fine for now.

I've added a GitHub token for allowing pushing to the repo from the CI machine: https://travis-ci.org/mozilla/mentat/settings It follows the recommendations from https://docs.travis-ci.com/user/deployment/pages/#Setting-the-GitHub-token",victorporof,248899,2018-07-19T09:19:54Z,CONTRIBUTOR,True,10,0,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bf63435df4d389d3d7c35dd820e36d397e73aee5,"Generate rust documentation on CI and publish to gh-pages automatically

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
65,https://api.github.com/repos/mozilla/mentat/pulls/792,792,Run `serde_support` tests for the EDN module on CI,"Signed-off-by: Victor Porof <victor.porof@gmail.com>

This is a leftover from https://github.com/mozilla/mentat/pull/726 which we forgot to land.",victorporof,248899,2018-07-19T08:25:17Z,CONTRIBUTOR,True,1,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,836d71cd4bd932ddcbbe2a352dbe5265af1c3f69,"Run `serde_support` tests for the EDN module on CI

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
66,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,414ea12abedc6a343cdc75c219cb7faef88b35f6,"[sdks/android] Trim unused Android bits.

We don't use UI libraries, don't require UI resources, and don't
require any permissions."
67,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,08d0cecd7a1ddb50c287126aabe04db6d350482f,"[sdks/android] DO NOT LAND - Build libmentat_ffi.so as part of Gradle build.

This uses a very rudimentary Gradle plugin, `rust-android-gradle`,
with custom fixes and extensions.  It works pretty well for what it
is!"
68,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bdb9b841ea09ab0f3b889aac053fed1757f3739f,"First cut at TaskCluster integration.

Cribbed directly from https://github.com/mozilla-mobile/android-components/tree/50add3e176e038c6630ab3612268feb156d33984"
69,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b2e1cce76ec0c074d14f7f1d8e1328e075003cd8,[sdks/android] Put Gradle plugin into `buildSrc` for now.
70,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04d2d31bedb65bb77236e5b8354e7a569470d587,Fix location of `gradlew`.
71,https://api.github.com/repos/mozilla/mentat/pulls/791,791,Build android sdk,,ncalexan,1097182,2018-07-18T22:29:22Z,MEMBER,True,523,17,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a139bcd41026de8b6aef1e49080de28b36f7ff47,Include `printModules` at Gradle top-level.
72,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,70501eb72092ddf0e67bfb6e1bf42b691937b6be,Make Rust a section
73,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,92f7a527f0ac7d2c2c55d0a470bd27794dae22d5,Move test to script
74,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b4a50767c6cb70f8b405455df11235649b63048c,Add android build step
75,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7900da614ccb120ad8528ef4d472867ae1c8442a,Remove superflous script
76,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,06ea759fcaf0e070c1cde734c3c991a539c7327a,Add iOS build task
77,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76d1acdedfd9a325d9a0f5ec462b9ce5b752bca7,Add iOS build task
78,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a121f2a0eb113664286da223fb6b9dd354d49104,Add iOS build task
79,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,120326ae75584797b108169388a549d7574f1675,Add iOS build task
80,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,21e9e9a229ed180e08835416bc7724acaf50c53a,Add iOS build task
81,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5e2e381125692f42767107522e51abb79f4b51e9,Add iOS build task
82,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5fd51f6bee13ddc0f11e2e88e07dab47494f19f,Add iOS build task
83,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3f7e808f4b2899976faa1e0b0b60cf3aa21a16c1,Add iOS build task
84,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5180a3f8999aae40dfbb3b73e83a51d74e3fd8c0,Add iOS build task
85,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3b90e376b9c2a9dad663b758c87d151d8a9afa11,Add iOS build task
86,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fda02a636412a82da42f62d2eb1e74b62140b9dc,Add iOS build task
87,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cf79e982962e2dcecd130cb70ae20e293f7eb786,Add iOS build task
88,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5bcbfd41b2d5c81716f5d30817ff8b0b06a52bc1,Add iOS build task
89,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,49c24af9cc4938cf4d2254db70210ba435580480,Add iOS build task
90,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9154303fa11769c8c09df5a6c20e1a8db7634522,Add iOS build task
91,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0ed6001857ebc74e15d60034bf3fbdd241dcc38a,Add iOS build task
92,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2bf95b6d1bf08c0352a466c93af23a39cecc237d,Add iOS build task
93,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d4892a1c159eb606becc7d37921eb4bc7fab90f,Add iOS build task
94,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2ddb5fd3f40531a3efa0f7a14282019a644938ca,Add iOS build task
95,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d724cc03feb282acc4e5cfd72628619e909df830,Add iOS build task
96,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,468899d36efd89ee07c6f9fc1af27c04ab8f710e,Add iOS build task
97,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,148fdd4aa4aed085ec25c017d4ae6fda9bf97077,Add iOS build task
98,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2ab340155addefac4eae83845af1fd0c1c2ebd5d,Add iOS build task
99,https://api.github.com/repos/mozilla/mentat/pulls/790,790,WIP Run Android and iOS tests in CI,,fluffyemily,12613048,2018-07-18T13:45:23Z,COLLABORATOR,False,90,32,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8287dd308cda6dfd87e6d544df4bc922e42dee0b,Add iOS build task
100,https://api.github.com/repos/mozilla/mentat/pulls/788,788,Enforce partition integrity & PartitionMap newtype,"Peeling off bits and pieces off of timelines work.

Partition integrity stuff helps us ensure we're doing sane things when moving an index in irregular ways. PartitionMap newtype conversion is non-controversial and helps clean up things a little bit.",grigoryk,465422,2018-07-17T01:29:05Z,COLLABORATOR,True,147,43,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9e1609bcd6b1d9972837d13aac494fb619d1fa2f,"Pre: Replace `PartitionMapping` trait with newtype. r=grisha

Generally, I think that Mentat is using too many small traits rather
than wrapping types into newtypes.  Wrapping into newtypes is cheap in
Rust, and it makes it easier to reason about the code."
101,https://api.github.com/repos/mozilla/mentat/pulls/788,788,Enforce partition integrity & PartitionMap newtype,"Peeling off bits and pieces off of timelines work.

Partition integrity stuff helps us ensure we're doing sane things when moving an index in irregular ways. PartitionMap newtype conversion is non-controversial and helps clean up things a little bit.",grigoryk,465422,2018-07-17T01:29:05Z,COLLABORATOR,True,147,43,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a563c08ac9b25cb7a3cbc3ce49ff50b00ceba802,"Enforce partition integrity when setting its index r=nalexander

Timelines work starts to perform modifications on the partitions
that go beyond simple allocations. This change pre-emptively protects
partition integrity by asserting that index modifications are legal."
102,https://api.github.com/repos/mozilla/mentat/pulls/788,788,Enforce partition integrity & PartitionMap newtype,"Peeling off bits and pieces off of timelines work.

Partition integrity stuff helps us ensure we're doing sane things when moving an index in irregular ways. PartitionMap newtype conversion is non-controversial and helps clean up things a little bit.",grigoryk,465422,2018-07-17T01:29:05Z,COLLABORATOR,True,147,43,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca63cdf7199c0c7f23f68a68e731bfd70943ef3d,Move entid allocation logic into Partition r=nalexander
103,https://api.github.com/repos/mozilla/mentat/pulls/787,787,Extract and improve test macros,This folds together relevant changes from https://github.com/ncalexan/mentat/commits/rewind and #632.,grigoryk,465422,2018-07-16T20:36:56Z,COLLABORATOR,True,317,205,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d09253b736a6626c839f4c746d7adb585c201380,Part 1: Extract low-level test framework into mentat_db::debug for re-use.
104,https://api.github.com/repos/mozilla/mentat/pulls/787,787,Extract and improve test macros,This folds together relevant changes from https://github.com/ncalexan/mentat/commits/rewind and #632.,grigoryk,465422,2018-07-16T20:36:56Z,COLLABORATOR,True,317,205,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,22c1eba3991fce8444235149ec0761c2c7e9cd5b,"Part 2: Improve assert_matches!.

This corrects an incorrect pattern: a conversion method taking &self
but returning an owned value should be named like `to_FOO(&self) -> FOO`.  (A
reference-to-reference conversion should be named like `as_FOO(&self)
-> &FOO`.  A consuming conversion should be named like `into_FOO(self)
-> FOO`.)

In addition, this pushes the conversion via `to_edn` into the
`assert_matches!` macro, which lets consumers get a real data
structure (say, `Datoms`) and use it directly before or after
`assert_matches!`.  (Currently, consumers get back `edn::Value`
instances, which aren't nearly as pleasant to use as real data
structures.)

Co-authored-by: Grisha Kruglov <gkruglov@mozilla.com>"
105,https://api.github.com/repos/mozilla/mentat/pulls/787,787,Extract and improve test macros,This folds together relevant changes from https://github.com/ncalexan/mentat/commits/rewind and #632.,grigoryk,465422,2018-07-16T20:36:56Z,COLLABORATOR,True,317,205,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4241084879055c2bd614aabc610da09e64ae157d,"Part 3: Use mentat_db::debug framework in Tolstoy crate.

The advantage of this approach is that compiling Tolstoy (or anything
that's not db, really) can be quite a bit faster than compiling db."
106,https://api.github.com/repos/mozilla/mentat/pulls/785,785,[tx] Don't treat :db/doc as defining a schema attribute. (#784),,ncalexan,1097182,2018-07-13T21:30:03Z,MEMBER,True,21,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9291b2a0b0ad5cfad35657759fc15b2b9959efe9,[tx] Don't treat :db/doc as defining a schema attribute. (#784)
107,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ec5ab9624205bd4ce0c264443ff17f7eb73d1087,Pre: Differentiate bad attribute retractions from unrecognized retractions.
108,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8d054aeed0c594d71c60f089c6931949aaed24f0,Pre: 'Into' implementation chaining TermWithoutTempIds -> TermWithTempIds -> TermWithTempIdsAndLookupRefs
109,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cb6c03b863f171edebec3fba5817b1be82ae3cd2,"Part 0: Allow retractions of installed attributes

This is necessary for the timelines work ahead. When schema is being
moved off of a main timeline, we need to be able to retract it cleanly.

Retractions are only processed if the whole defining attribute set
is being retracted at once (:db/ident, :db/valueType, :db/cardinality)."
110,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2ddbf46e3ce547dad9dbd2047d196494059ecd7a,"Part 1: Allow specifying transactor's commit behaviour

Normally we want to both materialize our changes (into 'datoms')
as well as commit source transactions into 'transactions' table.

However, when moving transactions from timeline to timeline
we don't want to persist artifacts (rewind assertions), just their
materializations.

This patch expands the 'db' interface to allow for this split,
and changes transactor's functions to take a crate-private 'action'
which defines desired behaviour."
111,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5cc4e6300429b298ea845d1062808e310bdbbcad,"Part 2: Add basic support for timelines to the transactor

This records transactions onto a default timeline (0)."
112,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca75473d9594c6f32204d19a7ca30d58f12a615d,"Part 3: Use a view to derive parts table

Being able to derive partition map from partition definitions and current
state of the world (transactions), segmented by timelines, is useful
because it lets us not worry about keeping materialized partition maps
up-to-date - since there's no need for materialized partition maps at that point.

This comes in very handy when we start moving chunks of transactions off of our mainline.
Alternative to this work would look like materializing partition maps per timeline,
growing support for incremental ""backwards update"" of the materialized maps, etc.

Our core partitions are defined in 'known_parts' table during bootstrap,
and what used to be 'parts' table is a generated view that operates over
transactions to figure out partition index.

'parts' is defined for the main timeline. Querying parts for other timelines
or for particular timeline+tx combinations will look similar."
113,https://api.github.com/repos/mozilla/mentat/pulls/783,783,Basic timelines support,"This PR adds support for basic timelines to the transactor along with ability to move ranges of transactions off-of the `main timeline`.

- Default timeline for all local transactions is the `main timeline`, `0`.
- A timeline of a `transaction` is indicated by an additional single field (same type as `e`).
- Moving of transactions off of the main timeline is implemented as a ""rewind"": assertions are reversed and transacted in a descending order in order to achieve correct state of materialized views",grigoryk,465422,2018-07-12T22:28:15Z,COLLABORATOR,True,1027,91,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65d4b957ad2a6b98a24e334b020a487a4ac061d1,Part 4: Add support for moving transactions off of main timeline
114,https://api.github.com/repos/mozilla/mentat/pulls/782,782,"Add a top-level ""syncable"" feature.",Extracted out of #563.,grigoryk,465422,2018-07-11T00:34:45Z,COLLABORATOR,True,165,122,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,26446ddb057b7616356fa20865f3f224611e5230,"Add a top-level ""syncable"" feature.

Tested with:

cargo test --all
cargo test --all --no-default-features
cargo build --manifest-path tools/cli/Cargo.toml --no-default-features
cargo run --manifest-path tools/cli/Cargo.toml --no-default-features debugcli

Co-authored-by: Nick Alexander <nalexander@mozilla.com>"
115,https://api.github.com/repos/mozilla/mentat/pulls/782,782,"Add a top-level ""syncable"" feature.",Extracted out of #563.,grigoryk,465422,2018-07-11T00:34:45Z,COLLABORATOR,True,165,122,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,687b2cf99714073f83855464d6df04baf540ecc5,"Add 'syncable' feature to 'db' crate to conditionally derive serialization for Partition*

This is leading up syncing with partition support."
116,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87f850a44edb6b25480aadac619cfb66c2ebe70c,"Part 1: Move `intern_set` into `edn` crate.

It's not great to keep lifting functionality higher and higher up the
crate hierarchy, but we really do want to intern while we parse.
Eventually, I expect that we will split the `edn` crate into `types`
and `parsing`, and the `types` crate can depend on a more efficient
interning dependency."
117,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,02a163a10fbb88d81dcbe10b98714d55c4330747,"Part 2: Use `ValueRc` in `InternSet`.

We haven't observed performance issues using `Arc` instead of `Rc`,
and we want to be able to include things that are interned (including,
soon, `TempId` instances) in errors coming out of the
transactor.  (And `Rc` isn't `Sync`, so it can't be included in errors
directly.)"
118,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,106d6fae11c80f611363e1ebc2fea12c2f18d807,"Part 3: Implement `Deref` and `DerefMut` for `InternSet`.

This pattern is generally how newtype wrappers (like `struct
Foo(Bar)`) are implemented in Rust."
119,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76507623ac76cfe0f8d6d4fee127d9f6a62fb0df,"Part 4: Prepare EDN `Entity` type for interning tempids during parsing.

This is all part of moving the entity builder away from building term
instances and toward building entity instances.  One of the nice
things that the existing term interface does is allow consumers to use
lightweight reference counted tempid handles; I don't want to lose
that, so we'll build it into the entity data structures directly."
120,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1cb1847aa6c2e021ef43e0a7b1ea0c8f8e2a49f3,"Part 5: Make existing `TermBuilder` actually build `Entity` instances.

There are a few tricky details to call out here.  The first is the
`TransactableValueMarker` trait.  This is strictly a marker (like
`Sized`, for example) to give some control over what types can be used
as value types in `Entity` instances.  This expression is needed due
to the network of `Into` and `From` relations between the parts of
valid `Entity` instances.  This allows to drop the `IntoThing`
work-around trait and use the established patterns.  (Observe that
`KnownEntid` makes this a little harder, due to the cross-crate
consistency restrictions.)

The second is that we can get rid `{add,retract}_kw`, since the
network of relations expresses the coercions directly.

The third is that this commit doesn't change the name `TermBuilder`,
even though it is now building `Entity` instances.  This is because
there's _already_ an `EntityBuilder` which fixes the `EntityPlace`.
It's not clear whether the existing entity building interface should
be removed or whether both should be renamed.  That can be follow-up."
121,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,06056a8468ac0836c677038390d9036e6ea2c29d,"Part 6: Lift `TxReport` to `core` crate.

The `core` create didn't exist when the `db` was started, but this
type is clearly part of the public interface of Mentat."
122,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb1df31ac423eb7a1b4e586ee6a3aba4398d975f,"Part 7: Improve `TermBuilder` interface; expose lookup refs and tx functions.

These are functions on `TermBuilder` itself to prevent mixing mutable
and immutable references in the most natural style.  That is,
```
builder.add(e, a, builder.lookup_ref(...))
```
fails because `add` borrows `builder` mutably and `lookup_ref` borrows
`builder` immutably.  There's nothing here that requires a specific
builder (since we're not interning lookup refs on the builder, like we
are tempids) so we don't need an instance."
123,https://api.github.com/repos/mozilla/mentat/pulls/778,778,"Build `Entity` instances, not `Term*` instances.  (#674)","I haven't tried to rename `EntityBuilder` (or remove it), and I haven't tried to rename `TermBuilder` to `EntityBuilder`.  Those can come later.

This also doesn't intern `TempId` handles at parse time; we can get to that.

This addresses #674.",ncalexan,1097182,2018-07-05T18:20:45Z,MEMBER,True,396,314,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99deb87b9f227e8adbdcaf777fe20e4a6e197530,"Build `Entity` instances, not `Term*` instances.  Fixes #674. (#778) r=grisha"
124,https://api.github.com/repos/mozilla/mentat/pulls/776,776,Concrete TolstoyError error type for tolstoy Result; wrap dependency errors,Pulling bits out of #563.,grigoryk,465422,2018-06-29T04:27:56Z,COLLABORATOR,False,246,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,815eb1fd6283f96778315fd0053857bf3f595dea,"Return concrete TolstoyError error type out of tolstoy, and wrap dependency errors r=nalexander

This is inline with the rest of mentat, and is useful for upcoming work."
125,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e536619f929144e05cb051a8ece1dd8d8f9475e9,"Fix broken API doc links

Create symlink for latest to point to v0.7.
Group APIs by top version number rather than individual"
126,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,05fb9de89b5f4fb5dcef48c6d6c07570840d13fd,Update swift and android version numbers to match Mentats
127,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47c5e87e7b353ad6d720ca461c1624bb8ab1f6fe,Update documentation
128,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,90a4008064b8700634a2717d683893cce0553aee,Update top level .gitignore to ignore docs site & metatdata
129,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1633371a795658e4f3e5767f470795f1e6d9f2d9,Add README to help with building documentation site
130,https://api.github.com/repos/mozilla/mentat/pulls/775,775,Closes #767 - Fix Broken documentation links.,"Addressing comments and issues raised in #767 

- Fix broken API documentation links.
- Unify SDKs and Mentat under same version number.
- Reorganize API documentation under version number.
- Add `latest` symlink to point to the latest API documentation version.
- Update `.gitignore` to ignore documentation related directories and files.
- Add README to `/docs` to include local build instructions.
- Update API documentation.",fluffyemily,12613048,2018-06-28T10:18:04Z,COLLABORATOR,True,117334,108743,2459,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bcc1c96e3d8f4a0c6e7e2605c403f890f8262538,Address review comments @ncalexan
131,https://api.github.com/repos/mozilla/mentat/pulls/773,773,Low hanging dependency fruit,"This does #711, which is the most meaningful. Removing unused `num` dependency from core is also worth doing, even if just for cleanliness.

I also noticed yesterday that we were using `num` to iterate backwards over a range in `remove_every`, which probably should have been `(0..self.len()).rev()` if it were going to stay.

But this was still `O(n^2)`, since remove is `O(n)`. Using `retain` removes all of them in one pass, and IMO is clearer (or at least less code). I also fixed the test for this function to actually check that return the count we had before, which we weren't doing. (I also killed the comment that said to replace it with a function that AFAICT isn't going to do the same thing).

FWIW removing the num deps probably doesn't effect the lib size, since we still depend on it in `edn`.",thomcc,860665,2018-06-28T03:12:07Z,CONTRIBUTOR,False,29,26,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2e7563c0ada45453fbf48aafefa325ed057c269a,Remove regex dependency from query_sql (fixes #771)
132,https://api.github.com/repos/mozilla/mentat/pulls/773,773,Low hanging dependency fruit,"This does #711, which is the most meaningful. Removing unused `num` dependency from core is also worth doing, even if just for cleanliness.

I also noticed yesterday that we were using `num` to iterate backwards over a range in `remove_every`, which probably should have been `(0..self.len()).rev()` if it were going to stay.

But this was still `O(n^2)`, since remove is `O(n)`. Using `retain` removes all of them in one pass, and IMO is clearer (or at least less code). I also fixed the test for this function to actually check that return the count we had before, which we weren't doing. (I also killed the comment that said to replace it with a function that AFAICT isn't going to do the same thing).

FWIW removing the num deps probably doesn't effect the lib size, since we still depend on it in `edn`.",thomcc,860665,2018-06-28T03:12:07Z,CONTRIBUTOR,False,29,26,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0e501838ce515ada88235dc3772aa97e0a9dad91,"Remove needless num dependency from mentat_db and optimize remove_every

This implementation of `remove_every` is O(n) and not O(n^2) like it was before."
133,https://api.github.com/repos/mozilla/mentat/pulls/773,773,Low hanging dependency fruit,"This does #711, which is the most meaningful. Removing unused `num` dependency from core is also worth doing, even if just for cleanliness.

I also noticed yesterday that we were using `num` to iterate backwards over a range in `remove_every`, which probably should have been `(0..self.len()).rev()` if it were going to stay.

But this was still `O(n^2)`, since remove is `O(n)`. Using `retain` removes all of them in one pass, and IMO is clearer (or at least less code). I also fixed the test for this function to actually check that return the count we had before, which we weren't doing. (I also killed the comment that said to replace it with a function that AFAICT isn't going to do the same thing).

FWIW removing the num deps probably doesn't effect the lib size, since we still depend on it in `edn`.",thomcc,860665,2018-06-28T03:12:07Z,CONTRIBUTOR,False,29,26,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b5e48ce326a5f79ab8fd308e177deba0f848b8b,Remove needless num dependency from mentat_core
134,https://api.github.com/repos/mozilla/mentat/pulls/773,773,Low hanging dependency fruit,"This does #711, which is the most meaningful. Removing unused `num` dependency from core is also worth doing, even if just for cleanliness.

I also noticed yesterday that we were using `num` to iterate backwards over a range in `remove_every`, which probably should have been `(0..self.len()).rev()` if it were going to stay.

But this was still `O(n^2)`, since remove is `O(n)`. Using `retain` removes all of them in one pass, and IMO is clearer (or at least less code). I also fixed the test for this function to actually check that return the count we had before, which we weren't doing. (I also killed the comment that said to replace it with a function that AFAICT isn't going to do the same thing).

FWIW removing the num deps probably doesn't effect the lib size, since we still depend on it in `edn`.",thomcc,860665,2018-06-28T03:12:07Z,CONTRIBUTOR,False,29,26,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04c7a15d5a1fa92345f579657a06688bd5d7ebc5,Address review feedback
135,https://api.github.com/repos/mozilla/mentat/pulls/773,773,Low hanging dependency fruit,"This does #711, which is the most meaningful. Removing unused `num` dependency from core is also worth doing, even if just for cleanliness.

I also noticed yesterday that we were using `num` to iterate backwards over a range in `remove_every`, which probably should have been `(0..self.len()).rev()` if it were going to stay.

But this was still `O(n^2)`, since remove is `O(n)`. Using `retain` removes all of them in one pass, and IMO is clearer (or at least less code). I also fixed the test for this function to actually check that return the count we had before, which we weren't doing. (I also killed the comment that said to replace it with a function that AFAICT isn't going to do the same thing).

FWIW removing the num deps probably doesn't effect the lib size, since we still depend on it in `edn`.",thomcc,860665,2018-06-28T03:12:07Z,CONTRIBUTOR,False,29,26,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca03d85c25da0da9421fec9ec195723dc034a5b6,Merge branch 'master' into dep-fixes
136,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0e4991fa26766a40984ad9069a077d517f48f23e,Make db/ use DbErrorKind.
137,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d6569a6a228e3ab264a27aa9fe8676df5d0d10d5,Convert query-pull/ to PullError.
138,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,af005a7669053a1d0854e906201daee3b501f84a,Convert query-algebrizer/ to AlgebrizerError.
139,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b2249f189d407b1138c8c716586bfa6d9d8b26c5,Convert query-projector/ to ProjectorError.
140,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ac1b0b15fe5e9185cdd97fc86c6612e79ee7c138,Convert query-translator/ to query-projector's ProjectorError.
141,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d31ec28aa8451431c66be96190039c10db806e4e,"Patch it all together: use MentatError at top-level.

I elected to keep Tolstoy using `failure::Error`, because Tolstoy
looks rather more like a high-level application (and will continue to
do so for a while) than a production-ready mid- or low-level API."
142,https://api.github.com/repos/mozilla/mentat/pulls/770,770,Make db/ use DbErrorKind.,"@grigoryk, does this seem like a decent way to achieve #769?  It took me a while to figure it out but it's not a ton of work.",ncalexan,1097182,2018-06-27T00:20:37Z,MEMBER,True,447,405,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae427849d527056c4cc923d33bae43cfcaaab10b,"Expose sub-crate *Error types at top-level.

We're not exposing a uniform API with `mentat::Result` yet, meaning
that early consumers (e.g., the logins work for Mozilla Lockbox) need
to wrap errors from all over the Mentat crate hierarchy."
143,https://api.github.com/repos/mozilla/mentat/pulls/768,768,Rename or delete things so that there is only one type named Entid,"One of them was unused, the other is probably clearer as EntidOrIdent (which AIUI it was originally)",thomcc,860665,2018-06-26T18:14:54Z,CONTRIBUTOR,True,44,70,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0046ff7a546034464707733ada721e04ead652c3,Delete the (apparently unused) EntId
144,https://api.github.com/repos/mozilla/mentat/pulls/768,768,Rename or delete things so that there is only one type named Entid,"One of them was unused, the other is probably clearer as EntidOrIdent (which AIUI it was originally)",thomcc,860665,2018-06-26T18:14:54Z,CONTRIBUTOR,True,44,70,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,646efed2d22c40197d46930a97695786c4dd8549,Rename edn's Entid to EntidOrIdent to avoid confusion with the Entid that's actually an i64
145,https://api.github.com/repos/mozilla/mentat/pulls/768,768,Rename or delete things so that there is only one type named Entid,"One of them was unused, the other is probably clearer as EntidOrIdent (which AIUI it was originally)",thomcc,860665,2018-06-26T18:14:54Z,CONTRIBUTOR,True,44,70,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,538a5b9e88bef8040ce35788b4bab14f1dad15c9,"Fix travis beta bustage

This is unrelated to entids, but is a trivial fix nonetheless"
146,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7fcdfc29d3f44e2afd6cb304351b475c9fd41af2,Pre: Remove unused scope.
147,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,321bd1a0b81fae6f704d206a3c6f6361eb41e8be,"Pre: Sort debug::Datoms in Rust, not SQL.

This makes `Datoms` own more of its own sorting and display (as
`edn::Value`).  The goal is to make it pleasant to create
`debug::Datoms` instances that don't originate from an SQL query; the
immediate consumer is a `TransactWatcher` that collects witnessed
datoms... into a `debug::Datoms` instance, ready to compare with
`assert_matches!`."
148,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c34b6ffad084d2974102c6494ab7afe09a513e0,"Pre: Test transaction watchers at the `db` level.

This adds testing machinery and uses it to at least assert the
existing behaviour.  (Whether the existing behaviour is sensible is a
topic for another time.)"
149,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b7dcb35701332242c6bace0e3ff76cdbbb766de6,"Part 1: Include excision details in core schema.

Thinking about migrating forward makes my head hurt, so I'm ignoring
it for now."
150,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03dd4a37a35602c5ee0256be8504f9672393d744,"Part 2: Extract excision details from transaction inputs.

I've elected to do this by turning the AEV trie into an EAV trie.
This is expensive and not always necessary, but I'm going for
correctness first, performance second.

I intend to follow-up by using the same EAV trie for the schema detail
extraction, which right now is a little ad-hoc."
151,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d80e5d924efe97eca0ab30e2fa39b270934c5e17,Part 3: First cut at handling excision.
152,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2a5d5c38cdb3426d5350348b04c7b99d1e7fc8d5,Part 4: Handle :db.excise/attrs.
153,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c81c51c56a42e75ee026d6c9a15480baeda51011,Part 5: Handle :db.excise/beforeT.
154,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,72293f94e37ca7a82c25a41adb766c0d1be26754,Part 6: Vacuum the `fulltext_values` table after clearing excisions.
155,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,00787cb392597e40a9a7b1eeea62e62f6baa396a,"Review comment: Handle multiple excision targets (like `{:db/excise [x y]}`).

This was a fundamental error in the initial implementation; I made an
error and didn't realize `:db/excise` was cardinality many."
156,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c5693f52945ba5632f79ff772b59be548c86986,Review comment: Delete dangling retractions.
157,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ba3be43a675f31c6d59b5e707725a536716eb52b,Review comment: Use `Partition.allow_excision` rather than hard-coded partitions.
158,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d8ded2a7ffb075ed7c772e082679ab42cf2afafd,Review comment: Cull inaccurate comment.
159,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a646245359922eeab0c6b294aca93268c1a7d4ec,Review comment: replace `status` with `last_tx_needing_rewrite`.
160,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e29a98a4ff04b453a581325211b06c5cd569b2f4,"Part 7: VACUUM the database after ensuring there are no pending excisions.

This is extraordinarily expensive, but it's also the only way to
ensure that excised data doesn't remain in the SQLite database files
after excision.  We might want to make this a flag on the connection:
an encrypted database file (i.e., one using SQLCipher) might not need
vacuuming for some use cases."
161,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,94082bd8db7a1a7e7def303df70a649f5b97448c,"Part 8: Inform transaction watchers of excised datoms.

This is awkward and expensive but an expedient way to support `Store`
instances with active caches.

There are other ways to update active caches: we could drop all caches
entirely and repopulate them, or we could try to associate caches to
impacted entities.  All such things are follow-up work as we solidify
our approach to cache invalidation and try to improve performance."
162,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8b9623ea61bf7eb60b3918e0f14688ca29bf2f61,Fixes.
163,https://api.github.com/repos/mozilla/mentat/pulls/766,766,Implement excision. (#21),My WIP towards excision.,ncalexan,1097182,2018-06-25T16:12:30Z,MEMBER,False,1622,100,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9db61e346b6ffa3a8d5a1d9906199aa3336baaf1,[build] List all crates in the workspace.
164,https://api.github.com/repos/mozilla/mentat/pulls/765,765,WIP Automate building of project documentation,,fluffyemily,12613048,2018-06-25T15:40:39Z,COLLABORATOR,False,16,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,941ac2406f2ae48f42283c8ec6838d3e1413912f,Automate build of swift and rust docs
165,https://api.github.com/repos/mozilla/mentat/pulls/765,765,WIP Automate building of project documentation,,fluffyemily,12613048,2018-06-25T15:40:39Z,COLLABORATOR,False,16,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b78b6c3ac2485e86b62aa2309352a181c5dde84,javadoc gradle task
166,https://api.github.com/repos/mozilla/mentat/pulls/764,764,Remove duplicated header on documentation site home page,,fluffyemily,12613048,2018-06-25T11:11:50Z,COLLABORATOR,True,0,3,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3114adde1e5b569764e9017127f9fcb37ed47c8,Remove duplicated header
167,https://api.github.com/repos/mozilla/mentat/pulls/763,763,Setting baseurl for display of docs site at correct address,,fluffyemily,12613048,2018-06-25T11:01:09Z,COLLABORATOR,True,2,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bb12b10d258c0816d29793be3b96ade043ee8331,Setting baseurl
168,https://api.github.com/repos/mozilla/mentat/pulls/762,762,Attempting to get minima theme building on github,,fluffyemily,12613048,2018-06-25T10:56:50Z,COLLABORATOR,True,193,12,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0480748f01717640ca8bb1281a9913e58de1c97b,Attempting to get minima theme building on github
169,https://api.github.com/repos/mozilla/mentat/pulls/761,761,[cli] Handle line comments in EDN input. (#759),"What was happening is that [""[;"", ""]""] would get glued to ""[; ]"",
which of course can never complete.

It would be good to add tests of this, but the existing multi-line
`InputReader` makes that challenging and I don't want to invest the
time to improve it: I expect it to be overhauled as part of a
transition away from parsing with `combine` and toward parsing with
`rust-peg`.",ncalexan,1097182,2018-06-22T18:48:27Z,MEMBER,True,3,3,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c6c30c710ec7caa1381b2af832cbd02bf0c65dc,"[cli] Handle line comments in EDN input. (#759)

What was happening is that [""[;"", ""]""] would get glued to ""[; ]"",
which of course can never complete.

It would be good to add tests of this, but the existing multi-line
`InputReader` makes that challenging and I don't want to invest the
time to improve it: I expect it to be overhauled as part of a
transition away from parsing with `combine` and toward parsing with
`rust-peg`."
170,https://api.github.com/repos/mozilla/mentat/pulls/760,760,Load and save CLI history (#758).,,ncalexan,1097182,2018-06-22T18:42:28Z,MEMBER,True,101,39,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c19337c8bfa6bbc8fb791642fb425ea3c8460b42,"[cli] Part 1: Bump linefeed; use linefeed::Interface; add ""--no-tty"" argument.

I don't really understand why we were using `linefeed::Reader`
directly, but reading is not the full set of linefeed features we want
to access.  I think the `linefeed::Interface` should be owned by the
`Repl`, not the `InputReader`, but it's a little awkward to share
access with that configuration, so I'm not going to lift the ownership
until I have a reason to.

I think the ""--no-tty"" argument might be useful for running inside
Emacs.  Along the way, I made read_stdin() strip the trailing newline,
which agrees with InputReader::read_line()."
171,https://api.github.com/repos/mozilla/mentat/pulls/760,760,Load and save CLI history (#758).,,ncalexan,1097182,2018-06-22T18:42:28Z,MEMBER,True,101,39,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c41d728d1d837fc345d6d896c1a7c51d82acd8a4,"[cli] Part 2: Don't use exit() to terminate the CLI.

It's not possible to do meaningful clean-up (such as saving history)
if we use exit() to quit.  Instead, each handled command returns a
boolean requesting exit.  I elected not to allow "".exit"" when
processing commands from the command line; it might be useful to
handle accept that.  In general, though, REPLs that accept ""-c
'commands'"" on the command line exit after processing those commands,
so I'd rather think more deeply about that model than build in "".exit""
with our existing system."
172,https://api.github.com/repos/mozilla/mentat/pulls/760,760,Load and save CLI history (#758).,,ncalexan,1097182,2018-06-22T18:42:28Z,MEMBER,True,101,39,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ea9c78c50984786a7683675926b342ec88a4095,"[cli] Part 3: {load,save}_history as appropriate.

It's possible that we should be saving more aggressively -- perhaps
after each entered command -- but we can add that later."
173,https://api.github.com/repos/mozilla/mentat/pulls/760,760,Load and save CLI history (#758).,,ncalexan,1097182,2018-06-22T18:42:28Z,MEMBER,True,101,39,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7f76d5361216cb3985c7e8e1be4af39d41d86e03,"Load and save CLI history. (#758, #760) r=grisha"
174,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c9ab804ab651a07fcdbe8b285ef83239d2170c90,basic Jekyll site
175,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bb09064a5da40ccb00cb154c5deedefb1dc58dea,Add docs to documentation site
176,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,feb47c439c51e0f310b53fb7e625a8028a08704a,Update javadoc to allow for error free builds
177,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7e19902db0099fb57a7572e6dd4bc91d74be1e1b,Remove docs for rust dependencies
178,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2e9797ac6acde4fce7c1b485352aed6451da2e5c,"Better display examples, about and contributing documentation for Mentat"
179,https://api.github.com/repos/mozilla/mentat/pulls/754,754,Mentat documentation website using Jekyll,"Basic website using Jekyll to create a site for accessing documentation, blog posts etc. 

It doesn't look very pretty right now, but it is there. This will tie into https://github.com/mozilla/mentat/issues/697 to ensure that we keep the documentation up to date.",fluffyemily,12613048,2018-06-21T14:56:20Z,COLLABORATOR,True,260331,27,1977,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7bc5ba9fe11cd3c64078619321069f68fb845f09,Version docs
180,https://api.github.com/repos/mozilla/mentat/pulls/753,753,Fix broken cli #752,"Pre: Don't try to match ""key"" when not using sqlcipher.

This causes a runtime error, since `opt_str(""key"")` isn't recognized.

This solves #752 ",maweki,613272,2018-06-20T19:38:17Z,CONTRIBUTOR,True,4,5,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1a5f6689be120f0317f5168ffd6820024bf0ba0,"Pre: Don't try to match ""key"" when not using sqlcipher.

This causes a runtime error, since `opt_str(""key"")` isn't recognized."
181,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,14bc7b6d3fc32589f3fbdc8e5ddb6b41409192df,Fix iOS build script in the case that External-Dependencies does not exist already
182,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aba5eb259015b14e722e44f23a930e98084864b5,Fix leaks in iOS FFI
183,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b31d30d951ea916e5413ea47b985cfa44e38884e,"Improve null handling in FFI, and align value_at_index with it's documentation

- Adds explicit null checking to FFI functions
- Allow destructors to be passed null without segfaulting (Alternatively we
  could have them panic as well).
- Align value_at_index with it's documentation -- that means it returns a
  pointer that you are allowed to free, and that it actually returns null if
  passed an out of bounds value."
184,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4795b28739683a9a6bac485a338a61edfbe5a7e0,"Fix known leaks in Android SDK, and make it's usage less prone to memory corruption"
185,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2cfa547013c60b8fc2fd2e5403df5b7ce9b296b8,Delete debug logging accidentally left in the android SDK before committing
186,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3c8090da6ff9d30cab024cd1cd11a47d2653360a,Consistently use String(destroyingMentatString:) in the Swift SDK
187,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,341f16dd89f5e2d67f781ea28ac73c7da4ac1b13,Android SDK: Remove unused notOwned flag and make rawPointer private
188,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3ec227e5ade3250bd763f5493a39cef3b755e702,Attempt (successfully!?) to return Result directly instead of returning a pointer to a heap allocated result
189,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7f9ef6b9fa8256ef1c776adbadcfd6920c747b6c,Use RustResult.ByValue and InProgressTransactionResult.ByValue in android sdk
190,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ff5ecc0b43604af5057f50d346af911792325c4c,"Avoid using Box<[T]> in the FFI which does not have a well-defined layout

Also uses c_ulonglong and not usize for the size, so that the size is consistent
across platforms."
191,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f2b7099ff8aa8c1ca8c484f2bc74a66a2a94241c,Fix ffi crate on 1.25.0
192,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5399298685291b894beacb68f1be6c03ec79a1a,Make FFI more type safe by removing ExternResult
193,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1719a74466c469d6f98ac30a414493e8e49c38e,"Convert Android SDK to not use ExternResult/RustResult, and to be type safe using PointerType!"
194,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f59499cd00592e07c7350434648e167e852f0cea,Address review nits
195,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,09bf93378d3fe31703b1ee1448e32173a14c1700,Address review comments
196,https://api.github.com/repos/mozilla/mentat/pulls/745,745,Fix known leaks in both swift and android SDKs,"This was easier for the Swift one than the Android one, although I'm more confident that the android one is completely good now -- In the swift, I'm not 100% certain that TypedValues are being cleaned up, since we should have seen some of the same crashes that I did in android when things were freeing values returned by value_at_index.  

Anyway, the Android one also has several changes that were needed in order to make it less likely to cause issues in the future. I'd like to go further here and make the rawPointer on RustObject private, but I stopped before doing so.",thomcc,860665,2018-06-15T21:19:35Z,CONTRIBUTOR,True,1714,1328,43,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,92d9c27776834f9f562da2bb7096e9c7262b9ff3,Merge branch 'master' into ffi-leaks
197,https://api.github.com/repos/mozilla/mentat/pulls/744,744,Fix typo nit accidentally missed in #743,"Noticed this after clicking 'merge', ack!",thomcc,860665,2018-06-14T20:29:45Z,CONTRIBUTOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ea3c7249181c9735a34d7e1f503b757b4e941d21,Fix typo nit accidentally missed in #743
198,https://api.github.com/repos/mozilla/mentat/pulls/743,743,Make travis test sqlcipher by running the tests on macos. Fixes #738,"The biggest issue here is probably that it requires running travis on mac machines, which I've heard are slower and less reliable.

The fact that `cargo test --all --no-default-features --features sqlcipher` isn't going to work for our case sucks, but it shouldn't be that bad.

Another option might be to use a different apt repository, but it wasn't clear to me how to do that. (Yet another option would be to figure out how to bundle sqlcipher, I guess). Regardless, this should be fine for now (and better than nothing).",thomcc,860665,2018-06-14T19:52:47Z,CONTRIBUTOR,True,13,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,74ebc20f99d4da8473c0537f3720fcb133f4c865,Make travis test sqlcipher by running the tests on macos. Fixes #738
199,https://api.github.com/repos/mozilla/mentat/pulls/742,742,"Avoid using 1.26.0-only features when using sqlcipher, and move the sqlcipher Store support to the correct file","This fixes the issue with the sqlcipher build that was introduced by #741, and makes sure that the work done in f041dfe applies to the sqlcipher feature as well.",thomcc,860665,2018-06-14T00:26:01Z,CONTRIBUTOR,True,47,45,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99a73ccb032cb49fc64068e90c0c35ed3a6bdf3a,"Avoid using 1.26.0-only features when using sqlcipher, and move the sqlcipher Store support to the correct file"
200,https://api.github.com/repos/mozilla/mentat/pulls/741,741,Separate `Store` from `Conn`.,This is a Pre: part extracted from #660.,ncalexan,1097182,2018-06-13T16:51:36Z,MEMBER,True,685,580,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8417abde1ae1b9081b4640421685367025090e27,"Make Travis test against multiple Rust versions, including Rust 1.25."
201,https://api.github.com/repos/mozilla/mentat/pulls/741,741,Separate `Store` from `Conn`.,This is a Pre: part extracted from #660.,ncalexan,1097182,2018-06-13T16:51:36Z,MEMBER,True,685,580,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b84f564a2cb2606a9d5da829b9c05739b81da811,Bustage fix: Build against Rust 1.25.
202,https://api.github.com/repos/mozilla/mentat/pulls/741,741,Separate `Store` from `Conn`.,This is a Pre: part extracted from #660.,ncalexan,1097182,2018-06-13T16:51:36Z,MEMBER,True,685,580,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6293f9ba8f765e8d7e37461592b0b2b6079f973d,"Separate Store from Conn.

This is a Pre: part extracted from #660."
203,https://api.github.com/repos/mozilla/mentat/pulls/740,740,"Make Travis test against multiple Rust versions, including Rust 1.25.",@thomcc look sensible?,ncalexan,1097182,2018-06-13T16:37:35Z,MEMBER,True,18,8,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8417abde1ae1b9081b4640421685367025090e27,"Make Travis test against multiple Rust versions, including Rust 1.25."
204,https://api.github.com/repos/mozilla/mentat/pulls/740,740,"Make Travis test against multiple Rust versions, including Rust 1.25.",@thomcc look sensible?,ncalexan,1097182,2018-06-13T16:37:35Z,MEMBER,True,18,8,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b84f564a2cb2606a9d5da829b9c05739b81da811,Bustage fix: Build against Rust 1.25.
205,https://api.github.com/repos/mozilla/mentat/pulls/737,737,Add support for using sqlcipher,"This adds a `sqlcipher` feature (which is incompatible with the `bundled_sqlite3`) support for opening a `Store` with a key, changing the key of an open Store, and support for it through the CLI and (in theory) the FFI. It's based some on @mhammond's branch, and on debugging we did on Wednesday.

The additional APIs aren't behind `cfg(feature = ""sqlcipher"")` mostly because it seems like that's a big pain to use and requires callers add a lot of similar  `cfg`'s. Instead, we emit a `Result::Err` when you try to do something that would require sqlcipher when we weren't build with support for it. I could easily be convinced we should do things the other way.

It's easy-ish to try on mac, since you can `brew install sqlcipher --with-fts`, then `cargo build --no-default-features --features sqlcipher`. See caveat number 1 about building/running the cli or building the ffi, though (needs to be done from the directory in question due to a cargo bug). On other platforms this is trickier.

Some caveats:

1. Until https://github.com/rust-lang/cargo/issues/5364 is fixed, building nested crates that depend on mentat itself (e.g. tools/cli and ffi) must be done inside the directory of those crates. Specifically `cargo build --no-default-features --features sqlcipher -p mentat_cli` will apply the `--features` and `--no-default-features` flags to the wrong package. `cd tools/cli; cargo build --no-default-features --features sqlcipher; cd '-';` works instead. Ditto substituting `tools/cli` with `ffi`. Yes, this is annoying.

2. `PRAGMA page_size` doesn't seem to be valid in all cases when used in conjunction with `PRAGMA cipher_page_size`. I can't find official documentation on this. What I have found is:
    - Specifying `page_size` but not `cipher_page_size` seems never to be valid.
    - Specifying them both seems only to work if `cipher_page_size` is a positive integer multiple of `page_size` (I didn't check this very thoroughly though).
    - Someone on the freenode sqlite IRC channel suggested that page_size is not used with sqlcipher, however this seems to be false given the above (perhaps they meant it should not be used, though? IDK).
    - Most importantly, unlike `page_size`, the `cipher_page_size` is not simply an optimization detail! Having the correct `cipher_page_size` is required to read the contents of a database, e.g. if you open a DB with cipher_page_size at 8192 (for example) that's the value it must always have in order for reads/writes to be successful.

    I set it to the value we were using for `page_size` before, and made the code use both `cipher_page_size` and `page_size` when using sqlcipher. It's not at all clear to me this was the right choice, though.

3. There are no tests outside the CLI parsing changes. I'm open to suggestions about how best to test this, though. Maybe adding an encrypted db in fixtures and making sure that we can open it would be enough?",thomcc,860665,2018-06-08T22:23:56Z,CONTRIBUTOR,True,367,56,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,415d44863bebe2f704164437404e7a2b328d52d7,Add support for using sqlcipher
206,https://api.github.com/repos/mozilla/mentat/pulls/737,737,Add support for using sqlcipher,"This adds a `sqlcipher` feature (which is incompatible with the `bundled_sqlite3`) support for opening a `Store` with a key, changing the key of an open Store, and support for it through the CLI and (in theory) the FFI. It's based some on @mhammond's branch, and on debugging we did on Wednesday.

The additional APIs aren't behind `cfg(feature = ""sqlcipher"")` mostly because it seems like that's a big pain to use and requires callers add a lot of similar  `cfg`'s. Instead, we emit a `Result::Err` when you try to do something that would require sqlcipher when we weren't build with support for it. I could easily be convinced we should do things the other way.

It's easy-ish to try on mac, since you can `brew install sqlcipher --with-fts`, then `cargo build --no-default-features --features sqlcipher`. See caveat number 1 about building/running the cli or building the ffi, though (needs to be done from the directory in question due to a cargo bug). On other platforms this is trickier.

Some caveats:

1. Until https://github.com/rust-lang/cargo/issues/5364 is fixed, building nested crates that depend on mentat itself (e.g. tools/cli and ffi) must be done inside the directory of those crates. Specifically `cargo build --no-default-features --features sqlcipher -p mentat_cli` will apply the `--features` and `--no-default-features` flags to the wrong package. `cd tools/cli; cargo build --no-default-features --features sqlcipher; cd '-';` works instead. Ditto substituting `tools/cli` with `ffi`. Yes, this is annoying.

2. `PRAGMA page_size` doesn't seem to be valid in all cases when used in conjunction with `PRAGMA cipher_page_size`. I can't find official documentation on this. What I have found is:
    - Specifying `page_size` but not `cipher_page_size` seems never to be valid.
    - Specifying them both seems only to work if `cipher_page_size` is a positive integer multiple of `page_size` (I didn't check this very thoroughly though).
    - Someone on the freenode sqlite IRC channel suggested that page_size is not used with sqlcipher, however this seems to be false given the above (perhaps they meant it should not be used, though? IDK).
    - Most importantly, unlike `page_size`, the `cipher_page_size` is not simply an optimization detail! Having the correct `cipher_page_size` is required to read the contents of a database, e.g. if you open a DB with cipher_page_size at 8192 (for example) that's the value it must always have in order for reads/writes to be successful.

    I set it to the value we were using for `page_size` before, and made the code use both `cipher_page_size` and `page_size` when using sqlcipher. It's not at all clear to me this was the right choice, though.

3. There are no tests outside the CLI parsing changes. I'm open to suggestions about how best to test this, though. Maybe adding an encrypted db in fixtures and making sure that we can open it would be enough?",thomcc,860665,2018-06-08T22:23:56Z,CONTRIBUTOR,True,367,56,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,92b8179b28687c63ad1c0101c441aca60384dd5c,Don't allow users to call functions requiring sqlcipher unless we were compiled with sqlcipher support
207,https://api.github.com/repos/mozilla/mentat/pulls/737,737,Add support for using sqlcipher,"This adds a `sqlcipher` feature (which is incompatible with the `bundled_sqlite3`) support for opening a `Store` with a key, changing the key of an open Store, and support for it through the CLI and (in theory) the FFI. It's based some on @mhammond's branch, and on debugging we did on Wednesday.

The additional APIs aren't behind `cfg(feature = ""sqlcipher"")` mostly because it seems like that's a big pain to use and requires callers add a lot of similar  `cfg`'s. Instead, we emit a `Result::Err` when you try to do something that would require sqlcipher when we weren't build with support for it. I could easily be convinced we should do things the other way.

It's easy-ish to try on mac, since you can `brew install sqlcipher --with-fts`, then `cargo build --no-default-features --features sqlcipher`. See caveat number 1 about building/running the cli or building the ffi, though (needs to be done from the directory in question due to a cargo bug). On other platforms this is trickier.

Some caveats:

1. Until https://github.com/rust-lang/cargo/issues/5364 is fixed, building nested crates that depend on mentat itself (e.g. tools/cli and ffi) must be done inside the directory of those crates. Specifically `cargo build --no-default-features --features sqlcipher -p mentat_cli` will apply the `--features` and `--no-default-features` flags to the wrong package. `cd tools/cli; cargo build --no-default-features --features sqlcipher; cd '-';` works instead. Ditto substituting `tools/cli` with `ffi`. Yes, this is annoying.

2. `PRAGMA page_size` doesn't seem to be valid in all cases when used in conjunction with `PRAGMA cipher_page_size`. I can't find official documentation on this. What I have found is:
    - Specifying `page_size` but not `cipher_page_size` seems never to be valid.
    - Specifying them both seems only to work if `cipher_page_size` is a positive integer multiple of `page_size` (I didn't check this very thoroughly though).
    - Someone on the freenode sqlite IRC channel suggested that page_size is not used with sqlcipher, however this seems to be false given the above (perhaps they meant it should not be used, though? IDK).
    - Most importantly, unlike `page_size`, the `cipher_page_size` is not simply an optimization detail! Having the correct `cipher_page_size` is required to read the contents of a database, e.g. if you open a DB with cipher_page_size at 8192 (for example) that's the value it must always have in order for reads/writes to be successful.

    I set it to the value we were using for `page_size` before, and made the code use both `cipher_page_size` and `page_size` when using sqlcipher. It's not at all clear to me this was the right choice, though.

3. There are no tests outside the CLI parsing changes. I'm open to suggestions about how best to test this, though. Maybe adding an encrypted db in fixtures and making sure that we can open it would be enough?",thomcc,860665,2018-06-08T22:23:56Z,CONTRIBUTOR,True,367,56,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,75a46b517426943944fd850fbfb7bac48d34b168,"Add tests for the sqlcipher feature, and respond to review comments"
208,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4e3b1f9bd9c90bbc0479f88276cd44eeac9789bf,"Add a top-level ""syncable"" feature."
209,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b94613b7b23382d5788b65ff3a6a84549c27881b,"Add get_{chunks,transactions} to Tolstoy's remote client."
210,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2c0203f74daae0b30ea46788c018f567f652c54b,Move Tolstoy remote client into separate module.
211,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,523fd09df9493eef6dbf60898b4b0770f0e6e9a1,"Skip first (bootstrap) transaction.

It's technically very challenging to consider syncing Mentat stores
with different bootstrap transactions.  Therefore, Tolstoy blindly
skips the first (bootstrap) transaction.  In the future, we can at
least recognize that the underlying Mentat stores are incompatible and
bail out early."
212,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e91faae3fb5ed832c4470155a40696cc5bf5ff0e,"Remove `open_empty`.

This was a work-around for Tolstoy, which couldn't gracefully handle
syncing a store with a bootstrap transaction.  Tolstoy now handles
that single transaction, so this is no longer necessary."
213,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f4a169c71968fd1b9241ea8e48d08d4e452c587,"Accept a `rusqlite::Transaction` in Tolstoy's sync.

This is part of a larger shift towards atomically updating `Conn`.
The division of labour is (and must be) similar to `db` and `Conn` in
a `transact`: `transact` coordinates `db` to do low-level work and
processes progress reports, and then commits the SQL transaction and
atomically advances `Conn`'s metadata.  In a parallel fashion, `sync`
will coordinate `tolstoy` to do low-level work before committing the
SQL transaction and atomically advancing `Conn`'s metadata."
214,https://api.github.com/repos/mozilla/mentat/pulls/736,736,"Fast-forward syncing, rebased.","Here's a sliced-and-diced version of #563, with the simple stuff pulled forward.

I'll dig into the larger restructure for atomic metadata updates now, but perhaps you could stamp the easy bits @grigoryk?",ncalexan,1097182,2018-06-06T23:20:19Z,MEMBER,False,629,304,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b57ec738a413803aef29d61b55f06338546b9f9,"Implement fast-forward syncing.

This handles the situation where only one of the local client and the
remote server have advanced."
215,https://api.github.com/repos/mozilla/mentat/pulls/731,731,Closes #660 Store management," Add Store manager to ensure that we only have one open handle to each database.

This implementation has gone through several iterations. The considerations that formed the current design are as follows:

1. `rusqlite::Connection` is `Send` but not `Sync` and therefore cannot be stored in a static var. This is why we only store the `Conn` inside `Stores`.
2. `Conn` is stored as a `Weak` reference because otherwise every time we return a `Store` we increase the reference count from one to two, forcing every mutable operation performed on the `Conn` to clone rather than return a mutable reference, dramatically increasing the number of Conn references proliferating the system. By storing `Conn` as a `Weak`, for as long as there is only one Store we can perform mutable operations without increasing the reference count on `Conn`.
3. By storing `Conn` as a `Weak` reference, if we cease to hold any strong references to the `Conn`, by not having any active `Store`'s, the `Weak` will no longer be upgradable, but the entry will remain in the map of open `Conns`. We therefore must recreate the `Conn` if a request for a previously opened store is received. We do this in the background without consumers being aware.
4. The original implementation had a `thread_local` store of open `Rc<rusqlite::Connection>`'s mapped by the same key as `Conn`'s. However, due to `rusqlite::Connection` not being `Clone`, this meant that `Rc::make_mut` could not be used, which resulted in the code being unable to get a mutable reference to the `rusqlite::Connection` if there was more than one reference. As the map retained a strong reference, that ensured that every returned Store had a reference count of at least 2 on it's `rusqlite::Connection` which resulted in all mutable operations on the `Store` failing. I therefore made the decision to create a new `rusqlite::Connection` for every Store returned. This contravenes the [original spec](#660), but given the constraints something had to give and I decided on this one.
5. Writing tests with in memory stores mapped by path ("""") with a static `Store` lead to a problem where the same `Conn` was shared between tests and the assertions around reference counts on stored `Conn`'s were unreliable. In order to get around this I introduced the concept of the `named_in_memory_store` which assigns a name to an in memory store ensuring that the same `Conn` was not shared between tests. This is the requirement that lead to the decision to store keys as `String`'s rather than `PathBuf`.

The thing I don't like about this is the number of `rusqlite::Connection`s that we create. After chatting with @rnewman I will look into providing a `thread_local` connection pool and get `Stores` to take a reference to a connection that it will use to create `Stores`s.",fluffyemily,12613048,2018-06-01T14:04:02Z,COLLABORATOR,False,730,169,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d056c7cc10df76d5a475932e8627cf45acb0aa44,"Fold in @ncalexan's changes to make Conn manage its own mutability.

ref: https://github.com/ncalexan/mentat/tree/stores/src"
216,https://api.github.com/repos/mozilla/mentat/pulls/731,731,Closes #660 Store management," Add Store manager to ensure that we only have one open handle to each database.

This implementation has gone through several iterations. The considerations that formed the current design are as follows:

1. `rusqlite::Connection` is `Send` but not `Sync` and therefore cannot be stored in a static var. This is why we only store the `Conn` inside `Stores`.
2. `Conn` is stored as a `Weak` reference because otherwise every time we return a `Store` we increase the reference count from one to two, forcing every mutable operation performed on the `Conn` to clone rather than return a mutable reference, dramatically increasing the number of Conn references proliferating the system. By storing `Conn` as a `Weak`, for as long as there is only one Store we can perform mutable operations without increasing the reference count on `Conn`.
3. By storing `Conn` as a `Weak` reference, if we cease to hold any strong references to the `Conn`, by not having any active `Store`'s, the `Weak` will no longer be upgradable, but the entry will remain in the map of open `Conns`. We therefore must recreate the `Conn` if a request for a previously opened store is received. We do this in the background without consumers being aware.
4. The original implementation had a `thread_local` store of open `Rc<rusqlite::Connection>`'s mapped by the same key as `Conn`'s. However, due to `rusqlite::Connection` not being `Clone`, this meant that `Rc::make_mut` could not be used, which resulted in the code being unable to get a mutable reference to the `rusqlite::Connection` if there was more than one reference. As the map retained a strong reference, that ensured that every returned Store had a reference count of at least 2 on it's `rusqlite::Connection` which resulted in all mutable operations on the `Store` failing. I therefore made the decision to create a new `rusqlite::Connection` for every Store returned. This contravenes the [original spec](#660), but given the constraints something had to give and I decided on this one.
5. Writing tests with in memory stores mapped by path ("""") with a static `Store` lead to a problem where the same `Conn` was shared between tests and the assertions around reference counts on stored `Conn`'s were unreliable. In order to get around this I introduced the concept of the `named_in_memory_store` which assigns a name to an in memory store ensuring that the same `Conn` was not shared between tests. This is the requirement that lead to the decision to store keys as `String`'s rather than `PathBuf`.

The thing I don't like about this is the number of `rusqlite::Connection`s that we create. After chatting with @rnewman I will look into providing a `thread_local` connection pool and get `Stores` to take a reference to a connection that it will use to create `Stores`s.",fluffyemily,12613048,2018-06-01T14:04:02Z,COLLABORATOR,False,730,169,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1c2c9ee773dc309d11ce9cb7539b6888a993a30,"Add Stores to manage `Conn` and creation of `rusqlite::Connection`s.
Enable ability to create named in memory stores and in memory stores with shared caches.
Include ability to create encrypted connections.
Update `Store` to take an `Arc<Conn>` so references can be shared.
Update FFI to use `Stores` instead of `Store`.
Add `store_open_named_in_memory_store` to open a named in-memory store over FFI (useful for tests)."
217,https://api.github.com/repos/mozilla/mentat/pulls/731,731,Closes #660 Store management," Add Store manager to ensure that we only have one open handle to each database.

This implementation has gone through several iterations. The considerations that formed the current design are as follows:

1. `rusqlite::Connection` is `Send` but not `Sync` and therefore cannot be stored in a static var. This is why we only store the `Conn` inside `Stores`.
2. `Conn` is stored as a `Weak` reference because otherwise every time we return a `Store` we increase the reference count from one to two, forcing every mutable operation performed on the `Conn` to clone rather than return a mutable reference, dramatically increasing the number of Conn references proliferating the system. By storing `Conn` as a `Weak`, for as long as there is only one Store we can perform mutable operations without increasing the reference count on `Conn`.
3. By storing `Conn` as a `Weak` reference, if we cease to hold any strong references to the `Conn`, by not having any active `Store`'s, the `Weak` will no longer be upgradable, but the entry will remain in the map of open `Conns`. We therefore must recreate the `Conn` if a request for a previously opened store is received. We do this in the background without consumers being aware.
4. The original implementation had a `thread_local` store of open `Rc<rusqlite::Connection>`'s mapped by the same key as `Conn`'s. However, due to `rusqlite::Connection` not being `Clone`, this meant that `Rc::make_mut` could not be used, which resulted in the code being unable to get a mutable reference to the `rusqlite::Connection` if there was more than one reference. As the map retained a strong reference, that ensured that every returned Store had a reference count of at least 2 on it's `rusqlite::Connection` which resulted in all mutable operations on the `Store` failing. I therefore made the decision to create a new `rusqlite::Connection` for every Store returned. This contravenes the [original spec](#660), but given the constraints something had to give and I decided on this one.
5. Writing tests with in memory stores mapped by path ("""") with a static `Store` lead to a problem where the same `Conn` was shared between tests and the assertions around reference counts on stored `Conn`'s were unreliable. In order to get around this I introduced the concept of the `named_in_memory_store` which assigns a name to an in memory store ensuring that the same `Conn` was not shared between tests. This is the requirement that lead to the decision to store keys as `String`'s rather than `PathBuf`.

The thing I don't like about this is the number of `rusqlite::Connection`s that we create. After chatting with @rnewman I will look into providing a `thread_local` connection pool and get `Stores` to take a reference to a connection that it will use to create `Stores`s.",fluffyemily,12613048,2018-06-01T14:04:02Z,COLLABORATOR,False,730,169,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b361ea8119f7cec0a0ae8aef4190790c35a301fa,Update Android and iOS SDKs to reflect new named in memory functions. Utilize named in memory store in tests to ensure isolation when running.
218,https://api.github.com/repos/mozilla/mentat/pulls/731,731,Closes #660 Store management," Add Store manager to ensure that we only have one open handle to each database.

This implementation has gone through several iterations. The considerations that formed the current design are as follows:

1. `rusqlite::Connection` is `Send` but not `Sync` and therefore cannot be stored in a static var. This is why we only store the `Conn` inside `Stores`.
2. `Conn` is stored as a `Weak` reference because otherwise every time we return a `Store` we increase the reference count from one to two, forcing every mutable operation performed on the `Conn` to clone rather than return a mutable reference, dramatically increasing the number of Conn references proliferating the system. By storing `Conn` as a `Weak`, for as long as there is only one Store we can perform mutable operations without increasing the reference count on `Conn`.
3. By storing `Conn` as a `Weak` reference, if we cease to hold any strong references to the `Conn`, by not having any active `Store`'s, the `Weak` will no longer be upgradable, but the entry will remain in the map of open `Conns`. We therefore must recreate the `Conn` if a request for a previously opened store is received. We do this in the background without consumers being aware.
4. The original implementation had a `thread_local` store of open `Rc<rusqlite::Connection>`'s mapped by the same key as `Conn`'s. However, due to `rusqlite::Connection` not being `Clone`, this meant that `Rc::make_mut` could not be used, which resulted in the code being unable to get a mutable reference to the `rusqlite::Connection` if there was more than one reference. As the map retained a strong reference, that ensured that every returned Store had a reference count of at least 2 on it's `rusqlite::Connection` which resulted in all mutable operations on the `Store` failing. I therefore made the decision to create a new `rusqlite::Connection` for every Store returned. This contravenes the [original spec](#660), but given the constraints something had to give and I decided on this one.
5. Writing tests with in memory stores mapped by path ("""") with a static `Store` lead to a problem where the same `Conn` was shared between tests and the assertions around reference counts on stored `Conn`'s were unreliable. In order to get around this I introduced the concept of the `named_in_memory_store` which assigns a name to an in memory store ensuring that the same `Conn` was not shared between tests. This is the requirement that lead to the decision to store keys as `String`'s rather than `PathBuf`.

The thing I don't like about this is the number of `rusqlite::Connection`s that we create. After chatting with @rnewman I will look into providing a `thread_local` connection pool and get `Stores` to take a reference to a connection that it will use to create `Stores`s.",fluffyemily,12613048,2018-06-01T14:04:02Z,COLLABORATOR,False,730,169,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5ead1d3989b9ae92a3fd6c5bf6ca961edc5d3bea,Fixing tests broken by rebase
219,https://api.github.com/repos/mozilla/mentat/pulls/729,729,Android SDK basic sample project and symlinked SDK Mentat binaries,"Changes:
- Adds a sample android app which uses mentat SDK and opens a mentat db on launch
- Changes jniLibs/**/libmentat_ffi.so files within the SDK to be symlinks instead of binaries

This makes SDK development flow a bit nicer and provides a simple example project we can iterate on to test and showcase SDK features. Something like this:
- Compile `mentat_ffi` for all targets via `scripts/android_build.sh` (symlinks now resolve)
- Open the Mentat android project
- Make changes, try the sample project, make sure stuff works and APIs are all right, etc
- Make more changes to mentat-proper. `scripts/android_build.sh x86`, and try them out in an emulator. Simply relaunching the sample project should pick up the new version of the symlinked binary.
- Eventually, compile the final binaries `scripts/android_build.sh`, bump `ext.library.version` in `build.gradle` and upload to bintray: `gradle bintrayUpload`

This largely fixes #721 (""release"" binaries are symlinked, so non-ideal for local dev).",grigoryk,465422,2018-05-31T22:49:05Z,COLLABORATOR,True,422,7,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1d4957e362662182e7180d5484cdcf2be42d288d,Add an IntelliJ section to gitignore
220,https://api.github.com/repos/mozilla/mentat/pulls/729,729,Android SDK basic sample project and symlinked SDK Mentat binaries,"Changes:
- Adds a sample android app which uses mentat SDK and opens a mentat db on launch
- Changes jniLibs/**/libmentat_ffi.so files within the SDK to be symlinks instead of binaries

This makes SDK development flow a bit nicer and provides a simple example project we can iterate on to test and showcase SDK features. Something like this:
- Compile `mentat_ffi` for all targets via `scripts/android_build.sh` (symlinks now resolve)
- Open the Mentat android project
- Make changes, try the sample project, make sure stuff works and APIs are all right, etc
- Make more changes to mentat-proper. `scripts/android_build.sh x86`, and try them out in an emulator. Simply relaunching the sample project should pick up the new version of the symlinked binary.
- Eventually, compile the final binaries `scripts/android_build.sh`, bump `ext.library.version` in `build.gradle` and upload to bintray: `gradle bintrayUpload`

This largely fixes #721 (""release"" binaries are symlinked, so non-ideal for local dev).",grigoryk,465422,2018-05-31T22:49:05Z,COLLABORATOR,True,422,7,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c5df9eb98c6657f7e183fea77137048571d82992,Add Android SDK sample project which exercises mentat SDK
221,https://api.github.com/repos/mozilla/mentat/pulls/729,729,Android SDK basic sample project and symlinked SDK Mentat binaries,"Changes:
- Adds a sample android app which uses mentat SDK and opens a mentat db on launch
- Changes jniLibs/**/libmentat_ffi.so files within the SDK to be symlinks instead of binaries

This makes SDK development flow a bit nicer and provides a simple example project we can iterate on to test and showcase SDK features. Something like this:
- Compile `mentat_ffi` for all targets via `scripts/android_build.sh` (symlinks now resolve)
- Open the Mentat android project
- Make changes, try the sample project, make sure stuff works and APIs are all right, etc
- Make more changes to mentat-proper. `scripts/android_build.sh x86`, and try them out in an emulator. Simply relaunching the sample project should pick up the new version of the symlinked binary.
- Eventually, compile the final binaries `scripts/android_build.sh`, bump `ext.library.version` in `build.gradle` and upload to bintray: `gradle bintrayUpload`

This largely fixes #721 (""release"" binaries are symlinked, so non-ideal for local dev).",grigoryk,465422,2018-05-31T22:49:05Z,COLLABORATOR,True,422,7,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b6d69f91572c2b35d467a34701e502463df2516b,Symlink libmentat_ffi.so in Android SDK to the generated --release files
222,https://api.github.com/repos/mozilla/mentat/pulls/729,729,Android SDK basic sample project and symlinked SDK Mentat binaries,"Changes:
- Adds a sample android app which uses mentat SDK and opens a mentat db on launch
- Changes jniLibs/**/libmentat_ffi.so files within the SDK to be symlinks instead of binaries

This makes SDK development flow a bit nicer and provides a simple example project we can iterate on to test and showcase SDK features. Something like this:
- Compile `mentat_ffi` for all targets via `scripts/android_build.sh` (symlinks now resolve)
- Open the Mentat android project
- Make changes, try the sample project, make sure stuff works and APIs are all right, etc
- Make more changes to mentat-proper. `scripts/android_build.sh x86`, and try them out in an emulator. Simply relaunching the sample project should pick up the new version of the symlinked binary.
- Eventually, compile the final binaries `scripts/android_build.sh`, bump `ext.library.version` in `build.gradle` and upload to bintray: `gradle bintrayUpload`

This largely fixes #721 (""release"" binaries are symlinked, so non-ideal for local dev).",grigoryk,465422,2018-05-31T22:49:05Z,COLLABORATOR,True,422,7,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cf6f6f9ef7dd0755148652a14b2bb3061aae35f1,README files for Android SDK and mentat_ffi
223,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,729fe59578e4be7752b5d77a7c7e1ea07c523275,"[edn] Pre: Rename keyword to namespaced_keyword.

The `Keyword` type evolved to become more general: we now use the one
type for both :regular and :name/spaced keywords.  This changes
reflects the new generality."
224,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47a0f40cce53ad63941b94b74a4e4eea0b43545f,Pre: Fix warnings.
225,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3cc8b4fd245b775944eb875dcf6e4cf40bdbf2c5,"Pre: Prefer [(pred ...)] to [[pred ...]] syntax.

This is a style choice.  We supported both, perhaps for Datomic
compliance, but it's not the standard we use in our code base.  In
addition, it doesn't read like lisp (which is what EDN is copying),
since [] is not function application in most lisps.

It's also a convenience: I don't want to parse brackets that have to
agree with `rust-peg`.  It's not hard but it's also not worth doing."
226,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f1fc9f184661dcb717fc57fa8c258e9a4f5cf2fd,Part 0: Extract query-parser errors.
227,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ad9a1394a3e753213c3eef74bcf7ede98c6e9728,"Part 1: Push ValueRc and friends into `edn` crate.

This is a pre-requisite for moving the existing `combine`-based parser
to use `rust-peg` -- part of the push to use `rust-peg` for all parsing
started in https://github.com/mozilla/mentat/pull/681.  We need the
types for the parsed structure ""very early"", and the `edn` crate is
the earliest such crate.

This is an unfortunate destruction of boundaries between parts of the
system, but it's the best way we have to achieve this right now."
228,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1d8d94f88725730e76d331152b02d09d83cd855b,"Part 2: Turn `(type-function ?var)` into `(type ?var type-keyword)`.

This is more general (the parser doesn't encode the set of known
types), and avoids a dependency on `ValueType`."
229,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4a88923098778fa2322cd94f9648dbcc6de1f43,Part 3a: Move file to preserve blame.
230,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8073056f2220d23d93ad1f53af1f606439bed8d,"Part 3: Move `query` into `edn`.

It's unfortunate to squash two crates together like this, but it's the
best option."
231,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,09f1d633b5debf15954501cbb32b5192818882fc,"Part 4: Parse queries with `rust-peg`.

There's an unfortunate conflation here between implementing the query
parser in `rust-peg` and moving some validation that now happens at
parse time to happen later.  The result is that we introduce
`ParsedFindQuery` as a less-processed `FindQuery`, and that we only
use string errors (which is all `rust-peg` supports) instead of the
structured errors in query-parser's errors module.  The next commit
will address this, on the road to removing the `query-parser` module
entirely."
232,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47441f56dc19c0c3963f80360dd85676f0576a4b,"Part 5: Push FindQuery into query-algebrizer; structure errors.

This is a big deck-chair re-arrangement.  This puts FindQuery into
query-algebrizer and puts the validation from ParsedFindQuery ->
FindQuery their as well.

Some tests were re-homed for this.

In addition, the little-used maplit crate dependency was replaced with
inline expressions."
233,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4166cc67c1a9bd2b3a35a67e8c5540ba515eb96,Part 6: Remove query-parser entirely.
234,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e68cc4016c8147f59769d769981f083bc53c9260,"Part 7: Remove tx entirely.

This was left over from #681."
235,https://api.github.com/repos/mozilla/mentat/pulls/728,728,Parse queries using rust-peg.,"This is the equivalent of #681 but for the query parser.  Faster and simpler, although a lot of things needed to get moved around.

I'll follow-up to remove the `tx` and `query-parser` crates, since they're just pass-throughs at this point.",ncalexan,1097182,2018-05-31T21:15:39Z,MEMBER,True,1856,2857,56,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cfed968514c75eff058e85ef96a391eda14f9cb3,Review comments.
236,https://api.github.com/repos/mozilla/mentat/pulls/727,727,Android build script which supports target specification,"A slight improvement over the current script. Most of the time during development I just want to rebuild one target, not all. Currently that means either typing out the `cargo build....` command or commenting out lines in the script.

Recognized targets: `x86`, `arm`, `arm64`.

`./android_build.sh` - builds all supported targets
`./android_build.sh x86 arm` - builds for `x86` and `arm`
`./android_build.sh arm64 x86 dummy` - fails and complains because `dummy` isn't a supported target.",grigoryk,465422,2018-05-31T19:23:14Z,COLLABORATOR,True,32,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2f947e49bb39f0beccddabf3509dd5b85aa6101c,Android build script which supports target specification
237,https://api.github.com/repos/mozilla/mentat/pulls/726,726,Edn serde support,"Fixes https://github.com/mozilla/mentat/issues/708

Simple naive implementation of serde serialization/deserialization for edn values. This is a naive approach, relying on serde's defaults for the internal shape.

We can take this much further, but I'm bit wary of allocating more time on this without an active consumer. Points of improvement are around making the json representation of edn more ergonomic, and adding some helpers to stringify/parse edn into/out of json without having to go through serde_json.

I had to update the num crate to use its serde support. Splitting it into num-traits and num-bigint ended up the way I did it, but there's probably a way to rely on the num mothership crate if necessary.

I also enabled serde-supported tests on travis, they weren't before.",victorporof,248899,2018-05-31T08:07:26Z,CONTRIBUTOR,False,130,9,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6769a043c934428c4db6b473036084bafcbd333d,Add simple serde support for edn values
238,https://api.github.com/repos/mozilla/mentat/pulls/726,726,Edn serde support,"Fixes https://github.com/mozilla/mentat/issues/708

Simple naive implementation of serde serialization/deserialization for edn values. This is a naive approach, relying on serde's defaults for the internal shape.

We can take this much further, but I'm bit wary of allocating more time on this without an active consumer. Points of improvement are around making the json representation of edn more ergonomic, and adding some helpers to stringify/parse edn into/out of json without having to go through serde_json.

I had to update the num crate to use its serde support. Splitting it into num-traits and num-bigint ended up the way I did it, but there's probably a way to rely on the num mothership crate if necessary.

I also enabled serde-supported tests on travis, they weren't before.",victorporof,248899,2018-05-31T08:07:26Z,CONTRIBUTOR,False,130,9,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,74b03a92368702a83e47730dc9950b11de968f8c,"Actually run serde-supported tests on travis

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
239,https://api.github.com/repos/mozilla/mentat/pulls/726,726,Edn serde support,"Fixes https://github.com/mozilla/mentat/issues/708

Simple naive implementation of serde serialization/deserialization for edn values. This is a naive approach, relying on serde's defaults for the internal shape.

We can take this much further, but I'm bit wary of allocating more time on this without an active consumer. Points of improvement are around making the json representation of edn more ergonomic, and adding some helpers to stringify/parse edn into/out of json without having to go through serde_json.

I had to update the num crate to use its serde support. Splitting it into num-traits and num-bigint ended up the way I did it, but there's probably a way to rely on the num mothership crate if necessary.

I also enabled serde-supported tests on travis, they weren't before.",victorporof,248899,2018-05-31T08:07:26Z,CONTRIBUTOR,False,130,9,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f29193d8847232507c148a9a86dad65105882e2,"Remove superfluous serde_support cfg pragmas

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
240,https://api.github.com/repos/mozilla/mentat/pulls/720,720,Gradle support for publishing to bintray,"Fixes #718.

This largely follows a simpler version of what https://github.com/mozilla-mobile/android-components is currently doing. 

Running `gradle bintrayUpload` publishes a current version, as defined in `build.gradle/ext.library.version`.

Projects may then use mentat by specifying repository ...
```
repositories {
    // Temporary until mentat is on JCenter
    maven { url ""https://grisha.bintray.com/Mentat"" }
}
```
... and adding a dependency ...
```
dependencies {
    ....
    implementation ""org.mozilla.mentat:mentat:0.3.1""
}
```",grigoryk,465422,2018-05-29T20:25:55Z,COLLABORATOR,True,97,34,31,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cc84c3a07ecfc89a798e9d96e15cdb070ec5eb6d,Rename SDK package name from com.mozilla.mentat to org.mozilla.mentat
241,https://api.github.com/repos/mozilla/mentat/pulls/720,720,Gradle support for publishing to bintray,"Fixes #718.

This largely follows a simpler version of what https://github.com/mozilla-mobile/android-components is currently doing. 

Running `gradle bintrayUpload` publishes a current version, as defined in `build.gradle/ext.library.version`.

Projects may then use mentat by specifying repository ...
```
repositories {
    // Temporary until mentat is on JCenter
    maven { url ""https://grisha.bintray.com/Mentat"" }
}
```
... and adding a dependency ...
```
dependencies {
    ....
    implementation ""org.mozilla.mentat:mentat:0.3.1""
}
```",grigoryk,465422,2018-05-29T20:25:55Z,COLLABORATOR,True,97,34,31,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d7a7764e5b0f89213d0c99c7b9da566df2df54e,Gradle configuration for publishing to a bintray repository
242,https://api.github.com/repos/mozilla/mentat/pulls/717,717,"Min SDK 16, bump dependency versions, update gradle & wrapper, fix linter error","Fixes #716 and updates/cleans up things a little.

API 16 is chosen somewhat arbitrarily (this is what fennec currently uses).",grigoryk,465422,2018-05-29T01:54:05Z,COLLABORATOR,True,67,55,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce419574ee676a12568c954dccb85b8da36f5f5d,"Bump versions, update gradle wrapper, fix linter error"
243,https://api.github.com/repos/mozilla/mentat/pulls/717,717,"Min SDK 16, bump dependency versions, update gradle & wrapper, fix linter error","Fixes #716 and updates/cleans up things a little.

API 16 is chosen somewhat arbitrarily (this is what fennec currently uses).",grigoryk,465422,2018-05-29T01:54:05Z,COLLABORATOR,True,67,55,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b340d9c59f0a27b023fc496e61b496047e215d5,"cleanup
Z"
244,https://api.github.com/repos/mozilla/mentat/pulls/713,713,Include namespace-separating solidus in NamespaceableName; improve type handling around ground,,rnewman,91722,2018-05-27T20:01:41Z,COLLABORATOR,True,78,25,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,98bc465a8ef6b3365be10849756714167bf7a368,Include the namespace-separating solidus in NamespaceableName.
245,https://api.github.com/repos/mozilla/mentat/pulls/713,713,Include namespace-separating solidus in NamespaceableName; improve type handling around ground,,rnewman,91722,2018-05-27T20:01:41Z,COLLABORATOR,True,78,25,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,afcc5f0100d4523fcf805c55cb27d1f0bd27a284,Use type annotations when deciding how to process ambiguous ground input.
246,https://api.github.com/repos/mozilla/mentat/pulls/713,713,Include namespace-separating solidus in NamespaceableName; improve type handling around ground,,rnewman,91722,2018-05-27T20:01:41Z,COLLABORATOR,True,78,25,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,23a616db2272c81290c032f90bb87b73fbeaddc5,Include simple patterns in the type extraction phase of pattern application. (#705)
247,https://api.github.com/repos/mozilla/mentat/pulls/713,713,Include namespace-separating solidus in NamespaceableName; improve type handling around ground,,rnewman,91722,2018-05-27T20:01:41Z,COLLABORATOR,True,78,25,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a0e99b131d785994638b214ac5721db8f2aa9ae5,Review comment.
248,https://api.github.com/repos/mozilla/mentat/pulls/713,713,Include namespace-separating solidus in NamespaceableName; improve type handling around ground,,rnewman,91722,2018-05-27T20:01:41Z,COLLABORATOR,True,78,25,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,385cda1cb2795015852a87a48c5a33cc9d4da94e,Add a test.
249,https://api.github.com/repos/mozilla/mentat/pulls/709,709,Update README.md,Grammar -- the subjunctive is appropriate here.,cdbfoster,1524288,2018-05-23T18:50:56Z,CONTRIBUTOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f7ff2d9af552e6a007f3b66a2fce52c052140a4,"Update README.md

Grammar -- the subjunctive is appropriate here."
250,https://api.github.com/repos/mozilla/mentat/pulls/701,701,Rebased #691,Rebasing #691 to squash and land.,rnewman,91722,2018-05-15T07:41:50Z,COLLABORATOR,True,203,133,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,359dc728150af11cdc897c11089f3950ac1dd9ef,Part 1: Add AttributePlace.
251,https://api.github.com/repos/mozilla/mentat/pulls/701,701,Rebased #691,Rebasing #691 to squash and land.,rnewman,91722,2018-05-15T07:41:50Z,COLLABORATOR,True,203,133,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2c91ea0e2f54ebb1dfb9dfa78b9ae1ae96351c7d,"Part 2: Name other places EntityPlace and ValuePlace.

Now we're consistent and closer to self-documenting.  Both matter more
as we expose `Entity` as the thing to build for programmatic usage."
252,https://api.github.com/repos/mozilla/mentat/pulls/701,701,Rebased #691,Rebasing #691 to squash and land.,rnewman,91722,2018-05-15T07:41:50Z,COLLABORATOR,True,203,133,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d9735f44577c6ff367808eb9ea584462c43f0589,"Part 3: Parameterize Entity by value type.

This isn't quite right, because after parsing, we shouldn't care
about` `edn::ValueAndSpan`, we should care only about edn::Value.
However, I think we can drop `ValueAndSpan` entirely if we just use
`rust-peg` (and its simpler error messages) rather than a mix of
`rust-peg` and `combine`.

In any case, this paves the way to transacting `Entity<TypedValue>`,
which is a nice step towards building general entities."
253,https://api.github.com/repos/mozilla/mentat/pulls/701,701,Rebased #691,Rebasing #691 to squash and land.,rnewman,91722,2018-05-15T07:41:50Z,COLLABORATOR,True,203,133,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,371a3d58a5d26ed8377c18f4280746333ca9905f,"Part 4: Allow Ident and TempId in ValuePlace.

The parser will never produce these, since determining whether an
integer/keyword or string is an ident or a tempid, respectively, in
the value place requires the schema.

But a builder that produces `Entity` instances directly will want to
produce these."
254,https://api.github.com/repos/mozilla/mentat/pulls/694,694,Allow pull aliases to be non-namespaced.,,rnewman,91722,2018-05-14T08:42:30Z,COLLABORATOR,True,97,23,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bf8f8c995448432bd89560d7b8be35ee4cc7eeb3,Allow pull aliases to be non-namespaced.
255,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f8447738c06e6385fefac89c282cacdc416eb0d,Pre: Remove ancient Clojure code comments.
256,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c16cb423e488ad58290f954da3c632bb7c0932ee,"Add type checking and constraint checking to the transactor. (#663, #532, #679)

This should address #663, by re-inserting type checking in the
transactor stack after the entry point used by the term builder.

Before this commit, we were using an SQLite UNIQUE index to assert
that no `[e a]` pair, with `a` a cardinality one attribute, was
asserted more than once.  However, that's not in line with Datomic,
which treats transaction inputs as a set and allows a single datom
like `[e a v]` to appear multiple times.  It's both awkward and not
particularly efficient to look for _distinct_ repetitions in SQL, so
we accept some runtime cost in order to check for repetitions in the
transactor.  This will allow us to address #532, which is really about
whether we treat inputs as sets.  A side benefit is that we can
provide more helpful error messages when the transactor does detect
that the input truly violates the cardinality constraints of the
schema.

This commit builds a trie while error checking and collecting final
terms, which should be fairly efficient.  It also allows a simpler
expression of input-provided :db/txInstant datoms, which in turn
uncovered a small issue with the transaction watcher, where-by the
watcher would not see non-input-provided :db/txInstant datoms.

This transition to Datomic-like input-as-set semantics allows us to
address #532.  Previously, two tempids that upserted to the same entid
would produce duplicate datoms, and that would have been rejected by
the transactor -- correctly, since we did not allow duplicate datoms
under the input-as-list semantics.  With input-as-set semantics,
duplicate datoms are allowed; and that means that we must allow
tempids to be equivalent, i.e., to resolve to the same tempid.

To achieve this, we:
- index the set of tempids
- identify tempid indices that share an upsert
- map tempids to a dense set of contiguous integer labels

We use the well-known union-find algorithm, as implemented by
petgraph, to efficiently manage the set of equivalent tempids.

Along the way, I've fixed and added tests for two small errors in the
transactor.  First, don't drop datoms resolved by upsert (#679).
Second, ensure that complex upserts are allocated.

I don't know quite what happened here.  The Clojure implementation
correctly kept complex upserts that hadn't resolved as complex
upserts (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L436)
and then allocated complex upserts if they didn't resolve (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L509).

Based on the code comments, I think the Rust implementation must have
incorrectly tried to optimize by handling all complex upserts in at
most a single generation of evolution, and that's just not correct.
We're effectively implementing a topological sort, using very specific
domain knowledge, and its not true that a node in a topological sort
can be considered only once!"
257,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae64cab41ce0f0209882c617fd3405c27659dcbc,Part 1: Add AttributePlace.
258,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cd57fc3ed4d68cd3d2d097b6edeed14c07486c5c,"Part 2: Name other places EntityPlace and ValuePlace.

Now we're consistent and closer to self-documenting.  Both matter more
as we expose `Entity` as the thing to build for programmatic usage."
259,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dceeebac70c8e6d9404d77f22422971d90343fd1,"Part 3: Parameterize Entity by value type.

This isn't quite right, because after parsing, we shouldn't care
about` `edn::ValueAndSpan`, we should care only about edn::Value.
However, I think we can drop `ValueAndSpan` entirely if we just use
`rust-peg` (and its simpler error messages) rather than a mix of
`rust-peg` and `combine`.

In any case, this paves the way to transacting `Entity<TypedValue>`,
which is a nice step towards building general entities."
260,https://api.github.com/repos/mozilla/mentat/pulls/691,691,Generalize Entity by value type.,"@rnewman, @fluffyemily -- whoever gets to this first.  Pretty mechanical stuff.",ncalexan,1097182,2018-05-11T23:00:25Z,MEMBER,False,783,317,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9916b80290fef44b5c9803640841b83478198c85,"Part 4: Allow Ident and TempId in ValuePlace.

The parser will never produce these, since determining whether an
integer/keyword or string is an ident or a tempid, respectively, in
the value place requires the schema.

But a builder that produces `Entity` instances directly will want to
produce these."
261,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7170f267c8f851aecae224f74d6e97277cb59a8c,"Add simple transact string to FFI.
Rename ExternTxReport and ExternTxReportList to distinguish between TxReport from transact and the results of a transaction observer firing.

Move to use c_longlong instead of i64 and time_t as Android and iOS provide different sizes.

Use to_string instead of description for errors as they are more descriptive.

Pass UUID values as bytes rather than strings

Remove unused FFI functions (functionality has been removed)

Handle optional results better - return null if optional is None

Return boolean as integer value rather than bool as Swift can't handle them.

When returning values from an iterator, make sure we don't release the value at the end of the Rust function leaving a dangling pointer."
262,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4247b4345f646e9e0009df663d9e515b4f0e3b0,Update rustc version to get bitcode builds
263,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,80afd35848480637346205dcbdfe829f117802dd,Add iOS framework
264,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4bd6efa7cd5a4bd207191664dc7cf123e0766b1e,Add wrapper classes for Rust FFI
265,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3e69b389130b8f99390cb9e17d72e18a9c0961b5,Add tests for query and simple transact FFI
266,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9f6585277e8161a7b47ce2d3b5167a0577b1a886,Add base empty Android framework
267,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fcb1619022fc6c948b9ca483f498995ee986eaf6,Add build script for Android cross compilation
268,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,74d63211f9e963335d8a95bea96339ff87c913ff,Swift doc typo fixes
269,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ecb92281038f93e743d356459a14b73a2510d2ee,Add wrapper classes and documentation for FFI functions
270,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,34e2f6b35afe10e90ee33fac59310a411797fd32,Add tests for Android library
271,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8e12efa2e246cc28cc5846843fe218fccbeb0158,update gitignore
272,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,129bc2e4ce4e0aedc47e68ed327899fbe32ab54e,"don't use as many strings when panicking on unwrapping typed values

link to fixtures directory rather than copying fixtures files

Remove logs, boilerplate comments and unused code."
273,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04dec82da64df5a6623879891dfa7133798f386b,Add documentation for Rust FFI and Swift C Header
274,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a3d103380a839aafb52007319a7f52869be6ae3,Replace references to sql with query
275,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2bedf1a584e5b6a2c83dfa1f175bc84316cffbae,Address documentation nits.
276,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d9f31a931b6aa637b50658da7dbad4175eb6919c,Update consuming FFI function names to better reflect consuming nature (`as` -> `to`).
277,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9af0ee8b03fa7d8ac97f3b3105e5b561d04ad7c8,Return `&str` from `c_char_to_string` rather than `String` to avoid unnecessary allocations.
278,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4a7af16e8b84cfc561eccd3a3d3a8527e4ffd0d,Crash on null pointer inside catchall `destroy` function.
279,https://api.github.com/repos/mozilla/mentat/pulls/690,690,Android sdk framework (rebased),"@fluffyemily I tried to rebase this, getting ready to land, but there are non-trivial changes from f979044ba1dacf3d564fa15a3040d0995d34932a that I can't quite think through yet.  Can you take a look, and either rebase yourself, or start from here?  Thanks!",ncalexan,1097182,2018-05-11T21:38:27Z,MEMBER,False,6502,255,75,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0a3c68ab70c1ceaf2c42fcdf81c555614580fe92,Try to build.
280,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cc59804a98d1bce758a197e46d2757263346cbae,Make properties on NamespacedKeyword/NamespacedSymbol private
281,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,399cb5d050fc4c9bdf56110d35e04d1dbe2fa53e,Use only a single String for NamespacedKeyword/NamespacedSymbol
282,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,54d4cc650ee14d008151f77cec93e69515b14763,Review comments.
283,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4fa08648ee67c395f4c6eadf4114446a60f4fe7c,"Remove unsafe code in namespaced_name.

Benchmarking shows approximately zero change."
284,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9ea2a42167e192cf2f23c5bfc63f7c30136f0ef2,Allow the types of ns and name to differ when constructing a NamespacedName.
285,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,16b374de877810b3237772a6d8bc45e1be74ac2c,Use expect not unwrap.
286,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1a6d995a2cd1d8885fb4b269f153375a167839d,Make symbol namespaces optional.
287,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,02ec0606045085f4c57c25f9a93185fa24752ffb,"Normalize names of keyword/symbol constructors.

This will make the subsequent refactor much less painful."
288,https://api.github.com/repos/mozilla/mentat/pulls/689,689,Combine NamespacedKeyword and Keyword,"This incorporates @thomcc's changes, my review comments, some other improvements from me, and then:

- Mechanically rename constructors for `PlainSymbol`, `Keyword`, and `NamespacedKeyword` to not collide.
- Merge the latter two, which is mostly mechanical with some manual adding of `is_namespaced()` checks.

Tests all pass.",rnewman,91722,2018-05-11T13:25:19Z,COLLABORATOR,True,1000,601,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,19136f7b991198e7f66c19537e94209c040f6675,Merge Keyword and NamespacedKeyword.
289,https://api.github.com/repos/mozilla/mentat/pulls/688,688,[query] Handle SQL NULL for aggregates over 0 rows. (#684),,ncalexan,1097182,2018-05-10T21:26:09Z,MEMBER,True,283,14,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,71654cb8cb48aa7e22f0920c672907b53e6f236c,"[query] Handle SQL NULL for aggregates over 0 rows. (#684)

I need to put these comments inline, but this approach is very simple
and clearly addresses the problem.  Using HAVING requires thinking
through some non-trivial GROUP BY implications that I don't want to
deal with right now."
290,https://api.github.com/repos/mozilla/mentat/pulls/687,687,[edn] Round-trip instants. (#686),"First, the parser had a small grouping bug where-by it wouldn't parse
Z as timezone correctly.  Second, we weren't printing instants in the format
that we parse.",ncalexan,1097182,2018-05-10T18:22:35Z,MEMBER,True,31,4,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c35513bd8fdbc28f484aa5e9e15bb1c15a58129d,"[edn] Round-trip instants. (#686)

First, the parser had a small grouping bug where-by it wouldn't parse
Z as timezone correctly.  Second, we weren't printing instants in the format
that we parse."
291,https://api.github.com/repos/mozilla/mentat/pulls/685,685,Cardinality constraints with a trie,"This obsoletes #673.  @rnewman, I've left that one in place for you to compare -- sorry for leaving some comments behind.

I think you'll find it easier to review without the history, tbh.  I didn't change things in the SQLite schema for simplicity; we can address a more useful index on `transactions` later, and we can make the indices on the temporary tables only apply to the debug configuration later too.

Give it a whirl!",ncalexan,1097182,2018-05-09T23:31:53Z,MEMBER,True,613,186,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4cfa86c79216619d6fbd9f3a43ce45d869f8a9ef,Pre: Remove ancient Clojure code comments.
292,https://api.github.com/repos/mozilla/mentat/pulls/685,685,Cardinality constraints with a trie,"This obsoletes #673.  @rnewman, I've left that one in place for you to compare -- sorry for leaving some comments behind.

I think you'll find it easier to review without the history, tbh.  I didn't change things in the SQLite schema for simplicity; we can address a more useful index on `transactions` later, and we can make the indices on the temporary tables only apply to the debug configuration later too.

Give it a whirl!",ncalexan,1097182,2018-05-09T23:31:53Z,MEMBER,True,613,186,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,96938206c6d0d61b14170bbeaf4ed003331e6579,"Add type checking and constraint checking to the transactor. (#663, #532, #679)

This should address #663, by re-inserting type checking in the
transactor stack after the entry point used by the term builder.

Before this commit, we were using an SQLite UNIQUE index to assert
that no `[e a]` pair, with `a` a cardinality one attribute, was
asserted more than once.  However, that's not in line with Datomic,
which treats transaction inputs as a set and allows a single datom
like `[e a v]` to appear multiple times.  It's both awkward and not
particularly efficient to look for _distinct_ repetitions in SQL, so
we accept some runtime cost in order to check for repetitions in the
transactor.  This will allow us to address #532, which is really about
whether we treat inputs as sets.  A side benefit is that we can
provide more helpful error messages when the transactor does detect
that the input truly violates the cardinality constraints of the
schema.

This commit builds a trie while error checking and collecting final
terms, which should be fairly efficient.  It also allows a simpler
expression of input-provided :db/txInstant datoms, which in turn
uncovered a small issue with the transaction watcher, where-by the
watcher would not see non-input-provided :db/txInstant datoms.

This transition to Datomic-like input-as-set semantics allows us to
address #532.  Previously, two tempids that upserted to the same entid
would produce duplicate datoms, and that would have been rejected by
the transactor -- correctly, since we did not allow duplicate datoms
under the input-as-list semantics.  With input-as-set semantics,
duplicate datoms are allowed; and that means that we must allow
tempids to be equivalent, i.e., to resolve to the same tempid.

To achieve this, we:
- index the set of tempids
- identify tempid indices that share an upsert
- map tempids to a dense set of contiguous integer labels

We use the well-known union-find algorithm, as implemented by
petgraph, to efficiently manage the set of equivalent tempids.

Along the way, I've fixed and added tests for two small errors in the
transactor.  First, don't drop datoms resolved by upsert (#679).
Second, ensure that complex upserts are allocated.

I don't know quite what happened here.  The Clojure implementation
correctly kept complex upserts that hadn't resolved as complex
upserts (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L436)
and then allocated complex upserts if they didn't resolve (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L509).

Based on the code comments, I think the Rust implementation must have
incorrectly tried to optimize by handling all complex upserts in at
most a single generation of evolution, and that's just not correct.
We're effectively implementing a topological sort, using very specific
domain knowledge, and its not true that a node in a topological sort
can be considered only once!"
293,https://api.github.com/repos/mozilla/mentat/pulls/683,683,WIP: nested pull,WIP.,rnewman,91722,2018-05-08T15:07:23Z,COLLABORATOR,False,198,47,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4665eaa4dda528e45bcb828cbf99aca31bc2199d,Parse and handle aliased pull attributes.
294,https://api.github.com/repos/mozilla/mentat/pulls/683,683,WIP: nested pull,WIP.,rnewman,91722,2018-05-08T15:07:23Z,COLLABORATOR,False,198,47,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a114bda46bf7c05fb420e985df69973135876f58,Allow :db/id to mentioned as a pull attribute.
295,https://api.github.com/repos/mozilla/mentat/pulls/683,683,WIP: nested pull,WIP.,rnewman,91722,2018-05-08T15:07:23Z,COLLABORATOR,False,198,47,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,546e142722042d0748d2a873fc509ca890891a3e,Clean up comment.
296,https://api.github.com/repos/mozilla/mentat/pulls/683,683,WIP: nested pull,WIP.,rnewman,91722,2018-05-08T15:07:23Z,COLLABORATOR,False,198,47,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dc608319b0137e7dae45db485888666904c081b2,Remove unused function.
297,https://api.github.com/repos/mozilla/mentat/pulls/683,683,WIP: nested pull,WIP.,rnewman,91722,2018-05-08T15:07:23Z,COLLABORATOR,False,198,47,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b12c41095bd31de83b8fe03dddedac507fd6b35,WIP: nested pull.
298,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae9266f42d29e7fee3e7d284e870ef53014d3566,Parse and handle aliased pull attributes.
299,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fc3612c27933a9545554a63edff525b127261578,Allow :db/id to be mentioned as a pull attribute.
300,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9457458d2f55bcdba6cfda9ec29563e5256a3944,Clean up comment.
301,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,030d5dc78305f824491561838d39065e7950069b,Remove unused function.
302,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,244312a2405ff8c11ad71b5e4b0cef9ed14c6746,Review comments.
303,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1f1466827469f81bbc963a0f082d4a0dbe1ff72,Binding helper.
304,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5817633635c74ad5d251c69c0c71222b759c0f2b,Add a test for pulling FTS.
305,https://api.github.com/repos/mozilla/mentat/pulls/682,682,Pull improvements,"This PR allows aliasing of pull expressions and the use of `:db/id` for the entity ID itself:

```edn
(pull ?person [
    [:db/id :as :person/id]
    [:person/name :as :person/fullName]])
```

I wanted to flatten `NamespacedKeyword`, but soon realized that #648 still hasn't been wrapped up and landed, so I'll do that tomorrow. I plan to merge `NamespacedKeyword` and `Keyword`, with the only difference being a non-zero division offset and a different result from a predicate; we can preserve the restriction that all attribute names are namespaced while normalizing the API. That will make aliasing more useful.",rnewman,91722,2018-05-08T15:06:46Z,COLLABORATOR,True,170,47,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e4b9b0c2ba6658d7aa1e81f3c7999d7f656b1c32,Fix.
306,https://api.github.com/repos/mozilla/mentat/pulls/681,681,Parse transactions with rust-peg rather than combine,"OK, I'm done with `combine` -- it's just too much work to evolve things forward.  See the notes in the commit message for https://github.com/mozilla/mentat/commit/fad0b6deab9a419abe22c7f7ec6577d98dd90d3e.  I'm happy to add more details if needed.

This builds on top of my other work in progress (#673), so this review is for 5e11c0a..2e9919c only.",ncalexan,1097182,2018-05-07T22:45:42Z,MEMBER,True,283,645,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c4af46315511fff72620c64ecb68185aea1480d,"Add TransactableValue abstracting value places that can be transacted.

This is a stepping stone to transacting entities that are not based on
`edn::ValueAndSpan`.  We need to turn some value places (general) into
entity places (restricted), and those restrictions are captured in
tx-parser right now.  But for `TypedValue` value places, those
restrictions are encoded in the type itself.  This lays the track to
accept other value types in value places, which is good for
programmatic builder interfaces."
307,https://api.github.com/repos/mozilla/mentat/pulls/681,681,Parse transactions with rust-peg rather than combine,"OK, I'm done with `combine` -- it's just too much work to evolve things forward.  See the notes in the commit message for https://github.com/mozilla/mentat/commit/fad0b6deab9a419abe22c7f7ec6577d98dd90d3e.  I'm happy to add more details if needed.

This builds on top of my other work in progress (#673), so this review is for 5e11c0a..2e9919c only.",ncalexan,1097182,2018-05-07T22:45:42Z,MEMBER,True,283,645,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e437944d9491e379337382772d1ad5e6aea7e2f1,"Pre: Don't use tx-parser for destructuring map notation.

This was always a choice, but we've outgrown it: now we want to accept
value types that don't come from EDN and/or tx-parser."
308,https://api.github.com/repos/mozilla/mentat/pulls/681,681,Parse transactions with rust-peg rather than combine,"OK, I'm done with `combine` -- it's just too much work to evolve things forward.  See the notes in the commit message for https://github.com/mozilla/mentat/commit/fad0b6deab9a419abe22c7f7ec6577d98dd90d3e.  I'm happy to add more details if needed.

This builds on top of my other work in progress (#673), so this review is for 5e11c0a..2e9919c only.",ncalexan,1097182,2018-05-07T22:45:42Z,MEMBER,True,283,645,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cbffe5e54509272c67a22418d068f3d19c8c8a6a,"Use rust-peg for tx parsing.

There are few reasons to do this:

- it's difficult to add symbol interning to combine-based parsers like
  tx-parser -- literally every type changes to reflect the interner,
  and that means every convenience macro we've built needs to chagne.
  It's trivial to add interning to rust-peg-based parsers.

- combine has rolled forward to 3.2, and I spent a similar amount of
  time investigating how to upgrade tx-parser (to take advantage of
  the new parser! macros in combine that I think are necessary for
  adapting to changing types) as I did just converting to rust-peg.

- it's easy to improve the error messages in rust-peg, where-as I have
  tried twice to improve the nested error messages in combine and am
  stumped.

- it's roughly 4x faster to parse strings directly as opposed to
  edn::ValueAndSpan, and it'll be even better when we intern directly."
309,https://api.github.com/repos/mozilla/mentat/pulls/681,681,Parse transactions with rust-peg rather than combine,"OK, I'm done with `combine` -- it's just too much work to evolve things forward.  See the notes in the commit message for https://github.com/mozilla/mentat/commit/fad0b6deab9a419abe22c7f7ec6577d98dd90d3e.  I'm happy to add more details if needed.

This builds on top of my other work in progress (#673), so this review is for 5e11c0a..2e9919c only.",ncalexan,1097182,2018-05-07T22:45:42Z,MEMBER,True,283,645,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a8c9d90c23b3f6276ee8630a6aa17bc75a97ce2,Post: Remove tx-parser crate entirely.
310,https://api.github.com/repos/mozilla/mentat/pulls/681,681,Parse transactions with rust-peg rather than combine,"OK, I'm done with `combine` -- it's just too much work to evolve things forward.  See the notes in the commit message for https://github.com/mozilla/mentat/commit/fad0b6deab9a419abe22c7f7ec6577d98dd90d3e.  I'm happy to add more details if needed.

This builds on top of my other work in progress (#673), so this review is for 5e11c0a..2e9919c only.",ncalexan,1097182,2018-05-07T22:45:42Z,MEMBER,True,283,645,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9a4bd0de4ff2d7dcde1a2cdc9bd03e779e8b7fb5,Use rust-peg for tx parsing. r=rnewman
311,https://api.github.com/repos/mozilla/mentat/pulls/678,678,Flip ValueRc to Arc in order to allow TypedValue in errors. (#677),"@mmacedoeu did a good deal of work to show that Arc instead of Rc
wasn't too difficult in #656, and @rnewman pushed the refactoring
across the line in #659. However, we didn't flip the switch at that
time. For #673, we'd like to include TypedValue instances in errors,
and with error-chain (and failure) error types need to be 'Sync +
'Send, so we need Arc.

This builds on #659 and should also finish #656.",ncalexan,1097182,2018-05-03T23:28:03Z,MEMBER,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,42d7902e3f2c8e2252eb25e48a041bd27d15dda5,"Flip ValueRc to Arc in order to allow TypedValue in errors. (#677)

@mmacedoeu did a good deal of work to show that Arc instead of Rc
wasn't too difficult in #656, and @rnewman pushed the refactoring
across the line in #659. However, we didn't flip the switch at that
time. For #673, we'd like to include TypedValue instances in errors,
and with error-chain (and failure) error types need to be 'Sync +
'Send, so we need Arc.

This builds on #659 and should also finish #656."
312,https://api.github.com/repos/mozilla/mentat/pulls/675,675,Compile with Rust 1.25.,"The only choice involved in this commit is that of replacing the
anonymous lifetime '_ with a named lifetime for the cache; since we're
accepting a Known, which includes the cache in question, I think it's
clear that we expect the function to apply to any given cache
lifetime.",ncalexan,1097182,2018-05-03T22:08:14Z,MEMBER,True,18,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b723a4a2eb709f23ae1f2d293e47ea97c148597b,"Compile with Rust 1.25.

The only choice involved in this commit is that of replacing the
anonymous lifetime '_ with a named lifetime for the cache; since we're
accepting a Known, which includes the cache in question, I think it's
clear that we expect the function to apply to any given cache
lifetime."
313,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,05f65f122024c598a42ae4959f1092f4dcdc00d9,Pre: Remove ancient Clojure code comments.
314,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c236b8ea03a9818b2111fa3053162e7523521c34,"Part 2: Add type checking later in the transactor stack.

This should address #663, by re-inserting type checking in the
transactor stack after the entry point used by the term builder."
315,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb6140981309080eb07ad2ad1c439bc71a45960a,"Part 3: Add cardinality checking to the transactor stack.

Before this commit, we were using an SQLite UNIQUE index to assert
that no `[e a]` pair, with `a` a cardinality one attribute, was
asserted more than once.  However, that's not in line with Datomic,
which treats transaction inputs as a set and allows a single datom
like `[e a v]` to appear multiple times.  It's both awkward and not
particularly efficient to look for _distinct_ repetitions in SQL, so
we accept some runtime cost in order to check for repetitions in the
transactor.  This will allow us to address #532, which is really about
whether we treat inputs as sets.  A side benefit is that we can
provide more helpful error messages when the transactor does detect
that the input truly violates the cardinality constraints of the
schema."
316,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,675989dc00bb6311b78c285203613d798e929074,"Part 4: Support tempid equivalence.

This completes the transition to Datomic-like input-as-set semantics,
which allows us to address #532.  Previously, two tempids that
upserted to the same entid would produce duplicate datoms, and that
would have been rejected by the transactor -- correctly, since we did
not allow duplicate datoms under the input-as-list semantics.  With
input-as-set semantics, duplicate datoms are allowed; and that means
that we must allow tempids to be equivalent, i.e., to resolve to the
same tempid.

To achieve this, we:
- index the set of tempids
- identify tempid indices that share an upsert
- map tempids to a dense set of contiguous integer labels

We use the well-known union-find algorithm, as implemented by
petgraph, to efficiently manage the set of equivalent tempids."
317,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f619e1c79295fd41c2a413a2e9a1a46ed0853549,[tx] Don't drop datoms resolved by upsert. (#679)
318,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2266283e7d69741430a95f00c17a6d6dba1c5670,"[tx] Ensure that complex upserts are allocated.

I don't know quite what happened here.  The Clojure implementation
correctly kept complex upserts that hadn't resolved as complex
upserts (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L436)
and then allocated complex upserts if they didn't resolve (see
https://github.com/mozilla/mentat/blob/9a9dfb502acf5e4cdb1059d4aac831d7603063c8/src/common/datomish/transact.cljc#L509).

Based on the code comments, I think the Rust implementation must have
incorrectly tried to optimize by handling all complex upserts in at
most a single generation of evolution, and that's just not correct.
We're effectively implementing a topological sort, using very specific
domain knowledge, and its not true that a node in a topological sort
can be considered only once!"
319,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d584daff81471f9acfc59aa58c4923a817eca3d7,"Review comment: build a trie while error checking and collecting final terms.

This should be more efficient.  It also allows a simpler expression of
input-provided :db/txInstant datoms, which in turn uncovered a small
issue with the transaction watcher, where-by the watcher would not see
non-input-provided :db/txInstant datoms."
320,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,66f3d886d5ff0bf3f889348b1adb7f82f82ff076,Review nits.
321,https://api.github.com/repos/mozilla/mentat/pulls/673,673,Improve type checking and constraint checking; treat input as set.,"This addresses #532 and should address #663.  It's ready for initial review but it's not quite there yet -- part 2 needs additional tests to verify that it really does address #663, and part 3 needs a list of routine tests so that issues are found in a dedicated portion of the test suite, and so that we verify that the error output is as desired.",ncalexan,1097182,2018-05-01T23:24:09Z,MEMBER,False,580,184,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,854cbf9f09f8d78de63d49c8a2a2c0b67f6b45d9,More significant review reversions.
322,https://api.github.com/repos/mozilla/mentat/pulls/667,667,Expose Caching over FFI,"This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. 

The `CacheDirection` enum is replicated on each of the native sides to provide a usable interface, but the FFI layer is more explicit to avoid easy to make errors.

https://github.com/mozilla/mentat/issues/616",fluffyemily,12613048,2018-04-27T10:29:43Z,COLLABORATOR,True,301,6,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dddcd1c17f3c57399a08441533bde8f8e34e1ca2,"Expose `cache` over the FFI.

This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. The original implementation exposed the `CacheDirection` enum over FFI and it made mistakes very easy to make. This is more explicit and therefore less prone to error."
323,https://api.github.com/repos/mozilla/mentat/pulls/667,667,Expose Caching over FFI,"This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. 

The `CacheDirection` enum is replicated on each of the native sides to provide a usable interface, but the FFI layer is more explicit to avoid easy to make errors.

https://github.com/mozilla/mentat/issues/616",fluffyemily,12613048,2018-04-27T10:29:43Z,COLLABORATOR,True,301,6,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,312d3bf4e00a4a81d21dd71f2eb7d2c337449aba,"Wrap caching FFI functions in Swift library.

`CacheDirection` enum is used only on the Swift side to provide a usable interface. FFI calls are more explicit.

Tests ensure that a cached query is faster than the uncached one."
324,https://api.github.com/repos/mozilla/mentat/pulls/667,667,Expose Caching over FFI,"This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. 

The `CacheDirection` enum is replicated on each of the native sides to provide a usable interface, but the FFI layer is more explicit to avoid easy to make errors.

https://github.com/mozilla/mentat/issues/616",fluffyemily,12613048,2018-04-27T10:29:43Z,COLLABORATOR,True,301,6,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,133cad35b611ef6a6f293d570f56e22aa479f76d,"Wrap caching FFI functions in Android Java library.

`CacheDirection` enum is used only on the Android side to provide a usable interface. FFI calls are more explicit.

Tests ensure that a cached query is faster than the uncached one."
325,https://api.github.com/repos/mozilla/mentat/pulls/667,667,Expose Caching over FFI,"This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. 

The `CacheDirection` enum is replicated on each of the native sides to provide a usable interface, but the FFI layer is more explicit to avoid easy to make errors.

https://github.com/mozilla/mentat/issues/616",fluffyemily,12613048,2018-04-27T10:29:43Z,COLLABORATOR,True,301,6,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bb250a5798bd54f56a5b40529c1c19cd99416a47,Address review comments @nalexander
326,https://api.github.com/repos/mozilla/mentat/pulls/665,665,(tx) Replace :db/tx with (current-tx) transaction function and broade…,"…n support. (#664)

:db/tx (and Datomic's version, :datomic/tx) suffer from the same
ambiguities that [a v] lookup references do -- determining the type of
the result is context sensitive.  (In this case, is :db/tx a reference
to the current transaction ID, or is it a valid keyword?)  This commit
addresses the ambiguity by introducing a notion of a transaction
functions, and provides a little scaffolding for adding more (should
the need arise).  I left the scaffolding in place rather than handling
just (current-tx) because I started trying to
implement (current-txInstant) as well, which is more difficult -- see
the comments.

It's worth noting that this approach generalizes more or less directly
to ?input variables, since those can be eagerly bound like the
implemented transaction function (current-tx).",ncalexan,1097182,2018-04-26T22:57:41Z,MEMBER,True,100,27,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32ed56685e899ecb267181f88a5f1e302059720a,"(tx) Replace :db/tx with (transaction-tx) transaction function and broaden support. (#664)

:db/tx (and Datomic's version, :datomic/tx) suffer from the same
ambiguities that [a v] lookup references do -- determining the type of
the result is context sensitive.  (In this case, is :db/tx a reference
to the current transaction ID, or is it a valid keyword?)  This commit
addresses the ambiguity by introducing a notion of a transaction
functions, and provides a little scaffolding for adding more (should
the need arise).  I left the scaffolding in place rather than handling
just (transaction-tx) because I started trying to
implement (transaction-instant) as well, which is more difficult --
see the comments.

It's worth noting that this approach generalizes more or less directly
to ?input variables, since those can be eagerly bound like the
implemented transaction function (transaction-tx)."
327,https://api.github.com/repos/mozilla/mentat/pulls/665,665,(tx) Replace :db/tx with (current-tx) transaction function and broade…,"…n support. (#664)

:db/tx (and Datomic's version, :datomic/tx) suffer from the same
ambiguities that [a v] lookup references do -- determining the type of
the result is context sensitive.  (In this case, is :db/tx a reference
to the current transaction ID, or is it a valid keyword?)  This commit
addresses the ambiguity by introducing a notion of a transaction
functions, and provides a little scaffolding for adding more (should
the need arise).  I left the scaffolding in place rather than handling
just (current-tx) because I started trying to
implement (current-txInstant) as well, which is more difficult -- see
the comments.

It's worth noting that this approach generalizes more or less directly
to ?input variables, since those can be eagerly bound like the
implemented transaction function (current-tx).",ncalexan,1097182,2018-04-26T22:57:41Z,MEMBER,True,100,27,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4a635f4e7049709346d618d0b4baefc3a0e9b74,(tx) Replace :db/tx with (current-tx) transaction function and broaden support. (#664) r=rnewman
328,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d8bde6ed9794a889b084a4ab582ed0878930baf3,"Expose `InProgress`, `InProgressBuilder` and `EntityBuilder` over the FFI.

There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`."
329,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,386580398123e08dd0eb2c2d501c86b9027c576d,Implement InProgress transactions and InProgress and Entity builders on iOS
330,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ffff8df490e09085e434468d90693b517742259c,"Implement InProgress transactions and InProgress and Entity builders on Android.

Rename some of the functions in TypedValue, TupleResult and QueryBuilder to make them more Javay and less Swifty"
331,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,748acfd48cd3613a5e16a36dba82a2bbaa6e5ebd,"Expose `cache` over the FFI.

This exposes an FFI function for each direction of caching, `Forward`, `Reverse` and `Both`. This is to make is as clear as possible to consumers which direction they are caching their attributes in. The original implementation exposed the `CacheDirection` enum over FFI and it made mistakes very easy to make. This is more explicit and therefore less prone to error."
332,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1aa7ec2ceca29543c980e1596f1f5eadcd491271,"Wrap caching FFI functions in Swift library.

`CacheDirection` enum is used only on the Swift side to provide a usable interface. FFI calls are more explicit.

Tests ensure that a cached query is faster than the uncached one."
333,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5e6bb181cef81c99706bbfa0444a04518aabdb32,"Wrap caching FFI functions in Android Java library.

`CacheDirection` enum is used only on the Android side to provide a usable interface. FFI calls are more explicit.

Tests ensure that a cached query is faster than the uncached one."
334,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fa5f000b1dc15e5f0c80e6dce5a0a6748c8c3964,Address review comments @nalexander
335,https://api.github.com/repos/mozilla/mentat/pulls/662,662,FFI Entity Building and Transactions,"There are two ways to create each builder, directly from a `Store` or from an `InProgress`. Creating from `Store` will perform two actions, creating a new `InProgress` and then returning a builder from that `InProgress`. In the case of `store_entity_builder_with_entid` and `store_entity_builder_from_tempid`, the function goes a step further and calls `describe` or `describe_tempid` from the created `InProgressBuilder` and returning the `EntityBuilder` that results. These two functions are replicated on `InProgress`. This has been done to reduce the overhead of objects being passed over the FFI boundary.

The decision to do this enables us to go from something like

```
in_progress  = store_begin_transaction(store);
builder = in_progress_builder(in_progress);
entity_builder = in_progress_builder_describe(builder, entid);
```
to
```
entity_builder = store_entity_builder_from_entid(store);
```

There is an `add_*` and `retract_*` function specified for each `TypedValue` type for both `InProgressBuilder` and `EntityBuilder`.

To enable `transact` on `EntityBuilder` and `InProgressBuilder`, a new `repr(C)` struct has been created that contains a pointer to an `InProgress` and a pointer to a `Result<TxReport>` to allow passing the tuple result returned from `transact` on those types over the FFI.

Commit is possible from both builders and `InProgress`.",fluffyemily,12613048,2018-04-26T16:35:21Z,COLLABORATOR,True,4374,144,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9e853e90222c1a1049056fa8fabba99aa8b7f32d,Address review comments @nalexander
336,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4a42d2ca2c8cf39a8a0e9bda11f8a704ee394273,"Pre: eliminate some occurrences of Rc, largely through the magic of Into."
337,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9292867dc9dcf74b964460b0daf1d6aa4b34b04d,Pre: introduce FromRc to convert between refcounted types.
338,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1918388ddffefd7f44df7e0bcd7aa8f0ded8a452,Introduce ValueRc as an abstraction over Rc/Arc choice.
339,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5440efa4bffc1f949b8f1f41dff2df7974a4517d,Move Cloned to core.
340,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a6ec3f227230dff557959437b78e5606bcfc421c,Move CString-creation methods to TypedValue.
341,https://api.github.com/repos/mozilla/mentat/pulls/659,659,"Arc, refactored","Informally I don't see significant performance differences with this. More timing to do; you can switch between `Rc` and `Arc` by switching the commenting for a few lines in `types.rs`. 

This PR is like #656 but reproduced independently on top of #658. There are a few changes that should go into #658, and not all the code builds yet, but `cargo test -p mentat --test query` will run.",rnewman,91722,2018-04-25T04:04:27Z,COLLABORATOR,True,298,138,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3f001239d61d78b434b3df90da7b7f981f3f1917,Finish transition.
342,https://api.github.com/repos/mozilla/mentat/pulls/658,658,"Pre: eliminate some occurrences of Rc, largely through the magic of Into.","I figured this little polish would make work like #656 easier to read and experiment with. (@mmacedoeu, you might want to take a look.)",rnewman,91722,2018-04-24T23:49:26Z,COLLABORATOR,False,90,68,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4a42d2ca2c8cf39a8a0e9bda11f8a704ee394273,"Pre: eliminate some occurrences of Rc, largely through the magic of Into."
343,https://api.github.com/repos/mozilla/mentat/pulls/657,657,"Add 'Binding', a structured value type to return from queries.","Bump to 0.7: breaking change.

Nick reviewed this in #639.",rnewman,91722,2018-04-24T22:06:05Z,COLLABORATOR,True,396,166,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7195182b64941521b2c6780018a02881dcc2d5da,"Add 'Binding', a structured value type to return from queries. r=nalexander

Bump to 0.7: breaking change."
344,https://api.github.com/repos/mozilla/mentat/pulls/656,656,refactoring Rc->Arc,Refactoring to Arc will get Send and ability for use on multi-threaded environments like webapps,mmacedoeu,4959023,2018-04-24T19:49:46Z,NONE,False,84,62,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0ff7c41333642cdff858efced419f4bbbda91b4b,refactoring Rc->Arc
345,https://api.github.com/repos/mozilla/mentat/pulls/656,656,refactoring Rc->Arc,Refactoring to Arc will get Send and ability for use on multi-threaded environments like webapps,mmacedoeu,4959023,2018-04-24T19:49:46Z,NONE,False,84,62,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f5252745cfac46b88259b27932d94c8247d310e8,refactor tests Rc->Arc
346,https://api.github.com/repos/mozilla/mentat/pulls/650,650,(tx) Implement :db/retractEntity. (#378),"Datomic used to expose `:db.fn/retractEntity` and
`:db.fn/retractAttribute`, but there latest Cloud offering has only
:db/retractEntity.  Since that's what I am interested in using, that's
all I've implemented.

This transformation doesn't follow the existing pattern of inserting
into the temp.*_searches table.  It instead populates
temp.search_results directly from datoms, and in so doing it makes
some assumptions about how the searches tables will be accessed.

It might be even more efficient to have an entirely new temporary
table just for these retractions.  One advantage with the current
scheme is that indexing restrictions placed on the search results
table will apply to the datoms retracted by :db/retractEntity as well.

There are a few remaining items TODO.

TODO: ensure that we mark the schema as potentially modified when we
:db/retractEntity.  It's not clear to me how to do this efficiently.

TODO: ensure that transaction watchers get the correct transacted
datom stream.  I didn't try to address this yet because it appears to
me that the existing watcher implementation isn't quite correct: it
tells watchers about datoms that are potentially to be transacted but
not about datoms that actually are transacted.  This, of course,
matters when watching :db/retractEntity entities being transacted.",ncalexan,1097182,2018-04-20T22:23:06Z,MEMBER,False,229,4,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f84cf4dd6179f5b079ac32001ada3201d476910a,"(tx) Implement :db/retractEntity. (#378)

Datomic used to expose `:db.fn/retractEntity` and
`:db.fn/retractAttribute`, but there latest Cloud offering has only
:db/retractEntity.  Since that's what I am interested in using, that's
all I've implemented.

This transformation doesn't follow the existing pattern of inserting
into the temp.*_searches table.  It instead populates
temp.search_results directly from datoms, and in so doing it makes
some assumptions about how the searches tables will be accessed.

It might be even more efficient to have an entirely new temporary
table just for these retractions.  One advantage with the current
scheme is that indexing restrictions placed on the search results
table will apply to the datoms retracted by :db/retractEntity as well.

There are a few remaining items TODO.

TODO: ensure that we mark the schema as potentially modified when we
:db/retractEntity.  It's not clear to me how to do this efficiently.

TODO: ensure that transaction watchers get the correct transacted
datom stream.  I didn't try to address this yet because it appears to
me that the existing watcher implementation isn't quite correct: it
tells watchers about datoms that are potentially to be transacted but
not about datoms that actually are transacted.  This, of course,
matters when watching :db/retractEntity entities being transacted."
347,https://api.github.com/repos/mozilla/mentat/pulls/648,648,Optimize NamespacedKeyword (and NamespacedSymbol),"Currently NamespacedKeyword (and NamespacedSymbol) is effectively a tuple of two `String`s. This means that each instance of it will require two allocations, reading the data out of them will typically require two cache misses, etc. There are a number of ways this could be improved.

One way is interning, and the comments indicate in several places that we'd like *should* to doing this, however, the way Mentat is currently structured, I think this is not trivial<sup>[1](#f1)</sup>.

Another is just to store it in a single string, and remember the boundaries. That's what these patches do.

Aside from some additional code complexity (which is localized to the module implementing this optimization), there's no real downside here, and the upside is you'll have better cache locality for code that touches both the name and namespace, fewer allocations for most code, reduced memory usage for objects holding `NamespacedKeywords` (e.g. `std::mem::size_of::<NamespacedKeyword>()` is lower), cheaper creation of these keywords, and etc.

In theory at least, to be sure about that benchmarks are required, so the first patch fixes some issues in the tx-parser benchmark, and makes it parse the transactions with the seattle data from our fixtures. While using the tx-parser to benchmark this is not great representation of mentat as a whole<sup>[2](#f2)</sup>, it is probably reasonably accurate for a benchmark of code that uses keywords heavily, and (most importantly) it was already there.

Anyway, there's a little bit of `unsafe` inside `NamespacedName` now, but the code is still totally safe. There are two variants we need to maintain for safety, and both are maintained by `NamespacedName::new`, and reflected in comments for the `boundary` property.

One note: Do we intend to support the `serde_support` feature (in the `edn` crate)? It's not used on most types, and was certainly the hardest part of this patch to get working properly (note: using `derive(Deserialize)` on a type that requires that its fields maintain certain invariants for the sake of memory safety is a very bad idea). Regardless, this *does* work now, is safe, and has tests...

### Benchmarks

Anyway, the end result of this for me is quite a decent speedup on the tx-parser benchmark:

Before (no optimization -- it does have the first patch which fixes and extends the benchmarks though):
```
test bench_parse1 ... bench:       2,856 ns/iter (+/- 580)
test bench_parse2 ... bench:      51,548 ns/iter (+/- 8,617)
test bench_parse3 ... bench:     109,473 ns/iter (+/- 50,330)
test bench_parse4 ... bench:  11,773,658 ns/iter (+/- 1,575,618)
```

After (with optimization):
```
test bench_parse1 ... bench:       2,392 ns/iter (+/- 901)
test bench_parse2 ... bench:      44,803 ns/iter (+/- 16,559)
test bench_parse3 ... bench:      97,035 ns/iter (+/- 52,726)
test bench_parse4 ... bench:   9,439,930 ns/iter (+/- 1,370,286)
```

This varied across runs but these were relatively representative for me.

It would be nice to know how much that helps in more general cases, but it's actually better than I had expected. Of course, real workloads are going to be dominated by sqlite time, so this somewhat silly to work on (I actually waffled about submitting this PR for this reason, but it seems better to have than not), but it's bugged me for a while, and the kinds of things I work on during the day don't give me many opportunities to micro-optimize any more.

Anyway, you can try yourself with `cargo +nightly bench -p mentat_tx_parser` if you have a nightly build installed in rustup and feel like it. (Sadly, cargo bench is [going away](https://github.com/rust-lang/rfcs/pull/2287) soon, but supposedly something similar will replace it, and not require nightly).

---

<b id=""f1"">1</b> In particular, mentat treats keywords as value types and creates and extracts them all over the place. In the places we do intern things, we use reference counting, mostly to make the lifetimes bearable (I can think of ways to make this work with references, but none of them are as simple as Rc). Sadly, this is hardly ideal, since `Rc<String>` has a very real cost when compared with `&str`.

Rustc uses both [references](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L364-L376) and [numeric handles to interned strings](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L108) depending on the case, but it's worth noting that the lifetime there is a lie, and could result in UAF if used wrong (given that Mentat connections might be long lived, the ""leak everything until task cleanup"" strategy seems dodgy to me, unless we spawned a task for each query/transaction, which... dunno, might work?). Anyway, nothing prevents us from doing both, and the current representation seemed needlessly expensive to me.

<b id=""f2"">2</b> In general, it would be really good to get more benchmarks (both ones that use sqlite and ones that don't). There are certainly comments that say things about performance that are [dubious](https://github.com/mozilla/mentat/blob/0c31fc7875294fdf80f4caf253590999a9214e0d/edn/src/types.rs#L45-L47), and not having numbers to back this up doesn't help... Also, things like using `Rc` to avoid copy is not always a win, especially when the type it holds onto is small -- most keywords and symbols are quite short, and they are Rced in several places -- this might be the right choice, but it also could be bad for a lot of reasons. Measuring would remove doubt here.
",thomcc,860665,2018-04-20T06:06:57Z,CONTRIBUTOR,False,344,60,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d1ca279905c8b8cae008e3b767f495bc6ef5c499,"Fix tx-parser bench, and have it bench files in fixtures"
348,https://api.github.com/repos/mozilla/mentat/pulls/648,648,Optimize NamespacedKeyword (and NamespacedSymbol),"Currently NamespacedKeyword (and NamespacedSymbol) is effectively a tuple of two `String`s. This means that each instance of it will require two allocations, reading the data out of them will typically require two cache misses, etc. There are a number of ways this could be improved.

One way is interning, and the comments indicate in several places that we'd like *should* to doing this, however, the way Mentat is currently structured, I think this is not trivial<sup>[1](#f1)</sup>.

Another is just to store it in a single string, and remember the boundaries. That's what these patches do.

Aside from some additional code complexity (which is localized to the module implementing this optimization), there's no real downside here, and the upside is you'll have better cache locality for code that touches both the name and namespace, fewer allocations for most code, reduced memory usage for objects holding `NamespacedKeywords` (e.g. `std::mem::size_of::<NamespacedKeyword>()` is lower), cheaper creation of these keywords, and etc.

In theory at least, to be sure about that benchmarks are required, so the first patch fixes some issues in the tx-parser benchmark, and makes it parse the transactions with the seattle data from our fixtures. While using the tx-parser to benchmark this is not great representation of mentat as a whole<sup>[2](#f2)</sup>, it is probably reasonably accurate for a benchmark of code that uses keywords heavily, and (most importantly) it was already there.

Anyway, there's a little bit of `unsafe` inside `NamespacedName` now, but the code is still totally safe. There are two variants we need to maintain for safety, and both are maintained by `NamespacedName::new`, and reflected in comments for the `boundary` property.

One note: Do we intend to support the `serde_support` feature (in the `edn` crate)? It's not used on most types, and was certainly the hardest part of this patch to get working properly (note: using `derive(Deserialize)` on a type that requires that its fields maintain certain invariants for the sake of memory safety is a very bad idea). Regardless, this *does* work now, is safe, and has tests...

### Benchmarks

Anyway, the end result of this for me is quite a decent speedup on the tx-parser benchmark:

Before (no optimization -- it does have the first patch which fixes and extends the benchmarks though):
```
test bench_parse1 ... bench:       2,856 ns/iter (+/- 580)
test bench_parse2 ... bench:      51,548 ns/iter (+/- 8,617)
test bench_parse3 ... bench:     109,473 ns/iter (+/- 50,330)
test bench_parse4 ... bench:  11,773,658 ns/iter (+/- 1,575,618)
```

After (with optimization):
```
test bench_parse1 ... bench:       2,392 ns/iter (+/- 901)
test bench_parse2 ... bench:      44,803 ns/iter (+/- 16,559)
test bench_parse3 ... bench:      97,035 ns/iter (+/- 52,726)
test bench_parse4 ... bench:   9,439,930 ns/iter (+/- 1,370,286)
```

This varied across runs but these were relatively representative for me.

It would be nice to know how much that helps in more general cases, but it's actually better than I had expected. Of course, real workloads are going to be dominated by sqlite time, so this somewhat silly to work on (I actually waffled about submitting this PR for this reason, but it seems better to have than not), but it's bugged me for a while, and the kinds of things I work on during the day don't give me many opportunities to micro-optimize any more.

Anyway, you can try yourself with `cargo +nightly bench -p mentat_tx_parser` if you have a nightly build installed in rustup and feel like it. (Sadly, cargo bench is [going away](https://github.com/rust-lang/rfcs/pull/2287) soon, but supposedly something similar will replace it, and not require nightly).

---

<b id=""f1"">1</b> In particular, mentat treats keywords as value types and creates and extracts them all over the place. In the places we do intern things, we use reference counting, mostly to make the lifetimes bearable (I can think of ways to make this work with references, but none of them are as simple as Rc). Sadly, this is hardly ideal, since `Rc<String>` has a very real cost when compared with `&str`.

Rustc uses both [references](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L364-L376) and [numeric handles to interned strings](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L108) depending on the case, but it's worth noting that the lifetime there is a lie, and could result in UAF if used wrong (given that Mentat connections might be long lived, the ""leak everything until task cleanup"" strategy seems dodgy to me, unless we spawned a task for each query/transaction, which... dunno, might work?). Anyway, nothing prevents us from doing both, and the current representation seemed needlessly expensive to me.

<b id=""f2"">2</b> In general, it would be really good to get more benchmarks (both ones that use sqlite and ones that don't). There are certainly comments that say things about performance that are [dubious](https://github.com/mozilla/mentat/blob/0c31fc7875294fdf80f4caf253590999a9214e0d/edn/src/types.rs#L45-L47), and not having numbers to back this up doesn't help... Also, things like using `Rc` to avoid copy is not always a win, especially when the type it holds onto is small -- most keywords and symbols are quite short, and they are Rced in several places -- this might be the right choice, but it also could be bad for a lot of reasons. Measuring would remove doubt here.
",thomcc,860665,2018-04-20T06:06:57Z,CONTRIBUTOR,False,344,60,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e48e45c0d8b1b6f61bfe0e03372d8f12b5fad236,Make properties on NamespacedKeyword/NamespacedSymbol private
349,https://api.github.com/repos/mozilla/mentat/pulls/648,648,Optimize NamespacedKeyword (and NamespacedSymbol),"Currently NamespacedKeyword (and NamespacedSymbol) is effectively a tuple of two `String`s. This means that each instance of it will require two allocations, reading the data out of them will typically require two cache misses, etc. There are a number of ways this could be improved.

One way is interning, and the comments indicate in several places that we'd like *should* to doing this, however, the way Mentat is currently structured, I think this is not trivial<sup>[1](#f1)</sup>.

Another is just to store it in a single string, and remember the boundaries. That's what these patches do.

Aside from some additional code complexity (which is localized to the module implementing this optimization), there's no real downside here, and the upside is you'll have better cache locality for code that touches both the name and namespace, fewer allocations for most code, reduced memory usage for objects holding `NamespacedKeywords` (e.g. `std::mem::size_of::<NamespacedKeyword>()` is lower), cheaper creation of these keywords, and etc.

In theory at least, to be sure about that benchmarks are required, so the first patch fixes some issues in the tx-parser benchmark, and makes it parse the transactions with the seattle data from our fixtures. While using the tx-parser to benchmark this is not great representation of mentat as a whole<sup>[2](#f2)</sup>, it is probably reasonably accurate for a benchmark of code that uses keywords heavily, and (most importantly) it was already there.

Anyway, there's a little bit of `unsafe` inside `NamespacedName` now, but the code is still totally safe. There are two variants we need to maintain for safety, and both are maintained by `NamespacedName::new`, and reflected in comments for the `boundary` property.

One note: Do we intend to support the `serde_support` feature (in the `edn` crate)? It's not used on most types, and was certainly the hardest part of this patch to get working properly (note: using `derive(Deserialize)` on a type that requires that its fields maintain certain invariants for the sake of memory safety is a very bad idea). Regardless, this *does* work now, is safe, and has tests...

### Benchmarks

Anyway, the end result of this for me is quite a decent speedup on the tx-parser benchmark:

Before (no optimization -- it does have the first patch which fixes and extends the benchmarks though):
```
test bench_parse1 ... bench:       2,856 ns/iter (+/- 580)
test bench_parse2 ... bench:      51,548 ns/iter (+/- 8,617)
test bench_parse3 ... bench:     109,473 ns/iter (+/- 50,330)
test bench_parse4 ... bench:  11,773,658 ns/iter (+/- 1,575,618)
```

After (with optimization):
```
test bench_parse1 ... bench:       2,392 ns/iter (+/- 901)
test bench_parse2 ... bench:      44,803 ns/iter (+/- 16,559)
test bench_parse3 ... bench:      97,035 ns/iter (+/- 52,726)
test bench_parse4 ... bench:   9,439,930 ns/iter (+/- 1,370,286)
```

This varied across runs but these were relatively representative for me.

It would be nice to know how much that helps in more general cases, but it's actually better than I had expected. Of course, real workloads are going to be dominated by sqlite time, so this somewhat silly to work on (I actually waffled about submitting this PR for this reason, but it seems better to have than not), but it's bugged me for a while, and the kinds of things I work on during the day don't give me many opportunities to micro-optimize any more.

Anyway, you can try yourself with `cargo +nightly bench -p mentat_tx_parser` if you have a nightly build installed in rustup and feel like it. (Sadly, cargo bench is [going away](https://github.com/rust-lang/rfcs/pull/2287) soon, but supposedly something similar will replace it, and not require nightly).

---

<b id=""f1"">1</b> In particular, mentat treats keywords as value types and creates and extracts them all over the place. In the places we do intern things, we use reference counting, mostly to make the lifetimes bearable (I can think of ways to make this work with references, but none of them are as simple as Rc). Sadly, this is hardly ideal, since `Rc<String>` has a very real cost when compared with `&str`.

Rustc uses both [references](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L364-L376) and [numeric handles to interned strings](https://github.com/rust-lang/rust/blob/8830a0304327ba8c983555ac5d42cec0569c31bb/src/libsyntax_pos/symbol.rs#L108) depending on the case, but it's worth noting that the lifetime there is a lie, and could result in UAF if used wrong (given that Mentat connections might be long lived, the ""leak everything until task cleanup"" strategy seems dodgy to me, unless we spawned a task for each query/transaction, which... dunno, might work?). Anyway, nothing prevents us from doing both, and the current representation seemed needlessly expensive to me.

<b id=""f2"">2</b> In general, it would be really good to get more benchmarks (both ones that use sqlite and ones that don't). There are certainly comments that say things about performance that are [dubious](https://github.com/mozilla/mentat/blob/0c31fc7875294fdf80f4caf253590999a9214e0d/edn/src/types.rs#L45-L47), and not having numbers to back this up doesn't help... Also, things like using `Rc` to avoid copy is not always a win, especially when the type it holds onto is small -- most keywords and symbols are quite short, and they are Rced in several places -- this might be the right choice, but it also could be bad for a lot of reasons. Measuring would remove doubt here.
",thomcc,860665,2018-04-20T06:06:57Z,CONTRIBUTOR,False,344,60,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,111ab2f7668baacaaf155b8348d6a369847dda92,Use only a single String for NamespacedKeyword/NamespacedSymbol
350,https://api.github.com/repos/mozilla/mentat/pulls/646,646,Simplify RcCounter,"Previously this used an AtomicUsize with Rc, which isn't consistent, Rc may only be used on a single thread, so there is no need to use atomic instructions for manipulating it. Using Arc makes this consistent.

Additionally, a monotonically increasing counter such as this is one of the canonical examples for when you want to use a relaxed memory ordering. All we care about in this case is that no two threads get the same value, and that subsequent calls to `next()` return increasing values for a given thread. The first is guaranteed by the use of atomic instructions, and the second by the data dependency inherent in fetch_add.

In particular, if you had the following:

```rust
// c0 and c1 are entirely different counters and
// not clones of eachother
let x = c0.next();
let y = c1.next();
```

Previously you had a strong guarantee that no thread would increment `c1` before `c0`, and now we don't (since c0 and c1 are separate, there's no data dependency as there is in the case where they're the same).

That won't matter in the cases we actually use, and seems very unlikely to matter in hypothetical future cases (It's possible we want to revisit this if we add methods to read the current state, but even then, `SeqCst` is a big hammer)",thomcc,860665,2018-04-19T17:29:27Z,CONTRIBUTOR,True,6,9,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,64098ddb2d0bb667c3d2728e223e88d68767d0b7,Use Cell instead of AtomicUsize in RcCounter.
351,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bda1ec4d0a98b9eb716f3edeff32b49a032d4ec8,"Add simple transact string to FFI.
Rename ExternTxReport and ExternTxReportList to distinguish between TxReport from transact and the results of a transaction observer firing.

Move to use c_longlong instead of i64 and time_t as Android and iOS provide different sizes.

Use to_string instead of description for errors as they are more descriptive.

Pass UUID values as bytes rather than strings

Remove unused FFI functions (functionality has been removed)

Handle optional results better - return null if optional is None

Return boolean as integer value rather than bool as Swift can't handle them.

When returning values from an iterator, make sure we don't release the value at the end of the Rust function leaving a dangling pointer."
352,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1518e180dfc3660e5af858ca796d68374ef061c2,Update rustc version to get bitcode builds
353,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d193c9c79e3983d928304443742113d5457d321a,Add iOS framework
354,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a1102bf14275480a0478046b3e5f136e2e22762,Add wrapper classes for Rust FFI
355,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,717852c531e97dfbe8313fe4e9d376fd8de61627,Add tests for query and simple transact FFI
356,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73a26132d36902e596516419066df459d3ea8e09,Add base empty Android framework
357,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3bd90e4dc7ce7b0f95562f30c31c8c873d3de769,Add build script for Android cross compilation
358,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b83bec566a43c17c547b7b018327046aa7f83974,Swift doc typo fixes
359,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,08387d4754fd744a31202782e24fafc9f66d6de7,Add wrapper classes and documentation for FFI functions
360,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4fa7fc385b497cb63693828006a626dbe313ae2,Add tests for Android library
361,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f924da451700d47c721390ba2eb1df469a273da2,update gitignore
362,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c758ab6d380e90108bbcc3e83da784afcf12fc9,"don't use as many strings when panicking on unwrapping typed values

link to fixtures directory rather than copying fixtures files

Remove logs, boilerplate comments and unused code."
363,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,515300e521faa44b73fbc957ec99089201ec4947,Add documentation for Rust FFI and Swift C Header
364,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b52e2115fae8109b7a43b9e22b9381ea393a482,Replace references to sql with query
365,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f38f27f848f9cece2b3ae56ab5af92752901cc11,Address documentation nits.
366,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,31556023e5d7912f7c0b0925d55a0c090070292c,Update consuming FFI function names to better reflect consuming nature (`as` -> `to`).
367,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c2dbf2c3040d05b8dfe888e305f4b691e774b952,Return `&str` from `c_char_to_string` rather than `String` to avoid unnecessary allocations.
368,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0e0316991a44fd4892ddfd48dd7b06d367fe5198,Crash on null pointer inside `destroy` functions.
369,https://api.github.com/repos/mozilla/mentat/pulls/643,643,iOS and Android (Java) sdk framework,"iOS and Android frameworks for Mentat

Still to be done: 
- Exceptions in Android (we don't have them)
- Tests for Observers in both iOS and Android

https://github.com/mozilla/mentat/issues/609
https://github.com/mozilla/mentat/issues/614",fluffyemily,12613048,2018-04-17T18:18:42Z,COLLABORATOR,True,6546,289,76,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b23ee0855e09dffd96973354aad443e5f170627,"Exclude Xcode's build directory, not Rust's"
370,https://api.github.com/repos/mozilla/mentat/pulls/640,640,Implement (tx-log ...) function.,"`tx-log` allows to query the transaction log efficiently.

@rnewman, can I get early feedback on this?  I haven't added the underlying `transaction_log` table yet; that's next.",ncalexan,1097182,2018-04-13T19:06:32Z,MEMBER,False,712,11,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d185a353decec5898f8e63719cefa84cfd18e040,(chore) Pre: Use the same features of uuid throughout the project.
371,https://api.github.com/repos/mozilla/mentat/pulls/640,640,Implement (tx-log ...) function.,"`tx-log` allows to query the transaction log efficiently.

@rnewman, can I get early feedback on this?  I haven't added the underlying `transaction_log` table yet; that's next.",ncalexan,1097182,2018-04-13T19:06:32Z,MEMBER,False,712,11,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e6f1f818110c2ca370ab634e56753d7ab7f5584a,(query) Pre: Model columns that don't have type tags closer to Column.
372,https://api.github.com/repos/mozilla/mentat/pulls/640,640,Implement (tx-log ...) function.,"`tx-log` allows to query the transaction log efficiently.

@rnewman, can I get early feedback on this?  I haven't added the underlying `transaction_log` table yet; that's next.",ncalexan,1097182,2018-04-13T19:06:32Z,MEMBER,False,712,11,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,411465978937cffb9fe48a11659240848fb1df20,"(query) Implement tx-log API: (tx-ids ...) and (tx-data ...) functions.

`tx-ids` allows to enumerate transaction IDs efficiently.

`tx-data` allows to extract transaction log data efficiently.

We might eventually allow to filter by impacted attribute sets as well."
373,https://api.github.com/repos/mozilla/mentat/pulls/639,639,Introduce RelResult rather than Vec<Vec<TypedValue>>.,,rnewman,91722,2018-04-12T17:40:57Z,COLLABORATOR,True,249,75,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7d7b15106a2203e6d8a3d6d30d45c514289a63cc,Pre: use indexmap 1.0 in db and query-projector.
374,https://api.github.com/repos/mozilla/mentat/pulls/639,639,Introduce RelResult rather than Vec<Vec<TypedValue>>.,,rnewman,91722,2018-04-12T17:40:57Z,COLLABORATOR,True,249,75,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a2f24969c484524c7f523bc2feae92b014f182b,Pre: clean up core/src/lib.rs.
375,https://api.github.com/repos/mozilla/mentat/pulls/639,639,Introduce RelResult rather than Vec<Vec<TypedValue>>.,,rnewman,91722,2018-04-12T17:40:57Z,COLLABORATOR,True,249,75,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d7e70fa15eab246aa62aa65ac48f5c0b81275ae,"Change rel results to be a RelResult instance, not a Vec<Vec<TypedValue>>.

This avoids memory fragmentation and improves locality by using a single
heap-allocated vector for all bindings, rather than a separate
heap-allocated vector for each row.

We hide this abstraction behind the `RelResult` type, which tracks the
stride length (width) of each row."
376,https://api.github.com/repos/mozilla/mentat/pulls/639,639,Introduce RelResult rather than Vec<Vec<TypedValue>>.,,rnewman,91722,2018-04-12T17:40:57Z,COLLABORATOR,True,249,75,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d44d04af1c61c52e25cf0dabf231d45344b766d1,Don't allocate temporary vectors when projecting RelResults.
377,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65aaca7d97515bceb23658ef1c36645a9e9bd7fd,Pre: clarify Store::open_empty.
378,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4527e2a48b126244152a0ade6000b5d6a8ee2cb,Pre: clean up a doc test.
379,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9ecbf50dfcce434020cb72dbb8e5fc5c4ff71b60,Pre: add to_value_rc to Cloned.
380,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,be43d2ed1d931bcede8b256cb0c14aa6b1338495,Pre: add From<StructuredMap> for Binding.
381,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,987d39e74e3af4c414a3e17fd6bd4b02237cd0ec,Pre: StructuredMap cleanup.
382,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b064da4008431b02b363593de2b221a6933f46e,CLI support for printing bindings.
383,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8b32438b7da8e644ec22293dee1b493c805536a0,Split projector crate. Pass schema to projector.
384,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,72bcbcf97caa64de3b6d155fae1d0ef3563f821c,Refactor AttributeCache populator code for use from pull.
385,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,93220fed921c92a33f2234607d395014ecf3b5f5,Implement pull on top of the attribute cache layer.
386,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,67b7fd8b7cabd1707acc8e3bf49338870da4c337,Add simple pull support to connection objects.
387,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,25ae4013fe8617ef437bcfa8d7417b0867f5e49b,Define pull types.
388,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,81f04be0a21454778404eac8ef9796448eef916b,Add pull support to the projector.
389,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7cf475c3897e383ce442a8cd0a7ce3967651d75e,Parse pull expressions.
390,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,56b8622b6ce975b46b28a321e51fbda9c7d26c0d,Add and use ConjoiningClauses::derive_types_from_find_spec.
391,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0e4d8bb1f0685b59e9b63a4822074b859cfc9365,Tests for pull.
392,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1e63f9f77f768670afbb03bc2f9cb64d73ab348a,"Compile with Rust 1.25.

The only choice involved in this commit is that of replacing the
anonymous lifetime '_ with a named lifetime for the cache; since we're
accepting a Known, which includes the cache in question, I think it's
clear that we expect the function to apply to any given cache
lifetime."
393,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e2a89237a8c2f58fe8432594aaace3a93699769a,Review comments.
394,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47ed4684e9fca9340b6e8dafb84917c585b0f8e3,Bail on unnamed attribute.
395,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fe63b7a5c0ed85b63f92e767386108a388876bff,Make assert_parse_failure_contains safe to use.
396,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d9acd669baef67e7e94ab5ce2b87ff1a71496f6,Rework query parser to report better errors for pull.
397,https://api.github.com/repos/mozilla/mentat/pulls/638,638,Implement simple pull expressions,"This reworks the projector, adds parsing and projection support for pull, and implements the actual pull mechanism itself on top of the attribute cache. Finally, it adds a rough implementation of display for the CLI.

This supports simple pull: either `(pull ?some-var [:x/y :z/a])` or `(pull ?some-var [*])`. We don't yet support depth, aliasing, limits, or recursion.",rnewman,91722,2018-04-12T15:17:04Z,COLLABORATOR,True,2316,396,33,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8395b662729f020e35118a80cc1cf00a7e29eb39,Test for mixed wildcard and simple attribute.
398,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e83c4ef1ba3b1c03d7c0536f7825cac7a681071b,Add iOS SDK framework
399,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,666580301fdaabdaf60e85f66db57fc8c2ac66e0,Add transact FFI function
400,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6adb97c587c7e0a89ca5d4c7e883bdbf3d1826f6,Implement `transact`
401,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5fbf17f4f995aba76a8ebf612a60473d808daa80,Fix variables in predicates
402,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,10e3d5290232a5f7249c24bcc0a42e5179509300,"Update FFI API for use with Swift Library.
Fixing issues raised by tests added to swift library.
Improving the API"
403,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0dfb712ef7afa75cba85f05f245e39bba0e9d0dc,"Add tests for FFI functions
Improve API"
404,https://api.github.com/repos/mozilla/mentat/pulls/636,636,Add iOS Framework,"An iOS framework wrapping Mentat's API over FFI.

How to build for iOS

```
cd ffi
cargo lipo --release
```

When the build is complete, open `sdks/swift/Mentat/Mentat.xcproj` in Xcode, do a force clean (Cmd + alt + Shift + k).

To run tests, ensure that the `MentatDebug` target is selected.

@rnewman can you please check something for me? About 3/4 of the way through developing this, something weird happened with `libmentat_ffi.a`. It stopped bundling `sqlite` up when running `cargo lipo`, however if I build Toodle with the current mentat and linked that, everything was fine. Can you please see if you have the same problem, or whether it's just my machine being weird?",fluffyemily,12613048,2018-04-12T10:29:59Z,COLLABORATOR,False,2918,49,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,356b969356d54c778a01227d0b30036c3a23e978,Link to correct library
405,https://api.github.com/repos/mozilla/mentat/pulls/635,635,Closes #634 - Fix variables in predicates,,fluffyemily,12613048,2018-04-12T08:47:26Z,COLLABORATOR,True,114,14,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6232e6224e5b3e2ece406ba13e6d7c4c08b63e54,Fix variables in predicates
406,https://api.github.com/repos/mozilla/mentat/pulls/635,635,Closes #634 - Fix variables in predicates,,fluffyemily,12613048,2018-04-12T08:47:26Z,COLLABORATOR,True,114,14,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3dc1bb615f6adc015f67da8ac5b08f3dddd4e722,Address review comments @rnewman
407,https://api.github.com/repos/mozilla/mentat/pulls/635,635,Closes #634 - Fix variables in predicates,,fluffyemily,12613048,2018-04-12T08:47:26Z,COLLABORATOR,True,114,14,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d67cb74d514f0aa1909af87cb84678a80bd05973,Address final review comment @rnewman
408,https://api.github.com/repos/mozilla/mentat/pulls/633,633,Fix (the ?foo),"I incorrectly failed to exclude corresponding-projection vars from grouping. This fixes that error, and also makes error checking more thorough.",rnewman,91722,2018-04-09T21:21:10Z,COLLABORATOR,True,191,18,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d1775c79d4ec3dd3ccfa16a19b260cc395ae89b1,Failing test.
409,https://api.github.com/repos/mozilla/mentat/pulls/633,633,Fix (the ?foo),"I incorrectly failed to exclude corresponding-projection vars from grouping. This fixes that error, and also makes error checking more thorough.",rnewman,91722,2018-04-09T21:21:10Z,COLLABORATOR,True,191,18,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,53d36e6a2278098c42ef2eaeda2fcdc80851ea73,"Don't group by ?var when processing (the ?var). (#630)

This PR also finishes error generation in the projector."
410,https://api.github.com/repos/mozilla/mentat/pulls/633,633,Fix (the ?foo),"I incorrectly failed to exclude corresponding-projection vars from grouping. This fixes that error, and also makes error checking more thorough.",rnewman,91722,2018-04-09T21:21:10Z,COLLABORATOR,True,191,18,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,07d3d33a411c54984e29d6220c89cb3ab7147546,Review comments.
411,https://api.github.com/repos/mozilla/mentat/pulls/632,632,Extract test macros.,"@rnewman can spend a minute trying to make this compile?  I vaguely remember there's magic around the order of imports, etc, but it's pretty frustrating.

My motivation is to use the handy `db` testing apparatus in the `tolstoy` crate (or a new crate), so that I can write low-level tests for synchronization without having to build the `db` crate frequently (which is very slow since it's large).",ncalexan,1097182,2018-04-09T18:47:26Z,MEMBER,False,339,208,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e3e055920a7cf7d835608245b141a84284864f02,"[tx] Add basic support for timelines to transactor.

This is a partial measure that records timelines (the default
timeline, timeline 0) but otherwise doesn't do anything with them."
412,https://api.github.com/repos/mozilla/mentat/pulls/632,632,Extract test macros.,"@rnewman can spend a minute trying to make this compile?  I vaguely remember there's magic around the order of imports, etc, but it's pretty frustrating.

My motivation is to use the handy `db` testing apparatus in the `tolstoy` crate (or a new crate), so that I can write low-level tests for synchronization without having to build the `db` crate frequently (which is very slow since it's large).",ncalexan,1097182,2018-04-09T18:47:26Z,MEMBER,False,339,208,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ec58fa55ed0c52187f66a2e064440a70344e1a3e,Part 1: Extract low-level test framework into mentat_db::debug for re-use.
413,https://api.github.com/repos/mozilla/mentat/pulls/632,632,Extract test macros.,"@rnewman can spend a minute trying to make this compile?  I vaguely remember there's magic around the order of imports, etc, but it's pretty frustrating.

My motivation is to use the handy `db` testing apparatus in the `tolstoy` crate (or a new crate), so that I can write low-level tests for synchronization without having to build the `db` crate frequently (which is very slow since it's large).",ncalexan,1097182,2018-04-09T18:47:26Z,MEMBER,False,339,208,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0ca7c834468712ff42323adc702d3f55580028da,"Part 2: Use mentat_db::debug framework in Tolstoy crate.

The advantage of this approach is that compiling Tolstoy (or anything
that's not db, really) can be quite a bit faster than compiling db."
414,https://api.github.com/repos/mozilla/mentat/pulls/629,629,Begin adding worked examples.,,rnewman,91722,2018-04-06T22:47:05Z,COLLABORATOR,True,389,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1d710e2e191234913e99cc7cd144816640b482b6,Begin adding worked examples.
415,https://api.github.com/repos/mozilla/mentat/pulls/629,629,Begin adding worked examples.,,rnewman,91722,2018-04-06T22:47:05Z,COLLABORATOR,True,389,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6da1afc4682a19779681bf4744266ac4d206dae9,Add additional example.
416,https://api.github.com/repos/mozilla/mentat/pulls/629,629,Begin adding worked examples.,,rnewman,91722,2018-04-06T22:47:05Z,COLLABORATOR,True,389,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,609b443c8c5b64da7bfb358a7083c8387c9413df,More tweaks.
417,https://api.github.com/repos/mozilla/mentat/pulls/627,627,Vocabulary migration,,rnewman,91722,2018-04-04T14:58:57Z,COLLABORATOR,True,1362,145,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3b5912dc08473d55ee82758b818b67b80d8ef33,Allow retraction of some schema attributes. (#379) r=nalexander
418,https://api.github.com/repos/mozilla/mentat/pulls/627,627,Vocabulary migration,,rnewman,91722,2018-04-04T14:58:57Z,COLLABORATOR,True,1362,145,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6f29180421c3d68478cbbd532bc5e8a472d4a3bb,Allow passing a TermBuilder to be transacted by InProgress; add TermBuilder::is_empty. r=emily
419,https://api.github.com/repos/mozilla/mentat/pulls/627,627,Vocabulary migration,,rnewman,91722,2018-04-04T14:58:57Z,COLLABORATOR,True,1362,145,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d8b9220650e19c7744fbbe625b7d4404867722d,Implement vocabulary-driven schema upgrades. (#595) r=emily
420,https://api.github.com/repos/mozilla/mentat/pulls/627,627,Vocabulary migration,,rnewman,91722,2018-04-04T14:58:57Z,COLLABORATOR,True,1362,145,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,637a1f14f0d30dd8e694b12c79cb9842ceaf6046,Bump version to 0.6.2.
421,https://api.github.com/repos/mozilla/mentat/pulls/626,626,Allow retraction of some schema attributes. (#379),"The error messages are a bit ugly, but I expect users won't be using this interface directly.",rnewman,91722,2018-04-03T21:28:08Z,COLLABORATOR,False,95,28,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,29ccbee91142e7d5abfe1ebb0844707b19940dfe,Allow retraction of some schema attributes. (#379)
422,https://api.github.com/repos/mozilla/mentat/pulls/625,625,"Rename the helpful variant, AttributeBuilder::new, to AttributeBuilder::helpful.",,rnewman,91722,2018-04-03T21:05:03Z,COLLABORATOR,True,12,12,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65f4c05aa9780be12dfccc368aeead3be6f01b16,"Rename the helpful variant, AttributeBuilder::new, to AttributeBuilder::helpful."
423,https://api.github.com/repos/mozilla/mentat/pulls/624,624,db/component should be db/isComponent.,,rnewman,91722,2018-04-03T21:04:03Z,COLLABORATOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ecaff20959d3b544c994deedb8a9ac179e6d31d,Fix: db/component should be db/isComponent.
424,https://api.github.com/repos/mozilla/mentat/pulls/624,624,db/component should be db/isComponent.,,rnewman,91722,2018-04-03T21:04:03Z,COLLABORATOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cc450c973f97bc3548c10321d1a3219f212960b7,Merge branch 'master' into rnewman/iscomponent
425,https://api.github.com/repos/mozilla/mentat/pulls/623,623,Expose component_attributes on Schema.,"Some parts of the query engine (pull) and transactor (retractEntity) need to know whether an attribute is a component attribute, and sometimes want to do so in a generated SQL query. This is one way to do that.",rnewman,91722,2018-04-03T21:01:09Z,COLLABORATOR,True,57,7,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bcf231b89080261656e6476d3ee3bcf713e974f7,"Expose component_attributes on Schema.

Some parts of the query engine and transactor need to know whether an
attribute is a component attribute, and sometimes want to do so in
a generated SQL query. This is one way to do that."
426,https://api.github.com/repos/mozilla/mentat/pulls/622,622,Support :db/noHistory for attributes.,"At this point we never discard history, but this completes the API support for doing so.",rnewman,91722,2018-04-03T21:00:28Z,COLLABORATOR,True,56,7,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,02390b76d0f6faabf78117e5f6555eb9f7d83ea5,"Support :db/noHistory for attributes.

At this point we never discard history, but this completes the API support
for doing so."
427,https://api.github.com/repos/mozilla/mentat/pulls/605,605,"Component attributes, noHistory",This is a tiny bit of cleanup/fleshing out,rnewman,91722,2018-03-30T16:31:51Z,COLLABORATOR,False,829,600,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,673af5f0f1195ba46d0cabb86f17d819eb0abda0,"Support :db/noHistory for attributes.

At this point we never discard history, but this completes the API support
for doing so."
428,https://api.github.com/repos/mozilla/mentat/pulls/605,605,"Component attributes, noHistory",This is a tiny bit of cleanup/fleshing out,rnewman,91722,2018-03-30T16:31:51Z,COLLABORATOR,False,829,600,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d17ba5b91b96d921c0f8a3dd81781ce383e40169,"Expose component_attributes on Schema.

Some parts of the query engine and transactor need to know whether an
attribute is a component attribute, and sometimes want to do so in
a generated SQL query. This is one way to do that."
429,https://api.github.com/repos/mozilla/mentat/pulls/605,605,"Component attributes, noHistory",This is a tiny bit of cleanup/fleshing out,rnewman,91722,2018-03-30T16:31:51Z,COLLABORATOR,False,829,600,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ee5eb45906d791c4ebc96a866121f44538b706ba,Refactoring: split up the projector crate. No other code changes.
430,https://api.github.com/repos/mozilla/mentat/pulls/605,605,"Component attributes, noHistory",This is a tiny bit of cleanup/fleshing out,rnewman,91722,2018-03-30T16:31:51Z,COLLABORATOR,False,829,600,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ba331837c9764af2425b823a73bab01c20fb8949,Silence a warning in Tolstoy.
431,https://api.github.com/repos/mozilla/mentat/pulls/604,604,Don't create a CommandExecutor if there are no observers. (#603) ,,rnewman,91722,2018-03-30T15:57:02Z,COLLABORATOR,True,9,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce9836656d2cde51de35522561b95ad410c66c3d,Don't create a CommandExecutor if there are no observers. (#603)
432,https://api.github.com/repos/mozilla/mentat/pulls/604,604,Don't create a CommandExecutor if there are no observers. (#603) ,,rnewman,91722,2018-03-30T15:57:02Z,COLLABORATOR,True,9,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,270de3727c1901e1a64b4f614c694ea1c669f4f6,Don't log if our executor channel goes away. This is routine.
433,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3985c06927b92f18b107cfd80fe2e9da91d8e557,Add converter functions from TypedValue to underlying type
434,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,23e7ff0585045af92df74fa21a0fa54dda1e5631,Add QueryBuilder to make querying over FFI easier
435,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ca412b3a8b28b89f2848f2e208c6a235bf9e43be,Add helper functions for FFI. Many of these will go away as we expose the entity builder
436,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a63b423aa96ddde9728fa2f0be050caea58ff4a1,Add FFI for query building
437,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65e31ed09eacc746bd0f56bfedf5e6581c797d2e,Spacing
438,https://api.github.com/repos/mozilla/mentat/pulls/602,602,FFI Query API,Store API for FFI. This handles Querying and fetching single value attributes by value. ,fluffyemily,12613048,2018-03-29T14:52:35Z,COLLABORATOR,True,1016,36,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,48cd1aa3ed780292a8cf2cc0942d39b2d42242e4,Address review comments @rnewman
439,https://api.github.com/repos/mozilla/mentat/pulls/599,599,Add specialized tx-before and tx-after predicates.,"This is a pretty trivial addition: this is an inequality predicate that applies only to entities, with a little TODO to additionally constrain to the correct partition range.

Note that this is an opinionated divergence from Datomic: Datomic doesn't distinguish between entities, longs, etc., so you can write

```
[:find ?x :where [?x _ ?v ?tx] [(< ?tx 1234)]]
```

or

```
[:find ?x :where [?x _ ?v ?tx] [(< ?v 1234)]]
```

and not spot your typo until it's too late. Mentat will err in that case: we'll read the first `1234` as a `Long`, and the second as a `Ref`, and we'll detect the comparison across type boundaries.",rnewman,91722,2018-03-23T21:54:09Z,COLLABORATOR,True,59,6,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,11b11533c05912035422e45d04545a74e15f8649,Add specialized tx-before and tx-after predicates.
440,https://api.github.com/repos/mozilla/mentat/pulls/598,598,WIP Query builder,,fluffyemily,12613048,2018-03-23T15:37:36Z,COLLABORATOR,False,826,0,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,71470443e82607e144aa985df3260e5c473f9f81,QueryBuilder.new
441,https://api.github.com/repos/mozilla/mentat/pulls/598,598,WIP Query builder,,fluffyemily,12613048,2018-03-23T15:37:36Z,COLLABORATOR,False,826,0,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,afebba1c7445f10999c6641b273bd215eae7c0c2,"oops, accidental missing function"
442,https://api.github.com/repos/mozilla/mentat/pulls/592,592,Create Mentat FFI and expose observers (#574),"* Tidy up and add txid at beginning of transaction

* Add ffi crate and new_store function

* Add register and unregister observer FFI, Store and Conn functions.
Also add android logging facilities

* Add function for fetching entids for attribute strings

* Add functions for iterating through TxReports

* Add sync to ffi boundary

* Move Extern types from submodule to lib in FFI.
For some reason, if these types are in a submodule, even if they are publically used, the functions inside the FFI are not found in
Android. Works for iOS though. To be investigated later....

* Return to passing TxReports to observer function.
Also, remove some debug

* Expose DateTime and Utc publically

* Use Store in observer tests",fluffyemily,12613048,2018-03-20T18:56:42Z,COLLABORATOR,True,303,25,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,485f69e64ef1db7ed9cefbf797cc600b98f2bd4e," Create Mentat FFI and expose observers (#574)

* Tidy up and add txid at beginning of transaction

* Add ffi crate and new_store function

* Add register and unregister observer FFI, Store and Conn functions.
Also add android logging facilities

* Add function for fetching entids for attribute strings

* Add functions for iterating through TxReports

* Add sync to ffi boundary

* Move Extern types from submodule to lib in FFI.
For some reason, if these types are in a submodule, even if they are publically used, the functions inside the FFI are not found in
Android. Works for iOS though. To be investigated later....

* Return to passing TxReports to observer function.
Also, remove some debug

* Expose DateTime and Utc publically

* Use Store in observer tests"
443,https://api.github.com/repos/mozilla/mentat/pulls/591,591,Simplify.,"This has a watcher collect txid -> AttributeSet mappings each time a
transact occurs. On commit we retrieve those mappings and hand them over
to the observer service, which filters them and packages them up for
dispatch.",rnewman,91722,2018-03-19T18:37:38Z,COLLABORATOR,True,48,111,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b3700172684beb510fb7a2ab60f5516f90d1552,"Simplify.

This has a watcher collect txid -> AttributeSet mappings each time a
transact occurs. On commit we retrieve those mappings and hand them over
to the observer service, which filters them and packages them up for
dispatch."
444,https://api.github.com/repos/mozilla/mentat/pulls/590,590,"Err, don't panic, on unbound variable (#518)",,rnewman,91722,2018-03-15T01:13:40Z,COLLABORATOR,True,15,11,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cd114515d7c36240871bef0b6b0db15046b168f5,Pre: switch a 'panic' to an 'unreachable'.
445,https://api.github.com/repos/mozilla/mentat/pulls/590,590,"Err, don't panic, on unbound variable (#518)",,rnewman,91722,2018-03-15T01:13:40Z,COLLABORATOR,True,15,11,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ee7dd3eb880ce983eba3f70f51ce8265308089d7,Make candidate_type_column fallible. (#518)
446,https://api.github.com/repos/mozilla/mentat/pulls/589,589,Correctly parse and unescape quotes etc. inside EDN strings. (#434),"N.B., `t:$(whatever)` binds _the `&str` that matched `whatever`_. `t:(whatever)` binds the result of the rule. They are sometimes, but not always, the same.",rnewman,91722,2018-03-14T18:43:19Z,COLLABORATOR,True,22,8,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1e49d7a93df12aa0f93d645e137f9bbac97a7bba,Correctly parse and unescape quotes etc. inside EDN strings. (#434)
447,https://api.github.com/repos/mozilla/mentat/pulls/588,588,Tests and fixes for aggregates over different or unknown types.,,rnewman,91722,2018-03-14T02:00:42Z,COLLABORATOR,True,158,9,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1b1ea4fc71ee62f4d4758fbe5af44c8fad68f107,Tests and fixes for aggregates over different or unknown types.
448,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b473b56c331d1f6dfa4cbbe7c395e6081dcdd7ca,Pre: cleanup.
449,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,896ed2cf77b73f7343862821425cea332dbef657,Pre: use debugcli in VSCode.
450,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cadbeac1e5054f4ae3acb0c0035936c189d67cc8,Pre: add Into for &str to TypedValue.
451,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,84cf3b8e1361741ae045df276b311453007c473e,Pre: add Store.transact.
452,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47a9defe0a95fc80b0d28915e2e8a5501d7127f4,Pre: wrap subqueries in parentheses in output SQL.
453,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3cb110ac5d78a07d1b2545a2d2479ac244f08556,"Pre: add ExistingColumn.

This lets us make reference to columns by name, rather than only
pointing to qualified aliases."
454,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,64fe50e25df7ca788bed2c96556b18e05d22a2b2,Parse and algebrize simple aggregates. (#312)
455,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b34773e8f5447bbc23657270fc245482ed86faec,Follow-up: print aggregate columns more neatly in the CLI.
456,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a228933ab4c5fa9530d9ac3f214a04f3aab05cd,Useful ValueTypeSet helpers.
457,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,68ec88ffca792471a478a0cbbc55e0ff45a9083f,Allow for entity inequalities.
458,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6c68272877213f5017c8246d41ea750f944f18cc,"Add 'differ', which is a ref-specialized not-equals."
459,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c6a5464a163becbcc0d50f374a679aa5bdeac75b,"Add 'unpermute', a function for getting unique, distinct pairs from bindings."
460,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ad01764a58415aa3749db0f21d61eb589307a96c,Review comments.
461,https://api.github.com/repos/mozilla/mentat/pulls/584,584,Simple aggregates again ,"Obsoletes #498. Rebased on top of current master.

Still to do:

- [ ] TODOs for constant queries. This will involve implementing known-value aggregation: e.g., `(count ?x)` where `?x` is bound ➡️ `1`.
- [x] Porting forward [the conflicting tests from `tests/query.rs`](https://github.com/mozilla/mentat/pull/498/files#diff-71478f97b1dc3363dff408ae0a5d2e58).
- [x] Figuring out what to do with [these commented-out tests](https://github.com/mozilla/mentat/pull/498/commits/3eb898566b954da1988c20d721d87c04f6d0a596#diff-25c2dbbb356ae34ae4d3a085cc48f740)
- [x] Fixing the distinct/non-distinct case: we need to always generate a projecting subquery and aggregate in an enclosing query. `:with` controls the projection in the inner query. The simplest case is where the outer projection list is the same as the inner, and neither features aggregation — that's what we already do! — and aggregation means slightly untangling that.",rnewman,91722,2018-03-06T22:40:23Z,COLLABORATOR,True,1675,140,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0383fce79b3acffbebaac951b7977422259641d8,"Add 'the' pseudo-aggregation operator.

This allows for a corresponding value to be returned when a query
includes one 'min' or 'max' aggregate."
462,https://api.github.com/repos/mozilla/mentat/pulls/582,582,Fix printing of fractional millisecond timestamps.,Oops.,rnewman,91722,2018-03-06T02:03:40Z,COLLABORATOR,True,19,15,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,40111e5b31ef4d561719360882ee63f55a727484,Fix printing of fractional millisecond timestamps. (#582) r=emily
463,https://api.github.com/repos/mozilla/mentat/pulls/582,582,Fix printing of fractional millisecond timestamps.,Oops.,rnewman,91722,2018-03-06T02:03:40Z,COLLABORATOR,True,19,15,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a1205f13809444183ab31988bd636a268b2281c8,Add help for timer command.
464,https://api.github.com/repos/mozilla/mentat/pulls/581,581,Speed up EDN parser (fixes #445),"I pulled over Kevin Mehall's patches from #445, and fixed them up so they passed tests.

Consistently knocks a simple query execution down from 185µs to 165µs.",rnewman,91722,2018-03-06T01:34:55Z,COLLABORATOR,True,80,182,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c117f1e958959295b3347c740e9b6dc34516c727,Prefer character sets over backtracking in the EDN parser.
465,https://api.github.com/repos/mozilla/mentat/pulls/581,581,Speed up EDN parser (fixes #445),"I pulled over Kevin Mehall's patches from #445, and fixed them up so they passed tests.

Consistently knocks a simple query execution down from 185µs to 165µs.",rnewman,91722,2018-03-06T01:34:55Z,COLLABORATOR,True,80,182,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2d7df6950786b675fe24aa1bced2e5c11e3db91f,Avoid duplicate effort when parsing floats in the EDN parser.
466,https://api.github.com/repos/mozilla/mentat/pulls/581,581,Speed up EDN parser (fixes #445),"I pulled over Kevin Mehall's patches from #445, and fixed them up so they passed tests.

Consistently knocks a simple query execution down from 185µs to 165µs.",rnewman,91722,2018-03-06T01:34:55Z,COLLABORATOR,True,80,182,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d3c0914cf149c7cbc178ff0f5a42c5a1f6e149a2,"Clean up duplicate position tracking code.

This turns out to have little performance impact, but makes the grammar
much cleaner."
467,https://api.github.com/repos/mozilla/mentat/pulls/581,581,Speed up EDN parser (fixes #445),"I pulled over Kevin Mehall's patches from #445, and fixed them up so they passed tests.

Consistently knocks a simple query execution down from 185µs to 165µs.",rnewman,91722,2018-03-06T01:34:55Z,COLLABORATOR,True,80,182,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e2de78d974c58f9071b3fdb6661245f466083326,Fix EDN work to pass tests with correct numeric precedence.
468,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,53397aa93490c36949f88dfcaa5d578d6a2e6b5b,Print nanoseconds in the REPL. This is a good problem to have.
469,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b0846a91e32e7dd97106059fe00dc666daa084e0,Add a prepared query command to CLI.
470,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,001cc42092166b878426afba34e19a99b0c079ef,Better CLI timing.
471,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ff852be09ef95e876a3d3dd0a0d35f18b4b77feb,"Use release for 'cargo cli', debug for 'cargo debugcli'."
472,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e38fa57df0e088206b7f54bf5ba9e0affb2ac145,Don't enable debug symbols in release builds.
473,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b69860dc53ac732f3c40b635321c20e56ba39245,Clean up CLI code. Fixed order for help.
474,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a01e82c4137ac124f55f4f2a32deb71df60f8382,Column-align help output.
475,https://api.github.com/repos/mozilla/mentat/pulls/577,577,CLI improvements,"- Print nanoseconds.
- `cargo cli` is release by default (because it often is used for timing). Use `cargo debugcli` to get a debug version.
- Time query runtime, not including printing results!
- Make our release builds really release: no debug symbols!
- Expose prepared queries in the CLI. We can't hold on to them, but we can separate the execution time and preparation time, and verify that behavior is the same as non-prepared.",rnewman,91722,2018-03-02T20:25:18Z,COLLABORATOR,True,315,210,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d36d41c78dfe0917d1123191ce63912ae1a56fcf,Review comments.
476,https://api.github.com/repos/mozilla/mentat/pulls/576,576,"When an attribute is known-fulltext, don't hit AllDatoms.","This is an oversight from long ago.

If we know the attribute, and we know it's fulltext, then we should hit `fulltext_datoms`, not `all_datoms` (which is a `UNION` between `fulltext_datoms` and `datoms`).

Tests pass with this change, and some queries get a fair bit faster!",rnewman,91722,2018-03-02T20:23:11Z,COLLABORATOR,True,2,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8bb63ff4f33b49d756e4aa7fcaff473b527a4433,"When an attribute is known-fulltext, don't hit AllDatoms."
477,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6d03261c68cb2d93e448d8d9ad49f36be7232da2,Tidy up and add txid at beginning of transaction
478,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ac2f14e83adefb570f044546815dce690088ce0f,Add ffi crate and new_store function
479,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a215bec253730630c2f57d73d4fee7eb2c339064,"Add register and unregister observer FFI, Store and Conn functions.
Also add android logging facilities"
480,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d5c1bc54490daebac9f91a38ad81ee09f0bf6ed,Add function for fetching entids for attribute strings
481,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,53926684854c09a246f6e136acb4bf8b6b4a98d5,Add functions for iterating through TxReports
482,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,70e6005c0d1e6eabf596041bc865cc09b3f4914b,Add sync to ffi boundary
483,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,51adcb62f2165d31f79f76b9d16583991af3c2c8,"Move Extern types from submodule to lib in FFI.
For some reason, if these types are in a submodule, even if they are publically used, the functions inside the FFI are not found in
Android. Works for iOS though. To be investigated later...."
484,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8d337f0d99b91c6a6bfccdb8e27b998bce40a2fa,"Return to passing TxReports to observer function.
Also, remove some debug"
485,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f61d62a28de2ef34c57f0149d47d22aa798211d0,Expose DateTime and Utc publically
486,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d0929ca29e21e3da3245708d7fcb793b40357ad,Address review comments
487,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ef4731a7a2ef3e300bc1be77eee647d9954d6d27,Use Store in observer tests
488,https://api.github.com/repos/mozilla/mentat/pulls/574,574,Create Mentat FFI and expose observers,"Expose TxObservers over FFI, forming the basis for an FFI crate for mentat.",fluffyemily,12613048,2018-03-01T11:21:08Z,COLLABORATOR,True,337,65,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,095badc389317f1f4cddf443522e3f7f68c8068a,Updates after rebase
489,https://api.github.com/repos/mozilla/mentat/pulls/573,573,"Disable TLS support, add links to issues for TODOs","(temporary patch!)

Until we have a good cross-compilation story for something like openssl, this change is necessary to get mentat to compile again for use on Android. See https://github.com/mozilla/mentat/issues/569.",grigoryk,465422,2018-02-28T23:40:02Z,COLLABORATOR,True,19,12,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9a42cc6d5aa22083d57d12bdd9d5523b45b7af3,"Disable TLS support, add links to issues for TODOs"
490,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f69fb589fd8aadb85eec5279ccd6c5e9054d2f74,Pre: remove remnants of 'open_empty'
491,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8b94ff6273d6cffe92577328cb2dabf20f3793cf,"Pre: Cleanup 'datoms' table after a timeline move

Since timeline move operations use a transactor, they generate a
""phantom"" 'tx' and a 'txInstant' assertion. It is ""phantom"" in a sense
that it was never present in the 'transactions' table, and is entirely
synthetic as far as our database is concerned.
It's an implementational artifact, and we were not cleaning it up.

It becomes a problem when we start inserting transactions after a move.
Once the transactor clashes with the phantom 'tx', it will retract the
phantom 'txInstant' value, leaving the transactions log in an incorrect state.

This patch adds a test for this scenario and elects the easy way out: simply
remove the offending 'txInstant' datom."
492,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,726176bd8c785b52c2590889e8355117a35a017f,"Part 1: Sync without support for side-effects

A ""side-effect"" is defined here as a mutation of a remote state as part
of the sync.

If, during a sync we determine that a remote state needs to be changed, bail out.

This generally supports different variations of ""baton-passing"" syncing, where clients
will succeed syncing if each change is non-conflicting."
493,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3974656c8ac3873f2d61ccd8200c84291d242d2f,"Part 2: Support basic ""side-effects"" syncing

This patch introduces a concept of a follow-up sync. If a sync generated
a ""merge transaction"" (a regular transaction that contains assertions
necessary for local and remote transaction logs to converge), then
this transaction needs to be uploaded in a follow-up sync.

Generated SyncReport indicates if a follow-up sync is required.

Follow-up sync itself is just a regular sync. If remote state did not change,
it will result in a simple RemoteFastForward. Otherwise, we'll continue
merging and requesting a follow-up.

Schema alterations are explicitly not supported.

As local transactions are rebased on top of remote, following changes happen:
- entids are changed into tempids, letting transactor upsert :db/unique values
- entids for retractions are changed into lookup-refs if we're confident they'll succeed
-- otherwise, retractions are dropped on the floor"
494,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3796d4cfea78e47691b864940afa57d55db75a9,Tolstoy README
495,https://api.github.com/repos/mozilla/mentat/pulls/563,563,Basic sync support,"Fast-forward syncing with support for ""merging"" the bootstrap transaction.

Issues more or less resolved with this: #513, #514, #511",grigoryk,465422,2018-02-16T16:38:18Z,COLLABORATOR,True,3739,580,30,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20e4d87ba02150bc0a65afa5600b554334ff0388,Post: use a macro for more readable tests
496,https://api.github.com/repos/mozilla/mentat/pulls/561,561,Provide an API for creating truly empty stores,"This is necessary for 'fresh-start' syncing: create an empty vessel into which the entire remote transaction log will be poured.

Use `Store::create_empty` with a path, or `Conn::empty` with a SQLite connection handle.

@grigoryk let me know what you think.",rnewman,91722,2018-02-15T21:26:42Z,COLLABORATOR,True,101,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,45db5f9c77a8a99e82b1f9b04caceac09b9724dd,Part 1: split create_current_version.
497,https://api.github.com/repos/mozilla/mentat/pulls/561,561,Provide an API for creating truly empty stores,"This is necessary for 'fresh-start' syncing: create an empty vessel into which the entire remote transaction log will be poured.

Use `Store::create_empty` with a path, or `Conn::empty` with a SQLite connection handle.

@grigoryk let me know what you think.",rnewman,91722,2018-02-15T21:26:42Z,COLLABORATOR,True,101,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c56048489ded644801d3d80bee732ff178dbffc4,Part 2: add Store::create_empty and Conn::empty.
498,https://api.github.com/repos/mozilla/mentat/pulls/561,561,Provide an API for creating truly empty stores,"This is necessary for 'fresh-start' syncing: create an empty vessel into which the entire remote transaction log will be poured.

Use `Store::create_empty` with a path, or `Conn::empty` with a SQLite connection handle.

@grigoryk let me know what you think.",rnewman,91722,2018-02-15T21:26:42Z,COLLABORATOR,True,101,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,90b6ef5c12ec27092f0cbbef5709f116eeca94a8,Part 3 - Expose 'open_empty' command via CLI
499,https://api.github.com/repos/mozilla/mentat/pulls/560,560,Add retract_kw,Turns out we needed `retract_kw` too.,fluffyemily,12613048,2018-02-15T18:21:23Z,COLLABORATOR,True,19,5,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,48ffa20d4c16e33cb7bf490224fd741c0fd4949e,Add retract_kw
500,https://api.github.com/repos/mozilla/mentat/pulls/559,559,Add retract to entity builder,,fluffyemily,12613048,2018-02-15T17:41:03Z,COLLABORATOR,True,5,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,470e94006ba410d0337b453eb6a7b866aaf2e600,Add retract to entity builder
501,https://api.github.com/repos/mozilla/mentat/pulls/558,558,Add EntityBuilder.add_kw.,"This allows you to skip your own attribute lookups, at the cost of
potentially doing the work more than once.

Also does value type checking.",rnewman,91722,2018-02-15T16:07:43Z,COLLABORATOR,True,79,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2205d9699c81618299006ab077e74b28a368f1b8,"Add EntityBuilder.add_kw.

This allows you to skip your own attribute lookups, at the cost of
potentially doing the work more than once.

Also does value type checking."
502,https://api.github.com/repos/mozilla/mentat/pulls/558,558,Add EntityBuilder.add_kw.,"This allows you to skip your own attribute lookups, at the cost of
potentially doing the work more than once.

Also does value type checking.",rnewman,91722,2018-02-15T16:07:43Z,COLLABORATOR,True,79,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,374d52e2a7216e84994d5eb1df94b7918693c7f2,"Move things around, add a test."
503,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,693b703753083a91ddba33c529e6c154c6b71e06,Remove unused struct from tx_processor
504,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5c7eef3ee13c757c8764ce0cceb301479c5898c,Derive serialize & deserialize for TypedValue
505,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ea514dc41d874f750fcb7053eaa190bb11422f2,First pass of uploader flow
506,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7415d3e328b1f72b6011861afd83465a7113fb5,Feedback
507,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5404bfb0b8bc48df31d89b94ee58974075fd4a25,revised sync flow
508,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,54ff9aa707ac9ebd68a5b109e0c51cf6b95fada3,Expose sync flow as part of Store and via CLI
509,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b51ff4136cf697fb37745717cb02f4026fc385ee,Revised sync flow; uploader revisions
510,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b4a33be7bd68a02d0b4f8ab7397c35c0d19594ce,Merge branch 'master' into grisha/tolstoy-upload-flow
511,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,89bee4f1b03bc28610a8c9a0ad9cbeaa8d4eb199,garbage markers
512,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,17813f7b7709d8ec8d25146d131d7c98acd37002,Fix uploader to be aware of local head moving
513,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,811551ed830b4c441aa42e3dd1d9a3bae7b821ba,Merge branch 'master' into grisha/tolstoy-upload-flow
514,https://api.github.com/repos/mozilla/mentat/pulls/557,557,Revised uploader flow (battle-tested); CLI support for sync,"Fixed https://github.com/mozilla/mentat/issues/556, https://github.com/mozilla/mentat/issues/555",grigoryk,465422,2018-02-15T09:35:39Z,COLLABORATOR,True,328,89,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fc58d88f43063173739ce79d2796b20071cdb68f,post-merge fixes
515,https://api.github.com/repos/mozilla/mentat/pulls/554,554,publically expose KnownEntid,I need this to use the EntityBuilder from outside of Mentat.,fluffyemily,12613048,2018-02-14T16:41:24Z,COLLABORATOR,True,1,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bd63c01c9e2d9ec452281b8ec9ef4f10a348fdbd,publically expose KnownEntid
516,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,60d90b3ecef5cb8c4e414e0905555b17cf9574df,Allow two datoms in the same transaction to have the same fulltext string. (#565) r=emily
517,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,61fd06681ceb45d15775bac259c2fdd69907bc55,"Rework caching and use it inside the query engine. (#553) r=emily

This puts caching in mentat_db, adds a reverse lookup capability for
unique attributes, and populates bidirectional caches with a single
SQL cursor walk.

Differentiate between begin_read and begin_uncached_read.

Note that we still allow toggling within InProgress, because there might be
transient local state that makes starting a new transaction impossible."
518,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20ba795b37b3123e18de60a61fa3417f613cd968,Follow-up: remove logging and such elsewhere in the codebase.
519,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,593b045249a8519a4ff6d7585a9abf512a519087,Follow-up: replace println_stderr with eprintln.
520,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9df3bbf40f9f7840ca07370e145c991c79f58e96,Add Datomic's Seattle neighborhood test data.
521,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8a48684019585d2e75a815928524eac44430cbf,Add VSCode command to attach to running CLI.
522,https://api.github.com/repos/mozilla/mentat/pulls/553,553,Thread caching into the query engine,"This is a bunch of prep work, then a small amount of actual caching.

This:

- Splits out a trait for the cache.
- Pulls the trait down into `core`.
- Combines `Schema` and cache references into a trait object, `Known`.
- Alters the paths into the algebrizer where we previously passed `&Schema`, instead passing `Known`.
- In one spot, does the work to turn `[:find ?v :where [29 1 ?v]]` into `SELECT $v0 LIMIT 1` instead of `SELECT datoms00.v FROM datoms datoms00 WHERE datoms00.a = 1 AND datoms00.e = 29`.

It turns out that for a trivial database, it's quicker to retrieve the value from disk rather than take it as input, but (a) it should make a difference on bigger queries and data, and (b) the culmination of this work has us _not run SQL at all_.

Ignore the ""Debug logging"" commit; it's there so you can see log output when you run

```
cargo test --release test_cache_usage -- --nocapture
```

A small step after this is to (a) allow flipping cache on/off in the CLI, and (b) allow caching attributes from the CLI. That'll let us demo caching improvements interactively.",rnewman,91722,2018-02-14T03:23:51Z,COLLABORATOR,True,4243,677,36,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d10675853ac5afb1e788c7714825ffc7efef68eb,Add import command. (#456) r=emily
523,https://api.github.com/repos/mozilla/mentat/pulls/552,552,Timing and colorizing in the CLI,,rnewman,91722,2018-02-13T19:32:16Z,COLLABORATOR,True,185,2,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ef629cb53f93c3bed995b7e09d3d50bc56d50f6a,Add basic coloring of CLI output.
524,https://api.github.com/repos/mozilla/mentat/pulls/552,552,Timing and colorizing in the CLI,,rnewman,91722,2018-02-13T19:32:16Z,COLLABORATOR,True,185,2,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,546944a06da7e5fda9afb125efdcd981d7ff1a4a,"Add a timer to the CLI.

Toggle it on or off with 'timer on' and 'timer off'.
Output is colorized."
525,https://api.github.com/repos/mozilla/mentat/pulls/552,552,Timing and colorizing in the CLI,,rnewman,91722,2018-02-13T19:32:16Z,COLLABORATOR,True,185,2,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e66db84541da089c27e5e304a2ee610bb832fbd0,"Add VSCode configuration files.

These allow you to build and run the CLI, build Mentat, or run all tests."
526,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,78d632cd3167b311f76aa1f89c08d88081ab6d91,"Add TxObservers, Commands and TxObservationService.
These are the base types upon which we will build our transaction observation"
527,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ba088071370bb6fcb9ef010988a18f13ebe986ff,Expose tx observation publicly
528,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cf510e758fa31900fe96ceae9fe5678e1d3bd036,"Populate changeset of attributes inside TxReport during transact.
Batch up TxReports for entire transaction.
Notify observers about committed transaction.
Store transaction observer service inside Conn"
529,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,77c91c71df73694b3ef3c67a3dee1494df14ff62,Allow registration and unregistration of transaction observers from Conn
530,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1b9c338973c96dc0e2e80804a9ff18079daf4b09,Add tests
531,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,10685fdace20fd2736f82f1c846e25d8eb2e17c3,"Execute commands in a separate thread

Command Queue Executor to watch for new commands and execute on longer running background thread"
532,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,be83f120c43a219786d00e004210736f00c796a1,"Move to using watcher.

Simplify.

This has a watcher collect txid -> AttributeSet mappings each time a
transact occurs. On commit we retrieve those mappings and hand them over
to the observer service, which filters them and packages them up for
dispatch.

Tidy up"
533,https://api.github.com/repos/mozilla/mentat/pulls/551,551,Transaction Log Observation," Transaction observation

- Creation of `TxObserverService` in `Conn` that takes `TxObserver`s and registers them against keys and for sets of attributes.
- `InProgress` batches up tx's as it goes along so granular notification can be provided.
- `TxObserverService` called when `InProgress` commits and filters `TxObserver`s that are affected by the tx's that occurred and notifies them of what changed.

Things I could still do:
- Remove concept of `TxObserver` entirely and just register functions against keys inside `TxObserverService`.

Things I tried for storing observers:
- Trait Objects
-- Store trait object as reference - caused lifetime issues when attaching `tx_observer_service` to an `InProgress` as the lifetime for the trait object reference couldn't be worked out.
-- Store trait object inside `RefCell` inside an `Rc` - got mutability but required definition of var as `Rc<RefCell<Trait>>` which caused sizing issues - basically you can't specify a trait object as a generic parameter. To resolve this would mean making a concrete type implementing trait and storing that, which kinda defeats the purpose.
-- Store trait object inside `Box` - this works but means that the observer service owns the observer which kinda defeats the point.

- Functions
-- Pretty much everything written above but using functions rather than trait objects

- Futures
-- Experimented with returning a Future on observer registration, but I had problems in 2 ways:
--- Difficulty telling the future that it has completed without turning the entire observer service into a Future.
--- Once the future has completed, consumers needed to reregister in order to get another future, which was clumsy.
--- It's possible I didn't understand the `Futures` or `Streams` documentation properly and there is still a way to do this.
  ",fluffyemily,12613048,2018-02-13T16:58:08Z,COLLABORATOR,True,834,25,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a46bdf67fb085e4ac74de5e5081a36c75988c9c5,"Create Mentat FFI and expose observers (#574)

* Tidy up and add txid at beginning of transaction

* Add ffi crate and new_store function

* Add register and unregister observer FFI, Store and Conn functions.
Also add android logging facilities

* Add function for fetching entids for attribute strings

* Add functions for iterating through TxReports

* Add sync to ffi boundary

* Move Extern types from submodule to lib in FFI.
For some reason, if these types are in a submodule, even if they are publically used, the functions inside the FFI are not found in
Android. Works for iOS though. To be investigated later....

* Return to passing TxReports to observer function.
Also, remove some debug

* Expose DateTime and Utc publically

* Use Store in observer tests"
534,https://api.github.com/repos/mozilla/mentat/pulls/550,550,Add a var! macro.,,rnewman,91722,2018-02-13T16:34:21Z,COLLABORATOR,True,19,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5115536012bf91a81ea63f48c1a5350d310c57df,Add a var macro. (#548) r=emily
535,https://api.github.com/repos/mozilla/mentat/pulls/546,546,Allow control over rusqlite's bundling of SQLite,This is everything I think we should do for #544.,rnewman,91722,2018-02-12T21:37:14Z,COLLABORATOR,False,26,12,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e93e289a38fe7d5f10084ea7fdb783b9772b276c,Pre: add recent contributors to the authors array.
536,https://api.github.com/repos/mozilla/mentat/pulls/546,546,Allow control over rusqlite's bundling of SQLite,This is everything I think we should do for #544.,rnewman,91722,2018-02-12T21:37:14Z,COLLABORATOR,False,26,12,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,511cea4cda4fa613ddfb7c2e2047b328d14d0f10,"Add a feature flag to control the use of rusqlite's bundled SQLite.

You can use this in conjunction with setting SQLITE3_LIB_DIR to control which SQLite is used.

See https://github.com/jgallagher/rusqlite for more."
537,https://api.github.com/repos/mozilla/mentat/pulls/543,543,"""Unchanged server"" uploader flow","Fixes #510, #509.

The biggest thing current sketch is missing is an explicit transformation step for datoms for encoding, encryption, etc.",grigoryk,465422,2018-02-08T18:57:23Z,COLLABORATOR,True,528,77,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,693b703753083a91ddba33c529e6c154c6b71e06,Remove unused struct from tx_processor
538,https://api.github.com/repos/mozilla/mentat/pulls/543,543,"""Unchanged server"" uploader flow","Fixes #510, #509.

The biggest thing current sketch is missing is an explicit transformation step for datoms for encoding, encryption, etc.",grigoryk,465422,2018-02-08T18:57:23Z,COLLABORATOR,True,528,77,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5c7eef3ee13c757c8764ce0cceb301479c5898c,Derive serialize & deserialize for TypedValue
539,https://api.github.com/repos/mozilla/mentat/pulls/543,543,"""Unchanged server"" uploader flow","Fixes #510, #509.

The biggest thing current sketch is missing is an explicit transformation step for datoms for encoding, encryption, etc.",grigoryk,465422,2018-02-08T18:57:23Z,COLLABORATOR,True,528,77,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ea514dc41d874f750fcb7053eaa190bb11422f2,First pass of uploader flow
540,https://api.github.com/repos/mozilla/mentat/pulls/543,543,"""Unchanged server"" uploader flow","Fixes #510, #509.

The biggest thing current sketch is missing is an explicit transformation step for datoms for encoding, encryption, etc.",grigoryk,465422,2018-02-08T18:57:23Z,COLLABORATOR,True,528,77,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7415d3e328b1f72b6011861afd83465a7113fb5,Feedback
541,https://api.github.com/repos/mozilla/mentat/pulls/542,542,Local transaction reader,"Fixes #508.

Local transaction representation is TBD, but the current approach seems sane to me, matches some mentat internals and maps to our current test server interface.",grigoryk,465422,2018-02-01T19:34:49Z,COLLABORATOR,True,363,20,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3a7dabd58969f02fc6a7c4adb70c1c21523fd35,"Issue 508 - Iterating transcation processor r=rnewman

Review comments"
542,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d6e4343bff6947ea2e393da2558ea8964badce01,Pre: cleanup.
543,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,78dc86e1f1a38112a40a84b9e9bfc8b5c394b05c,Pre: cleanup ns_keyword.
544,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,31f394ff9662e82befa29ddee58acc30fd2e15a4,"Introduce a `kw` macro.

This allows you to write:

```rust
kw!(:foo/bar)
```

instead of

```rust
NamespacedKeyword::new(""foo"", ""bar"")
```

… and it's more efficient, too."
545,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d77d57e7e516bd294839c5d0663cb34cbfee0b66,Re-export some symbols.
546,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b97860b73ca1e0c2cbe3d76cf14468a8c266052,Use kw macro.
547,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,05cc3dff740fe9062e53e89af15f588226d0736a,"Add `mentat::open`, eliminate use of `mentat_db` in some places."
548,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0960397896fe9c664d2fc88a3b4d40c6c5892e5a,More import cleanup.
549,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4292395f476e4b22e105757aedab5d94b3d71dc2,Add q_explain to Queryable.
550,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d323f2dc66b36d402e7dcb7c1bf758c5492944b2,Pre: add lookup_values_for_attribute to Conn.
551,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8578a521c050acf8c955eca6b2be216f2af469f6,"Define Store, which is a simple container for a SQLite connection and a Conn."
552,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9fa38e9db70ebbc49b61d4070ae6814d72ab0f1,"Use Store in CLI, minor cleanup."
553,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7562c372c69060f31c03f78d5572b572f01228fe,Don't reopen a store unnecessarily.
554,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bae6f408546934b7a9a1308c53b421b543358628,Validate attributes installed after open. (#538)
555,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,63d0169c530505e335b79461889cc6b1f0b56c17,"Make AttributeBuilder optionally helpful, fix tests."
556,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04266b70c218ae50e4ea7bd0a4a0e541a1a742ce,"Use TabWriter in the CLI for aligning columnar output. (#540)

We also switch to using stderr in appropriate places."
557,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65140a2567031286f7caa9fdfa2d3490f173727c,"Return the FindSpec as part of QueryOutput, not just results.

This is a breaking change."
558,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,385f788c2a5733c2c35336afe63e5d32ec45983c,Pre: implement Display for Variable and Element.
559,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9a6939471a91456f39c7f00cff1b84740d257cea,Pre: expose an iterator over FindSpec's columns.
560,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d49af759c1b7ff04bf6567c2fb60379cb6881743,Print columns in CLI output. Accept QueryOutput.
561,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b4fcc5f4820c42ef5f1dd2dd6756bcf3b0d6617,Add From<f64> for TypedValue.
562,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2550449a3ce26a7ee6a0d4acf5c40a2bc21a206d,Add TypedValue::instant(micros).
563,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2c149182fa4a72c619843c5f0953c88804480735,Export edn from mentat crate. Export QueryExecutionResult.
564,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ab22e090214a46f3eeb1fbc1e3ebc4ae7368a32,Review comment: invert check in test.
565,https://api.github.com/repos/mozilla/mentat/pulls/537,537,Simplify keywords; add `open`; re-export symbols,You can see how much cleaner this makes the vocabulary tests and other end-to-end examples.,rnewman,91722,2018-01-30T19:51:34Z,COLLABORATOR,False,670,355,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f3f6aa2a02b58537184b66f98673c1e017402a49,Review comment: squash CLI Store into Repl.
566,https://api.github.com/repos/mozilla/mentat/pulls/536,536,Implement `q_prepare` with pre-bound variables,"Here's a first cut for feedback, without any algebrizer changes, so we can only bind variables at preparation time, not at execution time.

It's not clear to me if I need the logic to check if the schema is current: it looks like `begin_read` borrows the connection, and, since a `PreparedQuery` can't outlive its `InProgress` (I don't think...), we shouldn't be able to transact changes to the schema. In that case, I can revert the changes to pass around a `Conn` instead of the metadata.",ghost,10137,2018-01-25T01:01:18Z,NONE,True,154,0,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eccc0fad62e598983240ed25e5bdfc6635e02e3d,Implement `q_prepare` with pre-bound variables. r=rnewman
567,https://api.github.com/repos/mozilla/mentat/pulls/534,534,Add link to CQRS resources,Not everyone knows what CQRS is (I had to Google it) :),ferjm,480202,2018-01-23T08:18:01Z,CONTRIBUTOR,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a865ddfc3bf12d427a1290fbdd9c8e69dcbcf751,"Add link to CQRS resources

Not everyone knows what CQRS is (I had to Google it) :)"
568,https://api.github.com/repos/mozilla/mentat/pulls/533,533,Don't allow violation of cardinality-one restrictions within a single transact.,"This requires maintaining a unique index so that we can `INSERT OR REPLACE`. The last value will win. We could also do `INSERT OR IGNORE`, check the number of changed rows, and throw.

This only works if the lookup ref succeeds. If it doesn't, then we're into #532.

Thoughts, @ncalexan?",rnewman,91722,2018-01-23T02:56:41Z,COLLABORATOR,False,41,2,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a50b7aec3ae13745b7e59cdeefb23636069f4f59,Pre: make OpType Copy.
569,https://api.github.com/repos/mozilla/mentat/pulls/533,533,Don't allow violation of cardinality-one restrictions within a single transact.,"This requires maintaining a unique index so that we can `INSERT OR REPLACE`. The last value will win. We could also do `INSERT OR IGNORE`, check the number of changed rows, and throw.

This only works if the lookup ref succeeds. If it doesn't, then we're into #532.

Thoughts, @ncalexan?",rnewman,91722,2018-01-23T02:56:41Z,COLLABORATOR,False,41,2,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3ab4b2ca9543956a3b0ece35ab9b72c66dff50e0,Don't allow violation of cardinality-one restrictions within a single tx. (#531)
570,https://api.github.com/repos/mozilla/mentat/pulls/530,530,Allow customers to assert facts about the current transaction.,Fixes #225,eoger,6424575,2018-01-22T18:55:32Z,CONTRIBUTOR,False,90,19,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7cb44adccfde62e0360a16e5ff3adb7e07d5c76e,"Allow customers to assert facts about the current transaction.

Fixes #225"
571,https://api.github.com/repos/mozilla/mentat/pulls/529,529,Expose Uuid from the top level crate,So we don't have to import a subcrate when using mentat elsewhere,fluffyemily,12613048,2018-01-22T12:49:48Z,COLLABORATOR,True,1,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ffcecef96ae1b45dddf14dbf6170df13b2c43cb,Expose Uuid from the top level crate
572,https://api.github.com/repos/mozilla/mentat/pulls/528,528,Add a way to abort the current command on the CLI,"Currently if you enter a multiline command with invalid syntax on a previous line, you're basically screwed and need to abort the CLI. For example, if you type `.q [:find)<ret>`, you can never get out of the 'awaiting more input' state, since what's currently in the buffer will never parse as valid EDN.

Another use case is ""I'm 5 brackets parentheses deep in a query, don't want to finish it, and would rather not be forced to figure out the correct order to close them"".

This patch adds support for allowing Ctrl+C (or whatever else generates SIGINT for them) to clear the current command. If the user hits Ctrl+C when there's no current command, the program quits. Behavior vaguely similar to this is present in many different kinds of REPLs.",thomcc,860665,2018-01-20T03:23:52Z,CONTRIBUTOR,True,35,9,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4780ea24b44fd8c2142fbac605115cc0e58b1178,Add a way to abort the current command on the CLI
573,https://api.github.com/repos/mozilla/mentat/pulls/527,527,Automatically remove trailing whitespace from text files.,"This is a very large pet peeve of mine, but I know I'm not alone. Unless we decide not to land this because our stance is that 'We don't care', which, well, hopefully it isn't.

Anyway this was done with a crude shell line I listed in the commit message, after this lands (assuming it's not surprisingly controversial) you can configure your editor to delete it, or use `git diff --check master` to detect it, or something.

I thought about trying to make Travis detect it (adding `! git --no-pager grep -I -n -e ' $'` to `before_install` would *probably* do it, but it would probably also leave a very unhelpful error message), either way, we can probably just catch it in reviews.",thomcc,860665,2018-01-20T01:41:23Z,CONTRIBUTOR,True,88,88,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bba029ae338d3a5153b708d0ddfa985c778ffe3a,"Automatically remove trailing whitespace from text files.

This was done using the following shell script:

```
find . -type f -not -path ""*target*"" \
       '(' -name '*.rs' -o -name '*.md' -o -name '*.toml' ')' -print0 | \
    xargs -0 sed -i '' -E 's/[[:space:]]*$//'
```

Which is admittedly imperfect, but manages to hit everything that was a problem in this repo."
574,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f3dc92257181c758118055e1cdfa74121d094533,Implement type requirements/predicates for queries. Fixes #474
575,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c9e2ff81464f87ed8f7148dc4d61801c28766dcb,Allow required_types to constrain a variable be be one of several types.
576,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,89d3114bd1f27e5e9ea818131794621252604c8a,Avoid using the all_datoms table when a type requirement prevents strings
577,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bd48e2c7415ade142d9b58277f45fc6a60ed25b5,"Process type predicates before other WhereClauses, to avoid querying all_datoms where possible"
578,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6584f21a7ec7aa9bc3e6e41d386967d338e623f6,Address review feedback unrelated to the translator
579,https://api.github.com/repos/mozilla/mentat/pulls/526,526,Implement type hinting predicates for queries,"I think the name ""hint"" is a misnomer (it's more of a type check for an existing item).

If it needs more tests let me know.",thomcc,860665,2018-01-18T23:17:05Z,CONTRIBUTOR,False,756,142,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,179c8c790810273132044f08c141744a129afa2a,Address review feedback related to translator
580,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c70375e3495a68eb0495d8ecf44a53a254f0eb8e,Nit: Alphabetical ordering of imports
581,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2c227b072baf23ff9ffccf4710c6ff5c041a552c,Create Cache and provide functions for calling it
582,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9dc83c418e422ffec7e3b550104f54c77522f027,Get tests working. Move to using NamespacedKeyword over KnownEntid in function signature
583,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f988a1aa0f844e56728366698fbd8465ded64df8,Add is_cached check to caching tests
584,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d44341f7d1236688390292baa8cd2a51c19a7815,Move lazy and add/remove boolean flags to enums
585,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2dc640c8fd836137c1f5ce24906f4f04965dabee,Move function definitions into generic trait and implement trait for AttributeCache
586,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,06739d2cf0143ef856ac1e8a439335df15ce93bb,Remove lazy cache and generalize cache
587,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b90b7f008243460113eccee05ef79847ff9f8479,Update tests
588,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,31bb7f6b52485db7a2b814dcd88e4aba13a5690a,Eager cache becomes simple key value store. AttributeMap handles attribute storing specifics
589,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dc00646ae5df76d6a4502d4e4e599276a5c394fd,Update tests to test presence of correct values in cache
590,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,09921c04536eb8ef6646b40eec4a548c52fcbd2b,"Move EagerCache, AttributeValueProvider and ValueProvider into mentat_db"
591,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,825c21524eab65385cae43ff47e06769a6c6bc22,Add test for get_for_entid
592,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6e965e403b92aa62bdb7a1f027648e9a3a919915,Add test for lookup attribute
593,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,afd034666dd7b51ded1bf5a73b8ad263415209f4,Make caches cloneable. Add value_for alongside values_for
594,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,23c2184802fab06f177294c6e2c4ea25ad40283d,Use cache in attribute lookups
595,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0a85552a32c1d470fab0346696425bf7d03aadfb,Split test for values and value and add cardinality
596,https://api.github.com/repos/mozilla/mentat/pulls/525,525,Create generalized in-memory cache for attributes,"https://github.com/mozilla-prototypes/sync-storage-prototype/issues/14

Ok, things I know need to be done:

- Move `EagerCache` and `Cacheable` into a crate further down the stack. Right now they could not be used in querying as they can't be seen below the top level crate.
- Tests for `get` and `get_for_entid`.

Things I think should probably be done:
- Make `cacheable` a trait defining only `add_to_cache` and `new` functions. `AttributeCache` can then effectively go away and we only need to create an instance of `EagerCache` of the right type, provide a `ValueProvider` and store it somewhere.

Things I tried to do but couldn't make work
- Providing `ValueProvider` as a trait object. I know this can be done, but there were problems with `Size` and lifetimes (storing a reference to a trait object) so I went with the solution I did and figured we can come back to it later if we want to.",fluffyemily,12613048,2018-01-18T14:11:05Z,COLLABORATOR,True,495,24,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4cf2e2b3c3b37a0e864f145c40584383a3baa0b9,address review feedback r=rnewman
597,https://api.github.com/repos/mozilla/mentat/pulls/523,523,Add a CLI command to output the SQL we would execute for a query.,"Not having this has been bugging me while working on #474, and since I was already poking around in the CLI code...

Anyway, I can see arguments against it (it's an implementation detail), but it seems generally useful enough to be worth having, especially while we're working on mentat. 

Usage examples:
```
mentat=> .qsql [:find [?v ...] :where [65543 _ ?v]]
SELECT DISTINCT `all_datoms00`.v AS `?v`, `all_datoms00`.value_type_tag AS `?v_value_type_tag` FROM `all_datoms` AS `all_datoms00` WHERE `all_datoms00`.e = 65543

mentat=> .qsql [:find ?eid :where [?eid :t/name ""foo""]]
SELECT DISTINCT `datoms00`.e AS `?eid` FROM `datoms` AS `datoms00` WHERE `datoms00`.a = 65536 AND `datoms00`.v = $v0
Bindings:
  $v0 = Text(""foo"")
```

Having an equivalent for transact seems useful eventually (maybe? I don't really know, to be honest), hence naming it `.qsql` and not the more natural `.sql`.",thomcc,860665,2018-01-18T03:06:09Z,CONTRIBUTOR,True,199,25,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,57756d6340f6cea7425ec65053181a4b72233a5d,Add a command to the CLI that displays the SQL and query plan for a query.
598,https://api.github.com/repos/mozilla/mentat/pulls/522,522,Ensure that DateTime values are truncated to microsecond precision.,"This is the cause of test failures in #507: when we persist `Instant`s into the database, we lose nanoseconds… but the `TypedValue` we have in memory is _not_ truncated. That's inconvenient and misleading, so let's truncate them at the point of creation.",rnewman,91722,2018-01-18T01:09:44Z,COLLABORATOR,True,29,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3af4a2f4286cae25f8150c44d621061be21d22a8,Ensure that DateTime values are truncated to microsecond precision.
599,https://api.github.com/repos/mozilla/mentat/pulls/521,521,CLI quality-of-life fixes,"These have been bugging me while working on type hinting, and are easy to fix so I just did them. None of them should be particularly controversial, hopefully.

Bumping the version fixes a bunch of issues like pasting into the CLI not actually working right until you type a character after the paste, etc (or was I the only one who has that happen to them?). It also makes emacs-style movement keys work.

Arguably, I think `:`, `/`, and `?` should be removed from the the word separators also, but I think it doesn't matter very much, and I can see the argument the other way too.",thomcc,860665,2018-01-18T01:01:48Z,CONTRIBUTOR,True,23,9,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0f8984c8b262cd582404c7d30a8d1b4a1ed5914d,CLI: Update linefeed library to latest version
600,https://api.github.com/repos/mozilla/mentat/pulls/521,521,CLI quality-of-life fixes,"These have been bugging me while working on type hinting, and are easy to fix so I just did them. None of them should be particularly controversial, hopefully.

Bumping the version fixes a bunch of issues like pasting into the CLI not actually working right until you type a character after the paste, etc (or was I the only one who has that happen to them?). It also makes emacs-style movement keys work.

Arguably, I think `:`, `/`, and `?` should be removed from the the word separators also, but I think it doesn't matter very much, and I can see the argument the other way too.",thomcc,860665,2018-01-18T01:01:48Z,CONTRIBUTOR,True,23,9,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,429359158ec4a84acdd708a6b3028f22f3cfe81d,CLI: Don't store incomplete commands in history
601,https://api.github.com/repos/mozilla/mentat/pulls/521,521,CLI quality-of-life fixes,"These have been bugging me while working on type hinting, and are easy to fix so I just did them. None of them should be particularly controversial, hopefully.

Bumping the version fixes a bunch of issues like pasting into the CLI not actually working right until you type a character after the paste, etc (or was I the only one who has that happen to them?). It also makes emacs-style movement keys work.

Arguably, I think `:`, `/`, and `?` should be removed from the the word separators also, but I think it doesn't matter very much, and I can see the argument the other way too.",thomcc,860665,2018-01-18T01:01:48Z,CONTRIBUTOR,True,23,9,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ea83360ede2b903aa9332165ca82570192793be1,CLI: add curly braces to word separators
602,https://api.github.com/repos/mozilla/mentat/pulls/521,521,CLI quality-of-life fixes,"These have been bugging me while working on type hinting, and are easy to fix so I just did them. None of them should be particularly controversial, hopefully.

Bumping the version fixes a bunch of issues like pasting into the CLI not actually working right until you type a character after the paste, etc (or was I the only one who has that happen to them?). It also makes emacs-style movement keys work.

Arguably, I think `:`, `/`, and `?` should be removed from the the word separators also, but I think it doesn't matter very much, and I can see the argument the other way too.",thomcc,860665,2018-01-18T01:01:48Z,CONTRIBUTOR,True,23,9,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f780a97a5775abb0cabc97d65932aae943a912c0,"Review comment: clean up CLI add_history.

Signed-off-by: Thom Chiovoloni <tchiovoloni@mozilla.com>"
603,https://api.github.com/repos/mozilla/mentat/pulls/519,519,Correct an assert relating Datalog projection and SQL column counts.,Fixes #517.,rnewman,91722,2018-01-17T20:58:05Z,COLLABORATOR,True,10,8,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3ff4f35c1a86ba31ade01fb59a61e586a9336d92,Correct an assert relating Datalog projection and SQL column counts. (#517) r=tcsc
604,https://api.github.com/repos/mozilla/mentat/pulls/519,519,Correct an assert relating Datalog projection and SQL column counts.,Fixes #517.,rnewman,91722,2018-01-17T20:58:05Z,COLLABORATOR,True,10,8,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,84af76b76600f3bfc5d9165f1afe6407cfc0ae9e,Fix a comment that shouldn't be a doc comment.
605,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3af4a2f4286cae25f8150c44d621061be21d22a8,Ensure that DateTime values are truncated to microsecond precision.
606,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,783f214092b3253257cfb26a775c56900bc743ec,"Switch InProgress to be mutated in place.

This is a breaking change, and involves a very small additional cost
in managing the partition map, but it makes it much more feasible to
implement traits on InProgress: now they don't need to chain back a
new InProgress each time."
607,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3595eb050de45f2c66962d5dc6801cd41182c210,Pre: remove inaccurate TODO from TxReport comment.
608,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99ecae43c38f112395fdaa7703dbf5b18f4648ca,Pre: comment gardening.
609,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,00d478be9649f75f4bef96b0c420ad17d8b6f27c,Pre: add InternSet::len.
610,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ca49bf75f8713a4797b06a588c648b76446d176,Pre: use intern_set in tx.
611,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6c67d0af688649f3f2c3c2726e82f65449ba99d0,Pre: export NamespacedKeyword from mentat_core.
612,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73d47565ac9f9e4699a3c217e7c322a02dbe15b6,Pre: export Queryable.
613,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,97b54fa659fc347510e5b858c9cf212dfc5280e9,Pre: export IntoResult.
614,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d0a93d1d1a7e097c2e6f52f33dc819ff8df3f403,Pre: export AttributeBuilder from mentat_db.
615,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ebc9671c2ed0537e170074eea8c631705a8a8f6,Pre: turn Unique and ValueType into TypedValue::Keyword.
616,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a25a6121064edb1d36cc43f636bff770dc5f5ed3,Pre: TypedValue/NamespacedKeyword conversions.
617,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6e7ab8d2b3da7474fd8748deb3ed2c535b378184,Pre: rename SchemaMap/schema_map to AttributeMap/attribute_map.
618,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,35f612194a679ce2dcb7d076ec46b6812f9ed18d,Pre: split out a HasSchema trait to abstract over Schema.
619,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6f0217afc5fc4aa154046f5159c7f2fb15f7bec6,Pre: make AttributeBuilder::unique less verbose.
620,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a2b6df1318666ccf99acb55e5feeecfa89544067,Pre: rename some `to_` conversions to `into_`.
621,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce79ed4cf21632e26b5c40536c26848359c412da,Implement HasSchema and a new query encapsulation on Conn.
622,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,79dc3c314d5eeecdd2e4d792849bd91e1d7db711,Expose lookup_value_for_attribute.
623,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,97609d7351ca2d4fb40dc452e96ac255a721c213,Make KnownEntid a core concept.
624,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae06dadd981ebdb0c795a1a90c5c50edf2b28c6c,Comment attribute_for_ident.
625,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0f14c65985735c23d87ff5ea7cab9fb2940dcd2d,Name ignored var in algebrizer.
626,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87905aac047cc78c014eaa9ac4d7cb1296a8775c,Simplify get_attribute.
627,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ecf2663ef05aed74fb3c4f8b646c8f3a9fe1deb,Implement entid_for_type.
628,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f3afa81b2c393ed5f0c9ec1f04f250c135d3ee3a,"Describe the default core schema, v1 (:db.schema/core)."
629,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03c1c371cd4381227ecb392751a324abc8082c62,Split transact to expose an interface for TermWithTempIds.
630,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ddf6b93bebbeda193ba45068e0d613e81d42467b,"Return TxReport from each InProgress operation, not from commit."
631,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,52077d964a24b3e4a3f9d9197770d9e5da685991,Add an EntityBuilder abstraction.
632,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,96698236f0886ab5c3881b770df3172b48e284f9,Implement simple vocabulary management.
633,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4544b038468fc41343f6f12535faba7eb4e6415b,"Improve naming of read-only transactions.

This commit renames QueryableTransaction to InProgressRead, and
the factory method from queryable to begin_read."
634,https://api.github.com/repos/mozilla/mentat/pulls/507,507,"Programmatic transact, vocabulary management","I might flatten this out a little tomorrow, but this lets us transact without writing EDN:

```rust
    let mut in_progress = conn.begin_transaction(sqlite)?;
    let a_moment = in_progress.attribute_for_ident(&FOO_MOMENT)?.1;
    let a_name = in_progress.attribute_for_ident(&FOO_NAME)?.1;

    let builder = in_progress.builder();
    let mut entity = builder.describe_tempid(""s"");
    entity.add(a_name, name)?;
    entity.add(a_moment, moment)?;
    entity.commit()?;
```

and manage schemas without transacting:

```rust
    in_progress.verify_core_schema()?;
    in_progress.ensure_vocabulary(&FOO_VOCAB)?;
```

This implements all of the Rust side of schema management (that is, no JSON) apart from upgrades — you can check, add, and compatibly extend vocabulary, but not incompatibly upgrade yet.

There's a test for the violation of that contract: if you try to alter an attribute without changing the version number, you'll get a descriptive error.",rnewman,91722,2018-01-11T00:34:33Z,COLLABORATOR,False,1984,216,32,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8b82fc7589b742f02ebbf544ed5aa7630801a42a,WIP: drop behavior.
635,https://api.github.com/repos/mozilla/mentat/pulls/506,506,Force SQLite temp files to be stored in memory (#505) r=rnewman,See Issue #505 ,grigoryk,465422,2017-12-15T19:44:50Z,COLLABORATOR,True,7,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cc10c9d972554b62cf40dbc822e6bf229981ceaf,Force SQLite temp files to be stored in memory (#505) r=rnewman
636,https://api.github.com/repos/mozilla/mentat/pulls/506,506,Force SQLite temp files to be stored in memory (#505) r=rnewman,See Issue #505 ,grigoryk,465422,2017-12-15T19:44:50Z,COLLABORATOR,True,7,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f2a53c171ebe8ff8f3819c9ca54fb4cfde06413b,Expand comment
637,https://api.github.com/repos/mozilla/mentat/pulls/503,503,Implement a simple direct lookup API. Fixes #111,Should be obvious how this makes Toodle simpler — getting a due date is now a one-liner.,rnewman,91722,2017-12-08T21:03:18Z,COLLABORATOR,True,198,15,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,09df8ea6e483667a6ca46c7c9bcf5f71c1ac1257,Add some helpers and refactor how queries are run (once).
638,https://api.github.com/repos/mozilla/mentat/pulls/503,503,Implement a simple direct lookup API. Fixes #111,Should be obvious how this makes Toodle simpler — getting a due date is now a one-liner.,rnewman,91722,2017-12-08T21:03:18Z,COLLABORATOR,True,198,15,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f199c3ca6ad4f6240e6e15257ade2834de6b6dd6,Implement lookup_value_for_attribute.
639,https://api.github.com/repos/mozilla/mentat/pulls/503,503,Implement a simple direct lookup API. Fixes #111,Should be obvious how this makes Toodle simpler — getting a due date is now a one-liner.,rnewman,91722,2017-12-08T21:03:18Z,COLLABORATOR,True,198,15,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,417d019433c3d1782bcc12d4730e11b800990b90,Implement lookup_value_for_attribute.
640,https://api.github.com/repos/mozilla/mentat/pulls/503,503,Implement a simple direct lookup API. Fixes #111,Should be obvious how this makes Toodle simpler — getting a due date is now a one-liner.,rnewman,91722,2017-12-08T21:03:18Z,COLLABORATOR,True,198,15,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5c9f1cc54be962f6deb975af5d528ec80c2f4f5,Add a multi-value test for lookup_value_for_attribute.
641,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ec874d7510f575b6d389078c3282fd4f71e30bb8,initial dump
642,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ea346f5e3152d9bc0a3ba58ed894c06b9c369712,tolstoy meta schema with tests
643,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dae23c547cf2cfb5971c94760b41d0c58ee8b060,sync meta schema and SyncMetadataClient client
644,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f383338057cf6aa0d5a54e6247aa3b9e572e0308,Clean up some error handling
645,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,201497541096e8d50bf060d46ec99d8dfd9d92bf,metadata module
646,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,074ddd73c7ef60c2e8419493bc04d85eb53b09ab,Move new from trait to struct impl
647,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65bcd5d04dbb14dc3df47b3e55e4b82c2f29b0dd,Add uuid features to (eventually) support syncing
648,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce2e90bfc558d2f350640c945c919d31a2c2930a,Various review feedback
649,https://api.github.com/repos/mozilla/mentat/pulls/502,502,Sync metadata schema and SyncMetadataClient,,grigoryk,465422,2017-12-06T21:16:22Z,COLLABORATOR,False,263,1,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,36b99e3ed139c01e5836d6488700d25475138ad3,Remove explicit 'uuid' dependency from tolstoy
650,https://api.github.com/repos/mozilla/mentat/pulls/500,500,"Fix issue whereby when an incorrect command was entered, the buffer w…",…asn't cleared and the next command was appended on the end of the incorrect one,fluffyemily,12613048,2017-12-05T14:40:18Z,COLLABORATOR,True,27,25,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47693c554358c88be9c2e7bffa509684adc01376,"Fix issue whereby when an incorrect command was entered, the buffer wasn't cleared and the next command was appended on the end of the incorrect one"
651,https://api.github.com/repos/mozilla/mentat/pulls/500,500,"Fix issue whereby when an incorrect command was entered, the buffer w…",…asn't cleared and the next command was appended on the end of the incorrect one,fluffyemily,12613048,2017-12-05T14:40:18Z,COLLABORATOR,True,27,25,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f06cb94ac3d3e14b01fbfaa2a6a4cdfd566e48b2,Cleanup.
652,https://api.github.com/repos/mozilla/mentat/pulls/499,499,Example databases,"Our fixtures were a little stale, so I cleaned up. We now have two checked in:

- An empty database created from `master`
- An empty database with Toodle's current schema added.",rnewman,91722,2017-12-01T17:45:28Z,COLLABORATOR,True,5,0,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a65b4832d3ca32a97f5375d60e213e6c2fe717d7,"Update fixtures to match the current storage schema.

The existing files were a little misleading. This commit moves them into an 'old'
directory, and creates a new 'v1empty.db'."
653,https://api.github.com/repos/mozilla/mentat/pulls/499,499,Example databases,"Our fixtures were a little stale, so I cleaned up. We now have two checked in:

- An empty database created from `master`
- An empty database with Toodle's current schema added.",rnewman,91722,2017-12-01T17:45:28Z,COLLABORATOR,True,5,0,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b76f4c8fd544563b766f14634b8389fa322dc84c,Add empty example Toodle database.
654,https://api.github.com/repos/mozilla/mentat/pulls/499,499,Example databases,"Our fixtures were a little stale, so I cleaned up. We now have two checked in:

- An empty database created from `master`
- An empty database with Toodle's current schema added.",rnewman,91722,2017-12-01T17:45:28Z,COLLABORATOR,True,5,0,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,26e9a53a28d6baf29135484bdbae7bf1210731b0,Rename :item/labels to :item/label in Toodle schema.
655,https://api.github.com/repos/mozilla/mentat/pulls/499,499,Example databases,"Our fixtures were a little stale, so I cleaned up. We now have two checked in:

- An empty database created from `master`
- An empty database with Toodle's current schema added.",rnewman,91722,2017-12-01T17:45:28Z,COLLABORATOR,True,5,0,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c7abecc6bed96f7477b7eb432b9264280a5da589,Define 'cargo cli' as an alias to run the Mentat CLI.
656,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,de4d58f61422f9e6c63984cb131441c542ce97d0,Parse and algebrize simple aggregates. (#312)
657,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3eb898566b954da1988c20d721d87c04f6d0a596,Add commented-out failing tests for type code expansion.
658,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,971e1667790f7b468a3c032e8d7babdfa444016d,Review comments for simple aggregation.
659,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8e5d7830eebcc695fde8a4d9ceb4a47b444f4ddb,Review comments.
660,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5fe3d50762be5101edd9e26fa4aea2716b014dc9,Review comment.
661,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4aa647ddc5791f9ac5c2a7877de483e9ae8dd187,Newtype VariableIterator.
662,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e2e9fae66092cd6cc58dcae6d7bd3defa5e0082a,DEBUG
663,https://api.github.com/repos/mozilla/mentat/pulls/498,498,"Simple aggregates, cont",Obsoletes #483. See that PR for review comments.,rnewman,91722,2017-11-30T23:03:57Z,COLLABORATOR,False,1005,87,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a7b10872e04f614eba0a409220eb28a9006714b3,Failing test.
664,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fd887a63d93c45c5e1af36a7eca9ba0eb76952c5,"Pre: make FindQuery, FindSpec, and Element non-Clone."
665,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f5e05d6d27b48b05a1c78f02d0a79023103b9c99,Pre: make query translator return a Result.
666,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,df1dff3e0433e4abdd2d6a0614510b267519fab3,Pre: make projection return a Result.
667,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bbb81bae84cb023e70a0a2da6326b9cafd38cba7,Pre: refactor query parser in preparation for parsing aggregates.
668,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f46f1bf0169afc3b95b30bbc413b22ba17c084fc,Pre: rename PredicateFn -> QueryFunction.
669,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5f528f2c2f985e28976319e392d9fa49d582d6bd,Pre: expose more about bound variables from CC.
670,https://api.github.com/repos/mozilla/mentat/pulls/497,497,Partial work from simple aggregates work,"That's not quite ready to land — it's incorrect! — but there was a lot of evolutionary work in the PR that ought to land.

This has been reviewed, so I'm bouncing this straight in.",rnewman,91722,2017-11-30T22:46:27Z,COLLABORATOR,True,289,218,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fffabe0414602addb6652972c44a580c592943de,Pre: move ValueTypeSet to core.
671,https://api.github.com/repos/mozilla/mentat/pulls/496,496,Update cargo import for uuid to enable the V4 features for creating n…,"…ew Uuids

I want to use `mentat_core::Uuid` in the storage prototype, but I want to access some features that are only enabled with the V4 features. This patch enables V4 features for the current version.",fluffyemily,12613048,2017-11-29T17:42:36Z,COLLABORATOR,False,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f125c04dde500a82adc38ac6cd646b898619c18,Update cargo import for uuid to enable the V4 features for creating new Uuids
672,https://api.github.com/repos/mozilla/mentat/pulls/494,494,WIP: renumbering entities.,,rnewman,91722,2017-11-27T20:12:37Z,COLLABORATOR,False,78,3,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6c58e38ce3d88a5d877d0a0fc926ec4af31d4478,WIP: renumbering entities.
673,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,86a25b68e1c08ca536973603d9879785a697ab7e,"Create mentat command line.
* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt."
674,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b76dd7410840234111fcfe409f613b55f04fcfa0,Remove rustc-serialize dependency
675,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4627a2f993335bca3e8a98d1121e98520d9a7451,"Open DB inside CLI (#452) (#463)

* Open named database OR default to in memory database if no name provided

Rearrange workspace to allow import of mentat crate in cli crate

Create store object inside repl when started for connecting to mentat

Use provided DB name to open connection in store

Accept DB name as command line arg.

Open on CLI start

Implement '.open' command to open desired DB from inside CLI

* Implement Close command to close current DB.
* Closes existing open db and opens new in memory db

* Review comment: Use `combine` to parse arguments.

Move over to using Result rather than enums with err

* Accept and parse EDN Query and Transact commands (#453) (#465)

* Parse query and transact commands

* Implement is_complete for transactions and queries

* Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q

* Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
676,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6ba3fc9f06792482a0429233dbd86eba97566255,"Exit CLI (#457) (#484) r-rnewman

* Implement exit command for cli tool

* Address review comments r=rnewman

* Include exit commands in help"
677,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,edb5755b1e4ce7a209d793f01b9bc26932e88c0c,Show schema of current DB (#487)
678,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b6398be559b1778048d7a3337bf9660e94a5bac,Fixing rebase issues
679,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,29ac9cdcac662c09ae1158f7855e2fd040d0a7d5,addressing nit
680,https://api.github.com/repos/mozilla/mentat/pulls/493,493,CLI,"Everything for a very basic CLI

Everything in it has been reviewed in previous pulls and it contains a few things I need for integrating mentat with the Store crate for the storage prototype.",fluffyemily,12613048,2017-11-21T14:39:23Z,COLLABORATOR,True,1196,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7b923e682608efb17db8afb2688d7b33dd9e5deb,Match updated dependencies on CLI crate and remove unused import
681,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a6c666400d4618ace05ddd77c9f1f9fc05cd0b01,Fix some compiler warnings.
682,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9a9160c0f0a6c140d4b384ba41ddf2994bc684a5,Remove unused imports in tests.
683,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,210c370945abafa3a053a49804fc87d1b82cdafa,Update some dependencies.
684,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6d25bbdff899f6798bedd3c3d3c4886c557aecf0,Update rusqlite to 0.12.
685,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b2dcc7c7dd7b776d6867d6b3d85fb031e69a3f3b,Update error-chain to a forked version that implements Sync.
686,https://api.github.com/repos/mozilla/mentat/pulls/492,492,Update some dependencies.,"I decided to fork `error-chain` to restore `Send + Sync`, so we're now up to date to v0.11.

The current `rustc` warns if you use `///` somewhere it's not expecting a docstring, so I fixed some of those, too.

Our date library decided to rename `UTC` to `Utc`. *sigh*",rnewman,91722,2017-10-10T20:43:17Z,COLLABORATOR,True,84,86,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fe85f39e49bbc0c87888f7e0ff0530082bb0c8b5,Parse errors no longer naturally print with the expected symbol.
687,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b30a2c0a73cac2c25e184b5136b4f939c74d4da,"Create mentat command line.
* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt."
688,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a6c3f6598ae2b4f4283f56380b5b12f3cded0f3,Remove rustc-serialize dependency
689,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,46fc1615fb9a4fa637375f470eed6aca7ab8c218,"Open DB inside CLI (#452) (#463)

* Open named database OR default to in memory database if no name provided

Rearrange workspace to allow import of mentat crate in cli crate

Create store object inside repl when started for connecting to mentat

Use provided DB name to open connection in store

Accept DB name as command line arg.

Open on CLI start

Implement '.open' command to open desired DB from inside CLI

* Implement Close command to close current DB.
* Closes existing open db and opens new in memory db

* Review comment: Use `combine` to parse arguments.

Move over to using Result rather than enums with err

* Accept and parse EDN Query and Transact commands (#453) (#465)

* Parse query and transact commands

* Implement is_complete for transactions and queries

* Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q

* Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
690,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ecc926086a4d9fa56f1ea598477eaff10ec8b609,"Exit CLI (#457) (#484) r-rnewman

* Implement exit command for cli tool

* Address review comments r=rnewman

* Include exit commands in help"
691,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a9c05ba9b7365331f4ff83562e99306dde608ab3,Show schema of current DB (#487)
692,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9932a98c6f6ee15a329a7999b6dc1d36a79a76b7,show attributes of current database
693,https://api.github.com/repos/mozilla/mentat/pulls/490,490,show attributes of current database,https://github.com/mozilla/mentat/issues/459,fluffyemily,12613048,2017-06-29T20:36:37Z,COLLABORATOR,False,1245,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb09f9a5d1b1d9fb1dde76ae83749bcccb043c7a,Simply no argument parsing
694,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,acae53be97886792cbd3e9e6b4c5ad5871433972,Pre: rename begin_transaction to begin_tx_application.
695,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f44dbd5de9e8570890ee5d1621da1ea7c5fa54d,"Take an EXCLUSIVE transaction when bootstrapping, and an IMMEDIATE transaction when writing.

This avoids the remote possibility of another write sneaking in the door
while we're preparing to write, avoids us needing to upgrade locks, etc.

  After a BEGIN IMMEDIATE, no other database connection will be able to write
  to the database or do a BEGIN IMMEDIATE or BEGIN EXCLUSIVE. Other processes
  can continue to read from the database, however.

  An exclusive transaction causes EXCLUSIVE locks to be acquired on all
  databases. After a BEGIN EXCLUSIVE, no other database connection except for
  read_uncommitted connections will be able to read the database and no other
  connection without exception will be able to write the database until the
  transaction is complete."
696,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f6e2634804b43c8a5f625e41279b30071bd3ad7a,Hacky implementation of atomic multi-tx.
697,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,baeb01c8ddfb01879849097196c0f8e1227487ed,"Hold the last report, returning the InProgress from each operation."
698,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7cd535906f9020e8c8f6419b9eb7288343537941,Rewrite transact in terms of InProgress.
699,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,41cddc7ed3f87521322c67ee03b3479d3ee61775,Test rollback.
700,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,22ed3f66270f220e6a64e82ae017958bc466c1ce,Remove unused imports.
701,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1f174df74b03a80afb856edfe55a43981ea5829,Don't use Rc for transaction reports.
702,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,695e224880dd4741eec24a74e530bf4c488081f7,Pre: break out USER0 as a part boundary constant.
703,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5629080ea0ae300c1438889126c30d754f52ad2b,Export TX0 and USER0 from mentat_db. This is for testing.
704,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,543a78a593c0dded5ec6a596e236b478950b6a26,Review comments: commenting.
705,https://api.github.com/repos/mozilla/mentat/pulls/489,489,Atomic multi-tx,"This is the basic primitive needed to implement atomic schema migration: the ability to establish a transaction and run queries and transact within it, rolling back or committing in its entirety when done.

This is a long way from being ready — I need to introduce some kind of equivalent of `Conn` that I can query within this, and perhaps maintains mutable state rather than invoking `transact` directly — but I wanted to get to a POC first.",rnewman,91722,2017-06-23T19:58:43Z,COLLABORATOR,True,230,43,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c573bbbbacf64331815d66426fc1383eebe74f9f,Test tempid allocation and rollback.
706,https://api.github.com/repos/mozilla/mentat/pulls/487,487,Show schema of current DB,https://github.com/mozilla/mentat/issues/458,fluffyemily,12613048,2017-06-22T12:08:54Z,COLLABORATOR,True,66,6,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0b2a30e71c9430380c554c8ca796c0872c75506e,Show schema of current DB
707,https://api.github.com/repos/mozilla/mentat/pulls/485,485,Support tx places in queries,"First pass. 

What this doesn't do is utilise an old use the tx id to fetch results from a previous version. Should that be included in this issue?",fluffyemily,12613048,2017-06-21T13:35:51Z,COLLABORATOR,True,87,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c677a5bb16b7e455786620b6d389cf2bf8834a4,Support tx places in queries
708,https://api.github.com/repos/mozilla/mentat/pulls/485,485,Support tx places in queries,"First pass. 

What this doesn't do is utilise an old use the tx id to fetch results from a previous version. Should that be included in this issue?",fluffyemily,12613048,2017-06-21T13:35:51Z,COLLABORATOR,True,87,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,58e43a878ae6e901aed4916bea9d6bf5553f39b6,Address review comments r=rnewman
709,https://api.github.com/repos/mozilla/mentat/pulls/485,485,Support tx places in queries,"First pass. 

What this doesn't do is utilise an old use the tx id to fetch results from a previous version. Should that be included in this issue?",fluffyemily,12613048,2017-06-21T13:35:51Z,COLLABORATOR,True,87,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,56ca711f0a5d7aaad63330a9b891c5ecf5dd9a7b,Remove comment - not relevant right now:
710,https://api.github.com/repos/mozilla/mentat/pulls/484,484,Exit CLI (#457),https://github.com/mozilla/mentat/issues/457,fluffyemily,12613048,2017-06-20T14:58:58Z,COLLABORATOR,True,87,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73733f0e07323ef8eb3d1f9ec5c9c73ee90280e3,Implement exit command for cli tool
711,https://api.github.com/repos/mozilla/mentat/pulls/484,484,Exit CLI (#457),https://github.com/mozilla/mentat/issues/457,fluffyemily,12613048,2017-06-20T14:58:58Z,COLLABORATOR,True,87,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4bcba0b9f90b6cad9ace21a38a18ceeb9a43007f,Address review comments r=rnewman
712,https://api.github.com/repos/mozilla/mentat/pulls/484,484,Exit CLI (#457),https://github.com/mozilla/mentat/issues/457,fluffyemily,12613048,2017-06-20T14:58:58Z,COLLABORATOR,True,87,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,af6ae2fb011b78b982c15e62e8d05e765d692cf6,Include exit commands in help
713,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,96908b3bd74eb418e192ddb28c6c5153ad57ba84,More dead imports.
714,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2bc80fb444d75341436f886cb2f920ab8874e742,"Pre: make FindQuery, FindSpec, and Element non-Clone."
715,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,896370766171eb8e2a0b226021a91ac71f88493b,Pre: make query translator return a Result.
716,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9bd6efbbecb85b745795875a8e850599a82bff6a,Pre: make projection return a Result.
717,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04c1a95169282b828dad398057ada3173dfb655c,Pre: refactor query parser in preparation for parsing aggregates.
718,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3683c679a5e5a7be8372cd72ef6713665c618e4,Pre: rename PredicateFn -> QueryFunction.
719,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e36c124e27987e213f39e3b18dd99e552ffc7c91,Pre: expose more about bound variables from CC.
720,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,465ce1d76c2f798c38e08e263a4a5108bcce891e,Pre: move ValueTypeSet to core.
721,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,49f4e279b094306d40612108d3ed0dd1a4816601,Parse and algebrize simple aggregates. (#312)
722,https://api.github.com/repos/mozilla/mentat/pulls/483,483,Simple aggregates,"No good errors yet, but I'm happy with the end-to-end tests.",rnewman,91722,2017-06-19T22:48:28Z,COLLABORATOR,False,1217,281,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ab602d9266ebd1396ce3f03fe5431809c0cc44fd,Add commented-out failing tests for type code expansion.
723,https://api.github.com/repos/mozilla/mentat/pulls/482,482,Support inequality predicates for instants,"This issue fixes #439.

#481 and #480 are fixes necessary for this to work correctly.",rnewman,91722,2017-06-16T01:44:36Z,COLLABORATOR,False,484,49,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e39578a780f6a8f9fe8f69772bb8a68bf74c0fea,"Pre: NumericInequality, NumericComparison -> Inequality."
724,https://api.github.com/repos/mozilla/mentat/pulls/482,482,Support inequality predicates for instants,"This issue fixes #439.

#481 and #480 are fixes necessary for this to work correctly.",rnewman,91722,2017-06-16T01:44:36Z,COLLABORATOR,False,484,49,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,23715bd7a7718a7973fac3a046aacf741bc49972,"Pre: implement ValueTypes for FnArg.

This trait exposes potential_types, which returns the set of types
to which the provided FnArg could conform."
725,https://api.github.com/repos/mozilla/mentat/pulls/482,482,Support inequality predicates for instants,"This issue fixes #439.

#481 and #480 are fixes necessary for this to work correctly.",rnewman,91722,2017-06-16T01:44:36Z,COLLABORATOR,False,484,49,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,672ed7bd72b5d4a99460992ba88ba5123ef3ed48,"Extend inequalities to Instants. (#439)

Adds translation and end-to-end tests."
726,https://api.github.com/repos/mozilla/mentat/pulls/482,482,Support inequality predicates for instants,"This issue fixes #439.

#481 and #480 are fixes necessary for this to work correctly.",rnewman,91722,2017-06-16T01:44:36Z,COLLABORATOR,False,484,49,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,69addb3467741e5a6370e4286905243815063c17,"Much more thorough error handling, correct numeric comparison, add more tests."
727,https://api.github.com/repos/mozilla/mentat/pulls/481,481,Allow instants to pass through schema validation.,We missed a case. Hooray placeholders!,rnewman,91722,2017-06-16T01:41:30Z,COLLABORATOR,True,14,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a0aadb95b36d9243e6cb7e60b4f11c54746b9c23,Allow instants to pass through schema validation.
728,https://api.github.com/repos/mozilla/mentat/pulls/481,481,Allow instants to pass through schema validation.,We missed a case. Hooray placeholders!,rnewman,91722,2017-06-16T01:41:30Z,COLLABORATOR,True,14,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4e8f406e82b2eb643aca0dd70ffc9f95ad6f9f9,Expand cases in SchemaTypeChecking to catch enum bugs.
729,https://api.github.com/repos/mozilla/mentat/pulls/480,480,Fix microsecond conversion,"There are one million microseconds in a second, not one hundred thousand.

Hooray for round-trip tests — they don't catch this kind of bug!",rnewman,91722,2017-06-16T01:41:06Z,COLLABORATOR,True,4,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5a29f70bc98e58862bf233a71d71955569c9204,"There are one million microseconds in a second, not one hundred thousand."
730,https://api.github.com/repos/mozilla/mentat/pulls/478,478,Type tag expansion,"https://github.com/mozilla/mentat/issues/293

This works. It is horrible though. Am working on seeing if I can make it better. But it does work.
N.B. Commits will get squashed  before merge.",fluffyemily,12613048,2017-06-14T14:19:18Z,COLLABORATOR,False,106,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ad7fed33f06eb03f33ce55dafc6f172fbe3da8a,Expand type tags
731,https://api.github.com/repos/mozilla/mentat/pulls/478,478,Type tag expansion,"https://github.com/mozilla/mentat/issues/293

This works. It is horrible though. Am working on seeing if I can make it better. But it does work.
N.B. Commits will get squashed  before merge.",fluffyemily,12613048,2017-06-14T14:19:18Z,COLLABORATOR,False,106,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7851105368512d6b03a1d285e2b49ebf74af483,"Call expand_type_tags when algebrizing.

* Correct errors and add missing cases
* Update tests that now add type tags"
732,https://api.github.com/repos/mozilla/mentat/pulls/478,478,Type tag expansion,"https://github.com/mozilla/mentat/issues/293

This works. It is horrible though. Am working on seeing if I can make it better. But it does work.
N.B. Commits will get squashed  before merge.",fluffyemily,12613048,2017-06-14T14:19:18Z,COLLABORATOR,False,106,20,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,13be228ab76fd5d892a90e80b19dde90ac71f056,"Remove everything except adding matching type tag constraints.

* This is because all other ambigous vars are already held inside `extracted_types` and so we don't need a separate structure to remember them"
733,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,85724f2a14ddb7f7e4fae4b355ceac99b3242421,Pre: implement IntoIterator for ValueTypeSet.
734,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,02f29548910ff6b26c990a88aeb902cf1daa3137,Add a test that late inputs aren't allowed in ground.
735,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cbf9176f7414162058e7aed0b701652d91e5cab8,Refactor arg conversion and ground into separate files.
736,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76b2f164e00674265d8ea5a47c5d2d8019586aaf,"Apply newly bound values to existing columns.

This commit lifts some logic out of the scalar ground handler to apply
elsewhere.

When a new value binding is encountered for a variable to which column
bindings have already been established, we do two things:

- We apply a new constraint to the primary column. This ensures that the
  behavior for ground-first and ground-second is equivalent.
- We eliminate any existing column type extraction: it won't be
  necessary now that a constant value and constant type are known."
737,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20ff0fced1aef93b3d6cc802ee7473f3301e8a97,Implement MATCHES throughout SQL machinery.
738,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,887060d10d59d5170921e4830c9901b7211ce9da,Implement `fulltext`.
739,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5c687c857bf368305702c7beb771b0d51018c7d7,"Pre: ensure that constant floats end up as floats in SQL, never integers."
740,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b63981046edde6bb2200a271fd3ee10ed19854b0,Pre: move Either to mentat_core::util.
741,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8c2bc270b910e5d114536105d1f61266a16803ba,Work on fulltext.
742,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,814141fc87d446ed463b59af43ababcb73f7b402,You can't use fulltext search on a non-fulltext attribute.
743,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4cf8f0f8365d5942755c9f08dae31b85e91bb1d0,Allow for implicit placeholder bindings in fulltext.
744,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2f37bb4c10c3308e49d032345ab00a19c921cc1d,Add fulltext algebrizing tests.
745,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6458ba1c5f506569d79cfd8a49b80a066eba3ae9,"Add an end-to-end test for fulltext.

Note that in this version the score is 0 and a Long. The projector needs to be fixed."
746,https://api.github.com/repos/mozilla/mentat/pulls/477,477,Fulltext search,"This is currently a rebase and cleanup of #402. It now reflects changes I made while revving `ground`, so it builds and passes tests.

I did a fair bit of rebasing to take the opportunity to split up `where_fn.rs`; that refactoring commit contains no other changes, unless I screwed something up.

This isn't quite ready yet: I replaced a bunch of `bail!` with `unimplemented!`, because I want users to be able to unify inputs with fulltext-bound variables, and otherwise have `fulltext` clauses behave consistently with pattern clauses.",rnewman,91722,2017-06-12T21:33:05Z,COLLABORATOR,False,1564,567,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1fa5a26ca90f5d2976dfb0b23d6f69eacd88a579,Support variable fulltext searches. (#479)
747,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7812a01ffe6ef5a3b75d260ec001a288c20fec0c,"Dedupe SQL arguments.

This isn't perfect -- we still need to clone in a couple of cases -- but it avoids us
passing duplicate strings down into SQLite whenever the same value is mentioned more
than once in a query."
748,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,832ec84873098bcd250b55913cfb4582869460c2,Pre: add helpers to ValueTypeSet.
749,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,26a21b90f124bfa3750497c270803119daad59eb,Pre: Handle SrcVar.
750,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,264c5a781d08303c4837878cd6569c1467697ee8,"Pre: Accept EDN vectors in FnArg arguments.

Datomic accepts mostly-arbitrary EDN, and it is actually used: for
example, the following are all valid, and all mean different things:
* `(ground 1 ?x)`
* `(ground [1 2 3] [?x ?y ?z])`
* `(ground [[1 2 3] [4 5 6]] [[?x ?y ?z]])`

We could probably introduce new syntax that expresses these patterns
while avoiding collection arguments, but I don't see one right now.
I've elected to support only vectors for simplicity; I'm hoping to
avoid parsing edn::Value in the query-algebrizer."
751,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9031acf2fb539f5e89d80cef87b2788458c65a9e,Pre: Add Values to query-sql.
752,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c25a88e84723fc978c2900e61eef4231b2660f47,"Pre: flatten the representation of VALUES.

A single vec that's traversed in chunks is more efficient than multiple
vecs… and this ensures that each sub-vec is the same size."
753,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,77bc50d0f4412bcfe6e3becc9f73000a0d24010e,"Pre: simplify values SQL expansion.

This uses `interpose` instead of manual looping."
754,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb6ea98a0a2c0397f5931c2b3e1481093ce04189,Pre: Move PushComputed up module hierarchy; make it public.
755,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,495fbd383da1baa0cfc4eb38cb55602a6a752a2a,Pre: Make it easier to debug binding errors.
756,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8499562440a58b1a78ca0523278447f1a98fae44,Pre: Generalize NonNumericArgument to InvalidArgument.
757,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c8e25dde1cb550b7d1089375c2b7395e8a8932e8,Pre: Modify predicate implementation in preparation for functions that bind.
758,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a0ff51b11e0ea127c75460110bd39c8f16be909,Pre: add ConjoiningClauses::bind_value.
759,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,151f62e17d71bdde651400a3e1f79b36f9bb2ffa,Pre: add ConjoiningClauses::known_type_set.
760,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f9e763d0f025465eaa74f48aa28b65b29853f216,Pre: derive Debug.
761,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,430ffa4192a50e39607558936e13b79d144e287f,Take a dependency on maplit to allow BTreeSet literals.
762,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dafb33d34a881994d8023ecdcc5e1630a648f429,Make rule_vars return unique vars.
763,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e859a5d7eb6da416db89674c1f5fab907d281db0,Part 1: Parse functions in where clauses.
764,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bd6e0e771c6017e9c3196966272d571f796f93ad,"Part 2: refactor projector to be reusable from translator.

This allows the translator to also use bound values in nested queries."
765,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32e5113eafa800406483374a9f33ae4dc8f77870,"Part 3: Handle `ground`.

Flesh out where_fn.

Unfinished: flat args.

More efficient version of BindRel/BindTuple validation.

static str

More is_valid.

More direct handling of ground values.

Pre: add VariableOrPlaceholder::into_var.

Pre: define ErrorKind::GroundBindingsMismatch.

Part 2: extend the projector to use bound values.

Part 4: refactor projector to be reusable from translator.

This allows the translator to also use bound values in nested queries.

Rewrite 'ground' to be less general and more type aware.

This removes nalexander's lovely matrix code. It turned out that
scalar and tuple bindings are sufficiently different from coll
and rel -- they can directly apply as values in the query -- that
there was no point in jumping through hoops to turn those single
values into a matrix.

Furthermore, I've standardized us on a Vec<TypedValue>
representation for rectangular matrices, which should be much
more efficient, but would have required rewriting that code.

Finally, coll and rel are sufficiently different from each other
-- coll doesn't require processing nested collections -- that
my attempts to share code between them fell somewhat flat. I had
lots of nice ideas about zipping together cycles and such, but
ultimately I ended up with relatively straightforward, if a bit
repetitive, code.

The next commit will demonstrate the value of this work -- tests
that exercised scalar and tuple grounding now collapse down to
the simplest possible SQL.

Lots more tests to write to exercise all of this logic.

N.B., this functionality now integrates more tightly with the CC
type system, so grounding a value with a known type can somewhat
do what you mean, and grounding a value with a conflicting type
will fail eagerly. Some of these type actions might need to be
adjusted to fail later.

Fail early."
766,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,16c5b6e9f3df053bb944ac787b72049207696a62,Rework translate tests to follow new behavior.
767,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,72343e41a832492d83ee8348394cd9508d9605ce,Eliminate duplication in SQL output in tests.
768,https://api.github.com/repos/mozilla/mentat/pulls/472,472,Ground rebased,"@rnewman I couldn't tell what the overall picture was with your work on top of my original work, so I rebased into this simpler sequence.  Can you adopt this?  It's just re-ordering and coalescing your change sequence, no additional changes.",ncalexan,1097182,2017-06-07T18:07:02Z,MEMBER,False,1300,135,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a347bca3f7454a7a4e00b5d87b1bd19d258e0fbe,fixup! Part 3: Handle `ground`.
769,https://api.github.com/repos/mozilla/mentat/pulls/471,471,Dedupe SQL arguments.,"This isn't perfect — we still need to clone in a couple of cases — but it avoids us passing duplicate strings down into SQLite whenever the same value is mentioned more than once in a query.

Suggestions for improvement most welcome!",rnewman,91722,2017-06-07T01:23:38Z,COLLABORATOR,False,57,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7812a01ffe6ef5a3b75d260ec001a288c20fec0c,"Dedupe SQL arguments.

This isn't perfect -- we still need to clone in a couple of cases -- but it avoids us
passing duplicate strings down into SQLite whenever the same value is mentioned more
than once in a query."
770,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a4fc04ea865ff4f18304a56a3f9ffa9f04e34927,"Pre: Crib map_{left,right} for Either."
771,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2650fe163d76e5f13ffddea131f21ec60ee29b91,Pre: Intern lookup_ref by reference.
772,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,05129cefbb0bc650d44391d29cd3cf414d2b7fdb,"Pre: Use ValueType rather than Attribute to convert edn::Value to TypedValue.

This is expedient now, but might require work in the future to achieve
better error messages."
773,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b0881a9573040747a04924c84c16b5dd47a0e2e,Pre: Push bookkeeping into an InProcess struct.
774,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0be78cf9567237e3f555dbc1791e55e42547a8fc,Pre: Extract entity_*_into_term_* helpers.
775,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d88823e7c4638a7f2e5f1ab96ea1ff04ac06fda6,"Handle :attribute/_reverse in transactor. Fixes #187

There are two broad approaches:

1) Handle reverse attribute notation dynamically, in the style that
   Datomic does.  This is the most flexible, but it's not a good fit
   given that we produce strongly typed output from the parser.
   Strongly typed input to the transactor has had many benefits, so I
   don't want to roll it back for a relatively unimportant feature
   like reverse notation -- especially not since Mentat does not
   require :db.install/_attribute to modify schema attributes.

2) Handle reverse attribute in the parser itself, so that we can
   produce strongly typed parser output while restricting the input.
   I implemented this first and discovered that it's very difficult to
   give sensible error messages in common cases.

In any case, the bulk of the code is the same between the two
approaches, and I wrote the tests for the dynamic version (with error
output), so that's what I'm rolling with.

This patch preserves the existing indentation, to highlight the
differences.  The next patch will indent."
776,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb220528bfc1cf459f82b2cabebb7883eaebc38b,Post: Indent.
777,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,59a710f80fd8f7e69a83771afc480ed9eceedd28,"Review comments: another test, add `unreversed()`."
778,https://api.github.com/repos/mozilla/mentat/pulls/470,470,Handle :attribute/_reverse in transactor. Fixes #187.,"See commit comments.  I've intentionally not accepted reverse notation with nested vectors and maps; it's difficult to handle with our current parse-then-apply model.  I think it's a reasonable trade-off, and the error message is clear.",ncalexan,1097182,2017-06-06T22:45:57Z,MEMBER,True,552,192,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1659726848e26c3f0c4eabc9b873ad442f5104a,"Post: Reject at parse-time reversed attributes in direct notation with bad values.

This is an optimization that trades rejecting inputs earlier at the
cost of expressive error messages.  It should be possible to recover
the error messages, however.

This will reject input like `[:db/{add,retract} v :attribute/_reversed NOT-AN-ENTITY]`."
779,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e11c6402a89217d9230dba2c35cb73263359fc62,Pre: add helpers to ValueTypeSet.
780,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b1893d73fc3ca1ea38020c4c88b83f25eb49db40,Pre: Handle SrcVar.
781,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9912ea2a560cbce34af876d78dff6e1d59d1645,"Pre: Accept EDN vectors in FnArg arguments.

Datomic accepts mostly-arbitrary EDN, and it is actually used: for
example, the following are all valid, and all mean different things:
* `(ground 1 ?x)`
* `(ground [1 2 3] [?x ?y ?z])`
* `(ground [[1 2 3] [4 5 6]] [[?x ?y ?z]])`

We could probably introduce new syntax that expresses these patterns
while avoiding collection arguments, but I don't see one right now.
I've elected to support only vectors for simplicity; I'm hoping to
avoid parsing edn::Value in the query-algebrizer."
782,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1770eb9701cc6c9cb3b9a3ee783e9afa4a2600d5,Pre: Add Values to query-sql.
783,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f73040f06c031937e4e97ca388cfc21dd2303006,"Pre: flatten the representation of VALUES.

A single vec that's traversed in chunks is more efficient than multiple
vecs… and this ensures that each sub-vec is the same size."
784,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3eee3ac84381ecd86b6410d0cfbad0c6fa4d3452,"Pre: simplify values SQL expansion.

This uses `interpose` instead of manual looping."
785,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce3cc0f084e128ee7a5607cfca5c07760777a191,Pre: Move PushComputed up module hierarchy; make it public.
786,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,efdaab90a2f99ed4c0ec36110edde3d49c5732f5,Pre: Make it easier to debug binding errors.
787,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d01a4946ca8c863a87ccadaf18db26a2f4f39303,Pre: Generalize NonNumericArgument to InvalidArgument.
788,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c9dcc8af9c20d3989f623cdfa5459a5d8c8f8c3c,Pre: Modify predicate implementation in preparation for functions that bind.
789,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,94b21de0c9b4d39ef68105214066251210ddf3e6,Pre: add ConjoiningClauses::bind_value.
790,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b305c67aea3cfaa69d932548c9279b91345851d7,Pre: add ConjoiningClauses::known_type_set.
791,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,212c538ab3dde16162ab05bdfc885946068e588f,Pre: derive Debug.
792,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,656043285ae15845ca2e33d51a8e90fa4f8b62dc,Pre: add ValueTypeSet::of_keywords.
793,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a134e153eb0a9d95977a422376d287fa54243ec1,Take a dependency on maplit to allow BTreeSet literals.
794,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,548beebba884bad8ead1320ab36831383ea15b20,Make rule_vars return unique vars.
795,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87e892b8a6feba66f2614258db333fd671b8f3af,Part 1: Parse functions in where clauses.
796,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e14c8af45bc415ca59513b4ba0466161f52bfa7c,"Part 2: refactor projector to be reusable from translator.

This allows the translator to also use bound values in nested queries."
797,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04a82023fac705876f4d300d2e23c03704140e84,"Part 3: Handle `ground`.

Flesh out where_fn.

Unfinished: flat args.

More efficient version of BindRel/BindTuple validation.

static str

More is_valid.

More direct handling of ground values.

Pre: add VariableOrPlaceholder::into_var.

Pre: define ErrorKind::GroundBindingsMismatch.

Part 2: extend the projector to use bound values.

Part 4: refactor projector to be reusable from translator.

This allows the translator to also use bound values in nested queries.

Rewrite 'ground' to be less general and more type aware.

This removes nalexander's lovely matrix code. It turned out that
scalar and tuple bindings are sufficiently different from coll
and rel -- they can directly apply as values in the query -- that
there was no point in jumping through hoops to turn those single
values into a matrix.

Furthermore, I've standardized us on a Vec<TypedValue>
representation for rectangular matrices, which should be much
more efficient, but would have required rewriting that code.

Finally, coll and rel are sufficiently different from each other
-- coll doesn't require processing nested collections -- that
my attempts to share code between them fell somewhat flat. I had
lots of nice ideas about zipping together cycles and such, but
ultimately I ended up with relatively straightforward, if a bit
repetitive, code.

The next commit will demonstrate the value of this work -- tests
that exercised scalar and tuple grounding now collapse down to
the simplest possible SQL.

Lots more tests to write to exercise all of this logic.

N.B., this functionality now integrates more tightly with the CC
type system, so grounding a value with a known type can somewhat
do what you mean, and grounding a value with a conflicting type
will fail eagerly. Some of these type actions might need to be
adjusted to fail later.

Fail early."
798,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3e0be243d134ada8db4444b7e6e143639922ffc4,Rework translate tests to follow new behavior.
799,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65bbf340b4612c911781a0448c2316d524b7b1e3,Eliminate duplication in SQL output in tests.
800,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,38c3a320e0b217ca3fcbe2842d1ccb072184bc0a,fixup! Part 3: Handle `ground`.
801,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c6ecc70b6bbc90f2608bbe4c12079da45107983b,"Make ValueTypeSet Copy, as it only newtypes EnumSet, which is Copy."
802,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9eaccad89be4eb343d46ed37a8cf2ae62fd803ab,Review comment: simplify result collection.
803,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e173a0f3337c9c42d23693ad13b9948ab865a757,Use vec! to define column type sets.
804,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,28cb2c50e7bdf9f3fea8aa86f54a94d53097f8d6,Review comment: ambiguous.
805,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b5838299d316c2e62f9431db3a597b3218340b6c,ground doesn't take a SrcVar argument.
806,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f15810eddeee4e79aa9913a59b28319cff6ef89,"Mark CC as known-empty on some kinds of impossible ground bindings.

Make EmptyBecause::TypeMismatch take two sets."
807,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,63dbe342fb7cfadc3d6da88ac12ef0cbc55dc188,"Track types correctly: from none, not from all."
808,https://api.github.com/repos/mozilla/mentat/pulls/469,469,Ground (reworked),I'm rebasing and reworking #423 prior to moving on to FTS.,rnewman,91722,2017-06-02T21:01:52Z,COLLABORATOR,False,1742,143,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c197f47c281e7c30c7c31f74c5a02677177631a,Add tests for ground.
809,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b30a2c0a73cac2c25e184b5136b4f939c74d4da,"Create mentat command line.
* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt."
810,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a6c3f6598ae2b4f4283f56380b5b12f3cded0f3,Remove rustc-serialize dependency
811,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,46fc1615fb9a4fa637375f470eed6aca7ab8c218,"Open DB inside CLI (#452) (#463)

* Open named database OR default to in memory database if no name provided

Rearrange workspace to allow import of mentat crate in cli crate

Create store object inside repl when started for connecting to mentat

Use provided DB name to open connection in store

Accept DB name as command line arg.

Open on CLI start

Implement '.open' command to open desired DB from inside CLI

* Implement Close command to close current DB.
* Closes existing open db and opens new in memory db

* Review comment: Use `combine` to parse arguments.

Move over to using Result rather than enums with err

* Accept and parse EDN Query and Transact commands (#453) (#465)

* Parse query and transact commands

* Implement is_complete for transactions and queries

* Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q

* Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
812,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,66c402b20535328b2272dde5e7db6ba21f1ea476,Accept and parse read commands
813,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,de616a4f626c42affb44d6f66dd87266bf038c84,Read from file and execute
814,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7e42aafcc04c85e7375c6dcce71e5883b4563cb5,convert Instant's to TypedValues so they can be parsed properly
815,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b6152cfd4bd58592ce42a74b4e8af016dd89c904,Add movie schema to fixtures.
816,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f9a9aca2f53583f75df10ce5b0fbc567ec79d3ee,Add movie data to fixtures.
817,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a8e3c7e780fdd0af8c6395a452c570cd25fc671,replace `try\!` with `?`
818,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ced479c46617eafedbce6211c39c9a3acab0caeb,Use EDN pretty printer to output QueryResults
819,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,401abde97191e8f4a69604c5e731ea9b33bf39fe,"Rewrite the way we read in files.

* Move file reading into Input rather than repl.
* Handle file command in run in repl.
* Create unexecuted_commands list containing all of the commands left to execute and handle them inside run.
* Move command line args into unexecuted_commands."
820,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,831f7032cee8f043ea0051625bded1a9e9d2ca7d,Complete movie data fixture
821,https://api.github.com/repos/mozilla/mentat/pulls/467,467,Read & execute transactions from file,"https://github.com/mozilla/mentat/issues/456

Depends on https://github.com/mozilla/mentat/issues/454.

Tests to come...",fluffyemily,12613048,2017-05-26T13:06:24Z,COLLABORATOR,False,1663,4,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,223a53cf9a65b63afa3acdc755ebcc8fc4a15269,improve the handling of complete and incomplete commands in input.rs
822,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,525f8766b4eba055102d7bfb2e604b511bcfb46b,"Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands."
823,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99e1c35377b6605a7fd5b1331936140aab520228,"Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl"
824,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,825726ddf9896f1ecd2894709470fa484b9a4ca5,Add query and transact commands to help
825,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,002edeae1e9303e1f4ea35680c65faa3725d601d,Execute queries and transacts passed in at startup
826,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c03b88eb4309f2cfd0bc162a734e88dca970ab86,Execute command line args in order
827,https://api.github.com/repos/mozilla/mentat/pulls/466,466,Send queries and transactions to mentat and output the results,"move outputting query and transaction results out of store and into repl

https://github.com/mozilla/mentat/issues/454 & https://github.com/mozilla/mentat/issues/455

depends on https://github.com/mozilla/mentat/pull/465",fluffyemily,12613048,2017-05-22T15:52:11Z,COLLABORATOR,True,161,13,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,36f6efa1d64ea1257b9ddf9e871925b101aefcae,Addressing rebase issues
828,https://api.github.com/repos/mozilla/mentat/pulls/465,465,Accept and parse EDN Query and Transact commands (#453),"https://github.com/mozilla/mentat/issues/453

depends on https://github.com/mozilla/mentat/pull/463",fluffyemily,12613048,2017-05-16T15:58:26Z,COLLABORATOR,True,364,44,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,102e5283104a383d6773ed9df9aba4c146a9db64,Parse query and transact commands
829,https://api.github.com/repos/mozilla/mentat/pulls/465,465,Accept and parse EDN Query and Transact commands (#453),"https://github.com/mozilla/mentat/issues/453

depends on https://github.com/mozilla/mentat/pull/463",fluffyemily,12613048,2017-05-16T15:58:26Z,COLLABORATOR,True,364,44,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8bb996e4f5ce01d8deace300156f7c8b81caf62,Implement is_complete for transactions and queries
830,https://api.github.com/repos/mozilla/mentat/pulls/465,465,Accept and parse EDN Query and Transact commands (#453),"https://github.com/mozilla/mentat/issues/453

depends on https://github.com/mozilla/mentat/pull/463",fluffyemily,12613048,2017-05-16T15:58:26Z,COLLABORATOR,True,364,44,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e0548e9be220a420026086be4dc77a63a6e4c257,"Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q"
831,https://api.github.com/repos/mozilla/mentat/pulls/465,465,Accept and parse EDN Query and Transact commands (#453),"https://github.com/mozilla/mentat/issues/453

depends on https://github.com/mozilla/mentat/pull/463",fluffyemily,12613048,2017-05-16T15:58:26Z,COLLABORATOR,True,364,44,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,00af587682503b62d6b7173fbbe5eddee4d964fd,"Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands."
832,https://api.github.com/repos/mozilla/mentat/pulls/465,465,Accept and parse EDN Query and Transact commands (#453),"https://github.com/mozilla/mentat/issues/453

depends on https://github.com/mozilla/mentat/pull/463",fluffyemily,12613048,2017-05-16T15:58:26Z,COLLABORATOR,True,364,44,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,38d81b7a46d6cb5053fa6d2ad80a33ff08fad383,"Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
833,https://api.github.com/repos/mozilla/mentat/pulls/463,463,Open DB inside CLI (#452),"* Pass in db as command line arg
* Open from inside repl using `.open [db_name]`
* Default to in memory DB if no db arg provided.

#452 ",fluffyemily,12613048,2017-05-10T09:44:24Z,COLLABORATOR,True,817,55,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f3d39d41946bb76f72ce71acc6cdbba1c9073c4b,"Open named database OR default to in memory database if no name provided

Rearrange workspace to allow import of mentat crate in cli crate

Create store object inside repl when started for connecting to mentat

Use provided DB name to open connection in store

Accept DB name as command line arg.

Open on CLI start

Implement '.open' command to open desired DB from inside CLI"
834,https://api.github.com/repos/mozilla/mentat/pulls/463,463,Open DB inside CLI (#452),"* Pass in db as command line arg
* Open from inside repl using `.open [db_name]`
* Default to in memory DB if no db arg provided.

#452 ",fluffyemily,12613048,2017-05-10T09:44:24Z,COLLABORATOR,True,817,55,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,45d00c43ac49e5b6a5af9b5cec745d1cf9b728a4,"Implement Close command to close current DB.
* Closes existing open db and opens new in memory db"
835,https://api.github.com/repos/mozilla/mentat/pulls/463,463,Open DB inside CLI (#452),"* Pass in db as command line arg
* Open from inside repl using `.open [db_name]`
* Default to in memory DB if no db arg provided.

#452 ",fluffyemily,12613048,2017-05-10T09:44:24Z,COLLABORATOR,True,817,55,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3ff534690c1ac12b56799aefa848e70ef6ee97c,"Review comment: Use `combine` to parse arguments.

Move over to using Result rather than enums with err"
836,https://api.github.com/repos/mozilla/mentat/pulls/463,463,Open DB inside CLI (#452),"* Pass in db as command line arg
* Open from inside repl using `.open [db_name]`
* Default to in memory DB if no db arg provided.

#452 ",fluffyemily,12613048,2017-05-10T09:44:24Z,COLLABORATOR,True,817,55,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,abcbdf54ad6d200433b3f3089ba159f5bba63f6a,"Accept and parse EDN Query and Transact commands (#453) (#465)

* Parse query and transact commands

* Implement is_complete for transactions and queries

* Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q

* Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
837,https://api.github.com/repos/mozilla/mentat/pulls/462,462,Allow opening a DB.,Still needs a test…,rnewman,91722,2017-05-09T16:30:36Z,COLLABORATOR,True,4,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ab221dcca6fa4b0311f175544e53df74b46c4e9d,Allow opening a DB. (#462)
838,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73f179c88780ab618a8d962dc359d7b5c9e50eeb,Strip out Clojure tests and release directories.
839,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,44d50c9005a728967f101c1dbe0c4fd5e1589011,Update README for oxidation.
840,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cbd278dd7e0b845087d346bd51ae6f2596f1fd10,Remove Clojure and JS application code.
841,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f8682a65fae6318483bda5268def503435329dc8,"Initial Rust commit.

If you want to go fast, go alone. If you want to go far, go together."
842,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,789eb59c9ae9918929527fab81da56a58908902a,Alter Travis config to build Rust.
843,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,973c32ff7715b632e60541afc312295c94011bc5,"Update test boilerplate for running on travis (#134). r=rnewman

* Include a local and external test.
* Add license blocks."
844,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4bebb3cbe4a0206d44cc9cc740fa066485955275,Include instructions for building and testing with cargo
845,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7c97e776cf324d98703e5d72a4af29235ec4c6a,"Merge pull request #135 from mozilla/bgrins-patch-1-1

Include instructions for building and testing with cargo"
846,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5ac47fd6ffd8d6cfe0fc9910c0d4ac417708ddf4,Add a stub CLI tool and run tests on it. Fixes #136. r=rnewman
847,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,38e8c4922385a191afb39d8e8e24024c96420bfa,Move existing code into js/ subfolder (#137)
848,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b8257a725680c148e14ab7df52fd47d622136f3,"Create a new crate for the query parser.  Fixes #138. r=rnewman

Starting to work out the project layout for sub-crates.  The crate inside query-parser/ is ""datomish-query-parser"" and the core code in src/ depends on it."
849,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4700eace157e02505792503da52a4ab5b4ea73ef,Update README with extra details about using cargo
850,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fa3c99f550e5d9b06f56c7a76168ff48284cbc83,"Add a back-pointer to master, because GitHub shows the rust branch by default."
851,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8a5201542224489b731ce08583375e3874aa3d5e,Take on rusqlite dependency. Fixes #148. r=rnewman
852,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,981dc6ade95123ea490c6e8bbe2f508dc73d01f0,Ignore .DS_Store files. r=me
853,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f9c532d8d8a02e2581498504b2e4907e4baff4a,Remove old JS code; we can bring it back if we want it.
854,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76b5a5e43bb8f0038738154d2dbd750607722cb3,Rename to Project Mentat (build).
855,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7f3347981c5637bcdcccf82908ce67fd7acc4d61,Rename to Project Mentat (docs).
856,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a4c75ba4480040b843ec9755909573f8ef73577,Rename to Project Mentat (src).
857,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3af0d479aaf2f467627685ffbcb4e72749cd713d,Rename to Project Mentat (cli).
858,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,84f468ce411d2b3ce36b4e8b1ccaed731ec31af0,Rename to Project Mentat (tests).
859,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a665926fe6f8330de499ab6b8e67674a67ad439f,Rename to Project Mentat (query-parser).
860,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9c439bd00d5b2b25047789e55628ad006957f1c,Use underscores for crate names.
861,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a54cd9958c2c1e8439e9244a2808ce9e29a0a084,Fix Travis.
862,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,22ebcd65f3afeca553303abd1a427977aa851f18,Rename everything to Project Mentat. r=bgrins
863,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,476f04e27b5524a30d35c9f878526ed9eca4a0b7,Implement a rudimentary Keyword struct and the beginnings of ident/entid.
864,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,daddfd3e0f6b5e210b317713b51bd8efdb52e3a6,"Add query sub-crate, implementing more of the beginnings of the query language."
865,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6d10774fc85562f18e30e9b3adc61179dc683925,Move the bin to src and take on clap dependency for command line arg parsing. Fixes #150. r=rnewman
866,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cd9517e5fd04a657b8d97311d5db15911a151c29,Run `cargo fmt`. r=me
867,https://api.github.com/repos/mozilla/mentat/pulls/461,461,Implement code path for re-opening databases,"This means we can't actually reopen DBs yet, which is a bit of a snag.

```
pub fn ensure_current_version(conn: &mut rusqlite::Connection) -> Result<DB> {
    if rusqlite::version_number() < MIN_SQLITE_VERSION {
        panic!(""Mentat requires at least sqlite {}"", MIN_SQLITE_VERSION);
    }

    let user_version = get_user_version(&conn)?;
    match user_version {
        0 => create_current_version(conn),
        // TODO: support updating or re-opening an existing store.
        v => bail!(ErrorKind::NotYetImplemented(format!(""Opening databases with Mentat version: {}"", v))),
    }
}
```",rnewman,91722,2017-05-09T16:28:08Z,COLLABORATOR,False,21266,11630,187,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,71960de6367043948bc997468c631cced77096b8,"Add test databases.

* v1empty.db: an empty v1 DB, which is the original on-disk format.
* v2empty.db: an empty v2 DB. This includes bootstrapped schema metadata attributes.
* v1tofino.db: a v1 DB that was created by Tofino."
868,https://api.github.com/repos/mozilla/mentat/pulls/450,450,Create mentat command line.,"* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt.

usage:

```
> cd tools/cli
> cargo run
```

Also has simple help

```
> cargo run -- -h
```

and version

```
> cargo run -- -v
```
",fluffyemily,12613048,2017-05-09T10:01:51Z,COLLABORATOR,False,1137,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9b30a2c0a73cac2c25e184b5136b4f939c74d4da,"Create mentat command line.
* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt."
869,https://api.github.com/repos/mozilla/mentat/pulls/450,450,Create mentat command line.,"* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt.

usage:

```
> cd tools/cli
> cargo run
```

Also has simple help

```
> cargo run -- -h
```

and version

```
> cargo run -- -v
```
",fluffyemily,12613048,2017-05-09T10:01:51Z,COLLABORATOR,False,1137,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a6c3f6598ae2b4f4283f56380b5b12f3cded0f3,Remove rustc-serialize dependency
870,https://api.github.com/repos/mozilla/mentat/pulls/450,450,Create mentat command line.,"* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt.

usage:

```
> cd tools/cli
> cargo run
```

Also has simple help

```
> cargo run -- -h
```

and version

```
> cargo run -- -v
```
",fluffyemily,12613048,2017-05-09T10:01:51Z,COLLABORATOR,False,1137,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,46fc1615fb9a4fa637375f470eed6aca7ab8c218,"Open DB inside CLI (#452) (#463)

* Open named database OR default to in memory database if no name provided

Rearrange workspace to allow import of mentat crate in cli crate

Create store object inside repl when started for connecting to mentat

Use provided DB name to open connection in store

Accept DB name as command line arg.

Open on CLI start

Implement '.open' command to open desired DB from inside CLI

* Implement Close command to close current DB.
* Closes existing open db and opens new in memory db

* Review comment: Use `combine` to parse arguments.

Move over to using Result rather than enums with err

* Accept and parse EDN Query and Transact commands (#453) (#465)

* Parse query and transact commands

* Implement is_complete for transactions and queries

* Improve query parser. Am still not happy with it though.

There must be some way that I can retain the eof() after the `then` that means I don't have to move the skip on spaces and eof

Make in process command storing clearer.

Add comments around in process commands.
Add alternative commands for transact/t and query/q

* Address review comments r=nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Send queries and transactions to mentat and output the results (#466)

* Send queries and transactions to mentat and output the results

move outputting query and transaction results out of store and into repl

* Add query and transact commands to help

* Execute queries and transacts passed in at startup

* Address review comments =nalexander.

* Bump rust version number.
* Use `bail` when throwing errors.
* Improve edn parser.
* Remove references to unused `more` flag.
* Improve naming of query and transact commands.

* Execute command line args in order

* Addressing rebase issues"
871,https://api.github.com/repos/mozilla/mentat/pulls/450,450,Create mentat command line.,"* Create tools directory containing new crate for mentat_cli.
* Add simple cli with mentat prompt.

usage:

```
> cd tools/cli
> cargo run
```

Also has simple help

```
> cargo run -- -h
```

and version

```
> cargo run -- -v
```
",fluffyemily,12613048,2017-05-09T10:01:51Z,COLLABORATOR,False,1137,3,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ecc926086a4d9fa56f1ea598477eaff10ec8b609,"Exit CLI (#457) (#484) r-rnewman

* Implement exit command for cli tool

* Address review comments r=rnewman

* Include exit commands in help"
872,https://api.github.com/repos/mozilla/mentat/pulls/449,449,Add code coverage to Travis.,,rnewman,91722,2017-05-09T08:54:18Z,COLLABORATOR,False,37,6,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a1c72cde21677699edf2c1e7c96bbdf85c97598,"Begin moving web server to a separate crate.

This doesn't yet introduce a working Cargo.toml for 'mentatweb', but it
does allow RLS to build correctly without errors, and it reduces the
core library's dependency space, which is more important in the short
term."
873,https://api.github.com/repos/mozilla/mentat/pulls/449,449,Add code coverage to Travis.,,rnewman,91722,2017-05-09T08:54:18Z,COLLABORATOR,False,37,6,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,def0a467171dd9f218b438a08af4aaaa6b7a0a85,Attempting to add code coverage.
874,https://api.github.com/repos/mozilla/mentat/pulls/448,448,Begin moving web server to a separate crate.,"This doesn't yet introduce a working Cargo.toml for 'mentatweb', but it
does allow RLS to build correctly without errors, and it reduces the
core library's dependency space, which is more important in the short
term.",rnewman,91722,2017-05-09T08:30:11Z,COLLABORATOR,True,6,6,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a1c72cde21677699edf2c1e7c96bbdf85c97598,"Begin moving web server to a separate crate.

This doesn't yet introduce a working Cargo.toml for 'mentatweb', but it
does allow RLS to build correctly without errors, and it reduces the
core library's dependency space, which is more important in the short
term."
875,https://api.github.com/repos/mozilla/mentat/pulls/447,447,[tx] Forbid insertion of unknown entity IDs,"The Datomic docs state the following:

>  There are three ways to sepcify an entity id:
> - a temporary id for a new entity being added to the database
> - an existing id for an entity that's already in the database
> - an identifier for an entity that's already in the database

Note that _not_ mentioned is ""by making up a new entity ID"".

The problem with simply making up a new entity ID is that it'll collide with tempid allocations, either within a transact itself, or with a later tempid allocation colliding with an existing entity.

I've written a couple of failing tests for this. I believe the most straightforward and robust solution is for non-syncing code to simply be forbidden from transacting new raw entity IDs: it should use upserting or tempids to define new entities.

A simple and cheap check is to ensure that every entid in transact input is within the used part ranges. A more thorough solution would be to maintain a set of every mentioned entity ID. We might be doing this anyway for syncing.",rnewman,91722,2017-05-08T03:00:59Z,COLLABORATOR,False,132,32,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4ebf56447e5d363040f754d72b43743c354d501,"Don't allow callers to specify arbitrary new entity IDs. (#447)

This commit adds a check to the partition map that a provided entity ID
has been mentioned (i.e., is present in the start:index range of one of
our partitions).

We introduce a newtype for known entity IDs, using this internally in
the tx expander to track user-provided entids that have passed the above
check (and IDs that we allocate as part of tempid processing). This
newtype is stripped prior to tx assertion.

In order that DB tests can continue to write

  [:db/add 111 :foo/bar 222]

we add an additional fake partition to our test connections, ranging
from 100 to 1000."
876,https://api.github.com/repos/mozilla/mentat/pulls/444,444,Parse without copying.  Fixes #436.,,ncalexan,1097182,2017-05-05T20:26:03Z,MEMBER,False,745,482,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a574bd1bb178cd4e82b244d5395ee46ccb3aa3b0,"Pre: Move macros out of lib.rs.

It seems very subtle to use macros in tests: I needed to separate the
modules in order to control load order to get everything to work."
877,https://api.github.com/repos/mozilla/mentat/pulls/444,444,Parse without copying.  Fixes #436.,,ncalexan,1097182,2017-05-05T20:26:03Z,MEMBER,False,745,482,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,40aa10219579e3d8d0d7b484b4feda16a602a624,"Parse without copying; parse keyword maps using macros.

This is a big commit, but it breaks into two conceptual pieces.  The
first is to ""parse without copying"".  We replace a stream of an owned
collection of edn::ValueAndSpan and instead have a stream of a
borrowed collection of &edn::ValueAndSpan references.  (Generally,
this is represented as an iterator over a slice, but it can be over
other things too.)  Cloning such iterators is constant time, which
improves on cloning an owned collection of edn::ValueAndSpan, which is
linear time in the length of the collection and additional time
depending on the complexity of the EDN values.

The second conceptual piece is to parse keyword maps using a special
parser and a macro to build the parser implementations.  Before, we
created a new edn::ValueAndSpan::Map to represent a keyword map in
vector form; since we're working with &edn::ValueAndSpan references
now, we can't create an &edn::ValueAndSpan reference with an
appropriate lifetime.  Therefore we generalize the concept of
iteration slightly and turn keyword maps in map form into linear
iterators by flattening the value maps.  This is a potentially
obscuring transformation, so we have to take care to protect against
some failure cases.  (See the comments and the tests in the code.)

After these changes, parsing using `combine` is linear time (and
reasonably fast)."
878,https://api.github.com/repos/mozilla/mentat/pulls/444,444,Parse without copying.  Fixes #436.,,ncalexan,1097182,2017-05-05T20:26:03Z,MEMBER,False,745,482,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,34627e5d7f9dd81188fe520634ea8080257276f6,Post: Use choice instead of or.
879,https://api.github.com/repos/mozilla/mentat/pulls/441,441,Bump dependency versions.,You probably need to run `cargo update`.,rnewman,91722,2017-05-03T18:30:07Z,COLLABORATOR,True,16,50,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f4b8e76ae0adb22106544909ff7b5ac234f4e49b,Remove outdated slog logging.
880,https://api.github.com/repos/mozilla/mentat/pulls/441,441,Bump dependency versions.,You probably need to run `cargo update`.,rnewman,91722,2017-05-03T18:30:07Z,COLLABORATOR,True,16,50,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3138c3ed181aaccb9f54ac2a4d67a00ebf82469a,Bump rusqlite to 0.11.
881,https://api.github.com/repos/mozilla/mentat/pulls/441,441,Bump dependency versions.,You probably need to run `cargo update`.,rnewman,91722,2017-05-03T18:30:07Z,COLLABORATOR,True,16,50,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,12144e30eaf6c48220c95ef92769294fbdf867fd,Bump and under-specify dependencies.
882,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,407dd7a07a51f93b762bd78d1f0aa633a2100231,Pre: unused import in translate.rs.
883,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,044635e8bcaa96eea9393b43677a86a00dbeb4d1,"Part 1: flatten V2 schema into V1. Add UUID and URI.

Bump expected ident and bootstrap datom count in tests."
884,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,19a1856253d54466bea0cc993a83a6d6b028fc18,Part 2: take a dependency on rusqlite for query arguments.
885,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a7e2752a594257ccf0e5c7f56103323ea27c590,Part 3: extend ValueType and TypedValue to include Uuid.
886,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,58a310a6e12ea47a57f20bf911e98426c892990e,Part 4: add Uuid to query arguments.
887,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ab3600e288f318439c0c8ae4b493a394d530dc0f,Part 5: parse edn::Value::Uuid.
888,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,041b29cadfde603413ff266dddcd6ca573c5b472,Part 6: extend db to support Uuid.
889,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03f107c425f24a256cfbd303d2adba8b73d4442d,Part 7: parse and algebrize UUIDs in queries.
890,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f21a285afb4b52d87cbd69e158558fc825d2ab0a,Part 8: add a tx-parser test for #f NaN and #uuid.
891,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b53abbd851070687cb69d71e3fc2237070a900e,Part 1: parse #inst in EDN and throughout query engine.
892,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,abf625775facdb901af89ca8c1ce5113e4c1419e,Part 2: instants never matches integers in queries.
893,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bc5ffdbc341698d3779ee3474c3947d432493980,Part 3: handle instants in db.
894,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b03e89fb313f734eadf69dfca5d7e96be131b7d5,Part 4: use DateTime for tx_instants.
895,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4d008925f04c9526c43c5eab425c2bfb76cea473,Add a test for adding and querying UUIDs and instants.
896,https://api.github.com/repos/mozilla/mentat/pulls/438,438,"UUIDs and instants. Fixes #44, #45, #426, #427.",At present this means you can't write a query comparing timestamps (to timestamps or integers!). I'll do that in a follow-up.,rnewman,91722,2017-04-28T20:02:39Z,COLLABORATOR,True,495,126,28,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,355314d6162dbca18298aad1da9f0af63d007296,Review comments.
897,https://api.github.com/repos/mozilla/mentat/pulls/437,437,Could not search,Just putting this in a PR to use from `git hub`.,ncalexan,1097182,2017-04-28T16:43:14Z,MEMBER,False,4357,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,67b8fcc987ada4814445a4e2decaeac3dc05a4e2,initial test
898,https://api.github.com/repos/mozilla/mentat/pulls/437,437,Could not search,Just putting this in a PR to use from `git hub`.,ncalexan,1097182,2017-04-28T16:43:14Z,MEMBER,False,4357,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0361d430ffb44fc9f933dc4d764ce9b9616e126f,fix up data some more no :db/docs or :db/ident :db/*
899,https://api.github.com/repos/mozilla/mentat/pulls/437,437,Could not search,Just putting this in a PR to use from `git hub`.,ncalexan,1097182,2017-04-28T16:43:14Z,MEMBER,False,4357,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3faa45cad08c81b1e38c513ebe658e908f09c0f7,update dataset to trigger error
900,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1a9707ab4ea1172c699b87ad01c2d7de06df3b42,"Part 1: define ValueTypeSet.

We're going to use this instead of `HashSet<ValueType>` so that we can clearly express
the empty set and the set of all types, and also to encapsulate a switch to `EnumSet`."""
901,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d1620eec13cfaf2bd14fb4fd3274c60f83e3538,Part 2: use ValueTypeSet.
902,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b148ee571462265c7a6566e53a561584c8a75aaf,Part 3: fix type expansion.
903,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e7b709a037f7b747bec40d7e3ed056298d79a989,Part 4: add a test for type extraction from nested `or`.
904,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,58e3dd5bdc45174bb53b35073e75ee9e69d4bd55,Review comments.
905,https://api.github.com/repos/mozilla/mentat/pulls/424,424,[query] Complex `or` does not widen `known_types` correctly when arms agree,"In `query-translator/tests/translate.rs`, I get a panic about known and extracted types with:
```rust
#[test]
fn test_complex_nested_or_join_type_projection() {
    let mut schema = Schema::default();
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title""), 98);
    add_attribute(&mut schema, 98, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });
    associate_ident(&mut schema, NamespacedKeyword::new(""page"", ""title2""), 97);
    add_attribute(&mut schema, 97, Attribute {
        value_type: ValueType::String,
        ..Default::default()
    });

    let input = r#""[:find [?y]
                    :where
                    (or
                      (or
                        [_ :page/title ?y])
                      (or
                        [_ :page/title ?y]))]""#;

    let SQLQuery { sql, args } = translate(&schema, input, None);
    assert_eq!(args, vec![]);
}
```
",rnewman,91722,2017-04-21T02:36:00Z,COLLABORATOR,True,254,47,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d6875b17b094ce3a9fb9e026fabf40e9f795f3d,Review comments: simplify ValueTypeSet.
906,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5cef10d3952cfe534b08759f92a17e8f5a93595,Pre: Handle SrcVar.
907,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,028c3be2e49545e962e49f129bf836ad6550af9c,"Pre: Accept EDN vectors in FnArg arguments.

Datomic accepts mostly-arbitrary EDN, and it is actually used: for
example, the following are all valid, and all mean different things:
* `(ground 1 ?x)`
* `(ground [1 2 3] [?x ?y ?z])`
* `(ground [[1 2 3] [4 5 6]] [[?x ?y ?z]])`

We could probably introduce new syntax that expresses these patterns
while avoiding collection arguments, but I don't see one right now.
I've elected to support only vectors for simplicity; I'm hoping to
avoid parsing edn::Value in the query-algebrizer."
908,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,204bc2f1e1aee33b34f24198333590635b803b68,Part 1: Parse functions in where clauses.
909,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,391272a172396cc6b5dd0d2acf23dd07a37fc0c6,"Review comment: Find, not Bind."
910,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ffbcfff682aadc80a2882e5411efab780cebab98,Pre: Add Values to query-sql.
911,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87d88a9f105d3f225ef7774b9d2279d4a43c8864,Pre: Modify predicate implementation in preparation for functions that bind.
912,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c5052099b429a3efc1ee3e29821558abb1c2dcb,Pre: Accumulate variables from WhereFn.
913,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a067190a611ebc1243755c8abc33d30bbc340254,Pre: Move PushComputed up module hierarchy; make it public.
914,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ddd6b28fda63f49af93d701d5e0ad66567c3bbd,Pre: Make it easier to debug binding errors.
915,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3e7021b31a895b56cc059c9ae65ca69a06540742,Pre: Generalize NonNumericArgument to InvalidArgument.
916,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9376079a590fd15e4e32a59e3b60a5a7815de8f6,Part 2: Handle `ground`.
917,https://api.github.com/repos/mozilla/mentat/pulls/423,423,Ground,,ncalexan,1097182,2017-04-20T16:38:37Z,MEMBER,False,990,51,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20b28dd1f80c3b6eb11803ccb117c9da19a78fda,Part 3: Fail to bind an input variable.
918,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8d1714361c322248f25fbb48d701bac041ad939,Part 1 - Parse `not` and `not-join`
919,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,74c85ef8236f0e22de7a0168c293325a551b76c9,Part 2 - Validate `not` and `not-join` pre-algebrization
920,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4eeb392cec012d658a3ff1cd6cbd5924703aec0,"Address review comments rnewman.
* Remove `WhereNotClause` and populate `NotJoin` with `WhereClause`.
* Fix validation for `not` and `not-join`, removing tests that were invalid.
* Address rustification comments."
921,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,149433623e4b3cd85b88771a4ebb7dff90e93525,Rebase against `rust` branch.
922,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,06670c418e7f9f66f994010990dfdf5758f7fa8d,"Part 3 - Add required types for NotJoin.
* Implement `PartialEq` for
`ConjoiningClauses` so `ComputedTable` can be included inside `ColumnConstraint::NotExists`"
923,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cdc559cc8658afceb1a0d7a9c8f02e100b97ffbb,Part 4 - Implement `apply_not_join`
924,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1a0d4d1c609ba1a64873ea6c60ad0bd5608bab4,Part 5 - Call `apply_not_join` from inside `apply_clause`
925,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ba26e582392e2d7c12ccf756df1e939da2992126,Part 6 - Translate `not-join` into `NOT EXISTS` SQL
926,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9db938c3df7c57ef6ba4f7c6debef766b6287c38,"Address review comments.

* Rename `projected` to `unified` to better describe the fact that we are not projecting any variables.
* Check for presence of each unified var in either `column_bindings` or `input_bindings` and bail if not there.
* Copy over `input_bindings` for each var in `unified`.
* Only copy over the first `column_binding` for each variable in `unified` rather than the whole list.
* Update tests."
927,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,db079cab389a5be60abaa105846c66dae560769f,"Address review comments.

* Make output from Debug for NotExists more useful"
928,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,62339764816a8eecf836d6a691dd659f48438dbc,Clear up misunderstanding. Any single failing clause in the not will cause the entire not to be considered empty
929,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,378e5cb83df10b9788e52428db20afe06e3c4b50,"Address review comments.

* Remove Limit requirement from cc_to_exists.
* Use Entry.or_insert instead of matching on the entry to add to column_bindings.
* Move addition of value_bindings to before apply_clauses on template.
* Tidy up tests with some variable reuse.
* Addressed nits,"
930,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,50ce0911596e3d0431433c8c5cbec16d2d28f5bd,"Address review comments.

* Move addition of column_bindings to above apply_clause.
* Update tests."
931,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b4f68a5e93a0ff821178d3d7ebf55749f02f541,Add test to ensure that unbound vars fail
932,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,946346debacc4c10c70403d4ee0a48595b3df5c4,Improve test for unbound variable to check for correct variable and error
933,https://api.github.com/repos/mozilla/mentat/pulls/422,422,Parse and Algebrize `not` & `not-join`.,"Parse, Algebrize and Translate `not` and `not-join`

https://github.com/mozilla/mentat/issues/389
https://github.com/mozilla/mentat/issues/302
https://github.com/mozilla/mentat/issues/303",fluffyemily,12613048,2017-04-19T12:50:47Z,COLLABORATOR,True,921,14,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c7cf3fa5f402d71734beda7276c990a75cfb650a,address nits
934,https://api.github.com/repos/mozilla/mentat/pulls/420,420,Add :limit to queries,"At present we take limits as an argument alongside the query.

That's flawed: the limit is used when algebrizing (no need to use `DISTINCT` when only fetching one result); in some cases it can be included in the generated SQL; and it breaks our ability to associate cached prepared statements back to input Datalog. Quite apart from all that, it's nice to be able to stuff everything — including ordering and limiting — into the same blob, and supporting limit arguments makes our code more complex.

I plan to:

- Parse `:limit` alongside `:order`.
- Allow the use of variable bindings for `:limit`.
- Remove the existing limit argument mechanism.",rnewman,91722,2017-04-19T02:07:43Z,COLLABORATOR,True,394,140,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b843b61287ffb1bfa275296027a7f806a00abc7,Pre: put query parts in alphabetical order.
935,https://api.github.com/repos/mozilla/mentat/pulls/420,420,Add :limit to queries,"At present we take limits as an argument alongside the query.

That's flawed: the limit is used when algebrizing (no need to use `DISTINCT` when only fetching one result); in some cases it can be included in the generated SQL; and it breaks our ability to associate cached prepared statements back to input Datalog. Quite apart from all that, it's nice to be able to stuff everything — including ordering and limiting — into the same blob, and supporting limit arguments makes our code more complex.

I plan to:

- Parse `:limit` alongside `:order`.
- Allow the use of variable bindings for `:limit`.
- Remove the existing limit argument mechanism.",rnewman,91722,2017-04-19T02:07:43Z,COLLABORATOR,True,394,140,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03f916ab84038af5ec70c908dbe6e8da67ee6256,Pre: rename 'input' to 'query' in translate tests.
936,https://api.github.com/repos/mozilla/mentat/pulls/420,420,Add :limit to queries,"At present we take limits as an argument alongside the query.

That's flawed: the limit is used when algebrizing (no need to use `DISTINCT` when only fetching one result); in some cases it can be included in the generated SQL; and it breaks our ability to associate cached prepared statements back to input Datalog. Quite apart from all that, it's nice to be able to stuff everything — including ordering and limiting — into the same blob, and supporting limit arguments makes our code more complex.

I plan to:

- Parse `:limit` alongside `:order`.
- Allow the use of variable bindings for `:limit`.
- Remove the existing limit argument mechanism.",rnewman,91722,2017-04-19T02:07:43Z,COLLABORATOR,True,394,140,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7459623808f886c0e1a120f8125cc8d98ce923c4,Part 1: parse :limit.
937,https://api.github.com/repos/mozilla/mentat/pulls/420,420,Add :limit to queries,"At present we take limits as an argument alongside the query.

That's flawed: the limit is used when algebrizing (no need to use `DISTINCT` when only fetching one result); in some cases it can be included in the generated SQL; and it breaks our ability to associate cached prepared statements back to input Datalog. Quite apart from all that, it's nice to be able to stuff everything — including ordering and limiting — into the same blob, and supporting limit arguments makes our code more complex.

I plan to:

- Parse `:limit` alongside `:order`.
- Allow the use of variable bindings for `:limit`.
- Remove the existing limit argument mechanism.",rnewman,91722,2017-04-19T02:07:43Z,COLLABORATOR,True,394,140,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c0f8ccad8bbb3f98532fd6c0d7a6c8f4ba317edb,Part 2: validate and escape variable parameters in SQL.
938,https://api.github.com/repos/mozilla/mentat/pulls/420,420,Add :limit to queries,"At present we take limits as an argument alongside the query.

That's flawed: the limit is used when algebrizing (no need to use `DISTINCT` when only fetching one result); in some cases it can be included in the generated SQL; and it breaks our ability to associate cached prepared statements back to input Datalog. Quite apart from all that, it's nice to be able to stuff everything — including ordering and limiting — into the same blob, and supporting limit arguments makes our code more complex.

I plan to:

- Parse `:limit` alongside `:order`.
- Allow the use of variable bindings for `:limit`.
- Remove the existing limit argument mechanism.",rnewman,91722,2017-04-19T02:07:43Z,COLLABORATOR,True,394,140,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1fe57ee3b06ff8ac6deb7c2e40eb712f9a3524f,"Part 3: algebrize and translate limits.

Handle constant and variable limits in queries."
939,https://api.github.com/repos/mozilla/mentat/pulls/419,419,Make Conn public,This is needed for the neon experiment I'm working on,bgrins,95570,2017-04-18T17:26:56Z,MEMBER,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4abd169bc3fb625b399f061cd3574aeb05fedfb,Make struct Conn public
940,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fbf4299d245fd7c5c557392ff8be7ce50ce8df9b,Pre: unused imports.
941,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3df857aaa47ae3bf3be44d83067f1ef3066b0701,Pre: add two checks to translate tests to fix unused var warning.
942,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b614632facd43aae478314c9da025a47e16f61bd,"Pre: take Variables instead of Strings in public API, for now."
943,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0e3a787b8d4f36c05c99c9d66270001e0dba0b63,Pre: define Display for ValueType.
944,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,17db8e46c67500807505235a709d8bef58d04552,"Part 1: parse :in.

We also at this point switch from using `Vec<Variable>` to
`BTreeSet<Variable>`. This allows us to guarantee no duplicates later;
we'll reject duplicates at parse time."
945,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,48b1a7867fde6727ff3ad57ae3f5a92af59bbe9e,"Part 2: define a type to encapsulate query inputs.

This is for two reasons.

Firstly, we need to track the types of inputs, their values, and also
the input variables; adding a struct gives us a little more clarity.

Secondly, when we come to implement prepared statements, we'll be
algebrizing queries without having the values available. We'll be able
to do a better job of algebrizing, and also do more validating, if we
allow callers to specify the types of variables in advance, even if the
values aren't known."
946,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d7e04250e4097807aa76d76cd2c7a335b9f8af48,"Part 3: define keep_intersected_keys.

We'll use this to drop unneeded values from input maps, if lazy callers
reuse a general-purpose map for multiple queries."
947,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dbbfdb29f77b0e25c8ab8e00c24780d7c5aad0e1,"Part 4: pass inputs through algebrizing and execution. (#418)

This also adds a test that an `UnboundVariables` error is raised if a
variable mentioned in the `:in` clause isn't bound."
948,https://api.github.com/repos/mozilla/mentat/pulls/418,418,Finish passing input parameters through to queries,"In the course of starting another feature, I realized this wasn't finished.",rnewman,91722,2017-04-17T22:08:48Z,COLLABORATOR,False,361,78,22,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8a29f869108d865761b1fd6767f38dfd65c3de9e,Review comments: downgrade to error-chain 0.8.1 for Send + Sync bound; use combine::primitive::Error.
949,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5f799323616546c50f35f81ca93b7266e3799564,Pre: refactor projector code.
950,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5db087020988e72940ab0e719bb3eadd175cb72a,Part 1: maintain 'with' variables in AlgebrizedQuery.
951,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d2193bd6398a104631e13be8a835ba3c7d122ec,"Part 2: include necessary 'with' variables in SQL projection list.

The test produces projection elements for `:with`, even though there are
no aggregates in the query. This test will need to be adjusted when we
optimize this away!"
952,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f103a26259c32f212b8d908952169e23911cee9d,Pre: make bound_value public.
953,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e3f56ed316193a1d501722911ca7294bebbaee0a,Pre: generalize ErrorKind::UnboundVariable for use in order.
954,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5102a55ebf3706f7f152bc422f3fe1e90a2e7591,"Part 1: parse (direction, var) pairs."
955,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,053533b9bb9e2f6dc427f0d3efa19c7ed750f16d,Part 2: parse :order clause into FindQuery.
956,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ac438bd2d0cbb083835e1a199b41769f8fe4d3b8,"Part 3: include order variables in algebrized query.

We add order variables to :with, so we can reuse its type tag projection
logic, and so that we can phrase ordering in terms of variables rather
than datoms columns."
957,https://api.github.com/repos/mozilla/mentat/pulls/416,416,Implement ordering,"Built on top of #414.

Note that this _should_ order numbers correctly, because both `Long` and `Double` have the same type tag (5). But there's no test for that yet.",rnewman,91722,2017-04-15T01:02:37Z,COLLABORATOR,False,266,36,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9302e1ace7d5808bcdbfd5c3aa1e2fc01b338bd5,Part 4: produce SQL for order clauses.
958,https://api.github.com/repos/mozilla/mentat/pulls/414,414,Support :with (#311),,rnewman,91722,2017-04-13T19:14:53Z,COLLABORATOR,True,66,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5f799323616546c50f35f81ca93b7266e3799564,Pre: refactor projector code.
959,https://api.github.com/repos/mozilla/mentat/pulls/414,414,Support :with (#311),,rnewman,91722,2017-04-13T19:14:53Z,COLLABORATOR,True,66,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5db087020988e72940ab0e719bb3eadd175cb72a,Part 1: maintain 'with' variables in AlgebrizedQuery.
960,https://api.github.com/repos/mozilla/mentat/pulls/414,414,Support :with (#311),,rnewman,91722,2017-04-13T19:14:53Z,COLLABORATOR,True,66,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d2193bd6398a104631e13be8a835ba3c7d122ec,"Part 2: include necessary 'with' variables in SQL projection list.

The test produces projection elements for `:with`, even though there are
no aggregates in the query. This test will need to be adjusted when we
optimize this away!"
961,https://api.github.com/repos/mozilla/mentat/pulls/413,413,Add an initial benchmark for the tx-parser crate. (#406) r=nalexander,"This is an example first benchmark for the tx-parser.  It can be run with:

```cargo bench --package mentat_tx_parser```

To take measurements and print it in a nicer format I used this command:

```for i in `seq 1 5`; do echo '---'; cargo bench --package mentat_tx_parser 2> /dev/null | sed -n -e 's/test \(.*\)\( ... bench: \)/\1/p'; done;```

Here are my results for that locally:

    bench_parse1      7,462 ns/iter (+/- 7,514)
    bench_parse2    384,068 ns/iter (+/- 48,037)
    ---
    bench_parse1      7,171 ns/iter (+/- 1,431)
    bench_parse2    381,971 ns/iter (+/- 59,735)
    ---
    bench_parse1      6,860 ns/iter (+/- 1,742)
    bench_parse2    352,454 ns/iter (+/- 177,286)
    ---
    bench_parse1      6,787 ns/iter (+/- 3,107)
    bench_parse2    348,041 ns/iter (+/- 146,625)
    ---
    bench_parse1      7,113 ns/iter (+/- 961)
    bench_parse2    376,373 ns/iter (+/- 52,412)",bgrins,95570,2017-04-13T18:47:51Z,MEMBER,True,51,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3cbc191553e1825f12c650e20e29ae0ea34c20bd,Add an initial benchmark for the tx-parser crate. (#406) r=nalexander
962,https://api.github.com/repos/mozilla/mentat/pulls/413,413,Add an initial benchmark for the tx-parser crate. (#406) r=nalexander,"This is an example first benchmark for the tx-parser.  It can be run with:

```cargo bench --package mentat_tx_parser```

To take measurements and print it in a nicer format I used this command:

```for i in `seq 1 5`; do echo '---'; cargo bench --package mentat_tx_parser 2> /dev/null | sed -n -e 's/test \(.*\)\( ... bench: \)/\1/p'; done;```

Here are my results for that locally:

    bench_parse1      7,462 ns/iter (+/- 7,514)
    bench_parse2    384,068 ns/iter (+/- 48,037)
    ---
    bench_parse1      7,171 ns/iter (+/- 1,431)
    bench_parse2    381,971 ns/iter (+/- 59,735)
    ---
    bench_parse1      6,860 ns/iter (+/- 1,742)
    bench_parse2    352,454 ns/iter (+/- 177,286)
    ---
    bench_parse1      6,787 ns/iter (+/- 3,107)
    bench_parse2    348,041 ns/iter (+/- 146,625)
    ---
    bench_parse1      7,113 ns/iter (+/- 961)
    bench_parse2    376,373 ns/iter (+/- 52,412)",bgrins,95570,2017-04-13T18:47:51Z,MEMBER,True,51,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0dd905f3d790fc5b5d19bfde4fcaf27c1d13d195,rust format
963,https://api.github.com/repos/mozilla/mentat/pulls/413,413,Add an initial benchmark for the tx-parser crate. (#406) r=nalexander,"This is an example first benchmark for the tx-parser.  It can be run with:

```cargo bench --package mentat_tx_parser```

To take measurements and print it in a nicer format I used this command:

```for i in `seq 1 5`; do echo '---'; cargo bench --package mentat_tx_parser 2> /dev/null | sed -n -e 's/test \(.*\)\( ... bench: \)/\1/p'; done;```

Here are my results for that locally:

    bench_parse1      7,462 ns/iter (+/- 7,514)
    bench_parse2    384,068 ns/iter (+/- 48,037)
    ---
    bench_parse1      7,171 ns/iter (+/- 1,431)
    bench_parse2    381,971 ns/iter (+/- 59,735)
    ---
    bench_parse1      6,860 ns/iter (+/- 1,742)
    bench_parse2    352,454 ns/iter (+/- 177,286)
    ---
    bench_parse1      6,787 ns/iter (+/- 3,107)
    bench_parse2    348,041 ns/iter (+/- 146,625)
    ---
    bench_parse1      7,113 ns/iter (+/- 961)
    bench_parse2    376,373 ns/iter (+/- 52,412)",bgrins,95570,2017-04-13T18:47:51Z,MEMBER,True,51,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,875f88027033544c090274a50b7aa27b8fc32a6e,Merge branch 'rust' into initial-benchmarks-2
964,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e984e025295f8175808dd0319a5679a4e7f938c3,Pre: comment RcCounter.
965,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9f9b4ff58ee8b7dc02316157bc73277e4694dee,Pre: make extracted_types pub so the projector and translator can use it.
966,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,33fa1261b86b9d32a5997d63ce0814e955592d8f,"Pre: clone alias_counter into concretes.

This ensures that concrete CC clones don't have overlapping counts."
967,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,98ac55989489e1cbd94a45f99ad8bd0e9c028cea,Pre: allow initialization of a CC with an arbitrary counter value. Useful for testing.
968,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,79ccd818f32086245cc6d7c729503b43d0d0e60d,"Pre: use ..Default approach for use_as_template and make_receptacle.

I decided this was more efficient (no temporary attributes and
mutability) and less confusing."
969,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,794878893690dfb75a3bd7fbbaa4d881e1ab3bbc,"Part 1: define ComputedTable.

Complex `or`s are translated to SQL as a subquery -- in particular, a
subquery that's a UNION. Conceptually, that subquery is a computed
table: `all_datoms` and `datoms` yield rows of e/a/v/tx, and each
computed table yields rows of variable bindings.

The table itself is a type, `ComputedTable`. Its `Union` case contains
everything a subquery needs: a `ConjoiningClauses` and a projection
list, which together allow us to build a SQL subquery, and a list of
variables that need type code extraction. (This is discussed further in
a later commit.)

Naturally we also need a way to refer to columns in a computed table.
We model this by a new enum case in `DatomsTable`, `Computed`, which
maintains an integer value that uniquely identifies a computed table."
970,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5c57b6035fb307141bcbc930ee6f5855f3a8e79,"Part 2: expand the definition of a table to include computed tables.

This commit:

- Defines a new kind of column, distinct from the eavt columns in
  `DatomsColumn`, to model the rows projected from subqueries. These
  always name one of two things: a variable, or a variable's type tag.
  Naturally the two cases are thus `Variable` and `VariableTypeTag`.
  These are safe to clone, given that `Variable` is an `Rc<String>`.
- Defines `Column` as a wrapper around `DatomsColumn` and
  `VariableColumn`. Everywhere we used to use `DatomsColumn` we now
  allow `Column`: particularly in constraints and projections.
- Broadens the definition of a table list in the intermediate
  ""query-sql"" representation to include a SQL UNION. A UNION is
  represented as a list of queries and an alias.
- Implements translation from a `ComputedTable` to the query-sql
  representation. In this commit we only project vars, not type tags."
971,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f197cfd69c28b5578d2cf58b6ad1726220ae1a35,"Part 3: finish expansion and translation of complex `or`.

This commit turns complex `or` -- `or`s in which not all variables are
unified, or in which not all arms are the same shape -- into a
computed table.

We do this by building a template CC that shares some state with the
destination CC, applying each arm of the `or` to a copy of the template
as if it were a standalone query, then building a projection list and
creating a `ComputedTable::Union`. This is pushed into the destination
CC's `computed_tables` list.

Finally, the variables projected from the UNION are bound in the
destination CC, so that unification occurs, and projection of the
outermost query can use bindings established by the `or-join`.

This commit includes projection of type codes from heterogeneous `UNION`
arms: we compute a list of variables for which a definite type is
unknown in at least one arm, and force all arms to project either a type
tag column or a fixed type. It's important that each branch of a UNION
project the same columns in the same order, hence the projection of
fixed values.

The translator is similarly extended to project the type tag column name
or the known value_type_tag to support this."
972,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,613d88c41491fcf73c8d248ff9f1a00fc247c95d,Part 4: correct projection of type tags in the outermost projector.
973,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0d1b2802bf2083d1f04c8c6bf30ed868c298bb53,Part 5: fix tests.
974,https://api.github.com/repos/mozilla/mentat/pulls/410,410,Apply complex 'or',"This is proceeding in stages.

1. Because complex `or`, and other kinds of binding-introducing patterns, are expressed as subqueries — a `UNION` of subqueries in this case — we need to extend several components:
  - CC, which now needs to understand that some of its data isn't just coming from a named table, but a computed table. In order to avoid churning too much, I opted to do this by adding a simple indexed `Computed` table to `DatomsTable`.
  - query-sql, which now needs to represent nested queries.
  - The translator, which needs to turn those nested queries into a string.

2. We need to build an internal Datalog/SQL projection representation for these subqueries. They contribute column bindings, just like a simple table — `""c00""` — but the columns are named for variables. Furthermore, we need to unify the static types of these variables with the surrounding query, and (for each arm individually) project type columns, preserving a single SQL projection. The end result might have a query like

```edn
[:find ?v
 :where
 (or-join [?x]
   [?x 99 ?v]
   (and
     [?x ?a ?v]
     [(> ?v 10)]
     [?x 96 16]))
  [?x 101 17]]
```

turning into the SQL

```sql
SELECT c0.`?v` AS `?v`,
       c0.`?v_value_type_tag` AS `?v_value_type_tag`
FROM
  (
  SELECT datoms01.e AS `?x`,
         datoms01.v AS `?v`,
         4 AS `?v_value_type_tag`     -- This clause's attribute determines this.
  FROM datoms AS datoms01
  WHERE datoms01.a = 99

  UNION

  SELECT datoms02.e AS `?x`,
         datoms02.v AS `?v`,
         datoms02.value_type_tag AS `?v_value_type_tag`  -- This one's doesn't.
  FROM datoms AS datoms02,
       datoms AS datoms03
  WHERE datoms02.v > 10
    AND datoms03.e = datoms02.e
    AND datoms03.a = 96
    AND datoms03.v = 16
  ) AS c0,

  datoms AS datoms00
WHERE datoms00.a = 101
  AND datoms00.v = 17
  AND datoms00.e = c0.`?x`
```

3. Finally, we need to propagate shared type deductions out of the arms of the `or`, just as we did for simple `or`s.

Some of this work will generalize nicely to @fluffyemily's `NOT EXISTS` work in handling `not-join`, and perhaps to binding-generation work that @ncalexan will get to.",rnewman,91722,2017-04-08T00:56:37Z,COLLABORATOR,False,736,170,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ff62adc06a38e9e07f2f1dbaa5fc79712f9298ba,Part 6: add more tests for complex `or`.
975,https://api.github.com/repos/mozilla/mentat/pulls/405,405,parse not &  not-join (#389),"This deals with parsing and the pre-algebrizing validation.

I'm also looking at how Nicks changes to the parser affect this, and also at applying and algebrizing the clauses.",fluffyemily,12613048,2017-04-06T12:53:09Z,COLLABORATOR,False,264,8,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,eb46a2b6118924d96b8b70da8395f69b34d541a5,Part 1 - Parse `not` and `not-join`
976,https://api.github.com/repos/mozilla/mentat/pulls/405,405,parse not &  not-join (#389),"This deals with parsing and the pre-algebrizing validation.

I'm also looking at how Nicks changes to the parser affect this, and also at applying and algebrizing the clauses.",fluffyemily,12613048,2017-04-06T12:53:09Z,COLLABORATOR,False,264,8,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fb2dde1d2f605569dcc6a88dcb8b5eab56e492bd,Part 2 - Validate `not` and `not-join` pre-algebrization
977,https://api.github.com/repos/mozilla/mentat/pulls/405,405,parse not &  not-join (#389),"This deals with parsing and the pre-algebrizing validation.

I'm also looking at how Nicks changes to the parser affect this, and also at applying and algebrizing the clauses.",fluffyemily,12613048,2017-04-06T12:53:09Z,COLLABORATOR,False,264,8,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7eea65b3e2ea742525060ef71421d7292086b418,"Address review comments rnewman.
* Remove `WhereNotClause` and populate `NotJoin` with `WhereClause`.
* Fix validation for `not` and `not-join`, removing tests that were invalid.
* Address rustification comments."
978,https://api.github.com/repos/mozilla/mentat/pulls/405,405,parse not &  not-join (#389),"This deals with parsing and the pre-algebrizing validation.

I'm also looking at how Nicks changes to the parser affect this, and also at applying and algebrizing the clauses.",fluffyemily,12613048,2017-04-06T12:53:09Z,COLLABORATOR,False,264,8,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7285b268b6ea985fbe08937874ec3c3443d1758,Rebase against `rust` branch.
979,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ba6b3e419466b01525b45cfdb63d31d6891023d,Part 1: implement type narrowing and broadening.
980,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,90949c08b12b91393aa26b4f108fe28b574628df,Part 2: implement simple `or`.
981,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bbe97484261dcf71732bea78d4c5f5eac1f5996a,"Part 3: reinstate extracted type pruning.

When we started expanding and narrowing type sets, it became impossible
to conclusively know during pattern application whether a type was
known. We now figure that out at the end: if a variable has only a
single known type, we don't need to extract its type tag."
982,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4e43b2d73475fbd28eea0f72b90bed8761e8fd64,Part 4: look up attributes for bound variables when making type determinations.
983,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,228c9e3a2055fe3a6341e0816ca0fe34733a727a,Post: eliminate is_known_empty in favor of empty_because and an accessor.
984,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5087fffca37be8cfcde3e1654b8ce077c48a6358,Follow-up: track why an empty or-join failed.
985,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3b0440c14028e6dded16e60966fbbb225486ef35,Follow-up: remove dead code and warnings.
986,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,664c0108efd784b7b2c8b76b1f3b40afe87f4490,Kill a redundant TODO
987,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a48a7652ac7ec69513c3d6df8b1cf7c703221e6e,Part 1: implement a cloneable shared counter. (#407)
988,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1a5079d1b6e6576402da6cd4e2f95f9dbd8c00f5,"Part 2: use RcCounter to implement aliasing in ConjoiningClauses. (#407)

This allows us to share a counter between templates produced from a CC."
989,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5e69a3e1f85560996ec0680f1659ca1c8552a524,Be more accurate about our preconditions.
990,https://api.github.com/repos/mozilla/mentat/pulls/403,403,WIP: Algebrize simple `or` joins. (#304),"This is most of the way there. I need to flesh out the rest of the tests, skim for TODOs, and then double-check the translator by adding tests for the CCs this produces.

I also need to add tests for pernicious patterns like `[?x ?x ?x]`.",rnewman,91722,2017-04-05T01:24:07Z,COLLABORATOR,False,965,243,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9e947eb267111e5a5dae9f935dd45372d068dc42,Add a new translate test for or-join.
991,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5cef10d3952cfe534b08759f92a17e8f5a93595,Pre: Handle SrcVar.
992,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,028c3be2e49545e962e49f129bf836ad6550af9c,"Pre: Accept EDN vectors in FnArg arguments.

Datomic accepts mostly-arbitrary EDN, and it is actually used: for
example, the following are all valid, and all mean different things:
* `(ground 1 ?x)`
* `(ground [1 2 3] [?x ?y ?z])`
* `(ground [[1 2 3] [4 5 6]] [[?x ?y ?z]])`

We could probably introduce new syntax that expresses these patterns
while avoiding collection arguments, but I don't see one right now.
I've elected to support only vectors for simplicity; I'm hoping to
avoid parsing edn::Value in the query-algebrizer."
993,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,204bc2f1e1aee33b34f24198333590635b803b68,Part 1: Parse functions in where clauses.
994,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,391272a172396cc6b5dd0d2acf23dd07a37fc0c6,"Review comment: Find, not Bind."
995,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ffbcfff682aadc80a2882e5411efab780cebab98,Pre: Add Values to query-sql.
996,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87d88a9f105d3f225ef7774b9d2279d4a43c8864,Pre: Modify predicate implementation in preparation for functions that bind.
997,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c5052099b429a3efc1ee3e29821558abb1c2dcb,Pre: Accumulate variables from WhereFn.
998,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a067190a611ebc1243755c8abc33d30bbc340254,Pre: Move PushComputed up module hierarchy; make it public.
999,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4ddd6b28fda63f49af93d701d5e0ad66567c3bbd,Pre: Make it easier to debug binding errors.
1000,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3e7021b31a895b56cc059c9ae65ca69a06540742,Pre: Generalize NonNumericArgument to InvalidArgument.
1001,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9376079a590fd15e4e32a59e3b60a5a7815de8f6,Part 2: Handle `ground`.
1002,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20b28dd1f80c3b6eb11803ccb117c9da19a78fda,Part 3: Fail to bind an input variable.
1003,https://api.github.com/repos/mozilla/mentat/pulls/402,402,Implement querying fulltext values.,"@rnewman you can take a look at the first commit, if you care to.

@fluffyemily if you're using the new parsing apparatus (yet to land!), this is a self-contained example of how to use it.",ncalexan,1097182,2017-04-03T23:47:40Z,MEMBER,False,1402,53,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,79d56056e71d49e5d798591e1cde72f58d48dc5a,"Implement querying for fulltext matches.

This is just one possible approach.  It would be possible to always
produce a computed table, which might be simpler: there would be no
new column types, and there wouldn't be the awkward VALUES table for
`?score`.  On the other hand, this approach follows the
Clojure{Script} implementation, and, if `?score` is not bound, is
likely to be queried more efficiently by SQLite."
1004,https://api.github.com/repos/mozilla/mentat/pulls/397,397,Use Rc for TypedValue and Variable. (#395) r=nalexander,"Part 1, core: use Rc for String and Keyword.
Part 2, query: use Rc for Variable.
Part 3, sql: use Rc for args in SQLiteQueryBuilder.
Part 4, query-algebrizer: use Rc.
Part 5, db: use Rc.
Part 6, query-parser: use Rc.
Part 7, query-projector: use Rc.
Part 8, query-translator: use Rc.
Part 9, top level: use Rc.",rnewman,91722,2017-03-31T02:20:18Z,COLLABORATOR,False,221,175,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d76297d19a3d10255588a38a995640382ca0c78c,Make InternSet::intern accept Into<Rc<T>>. Add a test.
1005,https://api.github.com/repos/mozilla/mentat/pulls/397,397,Use Rc for TypedValue and Variable. (#395) r=nalexander,"Part 1, core: use Rc for String and Keyword.
Part 2, query: use Rc for Variable.
Part 3, sql: use Rc for args in SQLiteQueryBuilder.
Part 4, query-algebrizer: use Rc.
Part 5, db: use Rc.
Part 6, query-parser: use Rc.
Part 7, query-projector: use Rc.
Part 8, query-translator: use Rc.
Part 9, top level: use Rc.",rnewman,91722,2017-03-31T02:20:18Z,COLLABORATOR,False,221,175,21,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b11fcb426a4756589dce478fa3f97e4dd00a2a77,"Use Rc for TypedValue and Variable. (#395) r=nalexander

Part 1, core: use Rc for String and Keyword.
Part 2, query: use Rc for Variable.
Part 3, sql: use Rc for args in SQLiteQueryBuilder.
Part 4, query-algebrizer: use Rc.
Part 5, db: use Rc.
Part 6, query-parser: use Rc.
Part 7, query-projector: use Rc.
Part 8, query-translator: use Rc.
Part 9, top level: use Rc."
1006,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5539d2694b2fbaa0736dcdebad5d2f4777d504b,Pre: move EmptyBecause into types.rs.
1007,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,16119f5b49cee0a924d76dc145d2e48bad9921e7,Pre: simplify when_not.
1008,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4021692db5eeddd7ed02259e23a754f94e6926c5,Pre: add some 'am I a pattern?' helper predicates to clause types.
1009,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,81aa5c3a7a67ebed4ea17558b22464332d01a404,"Part 1: introduce ColumnIntersection and ColumnAlternation.

This provides a limited form of OR and AND for column constraints, allowing
simple 'or-join' queries to be expressed on a single table alias."
1010,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d6b4b27031e1bbebca73abc77ca5367c944dc142,Part 2: add an EmptyBecause case for fulltext/non-string type mismatch.
1011,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c92c38be88aa1258df70cfbd3e83d61832661618,"Part 3: have table_for_places return a Result, not an Option."
1012,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9952dce47c5dd339debc096272168c192d05af4e,"Part 4: add OrJoin::is_fully_unified.

This allows us to tell if all the variables in a valid `or` join are to
be unified, which is necessary for simple joins."
1013,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,74644d04ac7e020ffa6f18c638c2c8b354d4c01a,"Split cc.rs into a 'clauses' module.

mod.rs defines the module and ConjoiningClauses itself, complete with
methods to record facts and ask it questions.

pattern.rs, predicate.rs, resolve.rs, and or.rs include particular
functionality around accumulating certain kinds of patterns.

Only `or.rs` includes significant new code; the rest is just split."
1014,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8a25095d5e19861a29afae957a1277def1a2c828,Part 5: implement decision tree for processing simple alternation.
1015,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7c373c157236aac748d13f535ab8b2fe6e1289c0,WIP: Part 6: implement simple or-join.
1016,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,580318d12b0d133834925d19e6f9c9e130d392bc,Pre: Variable accessors.
1017,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e5ce81df3dcded6f153097ef1ba4cf23a59ffe0a,"Part 1, core: use Rc for String and NamespacedKeyword."
1018,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,78960368343bdc186adafc1a7f4e707d6f2751ab,"Part 2, query: use Rc for Variable."
1019,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b060532b71bf37eb12ecfe7936faf7ac2fc7c3cf,"Part 3, sql: use Rc for args in SQLiteQueryBuilder."
1020,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,95fb980b4288d5651b1e7f962b70412c7cbe9214,"Part 4, query-algebrizer: use Rc."
1021,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c4a96704430be2417ee95d8821546521d727747b,"Part 5, db: use Rc."
1022,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aa55b367652935534631546255532a4df4f1de30,"Part 6, query-parser: use Rc."
1023,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9a58148e5ae3f6bad5d8bdcfbdef141c34116cc9,"Part 7, query-projector: use Rc."
1024,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e84a11cf6fc149465c36d0fd4e9a840717d925ea,"Part 8, query-translator: use Rc."
1025,https://api.github.com/repos/mozilla/mentat/pulls/394,394,"Split cc.rs, analyze or/or-join","Sorry for the big PR.

This includes:

- Some ""pre"" commits. The ""am I a pattern?"" one isn't used, so I'm on the fence about deleting it.
- Intersection and alternation for constraints. This will allow us to describe `OR` and `AND` in a CC's constraint list.
- `table_for_places` no longer automatically fails the pattern if a lookup fails, because we use this to consider the arms of an `or`.
- The logic for analyzing an `or`, complete with a ton of comments. This narrows down the entire space of `or` into:
  - Failed (no pattern can match)
  - Succeeded (empty to start with)
  - Unit and fully unified — treat as a single pattern
  - Simple
  - Complex.

The last commit is the coal face of applying simple `or`, which I hope to finish today. Complex `or` will be a subsequent PR.",rnewman,91722,2017-03-29T16:36:29Z,COLLABORATOR,False,2550,1753,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2f69bf756e8950d0a11f4ba5ef1ccb2c426221b4,"Part 9, top level: use Rc."
1026,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c1409078fa591e84225b3900a2d64e80ca1e9f2a,Pre: Expose more in edn.
1027,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f807b16db1869a05f25d61a5e8256712d093d188,"Pre: Make it easier to work with ValueAndSpan.

with_spans() is a temporary hack, needed only because I don't care to
parse the bootstrap assertions from text right now."
1028,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8754cf224b8803be109d57c3e876590df64749e1,"Part 1a: Add `value_and_span` for parsing nested `edn::ValueAndSpan` instances.

I wasn't able to abstract over `edn::Value` and `edn::ValueAndSpan`;
there are multiple obstacles.  I chose to roll with
`edn::ValueAndSpan` since it exposes the additional span information
that we will want to form good error messages in the future."
1029,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dcc05c643c19a1ecb3ee3c601c8d1953a6b36f8c,Part 1b: Add keyword_map() parsing an `edn::Value::Vector` into an `edn::Value::map`.
1030,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f4e2a0471ffe53228b3bfee2bbdaf45c1322e960,"Part 1c: Add `Log`/`.log(...)` for logging parser progress.

This is a terrible hack, but it sure helps to debug complicated nested
parsers.  I don't even know what a principled approach would look
like; since our parser combinators are so frequently expressed in
code, it's hard to imagine a data-driven interpreter that can help
debug things."
1031,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e947a32c59bd9c3df055edf6f3334b653c679e11,"Part 2: Use `value_and_span` apparatus in tx-parser/.

I break an abstraction boundary by returning a value column
`edn::ValueAndSpan` rather than just an `edn::Value`.  That is, the
transaction processor shouldn't care where the `edn::Value` it is
processing arose -- even we care to track that information we should
bake it into the `Entity` type.  We do this because we need to
dynamically parse the value column to support nested maps, and parsing
requires a full `edn::ValueAndSpan`.  Alternately, we could cheat and
fake the spans when parsing nested maps, but that's potentially
expensive."
1032,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ff136b254681133b0e1ad15cec0cf0023f72ffc6,Part 3: Use `value_and_span` apparatus in query-parser/.
1033,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,720fbf3d01ab5ee007fe1e4606572caa497124a9,Part 4: Use `value_and_span` apparatus in root crate.
1034,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7135eeac49bc3684919dfa450705c343da913d0a,Review comment: Make Span and SpanPosition Copy.
1035,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f8e75d817e8bc9aa15ed984d94da90e273fede87,Review comment: nits.
1036,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0165a842ef3f3c82b03b08a17ef02f1c163d890b,"Review comment: Make `or` be `or_exactly`.

I baked the eof checking directly into the parser, rather than using
the skip and eof parsers.  I also took the time to restore some tests
that were mistakenly commented out."
1037,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20c9cfad337f4891a1ddd62039ac237d38dd58da,Review comment: Extract and use def_matches_* macros.
1038,https://api.github.com/repos/mozilla/mentat/pulls/393,393,Improve parsing of nested `edn::ValueAndSpan` streams,"This is work in progress, but you can see how it simplifies a lot of `tx-parser/`.",ncalexan,1097182,2017-03-29T15:52:53Z,MEMBER,True,1085,1000,20,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0d9ab26026b1fd478a6c8804fb882d0037defd32,Review comment: .map() as late as possible.
1039,https://api.github.com/repos/mozilla/mentat/pulls/391,391,Add tests for `validate_schema_map`,"#268
",fluffyemily,12613048,2017-03-28T14:59:06Z,COLLABORATOR,True,182,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,50beabe44765ff7b24a0ba5f51a2ee7d4026cefa,Add tests for `validate_schema_map`
1040,https://api.github.com/repos/mozilla/mentat/pulls/391,391,Add tests for `validate_schema_map`,"#268
",fluffyemily,12613048,2017-03-28T14:59:06Z,COLLABORATOR,True,182,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,918564adeb2a865c6db02e725ba0b2d65eed294d,Update test to ensure we get the right error out
1041,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ee1fe68e9f4d9e2d07569bd5e7dfe56362c391f6,Crudely parse `or` and `or-join`. (#388)
1042,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f2fca81bd33e28250aea1d73069c94a990dd33dd,Pre: simplify imports in cc.rs.
1043,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dbcb9035ccf928bd81025b6b692336eb2e203a4e,Pre: stub error for non-matching variables.
1044,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7d5e03b1e408a27b2466e7f7a992b75ab7d4f63f,Part 1: implement variable extraction for clauses.
1045,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f37f54b4addf53a9ed57e05ba18859e7b5554c12,Part 2: add validation for or-join.
1046,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a70820c58f71273c51ab5032ff3919157916e5c,Part 3: move pattern application into CC.
1047,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,23f03dacf093b551fcde5e5950a344207814ed76,Part 4: validate OrJoin in CC::apply_clause.
1048,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,95441fddb9924921c04aab338951ded22884adbc,Review comment: apply_clause with ?.
1049,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,585f1d1111507f825a2ee12de9ed41475bffab34,Review comment: add thorough docstrings for UnifyVars.
1050,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,539638bc15993501656e6e9e3db97cc85c85288e,Review comment: clarify naming of mentioned_variables.
1051,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,be297ccfd61a5b79bc5a179f2799ceb7f7def1e5,Usage.
1052,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cd7b10c84d37953e08f451d0f083683e2b9b125d,Review comments: improve validate.rs.
1053,https://api.github.com/repos/mozilla/mentat/pulls/390,390,Crudely parse `or` and `or-join`. (#388),"I'm really unhappy about the amount of boilerplate in this parser. But it works.

Note that unlike DataScript's parser, this one doesn't validate the contents of the variable lists.",rnewman,91722,2017-03-23T21:14:32Z,COLLABORATOR,False,722,36,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2f960c262eb416120e029700a3c081a8281cbb7a,Simplify query parser.
1054,https://api.github.com/repos/mozilla/mentat/pulls/387,387,Correctly generate DISTINCT and LIMIT. (#386),"- The projector figures out whether distinct is needed from the find spec. Scalar and tuple don't need distinct. Rel and coll do.
- If an external limit was provided, and it's `1`, we don't need distinct.
- The translator pulls the value out of the projector and into the SQL intermediate format.
- The SQL outputter writes out the right string.

If, in the future, we add a form of projection for which there is no 1:1 correspondence between SQL rows and Datalog results (_e.g._, in-memory programmatic aggregation), then we will need to revise some of this — user-provided limits can no longer be used in the SQL query. That work can be driven quite easily by tests, and we don't know if we'll ever reach that point.",rnewman,91722,2017-03-22T20:42:09Z,COLLABORATOR,True,96,51,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,26a66711765e6dcf0eebb4cabda34d6d2b61ae95,Correctly generate DISTINCT and LIMIT. (#386)
1055,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,57c1ff52db6b9b704e20681c6bf3204fbec1c463,"Part 1 - Create as_edn_value function.

* Do not include defaults inside output.
* Pretty-printed by default. Do we want to make that a flag?
* Includes simple test just to make sure it works."
1056,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4d5d20a2f745a642b157a1aef3d570821ef14b1e,Part 2 - only include ident if available.
1057,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,acb126ed5ba60da1a5c1161c081ad74be9664de1,Part 3 - Remove spacing and newlines as unnecessary.
1058,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,518bd5cb1bdcf8564e3e4da17e05d8c19cb093c3,Update function to build edn::Value directly rather than parsing from string
1059,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0701ae48b86cd6816d3dc4815a748b3abbfe3ffa,Update test to actually test the functionality.
1060,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b57b2e61c1bca55dcc97f85bba7f16dcd4fe3528,"Address review comments ncalexan.

 * Rename `as_edn_value` to `to_edn_value`.
 * Move `db/src/values.rs` to `core/src/values.rs` so we can reference inside `core/src/ib.rs`.
 * Add `lazy-static` crate to core `Cargo.toml`
 * Expose `values` as a public module from `core`.
 * Update references to values in `db/src/bootstrap.rs` & `db/src/lib.rs`.
 * Add new static vars for `DB_FULLTEXT`, `DB_INDEX` & `DB_IS_COMPONENT`.
 * Use static vars exposed in `values` inside `to_edn_value`.
 * Remove `db/id` as key in attribute output and use `entid` as `db/ident` if no `ident` is found for that `entid`.
 * Update test to match new expected output."
1061,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a3dd08d890651960da9a81f310974be427136934,Add doc comment for function
1062,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0021a8f3cc7dee7ee2f6c1990fb9953fb25884c5,"Address review comments ncalexan.

* Update function docstring to give clearer description of function.
* Do not all entid at all to output.
* Clean up code fetching ident (make it rustier)."
1063,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3cb7cd50e590e2f19e6d818fa00813b3dbed469,"Address review comments rnewman.

* Extract out to new `to_edn_value` functions code for creating `edn::Value`\'s for `ValueType` and `Attribute`.
* Use `map()` to create schema edn value rather than a loop."
1064,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,442995f489210c5c72dc710f334d055308d011d4,"Address review comments rnewman.

* pass cloned instance of ident to `Attribute::get_edn_value`.
* update `use` import for `edn`.
* remove unnecessary  call when using ident as key on `associate_ident`."
1065,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8a954b435b01f55149439e11e65cb04d7ae23ac2,Fixed bug whereby we didn't differentiate between `db.index/value` and `db.index/identity` when generating `edn::Value`
1066,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f1077221f76316e91a75d69fab1d826122f32e79,Add extra assert at the end to ensure we get the same output when we convert the same schema to edn multiple times
1067,https://api.github.com/repos/mozilla/mentat/pulls/384,384,#260 Convert Schema into edn::Value,"Here is what I have done so far. Can I please check that this is right?

Also, I am not sure the best way to test the output. Advice welcome.",fluffyemily,12613048,2017-03-22T13:42:07Z,COLLABORATOR,True,135,3,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6b2b1c8fb01cdda8f30c118b7c01ba88779b9528,"Move check for type of uniqueness to `match` statement.

* Also use `iter` instead of `into_iter` when iterating schema map."
1068,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2cc94ad53bed4869ba28848e8fac8b68862ec02f,Pre: Make test unwrapping more verbose.
1069,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f89236f8ed637d2c48a2e62090a98b03abc21ee7,Pre: Fix error in parser macros.
1070,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e021a5d554f9accd7a7142749090d34421425007,Pre: Modernize add() and retract() into one add_or_retract().
1071,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3f7b39151d3336af29f9b2909f8a66d1cecd333f,Pre: Modernize entities().
1072,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1667d964bcae35f2eecc0ad263586d204a163980,Pre: Add is_collection and is_atom to edn::Value.
1073,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,540717ca9499861074c075e6329512c9384ed1af,"Pre: Make lookup refs be (lookup-ref a v) in the entity position.

This has the advantage of being explicit in all situations and
unambiguous at parse-time.  This choice agrees with the Clojure
implementation but not with Datomic.  Datomic treats [a v] as a lookup
ref, is ambiguous at parse-time, and is disambiguated in ways I do not
understand at transaction time.  We mooted making lookup refs [[a v]]
and outlawing nested value vectors in transactions, but after
implementing that approach I decided it was better to handle lookup
refs at parse time and therefore outlawing nested value vectors is not
necessary."
1074,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a478c941db92b0463f904c271b5cf35ed2db91c4,"Pre: Differentiate atoms from lookup-refs in value position.

Initially, I expected to accept arbitrary edn::Value instances in the
value position, and to differentiate in the transactor.  However, the
implementation quickly became a two-stage parser, since we always
wanted to parse the resulting value position into some other known
thing using the tx-parser.  To save calls into the parser and to allow
the parser to move forward with a smaller API surface, I push as much
of this parsing as possible into the initial parse."
1075,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2d16f7163b491cc55b00db3c7c4e10f823af64f4,Pre: Quote edn::Value::Text in Display.
1076,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0aa9d91627b6869fc738a7d20fdf97cb15a1f0f3,Handle lookup refs in the entity and value columns. Fixes #183.
1077,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4781e0b1c1b83229e0458c5f93c52c6689feb8b,Pre 0a: Use a stack instead of into_iter.
1078,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73c159a702a5f264492c745a1737f35b7de5fa97,Pre 0b: Dedent.
1079,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e6239312890237232a64ce42109788d317aaf7ea,"Pre 0c: Handle `e` after `v`.

This allows to use the original `e` while handling `v`."
1080,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,837052e537b6c08deed7f80718ee5c4f8959099a,Explode value lists for :db.cardinality/many attributes. Fixes #284.
1081,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,54141e9b1cfa384c832ad71ac7507364deb669c7,Parse and accept map notation. Fixes #180.
1082,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,68612bcd98e49ab4d19c4e5542f249012c7c3aa1,Review comment: Add and use edn::Value::into_atom.
1083,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,86fbb8e10e650e6a947a61d55d832ef00fee86e2,Review comment: Use skip(eof()) throughout.
1084,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ebf79779e7e5a31a7fca4774b050490ec9e40ae4,Review comment: VecDeque instead of Vec.
1085,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cbbf077dc5f5efd2e30444a8133d9dcf997330d3,Review comment: Part 0: Rename TempId to TempIdHandle.
1086,https://api.github.com/repos/mozilla/mentat/pulls/382,382,"Lookup refs, nested vector values, map notation.",The transactor starts to feel like a real child!,ncalexan,1097182,2017-03-21T21:31:23Z,MEMBER,True,796,210,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f01053289b2bfce9e4cf9f798e40072c169d1e3b,"Review comment: Part 1: Differentiate internal and external tempids.

This breaks an abstraction boundary by pushing the Internal/External
split up to the Entity level in tx/ and tx-parser/.  This just makes
it easier to explode Entity map notation instances into Entity
instances, taking an existing External tempid :db/id or generating a
new Internal tempid as appropriate.  To do this without breaking the
abstraction boundary would require adding flexibility to the
transaction processor: we'd need to be able to turn Entity instances
into some internal enum and handle the two cases independently.  It
wouldn't be too hard, but this reduces the combinatorial type
explosion."
1087,https://api.github.com/repos/mozilla/mentat/pulls/376,376,Check sqlite version,"Fixes #366 

Checks whether current SQLite version is at least the minimum required version and force exits with an error message if not.

This might have been done much simpler by just having 2 constants, one for version string and one for version number but I wanted to remove the possibility of developer error by bad translation.",fluffyemily,12613048,2017-03-20T16:06:53Z,COLLABORATOR,True,8,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1b2f428873e019fa035e97f712ddb099c2ff844,"Part 1: Check whether current sqlite version is at least the mimumum required by the project.

Force exit program if not"
1088,https://api.github.com/repos/mozilla/mentat/pulls/376,376,Check sqlite version,"Fixes #366 

Checks whether current SQLite version is at least the minimum required version and force exits with an error message if not.

This might have been done much simpler by just having 2 constants, one for version string and one for version number but I wanted to remove the possibility of developer error by bad translation.",fluffyemily,12613048,2017-03-20T16:06:53Z,COLLABORATOR,True,8,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1ed62fe147cbb91da55f813cf023907615669f28,Part 2: Add tests to ensure that test_version_number_from_string works as expected.
1089,https://api.github.com/repos/mozilla/mentat/pulls/376,376,Check sqlite version,"Fixes #366 

Checks whether current SQLite version is at least the minimum required version and force exits with an error message if not.

This might have been done much simpler by just having 2 constants, one for version string and one for version number but I wanted to remove the possibility of developer error by bad translation.",fluffyemily,12613048,2017-03-20T16:06:53Z,COLLABORATOR,True,8,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,401834a0ef8556c9fc478165ca3078a4bf3fd623,Part 3 - Removed unneccessary debug
1090,https://api.github.com/repos/mozilla/mentat/pulls/376,376,Check sqlite version,"Fixes #366 

Checks whether current SQLite version is at least the minimum required version and force exits with an error message if not.

This might have been done much simpler by just having 2 constants, one for version string and one for version number but I wanted to remove the possibility of developer error by bad translation.",fluffyemily,12613048,2017-03-20T16:06:53Z,COLLABORATOR,True,8,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f9b43653558298205816307fa3eed0e578e31ae1,"Part 4 - address feedback.

* `panic` rather than `exit`.
* Store version as number rather than string and output message also using number."
1091,https://api.github.com/repos/mozilla/mentat/pulls/376,376,Check sqlite version,"Fixes #366 

Checks whether current SQLite version is at least the minimum required version and force exits with an error message if not.

This might have been done much simpler by just having 2 constants, one for version string and one for version number but I wanted to remove the possibility of developer error by bad translation.",fluffyemily,12613048,2017-03-20T16:06:53Z,COLLABORATOR,True,8,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bff83dbcd743ece57a97df2fa1fa09855f3e18c6,Addressed review comments.
1092,https://api.github.com/repos/mozilla/mentat/pulls/375,375,Support transacting :db/fulltext true attributes. Fixes #189.,"This builds on #370, so be sure to look at that first.",ncalexan,1097182,2017-03-17T20:41:33Z,MEMBER,True,345,17,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1d97c5ba4e348cb7aa6ae1061e7fc1edbd3e52d4,"Support transacting :db/fulltext true attributes.

These tests are direct translations of the Clojure tests."
1093,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a98b6579537f3e0238a88d1fc34f0df843cd40c6,Pre: move algebrizer types to their own file.
1094,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d722d927b7c13faf063ddcb3ec79643a8f3772db,Pre: dead code in CC.
1095,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c67df6b722bcd403e1de93f70f9d77077072664,Pre: reformatting.
1096,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,337ca78174327225c2da0e28c8e430a564a453e6,"Pre: add tests for CC constraint intersection.

Also add a failing test for #373."
1097,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,af36755778ce15004208e2329eda27d84754ff28,Pre: add mentat_query_algebrizer::errors.
1098,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ff271371b42964e67d3a8bcf50fbe4109033b62e,"Pre: switch to taking Patterns by move, not by reference, when algebrizing."
1099,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c226d6186113dc1b04d3a4c5d02ce423e092b59,Implement parsing of query predicates. (#380)
1100,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8d588dc551ebd3cc9f4f562057734d02c4f4db15,Algebrize and translate numeric constraints. (#306)
1101,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4697bf20cc7de466974c104646ed8c3cc3209be0,"Track ever-shrinking sets of types for variables, not a single type. (#381)"
1102,https://api.github.com/repos/mozilla/mentat/pulls/374,374,"Parse, algebrize, and translate basic numeric predicate patterns","This PR starts to split up `cc.rs` a little, as well as doing some cleanup. (I left in some reformatting that VSCode did on its own, mostly in their own commits.)

I then added a test for some things that CC isn't smart enough to do yet (see #373), and finally moved on to the meat of the PR: extending the parser to handle predicates.

Right now `edn::Value::List` isn't 'spreadable' into a slice, which our parsing approach relies on. That means we don't yet support the syntax you usually see for predicates:

```
[(< ?x 10)]
```

Instead we partly follow the Datomic query grammar (!!):

```
[] = list or vector
…
pred-expr = [ [pred fn-arg+] ]
```

and support only vectors: `[[< ?x 10]]` is valid, and that's what we handle. I'll expand that next.",rnewman,91722,2017-03-16T15:02:03Z,COLLABORATOR,False,979,260,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,11def522ddc6f0124c3b32382a859a846c309ef1,Post: reorganizing.
1103,https://api.github.com/repos/mozilla/mentat/pulls/372,372,Ensure that variable bindings are used when selecting a table.,"This PR ensures that a query like

```
[:find ?x :where [?x ?a ?v]]
```

with a binding for `?a`, is algebrized with knowledge of `?a`.",rnewman,91722,2017-03-13T17:00:05Z,COLLABORATOR,False,261,34,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dc6a7a41281f05336021fbad474c4fd11c2e3e10,Add a VSCode test configuration for cargo test --all.
1104,https://api.github.com/repos/mozilla/mentat/pulls/372,372,Ensure that variable bindings are used when selecting a table.,"This PR ensures that a query like

```
[:find ?x :where [?x ?a ?v]]
```

with a binding for `?a`, is algebrized with knowledge of `?a`.",rnewman,91722,2017-03-13T17:00:05Z,COLLABORATOR,False,261,34,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e12d114778bf027bd7c0ed28e720f7267e05a597,"Ensure that variable bindings are used when selecting a table.

For queries like

```edn
[:find ?x :where [?x _ ""hello""]]
[:find [?v ...] :where [_ ?a ?v]]
```

we'll query `all_datoms` to handle fulltext strings, which is expensive.

If `?a` is bound, we can avoid this — resolve any keyword binding,
ensure that the value is an attribute, and use the appropriate table."
1105,https://api.github.com/repos/mozilla/mentat/pulls/372,372,Ensure that variable bindings are used when selecting a table.,"This PR ensures that a query like

```
[:find ?x :where [?x ?a ?v]]
```

with a binding for `?a`, is algebrized with knowledge of `?a`.",rnewman,91722,2017-03-13T17:00:05Z,COLLABORATOR,False,261,34,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1fd61db3ce8a37ab45ada755d41d26252ad59689,Further improvements and review comments.
1106,https://api.github.com/repos/mozilla/mentat/pulls/372,372,Ensure that variable bindings are used when selecting a table.,"This PR ensures that a query like

```
[:find ?x :where [?x ?a ?v]]
```

with a binding for `?a`, is algebrized with knowledge of `?a`.",rnewman,91722,2017-03-13T17:00:05Z,COLLABORATOR,False,261,34,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f6cc89879aeabf78c1ea1519a9addf531fbc1f99,Don't trample empty_because.
1107,https://api.github.com/repos/mozilla/mentat/pulls/371,371,(#288) Add sqlite3_limit,,fluffyemily,12613048,2017-03-13T16:37:31Z,COLLABORATOR,True,27,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,12860e197d7cd58835f5dd0c811c9f03e29f07ac,Part 1: added limits feature to rusqlite dependencies.
1108,https://api.github.com/repos/mozilla/mentat/pulls/371,371,(#288) Add sqlite3_limit,,fluffyemily,12613048,2017-03-13T16:37:31Z,COLLABORATOR,True,27,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4c96284181aa64a4f778de4b9e9b3329cf28cbfa,"Part 2: replace references to SQLITE_MAX_VARIABLE_NUMBER with sqlite3_limit.

Move assertion check for correct number of variables in repeat_values to before call as this is where the variable is defined."
1109,https://api.github.com/repos/mozilla/mentat/pulls/371,371,(#288) Add sqlite3_limit,,fluffyemily,12613048,2017-03-13T16:37:31Z,COLLABORATOR,True,27,12,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae405f48201339ddcedc83052977344a2d980003,Part 3: Add tests
1110,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,77266c32f28e9c89feec7f42be72493cbf07d129,"Pre: s/VALUETYPE/VALUE_TYPE/.

This is consistent with the capitalization (which is ""valueType"") and
the other identifier."
1111,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fed8dfd1448f0ee508fbf3a56bc9de7567d5fc4d,"Pre: Don't retract :db/ident in test.

Datomic (and eventually Mentat) don't allow to retract :db/ident in
this way, so this runs afoul of future work to support mutating
metadata."
1112,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c0d3ee73ed2bfecfb1aa867ab5bd3264e1616ac5,Pre: Remove some single quotes from error output.
1113,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c708ae7452c6c80b5cccf4e7df436d94a687b499,Pre: Map TypedValue::Ref to TypedValue::Keyword in debug output.
1114,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,057c45bb832104a8ef4818fe409bf50e36a1a8d4,Pre: Add DiffSet.
1115,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,19861c0bda897a51da27a86eaeda7b82acdf2416,"Part 1: Make materialized views be uniform [e a v value_type_tag].

This looks ahead to a time when we could support arbitrary
user-defined materialized views.  For now, the ""idents"" materialized
view is those datoms of the form [e :db/ident :namespaced/keyword] and
the ""schema"" materialized view is those datoms of the form [e a v]
where a is in a particular set of attributes that will become clear in
the following commits.

This change is not backwards compatible, so I'm removing the open
current (really, v2) test.  It'll be re-instated when we get to
https://github.com/mozilla/mentat/issues/194."
1116,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a2cd37a6e8a125296011960423ecba99ab3a6f62,"Part 2: Maintain entids separately from idents.

In order to support historical idents, we need to distinguish the
""current"" map from entid -> ident from the ""complete historical"" map
ident -> entid.  This is what Datomic does; in Datomic, an ident is
never retracted (although it can be replaced).  This approach is an
important part of allowing multiple consumers to share a schema
fragment as it migrates forward.

This fixes a limitation of the Clojure implementation, which did not
handle historical idents across knowledge base close and re-open.

The ""entids"" materialized view is naturally a slice of the ""datoms""
table.  The ""idents"" materialized view is a slice of the
""transactions"" table.  I hope that representing in this way, and
casting the problem in this light, might generalize to future
materialized views."
1117,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,63dcff8df6f2f91a3b94517112699b17ab44f572,"Part 3: Separate `schema_to_mutate` from the `schema` used to interpret.

This is just to keep track of the expected changes during
bootstrapping.  I want bootstrap metadata mutations to flow through
the same code path as metadata mutations during regular transactions;
by differentiating the schema used for interpretation from the schema
that will be updated I expect to be able to apply bootstrap metadata
mutations to an empty schema and have things like materialized views
created (using the regular code paths).

This commit has been re-ordered for conceptual clarity, but it won't
compile because it references the metadata module.  It's possible to
make it compile -- the functionality is there in the schema module --
but it's not worth the rebasing effort until after review (and
possibly not even then, since we'll squash down to a single commit to
land)."
1118,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,91ad2d81f7f0a363cac39031dc27616b3fbed352,"Part 4: Collect mutations to a `Schema`.

I haven't taken your review comment about consuming AttributeBuilder
during each fluent function.  If you read my response and still want
this, I'm happy to do it in review."
1119,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,29c6a339390d98d0a198b7bfc1e6ffd0635c1c38,"Part 5: Handle :db/ident and :db.{install,alter}/attribute.

This ""loops"" the committed datoms out of the SQL store and back
through the metadata (schema, but in future also partition map)
processor.  The metadata processor updates the schema and produces a
report of what changed; that report is then used to update the SQL
store.  That update includes:
- the materialized views (""entids"", ""idents"", and ""schema"");
- if needed, a subset of the datoms themselves (as flags change).

I've left a TODO for handling attribute retraction in the cases that
it makes sense.  I expect that to be straight-forward."
1120,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,36633c188a9c8a9dbe4b284cd5e0920ccc14bd26,"Review comment: Rename DiffSet to AddRetractAlterSet.

Also adds a little more commentary and a simple test."
1121,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8483fd98370d1e1a3a2448e32cc20be24362302e,Review comment: Use ToIdent trait.
1122,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6c34d83865fc2ed5af0d4b2099100b603a3373a1,"Review comment: partially revert ""Part 2: Maintain entids separately from idents.""

This reverts commit 23a91df9c35e14398f2ddbd1ba25315821e67401.

Following our discussion, this removes the ""entids"" materialized
view.  The next commit will remove historical idents from the ""idents""
materialized view."
1123,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,617258149588445a507cf118282f277488b9b812,Review comment: Don't preserve historical idents.
1124,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,114d20511dc9d2743b647b57c04edde0de5a7a33,Review comment: More prepared statements when updating materialized views.
1125,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5203ebb8f8286f815a307a8f08a5d9ecdc11dd08,"Post: Use custom Either rather than std::result::Result.

This is not necessary, but it was suggested that we might be paying an
overhead creating Err instances while using error_chain.  That seems
not to be the case, but this change shows that we don't actually use
any of the Result helper methods, so there's no reason to overload
Result.  This change might avoid some future confusion, so I'm going
to land it anyway.

Signed-off-by: Nick Alexander <nalexander@mozilla.com>"
1126,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,37816b5511c42f5bab7cd79a99367fe515d68825,"Post: Test altering :db/cardinality and :db/unique.

These tests fail due to a Datomic limitation, namely that the marker
flag :db.alter/attribute can only be asserted once for an attribute!
That is, [:db.part/db :db.alter/attribute :attribute] will only be
transacted at most once.  Since older versions of Datomic required the
:db.alter/attribute flag, I can only imagine they either never wrote
:db.alter/attribute to the store, or they handled it specially.  I'll
need to remove the marker flag system from Mentat in order to address
this fundamental limitation."
1127,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,add8144a2e66eaec2569962f4e1a3e88dbb6ac86,Post: Remove some more single quotes from error output.
1128,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b93e0598768051673fb4952aa0372d00ee792204,"Post: Add assert_transact! macro to unwrap safely.

I was finding it very difficult to track unwrapping errors while
making changes, due to an underlying Mac OS X symbolication issue that
makes running tests with RUST_BACKTRACE=1 so slow that they all time
out."
1129,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8015da20ad1275ae36eca4682fdd3b0aa96869b,"Post: Don't expect or recognize :db.{install,alter}/attribute.

I had this all working... except we will never see a repeated
`[:db.part/db :db.alter/attribute :attribute]` assertion in the store!
That means my approach would let you alter an attribute at most one
time.  It's not worth hacking around this; it's better to just stop
expecting (and recognizing) the marker flags.  (We have all the data
to distinguish the various cases that we need without the marker
flags.)

This brings Mentat in line with the thrust of newer Datomic versions,
but isn't compatible with Datomic, because (if I understand correctly)
Datomic automatically adds :db.{install,alter}/attribute assertions to
transactions.

I haven't purged the corresponding :db/ident and schema fragments just
yet:
- we might want them back
- we might want them in order to upgrade v1 and v2 databases to the
  new on-disk layout we're fleshing out (v3?)."
1130,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c0b75b91057a425fa6388bf781283accfa61a450,"Post: Don't make :db/unique :db.unique/* imply :db/index true.

This patch avoids a potential bug with the ""schema"" materialized view.
If :db/unique :db.unique/value implies :db/index true, then what
happens when you _retract_ :db.unique/value?  I think Datomic defines
this in some way, but I really want the ""schema"" materialized view to
be a slice of ""datoms"" and not have these sort of ambiguities and
persistent effects.  Therefore, to ensure that we don't retract a
schema characteristic and accidentally change more than we intended
to, this patch stops having any schema characteristic imply any other
schema characteristic(s).  To achieve that, I added an
Option<Unique::{Value,Identity}> type to Attribute; this helps with
this patch, and also looks ahead to when we allow to retract
:db/unique attributes."
1131,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,edac72947dad6174206f671528fef08956ff0bf9,Post: Allow to retract :db/ident.
1132,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b39f0277e192ace8797d43dde6dbba67517750d,"Post: Include more details about invalid schema changes.

The tests use strings, so they hide the chained errors which do in
fact provide more detail."
1133,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,baedbb81107ffbd2f1fcde1c245dc1243aa49ff7,Review comment: Fix outdated comment.
1134,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99c721712beb52b50426ab05089a2c9e946e5e25,Review comment: s/_SET/_SQL_LIST/.
1135,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0ff0257af567af3cfed20aa27db13baba97c9434,"Review comment: Use a sub-select for checking cardinality.

This might be faster in practice."
1136,https://api.github.com/repos/mozilla/mentat/pulls/370,370,Schema alteration.,This is WIP towards #294 and #295 and the equivalent for `:db/ident`.  Not quite ready for review yet.,ncalexan,1097182,2017-03-10T16:36:49Z,MEMBER,True,1225,333,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,704b0a7777d635331fd999c859072b276a1d2a1d,Review comment: Put `attribute::Unique` into its own namespace.
1137,https://api.github.com/repos/mozilla/mentat/pulls/369,369,Support inputs in ConjoiningClauses,Note that VSCode is fine with comments in JSON files!,rnewman,91722,2017-03-10T00:53:46Z,COLLABORATOR,False,153,22,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,914902cf9ec4f8f6c5684f454a4e3f2436edf4b8,Ignore build output in VSCode.
1138,https://api.github.com/repos/mozilla/mentat/pulls/369,369,Support inputs in ConjoiningClauses,Note that VSCode is fine with comments in JSON files!,rnewman,91722,2017-03-10T00:53:46Z,COLLABORATOR,False,153,22,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47eb796e22ccf2b9141246a0e859ee2ffc50e5f2,Support input bindings in ConjoiningClauses.
1139,https://api.github.com/repos/mozilla/mentat/pulls/367,367,Use rusqlite 0.10.1.,"Changelog:

https://github.com/jgallagher/rusqlite/releases

This blocks #288 and #366.",rnewman,91722,2017-03-09T17:45:11Z,COLLABORATOR,True,3,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,856d00c53dbd1184015c810e342ccb89d56f2946,Use rusqlite 0.10.1. r=nalexander
1140,https://api.github.com/repos/mozilla/mentat/pulls/365,365,Collect tempids after upsert resolution. Fixes #299.,,ncalexan,1097182,2017-03-09T00:04:18Z,MEMBER,True,85,22,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,61d7100d295b68b09a8498f4a939297aa5f50b8a,"Test collecting tempids after upsert resolution. Fixes #299.

I just didn't finish and expose the tempid collection when I
implemented upsert resolution.  Here it is!"
1141,https://api.github.com/repos/mozilla/mentat/pulls/365,365,Collect tempids after upsert resolution. Fixes #299.,,ncalexan,1097182,2017-03-09T00:04:18Z,MEMBER,True,85,22,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,79791936cbd8a9b1722be6f8f52867a1d15508df,Review comment: Take ownership of temp_id_map; avoid contains_key().
1142,https://api.github.com/repos/mozilla/mentat/pulls/364,364,Convert EDN transaction tests to Rust code. Fixes #271.,@victorporof I thought you might want to review a patch that depends so heavily on the work you did with the pattern matcher.  Thanks for it!,ncalexan,1097182,2017-03-08T23:23:33Z,MEMBER,True,293,407,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8ee7cf8383ac0de61074bc78376acbcc9b40d0c1,Pre: Don't rewrite ?txN and ?msN in debug module into_edn() methods.
1143,https://api.github.com/repos/mozilla/mentat/pulls/364,364,Convert EDN transaction tests to Rust code. Fixes #271.,@victorporof I thought you might want to review a patch that depends so heavily on the work you did with the pattern matcher.  Thanks for it!,ncalexan,1097182,2017-03-08T23:23:33Z,MEMBER,True,293,407,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b6cbbab7c8ed393f171497c00d0c6227676469f8,"Pre: Order datoms deterministically in debug output.

This makes comparison much easier, and avoids a whole class of
difficult problems when introducing pattern matching with placeholder
values."
1144,https://api.github.com/repos/mozilla/mentat/pulls/364,364,Convert EDN transaction tests to Rust code. Fixes #271.,@victorporof I thought you might want to review a patch that depends so heavily on the work you did with the pattern matcher.  Thanks for it!,ncalexan,1097182,2017-03-08T23:23:33Z,MEMBER,True,293,407,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,44ee69828f34ea6c79e1b043c08310ffef39a4ed,"Convert EDN transaction tests to Rust code. Fixes #271.

This implements
https://github.com/mozilla/mentat/issues/271#issuecomment-283125963.
I'm using the EDN pattern matching functionality
internally (extensively!), but specifically working around the tricky
edges we encountered.  This should let us implement tests quickly (and
hopefully legibly) while not requiring us to encode as much behaviour
into non-standard EDN notations."
1145,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c241c54a075a9ed369c0adbf53abca1cb6f3900,Implement basic query limits.
1146,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a3fa91c4f2c8862142466776e15378b095aa97f4,"Pre: move SQLValueType to core, because it's so central.

Yes, this isn't tidy... but in order to be really tidy we'd need to
split up db into parts that don't depend on a particular SQLite library."
1147,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6efc196bf95ece04c8b7d96dd7721b3ca3023b1c,Pre: add an interpose macro for SQL output.
1148,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6352e5f1d6909b96261efaaf1c67a09e723a2e7e,"Part 1: if a variable's type becomes known, don't extract it.

This is necessary because we process patterns sequentially; a later
pattern might tell us the type of a variable (e.g., by having a
constant attribute), at which point we can do less work."
1149,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,41cb9dff0405fdf8e487419a1de61d3854732801,Part 2: use constrain_attribute.
1150,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aebbcb5447b838ef7f1bead9521d315c674f96d9,Part 3: implement querying against simple keywords.
1151,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1c134b422351f9db00d9d0c1d4ab49b136eae994,Handle unknown attributes by expanding type codes.
1152,https://api.github.com/repos/mozilla/mentat/pulls/362,362,WIP: more algebrizing,"This fleshes out some of the missing parts of the algebrizer:

- Non-ident keywords.
- Known-type optimization.
- Supporting arbitrary numerics: `[?x _ 15]`.",rnewman,91722,2017-03-07T04:20:11Z,COLLABORATOR,False,559,104,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,015725418b989a233ff58644cd397e0d2048dce1,"Implement null projections, correct type tags, and more."
1153,https://api.github.com/repos/mozilla/mentat/pulls/361,361,Implement basic query limits.,,rnewman,91722,2017-03-07T00:28:16Z,COLLABORATOR,False,73,18,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c241c54a075a9ed369c0adbf53abca1cb6f3900,Implement basic query limits.
1154,https://api.github.com/repos/mozilla/mentat/pulls/359,359,Support a limited set of '.'-prefixed symbols. (#352),"This commit allows `.` and `...` to parse correctly as `PlainSymbol`.

Tests in edn, query-translator, and the top level have been added.

I opted for the minimal solution.",rnewman,91722,2017-03-06T22:56:32Z,COLLABORATOR,False,22,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,427c7b1de43aed5b65173f5612fdfbe154593a0c,"Support a limited set of '.'-prefixed symbols. (#352)

This commit allows '.' and '...' to parse correctly as PlainSymbol.

Tests in edn, query-translator, and the top level have been added."
1155,https://api.github.com/repos/mozilla/mentat/pulls/354,354,Accept symbol names and namespaces with '.'. Fixes #352.,I did some testing in the Clojure REPL to verify these.,ncalexan,1097182,2017-02-28T02:19:50Z,MEMBER,False,19,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,092b5f07d931447b80176ad085836c740ee4b7d5,"Accept symbol names and namespaces with '.'. Fixes #342.

I did some testing in the Clojure REPL to verify these."
1156,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aceb10fb596e91f74668bfb814b58f06f6b9d454,Add a failing test for EDN parsing '…'.
1157,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,168d8ec8e65c779c857f2584188359a2b3536456,Expose a SQLValueType trait to get value_type_tag values out of a ValueType.
1158,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6217c8aad7b32f082fb6aff88e9fde95583f7742,Add accessors to FindSpec.
1159,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,22e70ad6a0e435ba8144a94439a99fb4ab559f18,"Implement rudimentary projection.

This involves:

* Splitting Mentat-specific SQL query types into mentat_query_sql.
  That's so that the SQL library doesn't need to care about types from
  the algebrizer.

* Adding the beginnings of a projection crate.

* Linking up projection and translating."
1160,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ece0cb5a4bf77c6ad1d99408aaa1ca6fd50b2595,Implement querying.
1161,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ecba6a6d587dd8524f55b508631d10ca11c2b620,Export mentat_db::new_connection.
1162,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99ab85188810e22f1e4bc3ad1c1f7435e088cf73,Export symbols from mentat.
1163,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7667f7f585b8512b34417a6c2b832dd94894eaed,Add rudimentary end-to-end query tests.
1164,https://api.github.com/repos/mozilla/mentat/pulls/353,353,Projection and miscellany,This PR is work to get us to the point of running a complete query from input string to results. Most of that work will be in projection.,rnewman,91722,2017-02-28T00:20:42Z,COLLABORATOR,True,820,73,19,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7b584a1e42cfa24fe8487567fb6d48cb8171b3b7,Review comments.
1165,https://api.github.com/repos/mozilla/mentat/pulls/351,351,Initial implementation to see if we're on the right lines,"No polish, just to see if I'm on the right lines",joewalker,76258,2017-02-25T09:33:29Z,MEMBER,False,108,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,68ae11a44f8a0bbc5bf57e4bafc9c03ee23c12e3,Initial implementation to see if we're on the right lines
1166,https://api.github.com/repos/mozilla/mentat/pulls/351,351,Initial implementation to see if we're on the right lines,"No polish, just to see if I'm on the right lines",joewalker,76258,2017-02-25T09:33:29Z,MEMBER,False,108,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,89ef4162b915bd09d740fcbecde73db7bbd9fc1f,"Work in progress...

Enable ... in rustpeg - just a hack we should land properly with tests
Allow ... to match nothing."
1167,https://api.github.com/repos/mozilla/mentat/pulls/350,350,Add edn differ,"Fixes https://github.com/mozilla/mentat/issues/220

Signed-off-by: Victor Porof <victor.porof@gmail.com>",victorporof,248899,2017-02-24T09:07:40Z,CONTRIBUTOR,False,516,40,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5e46f2cab759491e1f747b986b287a1ef66fb9d7,"Implement expanded style for pretty printing

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1168,https://api.github.com/repos/mozilla/mentat/pulls/350,350,Add edn differ,"Fixes https://github.com/mozilla/mentat/issues/220

Signed-off-by: Victor Porof <victor.porof@gmail.com>",victorporof,248899,2017-02-24T09:07:40Z,CONTRIBUTOR,False,516,40,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e9718fc2ab46047639b83256ab61df9d462778db,"Add helpers for performing textual diffing between edn values

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1169,https://api.github.com/repos/mozilla/mentat/pulls/349,349,"Use error_chain in sql, query-parser, query-translator.","Note that I bumped to 0.9.0, which appears to fix some bugs. I did this while trying to solve an obscure macro expansion error (complaining about an extra `;`, when the issue was a _missing_ `;` somewhere else).

The last commit is a coal-face; you only really need to worry about the Error bits.

@ncalexan knows most about error_chain. @victorporof, please also take a look.",rnewman,91722,2017-02-24T05:24:57Z,COLLABORATOR,False,201,119,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,35257ce252a8edf8985e1eb0579d7d20d23d560d,Bump mentat_db error-chain to 0.9.0.
1170,https://api.github.com/repos/mozilla/mentat/pulls/349,349,"Use error_chain in sql, query-parser, query-translator.","Note that I bumped to 0.9.0, which appears to fix some bugs. I did this while trying to solve an obscure macro expansion error (complaining about an extra `;`, when the issue was a _missing_ `;` somewhere else).

The last commit is a coal-face; you only really need to worry about the Error bits.

@ncalexan knows most about error_chain. @victorporof, please also take a look.",rnewman,91722,2017-02-24T05:24:57Z,COLLABORATOR,False,201,119,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b62523f68d953573f9991cbe8f6491f4d8d991e8,Convert mentat_query_parser to use error-chain.
1171,https://api.github.com/repos/mozilla/mentat/pulls/349,349,"Use error_chain in sql, query-parser, query-translator.","Note that I bumped to 0.9.0, which appears to fix some bugs. I did this while trying to solve an obscure macro expansion error (complaining about an extra `;`, when the issue was a _missing_ `;` somewhere else).

The last commit is a coal-face; you only really need to worry about the Error bits.

@ncalexan knows most about error_chain. @victorporof, please also take a look.",rnewman,91722,2017-02-24T05:24:57Z,COLLABORATOR,False,201,119,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,81400d50fd56b6a9398072af4bb1bc501cded22b,Convert mentat_sql to use error-chain.
1172,https://api.github.com/repos/mozilla/mentat/pulls/349,349,"Use error_chain in sql, query-parser, query-translator.","Note that I bumped to 0.9.0, which appears to fix some bugs. I did this while trying to solve an obscure macro expansion error (complaining about an extra `;`, when the issue was a _missing_ `;` somewhere else).

The last commit is a coal-face; you only really need to worry about the Error bits.

@ncalexan knows most about error_chain. @victorporof, please also take a look.",rnewman,91722,2017-02-24T05:24:57Z,COLLABORATOR,False,201,119,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,20cf6b52886cacd6502c8ad43b1cc23a8036abac,Use error_chain at top level.
1173,https://api.github.com/repos/mozilla/mentat/pulls/344,344,Add discussion of storage difficulties.,,rnewman,91722,2017-02-23T00:56:57Z,COLLABORATOR,True,53,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b917a6276b66b49a225e51f76ef916720ca94c84,Add discussion of storage difficulties.
1174,https://api.github.com/repos/mozilla/mentat/pulls/344,344,Add discussion of storage difficulties.,,rnewman,91722,2017-02-23T00:56:57Z,COLLABORATOR,True,53,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f95a2cd060dccf56519bc86cc9633722ad636a0a,Replace mention of MVP with discussion of initial requirements.
1175,https://api.github.com/repos/mozilla/mentat/pulls/342,342,Add top-level `Conn`. Fixes #296.,See commit comment for some notes.,ncalexan,1097182,2017-02-22T22:26:32Z,MEMBER,True,227,16,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4d323acef02dcf7bd72dd25205a677477ae69c99,"Add top-level `Conn`. Fixes #296.

This is a little different than the API rnewman and I originally
discussed in https://public.etherpad-mozilla.org/p/db-conn-thoughts.
A few notes:

- I was led to make a `Schema` instance the thing that is shared,
  rather than a `db::DB`.  It's possible that queries will want to
  know the current transaction at some point (to prevent races, or to
  query historical data), but that can be a future consideration.

- The generation number just allows for a cheap comparison.  I don't
  care to handle races to transact just yet; the long term plan might
  be to make embedding applications responsible for avoiding races, or
  we might handle queuing transactions and yielding report futures in
  Mentat itself.

- The sharing of the partition maps is a little more subtle than
  expected.  Partition maps are volatile: a successful Mentat
  transaction always advances the :db.part/tx partition, so it's not
  worth passing references around.  This means that consumers must
  clone in order to maintain just a single clone per transaction.

Clean some cruft."
1176,https://api.github.com/repos/mozilla/mentat/pulls/342,342,Add top-level `Conn`. Fixes #296.,See commit comment for some notes.,ncalexan,1097182,2017-02-22T22:26:32Z,MEMBER,True,227,16,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2f6bbe7855fbcc95c966418c73ac7d50e30f0cc1,Review comments.
1177,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b567ca76181f6c7ec40698331f4b5779e2e1d8e,Pre: Fix indentation.
1178,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a93e357c22198c729ecf1b802331f514e32054c4,Pre: Drop unneeded tx0 from search results.
1179,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d92a5504536767f8fb8abfd3f78e0b31bdd62265,"Pre: Don't require a schema in some of the DB code.

The idea is to separate the transaction applying code, which is
schema-aware, from the concrete storage code, which is just concerned
with getting bits onto disk."
1180,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,18c09b047a65dcb78426c28a7252a20acae2e479,"Pre: Only reference Schema, not DB, in debug module.

This is part of a larger separation of the volatile PartitionMap,
which is modified every transaction, from the stable Schema, which is
infrequently modified."
1181,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a04e9098207f176c0132e63efed80a37d6191a1e,"Pre: Accept Borrow<Schema> instead of just &Schema in debug module.

This makes it easy to use Rc<Schema> or Arc<Schema> without inserting
&* sigils throughout the code."
1182,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e2e9d8a3cee5f443672350dc64f42309db2f8f95,"Pre: Don't expect :db.part/tx partition to advance when tx fails.

This fails right now, because we allocate tx IDs even when we shouldn't."
1183,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d60a8d21b5364433811a9a9d6b42a05a335d29a,Extract part of DB to new SchemaTypeChecking trait.
1184,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a6824645c85d7821f10f705d51442f2872d0589c,Extract part of DB to new PartitionMapping trait.
1185,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f133c5071375a00bb293a7e7674fc5d175bf4cad,Sketch a db interface without DB.
1186,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dab6a0b9fc1c2a8b7be2d3f04501bcb58996df3a,"Add ValueParseError; use error-chain in tx-parser.

This can be simplified when
https://github.com/Marwes/combine/issues/86 makes it to a published
release, but this unblocks us for now.  This converts the `combine`
error type `ParseError<&'a [edn::Value]>` to a type with owned
`Vec<edn::Value>` collections, re-using `edn::Value::Vector` for
making them `Display`."
1187,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,00513c0fe9a375ca8665a17b005b677ea405e02e,"Use error-chain in query-parser.

There are a few things to point out here:

- the fine grained error types have been flattened into one crate-wide
  error type; it's pretty easy to regain the granularity as needed.

- edn::ParseError is automatically lifted to
  mentat_query_parser::errors::Error;

- we use mentat_parser_utils::ValueParser to maintain parsing error
  information from `combine`."
1188,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,50afa62502a48a77f3500d10db70e50da9686120,Patch up top-level.
1189,https://api.github.com/repos/mozilla/mentat/pulls/341,341,Db and errors,"This commit sequence is a bit all over the place.  It's all preparatory work for a top-level `Conn`, as tracked by #296.  That's still in progress in my tree.

The first series of  commits, up to and including https://github.com/ncalexan/mentat/commit/201ffc712cf2b1189903a12d16d3190a13293476, are about separating the SQLite bits from the `DB` type.  See the comments around the `MentatStoring` trait.

The last few commits, including and following https://github.com/ncalexan/mentat/commit/b8a7c84ea47b5e0d9b0cc27b85faab55c4ff1c00, are about moving the existing code to `error-chain`.  You can see the chaining (a little), and unifying some error types.  This also surfaces errors out of `combine`; see some of the commit messages for notes.",ncalexan,1097182,2017-02-22T18:43:30Z,MEMBER,True,659,410,24,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3d3328c6f3baab4a630129755075da111ad69fd9,Review comment: Only `borrow()` once.
1190,https://api.github.com/repos/mozilla/mentat/pulls/340,340,"Lint for the clippy gods in the edn crate, r=ncalexan",Signed-off-by: Victor Porof <victor.porof@gmail.com>,victorporof,248899,2017-02-22T10:13:11Z,CONTRIBUTOR,True,20,21,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,444ee84c4dbf503dfd9437e6fc980842232cb8c8,"Lint for the clippy gods in the edn crate

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1191,https://api.github.com/repos/mozilla/mentat/pulls/339,339,Moar SQL,"The bulk of this PR is about accumulating values into SQL.

When faced with a Datalog query like:

```clojure
[:find … [?x _ ""foo bar""]]
```

We have a choice: try to expand those literals into the query, escaping appropriately, reserving the parameter list for user-supplied parameters… or we can not solve the escaping problem and instead use bindings.

I took the latter approach for all non-numeric values. But that means we can end up with a SQL query that interleaves user parameter inputs with query literals:

```clojure
[:find ?x :in ?foo [?x :foo/baz ""something""] [?x :foo/bar ?foo]]
```

turns into something like

```sql
SELECT datoms00.e AS x
FROM datoms AS datoms00, datoms AS datoms01
WHERE datoms00.a = 65591
  AND datoms00.v = ?                -- This needs to be ""something""
  AND datoms01.a = 65592
  AND datoms01.v = ?                 -- This needs to be ?foo
```

Using positional arguments for `?foo` would be difficult: we might have positions 0, 1, and 3 be pre-bound and positions 2 and 4 being inputs.

The obvious solution is to use named parameters. That's the approach taken here: we use named parameters for these 'synthetic' value bindings, and also named parameters for input variables.

This handily also avoids the need to ever duplicate an argument: SQLite will take care of looking them up multiple times.

On top of this work, I've implemented rudimentary algebrizing and rudimentary translation into SQL, culminating in a simple end-to-end query example.",rnewman,91722,2017-02-22T04:19:23Z,COLLABORATOR,False,372,50,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,000d934bd7f2c7b27f3d8ec6feb5eb38acbca5de,Fix query/Cargo.toml indenting.
1192,https://api.github.com/repos/mozilla/mentat/pulls/339,339,Moar SQL,"The bulk of this PR is about accumulating values into SQL.

When faced with a Datalog query like:

```clojure
[:find … [?x _ ""foo bar""]]
```

We have a choice: try to expand those literals into the query, escaping appropriately, reserving the parameter list for user-supplied parameters… or we can not solve the escaping problem and instead use bindings.

I took the latter approach for all non-numeric values. But that means we can end up with a SQL query that interleaves user parameter inputs with query literals:

```clojure
[:find ?x :in ?foo [?x :foo/baz ""something""] [?x :foo/bar ?foo]]
```

turns into something like

```sql
SELECT datoms00.e AS x
FROM datoms AS datoms00, datoms AS datoms01
WHERE datoms00.a = 65591
  AND datoms00.v = ?                -- This needs to be ""something""
  AND datoms01.a = 65592
  AND datoms01.v = ?                 -- This needs to be ?foo
```

Using positional arguments for `?foo` would be difficult: we might have positions 0, 1, and 3 be pre-bound and positions 2 and 4 being inputs.

The obvious solution is to use named parameters. That's the approach taken here: we use named parameters for these 'synthetic' value bindings, and also named parameters for input variables.

This handily also avoids the need to ever duplicate an argument: SQLite will take care of looking them up multiple times.

On top of this work, I've implemented rudimentary algebrizing and rudimentary translation into SQL, culminating in a simple end-to-end query example.",rnewman,91722,2017-02-22T04:19:23Z,COLLABORATOR,False,372,50,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d6ddc6ecd440899b1ca65ee76f668965b3a0c15,"Support accumulating TypedValue instances into a SQL query.

These expand into a collection of named variables that should be
passed via bind parameters when the query is executed.

Bind parameters are now only named."
1193,https://api.github.com/repos/mozilla/mentat/pulls/339,339,Moar SQL,"The bulk of this PR is about accumulating values into SQL.

When faced with a Datalog query like:

```clojure
[:find … [?x _ ""foo bar""]]
```

We have a choice: try to expand those literals into the query, escaping appropriately, reserving the parameter list for user-supplied parameters… or we can not solve the escaping problem and instead use bindings.

I took the latter approach for all non-numeric values. But that means we can end up with a SQL query that interleaves user parameter inputs with query literals:

```clojure
[:find ?x :in ?foo [?x :foo/baz ""something""] [?x :foo/bar ?foo]]
```

turns into something like

```sql
SELECT datoms00.e AS x
FROM datoms AS datoms00, datoms AS datoms01
WHERE datoms00.a = 65591
  AND datoms00.v = ?                -- This needs to be ""something""
  AND datoms01.a = 65592
  AND datoms01.v = ?                 -- This needs to be ?foo
```

Using positional arguments for `?foo` would be difficult: we might have positions 0, 1, and 3 be pre-bound and positions 2 and 4 being inputs.

The obvious solution is to use named parameters. That's the approach taken here: we use named parameters for these 'synthetic' value bindings, and also named parameters for input variables.

This handily also avoids the need to ever duplicate an argument: SQLite will take care of looking them up multiple times.

On top of this work, I've implemented rudimentary algebrizing and rudimentary translation into SQL, culminating in a simple end-to-end query example.",rnewman,91722,2017-02-22T04:19:23Z,COLLABORATOR,False,372,50,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,541fe3aa7f9becef1a11bc059f7d8d8ee03a134e,Expand query algebrizer.
1194,https://api.github.com/repos/mozilla/mentat/pulls/339,339,Moar SQL,"The bulk of this PR is about accumulating values into SQL.

When faced with a Datalog query like:

```clojure
[:find … [?x _ ""foo bar""]]
```

We have a choice: try to expand those literals into the query, escaping appropriately, reserving the parameter list for user-supplied parameters… or we can not solve the escaping problem and instead use bindings.

I took the latter approach for all non-numeric values. But that means we can end up with a SQL query that interleaves user parameter inputs with query literals:

```clojure
[:find ?x :in ?foo [?x :foo/baz ""something""] [?x :foo/bar ?foo]]
```

turns into something like

```sql
SELECT datoms00.e AS x
FROM datoms AS datoms00, datoms AS datoms01
WHERE datoms00.a = 65591
  AND datoms00.v = ?                -- This needs to be ""something""
  AND datoms01.a = 65592
  AND datoms01.v = ?                 -- This needs to be ?foo
```

Using positional arguments for `?foo` would be difficult: we might have positions 0, 1, and 3 be pre-bound and positions 2 and 4 being inputs.

The obvious solution is to use named parameters. That's the approach taken here: we use named parameters for these 'synthetic' value bindings, and also named parameters for input variables.

This handily also avoids the need to ever duplicate an argument: SQLite will take care of looking them up multiple times.

On top of this work, I've implemented rudimentary algebrizing and rudimentary translation into SQL, culminating in a simple end-to-end query example.",rnewman,91722,2017-02-22T04:19:23Z,COLLABORATOR,False,372,50,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ddbce0e5ba22efb7bee3fc6c2ad416c7d59e3195,Implement query-translator.
1195,https://api.github.com/repos/mozilla/mentat/pulls/339,339,Moar SQL,"The bulk of this PR is about accumulating values into SQL.

When faced with a Datalog query like:

```clojure
[:find … [?x _ ""foo bar""]]
```

We have a choice: try to expand those literals into the query, escaping appropriately, reserving the parameter list for user-supplied parameters… or we can not solve the escaping problem and instead use bindings.

I took the latter approach for all non-numeric values. But that means we can end up with a SQL query that interleaves user parameter inputs with query literals:

```clojure
[:find ?x :in ?foo [?x :foo/baz ""something""] [?x :foo/bar ?foo]]
```

turns into something like

```sql
SELECT datoms00.e AS x
FROM datoms AS datoms00, datoms AS datoms01
WHERE datoms00.a = 65591
  AND datoms00.v = ?                -- This needs to be ""something""
  AND datoms01.a = 65592
  AND datoms01.v = ?                 -- This needs to be ?foo
```

Using positional arguments for `?foo` would be difficult: we might have positions 0, 1, and 3 be pre-bound and positions 2 and 4 being inputs.

The obvious solution is to use named parameters. That's the approach taken here: we use named parameters for these 'synthetic' value bindings, and also named parameters for input variables.

This handily also avoids the need to ever duplicate an argument: SQLite will take care of looking them up multiple times.

On top of this work, I've implemented rudimentary algebrizing and rudimentary translation into SQL, culminating in a simple end-to-end query example.",rnewman,91722,2017-02-22T04:19:23Z,COLLABORATOR,False,372,50,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b6ec7b5eccda39260aa012e6e60024afca533da7,Add missing comma.
1196,https://api.github.com/repos/mozilla/mentat/pulls/338,338,Implement a basic edn matcher,Fixes part of #271,victorporof,248899,2017-02-21T16:11:15Z,CONTRIBUTOR,True,582,0,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1dac88891561dfa38267fbf7c494872cc17703f6,"Implement a basic edn matcher, r=ncalexan (#271)

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1197,https://api.github.com/repos/mozilla/mentat/pulls/336,336,Mark every project as being part of the workspace.,This allows `cargo test --all` to work.,rnewman,91722,2017-02-20T17:36:43Z,COLLABORATOR,False,15,12,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f5f4528cac672a0b7f14fd155090ab45e3eef6f6,"Mark every project as being part of the workspace.

This allows cargo test --all to work."
1198,https://api.github.com/repos/mozilla/mentat/pulls/336,336,Mark every project as being part of the workspace.,This allows `cargo test --all` to work.,rnewman,91722,2017-02-20T17:36:43Z,COLLABORATOR,False,15,12,13,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3b65723a5b65424d5cee6f0804ef8cd8cd6492a,Simplify .travis.yml.
1199,https://api.github.com/repos/mozilla/mentat/pulls/335,335,Shell script for creating docs and running tests,,joewalker,76258,2017-02-20T14:41:19Z,MEMBER,False,45,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,452f9f40abad0758648473ac630be0147fac2782,Shell script for creating docs and running tests
1200,https://api.github.com/repos/mozilla/mentat/pulls/334,334,Remove most uses of `use foo::*`,"Not expanded are nested instances of `use super::*`, but maybe we should add those too. I held off just because that would be code that breaks itself.",joewalker,76258,2017-02-20T13:14:04Z,MEMBER,True,33,7,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,40bca2df6dbbc0dd6a50a65dd0731f45847e3a25,Remove most uses of `use foo::*`
1201,https://api.github.com/repos/mozilla/mentat/pulls/333,333,Change to_namespaced_keyword(s) to return a Result,"Change to_namespaced_keyword(s) to return a Result rather than Option to reduce error handling throughout db code. Fixes #331. I think this is a good approach for reducing the to-be-implemented custom ErrorKind throughout code. You mentioned combining it into `schema.require_entid`, but that's a different usage (it checks the ident_map).",jsantell,641267,2017-02-17T23:15:12Z,MEMBER,True,13,18,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b39bd3fa48b5fd1fe7507795c970ae9e7f514ede,"Change to_namespaced_keyword(s) to return a Result rather than Option to
reduce error handling throughout db code. Fixes #331. r=nalexander"
1202,https://api.github.com/repos/mozilla/mentat/pulls/329,329,TypedValue::Keyword now wraps a NamespacedKeyword rather than a String. Fixes #203.,"Only pay mind to 4634502, this is based off of #300 PR",jsantell,641267,2017-02-17T19:48:12Z,MEMBER,True,15,23,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8dfb45f1e8cc9598f55f1bc43e544c20c90c6224,"TypedValue::Keyword now wraps a NamespacedKeyword rather than a String. Fixes #203. r=nalexander"""
1203,https://api.github.com/repos/mozilla/mentat/pulls/326,326,Codeify minimum rustc version in a build script so we can print a hel…,…pful message if a developer is using an out of date rustc. r=rnewman,jsantell,641267,2017-02-17T17:20:38Z,MEMBER,True,30,0,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ad6ed27374a9a4688679bdbeebdd391f3b690679,"Ensure minimum rustc version in a build script. r=nalexander

Printing out failure to meet rustc version helps users during
setup with a helpful message if using an older rustc.
Rust version checking from http://stackoverflow.com/a/36607492."
1204,https://api.github.com/repos/mozilla/mentat/pulls/325,325,Generate SQL. Fixes #273.,"This is a little horrible, and entirely unoptimized, but it should do the trick for #273.

Not yet implemented is the conversion from an algebraic query to the SQL query representation (#301). That should be straightforward.

The output of the test query is:

```
SELECT `datoms00`.`e` AS `x` FROM `datoms` AS `datoms00`, `datoms` AS `datoms01` WHERE `datoms01`.`v` = `datoms00`.`v` AND `datoms00`.`a` = 65537 AND `datoms01`.`a` = 65536
```",rnewman,91722,2017-02-17T02:50:46Z,COLLABORATOR,False,425,3,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,de64b9e02b9b279eed33840120e8f391d8f0a4ea,"Add a rudimentary SQL builder, based on parts of Diesel.

https://github.com/diesel-rs/diesel/"
1205,https://api.github.com/repos/mozilla/mentat/pulls/325,325,Generate SQL. Fixes #273.,"This is a little horrible, and entirely unoptimized, but it should do the trick for #273.

Not yet implemented is the conversion from an algebraic query to the SQL query representation (#301). That should be straightforward.

The output of the test query is:

```
SELECT `datoms00`.`e` AS `x` FROM `datoms` AS `datoms00`, `datoms` AS `datoms01` WHERE `datoms01`.`v` = `datoms00`.`v` AND `datoms00`.`a` = 65537 AND `datoms01`.`a` = 65536
```",rnewman,91722,2017-02-17T02:50:46Z,COLLABORATOR,False,425,3,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,40caad3f21e252271fe6be1114f9d631ac1cfaa5,Export symbols and string helpers from mentat_query_algebrizer.
1206,https://api.github.com/repos/mozilla/mentat/pulls/325,325,Generate SQL. Fixes #273.,"This is a little horrible, and entirely unoptimized, but it should do the trick for #273.

Not yet implemented is the conversion from an algebraic query to the SQL query representation (#301). That should be straightforward.

The output of the test query is:

```
SELECT `datoms00`.`e` AS `x` FROM `datoms` AS `datoms00`, `datoms` AS `datoms01` WHERE `datoms01`.`v` = `datoms00`.`v` AND `datoms00`.`a` = 65537 AND `datoms01`.`a` = 65536
```",rnewman,91722,2017-02-17T02:50:46Z,COLLABORATOR,False,425,3,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4eab41fa0a3ed1c5587433395162cc2e2cd01d7e,Begin serializing queries to SQL.
1207,https://api.github.com/repos/mozilla/mentat/pulls/325,325,Generate SQL. Fixes #273.,"This is a little horrible, and entirely unoptimized, but it should do the trick for #273.

Not yet implemented is the conversion from an algebraic query to the SQL query representation (#301). That should be straightforward.

The output of the test query is:

```
SELECT `datoms00`.`e` AS `x` FROM `datoms` AS `datoms00`, `datoms` AS `datoms01` WHERE `datoms01`.`v` = `datoms00`.`v` AND `datoms00`.`a` = 65537 AND `datoms01`.`a` = 65536
```",rnewman,91722,2017-02-17T02:50:46Z,COLLABORATOR,False,425,3,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d0f79cc1dfa16423def91f041c16787c889159cb,Add new stuff to Travis.
1208,https://api.github.com/repos/mozilla/mentat/pulls/323,323,Update README for edn; r=me,"I don't think this needs a review, but I'm at least going to go via a pull request.",joewalker,76258,2017-02-16T18:34:25Z,MEMBER,True,6,2,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,89949fb45178c05557e316ac21cab56d0d2299ce,Update README for edn; r=me
1209,https://api.github.com/repos/mozilla/mentat/pulls/322,322,Fix the authors entry in Cargo.toml,@jsantell @victorporof - Preferences for email addresses?,joewalker,76258,2017-02-16T18:25:43Z,MEMBER,True,7,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b509072018b3fad33fde4d2ff941fd72ee61d470,Fix the authors entry in Cargo.toml
1210,https://api.github.com/repos/mozilla/mentat/pulls/300,300,Store Ident/Entid mappings as NamespacedSymbols,"First round, stopped at this point because I think it might make more sense for the mappings to hold a reference to a NamespacedKeyword instead, any issues you can imagine doing that? Lots of cloning currently. Haven't dealt with much ownership/borrowing code in Rust.",jsantell,641267,2017-02-15T01:44:12Z,MEMBER,True,145,99,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f06d38dcefc98f9a5eafc52f2e0960aa6c9a4692,"Store Idents as NamespacedKeywords, rather than Strings. Fixes #291.
r=ncalexander"
1211,https://api.github.com/repos/mozilla/mentat/pulls/290,290,Move Schema from mentat_db to mentat_core.,"This is another split-and-move-to-core PR: the error-producing schema-building complex bits move into a private trait for `mentat_db`, and the simple lookup-oriented type definition moves into `mentat_core` so I can use it during query algebrizing.

I also defined `SchemaMap` in terms of `Entid`, not `i64`.
",rnewman,91722,2017-02-14T00:53:42Z,COLLABORATOR,True,115,67,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,de823579ca357d4cdcf50447e731eaaed3c203f8,"Move Schema from mentat_db to mentat_core.

Also define SchemaMap in terms of Entid, not i64."
1212,https://api.github.com/repos/mozilla/mentat/pulls/290,290,Move Schema from mentat_db to mentat_core.,"This is another split-and-move-to-core PR: the error-producing schema-building complex bits move into a private trait for `mentat_db`, and the simple lookup-oriented type definition moves into `mentat_core` so I can use it during query algebrizing.

I also defined `SchemaMap` in terms of `Entid`, not `i64`.
",rnewman,91722,2017-02-14T00:53:42Z,COLLABORATOR,True,115,67,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,29f5959ffdd1be897aa41f49033e836fc0fd406f,"Add Schema::{is_attribute,identifies_attribute}."
1213,https://api.github.com/repos/mozilla/mentat/pulls/290,290,Move Schema from mentat_db to mentat_core.,"This is another split-and-move-to-core PR: the error-producing schema-building complex bits move into a private trait for `mentat_db`, and the simple lookup-oriented type definition moves into `mentat_core` so I can use it during query algebrizing.

I also defined `SchemaMap` in terms of `Entid`, not `i64`.
",rnewman,91722,2017-02-14T00:53:42Z,COLLABORATOR,True,115,67,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d37572ccf36c508285c51dc202f19962ee1e65d5,Add pointer to #291.
1214,https://api.github.com/repos/mozilla/mentat/pulls/290,290,Move Schema from mentat_db to mentat_core.,"This is another split-and-move-to-core PR: the error-producing schema-building complex bits move into a private trait for `mentat_db`, and the simple lookup-oriented type definition moves into `mentat_core` so I can use it during query algebrizing.

I also defined `SchemaMap` in terms of `Entid`, not `i64`.
",rnewman,91722,2017-02-14T00:53:42Z,COLLABORATOR,True,115,67,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5248e0fa47b0382c40f501f926936bccd7f95f0,Don't pass around 64-bit pointers to 64-bit integers.
1215,https://api.github.com/repos/mozilla/mentat/pulls/289,289,Stub out mentat::q_once.,,rnewman,91722,2017-02-11T02:38:22Z,COLLABORATOR,True,92,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bc4487aeb1408404065f55c43cb6584657469507,Leave a pointer to issue 288.
1216,https://api.github.com/repos/mozilla/mentat/pulls/289,289,Stub out mentat::q_once.,,rnewman,91722,2017-02-11T02:38:22Z,COLLABORATOR,True,92,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e530801446a5210dbe8668e47e9bc175725107b8,Re-export mentat_db::types::DB from mentat_db.
1217,https://api.github.com/repos/mozilla/mentat/pulls/289,289,Stub out mentat::q_once.,,rnewman,91722,2017-02-11T02:38:22Z,COLLABORATOR,True,92,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6001cc2086ee9c1e80b79d41f2e0c81c37228120,Parse EDN strings in the query parser.
1218,https://api.github.com/repos/mozilla/mentat/pulls/289,289,Stub out mentat::q_once.,,rnewman,91722,2017-02-11T02:38:22Z,COLLABORATOR,True,92,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,16e6c05102abcf5b61c2dd8c769bbaed0b455e78,Export 'public' API from mentat_query_parser's top level.
1219,https://api.github.com/repos/mozilla/mentat/pulls/289,289,Stub out mentat::q_once.,,rnewman,91722,2017-02-11T02:38:22Z,COLLABORATOR,True,92,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e95786cd480380b9bf77140cf4c6142d8c747e52,Stub out mentat::q_once.
1220,https://api.github.com/repos/mozilla/mentat/pulls/287,287,s/expected[datoms|transaction]/expected-*,,jsantell,641267,2017-02-11T00:34:51Z,MEMBER,True,23,25,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dac2ae5f48391c565db5e6632f0044e9b3b27900,"Change expecteddatoms and expectedtransaction to their kebab-case counterparts, for valid EDN style. Fixes #270. r=nalexander"
1221,https://api.github.com/repos/mozilla/mentat/pulls/286,286,"Add octal, hexadecimal, and arbitrary base integers to the EDN parser",,jsantell,641267,2017-02-10T21:09:20Z,MEMBER,True,51,1,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,629616225219fa849c43de5f6ff0707cd1d022c4,"Add octal, hexadecimal, and arbitrary base integers to the EDN parser. Fixes #277. r=rnewman"
1222,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0eaa822f4eae1bbe01c661a871becd222f02d535,Pre: Implement batch [a v] pair lookup.
1223,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e5e3779f55444497926d8bdaac6774ccb948c6fd,Pre: Add InternSet for sharing ref-counted handles to large values.
1224,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4fd776051a9a467318771d64f0f87e39b4d25889,Pre: Derive more for Entity.
1225,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8ae2b4a9170a547572ba3ca2afb2f44724286ff1,"Pre: Return DB from creating; return TxReport from transact.

I explicitly am not supporting opening existing databases yet, let
alone upgrading databases from earlier versions.  That can follow fast
once basic transactions are supported."
1226,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8fe071e3a24022d61fda0fe161d5bba932a05045,"Pre: Parse string temporary ID entities; remove ValueOrLookupRef.

This adds TempId entities, but we can't disambiguate String temporary
IDs from values without the use of the schema, so there's no new value
branch.  Similarly, we can't disambiguate lookup-ref values from two
element list values without a schema, so we remove this entirely.
We'll handle the ambiguity later in the transactor."
1227,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73eead0c537384a23a311cb76ff9cdae5d2282dd,Persist partitions to SQL store; allocate transaction ID. (#186)
1228,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2ca0fa5fa407bdb7b7366d90cf3aa5089f33c717,Implement tempid upsert resolution algorithm. (#184)
1229,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,96fd119426c3597ff8dbdcae34eb424008cf2288,"Post: Test upserting with vectors.

This converts an existing test to EDN:
https://github.com/mozilla/mentat/blob/84a80f40f5c888f8452d07bd15f3b5fba49d3963/test/datomish/db_test.cljc#L193."
1230,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32c9f312a1e768bd39441fafe50cddcf810c2664,"Post: Separate Tx out of DB.

This is very preliminary, since we don't have a real connection type
to manage transactions and their metadata yet."
1231,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,558d41938bb85762264940db86c23ffe6957fdbd,Post: Comment on implementation choices in the transactor.
1232,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f2c56cb419db9925042c2524aebead0ddf683fd0,Review comment: Put long use lists on separate lines.
1233,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,97a647bbe2453008201c6259c9248d38595a1325,Review comment: Accept String: Borrow<S> instead of just String.
1234,https://api.github.com/repos/mozilla/mentat/pulls/283,283,Implement upsert resolution algorithm.,This PR will end up implementing #184.  Right now it's just a place-holder for some issues I want to file.,ncalexan,1097182,2017-02-10T17:27:18Z,MEMBER,True,1114,185,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f715a27bf94281a8f0687d96b0e15fde1a1a7f70,Review comment: Address nits.
1235,https://api.github.com/repos/mozilla/mentat/pulls/282,282,Expose line/column/character span position information from parsed EDN streams,"Fixes https://github.com/mozilla/mentat/issues/258

Signed-off-by: Victor Porof <victor.porof@gmail.com>",victorporof,248899,2017-02-10T17:10:01Z,CONTRIBUTOR,False,827,316,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b457dad234ceddb412730937b592682227a58b89,"Add a span component to edn::Value

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1236,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f7eab7a339d7d474ae1fbe0d26eb32cc073f8c4c,Re-export NamespacedKeyword and PlainSymbol out of query.
1237,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3f04bd1ceb17d81c8315169e65e695bb5c26d5f8,Derive PartialOrd and Ord for Variable.
1238,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f5d9124cb6dcbc0272fc5d9b21a25a5d1965afda,Implement NonIntegerConstant::into_typed_value.
1239,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a4992bb40d13eb80928294d6e1bfdea26b751e0,ValueType is Copy.
1240,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,138f43f7eb61cc6a7a04b3eba304eb7a375871bb,Implement TypedValue::is_congruent_with and ::matches_type.
1241,https://api.github.com/repos/mozilla/mentat/pulls/281,281,Miscellaneous prep work for query algebrizing,Whoever gets to this first!,rnewman,91722,2017-02-10T02:31:48Z,COLLABORATOR,False,41,3,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ef1a0f60d6e602f8e39ac1731610c5f1b346567b,Add a pointer to #280.
1242,https://api.github.com/repos/mozilla/mentat/pulls/275,275,Run pragmas to configure SQLite store and connection when we open a DB,"Fixes #259

Signed-off-by: Victor Porof <victor.porof@gmail.com>",victorporof,248899,2017-02-09T19:42:07Z,CONTRIBUTOR,True,18,4,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,763f8cd95d06c6557329f29b88d4316e33b8ea96,"Run pragmas to configure SQLite store and connection when we open a DB

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1243,https://api.github.com/repos/mozilla/mentat/pulls/272,272,Expose EDN into_ methods that consume the edn value,"Fixes #256

Signed-off-by: Victor Porof <victor.porof@gmail.com>",victorporof,248899,2017-02-09T19:00:50Z,CONTRIBUTOR,False,60,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5456f65e3df86f20e46f09f8221d05ca021c2cf8,"Expose EDN into_ methods that consume the edn value

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1244,https://api.github.com/repos/mozilla/mentat/pulls/269,269,"Expose EDN as_ methods that return copied values, not references.",,rnewman,91722,2017-02-09T18:21:59Z,COLLABORATOR,True,41,15,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4366f6d61fa87e7aa7d327932b593b5da31bcf36,"Expose EDN as_ methods that return copied values, not references."
1245,https://api.github.com/repos/mozilla/mentat/pulls/267,267,Ensure :db/index true for :db/unique _. Fixes #254. r=nalexander,What's the best way to set up tests for the schema validations?,jsantell,641267,2017-02-08T22:01:17Z,MEMBER,True,9,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e84fe8cc9709f1d65c6026dd2dc34a310b54eb59,Ensure :db/index true for :db/unique _. Fixes #254. r=nalexander
1246,https://api.github.com/repos/mozilla/mentat/pulls/266,266,"Remove Entity::{RetractEntity, RetractAttribute} for now. ",Fixes #257,jsantell,641267,2017-02-08T21:48:26Z,MEMBER,True,3,56,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,de0231d6e8dc23e0878fdbcc05f237547695587b,"Remove Entity::{RetractEntity, RetractAttribute} for now. Fixes #257. r=nalexander"
1247,https://api.github.com/repos/mozilla/mentat/pulls/265,265,"Consolidate Entity::{Add, Retract} to Entity::AddOrRetract.",Fixes #255,jsantell,641267,2017-02-08T21:42:26Z,MEMBER,True,33,30,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dcc1622d1be8a32b0754d75cfb1f757556607b2b,"Consolidate Entity::{Add, Retract} to Entity::AddOrRetract. Fixes #255. r=nalexander"
1248,https://api.github.com/repos/mozilla/mentat/pulls/264,264,"Add :db.type/{instant, uri, uuid} types to bootstrapper. Fixes #201","This is missing a v3.db to run in the `test_open_current_version` test in `db/src/db.rs`,but looking for a sanity check here. Commenting out that test, everything else passes. Unlikely I'll tackle the creation of a v3 DB in `./fixtures` and the SQL update migration for v1 -> v2 -> v3",jsantell,641267,2017-02-08T21:05:38Z,MEMBER,False,63,15,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f85b236b1f6bab4102ccb8c194171c365e291df3,"Add :db.type/{instant, uuid, uri} in V3 bootstrapper. r=nalexander"
1249,https://api.github.com/repos/mozilla/mentat/pulls/253,253,"Remove global imports in db and tx-parser, fixes #251",,jsantell,641267,2017-02-07T20:26:45Z,MEMBER,True,3,7,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2a826fe5a4506a5c5ab8457e71bf671ee75fa03f,Remove usage of global imports in db module. Fixes #251. r=nalexander
1250,https://api.github.com/repos/mozilla/mentat/pulls/252,252,Initial stab at #251,Needs rebase onto `rust`,joewalker,76258,2017-02-07T14:08:05Z,MEMBER,False,40,10,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1f5a12bccb6b8cbbbe8507b9549204f85fe6687c,Use mentat-parser-utils in tx-parser. Initial stab at #235
1251,https://api.github.com/repos/mozilla/mentat/pulls/252,252,Initial stab at #251,Needs rebase onto `rust`,joewalker,76258,2017-02-07T14:08:05Z,MEMBER,False,40,10,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,86dc118c0e049ea64f1c77d411d7e729cdb82c83,"Move macros query-parser/…/parser_utils.rs → parser-utils/…/query.rs

See https://github.com/mozilla/mentat/pull/249#discussion_r99628878"
1252,https://api.github.com/repos/mozilla/mentat/pulls/252,252,Initial stab at #251,Needs rebase onto `rust`,joewalker,76258,2017-02-07T14:08:05Z,MEMBER,False,40,10,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e29e5d267367ecaad926237254b843b02d7c5117,Replace  with explicit lists in the db crate
1253,https://api.github.com/repos/mozilla/mentat/pulls/249,249,Use mentat-parser-utils in tx-parser. Initial stab at #235,"Work in progress patch just to see if I'm on the right lines.
",joewalker,76258,2017-02-06T16:35:22Z,MEMBER,True,187,243,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f591c9073817f923496f3fd139e894c96bf6f2ac,"Use mentat-parser-utils in tx-parser. Fixes #235; r=rnewman,victorporof

Move macros query-parser/…/parser_utils.rs → parser-utils/…/query.rs

Signed-off-by: Joe Walker <jwalker@mozilla.com>"
1254,https://api.github.com/repos/mozilla/mentat/pulls/246,246,Properly handle whitespace for Infinity and NaN,"Fixes #244.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-06T08:28:10Z,CONTRIBUTOR,True,22,9,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dbc36670c6363c624f3563f55b900ce45b63d1bd,"Properly handle whitespace for Infinity and NaN

Signed-off-by: Victor Porof <vporof@mozilla.com>
Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1255,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f011e8bba86d050c8012db18fdd0adbf97184ce7,"Implement pretty printing

Signed-off-by: Victor Porof <victor.porof@gmail.com>"
1256,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,07ff7df5848ac1933b335c4db1207e670bd18324,"Rewrite pretty printing.

This does a few things.  First, it use pretty.rs directly, without the
layer of macro obfuscation.  The code is significantly simpler as a
result.

Second, it tightens the layout, using pretty.rs to group nested
layouts that fit on a single line.  This is Clojure's EDN style, more
or less.

Third, it drops ""special format"" support for queries.  This wasn't
completely implemented; if we want it, we can newtype
Query(edn::Value) and figure out how to really implement this idea."
1257,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b60e451f1b0774aafac115f4d35ed79f80c3d594,Rename to reflect functionality.
1258,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,229bcfefc88d3ec8dfc34fce53809756c797e542,"Make write interface more Rust-like.

There isn't a clear standard in the stdlib, but a function that takes
ownership of a writer and then returns it back is definitely not
Rust-like.  That's what a (mutable) reference is for."
1259,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,35d3bf77b16f4ecb1a65f5e828db05d38e388e43,Review comment: Use as_ref to avoid cloning strings.
1260,https://api.github.com/repos/mozilla/mentat/pulls/245,245,Implement edn pretty printing,"Fixes https://github.com/mozilla/mentat/issues/195

Needs some tests and documentation.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-05T10:31:02Z,CONTRIBUTOR,True,200,3,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f940ff376ed6262da6e3382933f8ae1db9a24d4d,Post: Fix tests to use `without_spans()`.
1261,https://api.github.com/repos/mozilla/mentat/pulls/243,243,Query algebrizer initial work,,rnewman,91722,2017-02-04T00:57:34Z,COLLABORATOR,False,869,0,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0d70a4765b951030c92981c9e012a96fb01cee26,Add trivial Schema::new().
1262,https://api.github.com/repos/mozilla/mentat/pulls/243,243,Query algebrizer initial work,,rnewman,91722,2017-02-04T00:57:34Z,COLLABORATOR,False,869,0,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,959e76a1749569abe64696b24f176c2bca65fbfc,Stub out query algebrizer.
1263,https://api.github.com/repos/mozilla/mentat/pulls/243,243,Query algebrizer initial work,,rnewman,91722,2017-02-04T00:57:34Z,COLLABORATOR,False,869,0,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4295bda5fde1f4d3e269f6dbeda338df5394ac78,Partly flesh out query algebrizer.
1264,https://api.github.com/repos/mozilla/mentat/pulls/243,243,Query algebrizer initial work,,rnewman,91722,2017-02-04T00:57:34Z,COLLABORATOR,False,869,0,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,625f1b49fa143cb9ebe258fce4dd4e1b215a539b,Test mentat_core and mentat_query_algebrizer on Travis.
1265,https://api.github.com/repos/mozilla/mentat/pulls/242,242,Testing bitflag expansion,"Based off of @ncalexan's #214, relevant commit:

https://github.com/mozilla/mentat/pull/242/commits/a021735aefb65a6155fbc1628c2527e1cacd71fc",jsantell,641267,2017-02-03T20:36:52Z,MEMBER,True,102,39,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fe405b5b48f5d9d60b50aa5ef9c5a8a3e295c8c6,Store a bitfield in temporary search tables and expand to bit flags in the datoms table to investigate performance difference. Fixes #226. r=nalexander
1266,https://api.github.com/repos/mozilla/mentat/pulls/241,241,Ensure printing/parsing edn strings is isomorphic,Fixes https://github.com/mozilla/mentat/issues/240,victorporof,248899,2017-02-03T09:23:14Z,CONTRIBUTOR,True,104,38,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,419db388da957b0de46b6b0ea8520963cb0e7ef4,"Relax whitespace rules for Infinity and NaN

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1267,https://api.github.com/repos/mozilla/mentat/pulls/241,241,Ensure printing/parsing edn strings is isomorphic,Fixes https://github.com/mozilla/mentat/issues/240,victorporof,248899,2017-02-03T09:23:14Z,CONTRIBUTOR,True,104,38,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a627f532f0214b970267512381094c9071f04a4e,"Relax whitespace rules for edn vectors, lists, sets and maps

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1268,https://api.github.com/repos/mozilla/mentat/pulls/241,241,Ensure printing/parsing edn strings is isomorphic,Fixes https://github.com/mozilla/mentat/issues/240,victorporof,248899,2017-02-03T09:23:14Z,CONTRIBUTOR,True,104,38,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4d83aafa2a9fa8157fe2dd22aa6c91a2d71f8cf1,"Ensure printing/parsing edn strings is isomorphic

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1269,https://api.github.com/repos/mozilla/mentat/pulls/238,238,"Parse and display EDN values for NaN, +Infinity and -Infinity. Fixes …","…#232

@victorporof can you elaborate on what EDN escaping you're talking about in the TODO? And is there any other Float formatting issues you had in mind when writing that TODO?

While we're here, is `null` a special EDN type? From what I gather, this should be printed as `nil` (that's what our parser looks for, anyway)",jsantell,641267,2017-02-02T23:50:53Z,MEMBER,True,47,5,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d4615515d6430d167ce9d7f8400ec791efe17975,"Parse and display EDN values for NaN, +Infinity and -Infinity. Fixes #232"
1270,https://api.github.com/repos/mozilla/mentat/pulls/234,234,Cleanup.,"@victorporof, rubber stamp? This is green on Travis.",rnewman,91722,2017-02-02T16:13:35Z,COLLABORATOR,True,5,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a98262ff74f2e6a86d025bed7bd3825af2dfe575,Clean up an unused import.
1271,https://api.github.com/repos/mozilla/mentat/pulls/234,234,Cleanup.,"@victorporof, rubber stamp? This is green on Travis.",rnewman,91722,2017-02-02T16:13:35Z,COLLABORATOR,True,5,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3506c564c078f95521c6892595c2502a0c166679,Remove allow(unused_imports): no warning is printed.
1272,https://api.github.com/repos/mozilla/mentat/pulls/234,234,Cleanup.,"@victorporof, rubber stamp? This is green on Travis.",rnewman,91722,2017-02-02T16:13:35Z,COLLABORATOR,True,5,7,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,99880f1906ced43d8aeef189421cb09ff5114146,Rename parser_utils to mentat_parser_utils.
1273,https://api.github.com/repos/mozilla/mentat/pulls/233,233,"Write more tests, handle more types for printing and a few other code cleanups for edn types",I've filed https://github.com/mozilla/mentat/issues/231 and https://github.com/mozilla/mentat/issues/232 as I went along.,victorporof,248899,2017-02-02T15:51:50Z,CONTRIBUTOR,False,129,62,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,971a6a8cf0febd5c4dd1089dc8880677920a5042,"Remove `edn::Pair` struct since it's not used anywhere

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1274,https://api.github.com/repos/mozilla/mentat/pulls/233,233,"Write more tests, handle more types for printing and a few other code cleanups for edn types",I've filed https://github.com/mozilla/mentat/issues/231 and https://github.com/mozilla/mentat/issues/232 as I went along.,victorporof,248899,2017-02-02T15:51:50Z,CONTRIBUTOR,False,129,62,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,019d8c20c470e10eb2e56226a4fff4f651b19eac,Add note about linked lists data type choice for edn::Value
1275,https://api.github.com/repos/mozilla/mentat/pulls/233,233,"Write more tests, handle more types for printing and a few other code cleanups for edn types",I've filed https://github.com/mozilla/mentat/issues/231 and https://github.com/mozilla/mentat/issues/232 as I went along.,victorporof,248899,2017-02-02T15:51:50Z,CONTRIBUTOR,False,129,62,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8d6d9134dbbcd28db46a8f369118b7aae21de43,"Move edn test functions into a submodule

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1276,https://api.github.com/repos/mozilla/mentat/pulls/233,233,"Write more tests, handle more types for printing and a few other code cleanups for edn types",I've filed https://github.com/mozilla/mentat/issues/231 and https://github.com/mozilla/mentat/issues/232 as I went along.,victorporof,248899,2017-02-02T15:51:50Z,CONTRIBUTOR,False,129,62,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a058bec5126886b9110f02007bf96d1619775cb0,Avoid needless reborrows and simplify `Ord` implementation for edn::Value
1277,https://api.github.com/repos/mozilla/mentat/pulls/233,233,"Write more tests, handle more types for printing and a few other code cleanups for edn types",I've filed https://github.com/mozilla/mentat/issues/231 and https://github.com/mozilla/mentat/issues/232 as I went along.,victorporof,248899,2017-02-02T15:51:50Z,CONTRIBUTOR,False,129,62,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,abc5cbc807a6dcfde0f11b26d7dd9e68ac4e59cb,"Handle more edn::Value types for printing, precursor for #195

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1278,https://api.github.com/repos/mozilla/mentat/pulls/229,229,Consolidate edn peg rules to better parse keywords and symbols,Fixes https://github.com/mozilla/mentat/issues/219,victorporof,248899,2017-02-02T11:18:42Z,CONTRIBUTOR,False,76,69,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a1efd6cba8b42754cb6587d9875f17063f48379b,"Update rustpeg to latest version and follow new syntax and formatting rules

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1279,https://api.github.com/repos/mozilla/mentat/pulls/229,229,Consolidate edn peg rules to better parse keywords and symbols,Fixes https://github.com/mozilla/mentat/issues/219,victorporof,248899,2017-02-02T11:18:42Z,CONTRIBUTOR,False,76,69,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1b91dbf76d83ec7b4be89e3740358ace6ea4aecd,"Unify and generalize keywords and symbols parsing

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1280,https://api.github.com/repos/mozilla/mentat/pulls/229,229,Consolidate edn peg rules to better parse keywords and symbols,Fixes https://github.com/mozilla/mentat/issues/219,victorporof,248899,2017-02-02T11:18:42Z,CONTRIBUTOR,False,76,69,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5675a39c3f65fb66092540f9d9f161dde001d4cd,"Properly print null edn values as ""nil"", to allow for isomorphic write/parse

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1281,https://api.github.com/repos/mozilla/mentat/pulls/228,228,Add utilities for defining parsers. (#218),"Fixes #218.

Note that this includes `m_p_s`, which was already reviewed — it's just been moved out.

I also moved out `ResultParser`, which is nice and general.",rnewman,91722,2017-02-02T02:09:31Z,COLLABORATOR,False,94,2,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,069f240690ce9e43ab09883b399a79a30d60cbe2,"Add utilities for defining parsers. (#218)

satisfy_unwrap and ResultParser go into mentat_parser_utils."
1282,https://api.github.com/repos/mozilla/mentat/pulls/228,228,Add utilities for defining parsers. (#218),"Fixes #218.

Note that this includes `m_p_s`, which was already reviewed — it's just been moved out.

I also moved out `ResultParser`, which is nice and general.",rnewman,91722,2017-02-02T02:09:31Z,COLLABORATOR,False,94,2,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3d256d4cd45a7a04b4452f4c95faad2e315e8f35,Remove unnecessary self::.
1283,https://api.github.com/repos/mozilla/mentat/pulls/228,228,Add utilities for defining parsers. (#218),"Fixes #218.

Note that this includes `m_p_s`, which was already reviewed — it's just been moved out.

I also moved out `ResultParser`, which is nice and general.",rnewman,91722,2017-02-02T02:09:31Z,COLLABORATOR,False,94,2,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7d9cbfed8cfab1cbe610ca2d57ce990bc7a48f9c,"Move, not copy."
1284,https://api.github.com/repos/mozilla/mentat/pulls/227,227,Implement a FromValue trait for SrcVar and Variable.,,rnewman,91722,2017-02-01T22:53:55Z,COLLABORATOR,False,48,14,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d88a79c3ccbbb10249f6468acc0d642d4a4149f,Implement a FromValue trait for SrcVar and Variable.
1285,https://api.github.com/repos/mozilla/mentat/pulls/224,224,Several small idiomatic changes to the edn crate,,victorporof,248899,2017-02-01T11:16:18Z,CONTRIBUTOR,True,53,22,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f68f68378dc6d5acb70b26fbecbd812664362d5,"Use idiomatic `map_or_else` calls to Option<T> instead of double returns

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1286,https://api.github.com/repos/mozilla/mentat/pulls/224,224,Several small idiomatic changes to the edn crate,,victorporof,248899,2017-02-01T11:16:18Z,CONTRIBUTOR,True,53,22,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,25474980b162ce36fff4991b01a3df073be3b4fa,"Add rustdoc comments for `to_symbol` and `to_keyword` functions

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1287,https://api.github.com/repos/mozilla/mentat/pulls/224,224,Several small idiomatic changes to the edn crate,,victorporof,248899,2017-02-01T11:16:18Z,CONTRIBUTOR,True,53,22,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,17bc85fe2702612ad4d2bc745bc00ac8365b3c1c,"Remove return statements from edn parser tests

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1288,https://api.github.com/repos/mozilla/mentat/pulls/224,224,Several small idiomatic changes to the edn crate,,victorporof,248899,2017-02-01T11:16:18Z,CONTRIBUTOR,True,53,22,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b2c7870c06d124851b8b73d3d58af1f4a3b35f9,"Wrap code indicated by the ""_"" in documentation as suggested by rustdoc best practices

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1289,https://api.github.com/repos/mozilla/mentat/pulls/224,224,Several small idiomatic changes to the edn crate,,victorporof,248899,2017-02-01T11:16:18Z,CONTRIBUTOR,True,53,22,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4e9e8ed837688ab3b7b798f6b0751da15e8d4b4a,"Use idiomatic `enumerate` method on interators instead of iterating over indices

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1290,https://api.github.com/repos/mozilla/mentat/pulls/223,223,Don't depend on num and ordered-float in the db and query crates,"Depends on https://github.com/mozilla/mentat/pull/222

I've had to remove some derived traits from various data types when switching from OrderedFloat<f64> to the f64 primitive. I don't know what that implies, hoping for guidance.",victorporof,248899,2017-02-01T10:19:02Z,CONTRIBUTOR,True,7,19,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,479faabbf50c68e14e6379f5d0f98c1a2ab3a7dd,"Don't depend on num and ordered-float in the db and query crates

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1291,https://api.github.com/repos/mozilla/mentat/pulls/222,222,Add helper functions constructing OrderedFloat and BigInt to edn crate,"Fixes #198

Notes:
* I don't know how to silence the ToBigInt import otherwise.
* I've opted to using a more idiomatic `From<>` implementation for floats, but having an explicit `from_bigint` for strings, as we also have a `Value::Text`.
* Seemed like a good idea to introduce a `NewValueError` and return a Result instead of an Option in the above case.

",victorporof,248899,2017-02-01T10:15:30Z,CONTRIBUTOR,False,19,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e9abf1742bc3a9b1508019cd8bb3f91c1d6972ba,Add helper functions constructing OrderedFloat and BigInt to edn crate
1292,https://api.github.com/repos/mozilla/mentat/pulls/221,221,Extract assert_parses_to into a parser utility crate,"Fixes #200 

I couldn't find any other way to silence the unused imports warning when importing the `assert_parses_to` macro in the query parser crate's top level file.

Signed-off-by: Victor Porof <vporof@mozilla.com>",victorporof,248899,2017-02-01T08:48:00Z,CONTRIBUTOR,True,36,9,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,162045c648219ab12952462d04e2ed7c6a7b7f12,"Extract assert_parses_to into a parser utility crate

Signed-off-by: Victor Porof <vporof@mozilla.com>"
1293,https://api.github.com/repos/mozilla/mentat/pulls/217,217,Minor EDN cleanup.,"I noticed a misnamed entry in a docstring, and `to_reverse` should really be named `to_reversed`.

This also includes my `PlainSymbol` additions — makes my next PR shorter.",rnewman,91722,2017-01-31T03:00:07Z,COLLABORATOR,True,31,5,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,80e65d555f8a4b8ff85e153ca639a8bfd6d5b299,to_reverse -> to_reversed.
1294,https://api.github.com/repos/mozilla/mentat/pulls/217,217,Minor EDN cleanup.,"I noticed a misnamed entry in a docstring, and `to_reverse` should really be named `to_reversed`.

This also includes my `PlainSymbol` additions — makes my next PR shorter.",rnewman,91722,2017-01-31T03:00:07Z,COLLABORATOR,True,31,5,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9570c6f25e808c4c9194bead7a222af75824aff7,Add PlainSymbol::plain_name for examining $x and ?y.
1295,https://api.github.com/repos/mozilla/mentat/pulls/217,217,Minor EDN cleanup.,"I noticed a misnamed entry in a docstring, and `to_reverse` should really be named `to_reversed`.

This also includes my `PlainSymbol` additions — makes my next PR shorter.",rnewman,91722,2017-01-31T03:00:07Z,COLLABORATOR,True,31,5,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,347ee3f4fe36d296836182bd95d11947b18fbe44,Fix comment.
1296,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1088596d8db307f94e910ba0b84c3d43c1a5423a,Pre: Bump rusqlite version for https://github.com/jgallagher/rusqlite/issues/211.
1297,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,59c1e5a411913c18d62a70796ac4083096464825,"Pre: Add some value conversion tests.

This is follow-up to earlier work.  Turn TypedValue::Keyword into
edn::Value::NamespacedKeyword.  Don't take a reference to
value_type_tag."
1298,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d0c5761b746ff49443441a75cfbf8b48fd30ed48,Pre: Use itertools.
1299,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7b77b6338b8c1a97b3fcf413025487de016bafed,"Pre: Add repeat_values.

Requires itertools, so this commit is not stand-alone."
1300,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,11e19f36e22fdc0b835e32953313f864549f192a,"Pre: Expose the first transaction ID as bootstrap::TX0.

This is handy for testing."
1301,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5e01cfedf3397f0fcc02f0149fb40cf623e91c89,Pre: Improve debug module.
1302,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,287986ea1033d7002f0f7709b17aab300df1e9a8,"Start implementing bulk SQL insertion algorithms. (#214)

This is slightly simpler re-expression of the existing Clojure
implementation."
1303,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c53bb5aee803355a9d44ef221826f4e37d735d5b,Post: Start generic data-driven transaction testing. (#188)
1304,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9017ebcea3bc582f6007980a473e7a1033e387ed,Review comment: `use ::{SYMBOL}` instead of `use {SYMBOL}`.
1305,https://api.github.com/repos/mozilla/mentat/pulls/214,214,[tx] Start implementing bulk SQL insertion algorithms,This will eventually grow to implement https://github.com/mozilla/mentat/wiki/Transacting:-entity-to-SQL-translation.,ncalexan,1097182,2017-01-30T15:48:59Z,MEMBER,True,857,75,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,07eda9c6af5b9b6cd805cd5432208b538af5a300,Review comment: Prefer bindings_per_statement to values_per_statement.
1306,https://api.github.com/repos/mozilla/mentat/pulls/213,213,Add Into<String> to symbol::* constructors. Fixes #199,,jsantell,641267,2017-01-29T06:52:38Z,MEMBER,True,14,9,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,18279fdd3c114602305573aed94689baed184dff,Add Into<String> to symbol::* constructors. Fixes #199
1307,https://api.github.com/repos/mozilla/mentat/pulls/212,212,Add NamespacedKeyword::is_reverse and NamespacedKeyword::to_reverse f…,"…or query and transaction parsers. Fixes #202

Notes: Should we change all of the symbols to be able to handle taking a `String` instead of just a `&str`? Is there a less ugly concat way to handle `to_reverse`?  Should `to_reverse` flip "":foo/_baz"" back to "":foo/baz"", and if so, maybe a name change to `invert`?",jsantell,641267,2017-01-28T20:03:07Z,MEMBER,True,78,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0a21b5dca4ab4f59c18c322aacc7926c204739a9,"Add NamespacedKeyword::{is_forward, is_backward, to_reverse} for
inspection in NamespacedKewyord for usage by query and transaction parsers. Fixes #202"
1308,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,11dbf64cbac2eb8e92773b6940ab65a405a6aca4,Make Variable::from_symbol public.
1309,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03c3bada3c296b9651fe1f12a8608147bd83fe36,"Implement basic parsing of queries.

This supports all four :find specs (rel, tuple, scalar, coll) and simple
:where clauses consisting of a sequence of basic patterns. Patterns
consist of placeholders, variables, and constants."
1310,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,03bf6a0c5ae4d47ab8565feb55722bc83857f591,Use pinned dependencies the hard way to fix Travis.
1311,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4b6fbfaeacf81bb2c1cfabb99cbcac8538d30dfa,"Bump ordered-float dependency to 0.4.0.

Fixes a NaN leak and a hash skew."
1312,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e67588d708f580ca4e4aa3f341e0e47e26229e58,Review comments.
1313,https://api.github.com/repos/mozilla/mentat/pulls/211,211,Parse basic :find and :where clauses.,,rnewman,91722,2017-01-27T23:51:18Z,COLLABORATOR,True,565,239,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,227fe070c60b8c478d391d7ad38bc86fd2b8abdf,"Error coercions to use ?, and finishing the find interface."
1314,https://api.github.com/repos/mozilla/mentat/pulls/209,209,Rudimentary printing of EDN values.,"Note that we should be implementing `Display` instead of `ToString`, so I fixed that, too.",rnewman,91722,2017-01-26T23:46:54Z,COLLABORATOR,True,72,17,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,859d4bc8259bc04f9e946a4486258b799b9680c2,Add a little From helper for edn::parse::ParseError. Not used yet.
1315,https://api.github.com/repos/mozilla/mentat/pulls/209,209,Rudimentary printing of EDN values.,"Note that we should be implementing `Display` instead of `ToString`, so I fixed that, too.",rnewman,91722,2017-01-26T23:46:54Z,COLLABORATOR,True,72,17,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2e203e151f3c93da4e980214b70f1510075bcaaf,Ignore more things.
1316,https://api.github.com/repos/mozilla/mentat/pulls/209,209,Rudimentary printing of EDN values.,"Note that we should be implementing `Display` instead of `ToString`, so I fixed that, too.",rnewman,91722,2017-01-26T23:46:54Z,COLLABORATOR,True,72,17,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a1230db0ae71405b90082810255cf1fbbd8c9801,Partly implement Display for edn::Value.
1317,https://api.github.com/repos/mozilla/mentat/pulls/208,208,Add is_ methods to edn::Value types and add tests. Fixes #197,"Just a preliminary check, is this what @ncalexan @rnewman had in mind? Want to get some eyes on it before starting the `as_*`",jsantell,641267,2017-01-26T23:18:48Z,MEMBER,True,140,5,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d116fd7bff18342d9ee58eecc05108301e4af933,Add is_$type and as_$type methods to edn::Value types and add tests. Fixes #197
1318,https://api.github.com/repos/mozilla/mentat/pulls/206,206,Accept :db/id in nested maps.,"This should address #178.  What was happening was that we always provide `:db/id` ourselves, rather than optionally providing `:db/id` as required.",ncalexan,1097182,2017-01-26T19:25:56Z,MEMBER,True,18,4,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,643e977d831a37815d105eae280be5346851d235,Accept :db/id in nested maps. (#178).
1319,https://api.github.com/repos/mozilla/mentat/pulls/205,205,Implement basic logging infrastructure.,"Signed-off-by: Paul Lange <palango@gmx.de>

This is a rebased version of @palango's original `slog` logging PR, #158.  I don't know how to take ""ownership"" and update such a PR, and we (myself and @victorporof) didn't want this to languish forever, so here we are in a new PR.",ncalexan,1097182,2017-01-26T18:41:54Z,MEMBER,True,45,8,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b78a1124b09b60919b4372c57e560954ff7e2399,"Implement basic logging infrastructure.

Signed-off-by: Paul Lange <palango@gmx.de>"
1320,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,165148a4ac08c81ea80547476e3096bc9bc9c671,Test the mentat_query directory on Travis.
1321,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a7131c42ad64f346c17b39c8a8d5d3216f0adc7f,"Export common types from edn.

This allows you to write

  use edn::{PlainSymbol,Keyword};

instead of

  use edn::symbols::{PlainSymbol,Keyword};"
1322,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,70b73f785f3d656ffafdd3fc4dd83075557bd4b0,Add an edn::Value::is_keyword predicate.
1323,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d145a8bbebeb87e902ccf41e35fbfa740d71ff7b,Make EDN keywords and symbols take Into<String> arguments.
1324,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c00865ada66f99e55b9107e6e7e64c886911b2ff,"Clean up query, preparing for query-parser."
1325,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cc851104d36cf67a8ae5b124cfc7f118396b9fcb,Implement parsing of simple :find lists.
1326,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a7de17ebfb79021e67cfb5fbbc0e0dade006187,Rustfmt query-parser. Split find and query.
1327,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dab99d980f72d9c7da9df440636da3219d097c0d,Review comment: values_to_variables now returns a NotAVariableError on failure.
1328,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1474cf0d6a8a4866cac15cba6d3c0a28b95cebd0,Review comment: rename gimme to to_parsed_value.
1329,https://api.github.com/repos/mozilla/mentat/pulls/196,196,Implement parsing of simple :find expressions.,"This handles `[:find ?x ?y ?z]`, `[:find ?abc .]`, `[:find [?a ?b]]`, and `[:find [?x ...]]`. Lots more to do, but it's a start.",rnewman,91722,2017-01-24T22:40:05Z,COLLABORATOR,True,925,165,16,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,534f8671425bf15f0039006fa40176bc38242f56,Review comment: add comments.
1330,https://api.github.com/repos/mozilla/mentat/pulls/176,176,edn: allow comments and improve whitespace handling,"@rnewman, @joewalker: review?

Fixes #166.",ncalexan,1097182,2017-01-17T19:28:54Z,MEMBER,True,66,10,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4e03a4e62dbdef5b642332dce6326fa4fd386c6b,"edn: Allow comments.

EDN supports only one type of comment: initiated by ; and lasting
until the end of the current line or the end of the input stream."
1331,https://api.github.com/repos/mozilla/mentat/pulls/176,176,edn: allow comments and improve whitespace handling,"@rnewman, @joewalker: review?

Fixes #166.",ncalexan,1097182,2017-01-17T19:28:54Z,MEMBER,True,66,10,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d9490344dd708b9f9bc3e234c0b57cfc065179c3,edn: Bound values by optional whitespace; treat comma as whitespace.
1332,https://api.github.com/repos/mozilla/mentat/pulls/175,175,fix sql quoting when calling honeysql/format,"I noticed this bug because I had a query like

``` clj
'[:find ?order 
:where [?order :foo/bar]
```

sqlite threw a syntax error because order is a keyword and it wasn't quoted
""SQLITE_ERROR: near ""order"": syntax error""",cascadian,1848130,2017-01-15T04:49:51Z,NONE,True,14,2,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2d046803d4a76396f659ec78679635e6780b5464,fix sql quoting when calling honeysql/format
1333,https://api.github.com/repos/mozilla/mentat/pulls/174,174,Implement basic logging infrastructure,"A replacement for #158.

I think this is a better approach to logging. Independent libraries can use the `log` crate and should be universally usable with that.

The executable provides three options to set the logging level (in order of priority): The `MENTAT_LOG` environment variable, the `RUST_LOG` environment variable and the debug flag.",palango,90851,2017-01-13T23:51:42Z,NONE,False,25,5,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fb3946d91e027e3a2c2fafc3f434ecb939816273,"Implement basic logging infrastructure

Signed-off-by: Paul Lange <palango@gmx.de>"
1334,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d7dbf45c6d0750f19585dfb4a15ba0f1c2eb1df0,Start installing the SQLite store and bootstrapping the datom store.
1335,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b824b84ba1069627e469b9741575b3b3de9ac259,Review comment: Pre: Expose Clojure's merge on Value instances.
1336,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4d0c3e6b5df52d76800f6ec299a36618d4069ad6,Review comment: Decomplect V2_IDENTS.
1337,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,524b539e8ede56f6cecee4e76181f80f3d4751a0,Review comment: Decomplect V2_PARTS.
1338,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8a67cd9bce446f1302b13e3ce5e94258a88cac45,Review comment: Decomplect V2_SYMBOLIC_SCHEMA.
1339,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f1769338e7f3a1d205c6c78f31508eefed3c4a02,Review comment: Decomplect V1_STATEMENTS.
1340,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,aec7589300c96616ec2f03cf53f2aa1804dfc213,Review comment: Prefer ? to try!.
1341,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b1f8bd75754e0110cec6496d4b1fc81fed6765b4,Review comment: Fix typos; format; add TODOs.
1342,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,46c8fec5bbe6ae782848217172c99e24021f1bc3,Review comment: Assert that Mentat `Schema` is valid upon creation.
1343,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4bd911efb4de9d41bc1e0b27d3b6b9f576f8bab3,"Review comment: Improve conversion to and from SQL values.

This patch factors the fundamental SQL conversion maps
between (rusqlite::Value, value_type_tag) and (edn::Value, ValueType)
through a new Mentat TypedValue.  (A future patch might rename this
fundamental type mentat::Value.)

To make certain conversion functions infallible, I removed
placeholders for :db.type/{instant,uuid,uri}.  (We could panic
instead, but there's no need to do that right now.)"
1344,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,67b6f9163d28a6c7a56590842512a3cbec81dbf5,"Review comment: Always uses bundled SQLite in rusqlite.

This avoids (runtime) failures in Travis CI due to old SQLite
versions.  See https://github.com/jgallagher/rusqlite/commit/432966ac77e3cb27c4cd67d073788498336988a2."
1345,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,014441013a06db020595e4ed0dae3457a9d26b2c,Review comment: Move semantics in `from_sql_value_pair`.
1346,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e94178da5f65898de6b27e0f5b0963fc359de08b,Review comment: DB_EXCISE_BEFORE_T instead of ...BEFORET (no underscore).
1347,https://api.github.com/repos/mozilla/mentat/pulls/171,171,Start installing SQL schema.,WIP in progress branch for #170.,ncalexan,1097182,2017-01-13T20:27:52Z,MEMBER,True,1560,2,18,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1fe9041664e4e58ba066e0bb1b9f00068202df2d,Review comment: Move overview notes to the Wiki.
1348,https://api.github.com/repos/mozilla/mentat/pulls/164,164,Add tx{-parser} crates; start parsing transactions.,"This depends on edn and uses the combine parser combinator library.

@rnewman, you can see my progress here.  There's an abstraction around parsing the internals of vector to be worked out, but it's actually quite nice to work with (once you've absorbed some `combine` magic).  I think some of the constructors mappings might be able to be shortened, but it's not worth waiting for.",ncalexan,1097182,2017-01-12T00:51:43Z,MEMBER,True,480,1,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,245e7df147cc2c7b6a7bf6c8f124fe200dccbd5c,"Add tx{-parser} crates; start parsing transactions.

This depends on edn and uses the combine parser combinator library."
1349,https://api.github.com/repos/mozilla/mentat/pulls/164,164,Add tx{-parser} crates; start parsing transactions.,"This depends on edn and uses the combine parser combinator library.

@rnewman, you can see my progress here.  There's an abstraction around parsing the internals of vector to be worked out, but it's actually quite nice to work with (once you've absorbed some `combine` magic).  I think some of the constructors mappings might be able to be shortened, but it's not worth waiting for.",ncalexan,1097182,2017-01-12T00:51:43Z,MEMBER,True,480,1,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,929f3608b86efad12b1514438c9d4f548687e7f2,EntId -> Entid; use new NamespacedKeyword; split out integration test.
1350,https://api.github.com/repos/mozilla/mentat/pulls/163,163,Have the EDN parser store keywords and symbols as rich types. Fixes #154.,"This demonstrates some unpleasantness with name reuse between enums and structs; the verbosity encourages the use of a test helper function.

Rust also doesn't infer types as much as I'd like, so you can't, say:

```
let v = keyword("":foo/bar"");     // Parser function: returns a Value, specifically Value::Keyword
assert_eq!(v.unwrap().0, keyword::Keyword::namespaced(""foo"", ""bar""));
```

because Rust doesn't know which enum value `v` will be.

I *could* 'inline' `keyword::Keyword` into `Value`… but then you can't define functions that work only on keywords; they'd all have to accept a `Value` and handle the other cases.",rnewman,91722,2017-01-11T22:53:58Z,COLLABORATOR,False,423,294,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7ff0acce3bb2dedfc0253692a34d541e7f929898,Read EDN keywords and symbols as rich types. Fixes #154. r=nalexander
1351,https://api.github.com/repos/mozilla/mentat/pulls/162,162,EDN parser (rebase),"I rebased, addressed some nits, and fixed test running. Pushing this here to let Travis take a look. (CC @joewalker)",rnewman,91722,2017-01-11T20:14:48Z,COLLABORATOR,False,1058,1,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dac3a97962ae6cd13c1ae21c3e2f63cd5a990ce1,"Add a basic EDN parser

The parser mostly works and has a decent test suite. It parses all the
queries issued by tofino-user-agent with some caveats. Known flaws:

* No support for tagged elements, comments, discarded elements or ""'""
* Incomplete support for escaped characters in strings and the range of
  characters that are allowed in keywords and symbols
* Possible whitespace handling problems"
1352,https://api.github.com/repos/mozilla/mentat/pulls/162,162,EDN parser (rebase),"I rebased, addressed some nits, and fixed test running. Pushing this here to let Travis take a look. (CC @joewalker)",rnewman,91722,2017-01-11T20:14:48Z,COLLABORATOR,False,1058,1,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f12fbf23889903bb67ccc01ce1e2047b8743533a,Address some review comments for #149.
1353,https://api.github.com/repos/mozilla/mentat/pulls/161,161,Test more things on Travis.,,rnewman,91722,2017-01-11T18:49:40Z,COLLABORATOR,True,2,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,81b312b091b3c99b7fb903570809d89106335bd3,Test more things on Travis.
1354,https://api.github.com/repos/mozilla/mentat/pulls/159,159,Add beginning of web server for the serve subcommand,,bgrins,95570,2017-01-10T22:09:27Z,MEMBER,True,18,7,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1c06fed4e6caa812b4f21163f582a1db73fc889a,Add beginning of web server for the serve subcommand
1355,https://api.github.com/repos/mozilla/mentat/pulls/159,159,Add beginning of web server for the serve subcommand,,bgrins,95570,2017-01-10T22:09:27Z,MEMBER,True,18,7,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,990f09c7c7059661024fb5569fc6f643f0785142,Merge branch 'rust' into cli-server
1356,https://api.github.com/repos/mozilla/mentat/pulls/158,158,Implement basic logging infrastructure,"A take on the logging mentioned in #133. I used the mentioned slog crate and created just a terminal logger for now, with the granularity bound on the debug command line option. See the two examples below for example output.

The change in `lib.rs` is just to show the usage in a library, I can remove it if you want.

```
> cargo run serve
Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
Running `target/debug/mentat serve`
This doesn't work yet, but it will eventually serve the following database: temp.db on port: 3333.
Jan 10 22:38:12.487 ERRO Calling a function: mentat, version: 0.4.0
```

```
> cargo run serve -- --debug
Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
Running `target/debug/mentat serve --debug`
This doesn't work yet, but it will eventually serve the following database: temp.db on port: 3333.
Jan 10 22:37:51.396 INFO Serving database, version: 0.4.0, database: temp.db, port: 3333, debug mode: true
Jan 10 22:37:51.397 INFO Called into mentat library, version: 0.4.0, fn: get_name
Jan 10 22:37:51.397 ERRO Calling a function: mentat, version: 0.4.0
```",palango,90851,2017-01-10T21:42:28Z,NONE,False,42,8,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d16f998259272717ffe1a0c185e1c813673b1f5f,"Implement basic logging infrastructure

Signed-off-by: Paul Lange <palango@gmx.de>"
1357,https://api.github.com/repos/mozilla/mentat/pulls/157,157,Add test databases.,"* test/v1empty.db: an empty v1 DB, which is the original on-disk format.
* test/v2empty.db: an empty v2 DB. This includes bootstrapped schema metadata attributes.
* test/v1tofino.db: a v1 DB that was created by Tofino.",rnewman,91722,2017-01-10T19:39:29Z,COLLABORATOR,True,0,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e3f4dfa0cec31eb0b8063c27d14031e2d936760d,"Add test databases.

* v1empty.db: an empty v1 DB, which is the original on-disk format.
* v2empty.db: an empty v2 DB. This includes bootstrapped schema metadata attributes.
* v1tofino.db: a v1 DB that was created by Tofino."
1358,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f9c532d8d8a02e2581498504b2e4907e4baff4a,Remove old JS code; we can bring it back if we want it.
1359,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,76b5a5e43bb8f0038738154d2dbd750607722cb3,Rename to Project Mentat (build).
1360,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7f3347981c5637bcdcccf82908ce67fd7acc4d61,Rename to Project Mentat (docs).
1361,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a4c75ba4480040b843ec9755909573f8ef73577,Rename to Project Mentat (src).
1362,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3af0d479aaf2f467627685ffbcb4e72749cd713d,Rename to Project Mentat (cli).
1363,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,84f468ce411d2b3ce36b4e8b1ccaed731ec31af0,Rename to Project Mentat (tests).
1364,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a665926fe6f8330de499ab6b8e67674a67ad439f,Rename to Project Mentat (query-parser).
1365,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9c439bd00d5b2b25047789e55628ad006957f1c,Use underscores for crate names.
1366,https://api.github.com/repos/mozilla/mentat/pulls/152,152,Rename everything to Project Mentat,This is only on the Rust fork; I didn't have time to also fix d-u-a-s yet.,rnewman,91722,2017-01-07T01:21:48Z,COLLABORATOR,True,44,367,25,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a54cd9958c2c1e8439e9244a2808ce9e29a0a084,Fix Travis.
1367,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5b22909fe7781b6035db7cf94b5112aef6e12934,Move the bin to src and take on clap dependency for command line arg parsing
1368,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3adf90a8dec52c96a6285da5d0cdeffeb980bc77,remove old cli code
1369,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32b0e7273bd17406c6c6e72cfba72294d2ba268b,Merge branch 'rust' into new-cli
1370,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a2a504bc6a20a897b62b7f2ce2b908424def3d3a,update readme
1371,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a6545cc6c40b386735ffd5e2ef6cf7a4fafa3336,update cli
1372,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c15e5b0ee302179fe3eaef358c29b5f74a43fd0c,use ArgRequiredElseHelp to automatically print help without a subcommand
1373,https://api.github.com/repos/mozilla/mentat/pulls/150,150,Move the bin to src and take on clap dependency for command line arg parsing,"I realized that keeping the cli in another crate wasn't helping and actually caused build issues once we had remote dependencies (cargo wouldn't build that sub-crate since it wasn't a dependency of datomish and just a bin reference).

We can easily keep the binary in the main src/ directory so that's what this does.  There's initial support for subcommands in place (so we can do `cargo run serve`, `cargo run whatever`.

This doesn't yet wire up the web server from #147",bgrins,95570,2017-01-06T22:13:46Z,MEMBER,True,55,43,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0d202f65225e14daf1ff9f3b747de35e696bbc3c,run cargo fmt
1374,https://api.github.com/repos/mozilla/mentat/pulls/149,149,Add a basic EDN parser,"The parser mostly works and has a decent test suite. It parses all the
queries issued by tofino-user-agent with some caveats. Known flaws:

* No support for tagged elements, comments, discarded elements or ""'""
* Incomplete support for escaped characters in strings and the range of
  characters that are allowed in keywords and symbols
* Possible whitespace handling problems
* Possibly poor memory handling",joewalker,76258,2017-01-06T15:17:01Z,MEMBER,False,1060,2,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2fc57bd59aff1f932724910e5706b5fd853a3ebd,"Add a basic EDN parser

The parser mostly works and has a decent test suite. It parses all the
queries issued by tofino-user-agent with some caveats. Known flaws:

* No support for tagged elements, comments, discarded elements or ""'""
* Incomplete support for escaped characters in strings and the range of
  characters that are allowed in keywords and symbols
* Possible whitespace handling problems"
1375,https://api.github.com/repos/mozilla/mentat/pulls/148,148,Take on rusqlite dependency,"Here's some more info about the various sqlite libraries: https://users.rust-lang.org/t/sqlite-libraries-potential-for-unification/8702.

They seem to take similar approaches, chose rusqlite based on activity and available docs to populate a simple test case.   Also, there's some discussion about unifying on it at https://github.com/dckc/rust-sqlite3/issues/46",bgrins,95570,2017-01-05T14:15:35Z,MEMBER,True,49,10,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8d51dce483cfd7c34d1437909e48f3321f4e07ff,Take on rusqlite dependency
1376,https://api.github.com/repos/mozilla/mentat/pulls/147,147,Initial database explorer rust server,in progress,jsantell,641267,2017-01-04T20:33:22Z,MEMBER,False,90,1,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c6b7f09d395ca2161b204c75010b03af2c8a55e0,Initial database explorer rust server
1377,https://api.github.com/repos/mozilla/mentat/pulls/139,139,Implement a rudimentary Keyword struct and the beginnings of ident/entid.,Inline tests! Module files!,rnewman,91722,2016-12-21T16:56:17Z,COLLABORATOR,True,305,0,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,476f04e27b5524a30d35c9f878526ed9eca4a0b7,Implement a rudimentary Keyword struct and the beginnings of ident/entid.
1378,https://api.github.com/repos/mozilla/mentat/pulls/139,139,Implement a rudimentary Keyword struct and the beginnings of ident/entid.,Inline tests! Module files!,rnewman,91722,2016-12-21T16:56:17Z,COLLABORATOR,True,305,0,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,daddfd3e0f6b5e210b317713b51bd8efdb52e3a6,"Add query sub-crate, implementing more of the beginnings of the query language."
1379,https://api.github.com/repos/mozilla/mentat/pulls/138,138,(optionally merge) Create a sample crate for the parser,"Just wanted to put this up for future reference - feel free to merge or close the PR.

I think for the short term at least, it'll be easier to manage the components within the project as crates within a single repo as opposed to separate repos deployed through crates.io.  This branch is a sample of what this could look like.",bgrins,95570,2016-12-17T01:03:11Z,MEMBER,True,41,1,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5fa08e748d07e3a5adbab68525ed05cec5130a5,Create a sample crate for the parser
1380,https://api.github.com/repos/mozilla/mentat/pulls/138,138,(optionally merge) Create a sample crate for the parser,"Just wanted to put this up for future reference - feel free to merge or close the PR.

I think for the short term at least, it'll be easier to manage the components within the project as crates within a single repo as opposed to separate repos deployed through crates.io.  This branch is a sample of what this could look like.",bgrins,95570,2016-12-17T01:03:11Z,MEMBER,True,41,1,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bcf2c46392056c96d93944c8013be015986fbc34,to squash: rename datomish-parser to datomish-query-parser
1381,https://api.github.com/repos/mozilla/mentat/pulls/137,137,Move existing code into js/ subfolder,,bgrins,95570,2016-12-16T22:29:08Z,MEMBER,True,0,0,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,803cbc693d3bb2b6cc0e3a08179216f0340a1956,Move existing code into js/ subfolder
1382,https://api.github.com/repos/mozilla/mentat/pulls/136,136,Stub out cli crate,"This adds a cli/ subfolder that defines a crate that builds a binary that uses an exposed variable from datomish. It's just stubbed out and only is fetching a string from the core lib.

Then the main Cargo.toml references it as a dev-dependency so it can be run in ci.  The idea is that we would do the same thing for additional binaries (like a bulk importer).  This is building both and passing: https://travis-ci.org/mozilla/datomish/builds/184661695

",bgrins,95570,2016-12-16T22:01:24Z,MEMBER,True,55,1,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a22b43e1aa608a2311a488ddcb0ab882f29b2111,add sub-crate
1383,https://api.github.com/repos/mozilla/mentat/pulls/136,136,Stub out cli crate,"This adds a cli/ subfolder that defines a crate that builds a binary that uses an exposed variable from datomish. It's just stubbed out and only is fetching a string from the core lib.

Then the main Cargo.toml references it as a dev-dependency so it can be run in ci.  The idea is that we would do the same thing for additional binaries (like a bulk importer).  This is building both and passing: https://travis-ci.org/mozilla/datomish/builds/184661695

",bgrins,95570,2016-12-16T22:01:24Z,MEMBER,True,55,1,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a556d52f5cfa922bc755e22a4e052f0511bb692c,run cli tests in ci
1384,https://api.github.com/repos/mozilla/mentat/pulls/136,136,Stub out cli crate,"This adds a cli/ subfolder that defines a crate that builds a binary that uses an exposed variable from datomish. It's just stubbed out and only is fetching a string from the core lib.

Then the main Cargo.toml references it as a dev-dependency so it can be run in ci.  The idea is that we would do the same thing for additional binaries (like a bulk importer).  This is building both and passing: https://travis-ci.org/mozilla/datomish/builds/184661695

",bgrins,95570,2016-12-16T22:01:24Z,MEMBER,True,55,1,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9e03afc09c9c3bc1f2be494e87b6080883123d3f,update instructions for running cli
1385,https://api.github.com/repos/mozilla/mentat/pulls/135,135,Include instructions for building and testing with cargo,,bgrins,95570,2016-12-16T19:57:25Z,MEMBER,True,15,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4bebb3cbe4a0206d44cc9cc740fa066485955275,Include instructions for building and testing with cargo
1386,https://api.github.com/repos/mozilla/mentat/pulls/134,134,Update test boilerplate for running on travis,This should be running an in-code and external test in CI once landed,bgrins,95570,2016-12-16T19:24:51Z,MEMBER,True,35,1,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2fe278dd4c17ab756e53878a6010e8dc87cb35e5,Include a local and external test
1387,https://api.github.com/repos/mozilla/mentat/pulls/134,134,Update test boilerplate for running on travis,This should be running an in-code and external test in CI once landed,bgrins,95570,2016-12-16T19:24:51Z,MEMBER,True,35,1,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2025c11b08ddc7d9c5d1cdbf04ea6fd79dea3b1a,add comment block
1388,https://api.github.com/repos/mozilla/mentat/pulls/132,132,Unified bootstrapping.,This gives us an upgrade path for the core storage schema and the core bootstrap schema. Tests pass here.,rnewman,91722,2016-12-16T18:19:37Z,COLLABORATOR,True,231,95,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,752720e43f8f58341256922bee5755b0278446d9,"Pass existing idents to datoms->schema-fragment, allowing the 'upgrade' of an existing ident to an attribute."
1389,https://api.github.com/repos/mozilla/mentat/pulls/132,132,Unified bootstrapping.,This gives us an upgrade path for the core storage schema and the core bootstrap schema. Tests pass here.,rnewman,91722,2016-12-16T18:19:37Z,COLLABORATOR,True,231,95,12,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,87bc13cc68910215d7c8a79c09282e4ba62dd8e6,"Implement unified setup/bootstrapping, bootstrapping new databases in a single transaction. Fixes #125. 0.3.7."
1390,https://api.github.com/repos/mozilla/mentat/pulls/127,127,Cast to lower-case all UUID strings in cljs. Fixes #45.,,jsantell,641267,2016-11-30T20:26:35Z,MEMBER,False,22,41,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,16597fac8362284852d15e5193744978ec8c1f06,Cast to lower-case all UUID strings in cljs. Fixes #45.
1391,https://api.github.com/repos/mozilla/mentat/pulls/119,119,Relicense as Apache 2.0. Fixes #74,"Rubberstamp, @joewalker?",rnewman,91722,2016-11-22T01:33:51Z,COLLABORATOR,True,716,544,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6158077ea8f7976a744ed1bf9c3d4f5ea55ce4c5,Change license to Apache. Fixes #74.
1392,https://api.github.com/repos/mozilla/mentat/pulls/119,119,Relicense as Apache 2.0. Fixes #74,"Rubberstamp, @joewalker?",rnewman,91722,2016-11-22T01:33:51Z,COLLABORATOR,True,716,544,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b9aae863c1abc789e973b2becc6d25b4eb8714f8,Specify Maven group-id for mozilla/datomish.
1393,https://api.github.com/repos/mozilla/mentat/pulls/119,119,Relicense as Apache 2.0. Fixes #74,"Rubberstamp, @joewalker?",rnewman,91722,2016-11-22T01:33:51Z,COLLABORATOR,True,716,544,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,75a9d42172f7326d8cc849add6217ec1a5bd1206,Release 0.3.0.
1394,https://api.github.com/repos/mozilla/mentat/pulls/119,119,Relicense as Apache 2.0. Fixes #74,"Rubberstamp, @joewalker?",rnewman,91722,2016-11-22T01:33:51Z,COLLABORATOR,True,716,544,59,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2e0071f434bbb35a6850e3eb386becf536db6322,Bump to 0.3.1 to bump a dependency.
1395,https://api.github.com/repos/mozilla/mentat/pulls/116,116,Add a :none migration for schema management. Fixes #113.,"This allows for code to run before and after a schema fragment is added for the first time.

The anticipated use for this is twofold:

1. To do initial setup, e.g., defining global entities.
2. To 'adopt' unmanaged attributes already defined in the store.

This 'pre' would manually alter or retract attributes so that the transact of the new schema datoms can complete.

For example, if properties `:foo/bar` and `:foo/baz` will be unchanged, but `:noo/zob` needs to change from a string to an integer, the `:none` pre-function can alter the ident, the body of the fragment will transact the three properties up to the current version, and the `:none` post-function can migrate the renamed `:noo/zob` and clean up.

@grigoryk (and @jsantell, if you're interested), take a look? This is how I plan to impose schema management on the UAS's existing schema, which needs to be able to change.",rnewman,91722,2016-11-18T23:34:19Z,COLLABORATOR,False,77,18,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d26ad12594d34f0bc6ecda29d828e16116baa927,"Add a :none migration for schema management. Fixes #113.

This allows for code to run before and after a schema fragment is
added for the first time.

The anticipated use for this is twofold:

1. To do initial setup, e.g., defining global entities.
2. To 'adopt' unmanaged attributes already defined in the store.

This 'pre' would manually alter or retract attributes so that the
transact of the new schema datoms can complete.

For example, if properties :foo/bar and :foo/baz will be unchanged,
but :noo/zob needs to change from a string to an integer, the :none
pre-function can alter the ident, and the :none post-function can
migrate and clean up."
1396,https://api.github.com/repos/mozilla/mentat/pulls/115,115,Update CONTRIBUTING.md,Use correct URL for cloning,bgrins,95570,2016-11-17T21:00:56Z,MEMBER,True,1,1,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a69ad8ece10555b428bc79e4f23279f40cfb8b5c,"Update CONTRIBUTING.md

Use correct URL for cloning"
1397,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,14079af173e4e8c058a6b4c429ce989516b59845,Add a simple test that in-memory databases are isolated.
1398,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,502582ffd72892b8f667f1ce30d2f4a6891a4599,Add repeated-keys utility.
1399,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,623cf7ff9f32cd1d4ed8b021d32051e40ac74890,"Add <??, a null-safe variant of <?."
1400,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b13749c82a02ee5c64bdb9d30dd50c2c399dd660,Expose id-literal? in the API.
1401,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,450f06e4a404f84d88bbeecffcce8e78f0d81837,Expose datomish.schema/validate-schema so that schema management can use it.
1402,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,32faf29b4fdeea78808471f0ef6c5eb3f6c1f1f6,Add :db.schema/version and :db.schema/attribute.
1403,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,870abfdbcd5b60f9a44ba8cb7d748d21c5ec1b65,"Allow callers to run functions within the scope of a transaction.

This generalizes the transactor loop to allow callers to run
an arbitrary function within an `in-transaction!` body.

Combined with exposing `<report-transact-tx-data!`, this allows
an admittedly sophisticated consumer to conditionally query and
transact in a consistent way -- for example, cleaning up inconsistent
data then transacting a new schema version."
1404,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e8df3d87881a1cb8e7091aca1b8c5a72742a97da,Implement schema management proposal. Fixes #95.
1405,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f33bb029f7427f67f66e637f9836583d0ca6a789,Add test for schema management.
1406,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d04ff0d03c8e31d73a1c3885e24d90f7ba74885c,Bump to latest sqlite libraries on the JVM side.
1407,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b25385862a16151fc1f130f9d1321c2bf56663f8,"Check schema versions outside the transaction, but compute the diff inside it.

This makes the schema upgrade take slightly longer, but it ensures that
any delta is computed against the current schema at the moment that the
change is applied."
1408,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c194139882707fc43cda0a81fae554d60cb22549,Bump ClojureScript dependency to 1.9.293.
1409,https://api.github.com/repos/mozilla/mentat/pulls/107,107,Schema management,"This PR implements [my proposal](https://github.com/mozilla/datomish/wiki/Proposal:-application-schema-coordination-and-versioning).

Two schema management attributes are introduced: `:schema/version` and `:schema/attribute`.

Schema fragment entities are versioned, and 'contain' attributes in the store.

A _managed schema fragment_ list is passed in to `datomish.schema-management/<apply-schema-alteration`, along with optional migration code.

If a fragment is earlier than the contents of the store, an error is thrown. (Applications can continue on in a degraded state.)

If a fragment is inconsistent with the store — _e.g._, trying to claim ownership of an attribute that already belongs to another fragment — an error is thrown.

If a fragment is already at the right version in the store, no work is done for that fragment.

Otherwise, the fragment and the store are compared. Any pre/post functions for the collection of fragments and for each fragment individually are queued to run, and automated migration of the fragment is applied. All of this work happens in the same database transaction.

Most migrations won't need pre/post functions. No attempt has yet been made to expose these to JS, because that's a pain in the ass.

N.B., not all changes can be automated, and this implementation very likely does not allow a 'pre' function to impose unsupported migrations. That's easy to fix in the future, and doesn't affect the use of the current implementation.

There are tests.",rnewman,91722,2016-11-08T20:30:56Z,COLLABORATOR,False,1043,75,26,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a2e3e2a233a80a0507ce8a2f6a55a67d38e8b210,"Produce different output for Firefox and Firefox add-ons.

Firefox itself doesn't need `require(""chrome"")` to get access to Cu,
and shouldn't touch the Add-on SDK at all."
1410,https://api.github.com/repos/mozilla/mentat/pulls/104,104,Implement ident renaming and simple schema alteration. Fixes #103 and #78.,"Done and working. You can now rename idents and attributes.
",rnewman,91722,2016-10-20T02:34:59Z,COLLABORATOR,True,497,68,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,be5aa5dad90a64e086f8462809163dc8c47e44ec,Add schema-changes-test to cljs test file.
1411,https://api.github.com/repos/mozilla/mentat/pulls/104,104,Implement ident renaming and simple schema alteration. Fixes #103 and #78.,"Done and working. You can now rename idents and attributes.
",rnewman,91722,2016-10-20T02:34:59Z,COLLABORATOR,True,497,68,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a08dc13480fc4218e41aa3af087b41983fc434a8,Reorder test file.
1412,https://api.github.com/repos/mozilla/mentat/pulls/104,104,Implement ident renaming and simple schema alteration. Fixes #103 and #78.,"Done and working. You can now rename idents and attributes.
",rnewman,91722,2016-10-20T02:34:59Z,COLLABORATOR,True,497,68,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d81abace56514cda7da8faad3fc6ab732edf63a,Implement ident renaming. Fixes #103.
1413,https://api.github.com/repos/mozilla/mentat/pulls/104,104,Implement ident renaming and simple schema alteration. Fixes #103 and #78.,"Done and working. You can now rename idents and attributes.
",rnewman,91722,2016-10-20T02:34:59Z,COLLABORATOR,True,497,68,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,46269fe720d4246f9d215938e27eaa2b27d7f810,Add db.alter/attribute to the bootstrap schema.
1414,https://api.github.com/repos/mozilla/mentat/pulls/104,104,Implement ident renaming and simple schema alteration. Fixes #103 and #78.,"Done and working. You can now rename idents and attributes.
",rnewman,91722,2016-10-20T02:34:59Z,COLLABORATOR,True,497,68,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9d361055d39737d0e1354e704198add730b5d84a,"Implement schema alteration. Fixes #78.

Altering uniqueness and cardinality attributes works, with the exception
of enabling uniqueness from nothing.

:db/noHistory and :db/isComponent changes are implemented but untested,
and aren't really supported by Datomish anyway."
1415,https://api.github.com/repos/mozilla/mentat/pulls/100,100,Implement ground. Fixes #99.,,rnewman,91722,2016-10-18T03:43:20Z,COLLABORATOR,True,55,1,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f01e79e0737fbb4c7f902db839c4179c06290c25,Implement ground. Fixes #99.
1416,https://api.github.com/repos/mozilla/mentat/pulls/87,87,"Correct type extraction from fulltext expressions, fix UNIONs.","Note that this relies on an upstream fix in honeysql (https://github.com/jkk/honeysql/pull/142). If that doesn't land soon, we can fork.
",rnewman,91722,2016-10-12T16:13:35Z,COLLABORATOR,False,88,6,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,05df012e8e0527d55427c39f970edb66eceb81b2,Upgrade honeysql to 0.8.2-SNAPSHOT to fix UNION parenthesizing. Fixes #83.
1417,https://api.github.com/repos/mozilla/mentat/pulls/87,87,"Correct type extraction from fulltext expressions, fix UNIONs.","Note that this relies on an upstream fix in honeysql (https://github.com/jkk/honeysql/pull/142). If that doesn't land soon, we can fork.
",rnewman,91722,2016-10-12T16:13:35Z,COLLABORATOR,False,88,6,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8f604acd90d9472450ee28bfda3b7eb5168e6238,"Generate known type for the entity in a fulltext expression, and add a test. Fixes #85."
1418,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a89224673abd33ce8fae81ed702ed4f352fd16c3,"Pre: Standardize util-test file location.

This is the ""standard"" Clojure layout, and makes the testing integration
in Emacs CIDER happy."
1419,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e1b1abe2dea1787ebca86f48636e90c917bc8ba6,Pre: clarify comments.
1420,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2081ca4563fb990adc4924adb48c66a16bb8e998,Pre: Add unlimited-buffer and unblocking-chan?.
1421,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a8ad79d0e6169f404445692b8f16ad3e435b9eab,Make <transact! run in a critical section. (#80)
1422,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a0b29ed5bfbd0925eb60f4aa3b14eff5152e615b,Add {un}listen{-chan}! to connection. Fixes #61.
1423,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,95e6d90fc16253f4beadfbfe62312805ef3c0a13,Review comment: return pair-chan; accept a result chan and close? flag.
1424,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,749790650e3553aea2621d496726c9ebd1a6fe53,Review comment: ensure report is non-nil after in-transaction!.
1425,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8b73ee139de587ca7f85882a2ec4bc2305b0a970,Review comment: ensure <transact! after <close is rejected.
1426,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d0c4be8d91d7621847f685b3b3696c7ad1ed78e2,"Review comment: fail pending transactions after closing connection.

This is pretty difficult to test robustly, but here's a stab at it."
1427,https://api.github.com/repos/mozilla/mentat/pulls/86,86,"Critical sections and listeners, updated","@rnewman -- this is an updated version of #80 and #61.  Listeners depends heavily on the exact form of transact, so here we are.

I ended up going with an unlimited buffer rather than a deque.  It's more likely we'll want an unlimited buffer in the future, tbh.  I removed the combinator (rather than fixing it) because we want a per-connection transaction critical section anyway, which was awkward to arrange; and so that we can explicitly close the transaction channel when we close the connection.  I also explicitly test the scenario where a listener calls `<transact!`, since that's so high value.  (Thinking aloud: it's so easy to make a mistake that we might want to try to catch recursive listeners.  Hmm...)

I simplified the listener interface, too, removing the explicit key and using the `mult`'s internal map instead.  Removes an atom and possible race conditions.

See what you think -- sorry it's a new PR.
",ncalexan,1097182,2016-10-12T03:39:23Z,MEMBER,False,503,34,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c45c8361c441e72319204ce382dd680b3c3b504a,Review comment: make a large-ish dropping buffer for JS listen! consumers.
1428,https://api.github.com/repos/mozilla/mentat/pulls/81,81,Transact critical section,"Over to you, @rnewman.
",ncalexan,1097182,2016-10-11T18:59:31Z,MEMBER,False,289,42,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,315d1ba4a3785271e7d119776c281ef0c1def2bf,"Add simple deque implementation.

We need a deque that doesn't race.  In CLJS, this is simple to arrange
using an atom; in CLJ, it's better to use a ref."
1429,https://api.github.com/repos/mozilla/mentat/pulls/81,81,Transact critical section,"Over to you, @rnewman.
",ncalexan,1097182,2016-10-11T18:59:31Z,MEMBER,False,289,42,8,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,8bbcd2a28d4eb99285c551a9828e3023e33f3eeb,Make <transact! its own critical section. (#80)
1430,https://api.github.com/repos/mozilla/mentat/pulls/73,73,"Support order-by, tempid lookup, and more tests to JS interface.",,rnewman,91722,2016-10-07T23:09:00Z,COLLABORATOR,True,86,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7728648b3972f31552be71d20431aaca8a5530cd,Support order-by query option from JS.
1431,https://api.github.com/repos/mozilla/mentat/pulls/73,73,"Support order-by, tempid lookup, and more tests to JS interface.",,rnewman,91722,2016-10-07T23:09:00Z,COLLABORATOR,True,86,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,4f10100174a677ff6bd352ada66ea6ecbd3f9e2a,"Expose a 'tempid' function on transaction results, because JS object lookup doesn't work for TempIds."
1432,https://api.github.com/repos/mozilla/mentat/pulls/73,73,"Support order-by, tempid lookup, and more tests to JS interface.",,rnewman,91722,2016-10-07T23:09:00Z,COLLABORATOR,True,86,12,2,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,630f3e0740bd67a44b86ff8f373d3318a3853f52,Add order-by exercising to the JS test script.
1433,https://api.github.com/repos/mozilla/mentat/pulls/71,71,Implement all four find specs. Fixes #38.,,rnewman,91722,2016-10-07T15:21:49Z,COLLABORATOR,False,258,46,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bc0ed4158f8ed4e1e0c8fe556982ab05cb80be36,Implement all four find specs. Fixes #38.
1434,https://api.github.com/repos/mozilla/mentat/pulls/71,71,Implement all four find specs. Fixes #38.,,rnewman,91722,2016-10-07T15:21:49Z,COLLABORATOR,False,258,46,5,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c9620c34d0e147143e4f6876137028513661f855,Add test for no-result case for each find spec.
1435,https://api.github.com/repos/mozilla/mentat/pulls/70,70,Add a test for long strings round-tripping through node-sqlite3. Fixes #65.,,rnewman,91722,2016-10-06T22:50:40Z,COLLABORATOR,True,29,0,1,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a30df15419cadd7db6091f50b4c43d319f31d27d,Add a test for long strings round-tripping through node-sqlite3. Fixes #65.
1436,https://api.github.com/repos/mozilla/mentat/pulls/66,66,Make tempids work from JS,,rnewman,91722,2016-10-05T19:56:09Z,COLLABORATOR,True,83,19,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0b6ac81ed5fcb37d92b743e26de6622a9cdfe55d,Part 1: extend 'db' JS object with more useful methods.
1437,https://api.github.com/repos/mozilla/mentat/pulls/66,66,Make tempids work from JS,,rnewman,91722,2016-10-05T19:56:09Z,COLLABORATOR,True,83,19,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c7d0a8596b124cb409a7abae71bc7b7fe2f6ebcc,Part 2: extend 'cljify' implementation to round-trip records like TempId.
1438,https://api.github.com/repos/mozilla/mentat/pulls/66,66,Make tempids work from JS,,rnewman,91722,2016-10-05T19:56:09Z,COLLABORATOR,True,83,19,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ce67644fd5a62af0efbff5a82558c67a3f12ffcd,Part 3: expand example Node code.
1439,https://api.github.com/repos/mozilla/mentat/pulls/60,60,Support complex `or` expressions.,"Fixes #57.

This is _almost_ done — it passes a test, but that test has the `or` at the top level, and thus doesn't exercise one spot in which I left a `TODO`. More tomorrow, but feel free to skim already, @ncalexan.
",rnewman,91722,2016-09-28T01:21:09Z,COLLABORATOR,False,210,29,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,274ace2fc8242145988d974dcacbc6ca87f32f21,Part 1: pass in :select when creating a partial subquery from a CC.
1440,https://api.github.com/repos/mozilla/mentat/pulls/60,60,Support complex `or` expressions.,"Fixes #57.

This is _almost_ done — it passes a test, but that test has the `or` at the top level, and thus doesn't exercise one spot in which I left a `TODO`. More tomorrow, but feel free to skim already, @ncalexan.
",rnewman,91722,2016-09-28T01:21:09Z,COLLABORATOR,False,210,29,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,853354737d3d602bd0c099fc859164ce146eb431,Part 2: implement sql-projection-for-simple-variable-list.
1441,https://api.github.com/repos/mozilla/mentat/pulls/60,60,Support complex `or` expressions.,"Fixes #57.

This is _almost_ done — it passes a test, but that test has the `or` at the top level, and thus doesn't exercise one spot in which I left a `TODO`. More tomorrow, but feel free to skim already, @ncalexan.
",rnewman,91722,2016-09-28T01:21:09Z,COLLABORATOR,False,210,29,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b48959900fa769b65012da2c7442283c7d7f460e,Part 3: implement complex 'or' translation.
1442,https://api.github.com/repos/mozilla/mentat/pulls/55,55,Allow sets of attributes in fulltext expressions. Fixes #54.,"Over to you, @ncalexan.
",rnewman,91722,2016-09-26T21:24:08Z,COLLABORATOR,False,124,17,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a5daa78534b5135c0955c64359b4102c4b49c9a2,Allow sets of attributes in fulltext expressions. Fixes #54.
1443,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c51cb6236317eec558e2cfc5bcc93188e26f9e6,"Pre: Catch Throwable, not Exception."
1444,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,baec3815b0d0cab4b93c1d4556617498e4a22f91,Implement transactions.
1445,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fbd5863921f1c66fb0ef84cbd8466ae6b3c92ddc,Resolve lookup-refs.
1446,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,661e7ed12313ed54b7e6cc524c6af625a13c04b8,Allow to add new :db/ident mappings.
1447,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bceee3b5fbccdf6b5ba9d2c99f2ff32925c53368,"Re-throw errors in Clojure, for easier debugging."
1448,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,43423b7d0a84c0fe916a75b8cd92b915df59704e,Validate value types.
1449,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a90c43a5a8411a23c9d889dd4a221965a29d0ce,"Map valueTypes to SQLite encodings.

In the future, we might add a layer of indirection, hashing values to
avoid duplicating storage, or sorting URLs, or handling fulltext indexed
values differently, or ..."
1450,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,80742242e28c3a85b3da7c30c0733887e3be0f48,Fix cljs
1451,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9497d69b44a8163857663007a7ecd272aa120dad,"Respect :db/unique constraints; test upserts.

This version includes SQLite-level unique indexes; these should never be
needed.  I've included them as a fail-safe while testing; they'll help
us catch errors in the transaction layer above."
1452,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6a8739bd2f58a537613fab3d2568c1afcdc24020,Accept new schema fragments via :db.part/db :db.install/attribute.
1453,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a1e3158eac5b1a6b27c0ef236a798f6dfa1558f6,Add some structure and value checking.
1454,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d271454ac984030b2b779be8fee9be474c41475,"Don't replace keyword idents if the underlying field is itself :db.type/keyword.

This is necessary to assert new :db/ident datoms."
1455,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,296c9cb4368266dde1a5a89fd7ec924c61be7429,Bootstrap DB schema; persist and restore schema from materialized views.
1456,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,13f33a4915255d18a4588e3c105edddb9174d5c2,"Unify test pattern around ""(... -after tx0)""."
1457,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f25838a1eb89723287a2ebf29cd135d202bfd154,"Support :db/fulltext true.

Internally, we use SQLite's FTS4 to maintain a fulltext_values table of
unique ""text"" values.  Fulltext indexed datoms have value v that is the
rowid into fulltext_values.  We manually maintain the map between rowid
and value in the transactor.

For convenience, we expose two views interpolating the real text values
into the datoms structure."
1458,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,417ae1ed9251dff5479c8f93fc84453f650820d0,Allow false; fail if too many components in vector given.
1459,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,38545f6efcb8c95de33ecb7001165b828e44000b,"Add :tx and :txInstant to TxReport; accept :db/tx in transactor; allow to set :db/txInstant.

The implementation of :db/tx is special and may need to change over
time.  We add it as a special ident, with value the current transaction
entity ID, specified per-transaction.  This works well right now but
introduces some (internal) ordering requirements that may need to be
loosened."
1460,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d9a8cb0d6adfdb60f15dd1b6f247910373ecfa77,"Don't accept user-provided tx values.

This agrees with Datomic.  DataScript allows tx values, possibly to
allow reconstructing DBs from Datom streams, but appears to handle
user-provided tx values in the transactor inconsistently."
1461,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,44db8116bfe7d3da36f0a3c79e70bd48fff19f14,"Handle nested maps, sequences in maps, and reverse references."
1462,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5ece60e3e9cf680ba4f608a3c49679c557660b8d,Review comment: be more strict in lookup-ref?.
1463,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c344de665e483a9531759ee34dfd4d13939ccf7f,Review comments: lift (schema db) in a few places.
1464,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6a01885dff05bf65482dcca0e398468530f64770,Review comment: simplify equality.
1465,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c2d81b9c406aa46fff40a6e31bc71fe7baf6679,Review comments: update SQLite schema definitions.
1466,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65d71a25989c1e5e536d6d922f6ea4177cbd91bb,Review comment: use :quoting :ansi parameter to honeysql/format.
1467,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f408cfd314c654c002fddbfa5b74d4f5530c32c8,Follow-up: lift helpers to IDB.
1468,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,52af06ce2875905f71e521136f2740fbced5454f,Follow-up: lift in-transaction! to DB; make transactions exclusive.
1469,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73b155cfdcdac8f30ee2a8fa6532e73c794055c0,"Follow-up: don't accept schema when creating DB.

This schema was already ignored."
1470,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1853d57cbaad77cd5e7f9687ab7c109b9703aed4,Follow-up: extract datomish.transact.bootstrap.
1471,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d8c976c3ad7c55c779d4d2ee4183ee3089a168dd,"Follow-up: split the monolith!

This was a little more tricky than might be expected because the
initialization process uses the transactor to bootstrap the database.
Since Clojure doesn't accept mutually recursive modules, this
necessitated a third module, namely ""db-factory"", which uses both ""db""
and ""transact"".  While I was here, I started an ""api"" module, to paper
over the potentially complicated internal module structure for external
consumers.  In time, this ""api"" module may also grow CLJS-specific JS
transformations."
1472,https://api.github.com/repos/mozilla/mentat/pulls/43,43,Rnewman/joins,"@rnewman -- making a PR to collect comments.
",ncalexan,1097182,2016-08-29T22:39:47Z,MEMBER,False,5143,443,35,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c948902c526fb42e8cce0be2b1499a091e3ffefc,"Follow-up: Extract datomish.transact.explode.

This required pushing the ID literal out of transact.  I elected to put
them in DB, since literal allocation will end up in IDB eventually."
1473,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5e3716ebae2654150401e5d809d51905b66fb56,Turn Source into a protocol. Allow source->from to switch on attribute.
1474,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2faa0b1ac66dcd03fbec95d7ca97ef3cc405f299,Notes on parsing functions.
1475,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,dc3cef985b1f88e800735d1b891036dd54ba1a67,Part 1: process Function instances.
1476,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3058c43c70d14df3b9e0791a3ad66a3bd07df0b6,Split out datomish.query.cc so we can implement clause resolution in more than one namespace.
1477,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5f04a48c2a369c698afab90198ecae5583e8098f,Add explicit fts-table to source.
1478,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,753fc859b1c65e034b2aa07e0bc59a9667d212ca,Implement basic fulltext binding.
1479,https://api.github.com/repos/mozilla/mentat/pulls/23,23,Implement rudimentary fulltext query expansion,"This builds SQL for the simplest `fulltext` queries. Waddaya think, @ncalexan?
",rnewman,91722,2016-08-05T01:57:02Z,COLLABORATOR,False,434,154,7,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,696ae59570e81870976fb319ccccd998752cf162,Example query hacking.
1480,https://api.github.com/repos/mozilla/mentat/pulls/22,22,Turn Source into a protocol. Allow source->from to switch on attribute.,"Simple prep for handling `fulltext` attributes. @ncalexan, rubberstamp!
",rnewman,91722,2016-08-04T23:46:38Z,COLLABORATOR,False,59,26,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5e3716ebae2654150401e5d809d51905b66fb56,Turn Source into a protocol. Allow source->from to switch on attribute.
1481,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0c51cb6236317eec558e2cfc5bcc93188e26f9e6,"Pre: Catch Throwable, not Exception."
1482,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,baec3815b0d0cab4b93c1d4556617498e4a22f91,Implement transactions.
1483,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fbd5863921f1c66fb0ef84cbd8466ae6b3c92ddc,Resolve lookup-refs.
1484,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,661e7ed12313ed54b7e6cc524c6af625a13c04b8,Allow to add new :db/ident mappings.
1485,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bceee3b5fbccdf6b5ba9d2c99f2ff32925c53368,"Re-throw errors in Clojure, for easier debugging."
1486,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,43423b7d0a84c0fe916a75b8cd92b915df59704e,Validate value types.
1487,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7a90c43a5a8411a23c9d889dd4a221965a29d0ce,"Map valueTypes to SQLite encodings.

In the future, we might add a layer of indirection, hashing values to
avoid duplicating storage, or sorting URLs, or handling fulltext indexed
values differently, or ..."
1488,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,80742242e28c3a85b3da7c30c0733887e3be0f48,Fix cljs
1489,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9497d69b44a8163857663007a7ecd272aa120dad,"Respect :db/unique constraints; test upserts.

This version includes SQLite-level unique indexes; these should never be
needed.  I've included them as a fail-safe while testing; they'll help
us catch errors in the transaction layer above."
1490,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6a8739bd2f58a537613fab3d2568c1afcdc24020,Accept new schema fragments via :db.part/db :db.install/attribute.
1491,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a1e3158eac5b1a6b27c0ef236a798f6dfa1558f6,Add some structure and value checking.
1492,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5d271454ac984030b2b779be8fee9be474c41475,"Don't replace keyword idents if the underlying field is itself :db.type/keyword.

This is necessary to assert new :db/ident datoms."
1493,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,296c9cb4368266dde1a5a89fd7ec924c61be7429,Bootstrap DB schema; persist and restore schema from materialized views.
1494,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,13f33a4915255d18a4588e3c105edddb9174d5c2,"Unify test pattern around ""(... -after tx0)""."
1495,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f25838a1eb89723287a2ebf29cd135d202bfd154,"Support :db/fulltext true.

Internally, we use SQLite's FTS4 to maintain a fulltext_values table of
unique ""text"" values.  Fulltext indexed datoms have value v that is the
rowid into fulltext_values.  We manually maintain the map between rowid
and value in the transactor.

For convenience, we expose two views interpolating the real text values
into the datoms structure."
1496,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,417ae1ed9251dff5479c8f93fc84453f650820d0,Allow false; fail if too many components in vector given.
1497,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,38545f6efcb8c95de33ecb7001165b828e44000b,"Add :tx and :txInstant to TxReport; accept :db/tx in transactor; allow to set :db/txInstant.

The implementation of :db/tx is special and may need to change over
time.  We add it as a special ident, with value the current transaction
entity ID, specified per-transaction.  This works well right now but
introduces some (internal) ordering requirements that may need to be
loosened."
1498,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d9a8cb0d6adfdb60f15dd1b6f247910373ecfa77,"Don't accept user-provided tx values.

This agrees with Datomic.  DataScript allows tx values, possibly to
allow reconstructing DBs from Datom streams, but appears to handle
user-provided tx values in the transactor inconsistently."
1499,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,44db8116bfe7d3da36f0a3c79e70bd48fff19f14,"Handle nested maps, sequences in maps, and reverse references."
1500,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5ece60e3e9cf680ba4f608a3c49679c557660b8d,Review comment: be more strict in lookup-ref?.
1501,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c344de665e483a9531759ee34dfd4d13939ccf7f,Review comments: lift (schema db) in a few places.
1502,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6a01885dff05bf65482dcca0e398468530f64770,Review comment: simplify equality.
1503,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,9c2d81b9c406aa46fff40a6e31bc71fe7baf6679,Review comments: update SQLite schema definitions.
1504,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,65d71a25989c1e5e536d6d922f6ea4177cbd91bb,Review comment: use :quoting :ansi parameter to honeysql/format.
1505,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f408cfd314c654c002fddbfa5b74d4f5530c32c8,Follow-up: lift helpers to IDB.
1506,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,52af06ce2875905f71e521136f2740fbced5454f,Follow-up: lift in-transaction! to DB; make transactions exclusive.
1507,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,73b155cfdcdac8f30ee2a8fa6532e73c794055c0,"Follow-up: don't accept schema when creating DB.

This schema was already ignored."
1508,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,1853d57cbaad77cd5e7f9687ab7c109b9703aed4,Follow-up: extract datomish.transact.bootstrap.
1509,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d8c976c3ad7c55c779d4d2ee4183ee3089a168dd,"Follow-up: split the monolith!

This was a little more tricky than might be expected because the
initialization process uses the transactor to bootstrap the database.
Since Clojure doesn't accept mutually recursive modules, this
necessitated a third module, namely ""db-factory"", which uses both ""db""
and ""transact"".  While I was here, I started an ""api"" module, to paper
over the potentially complicated internal module structure for external
consumers.  In time, this ""api"" module may also grow CLJS-specific JS
transformations."
1510,https://api.github.com/repos/mozilla/mentat/pulls/18,18,Transact rewrite,"@rnewman okay, first commit here is ready for first review.  Still lots to do, but it's a start.  I'm happy to land something like this as a first step, mostly so you can use the bits here to generate test data; or I'm happy to build it up further before landing.

Some of the stuff I'll be working on next, some of which are noted with TODOs:
- [ ] Implement parts, or revert to DataScript-like negative integers.
- [ ] Persist idents, parts, entity id counters, transaction indices in SQLite.
- [ ] Implement `:db/value` type checks throughout.
- [ ] Implement lookup refs for real.
- [ ] Finish implementing map properties (reverse refs, sequential values, etc).
- [ ] Set `:db/txInstant` correctly; ensure tx timestamps are reasonable.
- [ ] Work out the story around using `#dm/id[:db.part/tx]` to refer to the current transaction, or revert to DataScript-like "":db/currentTx"".
",ncalexan,1097182,2016-07-27T21:59:59Z,MEMBER,False,2333,37,17,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c948902c526fb42e8cce0be2b1499a091e3ffefc,"Follow-up: Extract datomish.transact.explode.

This required pushing the ID literal out of transact.  I elected to put
them in DB, since literal allocation will end up in IDB eventually."
1511,https://api.github.com/repos/mozilla/mentat/pulls/17,17,Implement simple 'or' clauses.,"This is sufficient to handle the parameter-forking kind of `or` that's prevalent in Datomic's docs.
",rnewman,91722,2016-07-26T23:47:26Z,COLLABORATOR,False,211,30,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,7e5ea7720a51f87bc21e0287a5b1a445c1a3526d,Implement simple 'or' clauses.
1512,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e4f29ea10bb89082b0f9c2cd3c40046bceb1a0ce,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.
1513,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,345cd9a023298e56e89c8da291dbf1c720ad8ee8,Queries containing 'not' can now be translated to SQL.
1514,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cddd72e283cbc94b0da753169d3de17a970f6975,"Implement simple predicates, including as the only thing in a 'not' clause."
1515,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6b4f3cb3968701068989f5b31346f4630a9270f6,Add TODO about external bindings.
1516,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fbd8c0bfbb8f642fc00cecd7429b37b8517750c0,Always SELECT DISTINCT.
1517,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,ae0dac2817f2cf2607e36b308b5f1ae785621272,Propagate external scalar bindings consumed from the argument list when generating SQL.
1518,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,96caadb189bca23195fb8a96bf844448871a94d6,Get execution to a point where we can run (<?q db find args).
1519,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,513f23c45ca91c9ec24b67901462412cdba06446,Process <transact! in a transaction; add hook for processing :db.part/db changes.
1520,https://api.github.com/repos/mozilla/mentat/pulls/16,16,Broad hacking to get the beginnings of negation and arbitrary clause combinations to work.,"WIP.
",rnewman,91722,2016-07-20T05:39:26Z,COLLABORATOR,False,1028,277,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3a4b68792195555ce7d4228d461dfd675014b0ea,Hacking on exec-repl.
1521,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,2b705019a722bc8d886cc5c094536e571c769733,Pre: Take more general `raise` from DataScript.
1522,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5202b147eed350e7cdbf76341c14f44199907f98,Part 1: Hacking up <transact!.
1523,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3db3edaa64eba15e898442ed77434e14b5eaa58f,Part 2: Clean up <transact!.
1524,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f3e1f3ae20b9814355cf713bbc3e8f5344d740eb,"Hacky work to support :db/ident.

Still need: entid -> ident on egress.  Ability to define set of idents dynamically."
1525,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,44411f0e944344966e2311627add605ab11ea823,Add hacky `<q` to DB.
1526,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,54b1d268fa079301c9a72f76d2ac656d7d0e961b,Process <transact! in a transaction; add hook for processing :db.part/db changes.
1527,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b545ddc0e1e5ce16b4b5421d76dbe2a104859cda,Handle empty :where SQL clauses in query.
1528,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,04e772a5bcd4b9d4e82121d63bee9eecc8290cfd,Pre: Fix bad symbol.
1529,https://api.github.com/repos/mozilla/mentat/pulls/10,10,Transact,"@rnewman this isn't ready to land, but you can at least see the approach coming together.

I'll start knocking up the schema support after lunch.
",ncalexan,1097182,2016-07-14T19:21:35Z,MEMBER,False,575,67,11,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,f163b743fa79d460b0467e9acf9c292192756619,Pass a Context into query.
1530,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,66b5a9261c18006712e3e7c6bc3cf3d65408396b,"eavt -> datoms.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1531,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6a8bf15754148f046a2f90eb76a794c72e8a9d0d,Store elements on the context.
1532,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,47c586f7ddddce20cf665581cf83c99cdff00aad,"Initial work on executing queries.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1533,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d43ca58b5b5b9f84f9585d36fa01ca28c8700164,"Use <sqlite-connection instead of j/open.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1534,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,a94027e00e18b4b7ef78ee5549268b6d5a370e6b,"Nit: formatting.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1535,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,6b9414cf1352ee0dff13f267aa0b738f20c31e3c,"Add while-let.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1536,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,94befd8ca40790cedfd43827992f6ec6349adfa8,Fix reduce-rows in sqlite.cljc.
1537,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b81b887fb83202cbfd372b6d93b88d5555b10e85,Fix <all-rows.
1538,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b77a7f337ec4b804b954c4ff9541fee079718f16,License block in exec.
1539,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fbb9faf32028c50e4a033651b4bb7edefd535c24,Require :while-let.
1540,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5dda97740f7bb12985866103e5f9a5d8261bf30,Tweak go-pair docstring.
1541,https://api.github.com/repos/mozilla/mentat/pulls/9,9,Initial work on executing queries,"Without having consumers, it's hard to tell which patterns make the most sense — returning a channel, a lazy sequence, and eager sequence, and promise variations of these. Still, this is enough to get an idea. Opinions please, @ncalexan.
",rnewman,91722,2016-07-14T02:14:43Z,COLLABORATOR,False,218,42,6,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,044a11a0c73966d1362fd0db700728a863521252,Hacking on a query approach that seems acceptable.
1542,https://api.github.com/repos/mozilla/mentat/pulls/8,8,Sqlite factory,"@rnewman this fixes some testing issues, and then adds a cross-CLJC SQLiteConnection test.  Works locally; try it out?
",ncalexan,1097182,2016-07-13T23:18:28Z,MEMBER,True,139,99,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cca5010671200dd93d3cf201f9d1a8121ff0822f,"Part 1: Fix testing errors.

Some of these were just typos, but `with-open` was fatally flawed on
CLJS (we couldn't call `.close` at all), and `deftest-async` was hiding
all failures (due to a typo)."
1543,https://api.github.com/repos/mozilla/mentat/pulls/8,8,Sqlite factory,"@rnewman this fixes some testing issues, and then adds a cross-CLJC SQLiteConnection test.  Works locally; try it out?
",ncalexan,1097182,2016-07-13T23:18:28Z,MEMBER,True,139,99,10,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bf080ced3c51713cf116bf5974f8d6c9af192a2a,Part 2: Add ISQLiteConnectionFactory and CLJC test that uses it.
1544,https://api.github.com/repos/mozilla/mentat/pulls/7,7,Part 1: Implement database on top of SQLite connection.,"We would prefer to talk about a knowledge base on top of a database, but
all the Datomic and DataScript code (and symbols, like :db/add, etc)
refer to the ""database of datoms"", so let's roll with that nomenclature
and try to be specific that the persistent storage-layer is SQLite.
This will become more clear when we actually use SQLite's unique
capabilities for text indexing.
",ncalexan,1097182,2016-07-13T16:21:22Z,MEMBER,False,107,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c398c4b1537ac1907d73e4a191d6ae4398fa54e6,"Part 1: Implement database on top of SQLite connection.

We would prefer to talk about a knowledge base on top of a database, but
all the Datomic and DataScript code (and symbols, like :db/add, etc)
refer to the ""database of datoms"", so let's roll with that nomenclature
and try to be specific that the persistent storage-layer is SQLite.
This will become more clear when we actually use SQLite's unique
capabilities for text indexing."
1545,https://api.github.com/repos/mozilla/mentat/pulls/6,6,Add an async and async testing framework.,"This is a well-worn idea: use a `promise-channel` of `[result nil]` or
`[nil error]` pairs.  The `go-pair` and `<?` macros handle catching
exceptions (important, given that synchronous CLJ code expects to throw
rather than return an error promise or similar), allowing code like:

```
(go-pair
  (let [result (<? (pair-chan-fn))]
    (when (not result)
      (throw (Exception. ""No result!"")))
    (transform result)))
```

to be expressed naturally.  These are the equivalents of `async` and
`await` in JS.

The implementation is complicated by significant incompatibilities
between CLJ and CLJS.  The solution presented here takes care to
separate the macro definitions into CLJ.  Sadly, this requires
namespacing the per-environment symbols explicitly; but we hope to
minimize such code in files like this.

The most significant restriction to this approach is that consumers must
require the transitive dependencies of the macro-defining modules.  See
the included tests (both CLJ and CLJS) for the appropriate
incantations (for pair-chan, core.async, and test).
",ncalexan,1097182,2016-07-11T23:56:20Z,MEMBER,True,452,13,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0a312b4f40515f9230c800651c430164b979c236,"Add an async and async testing framework.

This is a well-worn idea: use a `promise-channel` of `[result nil]` or
`[nil error]` pairs.  The `go-pair` and `<?` macros handle catching
exceptions (important, given that synchronous CLJ code expects to throw
rather than return an error promise or similar), allowing code like:
```
(go-pair
  (let [result (<? (pair-chan-fn))]
    (when (not result)
      (throw (Exception. ""No result!"")))
    (transform result)))
```
to be expressed naturally.  These are the equivalents of `async` and
`await` in JS.

The implementation is complicated by significant incompatibilities
between CLJ and CLJS.  The solution presented here takes care to
separate the macro definitions into CLJ.  Sadly, this requires
namespacing the per-environment symbols explicitly; but we hope to
minimize such code in files like this.

The most significant restriction to this approach is that consumers must
require the transitive dependencies of the macro-defining modules.  See
the included tests (both CLJ and CLJS) for the appropriate
incantations (for pair-chan, core.async, and test)."
1546,https://api.github.com/repos/mozilla/mentat/pulls/6,6,Add an async and async testing framework.,"This is a well-worn idea: use a `promise-channel` of `[result nil]` or
`[nil error]` pairs.  The `go-pair` and `<?` macros handle catching
exceptions (important, given that synchronous CLJ code expects to throw
rather than return an error promise or similar), allowing code like:

```
(go-pair
  (let [result (<? (pair-chan-fn))]
    (when (not result)
      (throw (Exception. ""No result!"")))
    (transform result)))
```

to be expressed naturally.  These are the equivalents of `async` and
`await` in JS.

The implementation is complicated by significant incompatibilities
between CLJ and CLJS.  The solution presented here takes care to
separate the macro definitions into CLJ.  Sadly, this requires
namespacing the per-environment symbols explicitly; but we hope to
minimize such code in files like this.

The most significant restriction to this approach is that consumers must
require the transitive dependencies of the macro-defining modules.  See
the included tests (both CLJ and CLJS) for the appropriate
incantations (for pair-chan, core.async, and test).
",ncalexan,1097182,2016-07-11T23:56:20Z,MEMBER,True,452,13,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d5cfbeaa45b7dae40a4307de1f02ece0d2681781,"Add `tempfile` and `with-tempfile` to CLJS.

We already have a nice library like this for CLJ (tempfile); this builds
the same thing for CLJS, using Node.js's tmp."
1547,https://api.github.com/repos/mozilla/mentat/pulls/6,6,Add an async and async testing framework.,"This is a well-worn idea: use a `promise-channel` of `[result nil]` or
`[nil error]` pairs.  The `go-pair` and `<?` macros handle catching
exceptions (important, given that synchronous CLJ code expects to throw
rather than return an error promise or similar), allowing code like:

```
(go-pair
  (let [result (<? (pair-chan-fn))]
    (when (not result)
      (throw (Exception. ""No result!"")))
    (transform result)))
```

to be expressed naturally.  These are the equivalents of `async` and
`await` in JS.

The implementation is complicated by significant incompatibilities
between CLJ and CLJS.  The solution presented here takes care to
separate the macro definitions into CLJ.  Sadly, this requires
namespacing the per-environment symbols explicitly; but we hope to
minimize such code in files like this.

The most significant restriction to this approach is that consumers must
require the transitive dependencies of the macro-defining modules.  See
the included tests (both CLJ and CLJS) for the appropriate
incantations (for pair-chan, core.async, and test).
",ncalexan,1097182,2016-07-11T23:56:20Z,MEMBER,True,452,13,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,d42e2f02a621285b5b147cd2784615311f4ce4e9,Expose `with-open` to CLJS.
1548,https://api.github.com/repos/mozilla/mentat/pulls/6,6,Add an async and async testing framework.,"This is a well-worn idea: use a `promise-channel` of `[result nil]` or
`[nil error]` pairs.  The `go-pair` and `<?` macros handle catching
exceptions (important, given that synchronous CLJ code expects to throw
rather than return an error promise or similar), allowing code like:

```
(go-pair
  (let [result (<? (pair-chan-fn))]
    (when (not result)
      (throw (Exception. ""No result!"")))
    (transform result)))
```

to be expressed naturally.  These are the equivalents of `async` and
`await` in JS.

The implementation is complicated by significant incompatibilities
between CLJ and CLJS.  The solution presented here takes care to
separate the macro definitions into CLJ.  Sadly, this requires
namespacing the per-environment symbols explicitly; but we hope to
minimize such code in files like this.

The most significant restriction to this approach is that consumers must
require the transitive dependencies of the macro-defining modules.  See
the included tests (both CLJ and CLJS) for the appropriate
incantations (for pair-chan, core.async, and test).
",ncalexan,1097182,2016-07-11T23:56:20Z,MEMBER,True,452,13,15,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,724c37466d64473b24e5b6a9acee5cc8d214950c,Add an SQLite connection abstraction.
1549,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,655d361a4ce0f4e4cddf0f00987f817cfd06d6ad,Ignore /out/.
1550,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,798e05bd9a3a80c93be8e83927614b837c6165b0,"Use correct project name in defproject.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1551,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,b3b998274012c843b2c180b158e5dd5423db190c,"Take a dependency on DataScript.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1552,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,3aac28aa139cb744e1778cd3458b3f96cfa6bd7a,"Take a dependency on honeysql for building queries.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1553,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,75810b924e3d0fa52a7c973571e851e7346f5961,"Use cljsbuild 1.1.3.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1554,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0832396071bd3dc944a1f3ac0c8c17ca7fdadc01,"First pass at translating Datalog queries into SQL.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1555,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,0149bdcd7702f8da35aee28180a02fbc19aeb2b6,Handle non-where-generating bindings.
1556,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,fe47a51a0d534e117581be77913115667d65a598,Add example for elements->sql-projection.
1557,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,60aa3df5b077a90de5d47aa358cd6e407d6b7f90,Add commented form for single expression.
1558,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,c4f2e001129fff387332f47fc3eb1a05c3b21472,Make tests run in both clj and cljs.
1559,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,02759947c802b5507038e2c078f1abe258437ac3,Add license blocks.
1560,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,5a8dbace4acbfcdbb9d99da553e4f757fefe5bfd,quote-style -> sql-quoting-style.
1561,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,69348eb0b4643570442a1cd6f4c2cd33d1e61949,"Define conj-in, a conjing variant of assoc-in."
1562,https://api.github.com/repos/mozilla/mentat/pulls/5,5,Query parsing,,rnewman,91722,2016-07-07T20:07:40Z,COLLABORATOR,False,347,5,9,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,cb1390a36e95d90860dd1de1e210d4495038957f,"Rework query.cljc to be more reductive, into a Context record.

Signed-off-by: Richard Newman <rnewman@twinql.com>"
1563,https://api.github.com/repos/mozilla/mentat/pulls/4,4,Isqliteconnection,"@rnewman built on top of old, 'cuz lazy.

The idea here is to work out some minimal SQLite interface that can be provided by all of `sqlite3` (although I found `promise-sqlite` easier), `SQLite.jsm`, and `jdbc`.

I think it's possible to implement the protocol directly on the JS object, but I wasn't confident, and this is  pretty straightforward.
",ncalexan,1097182,2016-07-06T23:15:11Z,MEMBER,False,75,0,3,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,e519ffddc3ac16f0d9a5583c2ce31546dda74d5c,Add an ISQLiteConnection abstraction.
1564,https://api.github.com/repos/mozilla/mentat/pulls/3,3,Add lein-doo and use cljs.test,"Consensus seems to be that `{clojure,cljs}.test` are good enough.  `lein-doo` seems to Just Work after making some changes to `project.clj`.
",ncalexan,1097182,2016-07-06T02:03:40Z,MEMBER,True,55,27,4,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,08f7084d920755d3654cd95917bc3415a4f239f1,Add lein-doo to run ClojureScript tests.
1565,https://api.github.com/repos/mozilla/mentat/pulls/2,2,Add lein-cljsbuild and adapt datascript's release-js vehicle.,"@rnewman for your interest.
",ncalexan,1097182,2016-07-06T01:30:03Z,MEMBER,False,749,23,14,"UNMAINTAINED A persistent, relational store inspired by Datomic and DataScript.",Rust,bf2b37d113feb4f9ed7a260b8c3e49135baef70d,Add lein-cljsbuild and adapt datascript's release-js vehicle.
